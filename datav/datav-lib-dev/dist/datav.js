(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('vue'), require('crypto'), require('echarts')) :
  typeof define === 'function' && define.amd ? define(['vue', 'crypto', 'echarts'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Datav = factory(global.Vue, global.crypto, global.Echarts$1));
}(this, (function (vue, crypto, Echarts$1) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var crypto__default = /*#__PURE__*/_interopDefaultLegacy(crypto);
  var Echarts__default = /*#__PURE__*/_interopDefaultLegacy(Echarts$1);

  var script = {
    name: 'Loading',
    //父组件传参设置
    props: {
      //宽度
      width: {
        type: [Number, String],
        //允许传入的类型
        "default": 50 //默认值

      },
      //高度
      height: {
        type: [Number, String],
        //允许传入的类型
        "default": 50
      },
      //外圈颜色
      outsideColor: {
        type: String,
        "default": '#3be6cb'
      },
      //内圈颜色
      insideColor: {
        type: String,
        "default": '#02bcfe'
      },
      //旋转及变色速度
      duration: {
        type: [Number, String],
        "default": 2
      }
    },
    setup: function setup(ctx) {
      var outsideColorAnimation = vue.computed(function () {
        return "".concat(ctx.outsideColor, ";").concat(ctx.insideColor, ";").concat(ctx.outsideColor);
      }); //外圈颜色变换

      var insideColorAnimation = vue.computed(function () {
        return "".concat(ctx.insideColor, ";").concat(ctx.outsideColor, ";").concat(ctx.insideColor);
      }); //内圈颜色变换

      return {
        outsideColorAnimation: outsideColorAnimation,
        insideColorAnimation: insideColorAnimation
      };
    }
  };

  var _withId = /*#__PURE__*/vue.withScopeId("data-v-416d18c9");

  vue.pushScopeId("data-v-416d18c9");

  var _hoisted_1 = {
    "class": "loading"
  };
  var _hoisted_2 = {
    "class": "loading-content"
  };

  vue.popScopeId();

  var render = /*#__PURE__*/_withId(function (_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createBlock("div", _hoisted_1, [(vue.openBlock(), vue.createBlock("svg", {
      width: $props.width,
      height: $props.height,
      viewBox: "0 0 50 50",
      preserveAspectRatio: "xMidYMid meet"
    }, [vue.createCommentVNode(" \r\n                stroke-dasharray = 2pir/4 =2*3.1415926*22/4 = 34\r\n             "), vue.createVNode("circle", {
      cx: "25",
      cy: "25",
      r: "22",
      fill: "none",
      "stroke-width": "3",
      stroke: $props.outsideColor,
      "stroke-dasharray": "34",
      "stroke-linecap": "round"
    }, [vue.createCommentVNode(" 旋转动画 "), vue.createVNode("animateTransform", {
      attributeName: "transform",
      type: "rotate",
      values: "0 25 25;360 25 25",
      dur: "".concat(+$props.duration, "s"),
      repeatCount: "indefinite"
    }, null, 8
    /* PROPS */
    , ["dur"]), vue.createCommentVNode(" 变色动画 "), vue.createVNode("animate", {
      attributeName: "stroke",
      values: $setup.outsideColorAnimation,
      dur: "".concat(+$props.duration, "s"),
      repeatCount: "indefinite"
    }, null, 8
    /* PROPS */
    , ["values", "dur"])], 8
    /* PROPS */
    , ["stroke"]), vue.createVNode("circle", {
      cx: "25",
      cy: "25",
      r: "12",
      fill: "none",
      "stroke-width": "3",
      stroke: $props.insideColor,
      "stroke-dasharray": "19",
      "stroke-linecap": "round"
    }, [vue.createCommentVNode(" 旋转动画 "), vue.createVNode("animateTransform", {
      attributeName: "transform",
      type: "rotate",
      values: "0 25 25;-360 25 25",
      dur: "".concat(+$props.duration, "s"),
      repeatCount: "indefinite"
    }, null, 8
    /* PROPS */
    , ["dur"]), vue.createCommentVNode(" 变色动画 "), vue.createVNode("animate", {
      attributeName: "stroke",
      values: $setup.insideColorAnimation,
      dur: "".concat(+$props.duration, "s"),
      repeatCount: "indefinite"
    }, null, 8
    /* PROPS */
    , ["values", "dur"])], 8
    /* PROPS */
    , ["stroke"])], 8
    /* PROPS */
    , ["width", "height"])), vue.createVNode("div", _hoisted_2, [vue.renderSlot(_ctx.$slots, "default")])]);
  });

  function styleInject(css, ref) {
    if ( ref === void 0 ) ref = {};
    var insertAt = ref.insertAt;

    if (!css || typeof document === 'undefined') { return; }

    var head = document.head || document.getElementsByTagName('head')[0];
    var style = document.createElement('style');
    style.type = 'text/css';

    if (insertAt === 'top') {
      if (head.firstChild) {
        head.insertBefore(style, head.firstChild);
      } else {
        head.appendChild(style);
      }
    } else {
      head.appendChild(style);
    }

    if (style.styleSheet) {
      style.styleSheet.cssText = css;
    } else {
      style.appendChild(document.createTextNode(css));
    }
  }

  var css_248z = "@charset \"UTF-8\";\n.loading[data-v-416d18c9] {\n  display: flex;\n  /*居中显示*/\n  flex-direction: column;\n  /*竖向排列 */\n  align-items: center;\n  justify-content: center;\n}";
  styleInject(css_248z);

  script.render = render;
  script.__scopeId = "data-v-416d18c9";
  script.__file = "src/components/Loading/Loading.vue";

  function Loading (Vue) {
    Vue.component(script.name, script);
  }

  const rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate

  let poolPtr = rnds8Pool.length;
  function rng() {
    if (poolPtr > rnds8Pool.length - 16) {
      crypto__default['default'].randomFillSync(rnds8Pool);
      poolPtr = 0;
    }

    return rnds8Pool.slice(poolPtr, poolPtr += 16);
  }

  var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

  function validate(uuid) {
    return typeof uuid === 'string' && REGEX.test(uuid);
  }

  /**
   * Convert array of 16 byte values to UUID string format of the form:
   * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
   */

  const byteToHex = [];

  for (let i = 0; i < 256; ++i) {
    byteToHex.push((i + 0x100).toString(16).substr(1));
  }

  function stringify(arr, offset = 0) {
    // Note: Be careful editing this code!  It's been tuned for performance
    // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
    const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
    // of the following:
    // - One or more input array values don't map to a hex octet (leading to
    // "undefined" in the uuid)
    // - Invalid input values for the RFC `version` or `variant` fields

    if (!validate(uuid)) {
      throw TypeError('Stringified UUID is invalid');
    }

    return uuid;
  }

  function v4(options, buf, offset) {
    options = options || {};
    const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

    rnds[6] = rnds[6] & 0x0f | 0x40;
    rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

    if (buf) {
      offset = offset || 0;

      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = rnds[i];
      }

      return buf;
    }

    return stringify(rnds);
  }

  var script$1 = {
    name: 'flybox',
    props: {
      //外边框颜色
      lineColor: {
        type: String,
        "default": "#235fa7"
      },
      //流星颜色
      starColor: {
        type: String,
        "default": "#4fd2dd"
      },
      //流星长度
      starLength: {
        type: [String, Number],
        "default": 200
      },
      //流星运动速度
      starDuration: {
        type: [String, Number],
        "default": 3
      }
    },
    setup: function setup(ctx) {
      var uuid = v4();
      var width = vue.ref(0);
      var height = vue.ref(0);
      var refName = "flybox";
      var pathId = "".concat(refName, "-path-").concat(uuid);
      var radialGradientId = "".concat(refName, "-gradient-").concat(uuid);
      var maskId = "".concat(refName, "-mask-").concat(uuid);
      var path = vue.computed(function () {
        return "M5 5 L".concat(width.value - 5, " 5 L").concat(width.value - 5, " ").concat(height.value - 5, " L5 ").concat(height.value - 5, " Z");
      });

      var init = function init() {
        var instance = vue.getCurrentInstance();
        var dom = instance.ctx.$refs[refName];
        width.value = dom.clientWidth;
        height.value = dom.clientHeight;
      };

      vue.onMounted(function () {
        init();
      });
      return {
        width: width,
        height: height,
        refName: refName,
        path: path,
        pathId: pathId,
        radialGradientId: radialGradientId,
        maskId: maskId
      };
    }
  };

  var _withId$1 = /*#__PURE__*/vue.withScopeId("data-v-513cc2e2");

  vue.pushScopeId("data-v-513cc2e2");

  var _hoisted_1$1 = /*#__PURE__*/vue.createVNode("stop", {
    offset: "0%",
    "stop-color": "#fff",
    "stop-opacity": "1"
  }, null, -1
  /* HOISTED */
  );

  var _hoisted_2$1 = /*#__PURE__*/vue.createVNode("stop", {
    offset: "100%",
    "stop-color": "#fff",
    "stop-opacity": "0"
  }, null, -1
  /* HOISTED */
  );

  var _hoisted_3 = {
    "class": "fly-box-content"
  };

  vue.popScopeId();

  var render$1 = /*#__PURE__*/_withId$1(function (_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createBlock("div", {
      "class": "flybox",
      ref: $setup.refName
    }, [(vue.openBlock(), vue.createBlock("svg", {
      width: $setup.width,
      height: $setup.height
    }, [vue.createVNode("defs", null, [vue.createVNode("path", {
      id: $setup.pathId,
      d: $setup.path,
      fill: "none"
    }, null, 8
    /* PROPS */
    , ["id", "d"]), vue.createVNode("radialGradient", {
      id: $setup.radialGradientId,
      cx: "50%",
      cy: "50%",
      fx: "100%",
      fy: "50%",
      r: "50%"
    }, [_hoisted_1$1, _hoisted_2$1], 8
    /* PROPS */
    , ["id"]), vue.createVNode("mask", {
      id: $setup.maskId
    }, [vue.createVNode("circle", {
      r: $props.starLength,
      cx: "0",
      cy: "0",
      fill: "url(#".concat($setup.radialGradientId, ")")
    }, [vue.createVNode("animateMotion", {
      dur: "".concat($props.starDuration, "s"),
      path: $setup.path,
      rotate: "auto",
      repeatCount: "indefinite"
    }, null, 8
    /* PROPS */
    , ["dur", "path"])], 8
    /* PROPS */
    , ["r", "fill"])], 8
    /* PROPS */
    , ["id"])]), vue.createVNode("use", {
      href: "#".concat($setup.pathId),
      "stroke-width": "1",
      stroke: $props.lineColor
    }, null, 8
    /* PROPS */
    , ["href", "stroke"]), vue.createVNode("use", {
      href: "#".concat($setup.pathId),
      "stroke-width": "3",
      stroke: $props.starColor,
      mask: "url(#".concat($setup.maskId, ")")
    }, null, 8
    /* PROPS */
    , ["href", "stroke", "mask"])], 8
    /* PROPS */
    , ["width", "height"])), vue.createVNode("div", _hoisted_3, [vue.renderSlot(_ctx.$slots, "default")])], 512
    /* NEED_PATCH */
    );
  });

  var css_248z$1 = ".flybox[data-v-513cc2e2] {\n  position: relative;\n  width: 100%;\n  height: 100%;\n}\n.flybox[data-v-513cc2e2] svg {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n\n.fly-box-content[data-v-513cc2e2] {\n  width: 100%;\n  height: 100%;\n  padding: 5px;\n  box-sizing: border-box;\n}";
  styleInject(css_248z$1);

  script$1.render = render$1;
  script$1.__scopeId = "data-v-513cc2e2";
  script$1.__file = "src/components/FlyBox/FlyBox.vue";

  function flybox (Vue) {
    Vue.component(script$1.name, script$1);
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function unwrapExports (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var runtime_1 = createCommonjsModule(function (module) {
  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var runtime = (function (exports) {

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined$1; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function define(obj, key, value) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
      return obj[key];
    }
    try {
      // IE 8 has a broken Object.defineProperty that only works on DOM objects.
      define({}, "");
    } catch (err) {
      define = function(obj, key, value) {
        return obj[key] = value;
      };
    }

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);

      // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.
      generator._invoke = makeInvokeMethod(innerFn, self, context);

      return generator;
    }
    exports.wrap = wrap;

    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
      try {
        return { type: "normal", arg: fn.call(obj, arg) };
      } catch (err) {
        return { type: "throw", arg: err };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";

    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};

    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}

    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {};
    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype &&
        NativeIteratorPrototype !== Op &&
        hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype =
      Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunction.displayName = define(
      GeneratorFunctionPrototype,
      toStringTagSymbol,
      "GeneratorFunction"
    );

    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function(method) {
        define(prototype, method, function(arg) {
          return this._invoke(method, arg);
        });
      });
    }

    exports.isGeneratorFunction = function(genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor
        ? ctor === GeneratorFunction ||
          // For the native GeneratorFunction constructor, the best we can
          // do is to check its .name property.
          (ctor.displayName || ctor.name) === "GeneratorFunction"
        : false;
    };

    exports.mark = function(genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        define(genFun, toStringTagSymbol, "GeneratorFunction");
      }
      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    exports.awrap = function(arg) {
      return { __await: arg };
    };

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;
          if (value &&
              typeof value === "object" &&
              hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function(value) {
              invoke("next", value, resolve, reject);
            }, function(err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return PromiseImpl.resolve(value).then(function(unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration.
            result.value = unwrapped;
            resolve(result);
          }, function(error) {
            // If a rejected Promise was yielded, throw the rejection back
            // into the async generator function so it can be handled there.
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function(resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise =
          // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(
            callInvokeWithMethodAndArg,
            // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg
          ) : callInvokeWithMethodAndArg();
      }

      // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).
      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);
    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };
    exports.AsyncIterator = AsyncIterator;

    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      if (PromiseImpl === void 0) PromiseImpl = Promise;

      var iter = new AsyncIterator(
        wrap(innerFn, outerFn, self, tryLocsList),
        PromiseImpl
      );

      return exports.isGeneratorFunction(outerFn)
        ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
          });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;

      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;

          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);

          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;

          var record = tryCatch(innerFn, self, context);
          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done
              ? GenStateCompleted
              : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };

          } else if (record.type === "throw") {
            state = GenStateCompleted;
            // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];
      if (method === undefined$1) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;

        if (context.method === "throw") {
          // Note: ["return"] must be used for ES3 parsing compatibility.
          if (delegate.iterator["return"]) {
            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            context.method = "return";
            context.arg = undefined$1;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              // If maybeInvokeDelegate(context) changed context.method from
              // "return" to "throw", let that override the TypeError below.
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError(
            "The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (! info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value;

        // Resume execution at the desired location (see delegateYield).
        context.next = delegate.nextLoc;

        // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.
        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined$1;
        }

      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      }

      // The delegate iterator is finished, so forget it and continue with
      // the outer generator.
      context.delegate = null;
      return ContinueSentinel;
    }

    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);

    define(Gp, toStringTagSymbol, "Generator");

    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    Gp[iteratorSymbol] = function() {
      return this;
    };

    Gp.toString = function() {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = { tryLoc: locs[0] };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{ tryLoc: "root" }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function(object) {
      var keys = [];
      for (var key in object) {
        keys.push(key);
      }
      keys.reverse();

      // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.
      return function next() {
        while (keys.length) {
          var key = keys.pop();
          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.
        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1, next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined$1;
            next.done = true;

            return next;
          };

          return next.next = next;
        }
      }

      // Return an iterator with no values.
      return { next: doneResult };
    }
    exports.values = values;

    function doneResult() {
      return { value: undefined$1, done: true };
    }

    Context.prototype = {
      constructor: Context,

      reset: function(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.
        this.sent = this._sent = undefined$1;
        this.done = false;
        this.delegate = null;

        this.method = "next";
        this.arg = undefined$1;

        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" &&
                hasOwn.call(this, name) &&
                !isNaN(+name.slice(1))) {
              this[name] = undefined$1;
            }
          }
        }
      },

      stop: function() {
        this.done = true;

        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },

      dispatchException: function(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;
        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined$1;
          }

          return !! caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }

            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }

            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }

            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },

      abrupt: function(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev &&
              hasOwn.call(entry, "finallyLoc") &&
              this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry &&
            (type === "break" ||
             type === "continue") &&
            finallyEntry.tryLoc <= arg &&
            arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },

      complete: function(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" ||
            record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },

      finish: function(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },

      "catch": function(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }

        // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.
        throw new Error("illegal catch attempt");
      },

      delegateYield: function(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined$1;
        }

        return ContinueSentinel;
      }
    };

    // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.
    return exports;

  }(
    // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
     module.exports 
  ));

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    Function("r", "regeneratorRuntime = r")(runtime);
  }
  });

  var regenerator = runtime_1;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  var asyncToGenerator = _asyncToGenerator;

  function debounce(delay, callback) {
    var task;
    return function () {
      var _arguments = arguments,
          _this = this;

      clearTimeout(task);
      task = setTimeout(function () {
        callback.apply(_this, _arguments);
      }, delay);
    };
  }

  var script$2 = {
    name: 'container',
    props: {
      //用于接收数据大屏的宽高
      option: Object
    },
    setup: function setup(ctx) {
      var refName = 'Container';
      var width = vue.ref(0);
      var height = vue.ref(0); //组件视口宽

      var originalWidth = vue.ref(0); //组件视口高

      var originalHeight = vue.ref(0);
      var ready = vue.ref(false);
      var context, dom, observer;

      var initSize = function initSize() {
        return new Promise(function (resolve) {
          vue.nextTick(function () {
            dom = context.$refs[refName];

            if (ctx.option && ctx.option.width && ctx.option.height) {
              //获取大屏的真实尺寸
              //将传入的宽高记录下来
              width.value = ctx.option.width;
              height.value = ctx.option.height;
            } else {
              //如果用户没有传入宽高就从dom去拿
              width.value = dom.clientWidth;
              height.value = dom.clientHeight;
            } //判断是否拿到画布宽高，没有拿到则赋值


            if (!originalWidth.value || !originalHeight.value) {
              //传入真实视口的宽
              originalWidth.value = window.screen.width; //传入真实视口的高

              originalHeight.value = window.screen.height;
            }

            resolve();
          });
        });
      };

      var updateSize = function updateSize() {
        //判断当前有没有宽高
        if (width.value && height.value) {
          dom.style.width = "".concat(width.value, "px");
          dom.style.height = "".concat(height.value, "px");
        } else {
          dom.style.width = "".concat(originalWidth.value, "px");
          dom.style.height = "".concat(originalHeight.value, "px");
        }
      };

      var updateScale = function updateScale() {
        //拿到当前真实视口的宽高 
        var currentWidth = document.body.clientWidth;
        var currentHeight = document.body.clientHeight; //获取大屏最终的宽高

        var realWidth = width.value || originalWidth.value;
        var realHeight = height.value || originalHeight.value; //创建变量计算出宽度压缩比和高度压缩比

        var widthScale = currentWidth / realWidth;
        var heightScale = currentHeight / realHeight;
        dom && (dom.style.transform = "scale(".concat(widthScale, ",").concat(heightScale, ")"));
      };

      var onResize = /*#__PURE__*/function () {
        var _ref = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(e) {
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return initSize();

                case 2:
                  updateScale();

                case 3:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function onResize(_x) {
          return _ref.apply(this, arguments);
        };
      }(); //建立监听事件


      var initMutationObserver = function initMutationObserver() {
        var MutationObserver = window.MutationObserver;
        observer = new MutationObserver(onResize); //实例化传入initSize函数

        observer.observe(dom, {
          //开始监听传入dom元素指定监听规则
          attributes: true,
          //打开监听属性
          attributeFilter: ['style'],
          //具体监听属性:style
          attributeOldValue: true
        });
      }; //注销监听事件


      var removeMutationObserver = function removeMutationObserver() {
        if (observer) {
          observer.disconnect();
          observer.takeRecords();
          observer = null;
        }
      };

      vue.onMounted( /*#__PURE__*/asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
        return regenerator.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                ready.value = false; //不进行元素展示

                context = vue.getCurrentInstance().ctx; //第一步调用init方法拿到视口的尺寸

                _context2.next = 4;
                return initSize();

              case 4:
                //更新窗口大小
                updateSize(); //视口压缩算法

                updateScale(); //锁定浏览器放大缩小

                window.addEventListener('resize', debounce(100, onResize)); //启动监听事件

                initMutationObserver(); //初始化完毕后进行元素展示

                ready.value = true;

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }))); //销毁事件

      vue.onUnmounted(function () {
        window.removeEventListener('resize', onResize);
        removeMutationObserver();
      });
      return {
        refName: refName,
        ready: ready
      };
    }
  };

  function render$2(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createBlock("div", {
      id: "container",
      ref: $setup.refName,
      style: _ctx.style
    }, [$setup.ready ? vue.renderSlot(_ctx.$slots, "default", {
      key: 0
    }) : vue.createCommentVNode("v-if", true)], 4
    /* STYLE */
    );
  }

  var css_248z$2 = "#container {\n  position: fixed;\n  top: 0;\n  left: 0;\n  overflow: hidden;\n  transform-origin: left top;\n  z-index: 999;\n}";
  styleInject(css_248z$2);

  script$2.render = render$2;
  script$2.__file = "src/components/Container/Container.vue";

  function container (Vue) {
    Vue.component(script$2.name, script$2);
  }

  var script$3 = {
    name: 'topHeader',
    props: {}
  };

  var _withId$2 = /*#__PURE__*/vue.withScopeId("data-v-1303fca8");

  vue.pushScopeId("data-v-1303fca8");

  var _hoisted_1$2 = {
    "class": "top_header"
  };
  var _hoisted_2$2 = {
    "class": "logo-wrapper"
  };

  var _hoisted_3$1 = /*#__PURE__*/vue.createVNode("div", {
    "class": "logo-text"
  }, [/*#__PURE__*/vue.createCommentVNode(" 中文标题 "), /*#__PURE__*/vue.createVNode("div", {
    "class": "cn-text"
  }, "物联网传感器数据大盘"), /*#__PURE__*/vue.createCommentVNode(" 英文标题 "), /*#__PURE__*/vue.createVNode("div", {
    "class": "en-text"
  }, "Internet of things sensor data market")], -1
  /* HOISTED */
  );

  vue.popScopeId();

  var render$3 = /*#__PURE__*/_withId$2(function (_ctx, _cache, $props, $setup, $data, $options) {
    var _component_headerLogo = vue.resolveComponent("headerLogo");

    return vue.openBlock(), vue.createBlock("div", _hoisted_1$2, [vue.createCommentVNode(" <img class=\"logo\" src=\"http://www.youbaobao.xyz/resource.imooc.png\"> "), vue.createCommentVNode(" 使用headerLogo 组件 SVG图标作为logo "), vue.createVNode("div", _hoisted_2$2, [vue.createVNode(_component_headerLogo, {
      stroke: "#f40be2",
      "stroke-width": "10"
    })]), vue.createCommentVNode(" 标题文字 "), _hoisted_3$1]);
  });

  var css_248z$3 = "@charset \"UTF-8\";\n/*top_header布局*/\n.top_header[data-v-1303fca8] {\n  display: flex;\n  /*左右布局*/\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  background: #241f20;\n  padding: 0 64px;\n  box-sizing: border-box;\n  /*svg logo图标容器样式样式*/\n  /*logo样式*/\n  /*logo文字样式*/\n}\n.top_header[data-v-1303fca8] .logo-wrapper {\n  width: 160px;\n  height: 160px;\n}\n.top_header[data-v-1303fca8] .logo {\n  width: 120px;\n  height: 120px;\n}\n.top_header[data-v-1303fca8] .logo-text {\n  flex: 1;\n  /*充满余下整个空间*/\n  margin-left: 40px;\n  /*距离左边40px*/\n  /*中文标题样式*/\n  /*英文标题样式*/\n}\n.top_header[data-v-1303fca8] .logo-text .cn-text {\n  color: white;\n  /*文字颜色*/\n  font-weight: bold;\n  /*文字粗体*/\n  font-size: 60px;\n  /*文字大小*/\n  letter-spacing: 2px;\n  /*文字间距*/\n}\n.top_header[data-v-1303fca8] .logo-text .en-text {\n  color: white;\n  font-size: 35px;\n  letter-spacing: 2px;\n}";
  styleInject(css_248z$3);

  script$3.render = render$3;
  script$3.__scopeId = "data-v-1303fca8";
  script$3.__file = "src/components/top-header/TopHeader.vue";

  function topHeader (Vue) {
    Vue.component(script$3.name, script$3);
  }

  var script$4 = {
    name: 'headerLogo',
    props: {
      strokeWidth: {
        type: [String, Number],
        "default": 1
      },
      stroke: {
        type: String,
        "default": '#000'
      }
    },
    setup: function setup() {
      vue.onMounted(function () {
        //获取svg的长度必须以path标签内的元素 
        //如果有多条线段的不规则图形就以最长的线段为基准
        //得出最长线段为6617
        var logo = document.getElementsByClassName('headerLogo_path')[0];
        console.log(logo.getTotalLength());
      });
    }
  };

  var _withId$3 = /*#__PURE__*/vue.withScopeId("data-v-5e81d1e6");

  vue.pushScopeId("data-v-5e81d1e6");

  var _hoisted_1$3 = {
    t: "1609564740298",
    "class": "header_logo",
    viewBox: "0 0 1024 1024",
    version: "1.1",
    xmlns: "http://www.w3.org/2000/svg",
    "p-id": "26347",
    width: "200",
    height: "200"
  };

  vue.popScopeId();

  var render$4 = /*#__PURE__*/_withId$3(function (_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createBlock("svg", _hoisted_1$3, [vue.createVNode("path", {
      "class": "headerLogo_path",
      stroke: $props.stroke,
      "stroke-width": $props.strokeWidth,
      d: "M843.5 284.4c-24.4-94.6-110.1-164.5-212.2-164.5-45.4 0-87.5 13.8-122.5 37.4-35-23.6-77.1-37.4-122.5-37.4-102.2 0-187.8 69.9-212.2 164.5-87.2 29-150.2 111.2-150.2 208.1 0 99.4 66 183.2 156.6 210.2-4.8 13-8.3 27-10.6 41-22.1 79.7-42 184.9-54.8 280.2h715c1.2-77-3.9-187.3-22.7-314.4 105.5-16 186.5-106.9 186.5-216.9-0.2-97-63.1-179.2-150.4-208.2zM243.4 574.1c-45.1 0-81.7-36.6-81.7-81.7s36.6-81.7 81.7-81.7 81.7 36.6 81.7 81.7c-0.1 45.1-36.6 81.7-81.7 81.7zM406.7 278c45.1 0 81.7 36.6 81.7 81.7s-36.6 81.7-81.7 81.7-81.7-36.6-81.7-81.7 36.6-81.7 81.7-81.7z m173.6 475.3H427.1c-45.1 0-81.7-39.4-81.7-84.5s36.6-84.5 81.7-84.5c0.9 0 1.7 0.2 2.6 0.2 9-35.3 40.9-61.5 79-61.5 38.2 0 70.2 26.2 79.1 61.7 41.5 3.8 74 41.6 74 84.1 0.1 45.1-36.4 84.5-81.5 84.5z m30.6-311.9c-45.1 0-81.7-36.6-81.7-81.7s36.6-81.7 81.7-81.7 81.7 36.6 81.7 81.7c-0.1 45.1-36.6 81.7-81.7 81.7zM764 574.1c-45.1 0-81.7-36.6-81.7-81.7s36.6-81.7 81.7-81.7 81.7 36.6 81.7 81.7-36.6 81.7-81.7 81.7z m77.4-429.4c2.4 0.6 59.6 15.4 46.2 83.1-0.7 3.3 0.4 6.7 2.7 9 2.4 2.3 5.7 3.3 9 2.7 2.4-0.5 59-11.4 77.7 62.7 1.2 4.6 5.4 7.7 10 7.5 0.7 0 1.4-0.1 2-0.3 5.3-1.4 8.6-6.7 7.2-12.1-17.3-68.5-64-78-87.4-78.3 7.5-75.5-62.1-93.5-62.8-93.6-5.3-1.3-10.7 1.9-12 7.3-1.2 5.3 2.1 10.7 7.4 12z",
      fill: "#1296db",
      "p-id": "26348"
    }, null, 8
    /* PROPS */
    , ["stroke", "stroke-width"])]);
  });

  var css_248z$4 = "@charset \"UTF-8\";\n/*svg容器样式*/\n.header_logo[data-v-5e81d1e6] {\n  width: 100%;\n  height: 100%;\n}\n\n/*svg图形线段样式*/\n.headerLogo_path[data-v-5e81d1e6] {\n  fill: none;\n  animation: headerlogo_animation-5e81d1e6 5s linear infinite forwards;\n}\n\n/*svg图形描边动画*/\n@keyframes headerlogo_animation-5e81d1e6 {\n  /*整个图形不出现*/\n  0% {\n    stroke-dasharray: 6825;\n    stroke-dashoffset: 6825;\n  }\n  /*在50%的时间内绘制完整个logo*/\n  100% {\n    stroke-dasharray: 6825;\n    stroke-dashoffset: 0;\n  }\n  /*在剩余50%的时间内保持整个动画绘制完成状态*/\n  100% {\n    stroke-dasharray: 6825;\n    stroke-dashoffset: 0;\n    fill: #f40be2;\n  }\n}";
  styleInject(css_248z$4);

  script$4.render = render$4;
  script$4.__scopeId = "data-v-5e81d1e6";
  script$4.__file = "src/components/top-header/header-logo/headerLogo.vue";

  function headerLogo (Vue) {
    Vue.component(script$4.name, script$4);
  }

  var script$5 = {
    name: 'TotalUser',
    props: {
      //今日温度
      todaysTemperature: {
        type: Number,
        "default": 0
      },
      //昨日温度
      yesterdayTemperature: {
        type: Number,
        "default": 0
      },
      //增长率
      growthRate: {
        type: Number,
        "default": 0
      }
    },
    setup: function setup(props) {
      var startVal = vue.ref(0); //今日温度起始值

      var startPercent = vue.ref(0); //昨日此时温度起始值

      var startPercent2 = vue.ref(0); //同比增长起始值
      //watch方法在数据渲染之前起作用
      //监听今日温度起始值是否改变,将上一次今日温度值赋值给今日温度起始值

      vue.watch(function () {
        return props.todaysTemperature;
      }, function (nextValue, prevValue) {
        startVal.value = prevValue;
      }); //监听昨日此时温度起始值是否改变,将上一次昨日此时温度值赋值给昨日此时温度起始值

      vue.watch(function () {
        return props.growthRate;
      }, function (nextValue, prevValue) {
        startPercent2.value = prevValue;
      }); //监听增长率起始值是否改变,将上一次增长率值赋值给增长率起始值

      vue.watch(function () {
        return props.yesterdayTemperature;
      }, function (nextValue, prevValue) {
        startPercent.value = prevValue;
      });
      return {
        startVal: startVal,
        startPercent: startPercent,
        startPercent2: startPercent2
      };
    }
  };

  var _withId$4 = /*#__PURE__*/vue.withScopeId("data-v-52530eaf");

  vue.pushScopeId("data-v-52530eaf");

  var _hoisted_1$4 = {
    "class": "TemperatureIncrease"
  };

  var _hoisted_2$3 = /*#__PURE__*/vue.createVNode("div", {
    "class": "title"
  }, "今日实时温度", -1
  /* HOISTED */
  );

  var _hoisted_3$2 = /*#__PURE__*/vue.createVNode("div", {
    "class": "sub-title"
  }, "Real time temperature today", -1
  /* HOISTED */
  );

  var _hoisted_4 = {
    "class": "total"
  };
  var _hoisted_5 = {
    "class": "percent-text"
  };
  var _hoisted_6 = {
    "class": "percent-text-1"
  };

  var _hoisted_7 = /*#__PURE__*/vue.createTextVNode(" 昨日此时温度: ");

  var _hoisted_8 = {
    "class": "percent-text-2"
  };

  var _hoisted_9 = /*#__PURE__*/vue.createTextVNode(" 同比增长: ");

  var _hoisted_10 = {
    "class": "percent"
  };
  var _hoisted_11 = {
    "class": "percent-inner-wrapper"
  };

  vue.popScopeId();

  var render$5 = /*#__PURE__*/_withId$4(function (_ctx, _cache, $props, $setup, $data, $options) {
    var _component_CountTo = vue.resolveComponent("CountTo");

    return vue.openBlock(), vue.createBlock("div", _hoisted_1$4, [_hoisted_2$3, _hoisted_3$2, vue.createVNode("div", _hoisted_4, [vue.createVNode(_component_CountTo, {
      startVal: $setup.startVal,
      endVal: $props.todaysTemperature,
      duration: 1000,
      decimals: 1,
      suffix: "°"
    }, null, 8
    /* PROPS */
    , ["startVal", "endVal"])]), vue.createVNode("div", _hoisted_5, [vue.createVNode("span", _hoisted_6, [_hoisted_7, vue.createVNode(_component_CountTo, {
      startVal: $setup.startPercent,
      endVal: $props.yesterdayTemperature,
      duration: 1000,
      decimals: 1,
      suffix: "°"
    }, null, 8
    /* PROPS */
    , ["startVal", "endVal"])]), vue.createVNode("span", _hoisted_8, [_hoisted_9, vue.createVNode(_component_CountTo, {
      startVal: $setup.startPercent2,
      endVal: $props.growthRate,
      duration: 1000,
      decimals: 1,
      suffix: "%"
    }, null, 8
    /* PROPS */
    , ["startVal", "endVal"])])]), vue.createCommentVNode(" 进度条 "), vue.createVNode("div", _hoisted_10, [vue.createVNode("div", _hoisted_11, [vue.createVNode("div", {
      "class": "percent-inner",
      style: {
        width: "".concat($props.growthRate, "%")
      }
    }, null, 4
    /* STYLE */
    )])])]);
  });

  var css_248z$5 = "@charset \"UTF-8\";\n/*总体布局*/\n.TemperatureIncrease[data-v-52530eaf] {\n  width: 100%;\n  height: 100%;\n  background: #424446;\n  box-shadow: 1 10px 10px rgba(0, 0, 0, 0.3);\n  padding: 20px 40px;\n  box-sizing: border-box;\n  /*大标题*/\n  /*小标题*/\n  /*进度条容器*/\n}\n.TemperatureIncrease[data-v-52530eaf] .title {\n  font-size: 32px;\n}\n.TemperatureIncrease[data-v-52530eaf] .sub-title {\n  font-size: 16px;\n  letter-spacing: 1px;\n  margin-top: 10px;\n}\n.TemperatureIncrease[data-v-52530eaf] .total {\n  font-family: DIN;\n  font-size: 68px;\n  font-weight: bolder;\n  letter-spacing: 2px;\n  padding: 10px 0;\n}\n.TemperatureIncrease[data-v-52530eaf] .percent-text {\n  font-size: 28px;\n  font-family: DIN;\n  letter-spacing: 2px;\n}\n.TemperatureIncrease[data-v-52530eaf] .percent {\n  widows: 100%;\n  height: 20px;\n  box-sizing: border-box;\n  border: 1px solid #fff;\n  margin-top: 20px;\n}\n.TemperatureIncrease[data-v-52530eaf] .percent .percent-inner-wrapper {\n  height: 100%;\n  padding: 2px;\n  box-sizing: border-box;\n  overflow: hidden;\n  /*进度条*/\n}\n.TemperatureIncrease[data-v-52530eaf] .percent .percent-inner-wrapper .percent-inner {\n  width: 10%;\n  height: 100%;\n  background: #969696;\n  transition: width 1s linear;\n  /*增加一个过度动画 宽度线性变化*/\n}";
  styleInject(css_248z$5);

  script$5.render = render$5;
  script$5.__scopeId = "data-v-52530eaf";
  script$5.__file = "src/components/TotalUser/TotalUser.vue";

  function TotalUser (Vue) {
    Vue.component(script$5.name, script$5);
  }

  var lastTime = 0;
  var prefixes = 'webkit moz ms o'.split(' '); // 各浏览器前缀

  var requestAnimationFrame;
  var cancelAnimationFrame;
  var isServer = typeof window === 'undefined';

  if (isServer) {
    requestAnimationFrame = function requestAnimationFrame() {
      return;
    };

    cancelAnimationFrame = function cancelAnimationFrame() {
      return;
    };
  } else {
    requestAnimationFrame = window.requestAnimationFrame;
    cancelAnimationFrame = window.cancelAnimationFrame;
    var prefix; // 通过遍历各浏览器前缀，来得到requestAnimationFrame和cancelAnimationFrame在当前浏览器的实现形式

    for (var i = 0; i < prefixes.length; i++) {
      if (requestAnimationFrame && cancelAnimationFrame) {
        break;
      }

      prefix = prefixes[i];
      requestAnimationFrame = requestAnimationFrame || window[prefix + 'RequestAnimationFrame'];
      cancelAnimationFrame = cancelAnimationFrame || window[prefix + 'CancelAnimationFrame'] || window[prefix + 'CancelRequestAnimationFrame'];
    } // 如果当前浏览器不支持requestAnimationFrame和cancelAnimationFrame，则会退到setTimeout


    if (!requestAnimationFrame || !cancelAnimationFrame) {
      requestAnimationFrame = function requestAnimationFrame(callback) {
        var currTime = new Date().getTime(); // 为了使setTimteout的尽可能的接近每秒60帧的效果

        var timeToCall = Math.max(0, 16 - (currTime - lastTime));
        var id = window.setTimeout(function () {
          callback(currTime + timeToCall);
        }, timeToCall);
        lastTime = currTime + timeToCall;
        return id;
      };

      cancelAnimationFrame = function cancelAnimationFrame(id) {
        window.clearTimeout(id);
      };
    }
  }

  var script$6 = {
    name: 'CountTo',
    props: {
      startVal: {
        type: Number,
        required: false,
        "default": 0
      },
      endVal: {
        type: Number,
        required: false,
        "default": 2017
      },
      duration: {
        type: Number,
        required: false,
        "default": 3000
      },
      autoplay: {
        type: Boolean,
        required: false,
        "default": true
      },
      decimals: {
        type: Number,
        required: false,
        "default": 0,
        validator: function validator(value) {
          return value >= 0;
        }
      },
      decimal: {
        type: String,
        required: false,
        "default": '.'
      },
      separator: {
        type: String,
        required: false,
        "default": ','
      },
      prefix: {
        type: String,
        required: false,
        "default": ''
      },
      suffix: {
        type: String,
        required: false,
        "default": ''
      },
      useEasing: {
        type: Boolean,
        required: false,
        "default": true
      },
      easingFn: {
        type: Function,
        "default": function _default(t, b, c, d) {
          return c * (-Math.pow(2, -10 * t / d) + 1) * 1024 / 1023 + b;
        }
      }
    },
    data: function data() {
      return {
        localStartVal: this.startVal,
        displayValue: this.formatNumber(this.startVal),
        printVal: null,
        paused: false,
        localDuration: this.duration,
        startTime: null,
        timestamp: null,
        remaining: null,
        rAF: null
      };
    },
    computed: {
      countDown: function countDown() {
        return this.startVal > this.endVal;
      }
    },
    watch: {
      startVal: function startVal() {
        if (this.autoplay) {
          this.start();
        }
      },
      endVal: function endVal() {
        if (this.autoplay) {
          this.start();
        }
      }
    },
    mounted: function mounted() {
      if (this.autoplay) {
        this.start();
      }

      this.$emit('mountedCallback');
    },
    methods: {
      start: function start() {
        this.localStartVal = this.startVal;
        this.startTime = null;
        this.localDuration = this.duration;
        this.paused = false;
        this.rAF = requestAnimationFrame(this.count);
      },
      pauseResume: function pauseResume() {
        if (this.paused) {
          this.resume();
          this.paused = false;
        } else {
          this.pause();
          this.paused = true;
        }
      },
      pause: function pause() {
        cancelAnimationFrame(this.rAF);
      },
      resume: function resume() {
        this.startTime = null;
        this.localDuration = +this.remaining;
        this.localStartVal = +this.printVal;
        requestAnimationFrame(this.count);
      },
      reset: function reset() {
        this.startTime = null;
        cancelAnimationFrame(this.rAF);
        this.displayValue = this.formatNumber(this.startVal);
      },
      count: function count(timestamp) {
        if (!this.startTime) this.startTime = timestamp;
        this.timestamp = timestamp;
        var progress = timestamp - this.startTime;
        this.remaining = this.localDuration - progress;

        if (this.useEasing) {
          if (this.countDown) {
            this.printVal = this.localStartVal - this.easingFn(progress, 0, this.localStartVal - this.endVal, this.localDuration);
          } else {
            this.printVal = this.easingFn(progress, this.localStartVal, this.endVal - this.localStartVal, this.localDuration);
          }
        } else {
          if (this.countDown) {
            this.printVal = this.localStartVal - (this.localStartVal - this.endVal) * (progress / this.localDuration);
          } else {
            this.printVal = this.localStartVal + (this.endVal - this.localStartVal) * (progress / this.localDuration);
          }
        }

        if (this.countDown) {
          this.printVal = this.printVal < this.endVal ? this.endVal : this.printVal;
        } else {
          this.printVal = this.printVal > this.endVal ? this.endVal : this.printVal;
        }

        this.displayValue = this.formatNumber(this.printVal);

        if (progress < this.localDuration) {
          this.rAF = requestAnimationFrame(this.count);
        } else {
          this.$emit('callback');
        }
      },
      isNumber: function isNumber(val) {
        return !isNaN(parseFloat(val));
      },
      formatNumber: function formatNumber(num) {
        num = num.toFixed(this.decimals);
        num += '';
        var x = num.split('.');
        var x1 = x[0];
        var x2 = x.length > 1 ? this.decimal + x[1] : '';
        var rgx = /(\d+)(\d{3})/;

        if (this.separator && !this.isNumber(this.separator)) {
          while (rgx.test(x1)) {
            x1 = x1.replace(rgx, '$1' + this.separator + '$2');
          }
        }

        return this.prefix + x1 + x2 + this.suffix;
      }
    },
    destroyed: function destroyed() {
      cancelAnimationFrame(this.rAF);
    }
  };

  function render$6(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createBlock("span", null, vue.toDisplayString($data.displayValue), 1
    /* TEXT */
    );
  }

  script$6.render = render$6;
  script$6.__file = "src/components/VueCountTo/vue-countTo.vue";

  function VueCountTo (Vue) {
    Vue.component(script$6.name, script$6);
  }

  /**
   * zrender: 生成唯一id
   *
   * @author errorrik (errorrik@gmail.com)
   */
  var idStart = 0x0907;

  function _default() {
    return idStart++;
  }

  var guid = _default;

  /**
   * echarts设备环境识别
   *
   * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
   * @author firede[firede@firede.us]
   * @desc thanks zepto.
   */

  /* global wx */
  var env = {};

  if (typeof wx === 'object' && typeof wx.getSystemInfoSync === 'function') {
    // In Weixin Application
    env = {
      browser: {},
      os: {},
      node: false,
      wxa: true,
      // Weixin Application
      canvasSupported: true,
      svgSupported: false,
      touchEventsSupported: true,
      domSupported: false
    };
  } else if (typeof document === 'undefined' && typeof self !== 'undefined') {
    // In worker
    env = {
      browser: {},
      os: {},
      node: false,
      worker: true,
      canvasSupported: true,
      domSupported: false
    };
  } else if (typeof navigator === 'undefined') {
    // In node
    env = {
      browser: {},
      os: {},
      node: true,
      worker: false,
      // Assume canvas is supported
      canvasSupported: true,
      svgSupported: true,
      domSupported: false
    };
  } else {
    env = detect(navigator.userAgent);
  }

  var _default$1 = env; // Zepto.js
  // (c) 2010-2013 Thomas Fuchs
  // Zepto.js may be freely distributed under the MIT license.

  function detect(ua) {
    var os = {};
    var browser = {}; // var webkit = ua.match(/Web[kK]it[\/]{0,1}([\d.]+)/);
    // var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/);
    // var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
    // var ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
    // var iphone = !ipad && ua.match(/(iPhone\sOS)\s([\d_]+)/);
    // var webos = ua.match(/(webOS|hpwOS)[\s\/]([\d.]+)/);
    // var touchpad = webos && ua.match(/TouchPad/);
    // var kindle = ua.match(/Kindle\/([\d.]+)/);
    // var silk = ua.match(/Silk\/([\d._]+)/);
    // var blackberry = ua.match(/(BlackBerry).*Version\/([\d.]+)/);
    // var bb10 = ua.match(/(BB10).*Version\/([\d.]+)/);
    // var rimtabletos = ua.match(/(RIM\sTablet\sOS)\s([\d.]+)/);
    // var playbook = ua.match(/PlayBook/);
    // var chrome = ua.match(/Chrome\/([\d.]+)/) || ua.match(/CriOS\/([\d.]+)/);

    var firefox = ua.match(/Firefox\/([\d.]+)/); // var safari = webkit && ua.match(/Mobile\//) && !chrome;
    // var webview = ua.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/) && !chrome;

    var ie = ua.match(/MSIE\s([\d.]+)/) // IE 11 Trident/7.0; rv:11.0
    || ua.match(/Trident\/.+?rv:(([\d.]+))/);
    var edge = ua.match(/Edge\/([\d.]+)/); // IE 12 and 12+

    var weChat = /micromessenger/i.test(ua); // Todo: clean this up with a better OS/browser seperation:
    // - discern (more) between multiple browsers on android
    // - decide if kindle fire in silk mode is android or not
    // - Firefox on Android doesn't specify the Android version
    // - possibly devide in os, device and browser hashes
    // if (browser.webkit = !!webkit) browser.version = webkit[1];
    // if (android) os.android = true, os.version = android[2];
    // if (iphone && !ipod) os.ios = os.iphone = true, os.version = iphone[2].replace(/_/g, '.');
    // if (ipad) os.ios = os.ipad = true, os.version = ipad[2].replace(/_/g, '.');
    // if (ipod) os.ios = os.ipod = true, os.version = ipod[3] ? ipod[3].replace(/_/g, '.') : null;
    // if (webos) os.webos = true, os.version = webos[2];
    // if (touchpad) os.touchpad = true;
    // if (blackberry) os.blackberry = true, os.version = blackberry[2];
    // if (bb10) os.bb10 = true, os.version = bb10[2];
    // if (rimtabletos) os.rimtabletos = true, os.version = rimtabletos[2];
    // if (playbook) browser.playbook = true;
    // if (kindle) os.kindle = true, os.version = kindle[1];
    // if (silk) browser.silk = true, browser.version = silk[1];
    // if (!silk && os.android && ua.match(/Kindle Fire/)) browser.silk = true;
    // if (chrome) browser.chrome = true, browser.version = chrome[1];

    if (firefox) {
      browser.firefox = true;
      browser.version = firefox[1];
    } // if (safari && (ua.match(/Safari/) || !!os.ios)) browser.safari = true;
    // if (webview) browser.webview = true;


    if (ie) {
      browser.ie = true;
      browser.version = ie[1];
    }

    if (edge) {
      browser.edge = true;
      browser.version = edge[1];
    } // It is difficult to detect WeChat in Win Phone precisely, because ua can
    // not be set on win phone. So we do not consider Win Phone.


    if (weChat) {
      browser.weChat = true;
    } // os.tablet = !!(ipad || playbook || (android && !ua.match(/Mobile/)) ||
    //     (firefox && ua.match(/Tablet/)) || (ie && !ua.match(/Phone/) && ua.match(/Touch/)));
    // os.phone  = !!(!os.tablet && !os.ipod && (android || iphone || webos ||
    //     (chrome && ua.match(/Android/)) || (chrome && ua.match(/CriOS\/([\d.]+)/)) ||
    //     (firefox && ua.match(/Mobile/)) || (ie && ua.match(/Touch/))));


    return {
      browser: browser,
      os: os,
      node: false,
      // 原生canvas支持，改极端点了
      // canvasSupported : !(browser.ie && parseFloat(browser.version) < 9)
      canvasSupported: !!document.createElement('canvas').getContext,
      svgSupported: typeof SVGRect !== 'undefined',
      // works on most browsers
      // IE10/11 does not support touch event, and MS Edge supports them but not by
      // default, so we dont check navigator.maxTouchPoints for them here.
      touchEventsSupported: 'ontouchstart' in window && !browser.ie && !browser.edge,
      // <http://caniuse.com/#search=pointer%20event>.
      pointerEventsSupported: // (1) Firefox supports pointer but not by default, only MS browsers are reliable on pointer
      // events currently. So we dont use that on other browsers unless tested sufficiently.
      // For example, in iOS 13 Mobile Chromium 78, if the touching behavior starts page
      // scroll, the `pointermove` event can not be fired any more. That will break some
      // features like "pan horizontally to move something and pan vertically to page scroll".
      // The horizontal pan probably be interrupted by the casually triggered page scroll.
      // (2) Although IE 10 supports pointer event, it use old style and is different from the
      // standard. So we exclude that. (IE 10 is hardly used on touch device)
      'onpointerdown' in window && (browser.edge || browser.ie && browser.version >= 11),
      // passiveSupported: detectPassiveSupport()
      domSupported: typeof document !== 'undefined'
    };
  } // See https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection
  // function detectPassiveSupport() {
  //     // Test via a getter in the options object to see if the passive property is accessed
  //     var supportsPassive = false;
  //     try {
  //         var opts = Object.defineProperty({}, 'passive', {
  //             get: function() {
  //                 supportsPassive = true;
  //             }
  //         });
  //         window.addEventListener('testPassive', function() {}, opts);
  //     } catch (e) {
  //     }
  //     return supportsPassive;
  // }


  var env_1 = _default$1;

  /**
   * @module zrender/core/util
   */
  // 用于处理merge时无法遍历Date等对象的问题
  var BUILTIN_OBJECT = {
    '[object Function]': 1,
    '[object RegExp]': 1,
    '[object Date]': 1,
    '[object Error]': 1,
    '[object CanvasGradient]': 1,
    '[object CanvasPattern]': 1,
    // For node-canvas
    '[object Image]': 1,
    '[object Canvas]': 1
  };
  var TYPED_ARRAY = {
    '[object Int8Array]': 1,
    '[object Uint8Array]': 1,
    '[object Uint8ClampedArray]': 1,
    '[object Int16Array]': 1,
    '[object Uint16Array]': 1,
    '[object Int32Array]': 1,
    '[object Uint32Array]': 1,
    '[object Float32Array]': 1,
    '[object Float64Array]': 1
  };
  var objToString = Object.prototype.toString;
  var arrayProto = Array.prototype;
  var nativeForEach = arrayProto.forEach;
  var nativeFilter = arrayProto.filter;
  var nativeSlice = arrayProto.slice;
  var nativeMap = arrayProto.map;
  var nativeReduce = arrayProto.reduce; // Avoid assign to an exported variable, for transforming to cjs.

  var methods = {};

  function $override(name, fn) {
    // Clear ctx instance for different environment
    if (name === 'createCanvas') {
      _ctx = null;
    }

    methods[name] = fn;
  }
  /**
   * Those data types can be cloned:
   *     Plain object, Array, TypedArray, number, string, null, undefined.
   * Those data types will be assgined using the orginal data:
   *     BUILTIN_OBJECT
   * Instance of user defined class will be cloned to a plain object, without
   * properties in prototype.
   * Other data types is not supported (not sure what will happen).
   *
   * Caution: do not support clone Date, for performance consideration.
   * (There might be a large number of date in `series.data`).
   * So date should not be modified in and out of echarts.
   *
   * @param {*} source
   * @return {*} new
   */


  function clone(source) {
    if (source == null || typeof source !== 'object') {
      return source;
    }

    var result = source;
    var typeStr = objToString.call(source);

    if (typeStr === '[object Array]') {
      if (!isPrimitive(source)) {
        result = [];

        for (var i = 0, len = source.length; i < len; i++) {
          result[i] = clone(source[i]);
        }
      }
    } else if (TYPED_ARRAY[typeStr]) {
      if (!isPrimitive(source)) {
        var Ctor = source.constructor;

        if (source.constructor.from) {
          result = Ctor.from(source);
        } else {
          result = new Ctor(source.length);

          for (var i = 0, len = source.length; i < len; i++) {
            result[i] = clone(source[i]);
          }
        }
      }
    } else if (!BUILTIN_OBJECT[typeStr] && !isPrimitive(source) && !isDom(source)) {
      result = {};

      for (var key in source) {
        if (source.hasOwnProperty(key)) {
          result[key] = clone(source[key]);
        }
      }
    }

    return result;
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {*} target
   * @param {*} source
   * @param {boolean} [overwrite=false]
   */


  function merge(target, source, overwrite) {
    // We should escapse that source is string
    // and enter for ... in ...
    if (!isObject(source) || !isObject(target)) {
      return overwrite ? clone(source) : target;
    }

    for (var key in source) {
      if (source.hasOwnProperty(key)) {
        var targetProp = target[key];
        var sourceProp = source[key];

        if (isObject(sourceProp) && isObject(targetProp) && !isArray(sourceProp) && !isArray(targetProp) && !isDom(sourceProp) && !isDom(targetProp) && !isBuiltInObject(sourceProp) && !isBuiltInObject(targetProp) && !isPrimitive(sourceProp) && !isPrimitive(targetProp)) {
          // 如果需要递归覆盖，就递归调用merge
          merge(targetProp, sourceProp, overwrite);
        } else if (overwrite || !(key in target)) {
          // 否则只处理overwrite为true，或者在目标对象中没有此属性的情况
          // NOTE，在 target[key] 不存在的时候也是直接覆盖
          target[key] = clone(source[key]);
        }
      }
    }

    return target;
  }
  /**
   * @param {Array} targetAndSources The first item is target, and the rests are source.
   * @param {boolean} [overwrite=false]
   * @return {*} target
   */


  function mergeAll(targetAndSources, overwrite) {
    var result = targetAndSources[0];

    for (var i = 1, len = targetAndSources.length; i < len; i++) {
      result = merge(result, targetAndSources[i], overwrite);
    }

    return result;
  }
  /**
   * @param {*} target
   * @param {*} source
   * @memberOf module:zrender/core/util
   */


  function extend(target, source) {
    for (var key in source) {
      if (source.hasOwnProperty(key)) {
        target[key] = source[key];
      }
    }

    return target;
  }
  /**
   * @param {*} target
   * @param {*} source
   * @param {boolean} [overlay=false]
   * @memberOf module:zrender/core/util
   */


  function defaults(target, source, overlay) {
    for (var key in source) {
      if (source.hasOwnProperty(key) && (overlay ? source[key] != null : target[key] == null)) {
        target[key] = source[key];
      }
    }

    return target;
  }

  var createCanvas = function () {
    return methods.createCanvas();
  };

  methods.createCanvas = function () {
    return document.createElement('canvas');
  }; // FIXME


  var _ctx;

  function getContext() {
    if (!_ctx) {
      // Use util.createCanvas instead of createCanvas
      // because createCanvas may be overwritten in different environment
      _ctx = createCanvas().getContext('2d');
    }

    return _ctx;
  }
  /**
   * 查询数组中元素的index
   * @memberOf module:zrender/core/util
   */


  function indexOf(array, value) {
    if (array) {
      if (array.indexOf) {
        return array.indexOf(value);
      }

      for (var i = 0, len = array.length; i < len; i++) {
        if (array[i] === value) {
          return i;
        }
      }
    }

    return -1;
  }
  /**
   * 构造类继承关系
   *
   * @memberOf module:zrender/core/util
   * @param {Function} clazz 源类
   * @param {Function} baseClazz 基类
   */


  function inherits(clazz, baseClazz) {
    var clazzPrototype = clazz.prototype;

    function F() {}

    F.prototype = baseClazz.prototype;
    clazz.prototype = new F();

    for (var prop in clazzPrototype) {
      if (clazzPrototype.hasOwnProperty(prop)) {
        clazz.prototype[prop] = clazzPrototype[prop];
      }
    }

    clazz.prototype.constructor = clazz;
    clazz.superClass = baseClazz;
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {Object|Function} target
   * @param {Object|Function} sorce
   * @param {boolean} overlay
   */


  function mixin(target, source, overlay) {
    target = 'prototype' in target ? target.prototype : target;
    source = 'prototype' in source ? source.prototype : source;
    defaults(target, source, overlay);
  }
  /**
   * Consider typed array.
   * @param {Array|TypedArray} data
   */


  function isArrayLike(data) {
    if (!data) {
      return;
    }

    if (typeof data === 'string') {
      return false;
    }

    return typeof data.length === 'number';
  }
  /**
   * 数组或对象遍历
   * @memberOf module:zrender/core/util
   * @param {Object|Array} obj
   * @param {Function} cb
   * @param {*} [context]
   */


  function each(obj, cb, context) {
    if (!(obj && cb)) {
      return;
    }

    if (obj.forEach && obj.forEach === nativeForEach) {
      obj.forEach(cb, context);
    } else if (obj.length === +obj.length) {
      for (var i = 0, len = obj.length; i < len; i++) {
        cb.call(context, obj[i], i, obj);
      }
    } else {
      for (var key in obj) {
        if (obj.hasOwnProperty(key)) {
          cb.call(context, obj[key], key, obj);
        }
      }
    }
  }
  /**
   * 数组映射
   * @memberOf module:zrender/core/util
   * @param {Array} obj
   * @param {Function} cb
   * @param {*} [context]
   * @return {Array}
   */


  function map(obj, cb, context) {
    if (!(obj && cb)) {
      return;
    }

    if (obj.map && obj.map === nativeMap) {
      return obj.map(cb, context);
    } else {
      var result = [];

      for (var i = 0, len = obj.length; i < len; i++) {
        result.push(cb.call(context, obj[i], i, obj));
      }

      return result;
    }
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {Array} obj
   * @param {Function} cb
   * @param {Object} [memo]
   * @param {*} [context]
   * @return {Array}
   */


  function reduce(obj, cb, memo, context) {
    if (!(obj && cb)) {
      return;
    }

    if (obj.reduce && obj.reduce === nativeReduce) {
      return obj.reduce(cb, memo, context);
    } else {
      for (var i = 0, len = obj.length; i < len; i++) {
        memo = cb.call(context, memo, obj[i], i, obj);
      }

      return memo;
    }
  }
  /**
   * 数组过滤
   * @memberOf module:zrender/core/util
   * @param {Array} obj
   * @param {Function} cb
   * @param {*} [context]
   * @return {Array}
   */


  function filter(obj, cb, context) {
    if (!(obj && cb)) {
      return;
    }

    if (obj.filter && obj.filter === nativeFilter) {
      return obj.filter(cb, context);
    } else {
      var result = [];

      for (var i = 0, len = obj.length; i < len; i++) {
        if (cb.call(context, obj[i], i, obj)) {
          result.push(obj[i]);
        }
      }

      return result;
    }
  }
  /**
   * 数组项查找
   * @memberOf module:zrender/core/util
   * @param {Array} obj
   * @param {Function} cb
   * @param {*} [context]
   * @return {*}
   */


  function find(obj, cb, context) {
    if (!(obj && cb)) {
      return;
    }

    for (var i = 0, len = obj.length; i < len; i++) {
      if (cb.call(context, obj[i], i, obj)) {
        return obj[i];
      }
    }
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {Function} func
   * @param {*} context
   * @return {Function}
   */


  function bind(func, context) {
    var args = nativeSlice.call(arguments, 2);
    return function () {
      return func.apply(context, args.concat(nativeSlice.call(arguments)));
    };
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {Function} func
   * @return {Function}
   */


  function curry(func) {
    var args = nativeSlice.call(arguments, 1);
    return function () {
      return func.apply(this, args.concat(nativeSlice.call(arguments)));
    };
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {*} value
   * @return {boolean}
   */


  function isArray(value) {
    return objToString.call(value) === '[object Array]';
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {*} value
   * @return {boolean}
   */


  function isFunction(value) {
    return typeof value === 'function';
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {*} value
   * @return {boolean}
   */


  function isString(value) {
    return objToString.call(value) === '[object String]';
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {*} value
   * @return {boolean}
   */


  function isObject(value) {
    // Avoid a V8 JIT bug in Chrome 19-20.
    // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
    var type = typeof value;
    return type === 'function' || !!value && type === 'object';
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {*} value
   * @return {boolean}
   */


  function isBuiltInObject(value) {
    return !!BUILTIN_OBJECT[objToString.call(value)];
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {*} value
   * @return {boolean}
   */


  function isTypedArray(value) {
    return !!TYPED_ARRAY[objToString.call(value)];
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {*} value
   * @return {boolean}
   */


  function isDom(value) {
    return typeof value === 'object' && typeof value.nodeType === 'number' && typeof value.ownerDocument === 'object';
  }
  /**
   * Whether is exactly NaN. Notice isNaN('a') returns true.
   * @param {*} value
   * @return {boolean}
   */


  function eqNaN(value) {
    /* eslint-disable-next-line no-self-compare */
    return value !== value;
  }
  /**
   * If value1 is not null, then return value1, otherwise judget rest of values.
   * Low performance.
   * @memberOf module:zrender/core/util
   * @return {*} Final value
   */


  function retrieve(values) {
    for (var i = 0, len = arguments.length; i < len; i++) {
      if (arguments[i] != null) {
        return arguments[i];
      }
    }
  }

  function retrieve2(value0, value1) {
    return value0 != null ? value0 : value1;
  }

  function retrieve3(value0, value1, value2) {
    return value0 != null ? value0 : value1 != null ? value1 : value2;
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {Array} arr
   * @param {number} startIndex
   * @param {number} endIndex
   * @return {Array}
   */


  function slice() {
    return Function.call.apply(nativeSlice, arguments);
  }
  /**
   * Normalize css liked array configuration
   * e.g.
   *  3 => [3, 3, 3, 3]
   *  [4, 2] => [4, 2, 4, 2]
   *  [4, 3, 2] => [4, 3, 2, 3]
   * @param {number|Array.<number>} val
   * @return {Array.<number>}
   */


  function normalizeCssArray(val) {
    if (typeof val === 'number') {
      return [val, val, val, val];
    }

    var len = val.length;

    if (len === 2) {
      // vertical | horizontal
      return [val[0], val[1], val[0], val[1]];
    } else if (len === 3) {
      // top | horizontal | bottom
      return [val[0], val[1], val[2], val[1]];
    }

    return val;
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {boolean} condition
   * @param {string} message
   */


  function assert(condition, message) {
    if (!condition) {
      throw new Error(message);
    }
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {string} str string to be trimed
   * @return {string} trimed string
   */


  function trim(str) {
    if (str == null) {
      return null;
    } else if (typeof str.trim === 'function') {
      return str.trim();
    } else {
      return str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
    }
  }

  var primitiveKey = '__ec_primitive__';
  /**
   * Set an object as primitive to be ignored traversing children in clone or merge
   */

  function setAsPrimitive(obj) {
    obj[primitiveKey] = true;
  }

  function isPrimitive(obj) {
    return obj[primitiveKey];
  }
  /**
   * @constructor
   * @param {Object} obj Only apply `ownProperty`.
   */


  function HashMap(obj) {
    var isArr = isArray(obj); // Key should not be set on this, otherwise
    // methods get/set/... may be overrided.

    this.data = {};
    var thisMap = this;
    obj instanceof HashMap ? obj.each(visit) : obj && each(obj, visit);

    function visit(value, key) {
      isArr ? thisMap.set(value, key) : thisMap.set(key, value);
    }
  }

  HashMap.prototype = {
    constructor: HashMap,
    // Do not provide `has` method to avoid defining what is `has`.
    // (We usually treat `null` and `undefined` as the same, different
    // from ES6 Map).
    get: function (key) {
      return this.data.hasOwnProperty(key) ? this.data[key] : null;
    },
    set: function (key, value) {
      // Comparing with invocation chaining, `return value` is more commonly
      // used in this case: `var someVal = map.set('a', genVal());`
      return this.data[key] = value;
    },
    // Although util.each can be performed on this hashMap directly, user
    // should not use the exposed keys, who are prefixed.
    each: function (cb, context) {
      context !== void 0 && (cb = bind(cb, context));
      /* eslint-disable guard-for-in */

      for (var key in this.data) {
        this.data.hasOwnProperty(key) && cb(this.data[key], key);
      }
      /* eslint-enable guard-for-in */

    },
    // Do not use this method if performance sensitive.
    removeKey: function (key) {
      delete this.data[key];
    }
  };

  function createHashMap(obj) {
    return new HashMap(obj);
  }

  function concatArray(a, b) {
    var newArray = new a.constructor(a.length + b.length);

    for (var i = 0; i < a.length; i++) {
      newArray[i] = a[i];
    }

    var offset = a.length;

    for (i = 0; i < b.length; i++) {
      newArray[i + offset] = b[i];
    }

    return newArray;
  }

  function noop() {}

  var $override_1 = $override;
  var clone_1 = clone;
  var merge_1 = merge;
  var mergeAll_1 = mergeAll;
  var extend_1 = extend;
  var defaults_1 = defaults;
  var createCanvas_1 = createCanvas;
  var getContext_1 = getContext;
  var indexOf_1 = indexOf;
  var inherits_1 = inherits;
  var mixin_1 = mixin;
  var isArrayLike_1 = isArrayLike;
  var each_1 = each;
  var map_1 = map;
  var reduce_1 = reduce;
  var filter_1 = filter;
  var find_1 = find;
  var bind_1 = bind;
  var curry_1 = curry;
  var isArray_1 = isArray;
  var isFunction_1 = isFunction;
  var isString_1 = isString;
  var isObject_1 = isObject;
  var isBuiltInObject_1 = isBuiltInObject;
  var isTypedArray_1 = isTypedArray;
  var isDom_1 = isDom;
  var eqNaN_1 = eqNaN;
  var retrieve_1 = retrieve;
  var retrieve2_1 = retrieve2;
  var retrieve3_1 = retrieve3;
  var slice_1 = slice;
  var normalizeCssArray_1 = normalizeCssArray;
  var assert_1 = assert;
  var trim_1 = trim;
  var setAsPrimitive_1 = setAsPrimitive;
  var isPrimitive_1 = isPrimitive;
  var createHashMap_1 = createHashMap;
  var concatArray_1 = concatArray;
  var noop_1 = noop;

  var util = {
  	$override: $override_1,
  	clone: clone_1,
  	merge: merge_1,
  	mergeAll: mergeAll_1,
  	extend: extend_1,
  	defaults: defaults_1,
  	createCanvas: createCanvas_1,
  	getContext: getContext_1,
  	indexOf: indexOf_1,
  	inherits: inherits_1,
  	mixin: mixin_1,
  	isArrayLike: isArrayLike_1,
  	each: each_1,
  	map: map_1,
  	reduce: reduce_1,
  	filter: filter_1,
  	find: find_1,
  	bind: bind_1,
  	curry: curry_1,
  	isArray: isArray_1,
  	isFunction: isFunction_1,
  	isString: isString_1,
  	isObject: isObject_1,
  	isBuiltInObject: isBuiltInObject_1,
  	isTypedArray: isTypedArray_1,
  	isDom: isDom_1,
  	eqNaN: eqNaN_1,
  	retrieve: retrieve_1,
  	retrieve2: retrieve2_1,
  	retrieve3: retrieve3_1,
  	slice: slice_1,
  	normalizeCssArray: normalizeCssArray_1,
  	assert: assert_1,
  	trim: trim_1,
  	setAsPrimitive: setAsPrimitive_1,
  	isPrimitive: isPrimitive_1,
  	createHashMap: createHashMap_1,
  	concatArray: concatArray_1,
  	noop: noop_1
  };

  /* global Float32Array */
  var ArrayCtor = typeof Float32Array === 'undefined' ? Array : Float32Array;
  /**
   * 创建一个向量
   * @param {number} [x=0]
   * @param {number} [y=0]
   * @return {Vector2}
   */

  function create(x, y) {
    var out = new ArrayCtor(2);

    if (x == null) {
      x = 0;
    }

    if (y == null) {
      y = 0;
    }

    out[0] = x;
    out[1] = y;
    return out;
  }
  /**
   * 复制向量数据
   * @param {Vector2} out
   * @param {Vector2} v
   * @return {Vector2}
   */


  function copy(out, v) {
    out[0] = v[0];
    out[1] = v[1];
    return out;
  }
  /**
   * 克隆一个向量
   * @param {Vector2} v
   * @return {Vector2}
   */


  function clone$1(v) {
    var out = new ArrayCtor(2);
    out[0] = v[0];
    out[1] = v[1];
    return out;
  }
  /**
   * 设置向量的两个项
   * @param {Vector2} out
   * @param {number} a
   * @param {number} b
   * @return {Vector2} 结果
   */


  function set(out, a, b) {
    out[0] = a;
    out[1] = b;
    return out;
  }
  /**
   * 向量相加
   * @param {Vector2} out
   * @param {Vector2} v1
   * @param {Vector2} v2
   */


  function add(out, v1, v2) {
    out[0] = v1[0] + v2[0];
    out[1] = v1[1] + v2[1];
    return out;
  }
  /**
   * 向量缩放后相加
   * @param {Vector2} out
   * @param {Vector2} v1
   * @param {Vector2} v2
   * @param {number} a
   */


  function scaleAndAdd(out, v1, v2, a) {
    out[0] = v1[0] + v2[0] * a;
    out[1] = v1[1] + v2[1] * a;
    return out;
  }
  /**
   * 向量相减
   * @param {Vector2} out
   * @param {Vector2} v1
   * @param {Vector2} v2
   */


  function sub(out, v1, v2) {
    out[0] = v1[0] - v2[0];
    out[1] = v1[1] - v2[1];
    return out;
  }
  /**
   * 向量长度
   * @param {Vector2} v
   * @return {number}
   */


  function len(v) {
    return Math.sqrt(lenSquare(v));
  }

  var length = len; // jshint ignore:line

  /**
   * 向量长度平方
   * @param {Vector2} v
   * @return {number}
   */

  function lenSquare(v) {
    return v[0] * v[0] + v[1] * v[1];
  }

  var lengthSquare = lenSquare;
  /**
   * 向量乘法
   * @param {Vector2} out
   * @param {Vector2} v1
   * @param {Vector2} v2
   */

  function mul(out, v1, v2) {
    out[0] = v1[0] * v2[0];
    out[1] = v1[1] * v2[1];
    return out;
  }
  /**
   * 向量除法
   * @param {Vector2} out
   * @param {Vector2} v1
   * @param {Vector2} v2
   */


  function div(out, v1, v2) {
    out[0] = v1[0] / v2[0];
    out[1] = v1[1] / v2[1];
    return out;
  }
  /**
   * 向量点乘
   * @param {Vector2} v1
   * @param {Vector2} v2
   * @return {number}
   */


  function dot(v1, v2) {
    return v1[0] * v2[0] + v1[1] * v2[1];
  }
  /**
   * 向量缩放
   * @param {Vector2} out
   * @param {Vector2} v
   * @param {number} s
   */


  function scale(out, v, s) {
    out[0] = v[0] * s;
    out[1] = v[1] * s;
    return out;
  }
  /**
   * 向量归一化
   * @param {Vector2} out
   * @param {Vector2} v
   */


  function normalize(out, v) {
    var d = len(v);

    if (d === 0) {
      out[0] = 0;
      out[1] = 0;
    } else {
      out[0] = v[0] / d;
      out[1] = v[1] / d;
    }

    return out;
  }
  /**
   * 计算向量间距离
   * @param {Vector2} v1
   * @param {Vector2} v2
   * @return {number}
   */


  function distance(v1, v2) {
    return Math.sqrt((v1[0] - v2[0]) * (v1[0] - v2[0]) + (v1[1] - v2[1]) * (v1[1] - v2[1]));
  }

  var dist = distance;
  /**
   * 向量距离平方
   * @param {Vector2} v1
   * @param {Vector2} v2
   * @return {number}
   */

  function distanceSquare(v1, v2) {
    return (v1[0] - v2[0]) * (v1[0] - v2[0]) + (v1[1] - v2[1]) * (v1[1] - v2[1]);
  }

  var distSquare = distanceSquare;
  /**
   * 求负向量
   * @param {Vector2} out
   * @param {Vector2} v
   */

  function negate(out, v) {
    out[0] = -v[0];
    out[1] = -v[1];
    return out;
  }
  /**
   * 插值两个点
   * @param {Vector2} out
   * @param {Vector2} v1
   * @param {Vector2} v2
   * @param {number} t
   */


  function lerp(out, v1, v2, t) {
    out[0] = v1[0] + t * (v2[0] - v1[0]);
    out[1] = v1[1] + t * (v2[1] - v1[1]);
    return out;
  }
  /**
   * 矩阵左乘向量
   * @param {Vector2} out
   * @param {Vector2} v
   * @param {Vector2} m
   */


  function applyTransform(out, v, m) {
    var x = v[0];
    var y = v[1];
    out[0] = m[0] * x + m[2] * y + m[4];
    out[1] = m[1] * x + m[3] * y + m[5];
    return out;
  }
  /**
   * 求两个向量最小值
   * @param  {Vector2} out
   * @param  {Vector2} v1
   * @param  {Vector2} v2
   */


  function min(out, v1, v2) {
    out[0] = Math.min(v1[0], v2[0]);
    out[1] = Math.min(v1[1], v2[1]);
    return out;
  }
  /**
   * 求两个向量最大值
   * @param  {Vector2} out
   * @param  {Vector2} v1
   * @param  {Vector2} v2
   */


  function max(out, v1, v2) {
    out[0] = Math.max(v1[0], v2[0]);
    out[1] = Math.max(v1[1], v2[1]);
    return out;
  }

  var create_1 = create;
  var copy_1 = copy;
  var clone_1$1 = clone$1;
  var set_1 = set;
  var add_1 = add;
  var scaleAndAdd_1 = scaleAndAdd;
  var sub_1 = sub;
  var len_1 = len;
  var length_1 = length;
  var lenSquare_1 = lenSquare;
  var lengthSquare_1 = lengthSquare;
  var mul_1 = mul;
  var div_1 = div;
  var dot_1 = dot;
  var scale_1 = scale;
  var normalize_1 = normalize;
  var distance_1 = distance;
  var dist_1 = dist;
  var distanceSquare_1 = distanceSquare;
  var distSquare_1 = distSquare;
  var negate_1 = negate;
  var lerp_1 = lerp;
  var applyTransform_1 = applyTransform;
  var min_1 = min;
  var max_1 = max;

  var vector = {
  	create: create_1,
  	copy: copy_1,
  	clone: clone_1$1,
  	set: set_1,
  	add: add_1,
  	scaleAndAdd: scaleAndAdd_1,
  	sub: sub_1,
  	len: len_1,
  	length: length_1,
  	lenSquare: lenSquare_1,
  	lengthSquare: lengthSquare_1,
  	mul: mul_1,
  	div: div_1,
  	dot: dot_1,
  	scale: scale_1,
  	normalize: normalize_1,
  	distance: distance_1,
  	dist: dist_1,
  	distanceSquare: distanceSquare_1,
  	distSquare: distSquare_1,
  	negate: negate_1,
  	lerp: lerp_1,
  	applyTransform: applyTransform_1,
  	min: min_1,
  	max: max_1
  };

  // TODO Draggable for group
  // FIXME Draggable on element which has parent rotation or scale
  function Draggable() {
    this.on('mousedown', this._dragStart, this);
    this.on('mousemove', this._drag, this);
    this.on('mouseup', this._dragEnd, this); // `mosuemove` and `mouseup` can be continue to fire when dragging.
    // See [Drag outside] in `Handler.js`. So we do not need to trigger
    // `_dragEnd` when globalout. That would brings better user experience.
    // this.on('globalout', this._dragEnd, this);
    // this._dropTarget = null;
    // this._draggingTarget = null;
    // this._x = 0;
    // this._y = 0;
  }

  Draggable.prototype = {
    constructor: Draggable,
    _dragStart: function (e) {
      var draggingTarget = e.target; // Find if there is draggable in the ancestor

      while (draggingTarget && !draggingTarget.draggable) {
        draggingTarget = draggingTarget.parent;
      }

      if (draggingTarget) {
        this._draggingTarget = draggingTarget;
        draggingTarget.dragging = true;
        this._x = e.offsetX;
        this._y = e.offsetY;
        this.dispatchToElement(param(draggingTarget, e), 'dragstart', e.event);
      }
    },
    _drag: function (e) {
      var draggingTarget = this._draggingTarget;

      if (draggingTarget) {
        var x = e.offsetX;
        var y = e.offsetY;
        var dx = x - this._x;
        var dy = y - this._y;
        this._x = x;
        this._y = y;
        draggingTarget.drift(dx, dy, e);
        this.dispatchToElement(param(draggingTarget, e), 'drag', e.event);
        var dropTarget = this.findHover(x, y, draggingTarget).target;
        var lastDropTarget = this._dropTarget;
        this._dropTarget = dropTarget;

        if (draggingTarget !== dropTarget) {
          if (lastDropTarget && dropTarget !== lastDropTarget) {
            this.dispatchToElement(param(lastDropTarget, e), 'dragleave', e.event);
          }

          if (dropTarget && dropTarget !== lastDropTarget) {
            this.dispatchToElement(param(dropTarget, e), 'dragenter', e.event);
          }
        }
      }
    },
    _dragEnd: function (e) {
      var draggingTarget = this._draggingTarget;

      if (draggingTarget) {
        draggingTarget.dragging = false;
      }

      this.dispatchToElement(param(draggingTarget, e), 'dragend', e.event);

      if (this._dropTarget) {
        this.dispatchToElement(param(this._dropTarget, e), 'drop', e.event);
      }

      this._draggingTarget = null;
      this._dropTarget = null;
    }
  };

  function param(target, e) {
    return {
      target: target,
      topTarget: e && e.topTarget
    };
  }

  var _default$2 = Draggable;
  var Draggable_1 = _default$2;

  /**
   * Event Mixin
   * @module zrender/mixin/Eventful
   * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
   *         pissang (https://www.github.com/pissang)
   */
  var arrySlice = Array.prototype.slice;
  /**
   * Event dispatcher.
   *
   * @alias module:zrender/mixin/Eventful
   * @constructor
   * @param {Object} [eventProcessor] The object eventProcessor is the scope when
   *        `eventProcessor.xxx` called.
   * @param {Function} [eventProcessor.normalizeQuery]
   *        param: {string|Object} Raw query.
   *        return: {string|Object} Normalized query.
   * @param {Function} [eventProcessor.filter] Event will be dispatched only
   *        if it returns `true`.
   *        param: {string} eventType
   *        param: {string|Object} query
   *        return: {boolean}
   * @param {Function} [eventProcessor.afterTrigger] Called after all handlers called.
   *        param: {string} eventType
   */

  var Eventful = function (eventProcessor) {
    this._$handlers = {};
    this._$eventProcessor = eventProcessor;
  };

  Eventful.prototype = {
    constructor: Eventful,

    /**
     * The handler can only be triggered once, then removed.
     *
     * @param {string} event The event name.
     * @param {string|Object} [query] Condition used on event filter.
     * @param {Function} handler The event handler.
     * @param {Object} context
     */
    one: function (event, query, handler, context) {
      return on(this, event, query, handler, context, true);
    },

    /**
     * Bind a handler.
     *
     * @param {string} event The event name.
     * @param {string|Object} [query] Condition used on event filter.
     * @param {Function} handler The event handler.
     * @param {Object} [context]
     */
    on: function (event, query, handler, context) {
      return on(this, event, query, handler, context, false);
    },

    /**
     * Whether any handler has bound.
     *
     * @param  {string}  event
     * @return {boolean}
     */
    isSilent: function (event) {
      var _h = this._$handlers;
      return !_h[event] || !_h[event].length;
    },

    /**
     * Unbind a event.
     *
     * @param {string} [event] The event name.
     *        If no `event` input, "off" all listeners.
     * @param {Function} [handler] The event handler.
     *        If no `handler` input, "off" all listeners of the `event`.
     */
    off: function (event, handler) {
      var _h = this._$handlers;

      if (!event) {
        this._$handlers = {};
        return this;
      }

      if (handler) {
        if (_h[event]) {
          var newList = [];

          for (var i = 0, l = _h[event].length; i < l; i++) {
            if (_h[event][i].h !== handler) {
              newList.push(_h[event][i]);
            }
          }

          _h[event] = newList;
        }

        if (_h[event] && _h[event].length === 0) {
          delete _h[event];
        }
      } else {
        delete _h[event];
      }

      return this;
    },

    /**
     * Dispatch a event.
     *
     * @param {string} type The event name.
     */
    trigger: function (type) {
      var _h = this._$handlers[type];
      var eventProcessor = this._$eventProcessor;

      if (_h) {
        var args = arguments;
        var argLen = args.length;

        if (argLen > 3) {
          args = arrySlice.call(args, 1);
        }

        var len = _h.length;

        for (var i = 0; i < len;) {
          var hItem = _h[i];

          if (eventProcessor && eventProcessor.filter && hItem.query != null && !eventProcessor.filter(type, hItem.query)) {
            i++;
            continue;
          } // Optimize advise from backbone


          switch (argLen) {
            case 1:
              hItem.h.call(hItem.ctx);
              break;

            case 2:
              hItem.h.call(hItem.ctx, args[1]);
              break;

            case 3:
              hItem.h.call(hItem.ctx, args[1], args[2]);
              break;

            default:
              // have more than 2 given arguments
              hItem.h.apply(hItem.ctx, args);
              break;
          }

          if (hItem.one) {
            _h.splice(i, 1);

            len--;
          } else {
            i++;
          }
        }
      }

      eventProcessor && eventProcessor.afterTrigger && eventProcessor.afterTrigger(type);
      return this;
    },

    /**
     * Dispatch a event with context, which is specified at the last parameter.
     *
     * @param {string} type The event name.
     */
    triggerWithContext: function (type) {
      var _h = this._$handlers[type];
      var eventProcessor = this._$eventProcessor;

      if (_h) {
        var args = arguments;
        var argLen = args.length;

        if (argLen > 4) {
          args = arrySlice.call(args, 1, args.length - 1);
        }

        var ctx = args[args.length - 1];
        var len = _h.length;

        for (var i = 0; i < len;) {
          var hItem = _h[i];

          if (eventProcessor && eventProcessor.filter && hItem.query != null && !eventProcessor.filter(type, hItem.query)) {
            i++;
            continue;
          } // Optimize advise from backbone


          switch (argLen) {
            case 1:
              hItem.h.call(ctx);
              break;

            case 2:
              hItem.h.call(ctx, args[1]);
              break;

            case 3:
              hItem.h.call(ctx, args[1], args[2]);
              break;

            default:
              // have more than 2 given arguments
              hItem.h.apply(ctx, args);
              break;
          }

          if (hItem.one) {
            _h.splice(i, 1);

            len--;
          } else {
            i++;
          }
        }
      }

      eventProcessor && eventProcessor.afterTrigger && eventProcessor.afterTrigger(type);
      return this;
    }
  };

  function normalizeQuery(host, query) {
    var eventProcessor = host._$eventProcessor;

    if (query != null && eventProcessor && eventProcessor.normalizeQuery) {
      query = eventProcessor.normalizeQuery(query);
    }

    return query;
  }

  function on(eventful, event, query, handler, context, isOnce) {
    var _h = eventful._$handlers;

    if (typeof query === 'function') {
      context = handler;
      handler = query;
      query = null;
    }

    if (!handler || !event) {
      return eventful;
    }

    query = normalizeQuery(eventful, query);

    if (!_h[event]) {
      _h[event] = [];
    }

    for (var i = 0; i < _h[event].length; i++) {
      if (_h[event][i].h === handler) {
        return eventful;
      }
    }

    var wrap = {
      h: handler,
      one: isOnce,
      query: query,
      ctx: context || eventful,
      // FIXME
      // Do not publish this feature util it is proved that it makes sense.
      callAtLast: handler.zrEventfulCallAtLast
    };
    var lastIndex = _h[event].length - 1;
    var lastWrap = _h[event][lastIndex];
    lastWrap && lastWrap.callAtLast ? _h[event].splice(lastIndex, 0, wrap) : _h[event].push(wrap);
    return eventful;
  } // ----------------------
  // The events in zrender
  // ----------------------

  /**
   * @event module:zrender/mixin/Eventful#onclick
   * @type {Function}
   * @default null
   */

  /**
   * @event module:zrender/mixin/Eventful#onmouseover
   * @type {Function}
   * @default null
   */

  /**
   * @event module:zrender/mixin/Eventful#onmouseout
   * @type {Function}
   * @default null
   */

  /**
   * @event module:zrender/mixin/Eventful#onmousemove
   * @type {Function}
   * @default null
   */

  /**
   * @event module:zrender/mixin/Eventful#onmousewheel
   * @type {Function}
   * @default null
   */

  /**
   * @event module:zrender/mixin/Eventful#onmousedown
   * @type {Function}
   * @default null
   */

  /**
   * @event module:zrender/mixin/Eventful#onmouseup
   * @type {Function}
   * @default null
   */

  /**
   * @event module:zrender/mixin/Eventful#ondrag
   * @type {Function}
   * @default null
   */

  /**
   * @event module:zrender/mixin/Eventful#ondragstart
   * @type {Function}
   * @default null
   */

  /**
   * @event module:zrender/mixin/Eventful#ondragend
   * @type {Function}
   * @default null
   */

  /**
   * @event module:zrender/mixin/Eventful#ondragenter
   * @type {Function}
   * @default null
   */

  /**
   * @event module:zrender/mixin/Eventful#ondragleave
   * @type {Function}
   * @default null
   */

  /**
   * @event module:zrender/mixin/Eventful#ondragover
   * @type {Function}
   * @default null
   */

  /**
   * @event module:zrender/mixin/Eventful#ondrop
   * @type {Function}
   * @default null
   */


  var _default$3 = Eventful;
  var Eventful_1 = _default$3;

  /**
   * The algoritm is learnt from
   * https://franklinta.com/2014/09/08/computing-css-matrix3d-transforms/
   * And we made some optimization for matrix inversion.
   * Other similar approaches:
   * "cv::getPerspectiveTransform", "Direct Linear Transformation".
   */
  var LN2 = Math.log(2);

  function determinant(rows, rank, rowStart, rowMask, colMask, detCache) {
    var cacheKey = rowMask + '-' + colMask;
    var fullRank = rows.length;

    if (detCache.hasOwnProperty(cacheKey)) {
      return detCache[cacheKey];
    }

    if (rank === 1) {
      // In this case the colMask must be like: `11101111`. We can find the place of `0`.
      var colStart = Math.round(Math.log((1 << fullRank) - 1 & ~colMask) / LN2);
      return rows[rowStart][colStart];
    }

    var subRowMask = rowMask | 1 << rowStart;
    var subRowStart = rowStart + 1;

    while (rowMask & 1 << subRowStart) {
      subRowStart++;
    }

    var sum = 0;

    for (var j = 0, colLocalIdx = 0; j < fullRank; j++) {
      var colTag = 1 << j;

      if (!(colTag & colMask)) {
        sum += (colLocalIdx % 2 ? -1 : 1) * rows[rowStart][j] // det(subMatrix(0, j))
        * determinant(rows, rank - 1, subRowStart, subRowMask, colMask | colTag, detCache);
        colLocalIdx++;
      }
    }

    detCache[cacheKey] = sum;
    return sum;
  }
  /**
   * Usage:
   * ```js
   * var transformer = buildTransformer(
   *     [10, 44, 100, 44, 100, 300, 10, 300],
   *     [50, 54, 130, 14, 140, 330, 14, 220]
   * );
   * var out = [];
   * transformer && transformer([11, 33], out);
   * ```
   *
   * Notice: `buildTransformer` may take more than 10ms in some Android device.
   *
   * @param {Array.<number>} src source four points, [x0, y0, x1, y1, x2, y2, x3, y3]
   * @param {Array.<number>} dest destination four points, [x0, y0, x1, y1, x2, y2, x3, y3]
   * @return {Function} transformer If fail, return null/undefined.
   */


  function buildTransformer(src, dest) {
    var mA = [[src[0], src[1], 1, 0, 0, 0, -dest[0] * src[0], -dest[0] * src[1]], [0, 0, 0, src[0], src[1], 1, -dest[1] * src[0], -dest[1] * src[1]], [src[2], src[3], 1, 0, 0, 0, -dest[2] * src[2], -dest[2] * src[3]], [0, 0, 0, src[2], src[3], 1, -dest[3] * src[2], -dest[3] * src[3]], [src[4], src[5], 1, 0, 0, 0, -dest[4] * src[4], -dest[4] * src[5]], [0, 0, 0, src[4], src[5], 1, -dest[5] * src[4], -dest[5] * src[5]], [src[6], src[7], 1, 0, 0, 0, -dest[6] * src[6], -dest[6] * src[7]], [0, 0, 0, src[6], src[7], 1, -dest[7] * src[6], -dest[7] * src[7]]];
    var detCache = {};
    var det = determinant(mA, 8, 0, 0, 0, detCache);

    if (det === 0) {
      // can not make transformer when and only when
      // any three of the markers are collinear.
      return;
    } // `invert(mA) * dest`, that is, `adj(mA) / det * dest`.


    var vh = [];

    for (var i = 0; i < 8; i++) {
      for (var j = 0; j < 8; j++) {
        vh[j] == null && (vh[j] = 0);
        vh[j] += ((i + j) % 2 ? -1 : 1) * // det(subMatrix(i, j))
        determinant(mA, 7, i === 0 ? 1 : 0, 1 << i, 1 << j, detCache) / det * dest[i];
      }
    }

    return function (out, srcPointX, srcPointY) {
      var pk = srcPointX * vh[6] + srcPointY * vh[7] + 1;
      out[0] = (srcPointX * vh[0] + srcPointY * vh[1] + vh[2]) / pk;
      out[1] = (srcPointX * vh[3] + srcPointY * vh[4] + vh[5]) / pk;
    };
  }

  var buildTransformer_1 = buildTransformer;

  var fourPointsTransform = {
  	buildTransformer: buildTransformer_1
  };

  var buildTransformer$1 = fourPointsTransform.buildTransformer;
  var EVENT_SAVED_PROP = '___zrEVENTSAVED';
  var _calcOut = [];
  /**
   * Transform "local coord" from `elFrom` to `elTarget`.
   * "local coord": the coord based on the input `el`. The origin point is at
   *     the position of "left: 0; top: 0;" in the `el`.
   *
   * Support when CSS transform is used.
   *
   * Having the `out` (that is, `[outX, outY]`), we can create an DOM element
   * and set the CSS style as "left: outX; top: outY;" and append it to `elTarge`
   * to locate the element.
   *
   * For example, this code below positions a child of `document.body` on the event
   * point, no matter whether `body` has `margin`/`paddin`/`transfrom`/... :
   * ```js
   * transformLocalCoord(out, container, document.body, event.offsetX, event.offsetY);
   * if (!eqNaN(out[0])) {
   *     // Then locate the tip element on the event point.
   *     var tipEl = document.createElement('div');
   *     tipEl.style.cssText = 'position: absolute; left:' + out[0] + ';top:' + out[1] + ';';
   *     document.body.appendChild(tipEl);
   * }
   * ```
   *
   * Notice: In some env this method is not supported. If called, `out` will be `[NaN, NaN]`.
   *
   * @param {Array.<number>} out [inX: number, inY: number] The output..
   *        If can not transform, `out` will not be modified but return `false`.
   * @param {HTMLElement} elFrom The `[inX, inY]` is based on elFrom.
   * @param {HTMLElement} elTarget The `out` is based on elTarget.
   * @param {number} inX
   * @param {number} inY
   * @return {boolean} Whether transform successfully.
   */

  function transformLocalCoord(out, elFrom, elTarget, inX, inY) {
    return transformCoordWithViewport(_calcOut, elFrom, inX, inY, true) && transformCoordWithViewport(out, elTarget, _calcOut[0], _calcOut[1]);
  }
  /**
   * Transform between a "viewport coord" and a "local coord".
   * "viewport coord": the coord based on the left-top corner of the viewport
   *     of the browser.
   * "local coord": the coord based on the input `el`. The origin point is at
   *     the position of "left: 0; top: 0;" in the `el`.
   *
   * Support the case when CSS transform is used on el.
   *
   * @param {Array.<number>} out [inX: number, inY: number] The output. If `inverse: false`,
   *        it represents "local coord", otherwise "vireport coord".
   *        If can not transform, `out` will not be modified but return `false`.
   * @param {HTMLElement} el The "local coord" is based on the `el`, see comment above.
   * @param {number} inX If `inverse: false`,
   *        it represents "vireport coord", otherwise "local coord".
   * @param {number} inY If `inverse: false`,
   *        it represents "vireport coord", otherwise "local coord".
   * @param {boolean} [inverse=false]
   *        `true`: from "viewport coord" to "local coord".
   *        `false`: from "local coord" to "viewport coord".
   * @return {boolean} Whether transform successfully.
   */


  function transformCoordWithViewport(out, el, inX, inY, inverse) {
    if (el.getBoundingClientRect && env_1.domSupported && !isCanvasEl(el)) {
      var saved = el[EVENT_SAVED_PROP] || (el[EVENT_SAVED_PROP] = {});
      var markers = prepareCoordMarkers(el, saved);
      var transformer = preparePointerTransformer(markers, saved, inverse);

      if (transformer) {
        transformer(out, inX, inY);
        return true;
      }
    }

    return false;
  }

  function prepareCoordMarkers(el, saved) {
    var markers = saved.markers;

    if (markers) {
      return markers;
    }

    markers = saved.markers = [];
    var propLR = ['left', 'right'];
    var propTB = ['top', 'bottom'];

    for (var i = 0; i < 4; i++) {
      var marker = document.createElement('div');
      var stl = marker.style;
      var idxLR = i % 2;
      var idxTB = (i >> 1) % 2;
      stl.cssText = ['position: absolute', 'visibility: hidden', 'padding: 0', 'margin: 0', 'border-width: 0', 'user-select: none', 'width:0', 'height:0', // 'width: 5px',
      // 'height: 5px',
      propLR[idxLR] + ':0', propTB[idxTB] + ':0', propLR[1 - idxLR] + ':auto', propTB[1 - idxTB] + ':auto', ''].join('!important;');
      el.appendChild(marker);
      markers.push(marker);
    }

    return markers;
  }

  function preparePointerTransformer(markers, saved, inverse) {
    var transformerName = inverse ? 'invTrans' : 'trans';
    var transformer = saved[transformerName];
    var oldSrcCoords = saved.srcCoords;
    var oldCoordTheSame = true;
    var srcCoords = [];
    var destCoords = [];

    for (var i = 0; i < 4; i++) {
      var rect = markers[i].getBoundingClientRect();
      var ii = 2 * i;
      var x = rect.left;
      var y = rect.top;
      srcCoords.push(x, y);
      oldCoordTheSame = oldCoordTheSame && oldSrcCoords && x === oldSrcCoords[ii] && y === oldSrcCoords[ii + 1];
      destCoords.push(markers[i].offsetLeft, markers[i].offsetTop);
    } // Cache to avoid time consuming of `buildTransformer`.


    return oldCoordTheSame && transformer ? transformer : (saved.srcCoords = srcCoords, saved[transformerName] = inverse ? buildTransformer$1(destCoords, srcCoords) : buildTransformer$1(srcCoords, destCoords));
  }

  function isCanvasEl(el) {
    return el.nodeName.toUpperCase() === 'CANVAS';
  }

  var transformLocalCoord_1 = transformLocalCoord;
  var transformCoordWithViewport_1 = transformCoordWithViewport;
  var isCanvasEl_1 = isCanvasEl;

  var dom = {
  	transformLocalCoord: transformLocalCoord_1,
  	transformCoordWithViewport: transformCoordWithViewport_1,
  	isCanvasEl: isCanvasEl_1
  };

  var Dispatcher = Eventful_1;





  var isCanvasEl$1 = dom.isCanvasEl;
  var transformCoordWithViewport$1 = dom.transformCoordWithViewport;

  /**
   * Utilities for mouse or touch events.
   */
  var isDomLevel2 = typeof window !== 'undefined' && !!window.addEventListener;
  var MOUSE_EVENT_REG = /^(?:mouse|pointer|contextmenu|drag|drop)|click/;
  var _calcOut$1 = [];
  /**
   * Get the `zrX` and `zrY`, which are relative to the top-left of
   * the input `el`.
   * CSS transform (2D & 3D) is supported.
   *
   * The strategy to fetch the coords:
   * + If `calculate` is not set as `true`, users of this method should
   * ensure that `el` is the same or the same size & location as `e.target`.
   * Otherwise the result coords are probably not expected. Because we
   * firstly try to get coords from e.offsetX/e.offsetY.
   * + If `calculate` is set as `true`, the input `el` can be any element
   * and we force to calculate the coords based on `el`.
   * + The input `el` should be positionable (not position:static).
   *
   * The force `calculate` can be used in case like:
   * When mousemove event triggered on ec tooltip, `e.target` is not `el`(zr painter.dom).
   *
   * @param {HTMLElement} el DOM element.
   * @param {Event} e Mouse event or touch event.
   * @param {Object} out Get `out.zrX` and `out.zrY` as the result.
   * @param {boolean} [calculate=false] Whether to force calculate
   *        the coordinates but not use ones provided by browser.
   */

  function clientToLocal(el, e, out, calculate) {
    out = out || {}; // According to the W3C Working Draft, offsetX and offsetY should be relative
    // to the padding edge of the target element. The only browser using this convention
    // is IE. Webkit uses the border edge, Opera uses the content edge, and FireFox does
    // not support the properties.
    // (see http://www.jacklmoore.com/notes/mouse-position/)
    // In zr painter.dom, padding edge equals to border edge.

    if (calculate || !env_1.canvasSupported) {
      calculateZrXY(el, e, out);
    } // Caution: In FireFox, layerX/layerY Mouse position relative to the closest positioned
    // ancestor element, so we should make sure el is positioned (e.g., not position:static).
    // BTW1, Webkit don't return the same results as FF in non-simple cases (like add
    // zoom-factor, overflow / opacity layers, transforms ...)
    // BTW2, (ev.offsetY || ev.pageY - $(ev.target).offset().top) is not correct in preserve-3d.
    // <https://bugs.jquery.com/ticket/8523#comment:14>
    // BTW3, In ff, offsetX/offsetY is always 0.
    else if (env_1.browser.firefox && e.layerX != null && e.layerX !== e.offsetX) {
        out.zrX = e.layerX;
        out.zrY = e.layerY;
      } // For IE6+, chrome, safari, opera. (When will ff support offsetX?)
      else if (e.offsetX != null) {
          out.zrX = e.offsetX;
          out.zrY = e.offsetY;
        } // For some other device, e.g., IOS safari.
        else {
            calculateZrXY(el, e, out);
          }

    return out;
  }

  function calculateZrXY(el, e, out) {
    // BlackBerry 5, iOS 3 (original iPhone) don't have getBoundingRect.
    if (env_1.domSupported && el.getBoundingClientRect) {
      var ex = e.clientX;
      var ey = e.clientY;

      if (isCanvasEl$1(el)) {
        // Original approach, which do not support CSS transform.
        // marker can not be locationed in a canvas container
        // (getBoundingClientRect is always 0). We do not support
        // that input a pre-created canvas to zr while using css
        // transform in iOS.
        var box = el.getBoundingClientRect();
        out.zrX = ex - box.left;
        out.zrY = ey - box.top;
        return;
      } else {
        if (transformCoordWithViewport$1(_calcOut$1, el, ex, ey)) {
          out.zrX = _calcOut$1[0];
          out.zrY = _calcOut$1[1];
          return;
        }
      }
    }

    out.zrX = out.zrY = 0;
  }
  /**
   * Find native event compat for legency IE.
   * Should be called at the begining of a native event listener.
   *
   * @param {Event} [e] Mouse event or touch event or pointer event.
   *        For lagency IE, we use `window.event` is used.
   * @return {Event} The native event.
   */


  function getNativeEvent(e) {
    return e || window.event;
  }
  /**
   * Normalize the coordinates of the input event.
   *
   * Get the `e.zrX` and `e.zrY`, which are relative to the top-left of
   * the input `el`.
   * Get `e.zrDelta` if using mouse wheel.
   * Get `e.which`, see the comment inside this function.
   *
   * Do not calculate repeatly if `zrX` and `zrY` already exist.
   *
   * Notice: see comments in `clientToLocal`. check the relationship
   * between the result coords and the parameters `el` and `calculate`.
   *
   * @param {HTMLElement} el DOM element.
   * @param {Event} [e] See `getNativeEvent`.
   * @param {boolean} [calculate=false] Whether to force calculate
   *        the coordinates but not use ones provided by browser.
   * @return {UIEvent} The normalized native UIEvent.
   */


  function normalizeEvent(el, e, calculate) {
    e = getNativeEvent(e);

    if (e.zrX != null) {
      return e;
    }

    var eventType = e.type;
    var isTouch = eventType && eventType.indexOf('touch') >= 0;

    if (!isTouch) {
      clientToLocal(el, e, e, calculate);
      e.zrDelta = e.wheelDelta ? e.wheelDelta / 120 : -(e.detail || 0) / 3;
    } else {
      var touch = eventType !== 'touchend' ? e.targetTouches[0] : e.changedTouches[0];
      touch && clientToLocal(el, touch, e, calculate);
    } // Add which for click: 1 === left; 2 === middle; 3 === right; otherwise: 0;
    // See jQuery: https://github.com/jquery/jquery/blob/master/src/event.js
    // If e.which has been defined, it may be readonly,
    // see: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/which


    var button = e.button;

    if (e.which == null && button !== undefined && MOUSE_EVENT_REG.test(e.type)) {
      e.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
    } // [Caution]: `e.which` from browser is not always reliable. For example,
    // when press left button and `mousemove (pointermove)` in Edge, the `e.which`
    // is 65536 and the `e.button` is -1. But the `mouseup (pointerup)` and
    // `mousedown (pointerdown)` is the same as Chrome does.


    return e;
  }
  /**
   * @param {HTMLElement} el
   * @param {string} name
   * @param {Function} handler
   * @param {Object|boolean} opt If boolean, means `opt.capture`
   * @param {boolean} [opt.capture=false]
   * @param {boolean} [opt.passive=false]
   */


  function addEventListener(el, name, handler, opt) {
    if (isDomLevel2) {
      // Reproduct the console warning:
      // [Violation] Added non-passive event listener to a scroll-blocking <some> event.
      // Consider marking event handler as 'passive' to make the page more responsive.
      // Just set console log level: verbose in chrome dev tool.
      // then the warning log will be printed when addEventListener called.
      // See https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md
      // We have not yet found a neat way to using passive. Because in zrender the dom event
      // listener delegate all of the upper events of element. Some of those events need
      // to prevent default. For example, the feature `preventDefaultMouseMove` of echarts.
      // Before passive can be adopted, these issues should be considered:
      // (1) Whether and how a zrender user specifies an event listener passive. And by default,
      // passive or not.
      // (2) How to tread that some zrender event listener is passive, and some is not. If
      // we use other way but not preventDefault of mousewheel and touchmove, browser
      // compatibility should be handled.
      // var opts = (env.passiveSupported && name === 'mousewheel')
      //     ? {passive: true}
      //     // By default, the third param of el.addEventListener is `capture: false`.
      //     : void 0;
      // el.addEventListener(name, handler /* , opts */);
      el.addEventListener(name, handler, opt);
    } else {
      // For simplicity, do not implement `setCapture` for IE9-.
      el.attachEvent('on' + name, handler);
    }
  }
  /**
   * Parameter are the same as `addEventListener`.
   *
   * Notice that if a listener is registered twice, one with capture and one without,
   * remove each one separately. Removal of a capturing listener does not affect a
   * non-capturing version of the same listener, and vice versa.
   */


  function removeEventListener(el, name, handler, opt) {
    if (isDomLevel2) {
      el.removeEventListener(name, handler, opt);
    } else {
      el.detachEvent('on' + name, handler);
    }
  }
  /**
   * preventDefault and stopPropagation.
   * Notice: do not use this method in zrender. It can only be
   * used by upper applications if necessary.
   *
   * @param {Event} e A mouse or touch event.
   */


  var stop = isDomLevel2 ? function (e) {
    e.preventDefault();
    e.stopPropagation();
    e.cancelBubble = true;
  } : function (e) {
    e.returnValue = false;
    e.cancelBubble = true;
  };
  /**
   * This method only works for mouseup and mousedown. The functionality is restricted
   * for fault tolerance, See the `e.which` compatibility above.
   *
   * @param {MouseEvent} e
   * @return {boolean}
   */

  function isMiddleOrRightButtonOnMouseUpDown(e) {
    return e.which === 2 || e.which === 3;
  }
  /**
   * To be removed.
   * @deprecated
   */


  function notLeftMouse(e) {
    // If e.which is undefined, considered as left mouse event.
    return e.which > 1;
  } // For backward compatibility


  var clientToLocal_1 = clientToLocal;
  var getNativeEvent_1 = getNativeEvent;
  var normalizeEvent_1 = normalizeEvent;
  var addEventListener_1 = addEventListener;
  var removeEventListener_1 = removeEventListener;
  var stop_1 = stop;
  var isMiddleOrRightButtonOnMouseUpDown_1 = isMiddleOrRightButtonOnMouseUpDown;
  var notLeftMouse_1 = notLeftMouse;

  var event = {
  	Dispatcher: Dispatcher,
  	clientToLocal: clientToLocal_1,
  	getNativeEvent: getNativeEvent_1,
  	normalizeEvent: normalizeEvent_1,
  	addEventListener: addEventListener_1,
  	removeEventListener: removeEventListener_1,
  	stop: stop_1,
  	isMiddleOrRightButtonOnMouseUpDown: isMiddleOrRightButtonOnMouseUpDown_1,
  	notLeftMouse: notLeftMouse_1
  };

  /**
   * Only implements needed gestures for mobile.
   */
  var GestureMgr = function () {
    /**
     * @private
     * @type {Array.<Object>}
     */
    this._track = [];
  };

  GestureMgr.prototype = {
    constructor: GestureMgr,
    recognize: function (event, target, root) {
      this._doTrack(event, target, root);

      return this._recognize(event);
    },
    clear: function () {
      this._track.length = 0;
      return this;
    },
    _doTrack: function (event$1, target, root) {
      var touches = event$1.touches;

      if (!touches) {
        return;
      }

      var trackItem = {
        points: [],
        touches: [],
        target: target,
        event: event$1
      };

      for (var i = 0, len = touches.length; i < len; i++) {
        var touch = touches[i];
        var pos = event.clientToLocal(root, touch, {});
        trackItem.points.push([pos.zrX, pos.zrY]);
        trackItem.touches.push(touch);
      }

      this._track.push(trackItem);
    },
    _recognize: function (event) {
      for (var eventName in recognizers) {
        if (recognizers.hasOwnProperty(eventName)) {
          var gestureInfo = recognizers[eventName](this._track, event);

          if (gestureInfo) {
            return gestureInfo;
          }
        }
      }
    }
  };

  function dist$1(pointPair) {
    var dx = pointPair[1][0] - pointPair[0][0];
    var dy = pointPair[1][1] - pointPair[0][1];
    return Math.sqrt(dx * dx + dy * dy);
  }

  function center(pointPair) {
    return [(pointPair[0][0] + pointPair[1][0]) / 2, (pointPair[0][1] + pointPair[1][1]) / 2];
  }

  var recognizers = {
    pinch: function (track, event) {
      var trackLen = track.length;

      if (!trackLen) {
        return;
      }

      var pinchEnd = (track[trackLen - 1] || {}).points;
      var pinchPre = (track[trackLen - 2] || {}).points || pinchEnd;

      if (pinchPre && pinchPre.length > 1 && pinchEnd && pinchEnd.length > 1) {
        var pinchScale = dist$1(pinchEnd) / dist$1(pinchPre);
        !isFinite(pinchScale) && (pinchScale = 1);
        event.pinchScale = pinchScale;
        var pinchCenter = center(pinchEnd);
        event.pinchX = pinchCenter[0];
        event.pinchY = pinchCenter[1];
        return {
          type: 'pinch',
          target: track[0].target,
          event: event
        };
      }
    } // Only pinch currently.

  };
  var _default$4 = GestureMgr;
  var GestureMgr_1 = _default$4;

  /**
   * [The interface between `Handler` and `HandlerProxy`]:
   *
   * The default `HandlerProxy` only support the common standard web environment
   * (e.g., standalone browser, headless browser, embed browser in mobild APP, ...).
   * But `HandlerProxy` can be replaced to support more non-standard environment
   * (e.g., mini app), or to support more feature that the default `HandlerProxy`
   * not provided (like echarts-gl did).
   * So the interface between `Handler` and `HandlerProxy` should be stable. Do not
   * make break changes util inevitable. The interface include the public methods
   * of `Handler` and the events listed in `handlerNames` below, by which `HandlerProxy`
   * drives `Handler`.
   */

  /**
   * [Drag outside]:
   *
   * That is, triggering `mousemove` and `mouseup` event when the pointer is out of the
   * zrender area when dragging. That is important for the improvement of the user experience
   * when dragging something near the boundary without being terminated unexpectedly.
   *
   * We originally consider to introduce new events like `pagemovemove` and `pagemouseup`
   * to resolve this issue. But some drawbacks of it is described in
   * https://github.com/ecomfe/zrender/pull/536#issuecomment-560286899
   *
   * Instead, we referenced the specifications:
   * https://www.w3.org/TR/touch-events/#the-touchmove-event
   * https://www.w3.org/TR/2014/WD-DOM-Level-3-Events-20140925/#event-type-mousemove
   * where the the mousemove/touchmove can be continue to fire if the user began a drag
   * operation and the pointer has left the boundary. (for the mouse event, browsers
   * only do it on `document` and when the pointer has left the boundary of the browser.)
   *
   * So the default `HandlerProxy` supports this feature similarly: if it is in the dragging
   * state (see `pointerCapture` in `HandlerProxy`), the `mousemove` and `mouseup` continue
   * to fire until release the pointer. That is implemented by listen to those event on
   * `document`.
   * If we implement some other `HandlerProxy` only for touch device, that would be easier.
   * The touch event support this feature by default.
   *
   * Note:
   * There might be some cases that the mouse event can not be
   * received on `document`. For example,
   * (A) `useCapture` is not supported and some user defined event listeners on the ancestor
   * of zr dom throw Error .
   * (B) `useCapture` is not supported Some user defined event listeners on the ancestor of
   * zr dom call `stopPropagation`.
   * In these cases, the `mousemove` event might be keep triggered event
   * if the mouse is released. We try to reduce the side-effect in those cases.
   * That is, do nothing (especially, `findHover`) in those cases. See `isOutsideBoundary`.
   *
   * Note:
   * If `HandlerProxy` listens to `document` with `useCapture`, `HandlerProxy` needs to
   * make sure `stopPropagation` and `preventDefault` doing nothing if and only if the event
   * target is not zrender dom. Becuase it is dangerous to enable users to call them in
   * `document` capture phase to prevent the propagation to any listener of the webpage.
   * But they are needed to work when the pointer inside the zrender dom.
   */
  var SILENT = 'silent';

  function makeEventPacket(eveType, targetInfo, event) {
    return {
      type: eveType,
      event: event,
      // target can only be an element that is not silent.
      target: targetInfo.target,
      // topTarget can be a silent element.
      topTarget: targetInfo.topTarget,
      cancelBubble: false,
      offsetX: event.zrX,
      offsetY: event.zrY,
      gestureEvent: event.gestureEvent,
      pinchX: event.pinchX,
      pinchY: event.pinchY,
      pinchScale: event.pinchScale,
      wheelDelta: event.zrDelta,
      zrByTouch: event.zrByTouch,
      which: event.which,
      stop: stopEvent
    };
  }

  function stopEvent() {
    event.stop(this.event);
  }

  function EmptyProxy() {}

  EmptyProxy.prototype.dispose = function () {};

  var handlerNames = ['click', 'dblclick', 'mousewheel', 'mouseout', 'mouseup', 'mousedown', 'mousemove', 'contextmenu'];
  /**
   * @alias module:zrender/Handler
   * @constructor
   * @extends module:zrender/mixin/Eventful
   * @param {module:zrender/Storage} storage Storage instance.
   * @param {module:zrender/Painter} painter Painter instance.
   * @param {module:zrender/dom/HandlerProxy} proxy HandlerProxy instance.
   * @param {HTMLElement} painterRoot painter.root (not painter.getViewportRoot()).
   */

  var Handler = function (storage, painter, proxy, painterRoot) {
    Eventful_1.call(this);
    this.storage = storage;
    this.painter = painter;
    this.painterRoot = painterRoot;
    proxy = proxy || new EmptyProxy();
    /**
     * Proxy of event. can be Dom, WebGLSurface, etc.
     */

    this.proxy = null;
    /**
     * {target, topTarget, x, y}
     * @private
     * @type {Object}
     */

    this._hovered = {};
    /**
     * @private
     * @type {Date}
     */

    this._lastTouchMoment;
    /**
     * @private
     * @type {number}
     */

    this._lastX;
    /**
     * @private
     * @type {number}
     */

    this._lastY;
    /**
     * @private
     * @type {module:zrender/core/GestureMgr}
     */

    this._gestureMgr;
    Draggable_1.call(this);
    this.setHandlerProxy(proxy);
  };

  Handler.prototype = {
    constructor: Handler,
    setHandlerProxy: function (proxy) {
      if (this.proxy) {
        this.proxy.dispose();
      }

      if (proxy) {
        util.each(handlerNames, function (name) {
          proxy.on && proxy.on(name, this[name], this);
        }, this); // Attach handler

        proxy.handler = this;
      }

      this.proxy = proxy;
    },
    mousemove: function (event) {
      var x = event.zrX;
      var y = event.zrY;
      var isOutside = isOutsideBoundary(this, x, y);
      var lastHovered = this._hovered;
      var lastHoveredTarget = lastHovered.target; // If lastHoveredTarget is removed from zr (detected by '__zr') by some API call
      // (like 'setOption' or 'dispatchAction') in event handlers, we should find
      // lastHovered again here. Otherwise 'mouseout' can not be triggered normally.
      // See #6198.

      if (lastHoveredTarget && !lastHoveredTarget.__zr) {
        lastHovered = this.findHover(lastHovered.x, lastHovered.y);
        lastHoveredTarget = lastHovered.target;
      }

      var hovered = this._hovered = isOutside ? {
        x: x,
        y: y
      } : this.findHover(x, y);
      var hoveredTarget = hovered.target;
      var proxy = this.proxy;
      proxy.setCursor && proxy.setCursor(hoveredTarget ? hoveredTarget.cursor : 'default'); // Mouse out on previous hovered element

      if (lastHoveredTarget && hoveredTarget !== lastHoveredTarget) {
        this.dispatchToElement(lastHovered, 'mouseout', event);
      } // Mouse moving on one element


      this.dispatchToElement(hovered, 'mousemove', event); // Mouse over on a new element

      if (hoveredTarget && hoveredTarget !== lastHoveredTarget) {
        this.dispatchToElement(hovered, 'mouseover', event);
      }
    },
    mouseout: function (event) {
      var eventControl = event.zrEventControl;
      var zrIsToLocalDOM = event.zrIsToLocalDOM;

      if (eventControl !== 'only_globalout') {
        this.dispatchToElement(this._hovered, 'mouseout', event);
      }

      if (eventControl !== 'no_globalout') {
        // FIXME: if the pointer moving from the extra doms to realy "outside",
        // the `globalout` should have been triggered. But currently not.
        !zrIsToLocalDOM && this.trigger('globalout', {
          type: 'globalout',
          event: event
        });
      }
    },

    /**
     * Resize
     */
    resize: function (event) {
      this._hovered = {};
    },

    /**
     * Dispatch event
     * @param {string} eventName
     * @param {event=} eventArgs
     */
    dispatch: function (eventName, eventArgs) {
      var handler = this[eventName];
      handler && handler.call(this, eventArgs);
    },

    /**
     * Dispose
     */
    dispose: function () {
      this.proxy.dispose();
      this.storage = this.proxy = this.painter = null;
    },

    /**
     * 设置默认的cursor style
     * @param {string} [cursorStyle='default'] 例如 crosshair
     */
    setCursorStyle: function (cursorStyle) {
      var proxy = this.proxy;
      proxy.setCursor && proxy.setCursor(cursorStyle);
    },

    /**
     * 事件分发代理
     *
     * @private
     * @param {Object} targetInfo {target, topTarget} 目标图形元素
     * @param {string} eventName 事件名称
     * @param {Object} event 事件对象
     */
    dispatchToElement: function (targetInfo, eventName, event) {
      targetInfo = targetInfo || {};
      var el = targetInfo.target;

      if (el && el.silent) {
        return;
      }

      var eventHandler = 'on' + eventName;
      var eventPacket = makeEventPacket(eventName, targetInfo, event);

      while (el) {
        el[eventHandler] && (eventPacket.cancelBubble = el[eventHandler].call(el, eventPacket));
        el.trigger(eventName, eventPacket);
        el = el.parent;

        if (eventPacket.cancelBubble) {
          break;
        }
      }

      if (!eventPacket.cancelBubble) {
        // 冒泡到顶级 zrender 对象
        this.trigger(eventName, eventPacket); // 分发事件到用户自定义层
        // 用户有可能在全局 click 事件中 dispose，所以需要判断下 painter 是否存在

        this.painter && this.painter.eachOtherLayer(function (layer) {
          if (typeof layer[eventHandler] === 'function') {
            layer[eventHandler].call(layer, eventPacket);
          }

          if (layer.trigger) {
            layer.trigger(eventName, eventPacket);
          }
        });
      }
    },

    /**
     * @private
     * @param {number} x
     * @param {number} y
     * @param {module:zrender/graphic/Displayable} exclude
     * @return {model:zrender/Element}
     * @method
     */
    findHover: function (x, y, exclude) {
      var list = this.storage.getDisplayList();
      var out = {
        x: x,
        y: y
      };

      for (var i = list.length - 1; i >= 0; i--) {
        var hoverCheckResult;

        if (list[i] !== exclude // getDisplayList may include ignored item in VML mode
        && !list[i].ignore && (hoverCheckResult = isHover(list[i], x, y))) {
          !out.topTarget && (out.topTarget = list[i]);

          if (hoverCheckResult !== SILENT) {
            out.target = list[i];
            break;
          }
        }
      }

      return out;
    },
    processGesture: function (event, stage) {
      if (!this._gestureMgr) {
        this._gestureMgr = new GestureMgr_1();
      }

      var gestureMgr = this._gestureMgr;
      stage === 'start' && gestureMgr.clear();
      var gestureInfo = gestureMgr.recognize(event, this.findHover(event.zrX, event.zrY, null).target, this.proxy.dom);
      stage === 'end' && gestureMgr.clear(); // Do not do any preventDefault here. Upper application do that if necessary.

      if (gestureInfo) {
        var type = gestureInfo.type;
        event.gestureEvent = type;
        this.dispatchToElement({
          target: gestureInfo.target
        }, type, gestureInfo.event);
      }
    }
  }; // Common handlers

  util.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {
    Handler.prototype[name] = function (event) {
      var x = event.zrX;
      var y = event.zrY;
      var isOutside = isOutsideBoundary(this, x, y);
      var hovered;
      var hoveredTarget;

      if (name !== 'mouseup' || !isOutside) {
        // Find hover again to avoid click event is dispatched manually. Or click is triggered without mouseover
        hovered = this.findHover(x, y);
        hoveredTarget = hovered.target;
      }

      if (name === 'mousedown') {
        this._downEl = hoveredTarget;
        this._downPoint = [event.zrX, event.zrY]; // In case click triggered before mouseup

        this._upEl = hoveredTarget;
      } else if (name === 'mouseup') {
        this._upEl = hoveredTarget;
      } else if (name === 'click') {
        if (this._downEl !== this._upEl // Original click event is triggered on the whole canvas element,
        // including the case that `mousedown` - `mousemove` - `mouseup`,
        // which should be filtered, otherwise it will bring trouble to
        // pan and zoom.
        || !this._downPoint // Arbitrary value
        || vector.dist(this._downPoint, [event.zrX, event.zrY]) > 4) {
          return;
        }

        this._downPoint = null;
      }

      this.dispatchToElement(hovered, name, event);
    };
  });

  function isHover(displayable, x, y) {
    if (displayable[displayable.rectHover ? 'rectContain' : 'contain'](x, y)) {
      var el = displayable;
      var isSilent;

      while (el) {
        // If clipped by ancestor.
        // FIXME: If clipPath has neither stroke nor fill,
        // el.clipPath.contain(x, y) will always return false.
        if (el.clipPath && !el.clipPath.contain(x, y)) {
          return false;
        }

        if (el.silent) {
          isSilent = true;
        }

        el = el.parent;
      }

      return isSilent ? SILENT : true;
    }

    return false;
  }
  /**
   * See [Drag outside].
   */


  function isOutsideBoundary(handlerInstance, x, y) {
    var painter = handlerInstance.painter;
    return x < 0 || x > painter.getWidth() || y < 0 || y > painter.getHeight();
  }

  util.mixin(Handler, Eventful_1);
  util.mixin(Handler, Draggable_1);
  var _default$5 = Handler;
  var Handler_1 = _default$5;

  /**
   * 3x2矩阵操作类
   * @exports zrender/tool/matrix
   */

  /* global Float32Array */
  var ArrayCtor$1 = typeof Float32Array === 'undefined' ? Array : Float32Array;
  /**
   * Create a identity matrix.
   * @return {Float32Array|Array.<number>}
   */

  function create$1() {
    var out = new ArrayCtor$1(6);
    identity(out);
    return out;
  }
  /**
   * 设置矩阵为单位矩阵
   * @param {Float32Array|Array.<number>} out
   */


  function identity(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    return out;
  }
  /**
   * 复制矩阵
   * @param {Float32Array|Array.<number>} out
   * @param {Float32Array|Array.<number>} m
   */


  function copy$1(out, m) {
    out[0] = m[0];
    out[1] = m[1];
    out[2] = m[2];
    out[3] = m[3];
    out[4] = m[4];
    out[5] = m[5];
    return out;
  }
  /**
   * 矩阵相乘
   * @param {Float32Array|Array.<number>} out
   * @param {Float32Array|Array.<number>} m1
   * @param {Float32Array|Array.<number>} m2
   */


  function mul$1(out, m1, m2) {
    // Consider matrix.mul(m, m2, m);
    // where out is the same as m2.
    // So use temp variable to escape error.
    var out0 = m1[0] * m2[0] + m1[2] * m2[1];
    var out1 = m1[1] * m2[0] + m1[3] * m2[1];
    var out2 = m1[0] * m2[2] + m1[2] * m2[3];
    var out3 = m1[1] * m2[2] + m1[3] * m2[3];
    var out4 = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];
    var out5 = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];
    out[0] = out0;
    out[1] = out1;
    out[2] = out2;
    out[3] = out3;
    out[4] = out4;
    out[5] = out5;
    return out;
  }
  /**
   * 平移变换
   * @param {Float32Array|Array.<number>} out
   * @param {Float32Array|Array.<number>} a
   * @param {Float32Array|Array.<number>} v
   */


  function translate(out, a, v) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4] + v[0];
    out[5] = a[5] + v[1];
    return out;
  }
  /**
   * 旋转变换
   * @param {Float32Array|Array.<number>} out
   * @param {Float32Array|Array.<number>} a
   * @param {number} rad
   */


  function rotate(out, a, rad) {
    var aa = a[0];
    var ac = a[2];
    var atx = a[4];
    var ab = a[1];
    var ad = a[3];
    var aty = a[5];
    var st = Math.sin(rad);
    var ct = Math.cos(rad);
    out[0] = aa * ct + ab * st;
    out[1] = -aa * st + ab * ct;
    out[2] = ac * ct + ad * st;
    out[3] = -ac * st + ct * ad;
    out[4] = ct * atx + st * aty;
    out[5] = ct * aty - st * atx;
    return out;
  }
  /**
   * 缩放变换
   * @param {Float32Array|Array.<number>} out
   * @param {Float32Array|Array.<number>} a
   * @param {Float32Array|Array.<number>} v
   */


  function scale$1(out, a, v) {
    var vx = v[0];
    var vy = v[1];
    out[0] = a[0] * vx;
    out[1] = a[1] * vy;
    out[2] = a[2] * vx;
    out[3] = a[3] * vy;
    out[4] = a[4] * vx;
    out[5] = a[5] * vy;
    return out;
  }
  /**
   * 求逆矩阵
   * @param {Float32Array|Array.<number>} out
   * @param {Float32Array|Array.<number>} a
   */


  function invert(out, a) {
    var aa = a[0];
    var ac = a[2];
    var atx = a[4];
    var ab = a[1];
    var ad = a[3];
    var aty = a[5];
    var det = aa * ad - ab * ac;

    if (!det) {
      return null;
    }

    det = 1.0 / det;
    out[0] = ad * det;
    out[1] = -ab * det;
    out[2] = -ac * det;
    out[3] = aa * det;
    out[4] = (ac * aty - ad * atx) * det;
    out[5] = (ab * atx - aa * aty) * det;
    return out;
  }
  /**
   * Clone a new matrix.
   * @param {Float32Array|Array.<number>} a
   */


  function clone$2(a) {
    var b = create$1();
    copy$1(b, a);
    return b;
  }

  var create_1$1 = create$1;
  var identity_1 = identity;
  var copy_1$1 = copy$1;
  var mul_1$1 = mul$1;
  var translate_1 = translate;
  var rotate_1 = rotate;
  var scale_1$1 = scale$1;
  var invert_1 = invert;
  var clone_1$2 = clone$2;

  var matrix = {
  	create: create_1$1,
  	identity: identity_1,
  	copy: copy_1$1,
  	mul: mul_1$1,
  	translate: translate_1,
  	rotate: rotate_1,
  	scale: scale_1$1,
  	invert: invert_1,
  	clone: clone_1$2
  };

  /**
   * 提供变换扩展
   * @module zrender/mixin/Transformable
   * @author pissang (https://www.github.com/pissang)
   */
  var mIdentity = matrix.identity;
  var EPSILON = 5e-5;

  function isNotAroundZero(val) {
    return val > EPSILON || val < -EPSILON;
  }
  /**
   * @alias module:zrender/mixin/Transformable
   * @constructor
   */


  var Transformable = function (opts) {
    opts = opts || {}; // If there are no given position, rotation, scale

    if (!opts.position) {
      /**
       * 平移
       * @type {Array.<number>}
       * @default [0, 0]
       */
      this.position = [0, 0];
    }

    if (opts.rotation == null) {
      /**
       * 旋转
       * @type {Array.<number>}
       * @default 0
       */
      this.rotation = 0;
    }

    if (!opts.scale) {
      /**
       * 缩放
       * @type {Array.<number>}
       * @default [1, 1]
       */
      this.scale = [1, 1];
    }
    /**
     * 旋转和缩放的原点
     * @type {Array.<number>}
     * @default null
     */


    this.origin = this.origin || null;
  };

  var transformableProto = Transformable.prototype;
  transformableProto.transform = null;
  /**
   * 判断是否需要有坐标变换
   * 如果有坐标变换, 则从position, rotation, scale以及父节点的transform计算出自身的transform矩阵
   */

  transformableProto.needLocalTransform = function () {
    return isNotAroundZero(this.rotation) || isNotAroundZero(this.position[0]) || isNotAroundZero(this.position[1]) || isNotAroundZero(this.scale[0] - 1) || isNotAroundZero(this.scale[1] - 1);
  };

  var scaleTmp = [];

  transformableProto.updateTransform = function () {
    var parent = this.parent;
    var parentHasTransform = parent && parent.transform;
    var needLocalTransform = this.needLocalTransform();
    var m = this.transform;

    if (!(needLocalTransform || parentHasTransform)) {
      m && mIdentity(m);
      return;
    }

    m = m || matrix.create();

    if (needLocalTransform) {
      this.getLocalTransform(m);
    } else {
      mIdentity(m);
    } // 应用父节点变换


    if (parentHasTransform) {
      if (needLocalTransform) {
        matrix.mul(m, parent.transform, m);
      } else {
        matrix.copy(m, parent.transform);
      }
    } // 保存这个变换矩阵


    this.transform = m;
    var globalScaleRatio = this.globalScaleRatio;

    if (globalScaleRatio != null && globalScaleRatio !== 1) {
      this.getGlobalScale(scaleTmp);
      var relX = scaleTmp[0] < 0 ? -1 : 1;
      var relY = scaleTmp[1] < 0 ? -1 : 1;
      var sx = ((scaleTmp[0] - relX) * globalScaleRatio + relX) / scaleTmp[0] || 0;
      var sy = ((scaleTmp[1] - relY) * globalScaleRatio + relY) / scaleTmp[1] || 0;
      m[0] *= sx;
      m[1] *= sx;
      m[2] *= sy;
      m[3] *= sy;
    }

    this.invTransform = this.invTransform || matrix.create();
    matrix.invert(this.invTransform, m);
  };

  transformableProto.getLocalTransform = function (m) {
    return Transformable.getLocalTransform(this, m);
  };
  /**
   * 将自己的transform应用到context上
   * @param {CanvasRenderingContext2D} ctx
   */


  transformableProto.setTransform = function (ctx) {
    var m = this.transform;
    var dpr = ctx.dpr || 1;

    if (m) {
      ctx.setTransform(dpr * m[0], dpr * m[1], dpr * m[2], dpr * m[3], dpr * m[4], dpr * m[5]);
    } else {
      ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
    }
  };

  transformableProto.restoreTransform = function (ctx) {
    var dpr = ctx.dpr || 1;
    ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
  };

  var tmpTransform = [];
  var originTransform = matrix.create();

  transformableProto.setLocalTransform = function (m) {
    if (!m) {
      // TODO return or set identity?
      return;
    }

    var sx = m[0] * m[0] + m[1] * m[1];
    var sy = m[2] * m[2] + m[3] * m[3];
    var position = this.position;
    var scale = this.scale;

    if (isNotAroundZero(sx - 1)) {
      sx = Math.sqrt(sx);
    }

    if (isNotAroundZero(sy - 1)) {
      sy = Math.sqrt(sy);
    }

    if (m[0] < 0) {
      sx = -sx;
    }

    if (m[3] < 0) {
      sy = -sy;
    }

    position[0] = m[4];
    position[1] = m[5];
    scale[0] = sx;
    scale[1] = sy;
    this.rotation = Math.atan2(-m[1] / sy, m[0] / sx);
  };
  /**
   * 分解`transform`矩阵到`position`, `rotation`, `scale`
   */


  transformableProto.decomposeTransform = function () {
    if (!this.transform) {
      return;
    }

    var parent = this.parent;
    var m = this.transform;

    if (parent && parent.transform) {
      // Get local transform and decompose them to position, scale, rotation
      matrix.mul(tmpTransform, parent.invTransform, m);
      m = tmpTransform;
    }

    var origin = this.origin;

    if (origin && (origin[0] || origin[1])) {
      originTransform[4] = origin[0];
      originTransform[5] = origin[1];
      matrix.mul(tmpTransform, m, originTransform);
      tmpTransform[4] -= origin[0];
      tmpTransform[5] -= origin[1];
      m = tmpTransform;
    }

    this.setLocalTransform(m);
  };
  /**
   * Get global scale
   * @return {Array.<number>}
   */


  transformableProto.getGlobalScale = function (out) {
    var m = this.transform;
    out = out || [];

    if (!m) {
      out[0] = 1;
      out[1] = 1;
      return out;
    }

    out[0] = Math.sqrt(m[0] * m[0] + m[1] * m[1]);
    out[1] = Math.sqrt(m[2] * m[2] + m[3] * m[3]);

    if (m[0] < 0) {
      out[0] = -out[0];
    }

    if (m[3] < 0) {
      out[1] = -out[1];
    }

    return out;
  };
  /**
   * 变换坐标位置到 shape 的局部坐标空间
   * @method
   * @param {number} x
   * @param {number} y
   * @return {Array.<number>}
   */


  transformableProto.transformCoordToLocal = function (x, y) {
    var v2 = [x, y];
    var invTransform = this.invTransform;

    if (invTransform) {
      vector.applyTransform(v2, v2, invTransform);
    }

    return v2;
  };
  /**
   * 变换局部坐标位置到全局坐标空间
   * @method
   * @param {number} x
   * @param {number} y
   * @return {Array.<number>}
   */


  transformableProto.transformCoordToGlobal = function (x, y) {
    var v2 = [x, y];
    var transform = this.transform;

    if (transform) {
      vector.applyTransform(v2, v2, transform);
    }

    return v2;
  };
  /**
   * @static
   * @param {Object} target
   * @param {Array.<number>} target.origin
   * @param {number} target.rotation
   * @param {Array.<number>} target.position
   * @param {Array.<number>} [m]
   */


  Transformable.getLocalTransform = function (target, m) {
    m = m || [];
    mIdentity(m);
    var origin = target.origin;
    var scale = target.scale || [1, 1];
    var rotation = target.rotation || 0;
    var position = target.position || [0, 0];

    if (origin) {
      // Translate to origin
      m[4] -= origin[0];
      m[5] -= origin[1];
    }

    matrix.scale(m, m, scale);

    if (rotation) {
      matrix.rotate(m, m, rotation);
    }

    if (origin) {
      // Translate back from origin
      m[4] += origin[0];
      m[5] += origin[1];
    }

    m[4] += position[0];
    m[5] += position[1];
    return m;
  };

  var _default$6 = Transformable;
  var Transformable_1 = _default$6;

  /**
   * 缓动代码来自 https://github.com/sole/tween.js/blob/master/src/Tween.js
   * @see http://sole.github.io/tween.js/examples/03_graphs.html
   * @exports zrender/animation/easing
   */
  var easing = {
    /**
    * @param {number} k
    * @return {number}
    */
    linear: function (k) {
      return k;
    },

    /**
    * @param {number} k
    * @return {number}
    */
    quadraticIn: function (k) {
      return k * k;
    },

    /**
    * @param {number} k
    * @return {number}
    */
    quadraticOut: function (k) {
      return k * (2 - k);
    },

    /**
    * @param {number} k
    * @return {number}
    */
    quadraticInOut: function (k) {
      if ((k *= 2) < 1) {
        return 0.5 * k * k;
      }

      return -0.5 * (--k * (k - 2) - 1);
    },
    // 三次方的缓动（t^3）

    /**
    * @param {number} k
    * @return {number}
    */
    cubicIn: function (k) {
      return k * k * k;
    },

    /**
    * @param {number} k
    * @return {number}
    */
    cubicOut: function (k) {
      return --k * k * k + 1;
    },

    /**
    * @param {number} k
    * @return {number}
    */
    cubicInOut: function (k) {
      if ((k *= 2) < 1) {
        return 0.5 * k * k * k;
      }

      return 0.5 * ((k -= 2) * k * k + 2);
    },
    // 四次方的缓动（t^4）

    /**
    * @param {number} k
    * @return {number}
    */
    quarticIn: function (k) {
      return k * k * k * k;
    },

    /**
    * @param {number} k
    * @return {number}
    */
    quarticOut: function (k) {
      return 1 - --k * k * k * k;
    },

    /**
    * @param {number} k
    * @return {number}
    */
    quarticInOut: function (k) {
      if ((k *= 2) < 1) {
        return 0.5 * k * k * k * k;
      }

      return -0.5 * ((k -= 2) * k * k * k - 2);
    },
    // 五次方的缓动（t^5）

    /**
    * @param {number} k
    * @return {number}
    */
    quinticIn: function (k) {
      return k * k * k * k * k;
    },

    /**
    * @param {number} k
    * @return {number}
    */
    quinticOut: function (k) {
      return --k * k * k * k * k + 1;
    },

    /**
    * @param {number} k
    * @return {number}
    */
    quinticInOut: function (k) {
      if ((k *= 2) < 1) {
        return 0.5 * k * k * k * k * k;
      }

      return 0.5 * ((k -= 2) * k * k * k * k + 2);
    },
    // 正弦曲线的缓动（sin(t)）

    /**
    * @param {number} k
    * @return {number}
    */
    sinusoidalIn: function (k) {
      return 1 - Math.cos(k * Math.PI / 2);
    },

    /**
    * @param {number} k
    * @return {number}
    */
    sinusoidalOut: function (k) {
      return Math.sin(k * Math.PI / 2);
    },

    /**
    * @param {number} k
    * @return {number}
    */
    sinusoidalInOut: function (k) {
      return 0.5 * (1 - Math.cos(Math.PI * k));
    },
    // 指数曲线的缓动（2^t）

    /**
    * @param {number} k
    * @return {number}
    */
    exponentialIn: function (k) {
      return k === 0 ? 0 : Math.pow(1024, k - 1);
    },

    /**
    * @param {number} k
    * @return {number}
    */
    exponentialOut: function (k) {
      return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
    },

    /**
    * @param {number} k
    * @return {number}
    */
    exponentialInOut: function (k) {
      if (k === 0) {
        return 0;
      }

      if (k === 1) {
        return 1;
      }

      if ((k *= 2) < 1) {
        return 0.5 * Math.pow(1024, k - 1);
      }

      return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
    },
    // 圆形曲线的缓动（sqrt(1-t^2)）

    /**
    * @param {number} k
    * @return {number}
    */
    circularIn: function (k) {
      return 1 - Math.sqrt(1 - k * k);
    },

    /**
    * @param {number} k
    * @return {number}
    */
    circularOut: function (k) {
      return Math.sqrt(1 - --k * k);
    },

    /**
    * @param {number} k
    * @return {number}
    */
    circularInOut: function (k) {
      if ((k *= 2) < 1) {
        return -0.5 * (Math.sqrt(1 - k * k) - 1);
      }

      return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
    },
    // 创建类似于弹簧在停止前来回振荡的动画

    /**
    * @param {number} k
    * @return {number}
    */
    elasticIn: function (k) {
      var s;
      var a = 0.1;
      var p = 0.4;

      if (k === 0) {
        return 0;
      }

      if (k === 1) {
        return 1;
      }

      if (!a || a < 1) {
        a = 1;
        s = p / 4;
      } else {
        s = p * Math.asin(1 / a) / (2 * Math.PI);
      }

      return -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
    },

    /**
    * @param {number} k
    * @return {number}
    */
    elasticOut: function (k) {
      var s;
      var a = 0.1;
      var p = 0.4;

      if (k === 0) {
        return 0;
      }

      if (k === 1) {
        return 1;
      }

      if (!a || a < 1) {
        a = 1;
        s = p / 4;
      } else {
        s = p * Math.asin(1 / a) / (2 * Math.PI);
      }

      return a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1;
    },

    /**
    * @param {number} k
    * @return {number}
    */
    elasticInOut: function (k) {
      var s;
      var a = 0.1;
      var p = 0.4;

      if (k === 0) {
        return 0;
      }

      if (k === 1) {
        return 1;
      }

      if (!a || a < 1) {
        a = 1;
        s = p / 4;
      } else {
        s = p * Math.asin(1 / a) / (2 * Math.PI);
      }

      if ((k *= 2) < 1) {
        return -0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
      }

      return a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;
    },
    // 在某一动画开始沿指示的路径进行动画处理前稍稍收回该动画的移动

    /**
    * @param {number} k
    * @return {number}
    */
    backIn: function (k) {
      var s = 1.70158;
      return k * k * ((s + 1) * k - s);
    },

    /**
    * @param {number} k
    * @return {number}
    */
    backOut: function (k) {
      var s = 1.70158;
      return --k * k * ((s + 1) * k + s) + 1;
    },

    /**
    * @param {number} k
    * @return {number}
    */
    backInOut: function (k) {
      var s = 1.70158 * 1.525;

      if ((k *= 2) < 1) {
        return 0.5 * (k * k * ((s + 1) * k - s));
      }

      return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
    },
    // 创建弹跳效果

    /**
    * @param {number} k
    * @return {number}
    */
    bounceIn: function (k) {
      return 1 - easing.bounceOut(1 - k);
    },

    /**
    * @param {number} k
    * @return {number}
    */
    bounceOut: function (k) {
      if (k < 1 / 2.75) {
        return 7.5625 * k * k;
      } else if (k < 2 / 2.75) {
        return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;
      } else if (k < 2.5 / 2.75) {
        return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;
      } else {
        return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;
      }
    },

    /**
    * @param {number} k
    * @return {number}
    */
    bounceInOut: function (k) {
      if (k < 0.5) {
        return easing.bounceIn(k * 2) * 0.5;
      }

      return easing.bounceOut(k * 2 - 1) * 0.5 + 0.5;
    }
  };
  var _default$7 = easing;
  var easing_1 = _default$7;

  /**
   * 动画主控制器
   * @config target 动画对象，可以是数组，如果是数组的话会批量分发onframe等事件
   * @config life(1000) 动画时长
   * @config delay(0) 动画延迟时间
   * @config loop(true)
   * @config gap(0) 循环的间隔时间
   * @config onframe
   * @config easing(optional)
   * @config ondestroy(optional)
   * @config onrestart(optional)
   *
   * TODO pause
   */
  function Clip(options) {
    this._target = options.target; // 生命周期

    this._life = options.life || 1000; // 延时

    this._delay = options.delay || 0; // 开始时间
    // this._startTime = new Date().getTime() + this._delay;// 单位毫秒

    this._initialized = false; // 是否循环

    this.loop = options.loop == null ? false : options.loop;
    this.gap = options.gap || 0;
    this.easing = options.easing || 'Linear';
    this.onframe = options.onframe;
    this.ondestroy = options.ondestroy;
    this.onrestart = options.onrestart;
    this._pausedTime = 0;
    this._paused = false;
  }

  Clip.prototype = {
    constructor: Clip,
    step: function (globalTime, deltaTime) {
      // Set startTime on first step, or _startTime may has milleseconds different between clips
      // PENDING
      if (!this._initialized) {
        this._startTime = globalTime + this._delay;
        this._initialized = true;
      }

      if (this._paused) {
        this._pausedTime += deltaTime;
        return;
      }

      var percent = (globalTime - this._startTime - this._pausedTime) / this._life; // 还没开始

      if (percent < 0) {
        return;
      }

      percent = Math.min(percent, 1);
      var easing = this.easing;
      var easingFunc = typeof easing === 'string' ? easing_1[easing] : easing;
      var schedule = typeof easingFunc === 'function' ? easingFunc(percent) : percent;
      this.fire('frame', schedule); // 结束

      if (percent === 1) {
        if (this.loop) {
          this.restart(globalTime); // 重新开始周期
          // 抛出而不是直接调用事件直到 stage.update 后再统一调用这些事件

          return 'restart';
        } // 动画完成将这个控制器标识为待删除
        // 在Animation.update中进行批量删除


        this._needsRemove = true;
        return 'destroy';
      }

      return null;
    },
    restart: function (globalTime) {
      var remainder = (globalTime - this._startTime - this._pausedTime) % this._life;
      this._startTime = globalTime - remainder + this.gap;
      this._pausedTime = 0;
      this._needsRemove = false;
    },
    fire: function (eventType, arg) {
      eventType = 'on' + eventType;

      if (this[eventType]) {
        this[eventType](this._target, arg);
      }
    },
    pause: function () {
      this._paused = true;
    },
    resume: function () {
      this._paused = false;
    }
  };
  var _default$8 = Clip;
  var Clip_1 = _default$8;

  // Simple LRU cache use doubly linked list
  // @module zrender/core/LRU

  /**
   * Simple double linked list. Compared with array, it has O(1) remove operation.
   * @constructor
   */
  var LinkedList = function () {
    /**
     * @type {module:zrender/core/LRU~Entry}
     */
    this.head = null;
    /**
     * @type {module:zrender/core/LRU~Entry}
     */

    this.tail = null;
    this._len = 0;
  };

  var linkedListProto = LinkedList.prototype;
  /**
   * Insert a new value at the tail
   * @param  {} val
   * @return {module:zrender/core/LRU~Entry}
   */

  linkedListProto.insert = function (val) {
    var entry = new Entry(val);
    this.insertEntry(entry);
    return entry;
  };
  /**
   * Insert an entry at the tail
   * @param  {module:zrender/core/LRU~Entry} entry
   */


  linkedListProto.insertEntry = function (entry) {
    if (!this.head) {
      this.head = this.tail = entry;
    } else {
      this.tail.next = entry;
      entry.prev = this.tail;
      entry.next = null;
      this.tail = entry;
    }

    this._len++;
  };
  /**
   * Remove entry.
   * @param  {module:zrender/core/LRU~Entry} entry
   */


  linkedListProto.remove = function (entry) {
    var prev = entry.prev;
    var next = entry.next;

    if (prev) {
      prev.next = next;
    } else {
      // Is head
      this.head = next;
    }

    if (next) {
      next.prev = prev;
    } else {
      // Is tail
      this.tail = prev;
    }

    entry.next = entry.prev = null;
    this._len--;
  };
  /**
   * @return {number}
   */


  linkedListProto.len = function () {
    return this._len;
  };
  /**
   * Clear list
   */


  linkedListProto.clear = function () {
    this.head = this.tail = null;
    this._len = 0;
  };
  /**
   * @constructor
   * @param {} val
   */


  var Entry = function (val) {
    /**
     * @type {}
     */
    this.value = val;
    /**
     * @type {module:zrender/core/LRU~Entry}
     */

    this.next;
    /**
     * @type {module:zrender/core/LRU~Entry}
     */

    this.prev;
  };
  /**
   * LRU Cache
   * @constructor
   * @alias module:zrender/core/LRU
   */


  var LRU = function (maxSize) {
    this._list = new LinkedList();
    this._map = {};
    this._maxSize = maxSize || 10;
    this._lastRemovedEntry = null;
  };

  var LRUProto = LRU.prototype;
  /**
   * @param  {string} key
   * @param  {} value
   * @return {} Removed value
   */

  LRUProto.put = function (key, value) {
    var list = this._list;
    var map = this._map;
    var removed = null;

    if (map[key] == null) {
      var len = list.len(); // Reuse last removed entry

      var entry = this._lastRemovedEntry;

      if (len >= this._maxSize && len > 0) {
        // Remove the least recently used
        var leastUsedEntry = list.head;
        list.remove(leastUsedEntry);
        delete map[leastUsedEntry.key];
        removed = leastUsedEntry.value;
        this._lastRemovedEntry = leastUsedEntry;
      }

      if (entry) {
        entry.value = value;
      } else {
        entry = new Entry(value);
      }

      entry.key = key;
      list.insertEntry(entry);
      map[key] = entry;
    }

    return removed;
  };
  /**
   * @param  {string} key
   * @return {}
   */


  LRUProto.get = function (key) {
    var entry = this._map[key];
    var list = this._list;

    if (entry != null) {
      // Put the latest used entry in the tail
      if (entry !== list.tail) {
        list.remove(entry);
        list.insertEntry(entry);
      }

      return entry.value;
    }
  };
  /**
   * Clear the cache
   */


  LRUProto.clear = function () {
    this._list.clear();

    this._map = {};
  };

  var _default$9 = LRU;
  var LRU_1 = _default$9;

  var kCSSColorTable = {
    'transparent': [0, 0, 0, 0],
    'aliceblue': [240, 248, 255, 1],
    'antiquewhite': [250, 235, 215, 1],
    'aqua': [0, 255, 255, 1],
    'aquamarine': [127, 255, 212, 1],
    'azure': [240, 255, 255, 1],
    'beige': [245, 245, 220, 1],
    'bisque': [255, 228, 196, 1],
    'black': [0, 0, 0, 1],
    'blanchedalmond': [255, 235, 205, 1],
    'blue': [0, 0, 255, 1],
    'blueviolet': [138, 43, 226, 1],
    'brown': [165, 42, 42, 1],
    'burlywood': [222, 184, 135, 1],
    'cadetblue': [95, 158, 160, 1],
    'chartreuse': [127, 255, 0, 1],
    'chocolate': [210, 105, 30, 1],
    'coral': [255, 127, 80, 1],
    'cornflowerblue': [100, 149, 237, 1],
    'cornsilk': [255, 248, 220, 1],
    'crimson': [220, 20, 60, 1],
    'cyan': [0, 255, 255, 1],
    'darkblue': [0, 0, 139, 1],
    'darkcyan': [0, 139, 139, 1],
    'darkgoldenrod': [184, 134, 11, 1],
    'darkgray': [169, 169, 169, 1],
    'darkgreen': [0, 100, 0, 1],
    'darkgrey': [169, 169, 169, 1],
    'darkkhaki': [189, 183, 107, 1],
    'darkmagenta': [139, 0, 139, 1],
    'darkolivegreen': [85, 107, 47, 1],
    'darkorange': [255, 140, 0, 1],
    'darkorchid': [153, 50, 204, 1],
    'darkred': [139, 0, 0, 1],
    'darksalmon': [233, 150, 122, 1],
    'darkseagreen': [143, 188, 143, 1],
    'darkslateblue': [72, 61, 139, 1],
    'darkslategray': [47, 79, 79, 1],
    'darkslategrey': [47, 79, 79, 1],
    'darkturquoise': [0, 206, 209, 1],
    'darkviolet': [148, 0, 211, 1],
    'deeppink': [255, 20, 147, 1],
    'deepskyblue': [0, 191, 255, 1],
    'dimgray': [105, 105, 105, 1],
    'dimgrey': [105, 105, 105, 1],
    'dodgerblue': [30, 144, 255, 1],
    'firebrick': [178, 34, 34, 1],
    'floralwhite': [255, 250, 240, 1],
    'forestgreen': [34, 139, 34, 1],
    'fuchsia': [255, 0, 255, 1],
    'gainsboro': [220, 220, 220, 1],
    'ghostwhite': [248, 248, 255, 1],
    'gold': [255, 215, 0, 1],
    'goldenrod': [218, 165, 32, 1],
    'gray': [128, 128, 128, 1],
    'green': [0, 128, 0, 1],
    'greenyellow': [173, 255, 47, 1],
    'grey': [128, 128, 128, 1],
    'honeydew': [240, 255, 240, 1],
    'hotpink': [255, 105, 180, 1],
    'indianred': [205, 92, 92, 1],
    'indigo': [75, 0, 130, 1],
    'ivory': [255, 255, 240, 1],
    'khaki': [240, 230, 140, 1],
    'lavender': [230, 230, 250, 1],
    'lavenderblush': [255, 240, 245, 1],
    'lawngreen': [124, 252, 0, 1],
    'lemonchiffon': [255, 250, 205, 1],
    'lightblue': [173, 216, 230, 1],
    'lightcoral': [240, 128, 128, 1],
    'lightcyan': [224, 255, 255, 1],
    'lightgoldenrodyellow': [250, 250, 210, 1],
    'lightgray': [211, 211, 211, 1],
    'lightgreen': [144, 238, 144, 1],
    'lightgrey': [211, 211, 211, 1],
    'lightpink': [255, 182, 193, 1],
    'lightsalmon': [255, 160, 122, 1],
    'lightseagreen': [32, 178, 170, 1],
    'lightskyblue': [135, 206, 250, 1],
    'lightslategray': [119, 136, 153, 1],
    'lightslategrey': [119, 136, 153, 1],
    'lightsteelblue': [176, 196, 222, 1],
    'lightyellow': [255, 255, 224, 1],
    'lime': [0, 255, 0, 1],
    'limegreen': [50, 205, 50, 1],
    'linen': [250, 240, 230, 1],
    'magenta': [255, 0, 255, 1],
    'maroon': [128, 0, 0, 1],
    'mediumaquamarine': [102, 205, 170, 1],
    'mediumblue': [0, 0, 205, 1],
    'mediumorchid': [186, 85, 211, 1],
    'mediumpurple': [147, 112, 219, 1],
    'mediumseagreen': [60, 179, 113, 1],
    'mediumslateblue': [123, 104, 238, 1],
    'mediumspringgreen': [0, 250, 154, 1],
    'mediumturquoise': [72, 209, 204, 1],
    'mediumvioletred': [199, 21, 133, 1],
    'midnightblue': [25, 25, 112, 1],
    'mintcream': [245, 255, 250, 1],
    'mistyrose': [255, 228, 225, 1],
    'moccasin': [255, 228, 181, 1],
    'navajowhite': [255, 222, 173, 1],
    'navy': [0, 0, 128, 1],
    'oldlace': [253, 245, 230, 1],
    'olive': [128, 128, 0, 1],
    'olivedrab': [107, 142, 35, 1],
    'orange': [255, 165, 0, 1],
    'orangered': [255, 69, 0, 1],
    'orchid': [218, 112, 214, 1],
    'palegoldenrod': [238, 232, 170, 1],
    'palegreen': [152, 251, 152, 1],
    'paleturquoise': [175, 238, 238, 1],
    'palevioletred': [219, 112, 147, 1],
    'papayawhip': [255, 239, 213, 1],
    'peachpuff': [255, 218, 185, 1],
    'peru': [205, 133, 63, 1],
    'pink': [255, 192, 203, 1],
    'plum': [221, 160, 221, 1],
    'powderblue': [176, 224, 230, 1],
    'purple': [128, 0, 128, 1],
    'red': [255, 0, 0, 1],
    'rosybrown': [188, 143, 143, 1],
    'royalblue': [65, 105, 225, 1],
    'saddlebrown': [139, 69, 19, 1],
    'salmon': [250, 128, 114, 1],
    'sandybrown': [244, 164, 96, 1],
    'seagreen': [46, 139, 87, 1],
    'seashell': [255, 245, 238, 1],
    'sienna': [160, 82, 45, 1],
    'silver': [192, 192, 192, 1],
    'skyblue': [135, 206, 235, 1],
    'slateblue': [106, 90, 205, 1],
    'slategray': [112, 128, 144, 1],
    'slategrey': [112, 128, 144, 1],
    'snow': [255, 250, 250, 1],
    'springgreen': [0, 255, 127, 1],
    'steelblue': [70, 130, 180, 1],
    'tan': [210, 180, 140, 1],
    'teal': [0, 128, 128, 1],
    'thistle': [216, 191, 216, 1],
    'tomato': [255, 99, 71, 1],
    'turquoise': [64, 224, 208, 1],
    'violet': [238, 130, 238, 1],
    'wheat': [245, 222, 179, 1],
    'white': [255, 255, 255, 1],
    'whitesmoke': [245, 245, 245, 1],
    'yellow': [255, 255, 0, 1],
    'yellowgreen': [154, 205, 50, 1]
  };

  function clampCssByte(i) {
    // Clamp to integer 0 .. 255.
    i = Math.round(i); // Seems to be what Chrome does (vs truncation).

    return i < 0 ? 0 : i > 255 ? 255 : i;
  }

  function clampCssAngle(i) {
    // Clamp to integer 0 .. 360.
    i = Math.round(i); // Seems to be what Chrome does (vs truncation).

    return i < 0 ? 0 : i > 360 ? 360 : i;
  }

  function clampCssFloat(f) {
    // Clamp to float 0.0 .. 1.0.
    return f < 0 ? 0 : f > 1 ? 1 : f;
  }

  function parseCssInt(str) {
    // int or percentage.
    if (str.length && str.charAt(str.length - 1) === '%') {
      return clampCssByte(parseFloat(str) / 100 * 255);
    }

    return clampCssByte(parseInt(str, 10));
  }

  function parseCssFloat(str) {
    // float or percentage.
    if (str.length && str.charAt(str.length - 1) === '%') {
      return clampCssFloat(parseFloat(str) / 100);
    }

    return clampCssFloat(parseFloat(str));
  }

  function cssHueToRgb(m1, m2, h) {
    if (h < 0) {
      h += 1;
    } else if (h > 1) {
      h -= 1;
    }

    if (h * 6 < 1) {
      return m1 + (m2 - m1) * h * 6;
    }

    if (h * 2 < 1) {
      return m2;
    }

    if (h * 3 < 2) {
      return m1 + (m2 - m1) * (2 / 3 - h) * 6;
    }

    return m1;
  }

  function lerpNumber(a, b, p) {
    return a + (b - a) * p;
  }

  function setRgba(out, r, g, b, a) {
    out[0] = r;
    out[1] = g;
    out[2] = b;
    out[3] = a;
    return out;
  }

  function copyRgba(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
  }

  var colorCache = new LRU_1(20);
  var lastRemovedArr = null;

  function putToCache(colorStr, rgbaArr) {
    // Reuse removed array
    if (lastRemovedArr) {
      copyRgba(lastRemovedArr, rgbaArr);
    }

    lastRemovedArr = colorCache.put(colorStr, lastRemovedArr || rgbaArr.slice());
  }
  /**
   * @param {string} colorStr
   * @param {Array.<number>} out
   * @return {Array.<number>}
   * @memberOf module:zrender/util/color
   */


  function parse(colorStr, rgbaArr) {
    if (!colorStr) {
      return;
    }

    rgbaArr = rgbaArr || [];
    var cached = colorCache.get(colorStr);

    if (cached) {
      return copyRgba(rgbaArr, cached);
    } // colorStr may be not string


    colorStr = colorStr + ''; // Remove all whitespace, not compliant, but should just be more accepting.

    var str = colorStr.replace(/ /g, '').toLowerCase(); // Color keywords (and transparent) lookup.

    if (str in kCSSColorTable) {
      copyRgba(rgbaArr, kCSSColorTable[str]);
      putToCache(colorStr, rgbaArr);
      return rgbaArr;
    } // #abc and #abc123 syntax.


    if (str.charAt(0) === '#') {
      if (str.length === 4) {
        var iv = parseInt(str.substr(1), 16); // TODO(deanm): Stricter parsing.

        if (!(iv >= 0 && iv <= 0xfff)) {
          setRgba(rgbaArr, 0, 0, 0, 1);
          return; // Covers NaN.
        }

        setRgba(rgbaArr, (iv & 0xf00) >> 4 | (iv & 0xf00) >> 8, iv & 0xf0 | (iv & 0xf0) >> 4, iv & 0xf | (iv & 0xf) << 4, 1);
        putToCache(colorStr, rgbaArr);
        return rgbaArr;
      } else if (str.length === 7) {
        var iv = parseInt(str.substr(1), 16); // TODO(deanm): Stricter parsing.

        if (!(iv >= 0 && iv <= 0xffffff)) {
          setRgba(rgbaArr, 0, 0, 0, 1);
          return; // Covers NaN.
        }

        setRgba(rgbaArr, (iv & 0xff0000) >> 16, (iv & 0xff00) >> 8, iv & 0xff, 1);
        putToCache(colorStr, rgbaArr);
        return rgbaArr;
      }

      return;
    }

    var op = str.indexOf('(');
    var ep = str.indexOf(')');

    if (op !== -1 && ep + 1 === str.length) {
      var fname = str.substr(0, op);
      var params = str.substr(op + 1, ep - (op + 1)).split(',');
      var alpha = 1; // To allow case fallthrough.

      switch (fname) {
        case 'rgba':
          if (params.length !== 4) {
            setRgba(rgbaArr, 0, 0, 0, 1);
            return;
          }

          alpha = parseCssFloat(params.pop());
        // jshint ignore:line
        // Fall through.

        case 'rgb':
          if (params.length !== 3) {
            setRgba(rgbaArr, 0, 0, 0, 1);
            return;
          }

          setRgba(rgbaArr, parseCssInt(params[0]), parseCssInt(params[1]), parseCssInt(params[2]), alpha);
          putToCache(colorStr, rgbaArr);
          return rgbaArr;

        case 'hsla':
          if (params.length !== 4) {
            setRgba(rgbaArr, 0, 0, 0, 1);
            return;
          }

          params[3] = parseCssFloat(params[3]);
          hsla2rgba(params, rgbaArr);
          putToCache(colorStr, rgbaArr);
          return rgbaArr;

        case 'hsl':
          if (params.length !== 3) {
            setRgba(rgbaArr, 0, 0, 0, 1);
            return;
          }

          hsla2rgba(params, rgbaArr);
          putToCache(colorStr, rgbaArr);
          return rgbaArr;

        default:
          return;
      }
    }

    setRgba(rgbaArr, 0, 0, 0, 1);
    return;
  }
  /**
   * @param {Array.<number>} hsla
   * @param {Array.<number>} rgba
   * @return {Array.<number>} rgba
   */


  function hsla2rgba(hsla, rgba) {
    var h = (parseFloat(hsla[0]) % 360 + 360) % 360 / 360; // 0 .. 1
    // NOTE(deanm): According to the CSS spec s/l should only be
    // percentages, but we don't bother and let float or percentage.

    var s = parseCssFloat(hsla[1]);
    var l = parseCssFloat(hsla[2]);
    var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
    var m1 = l * 2 - m2;
    rgba = rgba || [];
    setRgba(rgba, clampCssByte(cssHueToRgb(m1, m2, h + 1 / 3) * 255), clampCssByte(cssHueToRgb(m1, m2, h) * 255), clampCssByte(cssHueToRgb(m1, m2, h - 1 / 3) * 255), 1);

    if (hsla.length === 4) {
      rgba[3] = hsla[3];
    }

    return rgba;
  }
  /**
   * @param {Array.<number>} rgba
   * @return {Array.<number>} hsla
   */


  function rgba2hsla(rgba) {
    if (!rgba) {
      return;
    } // RGB from 0 to 255


    var R = rgba[0] / 255;
    var G = rgba[1] / 255;
    var B = rgba[2] / 255;
    var vMin = Math.min(R, G, B); // Min. value of RGB

    var vMax = Math.max(R, G, B); // Max. value of RGB

    var delta = vMax - vMin; // Delta RGB value

    var L = (vMax + vMin) / 2;
    var H;
    var S; // HSL results from 0 to 1

    if (delta === 0) {
      H = 0;
      S = 0;
    } else {
      if (L < 0.5) {
        S = delta / (vMax + vMin);
      } else {
        S = delta / (2 - vMax - vMin);
      }

      var deltaR = ((vMax - R) / 6 + delta / 2) / delta;
      var deltaG = ((vMax - G) / 6 + delta / 2) / delta;
      var deltaB = ((vMax - B) / 6 + delta / 2) / delta;

      if (R === vMax) {
        H = deltaB - deltaG;
      } else if (G === vMax) {
        H = 1 / 3 + deltaR - deltaB;
      } else if (B === vMax) {
        H = 2 / 3 + deltaG - deltaR;
      }

      if (H < 0) {
        H += 1;
      }

      if (H > 1) {
        H -= 1;
      }
    }

    var hsla = [H * 360, S, L];

    if (rgba[3] != null) {
      hsla.push(rgba[3]);
    }

    return hsla;
  }
  /**
   * @param {string} color
   * @param {number} level
   * @return {string}
   * @memberOf module:zrender/util/color
   */


  function lift(color, level) {
    var colorArr = parse(color);

    if (colorArr) {
      for (var i = 0; i < 3; i++) {
        if (level < 0) {
          colorArr[i] = colorArr[i] * (1 - level) | 0;
        } else {
          colorArr[i] = (255 - colorArr[i]) * level + colorArr[i] | 0;
        }

        if (colorArr[i] > 255) {
          colorArr[i] = 255;
        } else if (color[i] < 0) {
          colorArr[i] = 0;
        }
      }

      return stringify$1(colorArr, colorArr.length === 4 ? 'rgba' : 'rgb');
    }
  }
  /**
   * @param {string} color
   * @return {string}
   * @memberOf module:zrender/util/color
   */


  function toHex(color) {
    var colorArr = parse(color);

    if (colorArr) {
      return ((1 << 24) + (colorArr[0] << 16) + (colorArr[1] << 8) + +colorArr[2]).toString(16).slice(1);
    }
  }
  /**
   * Map value to color. Faster than lerp methods because color is represented by rgba array.
   * @param {number} normalizedValue A float between 0 and 1.
   * @param {Array.<Array.<number>>} colors List of rgba color array
   * @param {Array.<number>} [out] Mapped gba color array
   * @return {Array.<number>} will be null/undefined if input illegal.
   */


  function fastLerp(normalizedValue, colors, out) {
    if (!(colors && colors.length) || !(normalizedValue >= 0 && normalizedValue <= 1)) {
      return;
    }

    out = out || [];
    var value = normalizedValue * (colors.length - 1);
    var leftIndex = Math.floor(value);
    var rightIndex = Math.ceil(value);
    var leftColor = colors[leftIndex];
    var rightColor = colors[rightIndex];
    var dv = value - leftIndex;
    out[0] = clampCssByte(lerpNumber(leftColor[0], rightColor[0], dv));
    out[1] = clampCssByte(lerpNumber(leftColor[1], rightColor[1], dv));
    out[2] = clampCssByte(lerpNumber(leftColor[2], rightColor[2], dv));
    out[3] = clampCssFloat(lerpNumber(leftColor[3], rightColor[3], dv));
    return out;
  }
  /**
   * @deprecated
   */


  var fastMapToColor = fastLerp;
  /**
   * @param {number} normalizedValue A float between 0 and 1.
   * @param {Array.<string>} colors Color list.
   * @param {boolean=} fullOutput Default false.
   * @return {(string|Object)} Result color. If fullOutput,
   *                           return {color: ..., leftIndex: ..., rightIndex: ..., value: ...},
   * @memberOf module:zrender/util/color
   */

  function lerp$1(normalizedValue, colors, fullOutput) {
    if (!(colors && colors.length) || !(normalizedValue >= 0 && normalizedValue <= 1)) {
      return;
    }

    var value = normalizedValue * (colors.length - 1);
    var leftIndex = Math.floor(value);
    var rightIndex = Math.ceil(value);
    var leftColor = parse(colors[leftIndex]);
    var rightColor = parse(colors[rightIndex]);
    var dv = value - leftIndex;
    var color = stringify$1([clampCssByte(lerpNumber(leftColor[0], rightColor[0], dv)), clampCssByte(lerpNumber(leftColor[1], rightColor[1], dv)), clampCssByte(lerpNumber(leftColor[2], rightColor[2], dv)), clampCssFloat(lerpNumber(leftColor[3], rightColor[3], dv))], 'rgba');
    return fullOutput ? {
      color: color,
      leftIndex: leftIndex,
      rightIndex: rightIndex,
      value: value
    } : color;
  }
  /**
   * @deprecated
   */


  var mapToColor = lerp$1;
  /**
   * @param {string} color
   * @param {number=} h 0 ~ 360, ignore when null.
   * @param {number=} s 0 ~ 1, ignore when null.
   * @param {number=} l 0 ~ 1, ignore when null.
   * @return {string} Color string in rgba format.
   * @memberOf module:zrender/util/color
   */

  function modifyHSL(color, h, s, l) {
    color = parse(color);

    if (color) {
      color = rgba2hsla(color);
      h != null && (color[0] = clampCssAngle(h));
      s != null && (color[1] = parseCssFloat(s));
      l != null && (color[2] = parseCssFloat(l));
      return stringify$1(hsla2rgba(color), 'rgba');
    }
  }
  /**
   * @param {string} color
   * @param {number=} alpha 0 ~ 1
   * @return {string} Color string in rgba format.
   * @memberOf module:zrender/util/color
   */


  function modifyAlpha(color, alpha) {
    color = parse(color);

    if (color && alpha != null) {
      color[3] = clampCssFloat(alpha);
      return stringify$1(color, 'rgba');
    }
  }
  /**
   * @param {Array.<number>} arrColor like [12,33,44,0.4]
   * @param {string} type 'rgba', 'hsva', ...
   * @return {string} Result color. (If input illegal, return undefined).
   */


  function stringify$1(arrColor, type) {
    if (!arrColor || !arrColor.length) {
      return;
    }

    var colorStr = arrColor[0] + ',' + arrColor[1] + ',' + arrColor[2];

    if (type === 'rgba' || type === 'hsva' || type === 'hsla') {
      colorStr += ',' + arrColor[3];
    }

    return type + '(' + colorStr + ')';
  }

  var parse_1 = parse;
  var lift_1 = lift;
  var toHex_1 = toHex;
  var fastLerp_1 = fastLerp;
  var fastMapToColor_1 = fastMapToColor;
  var lerp_1$1 = lerp$1;
  var mapToColor_1 = mapToColor;
  var modifyHSL_1 = modifyHSL;
  var modifyAlpha_1 = modifyAlpha;
  var stringify_1 = stringify$1;

  var color = {
  	parse: parse_1,
  	lift: lift_1,
  	toHex: toHex_1,
  	fastLerp: fastLerp_1,
  	fastMapToColor: fastMapToColor_1,
  	lerp: lerp_1$1,
  	mapToColor: mapToColor_1,
  	modifyHSL: modifyHSL_1,
  	modifyAlpha: modifyAlpha_1,
  	stringify: stringify_1
  };

  var isArrayLike$1 = util.isArrayLike;

  /**
   * @module echarts/animation/Animator
   */
  var arraySlice = Array.prototype.slice;

  function defaultGetter(target, key) {
    return target[key];
  }

  function defaultSetter(target, key, value) {
    target[key] = value;
  }
  /**
   * @param  {number} p0
   * @param  {number} p1
   * @param  {number} percent
   * @return {number}
   */


  function interpolateNumber(p0, p1, percent) {
    return (p1 - p0) * percent + p0;
  }
  /**
   * @param  {string} p0
   * @param  {string} p1
   * @param  {number} percent
   * @return {string}
   */


  function interpolateString(p0, p1, percent) {
    return percent > 0.5 ? p1 : p0;
  }
  /**
   * @param  {Array} p0
   * @param  {Array} p1
   * @param  {number} percent
   * @param  {Array} out
   * @param  {number} arrDim
   */


  function interpolateArray(p0, p1, percent, out, arrDim) {
    var len = p0.length;

    if (arrDim === 1) {
      for (var i = 0; i < len; i++) {
        out[i] = interpolateNumber(p0[i], p1[i], percent);
      }
    } else {
      var len2 = len && p0[0].length;

      for (var i = 0; i < len; i++) {
        for (var j = 0; j < len2; j++) {
          out[i][j] = interpolateNumber(p0[i][j], p1[i][j], percent);
        }
      }
    }
  } // arr0 is source array, arr1 is target array.
  // Do some preprocess to avoid error happened when interpolating from arr0 to arr1


  function fillArr(arr0, arr1, arrDim) {
    var arr0Len = arr0.length;
    var arr1Len = arr1.length;

    if (arr0Len !== arr1Len) {
      // FIXME Not work for TypedArray
      var isPreviousLarger = arr0Len > arr1Len;

      if (isPreviousLarger) {
        // Cut the previous
        arr0.length = arr1Len;
      } else {
        // Fill the previous
        for (var i = arr0Len; i < arr1Len; i++) {
          arr0.push(arrDim === 1 ? arr1[i] : arraySlice.call(arr1[i]));
        }
      }
    } // Handling NaN value


    var len2 = arr0[0] && arr0[0].length;

    for (var i = 0; i < arr0.length; i++) {
      if (arrDim === 1) {
        if (isNaN(arr0[i])) {
          arr0[i] = arr1[i];
        }
      } else {
        for (var j = 0; j < len2; j++) {
          if (isNaN(arr0[i][j])) {
            arr0[i][j] = arr1[i][j];
          }
        }
      }
    }
  }
  /**
   * @param  {Array} arr0
   * @param  {Array} arr1
   * @param  {number} arrDim
   * @return {boolean}
   */


  function isArraySame(arr0, arr1, arrDim) {
    if (arr0 === arr1) {
      return true;
    }

    var len = arr0.length;

    if (len !== arr1.length) {
      return false;
    }

    if (arrDim === 1) {
      for (var i = 0; i < len; i++) {
        if (arr0[i] !== arr1[i]) {
          return false;
        }
      }
    } else {
      var len2 = arr0[0].length;

      for (var i = 0; i < len; i++) {
        for (var j = 0; j < len2; j++) {
          if (arr0[i][j] !== arr1[i][j]) {
            return false;
          }
        }
      }
    }

    return true;
  }
  /**
   * Catmull Rom interpolate array
   * @param  {Array} p0
   * @param  {Array} p1
   * @param  {Array} p2
   * @param  {Array} p3
   * @param  {number} t
   * @param  {number} t2
   * @param  {number} t3
   * @param  {Array} out
   * @param  {number} arrDim
   */


  function catmullRomInterpolateArray(p0, p1, p2, p3, t, t2, t3, out, arrDim) {
    var len = p0.length;

    if (arrDim === 1) {
      for (var i = 0; i < len; i++) {
        out[i] = catmullRomInterpolate(p0[i], p1[i], p2[i], p3[i], t, t2, t3);
      }
    } else {
      var len2 = p0[0].length;

      for (var i = 0; i < len; i++) {
        for (var j = 0; j < len2; j++) {
          out[i][j] = catmullRomInterpolate(p0[i][j], p1[i][j], p2[i][j], p3[i][j], t, t2, t3);
        }
      }
    }
  }
  /**
   * Catmull Rom interpolate number
   * @param  {number} p0
   * @param  {number} p1
   * @param  {number} p2
   * @param  {number} p3
   * @param  {number} t
   * @param  {number} t2
   * @param  {number} t3
   * @return {number}
   */


  function catmullRomInterpolate(p0, p1, p2, p3, t, t2, t3) {
    var v0 = (p2 - p0) * 0.5;
    var v1 = (p3 - p1) * 0.5;
    return (2 * (p1 - p2) + v0 + v1) * t3 + (-3 * (p1 - p2) - 2 * v0 - v1) * t2 + v0 * t + p1;
  }

  function cloneValue(value) {
    if (isArrayLike$1(value)) {
      var len = value.length;

      if (isArrayLike$1(value[0])) {
        var ret = [];

        for (var i = 0; i < len; i++) {
          ret.push(arraySlice.call(value[i]));
        }

        return ret;
      }

      return arraySlice.call(value);
    }

    return value;
  }

  function rgba2String(rgba) {
    rgba[0] = Math.floor(rgba[0]);
    rgba[1] = Math.floor(rgba[1]);
    rgba[2] = Math.floor(rgba[2]);
    return 'rgba(' + rgba.join(',') + ')';
  }

  function getArrayDim(keyframes) {
    var lastValue = keyframes[keyframes.length - 1].value;
    return isArrayLike$1(lastValue && lastValue[0]) ? 2 : 1;
  }

  function createTrackClip(animator, easing, oneTrackDone, keyframes, propName, forceAnimate) {
    var getter = animator._getter;
    var setter = animator._setter;
    var useSpline = easing === 'spline';
    var trackLen = keyframes.length;

    if (!trackLen) {
      return;
    } // Guess data type


    var firstVal = keyframes[0].value;
    var isValueArray = isArrayLike$1(firstVal);
    var isValueColor = false;
    var isValueString = false; // For vertices morphing

    var arrDim = isValueArray ? getArrayDim(keyframes) : 0;
    var trackMaxTime; // Sort keyframe as ascending

    keyframes.sort(function (a, b) {
      return a.time - b.time;
    });
    trackMaxTime = keyframes[trackLen - 1].time; // Percents of each keyframe

    var kfPercents = []; // Value of each keyframe

    var kfValues = [];
    var prevValue = keyframes[0].value;
    var isAllValueEqual = true;

    for (var i = 0; i < trackLen; i++) {
      kfPercents.push(keyframes[i].time / trackMaxTime); // Assume value is a color when it is a string

      var value = keyframes[i].value; // Check if value is equal, deep check if value is array

      if (!(isValueArray && isArraySame(value, prevValue, arrDim) || !isValueArray && value === prevValue)) {
        isAllValueEqual = false;
      }

      prevValue = value; // Try converting a string to a color array

      if (typeof value === 'string') {
        var colorArray = color.parse(value);

        if (colorArray) {
          value = colorArray;
          isValueColor = true;
        } else {
          isValueString = true;
        }
      }

      kfValues.push(value);
    }

    if (!forceAnimate && isAllValueEqual) {
      return;
    }

    var lastValue = kfValues[trackLen - 1]; // Polyfill array and NaN value

    for (var i = 0; i < trackLen - 1; i++) {
      if (isValueArray) {
        fillArr(kfValues[i], lastValue, arrDim);
      } else {
        if (isNaN(kfValues[i]) && !isNaN(lastValue) && !isValueString && !isValueColor) {
          kfValues[i] = lastValue;
        }
      }
    }

    isValueArray && fillArr(getter(animator._target, propName), lastValue, arrDim); // Cache the key of last frame to speed up when
    // animation playback is sequency

    var lastFrame = 0;
    var lastFramePercent = 0;
    var start;
    var w;
    var p0;
    var p1;
    var p2;
    var p3;

    if (isValueColor) {
      var rgba = [0, 0, 0, 0];
    }

    var onframe = function (target, percent) {
      // Find the range keyframes
      // kf1-----kf2---------current--------kf3
      // find kf2 and kf3 and do interpolation
      var frame; // In the easing function like elasticOut, percent may less than 0

      if (percent < 0) {
        frame = 0;
      } else if (percent < lastFramePercent) {
        // Start from next key
        // PENDING start from lastFrame ?
        start = Math.min(lastFrame + 1, trackLen - 1);

        for (frame = start; frame >= 0; frame--) {
          if (kfPercents[frame] <= percent) {
            break;
          }
        } // PENDING really need to do this ?


        frame = Math.min(frame, trackLen - 2);
      } else {
        for (frame = lastFrame; frame < trackLen; frame++) {
          if (kfPercents[frame] > percent) {
            break;
          }
        }

        frame = Math.min(frame - 1, trackLen - 2);
      }

      lastFrame = frame;
      lastFramePercent = percent;
      var range = kfPercents[frame + 1] - kfPercents[frame];

      if (range === 0) {
        return;
      } else {
        w = (percent - kfPercents[frame]) / range;
      }

      if (useSpline) {
        p1 = kfValues[frame];
        p0 = kfValues[frame === 0 ? frame : frame - 1];
        p2 = kfValues[frame > trackLen - 2 ? trackLen - 1 : frame + 1];
        p3 = kfValues[frame > trackLen - 3 ? trackLen - 1 : frame + 2];

        if (isValueArray) {
          catmullRomInterpolateArray(p0, p1, p2, p3, w, w * w, w * w * w, getter(target, propName), arrDim);
        } else {
          var value;

          if (isValueColor) {
            value = catmullRomInterpolateArray(p0, p1, p2, p3, w, w * w, w * w * w, rgba, 1);
            value = rgba2String(rgba);
          } else if (isValueString) {
            // String is step(0.5)
            return interpolateString(p1, p2, w);
          } else {
            value = catmullRomInterpolate(p0, p1, p2, p3, w, w * w, w * w * w);
          }

          setter(target, propName, value);
        }
      } else {
        if (isValueArray) {
          interpolateArray(kfValues[frame], kfValues[frame + 1], w, getter(target, propName), arrDim);
        } else {
          var value;

          if (isValueColor) {
            interpolateArray(kfValues[frame], kfValues[frame + 1], w, rgba, 1);
            value = rgba2String(rgba);
          } else if (isValueString) {
            // String is step(0.5)
            return interpolateString(kfValues[frame], kfValues[frame + 1], w);
          } else {
            value = interpolateNumber(kfValues[frame], kfValues[frame + 1], w);
          }

          setter(target, propName, value);
        }
      }
    };

    var clip = new Clip_1({
      target: animator._target,
      life: trackMaxTime,
      loop: animator._loop,
      delay: animator._delay,
      onframe: onframe,
      ondestroy: oneTrackDone
    });

    if (easing && easing !== 'spline') {
      clip.easing = easing;
    }

    return clip;
  }
  /**
   * @alias module:zrender/animation/Animator
   * @constructor
   * @param {Object} target
   * @param {boolean} loop
   * @param {Function} getter
   * @param {Function} setter
   */


  var Animator = function (target, loop, getter, setter) {
    this._tracks = {};
    this._target = target;
    this._loop = loop || false;
    this._getter = getter || defaultGetter;
    this._setter = setter || defaultSetter;
    this._clipCount = 0;
    this._delay = 0;
    this._doneList = [];
    this._onframeList = [];
    this._clipList = [];
  };

  Animator.prototype = {
    /**
     * Set Animation keyframe
     * @param  {number} time 关键帧时间，单位是ms
     * @param  {Object} props 关键帧的属性值，key-value表示
     * @return {module:zrender/animation/Animator}
     */
    when: function (time
    /* ms */
    , props) {
      var tracks = this._tracks;

      for (var propName in props) {
        if (!props.hasOwnProperty(propName)) {
          continue;
        }

        if (!tracks[propName]) {
          tracks[propName] = []; // Invalid value

          var value = this._getter(this._target, propName);

          if (value == null) {
            // zrLog('Invalid property ' + propName);
            continue;
          } // If time is 0
          //  Then props is given initialize value
          // Else
          //  Initialize value from current prop value


          if (time !== 0) {
            tracks[propName].push({
              time: 0,
              value: cloneValue(value)
            });
          }
        }

        tracks[propName].push({
          time: time,
          value: props[propName]
        });
      }

      return this;
    },

    /**
     * 添加动画每一帧的回调函数
     * @param  {Function} callback
     * @return {module:zrender/animation/Animator}
     */
    during: function (callback) {
      this._onframeList.push(callback);

      return this;
    },
    pause: function () {
      for (var i = 0; i < this._clipList.length; i++) {
        this._clipList[i].pause();
      }

      this._paused = true;
    },
    resume: function () {
      for (var i = 0; i < this._clipList.length; i++) {
        this._clipList[i].resume();
      }

      this._paused = false;
    },
    isPaused: function () {
      return !!this._paused;
    },
    _doneCallback: function () {
      // Clear all tracks
      this._tracks = {}; // Clear all clips

      this._clipList.length = 0;
      var doneList = this._doneList;
      var len = doneList.length;

      for (var i = 0; i < len; i++) {
        doneList[i].call(this);
      }
    },

    /**
     * Start the animation
     * @param  {string|Function} [easing]
     *         动画缓动函数，详见{@link module:zrender/animation/easing}
     * @param  {boolean} forceAnimate
     * @return {module:zrender/animation/Animator}
     */
    start: function (easing, forceAnimate) {
      var self = this;
      var clipCount = 0;

      var oneTrackDone = function () {
        clipCount--;

        if (!clipCount) {
          self._doneCallback();
        }
      };

      var lastClip;

      for (var propName in this._tracks) {
        if (!this._tracks.hasOwnProperty(propName)) {
          continue;
        }

        var clip = createTrackClip(this, easing, oneTrackDone, this._tracks[propName], propName, forceAnimate);

        if (clip) {
          this._clipList.push(clip);

          clipCount++; // If start after added to animation

          if (this.animation) {
            this.animation.addClip(clip);
          }

          lastClip = clip;
        }
      } // Add during callback on the last clip


      if (lastClip) {
        var oldOnFrame = lastClip.onframe;

        lastClip.onframe = function (target, percent) {
          oldOnFrame(target, percent);

          for (var i = 0; i < self._onframeList.length; i++) {
            self._onframeList[i](target, percent);
          }
        };
      } // This optimization will help the case that in the upper application
      // the view may be refreshed frequently, where animation will be
      // called repeatly but nothing changed.


      if (!clipCount) {
        this._doneCallback();
      }

      return this;
    },

    /**
     * Stop animation
     * @param {boolean} forwardToLast If move to last frame before stop
     */
    stop: function (forwardToLast) {
      var clipList = this._clipList;
      var animation = this.animation;

      for (var i = 0; i < clipList.length; i++) {
        var clip = clipList[i];

        if (forwardToLast) {
          // Move to last frame before stop
          clip.onframe(this._target, 1);
        }

        animation && animation.removeClip(clip);
      }

      clipList.length = 0;
    },

    /**
     * Set when animation delay starts
     * @param  {number} time 单位ms
     * @return {module:zrender/animation/Animator}
     */
    delay: function (time) {
      this._delay = time;
      return this;
    },

    /**
     * Add callback for animation end
     * @param  {Function} cb
     * @return {module:zrender/animation/Animator}
     */
    done: function (cb) {
      if (cb) {
        this._doneList.push(cb);
      }

      return this;
    },

    /**
     * @return {Array.<module:zrender/animation/Clip>}
     */
    getClips: function () {
      return this._clipList;
    }
  };
  var _default$a = Animator;
  var Animator_1 = _default$a;

  var dpr = 1; // If in browser environment

  if (typeof window !== 'undefined') {
    dpr = Math.max(window.devicePixelRatio || 1, 1);
  }
  /**
   * config默认配置项
   * @exports zrender/config
   * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
   */

  /**
   * Debug log mode:
   * 0: Do nothing, for release.
   * 1: console.error, for debug.
   */


  var debugMode = 0; // retina 屏幕优化

  var devicePixelRatio = dpr;
  var debugMode_1 = debugMode;
  var devicePixelRatio_1 = devicePixelRatio;

  var config = {
  	debugMode: debugMode_1,
  	devicePixelRatio: devicePixelRatio_1
  };

  var logError = function () {};

  var _default$b = logError;
  var log = _default$b;

  var isString$1 = util.isString;
  var isFunction$1 = util.isFunction;
  var isObject$1 = util.isObject;
  var isArrayLike$2 = util.isArrayLike;
  var indexOf$1 = util.indexOf;

  /**
   * @alias module:zrender/mixin/Animatable
   * @constructor
   */
  var Animatable = function () {
    /**
     * @type {Array.<module:zrender/animation/Animator>}
     * @readOnly
     */
    this.animators = [];
  };

  Animatable.prototype = {
    constructor: Animatable,

    /**
     * 动画
     *
     * @param {string} path The path to fetch value from object, like 'a.b.c'.
     * @param {boolean} [loop] Whether to loop animation.
     * @return {module:zrender/animation/Animator}
     * @example:
     *     el.animate('style', false)
     *         .when(1000, {x: 10} )
     *         .done(function(){ // Animation done })
     *         .start()
     */
    animate: function (path, loop) {
      var target;
      var animatingShape = false;
      var el = this;
      var zr = this.__zr;

      if (path) {
        var pathSplitted = path.split('.');
        var prop = el; // If animating shape

        animatingShape = pathSplitted[0] === 'shape';

        for (var i = 0, l = pathSplitted.length; i < l; i++) {
          if (!prop) {
            continue;
          }

          prop = prop[pathSplitted[i]];
        }

        if (prop) {
          target = prop;
        }
      } else {
        target = el;
      }

      if (!target) {
        log('Property "' + path + '" is not existed in element ' + el.id);
        return;
      }

      var animators = el.animators;
      var animator = new Animator_1(target, loop);
      animator.during(function (target) {
        el.dirty(animatingShape);
      }).done(function () {
        // FIXME Animator will not be removed if use `Animator#stop` to stop animation
        animators.splice(indexOf$1(animators, animator), 1);
      });
      animators.push(animator); // If animate after added to the zrender

      if (zr) {
        zr.animation.addAnimator(animator);
      }

      return animator;
    },

    /**
     * 停止动画
     * @param {boolean} forwardToLast If move to last frame before stop
     */
    stopAnimation: function (forwardToLast) {
      var animators = this.animators;
      var len = animators.length;

      for (var i = 0; i < len; i++) {
        animators[i].stop(forwardToLast);
      }

      animators.length = 0;
      return this;
    },

    /**
     * Caution: this method will stop previous animation.
     * So do not use this method to one element twice before
     * animation starts, unless you know what you are doing.
     * @param {Object} target
     * @param {number} [time=500] Time in ms
     * @param {string} [easing='linear']
     * @param {number} [delay=0]
     * @param {Function} [callback]
     * @param {Function} [forceAnimate] Prevent stop animation and callback
     *        immediently when target values are the same as current values.
     *
     * @example
     *  // Animate position
     *  el.animateTo({
     *      position: [10, 10]
     *  }, function () { // done })
     *
     *  // Animate shape, style and position in 100ms, delayed 100ms, with cubicOut easing
     *  el.animateTo({
     *      shape: {
     *          width: 500
     *      },
     *      style: {
     *          fill: 'red'
     *      }
     *      position: [10, 10]
     *  }, 100, 100, 'cubicOut', function () { // done })
     */
    // TODO Return animation key
    animateTo: function (target, time, delay, easing, callback, forceAnimate) {
      animateTo(this, target, time, delay, easing, callback, forceAnimate);
    },

    /**
     * Animate from the target state to current state.
     * The params and the return value are the same as `this.animateTo`.
     */
    animateFrom: function (target, time, delay, easing, callback, forceAnimate) {
      animateTo(this, target, time, delay, easing, callback, forceAnimate, true);
    }
  };

  function animateTo(animatable, target, time, delay, easing, callback, forceAnimate, reverse) {
    // animateTo(target, time, easing, callback);
    if (isString$1(delay)) {
      callback = easing;
      easing = delay;
      delay = 0;
    } // animateTo(target, time, delay, callback);
    else if (isFunction$1(easing)) {
        callback = easing;
        easing = 'linear';
        delay = 0;
      } // animateTo(target, time, callback);
      else if (isFunction$1(delay)) {
          callback = delay;
          delay = 0;
        } // animateTo(target, callback)
        else if (isFunction$1(time)) {
            callback = time;
            time = 500;
          } // animateTo(target)
          else if (!time) {
              time = 500;
            } // Stop all previous animations


    animatable.stopAnimation();
    animateToShallow(animatable, '', animatable, target, time, delay, reverse); // Animators may be removed immediately after start
    // if there is nothing to animate

    var animators = animatable.animators.slice();
    var count = animators.length;

    function done() {
      count--;

      if (!count) {
        callback && callback();
      }
    } // No animators. This should be checked before animators[i].start(),
    // because 'done' may be executed immediately if no need to animate.


    if (!count) {
      callback && callback();
    } // Start after all animators created
    // Incase any animator is done immediately when all animation properties are not changed


    for (var i = 0; i < animators.length; i++) {
      animators[i].done(done).start(easing, forceAnimate);
    }
  }
  /**
   * @param {string} path=''
   * @param {Object} source=animatable
   * @param {Object} target
   * @param {number} [time=500]
   * @param {number} [delay=0]
   * @param {boolean} [reverse] If `true`, animate
   *        from the `target` to current state.
   *
   * @example
   *  // Animate position
   *  el._animateToShallow({
   *      position: [10, 10]
   *  })
   *
   *  // Animate shape, style and position in 100ms, delayed 100ms
   *  el._animateToShallow({
   *      shape: {
   *          width: 500
   *      },
   *      style: {
   *          fill: 'red'
   *      }
   *      position: [10, 10]
   *  }, 100, 100)
   */


  function animateToShallow(animatable, path, source, target, time, delay, reverse) {
    var objShallow = {};
    var propertyCount = 0;

    for (var name in target) {
      if (!target.hasOwnProperty(name)) {
        continue;
      }

      if (source[name] != null) {
        if (isObject$1(target[name]) && !isArrayLike$2(target[name])) {
          animateToShallow(animatable, path ? path + '.' + name : name, source[name], target[name], time, delay, reverse);
        } else {
          if (reverse) {
            objShallow[name] = source[name];
            setAttrByPath(animatable, path, name, target[name]);
          } else {
            objShallow[name] = target[name];
          }

          propertyCount++;
        }
      } else if (target[name] != null && !reverse) {
        setAttrByPath(animatable, path, name, target[name]);
      }
    }

    if (propertyCount > 0) {
      animatable.animate(path, false).when(time == null ? 500 : time, objShallow).delay(delay || 0);
    }
  }

  function setAttrByPath(el, path, name, value) {
    // Attr directly if not has property
    // FIXME, if some property not needed for element ?
    if (!path) {
      el.attr(name, value);
    } else {
      // Only support set shape or style
      var props = {};
      props[path] = {};
      props[path][name] = value;
      el.attr(props);
    }
  }

  var _default$c = Animatable;
  var Animatable_1 = _default$c;

  /**
   * @alias module:zrender/Element
   * @constructor
   * @extends {module:zrender/mixin/Animatable}
   * @extends {module:zrender/mixin/Transformable}
   * @extends {module:zrender/mixin/Eventful}
   */
  var Element = function (opts) {
    // jshint ignore:line
    Transformable_1.call(this, opts);
    Eventful_1.call(this, opts);
    Animatable_1.call(this, opts);
    /**
     * 画布元素ID
     * @type {string}
     */

    this.id = opts.id || guid();
  };

  Element.prototype = {
    /**
     * 元素类型
     * Element type
     * @type {string}
     */
    type: 'element',

    /**
     * 元素名字
     * Element name
     * @type {string}
     */
    name: '',

    /**
     * ZRender 实例对象，会在 element 添加到 zrender 实例中后自动赋值
     * ZRender instance will be assigned when element is associated with zrender
     * @name module:/zrender/Element#__zr
     * @type {module:zrender/ZRender}
     */
    __zr: null,

    /**
     * 图形是否忽略，为true时忽略图形的绘制以及事件触发
     * If ignore drawing and events of the element object
     * @name module:/zrender/Element#ignore
     * @type {boolean}
     * @default false
     */
    ignore: false,

    /**
     * 用于裁剪的路径(shape)，所有 Group 内的路径在绘制时都会被这个路径裁剪
     * 该路径会继承被裁减对象的变换
     * @type {module:zrender/graphic/Path}
     * @see http://www.w3.org/TR/2dcontext/#clipping-region
     * @readOnly
     */
    clipPath: null,

    /**
     * 是否是 Group
     * @type {boolean}
     */
    isGroup: false,

    /**
     * Drift element
     * @param  {number} dx dx on the global space
     * @param  {number} dy dy on the global space
     */
    drift: function (dx, dy) {
      switch (this.draggable) {
        case 'horizontal':
          dy = 0;
          break;

        case 'vertical':
          dx = 0;
          break;
      }

      var m = this.transform;

      if (!m) {
        m = this.transform = [1, 0, 0, 1, 0, 0];
      }

      m[4] += dx;
      m[5] += dy;
      this.decomposeTransform();
      this.dirty(false);
    },

    /**
     * Hook before update
     */
    beforeUpdate: function () {},

    /**
     * Hook after update
     */
    afterUpdate: function () {},

    /**
     * Update each frame
     */
    update: function () {
      this.updateTransform();
    },

    /**
     * @param  {Function} cb
     * @param  {}   context
     */
    traverse: function (cb, context) {},

    /**
     * @protected
     */
    attrKV: function (key, value) {
      if (key === 'position' || key === 'scale' || key === 'origin') {
        // Copy the array
        if (value) {
          var target = this[key];

          if (!target) {
            target = this[key] = [];
          }

          target[0] = value[0];
          target[1] = value[1];
        }
      } else {
        this[key] = value;
      }
    },

    /**
     * Hide the element
     */
    hide: function () {
      this.ignore = true;
      this.__zr && this.__zr.refresh();
    },

    /**
     * Show the element
     */
    show: function () {
      this.ignore = false;
      this.__zr && this.__zr.refresh();
    },

    /**
     * @param {string|Object} key
     * @param {*} value
     */
    attr: function (key, value) {
      if (typeof key === 'string') {
        this.attrKV(key, value);
      } else if (util.isObject(key)) {
        for (var name in key) {
          if (key.hasOwnProperty(name)) {
            this.attrKV(name, key[name]);
          }
        }
      }

      this.dirty(false);
      return this;
    },

    /**
     * @param {module:zrender/graphic/Path} clipPath
     */
    setClipPath: function (clipPath) {
      var zr = this.__zr;

      if (zr) {
        clipPath.addSelfToZr(zr);
      } // Remove previous clip path


      if (this.clipPath && this.clipPath !== clipPath) {
        this.removeClipPath();
      }

      this.clipPath = clipPath;
      clipPath.__zr = zr;
      clipPath.__clipTarget = this;
      this.dirty(false);
    },

    /**
     */
    removeClipPath: function () {
      var clipPath = this.clipPath;

      if (clipPath) {
        if (clipPath.__zr) {
          clipPath.removeSelfFromZr(clipPath.__zr);
        }

        clipPath.__zr = null;
        clipPath.__clipTarget = null;
        this.clipPath = null;
        this.dirty(false);
      }
    },

    /**
     * Add self from zrender instance.
     * Not recursively because it will be invoked when element added to storage.
     * @param {module:zrender/ZRender} zr
     */
    addSelfToZr: function (zr) {
      this.__zr = zr; // 添加动画

      var animators = this.animators;

      if (animators) {
        for (var i = 0; i < animators.length; i++) {
          zr.animation.addAnimator(animators[i]);
        }
      }

      if (this.clipPath) {
        this.clipPath.addSelfToZr(zr);
      }
    },

    /**
     * Remove self from zrender instance.
     * Not recursively because it will be invoked when element added to storage.
     * @param {module:zrender/ZRender} zr
     */
    removeSelfFromZr: function (zr) {
      this.__zr = null; // 移除动画

      var animators = this.animators;

      if (animators) {
        for (var i = 0; i < animators.length; i++) {
          zr.animation.removeAnimator(animators[i]);
        }
      }

      if (this.clipPath) {
        this.clipPath.removeSelfFromZr(zr);
      }
    }
  };
  util.mixin(Element, Animatable_1);
  util.mixin(Element, Transformable_1);
  util.mixin(Element, Eventful_1);
  var _default$d = Element;
  var Element_1 = _default$d;

  /**
   * @module echarts/core/BoundingRect
   */
  var v2ApplyTransform = vector.applyTransform;
  var mathMin = Math.min;
  var mathMax = Math.max;
  /**
   * @alias module:echarts/core/BoundingRect
   */

  function BoundingRect(x, y, width, height) {
    if (width < 0) {
      x = x + width;
      width = -width;
    }

    if (height < 0) {
      y = y + height;
      height = -height;
    }
    /**
     * @type {number}
     */


    this.x = x;
    /**
     * @type {number}
     */

    this.y = y;
    /**
     * @type {number}
     */

    this.width = width;
    /**
     * @type {number}
     */

    this.height = height;
  }

  BoundingRect.prototype = {
    constructor: BoundingRect,

    /**
     * @param {module:echarts/core/BoundingRect} other
     */
    union: function (other) {
      var x = mathMin(other.x, this.x);
      var y = mathMin(other.y, this.y);
      this.width = mathMax(other.x + other.width, this.x + this.width) - x;
      this.height = mathMax(other.y + other.height, this.y + this.height) - y;
      this.x = x;
      this.y = y;
    },

    /**
     * @param {Array.<number>} m
     * @methods
     */
    applyTransform: function () {
      var lt = [];
      var rb = [];
      var lb = [];
      var rt = [];
      return function (m) {
        // In case usage like this
        // el.getBoundingRect().applyTransform(el.transform)
        // And element has no transform
        if (!m) {
          return;
        }

        lt[0] = lb[0] = this.x;
        lt[1] = rt[1] = this.y;
        rb[0] = rt[0] = this.x + this.width;
        rb[1] = lb[1] = this.y + this.height;
        v2ApplyTransform(lt, lt, m);
        v2ApplyTransform(rb, rb, m);
        v2ApplyTransform(lb, lb, m);
        v2ApplyTransform(rt, rt, m);
        this.x = mathMin(lt[0], rb[0], lb[0], rt[0]);
        this.y = mathMin(lt[1], rb[1], lb[1], rt[1]);
        var maxX = mathMax(lt[0], rb[0], lb[0], rt[0]);
        var maxY = mathMax(lt[1], rb[1], lb[1], rt[1]);
        this.width = maxX - this.x;
        this.height = maxY - this.y;
      };
    }(),

    /**
     * Calculate matrix of transforming from self to target rect
     * @param  {module:zrender/core/BoundingRect} b
     * @return {Array.<number>}
     */
    calculateTransform: function (b) {
      var a = this;
      var sx = b.width / a.width;
      var sy = b.height / a.height;
      var m = matrix.create(); // 矩阵右乘

      matrix.translate(m, m, [-a.x, -a.y]);
      matrix.scale(m, m, [sx, sy]);
      matrix.translate(m, m, [b.x, b.y]);
      return m;
    },

    /**
     * @param {(module:echarts/core/BoundingRect|Object)} b
     * @return {boolean}
     */
    intersect: function (b) {
      if (!b) {
        return false;
      }

      if (!(b instanceof BoundingRect)) {
        // Normalize negative width/height.
        b = BoundingRect.create(b);
      }

      var a = this;
      var ax0 = a.x;
      var ax1 = a.x + a.width;
      var ay0 = a.y;
      var ay1 = a.y + a.height;
      var bx0 = b.x;
      var bx1 = b.x + b.width;
      var by0 = b.y;
      var by1 = b.y + b.height;
      return !(ax1 < bx0 || bx1 < ax0 || ay1 < by0 || by1 < ay0);
    },
    contain: function (x, y) {
      var rect = this;
      return x >= rect.x && x <= rect.x + rect.width && y >= rect.y && y <= rect.y + rect.height;
    },

    /**
     * @return {module:echarts/core/BoundingRect}
     */
    clone: function () {
      return new BoundingRect(this.x, this.y, this.width, this.height);
    },

    /**
     * Copy from another rect
     */
    copy: function (other) {
      this.x = other.x;
      this.y = other.y;
      this.width = other.width;
      this.height = other.height;
    },
    plain: function () {
      return {
        x: this.x,
        y: this.y,
        width: this.width,
        height: this.height
      };
    }
  };
  /**
   * @param {Object|module:zrender/core/BoundingRect} rect
   * @param {number} rect.x
   * @param {number} rect.y
   * @param {number} rect.width
   * @param {number} rect.height
   * @return {module:zrender/core/BoundingRect}
   */

  BoundingRect.create = function (rect) {
    return new BoundingRect(rect.x, rect.y, rect.width, rect.height);
  };

  var _default$e = BoundingRect;
  var BoundingRect_1 = _default$e;

  /**
   * Group是一个容器，可以插入子节点，Group的变换也会被应用到子节点上
   * @module zrender/graphic/Group
   * @example
   *     var Group = require('zrender/container/Group');
   *     var Circle = require('zrender/graphic/shape/Circle');
   *     var g = new Group();
   *     g.position[0] = 100;
   *     g.position[1] = 100;
   *     g.add(new Circle({
   *         style: {
   *             x: 100,
   *             y: 100,
   *             r: 20,
   *         }
   *     }));
   *     zr.add(g);
   */

  /**
   * @alias module:zrender/graphic/Group
   * @constructor
   * @extends module:zrender/mixin/Transformable
   * @extends module:zrender/mixin/Eventful
   */
  var Group = function (opts) {
    opts = opts || {};
    Element_1.call(this, opts);

    for (var key in opts) {
      if (opts.hasOwnProperty(key)) {
        this[key] = opts[key];
      }
    }

    this._children = [];
    this.__storage = null;
    this.__dirty = true;
  };

  Group.prototype = {
    constructor: Group,
    isGroup: true,

    /**
     * @type {string}
     */
    type: 'group',

    /**
     * 所有子孙元素是否响应鼠标事件
     * @name module:/zrender/container/Group#silent
     * @type {boolean}
     * @default false
     */
    silent: false,

    /**
     * @return {Array.<module:zrender/Element>}
     */
    children: function () {
      return this._children.slice();
    },

    /**
     * 获取指定 index 的儿子节点
     * @param  {number} idx
     * @return {module:zrender/Element}
     */
    childAt: function (idx) {
      return this._children[idx];
    },

    /**
     * 获取指定名字的儿子节点
     * @param  {string} name
     * @return {module:zrender/Element}
     */
    childOfName: function (name) {
      var children = this._children;

      for (var i = 0; i < children.length; i++) {
        if (children[i].name === name) {
          return children[i];
        }
      }
    },

    /**
     * @return {number}
     */
    childCount: function () {
      return this._children.length;
    },

    /**
     * 添加子节点到最后
     * @param {module:zrender/Element} child
     */
    add: function (child) {
      if (child && child !== this && child.parent !== this) {
        this._children.push(child);

        this._doAdd(child);
      }

      return this;
    },

    /**
     * 添加子节点在 nextSibling 之前
     * @param {module:zrender/Element} child
     * @param {module:zrender/Element} nextSibling
     */
    addBefore: function (child, nextSibling) {
      if (child && child !== this && child.parent !== this && nextSibling && nextSibling.parent === this) {
        var children = this._children;
        var idx = children.indexOf(nextSibling);

        if (idx >= 0) {
          children.splice(idx, 0, child);

          this._doAdd(child);
        }
      }

      return this;
    },
    _doAdd: function (child) {
      if (child.parent) {
        child.parent.remove(child);
      }

      child.parent = this;
      var storage = this.__storage;
      var zr = this.__zr;

      if (storage && storage !== child.__storage) {
        storage.addToStorage(child);

        if (child instanceof Group) {
          child.addChildrenToStorage(storage);
        }
      }

      zr && zr.refresh();
    },

    /**
     * 移除子节点
     * @param {module:zrender/Element} child
     */
    remove: function (child) {
      var zr = this.__zr;
      var storage = this.__storage;
      var children = this._children;
      var idx = util.indexOf(children, child);

      if (idx < 0) {
        return this;
      }

      children.splice(idx, 1);
      child.parent = null;

      if (storage) {
        storage.delFromStorage(child);

        if (child instanceof Group) {
          child.delChildrenFromStorage(storage);
        }
      }

      zr && zr.refresh();
      return this;
    },

    /**
     * 移除所有子节点
     */
    removeAll: function () {
      var children = this._children;
      var storage = this.__storage;
      var child;
      var i;

      for (i = 0; i < children.length; i++) {
        child = children[i];

        if (storage) {
          storage.delFromStorage(child);

          if (child instanceof Group) {
            child.delChildrenFromStorage(storage);
          }
        }

        child.parent = null;
      }

      children.length = 0;
      return this;
    },

    /**
     * 遍历所有子节点
     * @param  {Function} cb
     * @param  {}   context
     */
    eachChild: function (cb, context) {
      var children = this._children;

      for (var i = 0; i < children.length; i++) {
        var child = children[i];
        cb.call(context, child, i);
      }

      return this;
    },

    /**
     * 深度优先遍历所有子孙节点
     * @param  {Function} cb
     * @param  {}   context
     */
    traverse: function (cb, context) {
      for (var i = 0; i < this._children.length; i++) {
        var child = this._children[i];
        cb.call(context, child);

        if (child.type === 'group') {
          child.traverse(cb, context);
        }
      }

      return this;
    },
    addChildrenToStorage: function (storage) {
      for (var i = 0; i < this._children.length; i++) {
        var child = this._children[i];
        storage.addToStorage(child);

        if (child instanceof Group) {
          child.addChildrenToStorage(storage);
        }
      }
    },
    delChildrenFromStorage: function (storage) {
      for (var i = 0; i < this._children.length; i++) {
        var child = this._children[i];
        storage.delFromStorage(child);

        if (child instanceof Group) {
          child.delChildrenFromStorage(storage);
        }
      }
    },
    dirty: function () {
      this.__dirty = true;
      this.__zr && this.__zr.refresh();
      return this;
    },

    /**
     * @return {module:zrender/core/BoundingRect}
     */
    getBoundingRect: function (includeChildren) {
      // TODO Caching
      var rect = null;
      var tmpRect = new BoundingRect_1(0, 0, 0, 0);
      var children = includeChildren || this._children;
      var tmpMat = [];

      for (var i = 0; i < children.length; i++) {
        var child = children[i];

        if (child.ignore || child.invisible) {
          continue;
        }

        var childRect = child.getBoundingRect();
        var transform = child.getLocalTransform(tmpMat); // TODO
        // The boundingRect cacluated by transforming original
        // rect may be bigger than the actual bundingRect when rotation
        // is used. (Consider a circle rotated aginst its center, where
        // the actual boundingRect should be the same as that not be
        // rotated.) But we can not find better approach to calculate
        // actual boundingRect yet, considering performance.

        if (transform) {
          tmpRect.copy(childRect);
          tmpRect.applyTransform(transform);
          rect = rect || tmpRect.clone();
          rect.union(tmpRect);
        } else {
          rect = rect || childRect.clone();
          rect.union(childRect);
        }
      }

      return rect || tmpRect;
    }
  };
  util.inherits(Group, Element_1);
  var _default$f = Group;
  var Group_1 = _default$f;

  // https://github.com/mziccard/node-timsort
  var DEFAULT_MIN_MERGE = 32;
  var DEFAULT_MIN_GALLOPING = 7;

  function minRunLength(n) {
    var r = 0;

    while (n >= DEFAULT_MIN_MERGE) {
      r |= n & 1;
      n >>= 1;
    }

    return n + r;
  }

  function makeAscendingRun(array, lo, hi, compare) {
    var runHi = lo + 1;

    if (runHi === hi) {
      return 1;
    }

    if (compare(array[runHi++], array[lo]) < 0) {
      while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {
        runHi++;
      }

      reverseRun(array, lo, runHi);
    } else {
      while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {
        runHi++;
      }
    }

    return runHi - lo;
  }

  function reverseRun(array, lo, hi) {
    hi--;

    while (lo < hi) {
      var t = array[lo];
      array[lo++] = array[hi];
      array[hi--] = t;
    }
  }

  function binaryInsertionSort(array, lo, hi, start, compare) {
    if (start === lo) {
      start++;
    }

    for (; start < hi; start++) {
      var pivot = array[start];
      var left = lo;
      var right = start;
      var mid;

      while (left < right) {
        mid = left + right >>> 1;

        if (compare(pivot, array[mid]) < 0) {
          right = mid;
        } else {
          left = mid + 1;
        }
      }

      var n = start - left;

      switch (n) {
        case 3:
          array[left + 3] = array[left + 2];

        case 2:
          array[left + 2] = array[left + 1];

        case 1:
          array[left + 1] = array[left];
          break;

        default:
          while (n > 0) {
            array[left + n] = array[left + n - 1];
            n--;
          }

      }

      array[left] = pivot;
    }
  }

  function gallopLeft(value, array, start, length, hint, compare) {
    var lastOffset = 0;
    var maxOffset = 0;
    var offset = 1;

    if (compare(value, array[start + hint]) > 0) {
      maxOffset = length - hint;

      while (offset < maxOffset && compare(value, array[start + hint + offset]) > 0) {
        lastOffset = offset;
        offset = (offset << 1) + 1;

        if (offset <= 0) {
          offset = maxOffset;
        }
      }

      if (offset > maxOffset) {
        offset = maxOffset;
      }

      lastOffset += hint;
      offset += hint;
    } else {
      maxOffset = hint + 1;

      while (offset < maxOffset && compare(value, array[start + hint - offset]) <= 0) {
        lastOffset = offset;
        offset = (offset << 1) + 1;

        if (offset <= 0) {
          offset = maxOffset;
        }
      }

      if (offset > maxOffset) {
        offset = maxOffset;
      }

      var tmp = lastOffset;
      lastOffset = hint - offset;
      offset = hint - tmp;
    }

    lastOffset++;

    while (lastOffset < offset) {
      var m = lastOffset + (offset - lastOffset >>> 1);

      if (compare(value, array[start + m]) > 0) {
        lastOffset = m + 1;
      } else {
        offset = m;
      }
    }

    return offset;
  }

  function gallopRight(value, array, start, length, hint, compare) {
    var lastOffset = 0;
    var maxOffset = 0;
    var offset = 1;

    if (compare(value, array[start + hint]) < 0) {
      maxOffset = hint + 1;

      while (offset < maxOffset && compare(value, array[start + hint - offset]) < 0) {
        lastOffset = offset;
        offset = (offset << 1) + 1;

        if (offset <= 0) {
          offset = maxOffset;
        }
      }

      if (offset > maxOffset) {
        offset = maxOffset;
      }

      var tmp = lastOffset;
      lastOffset = hint - offset;
      offset = hint - tmp;
    } else {
      maxOffset = length - hint;

      while (offset < maxOffset && compare(value, array[start + hint + offset]) >= 0) {
        lastOffset = offset;
        offset = (offset << 1) + 1;

        if (offset <= 0) {
          offset = maxOffset;
        }
      }

      if (offset > maxOffset) {
        offset = maxOffset;
      }

      lastOffset += hint;
      offset += hint;
    }

    lastOffset++;

    while (lastOffset < offset) {
      var m = lastOffset + (offset - lastOffset >>> 1);

      if (compare(value, array[start + m]) < 0) {
        offset = m;
      } else {
        lastOffset = m + 1;
      }
    }

    return offset;
  }

  function TimSort(array, compare) {
    var minGallop = DEFAULT_MIN_GALLOPING;
    var length = 0;
    var runStart;
    var runLength;
    var stackSize = 0;
    length = array.length;

    var tmp = [];
    runStart = [];
    runLength = [];

    function pushRun(_runStart, _runLength) {
      runStart[stackSize] = _runStart;
      runLength[stackSize] = _runLength;
      stackSize += 1;
    }

    function mergeRuns() {
      while (stackSize > 1) {
        var n = stackSize - 2;

        if (n >= 1 && runLength[n - 1] <= runLength[n] + runLength[n + 1] || n >= 2 && runLength[n - 2] <= runLength[n] + runLength[n - 1]) {
          if (runLength[n - 1] < runLength[n + 1]) {
            n--;
          }
        } else if (runLength[n] > runLength[n + 1]) {
          break;
        }

        mergeAt(n);
      }
    }

    function forceMergeRuns() {
      while (stackSize > 1) {
        var n = stackSize - 2;

        if (n > 0 && runLength[n - 1] < runLength[n + 1]) {
          n--;
        }

        mergeAt(n);
      }
    }

    function mergeAt(i) {
      var start1 = runStart[i];
      var length1 = runLength[i];
      var start2 = runStart[i + 1];
      var length2 = runLength[i + 1];
      runLength[i] = length1 + length2;

      if (i === stackSize - 3) {
        runStart[i + 1] = runStart[i + 2];
        runLength[i + 1] = runLength[i + 2];
      }

      stackSize--;
      var k = gallopRight(array[start2], array, start1, length1, 0, compare);
      start1 += k;
      length1 -= k;

      if (length1 === 0) {
        return;
      }

      length2 = gallopLeft(array[start1 + length1 - 1], array, start2, length2, length2 - 1, compare);

      if (length2 === 0) {
        return;
      }

      if (length1 <= length2) {
        mergeLow(start1, length1, start2, length2);
      } else {
        mergeHigh(start1, length1, start2, length2);
      }
    }

    function mergeLow(start1, length1, start2, length2) {
      var i = 0;

      for (i = 0; i < length1; i++) {
        tmp[i] = array[start1 + i];
      }

      var cursor1 = 0;
      var cursor2 = start2;
      var dest = start1;
      array[dest++] = array[cursor2++];

      if (--length2 === 0) {
        for (i = 0; i < length1; i++) {
          array[dest + i] = tmp[cursor1 + i];
        }

        return;
      }

      if (length1 === 1) {
        for (i = 0; i < length2; i++) {
          array[dest + i] = array[cursor2 + i];
        }

        array[dest + length2] = tmp[cursor1];
        return;
      }

      var _minGallop = minGallop;
      var count1;
      var count2;
      var exit;

      while (1) {
        count1 = 0;
        count2 = 0;
        exit = false;

        do {
          if (compare(array[cursor2], tmp[cursor1]) < 0) {
            array[dest++] = array[cursor2++];
            count2++;
            count1 = 0;

            if (--length2 === 0) {
              exit = true;
              break;
            }
          } else {
            array[dest++] = tmp[cursor1++];
            count1++;
            count2 = 0;

            if (--length1 === 1) {
              exit = true;
              break;
            }
          }
        } while ((count1 | count2) < _minGallop);

        if (exit) {
          break;
        }

        do {
          count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare);

          if (count1 !== 0) {
            for (i = 0; i < count1; i++) {
              array[dest + i] = tmp[cursor1 + i];
            }

            dest += count1;
            cursor1 += count1;
            length1 -= count1;

            if (length1 <= 1) {
              exit = true;
              break;
            }
          }

          array[dest++] = array[cursor2++];

          if (--length2 === 0) {
            exit = true;
            break;
          }

          count2 = gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare);

          if (count2 !== 0) {
            for (i = 0; i < count2; i++) {
              array[dest + i] = array[cursor2 + i];
            }

            dest += count2;
            cursor2 += count2;
            length2 -= count2;

            if (length2 === 0) {
              exit = true;
              break;
            }
          }

          array[dest++] = tmp[cursor1++];

          if (--length1 === 1) {
            exit = true;
            break;
          }

          _minGallop--;
        } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);

        if (exit) {
          break;
        }

        if (_minGallop < 0) {
          _minGallop = 0;
        }

        _minGallop += 2;
      }

      minGallop = _minGallop;
      minGallop < 1 && (minGallop = 1);

      if (length1 === 1) {
        for (i = 0; i < length2; i++) {
          array[dest + i] = array[cursor2 + i];
        }

        array[dest + length2] = tmp[cursor1];
      } else if (length1 === 0) {
        throw new Error(); // throw new Error('mergeLow preconditions were not respected');
      } else {
        for (i = 0; i < length1; i++) {
          array[dest + i] = tmp[cursor1 + i];
        }
      }
    }

    function mergeHigh(start1, length1, start2, length2) {
      var i = 0;

      for (i = 0; i < length2; i++) {
        tmp[i] = array[start2 + i];
      }

      var cursor1 = start1 + length1 - 1;
      var cursor2 = length2 - 1;
      var dest = start2 + length2 - 1;
      var customCursor = 0;
      var customDest = 0;
      array[dest--] = array[cursor1--];

      if (--length1 === 0) {
        customCursor = dest - (length2 - 1);

        for (i = 0; i < length2; i++) {
          array[customCursor + i] = tmp[i];
        }

        return;
      }

      if (length2 === 1) {
        dest -= length1;
        cursor1 -= length1;
        customDest = dest + 1;
        customCursor = cursor1 + 1;

        for (i = length1 - 1; i >= 0; i--) {
          array[customDest + i] = array[customCursor + i];
        }

        array[dest] = tmp[cursor2];
        return;
      }

      var _minGallop = minGallop;

      while (true) {
        var count1 = 0;
        var count2 = 0;
        var exit = false;

        do {
          if (compare(tmp[cursor2], array[cursor1]) < 0) {
            array[dest--] = array[cursor1--];
            count1++;
            count2 = 0;

            if (--length1 === 0) {
              exit = true;
              break;
            }
          } else {
            array[dest--] = tmp[cursor2--];
            count2++;
            count1 = 0;

            if (--length2 === 1) {
              exit = true;
              break;
            }
          }
        } while ((count1 | count2) < _minGallop);

        if (exit) {
          break;
        }

        do {
          count1 = length1 - gallopRight(tmp[cursor2], array, start1, length1, length1 - 1, compare);

          if (count1 !== 0) {
            dest -= count1;
            cursor1 -= count1;
            length1 -= count1;
            customDest = dest + 1;
            customCursor = cursor1 + 1;

            for (i = count1 - 1; i >= 0; i--) {
              array[customDest + i] = array[customCursor + i];
            }

            if (length1 === 0) {
              exit = true;
              break;
            }
          }

          array[dest--] = tmp[cursor2--];

          if (--length2 === 1) {
            exit = true;
            break;
          }

          count2 = length2 - gallopLeft(array[cursor1], tmp, 0, length2, length2 - 1, compare);

          if (count2 !== 0) {
            dest -= count2;
            cursor2 -= count2;
            length2 -= count2;
            customDest = dest + 1;
            customCursor = cursor2 + 1;

            for (i = 0; i < count2; i++) {
              array[customDest + i] = tmp[customCursor + i];
            }

            if (length2 <= 1) {
              exit = true;
              break;
            }
          }

          array[dest--] = array[cursor1--];

          if (--length1 === 0) {
            exit = true;
            break;
          }

          _minGallop--;
        } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);

        if (exit) {
          break;
        }

        if (_minGallop < 0) {
          _minGallop = 0;
        }

        _minGallop += 2;
      }

      minGallop = _minGallop;

      if (minGallop < 1) {
        minGallop = 1;
      }

      if (length2 === 1) {
        dest -= length1;
        cursor1 -= length1;
        customDest = dest + 1;
        customCursor = cursor1 + 1;

        for (i = length1 - 1; i >= 0; i--) {
          array[customDest + i] = array[customCursor + i];
        }

        array[dest] = tmp[cursor2];
      } else if (length2 === 0) {
        throw new Error(); // throw new Error('mergeHigh preconditions were not respected');
      } else {
        customCursor = dest - (length2 - 1);

        for (i = 0; i < length2; i++) {
          array[customCursor + i] = tmp[i];
        }
      }
    }

    this.mergeRuns = mergeRuns;
    this.forceMergeRuns = forceMergeRuns;
    this.pushRun = pushRun;
  }

  function sort(array, compare, lo, hi) {
    if (!lo) {
      lo = 0;
    }

    if (!hi) {
      hi = array.length;
    }

    var remaining = hi - lo;

    if (remaining < 2) {
      return;
    }

    var runLength = 0;

    if (remaining < DEFAULT_MIN_MERGE) {
      runLength = makeAscendingRun(array, lo, hi, compare);
      binaryInsertionSort(array, lo, hi, lo + runLength, compare);
      return;
    }

    var ts = new TimSort(array, compare);
    var minRun = minRunLength(remaining);

    do {
      runLength = makeAscendingRun(array, lo, hi, compare);

      if (runLength < minRun) {
        var force = remaining;

        if (force > minRun) {
          force = minRun;
        }

        binaryInsertionSort(array, lo, lo + force, lo + runLength, compare);
        runLength = force;
      }

      ts.pushRun(lo, runLength);
      ts.mergeRuns();
      remaining -= runLength;
      lo += runLength;
    } while (remaining !== 0);

    ts.forceMergeRuns();
  }

  var timsort = sort;

  // Use timsort because in most case elements are partially sorted
  // https://jsfiddle.net/pissang/jr4x7mdm/8/
  function shapeCompareFunc(a, b) {
    if (a.zlevel === b.zlevel) {
      if (a.z === b.z) {
        // if (a.z2 === b.z2) {
        //     // FIXME Slow has renderidx compare
        //     // http://stackoverflow.com/questions/20883421/sorting-in-javascript-should-every-compare-function-have-a-return-0-statement
        //     // https://github.com/v8/v8/blob/47cce544a31ed5577ffe2963f67acb4144ee0232/src/js/array.js#L1012
        //     return a.__renderidx - b.__renderidx;
        // }
        return a.z2 - b.z2;
      }

      return a.z - b.z;
    }

    return a.zlevel - b.zlevel;
  }
  /**
   * 内容仓库 (M)
   * @alias module:zrender/Storage
   * @constructor
   */


  var Storage = function () {
    // jshint ignore:line
    this._roots = [];
    this._displayList = [];
    this._displayListLen = 0;
  };

  Storage.prototype = {
    constructor: Storage,

    /**
     * @param  {Function} cb
     *
     */
    traverse: function (cb, context) {
      for (var i = 0; i < this._roots.length; i++) {
        this._roots[i].traverse(cb, context);
      }
    },

    /**
     * 返回所有图形的绘制队列
     * @param {boolean} [update=false] 是否在返回前更新该数组
     * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组, 在 update 为 true 的时候有效
     *
     * 详见{@link module:zrender/graphic/Displayable.prototype.updateDisplayList}
     * @return {Array.<module:zrender/graphic/Displayable>}
     */
    getDisplayList: function (update, includeIgnore) {
      includeIgnore = includeIgnore || false;

      if (update) {
        this.updateDisplayList(includeIgnore);
      }

      return this._displayList;
    },

    /**
     * 更新图形的绘制队列。
     * 每次绘制前都会调用，该方法会先深度优先遍历整个树，更新所有Group和Shape的变换并且把所有可见的Shape保存到数组中，
     * 最后根据绘制的优先级（zlevel > z > 插入顺序）排序得到绘制队列
     * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组
     */
    updateDisplayList: function (includeIgnore) {
      this._displayListLen = 0;
      var roots = this._roots;
      var displayList = this._displayList;

      for (var i = 0, len = roots.length; i < len; i++) {
        this._updateAndAddDisplayable(roots[i], null, includeIgnore);
      }

      displayList.length = this._displayListLen;
      env_1.canvasSupported && timsort(displayList, shapeCompareFunc);
    },
    _updateAndAddDisplayable: function (el, clipPaths, includeIgnore) {
      if (el.ignore && !includeIgnore) {
        return;
      }

      el.beforeUpdate();

      if (el.__dirty) {
        el.update();
      }

      el.afterUpdate();
      var userSetClipPath = el.clipPath;

      if (userSetClipPath) {
        // FIXME 效率影响
        if (clipPaths) {
          clipPaths = clipPaths.slice();
        } else {
          clipPaths = [];
        }

        var currentClipPath = userSetClipPath;
        var parentClipPath = el; // Recursively add clip path

        while (currentClipPath) {
          // clipPath 的变换是基于使用这个 clipPath 的元素
          currentClipPath.parent = parentClipPath;
          currentClipPath.updateTransform();
          clipPaths.push(currentClipPath);
          parentClipPath = currentClipPath;
          currentClipPath = currentClipPath.clipPath;
        }
      }

      if (el.isGroup) {
        var children = el._children;

        for (var i = 0; i < children.length; i++) {
          var child = children[i]; // Force to mark as dirty if group is dirty
          // FIXME __dirtyPath ?

          if (el.__dirty) {
            child.__dirty = true;
          }

          this._updateAndAddDisplayable(child, clipPaths, includeIgnore);
        } // Mark group clean here


        el.__dirty = false;
      } else {
        el.__clipPaths = clipPaths;
        this._displayList[this._displayListLen++] = el;
      }
    },

    /**
     * 添加图形(Shape)或者组(Group)到根节点
     * @param {module:zrender/Element} el
     */
    addRoot: function (el) {
      if (el.__storage === this) {
        return;
      }

      if (el instanceof Group_1) {
        el.addChildrenToStorage(this);
      }

      this.addToStorage(el);

      this._roots.push(el);
    },

    /**
     * 删除指定的图形(Shape)或者组(Group)
     * @param {string|Array.<string>} [el] 如果为空清空整个Storage
     */
    delRoot: function (el) {
      if (el == null) {
        // 不指定el清空
        for (var i = 0; i < this._roots.length; i++) {
          var root = this._roots[i];

          if (root instanceof Group_1) {
            root.delChildrenFromStorage(this);
          }
        }

        this._roots = [];
        this._displayList = [];
        this._displayListLen = 0;
        return;
      }

      if (el instanceof Array) {
        for (var i = 0, l = el.length; i < l; i++) {
          this.delRoot(el[i]);
        }

        return;
      }

      var idx = util.indexOf(this._roots, el);

      if (idx >= 0) {
        this.delFromStorage(el);

        this._roots.splice(idx, 1);

        if (el instanceof Group_1) {
          el.delChildrenFromStorage(this);
        }
      }
    },
    addToStorage: function (el) {
      if (el) {
        el.__storage = this;
        el.dirty(false);
      }

      return this;
    },
    delFromStorage: function (el) {
      if (el) {
        el.__storage = null;
      }

      return this;
    },

    /**
     * 清空并且释放Storage
     */
    dispose: function () {
      this._renderList = this._roots = null;
    },
    displayableSortFunc: shapeCompareFunc
  };
  var _default$g = Storage;
  var Storage_1 = _default$g;

  var SHADOW_PROPS = {
    'shadowBlur': 1,
    'shadowOffsetX': 1,
    'shadowOffsetY': 1,
    'textShadowBlur': 1,
    'textShadowOffsetX': 1,
    'textShadowOffsetY': 1,
    'textBoxShadowBlur': 1,
    'textBoxShadowOffsetX': 1,
    'textBoxShadowOffsetY': 1
  };

  function _default$h(ctx, propName, value) {
    if (SHADOW_PROPS.hasOwnProperty(propName)) {
      return value *= ctx.dpr;
    }

    return value;
  }

  var fixShadow = _default$h;

  var ContextCachedBy = {
    NONE: 0,
    STYLE_BIND: 1,
    PLAIN_TEXT: 2
  }; // Avoid confused with 0/false.

  var WILL_BE_RESTORED = 9;
  var ContextCachedBy_1 = ContextCachedBy;
  var WILL_BE_RESTORED_1 = WILL_BE_RESTORED;

  var constant = {
  	ContextCachedBy: ContextCachedBy_1,
  	WILL_BE_RESTORED: WILL_BE_RESTORED_1
  };

  var ContextCachedBy$1 = constant.ContextCachedBy;
  var STYLE_COMMON_PROPS = [['shadowBlur', 0], ['shadowOffsetX', 0], ['shadowOffsetY', 0], ['shadowColor', '#000'], ['lineCap', 'butt'], ['lineJoin', 'miter'], ['miterLimit', 10]]; // var SHADOW_PROPS = STYLE_COMMON_PROPS.slice(0, 4);
  // var LINE_PROPS = STYLE_COMMON_PROPS.slice(4);

  var Style = function (opts) {
    this.extendFrom(opts, false);
  };

  function createLinearGradient(ctx, obj, rect) {
    var x = obj.x == null ? 0 : obj.x;
    var x2 = obj.x2 == null ? 1 : obj.x2;
    var y = obj.y == null ? 0 : obj.y;
    var y2 = obj.y2 == null ? 0 : obj.y2;

    if (!obj.global) {
      x = x * rect.width + rect.x;
      x2 = x2 * rect.width + rect.x;
      y = y * rect.height + rect.y;
      y2 = y2 * rect.height + rect.y;
    } // Fix NaN when rect is Infinity


    x = isNaN(x) ? 0 : x;
    x2 = isNaN(x2) ? 1 : x2;
    y = isNaN(y) ? 0 : y;
    y2 = isNaN(y2) ? 0 : y2;
    var canvasGradient = ctx.createLinearGradient(x, y, x2, y2);
    return canvasGradient;
  }

  function createRadialGradient(ctx, obj, rect) {
    var width = rect.width;
    var height = rect.height;
    var min = Math.min(width, height);
    var x = obj.x == null ? 0.5 : obj.x;
    var y = obj.y == null ? 0.5 : obj.y;
    var r = obj.r == null ? 0.5 : obj.r;

    if (!obj.global) {
      x = x * width + rect.x;
      y = y * height + rect.y;
      r = r * min;
    }

    var canvasGradient = ctx.createRadialGradient(x, y, 0, x, y, r);
    return canvasGradient;
  }

  Style.prototype = {
    constructor: Style,

    /**
     * @type {string}
     */
    fill: '#000',

    /**
     * @type {string}
     */
    stroke: null,

    /**
     * @type {number}
     */
    opacity: 1,

    /**
     * @type {number}
     */
    fillOpacity: null,

    /**
     * @type {number}
     */
    strokeOpacity: null,

    /**
     * `true` is not supported.
     * `false`/`null`/`undefined` are the same.
     * `false` is used to remove lineDash in some
     * case that `null`/`undefined` can not be set.
     * (e.g., emphasis.lineStyle in echarts)
     * @type {Array.<number>|boolean}
     */
    lineDash: null,

    /**
     * @type {number}
     */
    lineDashOffset: 0,

    /**
     * @type {number}
     */
    shadowBlur: 0,

    /**
     * @type {number}
     */
    shadowOffsetX: 0,

    /**
     * @type {number}
     */
    shadowOffsetY: 0,

    /**
     * @type {number}
     */
    lineWidth: 1,

    /**
     * If stroke ignore scale
     * @type {Boolean}
     */
    strokeNoScale: false,
    // Bounding rect text configuration
    // Not affected by element transform

    /**
     * @type {string}
     */
    text: null,

    /**
     * If `fontSize` or `fontFamily` exists, `font` will be reset by
     * `fontSize`, `fontStyle`, `fontWeight`, `fontFamily`.
     * So do not visit it directly in upper application (like echarts),
     * but use `contain/text#makeFont` instead.
     * @type {string}
     */
    font: null,

    /**
     * The same as font. Use font please.
     * @deprecated
     * @type {string}
     */
    textFont: null,

    /**
     * It helps merging respectively, rather than parsing an entire font string.
     * @type {string}
     */
    fontStyle: null,

    /**
     * It helps merging respectively, rather than parsing an entire font string.
     * @type {string}
     */
    fontWeight: null,

    /**
     * It helps merging respectively, rather than parsing an entire font string.
     * Should be 12 but not '12px'.
     * @type {number}
     */
    fontSize: null,

    /**
     * It helps merging respectively, rather than parsing an entire font string.
     * @type {string}
     */
    fontFamily: null,

    /**
     * Reserved for special functinality, like 'hr'.
     * @type {string}
     */
    textTag: null,

    /**
     * @type {string}
     */
    textFill: '#000',

    /**
     * @type {string}
     */
    textStroke: null,

    /**
     * @type {number}
     */
    textWidth: null,

    /**
     * Only for textBackground.
     * @type {number}
     */
    textHeight: null,

    /**
     * textStroke may be set as some color as a default
     * value in upper applicaion, where the default value
     * of textStrokeWidth should be 0 to make sure that
     * user can choose to do not use text stroke.
     * @type {number}
     */
    textStrokeWidth: 0,

    /**
     * @type {number}
     */
    textLineHeight: null,

    /**
     * 'inside', 'left', 'right', 'top', 'bottom'
     * [x, y]
     * Based on x, y of rect.
     * @type {string|Array.<number>}
     * @default 'inside'
     */
    textPosition: 'inside',

    /**
     * If not specified, use the boundingRect of a `displayable`.
     * @type {Object}
     */
    textRect: null,

    /**
     * [x, y]
     * @type {Array.<number>}
     */
    textOffset: null,

    /**
     * @type {string}
     */
    textAlign: null,

    /**
     * @type {string}
     */
    textVerticalAlign: null,

    /**
     * @type {number}
     */
    textDistance: 5,

    /**
     * @type {string}
     */
    textShadowColor: 'transparent',

    /**
     * @type {number}
     */
    textShadowBlur: 0,

    /**
     * @type {number}
     */
    textShadowOffsetX: 0,

    /**
     * @type {number}
     */
    textShadowOffsetY: 0,

    /**
     * @type {string}
     */
    textBoxShadowColor: 'transparent',

    /**
     * @type {number}
     */
    textBoxShadowBlur: 0,

    /**
     * @type {number}
     */
    textBoxShadowOffsetX: 0,

    /**
     * @type {number}
     */
    textBoxShadowOffsetY: 0,

    /**
     * Whether transform text.
     * Only available in Path and Image element,
     * where the text is called as `RectText`.
     * @type {boolean}
     */
    transformText: false,

    /**
     * Text rotate around position of Path or Image.
     * The origin of the rotation can be specified by `textOrigin`.
     * Only available in Path and Image element,
     * where the text is called as `RectText`.
     */
    textRotation: 0,

    /**
     * Text origin of text rotation.
     * Useful in the case like label rotation of circular symbol.
     * Only available in Path and Image element, where the text is called
     * as `RectText` and the element is called as "host element".
     * The value can be:
     * + If specified as a coordinate like `[10, 40]`, it is the `[x, y]`
     * base on the left-top corner of the rect of its host element.
     * + If specified as a string `center`, it is the center of the rect of
     * its host element.
     * + By default, this origin is the `textPosition`.
     * @type {string|Array.<number>}
     */
    textOrigin: null,

    /**
     * @type {string}
     */
    textBackgroundColor: null,

    /**
     * @type {string}
     */
    textBorderColor: null,

    /**
     * @type {number}
     */
    textBorderWidth: 0,

    /**
     * @type {number}
     */
    textBorderRadius: 0,

    /**
     * Can be `2` or `[2, 4]` or `[2, 3, 4, 5]`
     * @type {number|Array.<number>}
     */
    textPadding: null,

    /**
     * Text styles for rich text.
     * @type {Object}
     */
    rich: null,

    /**
     * {outerWidth, outerHeight, ellipsis, placeholder}
     * @type {Object}
     */
    truncate: null,

    /**
     * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation
     * @type {string}
     */
    blend: null,

    /**
     * @param {CanvasRenderingContext2D} ctx
     */
    bind: function (ctx, el, prevEl) {
      var style = this;
      var prevStyle = prevEl && prevEl.style; // If no prevStyle, it means first draw.
      // Only apply cache if the last time cachced by this function.

      var notCheckCache = !prevStyle || ctx.__attrCachedBy !== ContextCachedBy$1.STYLE_BIND;
      ctx.__attrCachedBy = ContextCachedBy$1.STYLE_BIND;

      for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {
        var prop = STYLE_COMMON_PROPS[i];
        var styleName = prop[0];

        if (notCheckCache || style[styleName] !== prevStyle[styleName]) {
          // FIXME Invalid property value will cause style leak from previous element.
          ctx[styleName] = fixShadow(ctx, styleName, style[styleName] || prop[1]);
        }
      }

      if (notCheckCache || style.fill !== prevStyle.fill) {
        ctx.fillStyle = style.fill;
      }

      if (notCheckCache || style.stroke !== prevStyle.stroke) {
        ctx.strokeStyle = style.stroke;
      }

      if (notCheckCache || style.opacity !== prevStyle.opacity) {
        ctx.globalAlpha = style.opacity == null ? 1 : style.opacity;
      }

      if (notCheckCache || style.blend !== prevStyle.blend) {
        ctx.globalCompositeOperation = style.blend || 'source-over';
      }

      if (this.hasStroke()) {
        var lineWidth = style.lineWidth;
        ctx.lineWidth = lineWidth / (this.strokeNoScale && el && el.getLineScale ? el.getLineScale() : 1);
      }
    },
    hasFill: function () {
      var fill = this.fill;
      return fill != null && fill !== 'none';
    },
    hasStroke: function () {
      var stroke = this.stroke;
      return stroke != null && stroke !== 'none' && this.lineWidth > 0;
    },

    /**
     * Extend from other style
     * @param {zrender/graphic/Style} otherStyle
     * @param {boolean} overwrite true: overwrirte any way.
     *                            false: overwrite only when !target.hasOwnProperty
     *                            others: overwrite when property is not null/undefined.
     */
    extendFrom: function (otherStyle, overwrite) {
      if (otherStyle) {
        for (var name in otherStyle) {
          if (otherStyle.hasOwnProperty(name) && (overwrite === true || (overwrite === false ? !this.hasOwnProperty(name) : otherStyle[name] != null))) {
            this[name] = otherStyle[name];
          }
        }
      }
    },

    /**
     * Batch setting style with a given object
     * @param {Object|string} obj
     * @param {*} [obj]
     */
    set: function (obj, value) {
      if (typeof obj === 'string') {
        this[obj] = value;
      } else {
        this.extendFrom(obj, true);
      }
    },

    /**
     * Clone
     * @return {zrender/graphic/Style} [description]
     */
    clone: function () {
      var newStyle = new this.constructor();
      newStyle.extendFrom(this, true);
      return newStyle;
    },
    getGradient: function (ctx, obj, rect) {
      var method = obj.type === 'radial' ? createRadialGradient : createLinearGradient;
      var canvasGradient = method(ctx, obj, rect);
      var colorStops = obj.colorStops;

      for (var i = 0; i < colorStops.length; i++) {
        canvasGradient.addColorStop(colorStops[i].offset, colorStops[i].color);
      }

      return canvasGradient;
    }
  };
  var styleProto = Style.prototype;

  for (var i$1 = 0; i$1 < STYLE_COMMON_PROPS.length; i$1++) {
    var prop = STYLE_COMMON_PROPS[i$1];

    if (!(prop[0] in styleProto)) {
      styleProto[prop[0]] = prop[1];
    }
  } // Provide for others


  Style.getGradient = styleProto.getGradient;
  var _default$i = Style;
  var Style_1 = _default$i;

  var Pattern = function (image, repeat) {
    // Should do nothing more in this constructor. Because gradient can be
    // declard by `color: {image: ...}`, where this constructor will not be called.
    this.image = image;
    this.repeat = repeat; // Can be cloned

    this.type = 'pattern';
  };

  Pattern.prototype.getCanvasPattern = function (ctx) {
    return ctx.createPattern(this.image, this.repeat || 'repeat');
  };

  var _default$j = Pattern;
  var Pattern_1 = _default$j;

  var devicePixelRatio$1 = config.devicePixelRatio;





  /**
   * @module zrender/Layer
   * @author pissang(https://www.github.com/pissang)
   */
  function returnFalse() {
    return false;
  }
  /**
   * 创建dom
   *
   * @inner
   * @param {string} id dom id 待用
   * @param {Painter} painter painter instance
   * @param {number} number
   */


  function createDom(id, painter, dpr) {
    var newDom = util.createCanvas();
    var width = painter.getWidth();
    var height = painter.getHeight();
    var newDomStyle = newDom.style;

    if (newDomStyle) {
      // In node or some other non-browser environment
      newDomStyle.position = 'absolute';
      newDomStyle.left = 0;
      newDomStyle.top = 0;
      newDomStyle.width = width + 'px';
      newDomStyle.height = height + 'px';
      newDom.setAttribute('data-zr-dom-id', id);
    }

    newDom.width = width * dpr;
    newDom.height = height * dpr;
    return newDom;
  }
  /**
   * @alias module:zrender/Layer
   * @constructor
   * @extends module:zrender/mixin/Transformable
   * @param {string} id
   * @param {module:zrender/Painter} painter
   * @param {number} [dpr]
   */


  var Layer = function (id, painter, dpr) {
    var dom;
    dpr = dpr || devicePixelRatio$1;

    if (typeof id === 'string') {
      dom = createDom(id, painter, dpr);
    } // Not using isDom because in node it will return false
    else if (util.isObject(id)) {
        dom = id;
        id = dom.id;
      }

    this.id = id;
    this.dom = dom;
    var domStyle = dom.style;

    if (domStyle) {
      // Not in node
      dom.onselectstart = returnFalse; // 避免页面选中的尴尬

      domStyle['-webkit-user-select'] = 'none';
      domStyle['user-select'] = 'none';
      domStyle['-webkit-touch-callout'] = 'none';
      domStyle['-webkit-tap-highlight-color'] = 'rgba(0,0,0,0)';
      domStyle['padding'] = 0; // eslint-disable-line dot-notation

      domStyle['margin'] = 0; // eslint-disable-line dot-notation

      domStyle['border-width'] = 0;
    }

    this.domBack = null;
    this.ctxBack = null;
    this.painter = painter;
    this.config = null; // Configs

    /**
     * 每次清空画布的颜色
     * @type {string}
     * @default 0
     */

    this.clearColor = 0;
    /**
     * 是否开启动态模糊
     * @type {boolean}
     * @default false
     */

    this.motionBlur = false;
    /**
     * 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显
     * @type {number}
     * @default 0.7
     */

    this.lastFrameAlpha = 0.7;
    /**
     * Layer dpr
     * @type {number}
     */

    this.dpr = dpr;
  };

  Layer.prototype = {
    constructor: Layer,
    __dirty: true,
    __used: false,
    __drawIndex: 0,
    __startIndex: 0,
    __endIndex: 0,
    incremental: false,
    getElementCount: function () {
      return this.__endIndex - this.__startIndex;
    },
    initContext: function () {
      this.ctx = this.dom.getContext('2d');
      this.ctx.dpr = this.dpr;
    },
    createBackBuffer: function () {
      var dpr = this.dpr;
      this.domBack = createDom('back-' + this.id, this.painter, dpr);
      this.ctxBack = this.domBack.getContext('2d');

      if (dpr !== 1) {
        this.ctxBack.scale(dpr, dpr);
      }
    },

    /**
     * @param  {number} width
     * @param  {number} height
     */
    resize: function (width, height) {
      var dpr = this.dpr;
      var dom = this.dom;
      var domStyle = dom.style;
      var domBack = this.domBack;

      if (domStyle) {
        domStyle.width = width + 'px';
        domStyle.height = height + 'px';
      }

      dom.width = width * dpr;
      dom.height = height * dpr;

      if (domBack) {
        domBack.width = width * dpr;
        domBack.height = height * dpr;

        if (dpr !== 1) {
          this.ctxBack.scale(dpr, dpr);
        }
      }
    },

    /**
     * 清空该层画布
     * @param {boolean} [clearAll]=false Clear all with out motion blur
     * @param {Color} [clearColor]
     */
    clear: function (clearAll, clearColor) {
      var dom = this.dom;
      var ctx = this.ctx;
      var width = dom.width;
      var height = dom.height;
      var clearColor = clearColor || this.clearColor;
      var haveMotionBLur = this.motionBlur && !clearAll;
      var lastFrameAlpha = this.lastFrameAlpha;
      var dpr = this.dpr;

      if (haveMotionBLur) {
        if (!this.domBack) {
          this.createBackBuffer();
        }

        this.ctxBack.globalCompositeOperation = 'copy';
        this.ctxBack.drawImage(dom, 0, 0, width / dpr, height / dpr);
      }

      ctx.clearRect(0, 0, width, height);

      if (clearColor && clearColor !== 'transparent') {
        var clearColorGradientOrPattern; // Gradient

        if (clearColor.colorStops) {
          // Cache canvas gradient
          clearColorGradientOrPattern = clearColor.__canvasGradient || Style_1.getGradient(ctx, clearColor, {
            x: 0,
            y: 0,
            width: width,
            height: height
          });
          clearColor.__canvasGradient = clearColorGradientOrPattern;
        } // Pattern
        else if (clearColor.image) {
            clearColorGradientOrPattern = Pattern_1.prototype.getCanvasPattern.call(clearColor, ctx);
          }

        ctx.save();
        ctx.fillStyle = clearColorGradientOrPattern || clearColor;
        ctx.fillRect(0, 0, width, height);
        ctx.restore();
      }

      if (haveMotionBLur) {
        var domBack = this.domBack;
        ctx.save();
        ctx.globalAlpha = lastFrameAlpha;
        ctx.drawImage(domBack, 0, 0, width, height);
        ctx.restore();
      }
    }
  };
  var _default$k = Layer;
  var Layer_1 = _default$k;

  var _default$l = typeof window !== 'undefined' && (window.requestAnimationFrame && window.requestAnimationFrame.bind(window) || // https://github.com/ecomfe/zrender/issues/189#issuecomment-224919809
  window.msRequestAnimationFrame && window.msRequestAnimationFrame.bind(window) || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame) || function (func) {
    setTimeout(func, 16);
  };

  var requestAnimationFrame$1 = _default$l;

  var globalImageCache = new LRU_1(50);
  /**
   * @param {string|HTMLImageElement|HTMLCanvasElement|Canvas} newImageOrSrc
   * @return {HTMLImageElement|HTMLCanvasElement|Canvas} image
   */

  function findExistImage(newImageOrSrc) {
    if (typeof newImageOrSrc === 'string') {
      var cachedImgObj = globalImageCache.get(newImageOrSrc);
      return cachedImgObj && cachedImgObj.image;
    } else {
      return newImageOrSrc;
    }
  }
  /**
   * Caution: User should cache loaded images, but not just count on LRU.
   * Consider if required images more than LRU size, will dead loop occur?
   *
   * @param {string|HTMLImageElement|HTMLCanvasElement|Canvas} newImageOrSrc
   * @param {HTMLImageElement|HTMLCanvasElement|Canvas} image Existent image.
   * @param {module:zrender/Element} [hostEl] For calling `dirty`.
   * @param {Function} [cb] params: (image, cbPayload)
   * @param {Object} [cbPayload] Payload on cb calling.
   * @return {HTMLImageElement|HTMLCanvasElement|Canvas} image
   */


  function createOrUpdateImage(newImageOrSrc, image, hostEl, cb, cbPayload) {
    if (!newImageOrSrc) {
      return image;
    } else if (typeof newImageOrSrc === 'string') {
      // Image should not be loaded repeatly.
      if (image && image.__zrImageSrc === newImageOrSrc || !hostEl) {
        return image;
      } // Only when there is no existent image or existent image src
      // is different, this method is responsible for load.


      var cachedImgObj = globalImageCache.get(newImageOrSrc);
      var pendingWrap = {
        hostEl: hostEl,
        cb: cb,
        cbPayload: cbPayload
      };

      if (cachedImgObj) {
        image = cachedImgObj.image;
        !isImageReady(image) && cachedImgObj.pending.push(pendingWrap);
      } else {
        image = new Image();
        image.onload = image.onerror = imageOnLoad;
        globalImageCache.put(newImageOrSrc, image.__cachedImgObj = {
          image: image,
          pending: [pendingWrap]
        });
        image.src = image.__zrImageSrc = newImageOrSrc;
      }

      return image;
    } // newImageOrSrc is an HTMLImageElement or HTMLCanvasElement or Canvas
    else {
        return newImageOrSrc;
      }
  }

  function imageOnLoad() {
    var cachedImgObj = this.__cachedImgObj;
    this.onload = this.onerror = this.__cachedImgObj = null;

    for (var i = 0; i < cachedImgObj.pending.length; i++) {
      var pendingWrap = cachedImgObj.pending[i];
      var cb = pendingWrap.cb;
      cb && cb(this, pendingWrap.cbPayload);
      pendingWrap.hostEl.dirty();
    }

    cachedImgObj.pending.length = 0;
  }

  function isImageReady(image) {
    return image && image.width && image.height;
  }

  var findExistImage_1 = findExistImage;
  var createOrUpdateImage_1 = createOrUpdateImage;
  var isImageReady_1 = isImageReady;

  var image = {
  	findExistImage: findExistImage_1,
  	createOrUpdateImage: createOrUpdateImage_1,
  	isImageReady: isImageReady_1
  };

  var getContext$1 = util.getContext;
  var extend$1 = util.extend;
  var retrieve2$1 = util.retrieve2;
  var retrieve3$1 = util.retrieve3;
  var trim$1 = util.trim;
  var textWidthCache = {};
  var textWidthCacheCounter = 0;
  var TEXT_CACHE_MAX = 5000;
  var STYLE_REG = /\{([a-zA-Z0-9_]+)\|([^}]*)\}/g;
  var DEFAULT_FONT = '12px sans-serif'; // Avoid assign to an exported variable, for transforming to cjs.

  var methods$1 = {};

  function $override$1(name, fn) {
    methods$1[name] = fn;
  }
  /**
   * @public
   * @param {string} text
   * @param {string} font
   * @return {number} width
   */


  function getWidth(text, font) {
    font = font || DEFAULT_FONT;
    var key = text + ':' + font;

    if (textWidthCache[key]) {
      return textWidthCache[key];
    }

    var textLines = (text + '').split('\n');
    var width = 0;

    for (var i = 0, l = textLines.length; i < l; i++) {
      // textContain.measureText may be overrided in SVG or VML
      width = Math.max(measureText(textLines[i], font).width, width);
    }

    if (textWidthCacheCounter > TEXT_CACHE_MAX) {
      textWidthCacheCounter = 0;
      textWidthCache = {};
    }

    textWidthCacheCounter++;
    textWidthCache[key] = width;
    return width;
  }
  /**
   * @public
   * @param {string} text
   * @param {string} font
   * @param {string} [textAlign='left']
   * @param {string} [textVerticalAlign='top']
   * @param {Array.<number>} [textPadding]
   * @param {Object} [rich]
   * @param {Object} [truncate]
   * @return {Object} {x, y, width, height, lineHeight}
   */


  function getBoundingRect(text, font, textAlign, textVerticalAlign, textPadding, textLineHeight, rich, truncate) {
    return rich ? getRichTextRect(text, font, textAlign, textVerticalAlign, textPadding, textLineHeight, rich, truncate) : getPlainTextRect(text, font, textAlign, textVerticalAlign, textPadding, textLineHeight, truncate);
  }

  function getPlainTextRect(text, font, textAlign, textVerticalAlign, textPadding, textLineHeight, truncate) {
    var contentBlock = parsePlainText(text, font, textPadding, textLineHeight, truncate);
    var outerWidth = getWidth(text, font);

    if (textPadding) {
      outerWidth += textPadding[1] + textPadding[3];
    }

    var outerHeight = contentBlock.outerHeight;
    var x = adjustTextX(0, outerWidth, textAlign);
    var y = adjustTextY(0, outerHeight, textVerticalAlign);
    var rect = new BoundingRect_1(x, y, outerWidth, outerHeight);
    rect.lineHeight = contentBlock.lineHeight;
    return rect;
  }

  function getRichTextRect(text, font, textAlign, textVerticalAlign, textPadding, textLineHeight, rich, truncate) {
    var contentBlock = parseRichText(text, {
      rich: rich,
      truncate: truncate,
      font: font,
      textAlign: textAlign,
      textPadding: textPadding,
      textLineHeight: textLineHeight
    });
    var outerWidth = contentBlock.outerWidth;
    var outerHeight = contentBlock.outerHeight;
    var x = adjustTextX(0, outerWidth, textAlign);
    var y = adjustTextY(0, outerHeight, textVerticalAlign);
    return new BoundingRect_1(x, y, outerWidth, outerHeight);
  }
  /**
   * @public
   * @param {number} x
   * @param {number} width
   * @param {string} [textAlign='left']
   * @return {number} Adjusted x.
   */


  function adjustTextX(x, width, textAlign) {
    // FIXME Right to left language
    if (textAlign === 'right') {
      x -= width;
    } else if (textAlign === 'center') {
      x -= width / 2;
    }

    return x;
  }
  /**
   * @public
   * @param {number} y
   * @param {number} height
   * @param {string} [textVerticalAlign='top']
   * @return {number} Adjusted y.
   */


  function adjustTextY(y, height, textVerticalAlign) {
    if (textVerticalAlign === 'middle') {
      y -= height / 2;
    } else if (textVerticalAlign === 'bottom') {
      y -= height;
    }

    return y;
  }
  /**
   * Follow same interface to `Displayable.prototype.calculateTextPosition`.
   * @public
   * @param {Obejct} [out] Prepared out object. If not input, auto created in the method.
   * @param {module:zrender/graphic/Style} style where `textPosition` and `textDistance` are visited.
   * @param {Object} rect {x, y, width, height} Rect of the host elment, according to which the text positioned.
   * @return {Object} The input `out`. Set: {x, y, textAlign, textVerticalAlign}
   */


  function calculateTextPosition(out, style, rect) {
    var textPosition = style.textPosition;
    var distance = style.textDistance;
    var x = rect.x;
    var y = rect.y;
    distance = distance || 0;
    var height = rect.height;
    var width = rect.width;
    var halfHeight = height / 2;
    var textAlign = 'left';
    var textVerticalAlign = 'top';

    switch (textPosition) {
      case 'left':
        x -= distance;
        y += halfHeight;
        textAlign = 'right';
        textVerticalAlign = 'middle';
        break;

      case 'right':
        x += distance + width;
        y += halfHeight;
        textVerticalAlign = 'middle';
        break;

      case 'top':
        x += width / 2;
        y -= distance;
        textAlign = 'center';
        textVerticalAlign = 'bottom';
        break;

      case 'bottom':
        x += width / 2;
        y += height + distance;
        textAlign = 'center';
        break;

      case 'inside':
        x += width / 2;
        y += halfHeight;
        textAlign = 'center';
        textVerticalAlign = 'middle';
        break;

      case 'insideLeft':
        x += distance;
        y += halfHeight;
        textVerticalAlign = 'middle';
        break;

      case 'insideRight':
        x += width - distance;
        y += halfHeight;
        textAlign = 'right';
        textVerticalAlign = 'middle';
        break;

      case 'insideTop':
        x += width / 2;
        y += distance;
        textAlign = 'center';
        break;

      case 'insideBottom':
        x += width / 2;
        y += height - distance;
        textAlign = 'center';
        textVerticalAlign = 'bottom';
        break;

      case 'insideTopLeft':
        x += distance;
        y += distance;
        break;

      case 'insideTopRight':
        x += width - distance;
        y += distance;
        textAlign = 'right';
        break;

      case 'insideBottomLeft':
        x += distance;
        y += height - distance;
        textVerticalAlign = 'bottom';
        break;

      case 'insideBottomRight':
        x += width - distance;
        y += height - distance;
        textAlign = 'right';
        textVerticalAlign = 'bottom';
        break;
    }

    out = out || {};
    out.x = x;
    out.y = y;
    out.textAlign = textAlign;
    out.textVerticalAlign = textVerticalAlign;
    return out;
  }
  /**
   * To be removed. But still do not remove in case that some one has imported it.
   * @deprecated
   * @public
   * @param {stirng} textPosition
   * @param {Object} rect {x, y, width, height}
   * @param {number} distance
   * @return {Object} {x, y, textAlign, textVerticalAlign}
   */


  function adjustTextPositionOnRect(textPosition, rect, distance) {
    var dummyStyle = {
      textPosition: textPosition,
      textDistance: distance
    };
    return calculateTextPosition({}, dummyStyle, rect);
  }
  /**
   * Show ellipsis if overflow.
   *
   * @public
   * @param  {string} text
   * @param  {string} containerWidth
   * @param  {string} font
   * @param  {number} [ellipsis='...']
   * @param  {Object} [options]
   * @param  {number} [options.maxIterations=3]
   * @param  {number} [options.minChar=0] If truncate result are less
   *                  then minChar, ellipsis will not show, which is
   *                  better for user hint in some cases.
   * @param  {number} [options.placeholder=''] When all truncated, use the placeholder.
   * @return {string}
   */


  function truncateText(text, containerWidth, font, ellipsis, options) {
    if (!containerWidth) {
      return '';
    }

    var textLines = (text + '').split('\n');
    options = prepareTruncateOptions(containerWidth, font, ellipsis, options); // FIXME
    // It is not appropriate that every line has '...' when truncate multiple lines.

    for (var i = 0, len = textLines.length; i < len; i++) {
      textLines[i] = truncateSingleLine(textLines[i], options);
    }

    return textLines.join('\n');
  }

  function prepareTruncateOptions(containerWidth, font, ellipsis, options) {
    options = extend$1({}, options);
    options.font = font;
    var ellipsis = retrieve2$1(ellipsis, '...');
    options.maxIterations = retrieve2$1(options.maxIterations, 2);
    var minChar = options.minChar = retrieve2$1(options.minChar, 0); // FIXME
    // Other languages?

    options.cnCharWidth = getWidth('国', font); // FIXME
    // Consider proportional font?

    var ascCharWidth = options.ascCharWidth = getWidth('a', font);
    options.placeholder = retrieve2$1(options.placeholder, ''); // Example 1: minChar: 3, text: 'asdfzxcv', truncate result: 'asdf', but not: 'a...'.
    // Example 2: minChar: 3, text: '维度', truncate result: '维', but not: '...'.

    var contentWidth = containerWidth = Math.max(0, containerWidth - 1); // Reserve some gap.

    for (var i = 0; i < minChar && contentWidth >= ascCharWidth; i++) {
      contentWidth -= ascCharWidth;
    }

    var ellipsisWidth = getWidth(ellipsis, font);

    if (ellipsisWidth > contentWidth) {
      ellipsis = '';
      ellipsisWidth = 0;
    }

    contentWidth = containerWidth - ellipsisWidth;
    options.ellipsis = ellipsis;
    options.ellipsisWidth = ellipsisWidth;
    options.contentWidth = contentWidth;
    options.containerWidth = containerWidth;
    return options;
  }

  function truncateSingleLine(textLine, options) {
    var containerWidth = options.containerWidth;
    var font = options.font;
    var contentWidth = options.contentWidth;

    if (!containerWidth) {
      return '';
    }

    var lineWidth = getWidth(textLine, font);

    if (lineWidth <= containerWidth) {
      return textLine;
    }

    for (var j = 0;; j++) {
      if (lineWidth <= contentWidth || j >= options.maxIterations) {
        textLine += options.ellipsis;
        break;
      }

      var subLength = j === 0 ? estimateLength(textLine, contentWidth, options.ascCharWidth, options.cnCharWidth) : lineWidth > 0 ? Math.floor(textLine.length * contentWidth / lineWidth) : 0;
      textLine = textLine.substr(0, subLength);
      lineWidth = getWidth(textLine, font);
    }

    if (textLine === '') {
      textLine = options.placeholder;
    }

    return textLine;
  }

  function estimateLength(text, contentWidth, ascCharWidth, cnCharWidth) {
    var width = 0;
    var i = 0;

    for (var len = text.length; i < len && width < contentWidth; i++) {
      var charCode = text.charCodeAt(i);
      width += 0 <= charCode && charCode <= 127 ? ascCharWidth : cnCharWidth;
    }

    return i;
  }
  /**
   * @public
   * @param {string} font
   * @return {number} line height
   */


  function getLineHeight(font) {
    // FIXME A rough approach.
    return getWidth('国', font);
  }
  /**
   * @public
   * @param {string} text
   * @param {string} font
   * @return {Object} width
   */


  function measureText(text, font) {
    return methods$1.measureText(text, font);
  } // Avoid assign to an exported variable, for transforming to cjs.


  methods$1.measureText = function (text, font) {
    var ctx = getContext$1();
    ctx.font = font || DEFAULT_FONT;
    return ctx.measureText(text);
  };
  /**
   * @public
   * @param {string} text
   * @param {string} font
   * @param {Object} [truncate]
   * @return {Object} block: {lineHeight, lines, height, outerHeight, canCacheByTextString}
   *  Notice: for performance, do not calculate outerWidth util needed.
   *  `canCacheByTextString` means the result `lines` is only determined by the input `text`.
   *  Thus we can simply comparing the `input` text to determin whether the result changed,
   *  without travel the result `lines`.
   */


  function parsePlainText(text, font, padding, textLineHeight, truncate) {
    text != null && (text += '');
    var lineHeight = retrieve2$1(textLineHeight, getLineHeight(font));
    var lines = text ? text.split('\n') : [];
    var height = lines.length * lineHeight;
    var outerHeight = height;
    var canCacheByTextString = true;

    if (padding) {
      outerHeight += padding[0] + padding[2];
    }

    if (text && truncate) {
      canCacheByTextString = false;
      var truncOuterHeight = truncate.outerHeight;
      var truncOuterWidth = truncate.outerWidth;

      if (truncOuterHeight != null && outerHeight > truncOuterHeight) {
        text = '';
        lines = [];
      } else if (truncOuterWidth != null) {
        var options = prepareTruncateOptions(truncOuterWidth - (padding ? padding[1] + padding[3] : 0), font, truncate.ellipsis, {
          minChar: truncate.minChar,
          placeholder: truncate.placeholder
        }); // FIXME
        // It is not appropriate that every line has '...' when truncate multiple lines.

        for (var i = 0, len = lines.length; i < len; i++) {
          lines[i] = truncateSingleLine(lines[i], options);
        }
      }
    }

    return {
      lines: lines,
      height: height,
      outerHeight: outerHeight,
      lineHeight: lineHeight,
      canCacheByTextString: canCacheByTextString
    };
  }
  /**
   * For example: 'some text {a|some text}other text{b|some text}xxx{c|}xxx'
   * Also consider 'bbbb{a|xxx\nzzz}xxxx\naaaa'.
   *
   * @public
   * @param {string} text
   * @param {Object} style
   * @return {Object} block
   * {
   *      width,
   *      height,
   *      lines: [{
   *          lineHeight,
   *          width,
   *          tokens: [[{
   *              styleName,
   *              text,
   *              width,      // include textPadding
   *              height,     // include textPadding
   *              textWidth, // pure text width
   *              textHeight, // pure text height
   *              lineHeihgt,
   *              font,
   *              textAlign,
   *              textVerticalAlign
   *          }], [...], ...]
   *      }, ...]
   * }
   * If styleName is undefined, it is plain text.
   */


  function parseRichText(text, style) {
    var contentBlock = {
      lines: [],
      width: 0,
      height: 0
    };
    text != null && (text += '');

    if (!text) {
      return contentBlock;
    }

    var lastIndex = STYLE_REG.lastIndex = 0;
    var result;

    while ((result = STYLE_REG.exec(text)) != null) {
      var matchedIndex = result.index;

      if (matchedIndex > lastIndex) {
        pushTokens(contentBlock, text.substring(lastIndex, matchedIndex));
      }

      pushTokens(contentBlock, result[2], result[1]);
      lastIndex = STYLE_REG.lastIndex;
    }

    if (lastIndex < text.length) {
      pushTokens(contentBlock, text.substring(lastIndex, text.length));
    }

    var lines = contentBlock.lines;
    var contentHeight = 0;
    var contentWidth = 0; // For `textWidth: 100%`

    var pendingList = [];
    var stlPadding = style.textPadding;
    var truncate = style.truncate;
    var truncateWidth = truncate && truncate.outerWidth;
    var truncateHeight = truncate && truncate.outerHeight;

    if (stlPadding) {
      truncateWidth != null && (truncateWidth -= stlPadding[1] + stlPadding[3]);
      truncateHeight != null && (truncateHeight -= stlPadding[0] + stlPadding[2]);
    } // Calculate layout info of tokens.


    for (var i = 0; i < lines.length; i++) {
      var line = lines[i];
      var lineHeight = 0;
      var lineWidth = 0;

      for (var j = 0; j < line.tokens.length; j++) {
        var token = line.tokens[j];
        var tokenStyle = token.styleName && style.rich[token.styleName] || {}; // textPadding should not inherit from style.

        var textPadding = token.textPadding = tokenStyle.textPadding; // textFont has been asigned to font by `normalizeStyle`.

        var font = token.font = tokenStyle.font || style.font; // textHeight can be used when textVerticalAlign is specified in token.

        var tokenHeight = token.textHeight = retrieve2$1( // textHeight should not be inherited, consider it can be specified
        // as box height of the block.
        tokenStyle.textHeight, getLineHeight(font));
        textPadding && (tokenHeight += textPadding[0] + textPadding[2]);
        token.height = tokenHeight;
        token.lineHeight = retrieve3$1(tokenStyle.textLineHeight, style.textLineHeight, tokenHeight);
        token.textAlign = tokenStyle && tokenStyle.textAlign || style.textAlign;
        token.textVerticalAlign = tokenStyle && tokenStyle.textVerticalAlign || 'middle';

        if (truncateHeight != null && contentHeight + token.lineHeight > truncateHeight) {
          return {
            lines: [],
            width: 0,
            height: 0
          };
        }

        token.textWidth = getWidth(token.text, font);
        var tokenWidth = tokenStyle.textWidth;
        var tokenWidthNotSpecified = tokenWidth == null || tokenWidth === 'auto'; // Percent width, can be `100%`, can be used in drawing separate
        // line when box width is needed to be auto.

        if (typeof tokenWidth === 'string' && tokenWidth.charAt(tokenWidth.length - 1) === '%') {
          token.percentWidth = tokenWidth;
          pendingList.push(token);
          tokenWidth = 0; // Do not truncate in this case, because there is no user case
          // and it is too complicated.
        } else {
          if (tokenWidthNotSpecified) {
            tokenWidth = token.textWidth; // FIXME: If image is not loaded and textWidth is not specified, calling
            // `getBoundingRect()` will not get correct result.

            var textBackgroundColor = tokenStyle.textBackgroundColor;
            var bgImg = textBackgroundColor && textBackgroundColor.image; // Use cases:
            // (1) If image is not loaded, it will be loaded at render phase and call
            // `dirty()` and `textBackgroundColor.image` will be replaced with the loaded
            // image, and then the right size will be calculated here at the next tick.
            // See `graphic/helper/text.js`.
            // (2) If image loaded, and `textBackgroundColor.image` is image src string,
            // use `imageHelper.findExistImage` to find cached image.
            // `imageHelper.findExistImage` will always be called here before
            // `imageHelper.createOrUpdateImage` in `graphic/helper/text.js#renderRichText`
            // which ensures that image will not be rendered before correct size calcualted.

            if (bgImg) {
              bgImg = image.findExistImage(bgImg);

              if (image.isImageReady(bgImg)) {
                tokenWidth = Math.max(tokenWidth, bgImg.width * tokenHeight / bgImg.height);
              }
            }
          }

          var paddingW = textPadding ? textPadding[1] + textPadding[3] : 0;
          tokenWidth += paddingW;
          var remianTruncWidth = truncateWidth != null ? truncateWidth - lineWidth : null;

          if (remianTruncWidth != null && remianTruncWidth < tokenWidth) {
            if (!tokenWidthNotSpecified || remianTruncWidth < paddingW) {
              token.text = '';
              token.textWidth = tokenWidth = 0;
            } else {
              token.text = truncateText(token.text, remianTruncWidth - paddingW, font, truncate.ellipsis, {
                minChar: truncate.minChar
              });
              token.textWidth = getWidth(token.text, font);
              tokenWidth = token.textWidth + paddingW;
            }
          }
        }

        lineWidth += token.width = tokenWidth;
        tokenStyle && (lineHeight = Math.max(lineHeight, token.lineHeight));
      }

      line.width = lineWidth;
      line.lineHeight = lineHeight;
      contentHeight += lineHeight;
      contentWidth = Math.max(contentWidth, lineWidth);
    }

    contentBlock.outerWidth = contentBlock.width = retrieve2$1(style.textWidth, contentWidth);
    contentBlock.outerHeight = contentBlock.height = retrieve2$1(style.textHeight, contentHeight);

    if (stlPadding) {
      contentBlock.outerWidth += stlPadding[1] + stlPadding[3];
      contentBlock.outerHeight += stlPadding[0] + stlPadding[2];
    }

    for (var i = 0; i < pendingList.length; i++) {
      var token = pendingList[i];
      var percentWidth = token.percentWidth; // Should not base on outerWidth, because token can not be placed out of padding.

      token.width = parseInt(percentWidth, 10) / 100 * contentWidth;
    }

    return contentBlock;
  }

  function pushTokens(block, str, styleName) {
    var isEmptyStr = str === '';
    var strs = str.split('\n');
    var lines = block.lines;

    for (var i = 0; i < strs.length; i++) {
      var text = strs[i];
      var token = {
        styleName: styleName,
        text: text,
        isLineHolder: !text && !isEmptyStr
      }; // The first token should be appended to the last line.

      if (!i) {
        var tokens = (lines[lines.length - 1] || (lines[0] = {
          tokens: []
        })).tokens; // Consider cases:
        // (1) ''.split('\n') => ['', '\n', ''], the '' at the first item
        // (which is a placeholder) should be replaced by new token.
        // (2) A image backage, where token likes {a|}.
        // (3) A redundant '' will affect textAlign in line.
        // (4) tokens with the same tplName should not be merged, because
        // they should be displayed in different box (with border and padding).

        var tokensLen = tokens.length;
        tokensLen === 1 && tokens[0].isLineHolder ? tokens[0] = token : // Consider text is '', only insert when it is the "lineHolder" or
        // "emptyStr". Otherwise a redundant '' will affect textAlign in line.
        (text || !tokensLen || isEmptyStr) && tokens.push(token);
      } // Other tokens always start a new line.
      else {
          // If there is '', insert it as a placeholder.
          lines.push({
            tokens: [token]
          });
        }
    }
  }

  function makeFont(style) {
    // FIXME in node-canvas fontWeight is before fontStyle
    // Use `fontSize` `fontFamily` to check whether font properties are defined.
    var font = (style.fontSize || style.fontFamily) && [style.fontStyle, style.fontWeight, (style.fontSize || 12) + 'px', // If font properties are defined, `fontFamily` should not be ignored.
    style.fontFamily || 'sans-serif'].join(' ');
    return font && trim$1(font) || style.textFont || style.font;
  }

  var DEFAULT_FONT_1 = DEFAULT_FONT;
  var $override_1$1 = $override$1;
  var getWidth_1 = getWidth;
  var getBoundingRect_1 = getBoundingRect;
  var adjustTextX_1 = adjustTextX;
  var adjustTextY_1 = adjustTextY;
  var calculateTextPosition_1 = calculateTextPosition;
  var adjustTextPositionOnRect_1 = adjustTextPositionOnRect;
  var truncateText_1 = truncateText;
  var getLineHeight_1 = getLineHeight;
  var measureText_1 = measureText;
  var parsePlainText_1 = parsePlainText;
  var parseRichText_1 = parseRichText;
  var makeFont_1 = makeFont;

  var text = {
  	DEFAULT_FONT: DEFAULT_FONT_1,
  	$override: $override_1$1,
  	getWidth: getWidth_1,
  	getBoundingRect: getBoundingRect_1,
  	adjustTextX: adjustTextX_1,
  	adjustTextY: adjustTextY_1,
  	calculateTextPosition: calculateTextPosition_1,
  	adjustTextPositionOnRect: adjustTextPositionOnRect_1,
  	truncateText: truncateText_1,
  	getLineHeight: getLineHeight_1,
  	measureText: measureText_1,
  	parsePlainText: parsePlainText_1,
  	parseRichText: parseRichText_1,
  	makeFont: makeFont_1
  };

  /**
   * @param {Object} ctx
   * @param {Object} shape
   * @param {number} shape.x
   * @param {number} shape.y
   * @param {number} shape.width
   * @param {number} shape.height
   * @param {number} shape.r
   */
  function buildPath(ctx, shape) {
    var x = shape.x;
    var y = shape.y;
    var width = shape.width;
    var height = shape.height;
    var r = shape.r;
    var r1;
    var r2;
    var r3;
    var r4; // Convert width and height to positive for better borderRadius

    if (width < 0) {
      x = x + width;
      width = -width;
    }

    if (height < 0) {
      y = y + height;
      height = -height;
    }

    if (typeof r === 'number') {
      r1 = r2 = r3 = r4 = r;
    } else if (r instanceof Array) {
      if (r.length === 1) {
        r1 = r2 = r3 = r4 = r[0];
      } else if (r.length === 2) {
        r1 = r3 = r[0];
        r2 = r4 = r[1];
      } else if (r.length === 3) {
        r1 = r[0];
        r2 = r4 = r[1];
        r3 = r[2];
      } else {
        r1 = r[0];
        r2 = r[1];
        r3 = r[2];
        r4 = r[3];
      }
    } else {
      r1 = r2 = r3 = r4 = 0;
    }

    var total;

    if (r1 + r2 > width) {
      total = r1 + r2;
      r1 *= width / total;
      r2 *= width / total;
    }

    if (r3 + r4 > width) {
      total = r3 + r4;
      r3 *= width / total;
      r4 *= width / total;
    }

    if (r2 + r3 > height) {
      total = r2 + r3;
      r2 *= height / total;
      r3 *= height / total;
    }

    if (r1 + r4 > height) {
      total = r1 + r4;
      r1 *= height / total;
      r4 *= height / total;
    }

    ctx.moveTo(x + r1, y);
    ctx.lineTo(x + width - r2, y);
    r2 !== 0 && ctx.arc(x + width - r2, y + r2, r2, -Math.PI / 2, 0);
    ctx.lineTo(x + width, y + height - r3);
    r3 !== 0 && ctx.arc(x + width - r3, y + height - r3, r3, 0, Math.PI / 2);
    ctx.lineTo(x + r4, y + height);
    r4 !== 0 && ctx.arc(x + r4, y + height - r4, r4, Math.PI / 2, Math.PI);
    ctx.lineTo(x, y + r1);
    r1 !== 0 && ctx.arc(x + r1, y + r1, r1, Math.PI, Math.PI * 1.5);
  }

  var buildPath_1 = buildPath;

  var roundRect = {
  	buildPath: buildPath_1
  };

  var retrieve2$2 = util.retrieve2;
  var retrieve3$2 = util.retrieve3;
  var each$1 = util.each;
  var normalizeCssArray$1 = util.normalizeCssArray;
  var isString$2 = util.isString;
  var isObject$2 = util.isObject;











  var ContextCachedBy$2 = constant.ContextCachedBy;
  var WILL_BE_RESTORED$1 = constant.WILL_BE_RESTORED;
  var DEFAULT_FONT$1 = text.DEFAULT_FONT; // TODO: Have not support 'start', 'end' yet.

  var VALID_TEXT_ALIGN = {
    left: 1,
    right: 1,
    center: 1
  };
  var VALID_TEXT_VERTICAL_ALIGN = {
    top: 1,
    bottom: 1,
    middle: 1
  }; // Different from `STYLE_COMMON_PROPS` of `graphic/Style`,
  // the default value of shadowColor is `'transparent'`.

  var SHADOW_STYLE_COMMON_PROPS = [['textShadowBlur', 'shadowBlur', 0], ['textShadowOffsetX', 'shadowOffsetX', 0], ['textShadowOffsetY', 'shadowOffsetY', 0], ['textShadowColor', 'shadowColor', 'transparent']];
  var _tmpTextPositionResult = {};
  var _tmpBoxPositionResult = {};
  /**
   * @param {module:zrender/graphic/Style} style
   * @return {module:zrender/graphic/Style} The input style.
   */

  function normalizeTextStyle(style) {
    normalizeStyle(style);
    each$1(style.rich, normalizeStyle);
    return style;
  }

  function normalizeStyle(style) {
    if (style) {
      style.font = text.makeFont(style);
      var textAlign = style.textAlign;
      textAlign === 'middle' && (textAlign = 'center');
      style.textAlign = textAlign == null || VALID_TEXT_ALIGN[textAlign] ? textAlign : 'left'; // Compatible with textBaseline.

      var textVerticalAlign = style.textVerticalAlign || style.textBaseline;
      textVerticalAlign === 'center' && (textVerticalAlign = 'middle');
      style.textVerticalAlign = textVerticalAlign == null || VALID_TEXT_VERTICAL_ALIGN[textVerticalAlign] ? textVerticalAlign : 'top';
      var textPadding = style.textPadding;

      if (textPadding) {
        style.textPadding = normalizeCssArray$1(style.textPadding);
      }
    }
  }
  /**
   * @param {CanvasRenderingContext2D} ctx
   * @param {string} text
   * @param {module:zrender/graphic/Style} style
   * @param {Object|boolean} [rect] {x, y, width, height}
   *                  If set false, rect text is not used.
   * @param {Element|module:zrender/graphic/helper/constant.WILL_BE_RESTORED} [prevEl] For ctx prop cache.
   */


  function renderText(hostEl, ctx, text, style, rect, prevEl) {
    style.rich ? renderRichText(hostEl, ctx, text, style, rect, prevEl) : renderPlainText(hostEl, ctx, text, style, rect, prevEl);
  } // Avoid setting to ctx according to prevEl if possible for
  // performance in scenarios of large amount text.


  function renderPlainText(hostEl, ctx, text$1, style, rect, prevEl) {

    var needDrawBg = needDrawBackground(style);
    var prevStyle;
    var checkCache = false;
    var cachedByMe = ctx.__attrCachedBy === ContextCachedBy$2.PLAIN_TEXT; // Only take and check cache for `Text` el, but not RectText.

    if (prevEl !== WILL_BE_RESTORED$1) {
      if (prevEl) {
        prevStyle = prevEl.style;
        checkCache = !needDrawBg && cachedByMe && prevStyle;
      } // Prevent from using cache in `Style::bind`, because of the case:
      // ctx property is modified by other properties than `Style::bind`
      // used, and Style::bind is called next.


      ctx.__attrCachedBy = needDrawBg ? ContextCachedBy$2.NONE : ContextCachedBy$2.PLAIN_TEXT;
    } // Since this will be restored, prevent from using these props to check cache in the next
    // entering of this method. But do not need to clear other cache like `Style::bind`.
    else if (cachedByMe) {
        ctx.__attrCachedBy = ContextCachedBy$2.NONE;
      }

    var styleFont = style.font || DEFAULT_FONT$1; // PENDING
    // Only `Text` el set `font` and keep it (`RectText` will restore). So theoretically
    // we can make font cache on ctx, which can cache for text el that are discontinuous.
    // But layer save/restore needed to be considered.
    // if (styleFont !== ctx.__fontCache) {
    //     ctx.font = styleFont;
    //     if (prevEl !== WILL_BE_RESTORED) {
    //         ctx.__fontCache = styleFont;
    //     }
    // }

    if (!checkCache || styleFont !== (prevStyle.font || DEFAULT_FONT$1)) {
      ctx.font = styleFont;
    } // Use the final font from context-2d, because the final
    // font might not be the style.font when it is illegal.
    // But get `ctx.font` might be time consuming.


    var computedFont = hostEl.__computedFont;

    if (hostEl.__styleFont !== styleFont) {
      hostEl.__styleFont = styleFont;
      computedFont = hostEl.__computedFont = ctx.font;
    }

    var textPadding = style.textPadding;
    var textLineHeight = style.textLineHeight;
    var contentBlock = hostEl.__textCotentBlock;

    if (!contentBlock || hostEl.__dirtyText) {
      contentBlock = hostEl.__textCotentBlock = text.parsePlainText(text$1, computedFont, textPadding, textLineHeight, style.truncate);
    }

    var outerHeight = contentBlock.outerHeight;
    var textLines = contentBlock.lines;
    var lineHeight = contentBlock.lineHeight;
    var boxPos = getBoxPosition(_tmpBoxPositionResult, hostEl, style, rect);
    var baseX = boxPos.baseX;
    var baseY = boxPos.baseY;
    var textAlign = boxPos.textAlign || 'left';
    var textVerticalAlign = boxPos.textVerticalAlign; // Origin of textRotation should be the base point of text drawing.

    applyTextRotation(ctx, style, rect, baseX, baseY);
    var boxY = text.adjustTextY(baseY, outerHeight, textVerticalAlign);
    var textX = baseX;
    var textY = boxY;

    if (needDrawBg || textPadding) {
      // Consider performance, do not call getTextWidth util necessary.
      var textWidth = text.getWidth(text$1, computedFont);
      var outerWidth = textWidth;
      textPadding && (outerWidth += textPadding[1] + textPadding[3]);
      var boxX = text.adjustTextX(baseX, outerWidth, textAlign);
      needDrawBg && drawBackground(hostEl, ctx, style, boxX, boxY, outerWidth, outerHeight);

      if (textPadding) {
        textX = getTextXForPadding(baseX, textAlign, textPadding);
        textY += textPadding[0];
      }
    } // Always set textAlign and textBase line, because it is difficute to calculate
    // textAlign from prevEl, and we dont sure whether textAlign will be reset if
    // font set happened.


    ctx.textAlign = textAlign; // Force baseline to be "middle". Otherwise, if using "top", the
    // text will offset downward a little bit in font "Microsoft YaHei".

    ctx.textBaseline = 'middle'; // Set text opacity

    ctx.globalAlpha = style.opacity || 1; // Always set shadowBlur and shadowOffset to avoid leak from displayable.

    for (var i = 0; i < SHADOW_STYLE_COMMON_PROPS.length; i++) {
      var propItem = SHADOW_STYLE_COMMON_PROPS[i];
      var styleProp = propItem[0];
      var ctxProp = propItem[1];
      var val = style[styleProp];

      if (!checkCache || val !== prevStyle[styleProp]) {
        ctx[ctxProp] = fixShadow(ctx, ctxProp, val || propItem[2]);
      }
    } // `textBaseline` is set as 'middle'.


    textY += lineHeight / 2;
    var textStrokeWidth = style.textStrokeWidth;
    var textStrokeWidthPrev = checkCache ? prevStyle.textStrokeWidth : null;
    var strokeWidthChanged = !checkCache || textStrokeWidth !== textStrokeWidthPrev;
    var strokeChanged = !checkCache || strokeWidthChanged || style.textStroke !== prevStyle.textStroke;
    var textStroke = getStroke(style.textStroke, textStrokeWidth);
    var textFill = getFill(style.textFill);

    if (textStroke) {
      if (strokeWidthChanged) {
        ctx.lineWidth = textStrokeWidth;
      }

      if (strokeChanged) {
        ctx.strokeStyle = textStroke;
      }
    }

    if (textFill) {
      if (!checkCache || style.textFill !== prevStyle.textFill) {
        ctx.fillStyle = textFill;
      }
    } // Optimize simply, in most cases only one line exists.


    if (textLines.length === 1) {
      // Fill after stroke so the outline will not cover the main part.
      textStroke && ctx.strokeText(textLines[0], textX, textY);
      textFill && ctx.fillText(textLines[0], textX, textY);
    } else {
      for (var i = 0; i < textLines.length; i++) {
        // Fill after stroke so the outline will not cover the main part.
        textStroke && ctx.strokeText(textLines[i], textX, textY);
        textFill && ctx.fillText(textLines[i], textX, textY);
        textY += lineHeight;
      }
    }
  }

  function renderRichText(hostEl, ctx, text$1, style, rect, prevEl) {
    // Do not do cache for rich text because of the complexity.
    // But `RectText` this will be restored, do not need to clear other cache like `Style::bind`.
    if (prevEl !== WILL_BE_RESTORED$1) {
      ctx.__attrCachedBy = ContextCachedBy$2.NONE;
    }

    var contentBlock = hostEl.__textCotentBlock;

    if (!contentBlock || hostEl.__dirtyText) {
      contentBlock = hostEl.__textCotentBlock = text.parseRichText(text$1, style);
    }

    drawRichText(hostEl, ctx, contentBlock, style, rect);
  }

  function drawRichText(hostEl, ctx, contentBlock, style, rect) {
    var contentWidth = contentBlock.width;
    var outerWidth = contentBlock.outerWidth;
    var outerHeight = contentBlock.outerHeight;
    var textPadding = style.textPadding;
    var boxPos = getBoxPosition(_tmpBoxPositionResult, hostEl, style, rect);
    var baseX = boxPos.baseX;
    var baseY = boxPos.baseY;
    var textAlign = boxPos.textAlign;
    var textVerticalAlign = boxPos.textVerticalAlign; // Origin of textRotation should be the base point of text drawing.

    applyTextRotation(ctx, style, rect, baseX, baseY);
    var boxX = text.adjustTextX(baseX, outerWidth, textAlign);
    var boxY = text.adjustTextY(baseY, outerHeight, textVerticalAlign);
    var xLeft = boxX;
    var lineTop = boxY;

    if (textPadding) {
      xLeft += textPadding[3];
      lineTop += textPadding[0];
    }

    var xRight = xLeft + contentWidth;
    needDrawBackground(style) && drawBackground(hostEl, ctx, style, boxX, boxY, outerWidth, outerHeight);

    for (var i = 0; i < contentBlock.lines.length; i++) {
      var line = contentBlock.lines[i];
      var tokens = line.tokens;
      var tokenCount = tokens.length;
      var lineHeight = line.lineHeight;
      var usedWidth = line.width;
      var leftIndex = 0;
      var lineXLeft = xLeft;
      var lineXRight = xRight;
      var rightIndex = tokenCount - 1;
      var token;

      while (leftIndex < tokenCount && (token = tokens[leftIndex], !token.textAlign || token.textAlign === 'left')) {
        placeToken(hostEl, ctx, token, style, lineHeight, lineTop, lineXLeft, 'left');
        usedWidth -= token.width;
        lineXLeft += token.width;
        leftIndex++;
      }

      while (rightIndex >= 0 && (token = tokens[rightIndex], token.textAlign === 'right')) {
        placeToken(hostEl, ctx, token, style, lineHeight, lineTop, lineXRight, 'right');
        usedWidth -= token.width;
        lineXRight -= token.width;
        rightIndex--;
      } // The other tokens are placed as textAlign 'center' if there is enough space.


      lineXLeft += (contentWidth - (lineXLeft - xLeft) - (xRight - lineXRight) - usedWidth) / 2;

      while (leftIndex <= rightIndex) {
        token = tokens[leftIndex]; // Consider width specified by user, use 'center' rather than 'left'.

        placeToken(hostEl, ctx, token, style, lineHeight, lineTop, lineXLeft + token.width / 2, 'center');
        lineXLeft += token.width;
        leftIndex++;
      }

      lineTop += lineHeight;
    }
  }

  function applyTextRotation(ctx, style, rect, x, y) {
    // textRotation only apply in RectText.
    if (rect && style.textRotation) {
      var origin = style.textOrigin;

      if (origin === 'center') {
        x = rect.width / 2 + rect.x;
        y = rect.height / 2 + rect.y;
      } else if (origin) {
        x = origin[0] + rect.x;
        y = origin[1] + rect.y;
      }

      ctx.translate(x, y); // Positive: anticlockwise

      ctx.rotate(-style.textRotation);
      ctx.translate(-x, -y);
    }
  }

  function placeToken(hostEl, ctx, token, style, lineHeight, lineTop, x, textAlign) {
    var tokenStyle = style.rich[token.styleName] || {};
    tokenStyle.text = token.text; // 'ctx.textBaseline' is always set as 'middle', for sake of
    // the bias of "Microsoft YaHei".

    var textVerticalAlign = token.textVerticalAlign;
    var y = lineTop + lineHeight / 2;

    if (textVerticalAlign === 'top') {
      y = lineTop + token.height / 2;
    } else if (textVerticalAlign === 'bottom') {
      y = lineTop + lineHeight - token.height / 2;
    }

    !token.isLineHolder && needDrawBackground(tokenStyle) && drawBackground(hostEl, ctx, tokenStyle, textAlign === 'right' ? x - token.width : textAlign === 'center' ? x - token.width / 2 : x, y - token.height / 2, token.width, token.height);
    var textPadding = token.textPadding;

    if (textPadding) {
      x = getTextXForPadding(x, textAlign, textPadding);
      y -= token.height / 2 - textPadding[2] - token.textHeight / 2;
    }

    setCtx(ctx, 'shadowBlur', retrieve3$2(tokenStyle.textShadowBlur, style.textShadowBlur, 0));
    setCtx(ctx, 'shadowColor', tokenStyle.textShadowColor || style.textShadowColor || 'transparent');
    setCtx(ctx, 'shadowOffsetX', retrieve3$2(tokenStyle.textShadowOffsetX, style.textShadowOffsetX, 0));
    setCtx(ctx, 'shadowOffsetY', retrieve3$2(tokenStyle.textShadowOffsetY, style.textShadowOffsetY, 0));
    setCtx(ctx, 'textAlign', textAlign); // Force baseline to be "middle". Otherwise, if using "top", the
    // text will offset downward a little bit in font "Microsoft YaHei".

    setCtx(ctx, 'textBaseline', 'middle');
    setCtx(ctx, 'font', token.font || DEFAULT_FONT$1);
    var textStroke = getStroke(tokenStyle.textStroke || style.textStroke, textStrokeWidth);
    var textFill = getFill(tokenStyle.textFill || style.textFill);
    var textStrokeWidth = retrieve2$2(tokenStyle.textStrokeWidth, style.textStrokeWidth); // Fill after stroke so the outline will not cover the main part.

    if (textStroke) {
      setCtx(ctx, 'lineWidth', textStrokeWidth);
      setCtx(ctx, 'strokeStyle', textStroke);
      ctx.strokeText(token.text, x, y);
    }

    if (textFill) {
      setCtx(ctx, 'fillStyle', textFill);
      ctx.fillText(token.text, x, y);
    }
  }

  function needDrawBackground(style) {
    return !!(style.textBackgroundColor || style.textBorderWidth && style.textBorderColor);
  } // style: {textBackgroundColor, textBorderWidth, textBorderColor, textBorderRadius, text}
  // shape: {x, y, width, height}


  function drawBackground(hostEl, ctx, style, x, y, width, height) {
    var textBackgroundColor = style.textBackgroundColor;
    var textBorderWidth = style.textBorderWidth;
    var textBorderColor = style.textBorderColor;
    var isPlainBg = isString$2(textBackgroundColor);
    setCtx(ctx, 'shadowBlur', style.textBoxShadowBlur || 0);
    setCtx(ctx, 'shadowColor', style.textBoxShadowColor || 'transparent');
    setCtx(ctx, 'shadowOffsetX', style.textBoxShadowOffsetX || 0);
    setCtx(ctx, 'shadowOffsetY', style.textBoxShadowOffsetY || 0);

    if (isPlainBg || textBorderWidth && textBorderColor) {
      ctx.beginPath();
      var textBorderRadius = style.textBorderRadius;

      if (!textBorderRadius) {
        ctx.rect(x, y, width, height);
      } else {
        roundRect.buildPath(ctx, {
          x: x,
          y: y,
          width: width,
          height: height,
          r: textBorderRadius
        });
      }

      ctx.closePath();
    }

    if (isPlainBg) {
      setCtx(ctx, 'fillStyle', textBackgroundColor);

      if (style.fillOpacity != null) {
        var originalGlobalAlpha = ctx.globalAlpha;
        ctx.globalAlpha = style.fillOpacity * style.opacity;
        ctx.fill();
        ctx.globalAlpha = originalGlobalAlpha;
      } else {
        ctx.fill();
      }
    } else if (isObject$2(textBackgroundColor)) {
      var image$1 = textBackgroundColor.image;
      image$1 = image.createOrUpdateImage(image$1, null, hostEl, onBgImageLoaded, textBackgroundColor);

      if (image$1 && image.isImageReady(image$1)) {
        ctx.drawImage(image$1, x, y, width, height);
      }
    }

    if (textBorderWidth && textBorderColor) {
      setCtx(ctx, 'lineWidth', textBorderWidth);
      setCtx(ctx, 'strokeStyle', textBorderColor);

      if (style.strokeOpacity != null) {
        var originalGlobalAlpha = ctx.globalAlpha;
        ctx.globalAlpha = style.strokeOpacity * style.opacity;
        ctx.stroke();
        ctx.globalAlpha = originalGlobalAlpha;
      } else {
        ctx.stroke();
      }
    }
  }

  function onBgImageLoaded(image, textBackgroundColor) {
    // Replace image, so that `contain/text.js#parseRichText`
    // will get correct result in next tick.
    textBackgroundColor.image = image;
  }

  function getBoxPosition(out, hostEl, style, rect) {
    var baseX = style.x || 0;
    var baseY = style.y || 0;
    var textAlign = style.textAlign;
    var textVerticalAlign = style.textVerticalAlign; // Text position represented by coord

    if (rect) {
      var textPosition = style.textPosition;

      if (textPosition instanceof Array) {
        // Percent
        baseX = rect.x + parsePercent(textPosition[0], rect.width);
        baseY = rect.y + parsePercent(textPosition[1], rect.height);
      } else {
        var res = hostEl && hostEl.calculateTextPosition ? hostEl.calculateTextPosition(_tmpTextPositionResult, style, rect) : text.calculateTextPosition(_tmpTextPositionResult, style, rect);
        baseX = res.x;
        baseY = res.y; // Default align and baseline when has textPosition

        textAlign = textAlign || res.textAlign;
        textVerticalAlign = textVerticalAlign || res.textVerticalAlign;
      } // textOffset is only support in RectText, otherwise
      // we have to adjust boundingRect for textOffset.


      var textOffset = style.textOffset;

      if (textOffset) {
        baseX += textOffset[0];
        baseY += textOffset[1];
      }
    }

    out = out || {};
    out.baseX = baseX;
    out.baseY = baseY;
    out.textAlign = textAlign;
    out.textVerticalAlign = textVerticalAlign;
    return out;
  }

  function setCtx(ctx, prop, value) {
    ctx[prop] = fixShadow(ctx, prop, value);
    return ctx[prop];
  }
  /**
   * @param {string} [stroke] If specified, do not check style.textStroke.
   * @param {string} [lineWidth] If specified, do not check style.textStroke.
   * @param {number} style
   */


  function getStroke(stroke, lineWidth) {
    return stroke == null || lineWidth <= 0 || stroke === 'transparent' || stroke === 'none' ? null // TODO pattern and gradient?
    : stroke.image || stroke.colorStops ? '#000' : stroke;
  }

  function getFill(fill) {
    return fill == null || fill === 'none' ? null // TODO pattern and gradient?
    : fill.image || fill.colorStops ? '#000' : fill;
  }

  function parsePercent(value, maxValue) {
    if (typeof value === 'string') {
      if (value.lastIndexOf('%') >= 0) {
        return parseFloat(value) / 100 * maxValue;
      }

      return parseFloat(value);
    }

    return value;
  }

  function getTextXForPadding(x, textAlign, textPadding) {
    return textAlign === 'right' ? x - textPadding[1] : textAlign === 'center' ? x + textPadding[3] / 2 - textPadding[1] / 2 : x + textPadding[3];
  }
  /**
   * @param {string} text
   * @param {module:zrender/Style} style
   * @return {boolean}
   */


  function needDrawText(text, style) {
    return text != null && (text || style.textBackgroundColor || style.textBorderWidth && style.textBorderColor || style.textPadding);
  }

  var normalizeTextStyle_1 = normalizeTextStyle;
  var renderText_1 = renderText;
  var getBoxPosition_1 = getBoxPosition;
  var getStroke_1 = getStroke;
  var getFill_1 = getFill;
  var parsePercent_1 = parsePercent;
  var needDrawText_1 = needDrawText;

  var text$1 = {
  	normalizeTextStyle: normalizeTextStyle_1,
  	renderText: renderText_1,
  	getBoxPosition: getBoxPosition_1,
  	getStroke: getStroke_1,
  	getFill: getFill_1,
  	parsePercent: parsePercent_1,
  	needDrawText: needDrawText_1
  };

  var WILL_BE_RESTORED$2 = constant.WILL_BE_RESTORED;

  /**
   * Mixin for drawing text in a element bounding rect
   * @module zrender/mixin/RectText
   */
  var tmpRect = new BoundingRect_1();

  var RectText = function () {};

  RectText.prototype = {
    constructor: RectText,

    /**
     * Draw text in a rect with specified position.
     * @param  {CanvasRenderingContext2D} ctx
     * @param  {Object} rect Displayable rect
     */
    drawRectText: function (ctx, rect) {
      var style = this.style;
      rect = style.textRect || rect; // Optimize, avoid normalize every time.

      this.__dirty && text$1.normalizeTextStyle(style, true);
      var text = style.text; // Convert to string

      text != null && (text += '');

      if (!text$1.needDrawText(text, style)) {
        return;
      } // FIXME
      // Do not provide prevEl to `textHelper.renderText` for ctx prop cache,
      // but use `ctx.save()` and `ctx.restore()`. Because the cache for rect
      // text propably break the cache for its host elements.


      ctx.save(); // Transform rect to view space

      var transform = this.transform;

      if (!style.transformText) {
        if (transform) {
          tmpRect.copy(rect);
          tmpRect.applyTransform(transform);
          rect = tmpRect;
        }
      } else {
        this.setTransform(ctx);
      } // transformText and textRotation can not be used at the same time.


      text$1.renderText(this, ctx, text, style, rect, WILL_BE_RESTORED$2);
      ctx.restore();
    }
  };
  var _default$m = RectText;
  var RectText_1 = _default$m;

  /**
   * Base class of all displayable graphic objects
   * @module zrender/graphic/Displayable
   */

  /**
   * @alias module:zrender/graphic/Displayable
   * @extends module:zrender/Element
   * @extends module:zrender/graphic/mixin/RectText
   */
  function Displayable(opts) {
    opts = opts || {};
    Element_1.call(this, opts); // Extend properties

    for (var name in opts) {
      if (opts.hasOwnProperty(name) && name !== 'style') {
        this[name] = opts[name];
      }
    }
    /**
     * @type {module:zrender/graphic/Style}
     */


    this.style = new Style_1(opts.style, this);
    this._rect = null; // Shapes for cascade clipping.
    // Can only be `null`/`undefined` or an non-empty array, MUST NOT be an empty array.
    // because it is easy to only using null to check whether clipPaths changed.

    this.__clipPaths = null; // FIXME Stateful must be mixined after style is setted
    // Stateful.call(this, opts);
  }

  Displayable.prototype = {
    constructor: Displayable,
    type: 'displayable',

    /**
     * Dirty flag. From which painter will determine if this displayable object needs brush.
     * @name module:zrender/graphic/Displayable#__dirty
     * @type {boolean}
     */
    __dirty: true,

    /**
     * Whether the displayable object is visible. when it is true, the displayable object
     * is not drawn, but the mouse event can still trigger the object.
     * @name module:/zrender/graphic/Displayable#invisible
     * @type {boolean}
     * @default false
     */
    invisible: false,

    /**
     * @name module:/zrender/graphic/Displayable#z
     * @type {number}
     * @default 0
     */
    z: 0,

    /**
     * @name module:/zrender/graphic/Displayable#z
     * @type {number}
     * @default 0
     */
    z2: 0,

    /**
     * The z level determines the displayable object can be drawn in which layer canvas.
     * @name module:/zrender/graphic/Displayable#zlevel
     * @type {number}
     * @default 0
     */
    zlevel: 0,

    /**
     * Whether it can be dragged.
     * @name module:/zrender/graphic/Displayable#draggable
     * @type {boolean}
     * @default false
     */
    draggable: false,

    /**
     * Whether is it dragging.
     * @name module:/zrender/graphic/Displayable#draggable
     * @type {boolean}
     * @default false
     */
    dragging: false,

    /**
     * Whether to respond to mouse events.
     * @name module:/zrender/graphic/Displayable#silent
     * @type {boolean}
     * @default false
     */
    silent: false,

    /**
     * If enable culling
     * @type {boolean}
     * @default false
     */
    culling: false,

    /**
     * Mouse cursor when hovered
     * @name module:/zrender/graphic/Displayable#cursor
     * @type {string}
     */
    cursor: 'pointer',

    /**
     * If hover area is bounding rect
     * @name module:/zrender/graphic/Displayable#rectHover
     * @type {string}
     */
    rectHover: false,

    /**
     * Render the element progressively when the value >= 0,
     * usefull for large data.
     * @type {boolean}
     */
    progressive: false,

    /**
     * @type {boolean}
     */
    incremental: false,

    /**
     * Scale ratio for global scale.
     * @type {boolean}
     */
    globalScaleRatio: 1,
    beforeBrush: function (ctx) {},
    afterBrush: function (ctx) {},

    /**
     * Graphic drawing method.
     * @param {CanvasRenderingContext2D} ctx
     */
    // Interface
    brush: function (ctx, prevEl) {},

    /**
     * Get the minimum bounding box.
     * @return {module:zrender/core/BoundingRect}
     */
    // Interface
    getBoundingRect: function () {},

    /**
     * If displayable element contain coord x, y
     * @param  {number} x
     * @param  {number} y
     * @return {boolean}
     */
    contain: function (x, y) {
      return this.rectContain(x, y);
    },

    /**
     * @param  {Function} cb
     * @param  {}   context
     */
    traverse: function (cb, context) {
      cb.call(context, this);
    },

    /**
     * If bounding rect of element contain coord x, y
     * @param  {number} x
     * @param  {number} y
     * @return {boolean}
     */
    rectContain: function (x, y) {
      var coord = this.transformCoordToLocal(x, y);
      var rect = this.getBoundingRect();
      return rect.contain(coord[0], coord[1]);
    },

    /**
     * Mark displayable element dirty and refresh next frame
     */
    dirty: function () {
      this.__dirty = this.__dirtyText = true;
      this._rect = null;
      this.__zr && this.__zr.refresh();
    },

    /**
     * If displayable object binded any event
     * @return {boolean}
     */
    // TODO, events bound by bind
    // isSilent: function () {
    //     return !(
    //         this.hoverable || this.draggable
    //         || this.onmousemove || this.onmouseover || this.onmouseout
    //         || this.onmousedown || this.onmouseup || this.onclick
    //         || this.ondragenter || this.ondragover || this.ondragleave
    //         || this.ondrop
    //     );
    // },

    /**
     * Alias for animate('style')
     * @param {boolean} loop
     */
    animateStyle: function (loop) {
      return this.animate('style', loop);
    },
    attrKV: function (key, value) {
      if (key !== 'style') {
        Element_1.prototype.attrKV.call(this, key, value);
      } else {
        this.style.set(value);
      }
    },

    /**
     * @param {Object|string} key
     * @param {*} value
     */
    setStyle: function (key, value) {
      this.style.set(key, value);
      this.dirty(false);
      return this;
    },

    /**
     * Use given style object
     * @param  {Object} obj
     */
    useStyle: function (obj) {
      this.style = new Style_1(obj, this);
      this.dirty(false);
      return this;
    },

    /**
     * The string value of `textPosition` needs to be calculated to a real postion.
     * For example, `'inside'` is calculated to `[rect.width/2, rect.height/2]`
     * by default. See `contain/text.js#calculateTextPosition` for more details.
     * But some coutom shapes like "pin", "flag" have center that is not exactly
     * `[width/2, height/2]`. So we provide this hook to customize the calculation
     * for those shapes. It will be called if the `style.textPosition` is a string.
     * @param {Obejct} [out] Prepared out object. If not provided, this method should
     *        be responsible for creating one.
     * @param {module:zrender/graphic/Style} style
     * @param {Object} rect {x, y, width, height}
     * @return {Obejct} out The same as the input out.
     *         {
     *             x: number. mandatory.
     *             y: number. mandatory.
     *             textAlign: string. optional. use style.textAlign by default.
     *             textVerticalAlign: string. optional. use style.textVerticalAlign by default.
     *         }
     */
    calculateTextPosition: null
  };
  util.inherits(Displayable, Element_1);
  util.mixin(Displayable, RectText_1); // zrUtil.mixin(Displayable, Stateful);

  var _default$n = Displayable;
  var Displayable_1 = _default$n;

  /**
   * @alias zrender/graphic/Image
   * @extends module:zrender/graphic/Displayable
   * @constructor
   * @param {Object} opts
   */
  function ZImage(opts) {
    Displayable_1.call(this, opts);
  }

  ZImage.prototype = {
    constructor: ZImage,
    type: 'image',
    brush: function (ctx, prevEl) {
      var style = this.style;
      var src = style.image; // Must bind each time

      style.bind(ctx, this, prevEl);
      var image$1 = this._image = image.createOrUpdateImage(src, this._image, this, this.onload);

      if (!image$1 || !image.isImageReady(image$1)) {
        return;
      } // 图片已经加载完成
      // if (image.nodeName.toUpperCase() == 'IMG') {
      //     if (!image.complete) {
      //         return;
      //     }
      // }
      // Else is canvas


      var x = style.x || 0;
      var y = style.y || 0;
      var width = style.width;
      var height = style.height;
      var aspect = image$1.width / image$1.height;

      if (width == null && height != null) {
        // Keep image/height ratio
        width = height * aspect;
      } else if (height == null && width != null) {
        height = width / aspect;
      } else if (width == null && height == null) {
        width = image$1.width;
        height = image$1.height;
      } // 设置transform


      this.setTransform(ctx);

      if (style.sWidth && style.sHeight) {
        var sx = style.sx || 0;
        var sy = style.sy || 0;
        ctx.drawImage(image$1, sx, sy, style.sWidth, style.sHeight, x, y, width, height);
      } else if (style.sx && style.sy) {
        var sx = style.sx;
        var sy = style.sy;
        var sWidth = width - sx;
        var sHeight = height - sy;
        ctx.drawImage(image$1, sx, sy, sWidth, sHeight, x, y, width, height);
      } else {
        ctx.drawImage(image$1, x, y, width, height);
      } // Draw rect text


      if (style.text != null) {
        // Only restore transform when needs draw text.
        this.restoreTransform(ctx);
        this.drawRectText(ctx, this.getBoundingRect());
      }
    },
    getBoundingRect: function () {
      var style = this.style;

      if (!this._rect) {
        this._rect = new BoundingRect_1(style.x || 0, style.y || 0, style.width || 0, style.height || 0);
      }

      return this._rect;
    }
  };
  util.inherits(ZImage, Displayable_1);
  var _default$o = ZImage;
  var Image$1 = _default$o;

  var devicePixelRatio$2 = config.devicePixelRatio;

















  var HOVER_LAYER_ZLEVEL = 1e5;
  var CANVAS_ZLEVEL = 314159;
  var EL_AFTER_INCREMENTAL_INC = 0.01;
  var INCREMENTAL_INC = 0.001;

  function parseInt10(val) {
    return parseInt(val, 10);
  }

  function isLayerValid(layer) {
    if (!layer) {
      return false;
    }

    if (layer.__builtin__) {
      return true;
    }

    if (typeof layer.resize !== 'function' || typeof layer.refresh !== 'function') {
      return false;
    }

    return true;
  }

  var tmpRect$1 = new BoundingRect_1(0, 0, 0, 0);
  var viewRect = new BoundingRect_1(0, 0, 0, 0);

  function isDisplayableCulled(el, width, height) {
    tmpRect$1.copy(el.getBoundingRect());

    if (el.transform) {
      tmpRect$1.applyTransform(el.transform);
    }

    viewRect.width = width;
    viewRect.height = height;
    return !tmpRect$1.intersect(viewRect);
  }

  function isClipPathChanged(clipPaths, prevClipPaths) {
    // displayable.__clipPaths can only be `null`/`undefined` or an non-empty array.
    if (clipPaths === prevClipPaths) {
      return false;
    }

    if (!clipPaths || !prevClipPaths || clipPaths.length !== prevClipPaths.length) {
      return true;
    }

    for (var i = 0; i < clipPaths.length; i++) {
      if (clipPaths[i] !== prevClipPaths[i]) {
        return true;
      }
    }

    return false;
  }

  function doClip(clipPaths, ctx) {
    for (var i = 0; i < clipPaths.length; i++) {
      var clipPath = clipPaths[i];
      clipPath.setTransform(ctx);
      ctx.beginPath();
      clipPath.buildPath(ctx, clipPath.shape);
      ctx.clip(); // Transform back

      clipPath.restoreTransform(ctx);
    }
  }

  function createRoot(width, height) {
    var domRoot = document.createElement('div'); // domRoot.onselectstart = returnFalse; // Avoid page selected

    domRoot.style.cssText = ['position:relative', // IOS13 safari probably has a compositing bug (z order of the canvas and the consequent
    // dom does not act as expected) when some of the parent dom has
    // `-webkit-overflow-scrolling: touch;` and the webpage is longer than one screen and
    // the canvas is not at the top part of the page.
    // Check `https://bugs.webkit.org/show_bug.cgi?id=203681` for more details. We remove
    // this `overflow:hidden` to avoid the bug.
    // 'overflow:hidden',
    'width:' + width + 'px', 'height:' + height + 'px', 'padding:0', 'margin:0', 'border-width:0'].join(';') + ';';
    return domRoot;
  }
  /**
   * @alias module:zrender/Painter
   * @constructor
   * @param {HTMLElement} root 绘图容器
   * @param {module:zrender/Storage} storage
   * @param {Object} opts
   */


  var Painter = function (root, storage, opts) {
    this.type = 'canvas'; // In node environment using node-canvas

    var singleCanvas = !root.nodeName // In node ?
    || root.nodeName.toUpperCase() === 'CANVAS';
    this._opts = opts = util.extend({}, opts || {});
    /**
     * @type {number}
     */

    this.dpr = opts.devicePixelRatio || devicePixelRatio$2;
    /**
     * @type {boolean}
     * @private
     */

    this._singleCanvas = singleCanvas;
    /**
     * 绘图容器
     * @type {HTMLElement}
     */

    this.root = root;
    var rootStyle = root.style;

    if (rootStyle) {
      rootStyle['-webkit-tap-highlight-color'] = 'transparent';
      rootStyle['-webkit-user-select'] = rootStyle['user-select'] = rootStyle['-webkit-touch-callout'] = 'none';
      root.innerHTML = '';
    }
    /**
     * @type {module:zrender/Storage}
     */


    this.storage = storage;
    /**
     * @type {Array.<number>}
     * @private
     */

    var zlevelList = this._zlevelList = [];
    /**
     * @type {Object.<string, module:zrender/Layer>}
     * @private
     */

    var layers = this._layers = {};
    /**
     * @type {Object.<string, Object>}
     * @private
     */

    this._layerConfig = {};
    /**
     * zrender will do compositing when root is a canvas and have multiple zlevels.
     */

    this._needsManuallyCompositing = false;

    if (!singleCanvas) {
      this._width = this._getSize(0);
      this._height = this._getSize(1);
      var domRoot = this._domRoot = createRoot(this._width, this._height);
      root.appendChild(domRoot);
    } else {
      var width = root.width;
      var height = root.height;

      if (opts.width != null) {
        width = opts.width;
      }

      if (opts.height != null) {
        height = opts.height;
      }

      this.dpr = opts.devicePixelRatio || 1; // Use canvas width and height directly

      root.width = width * this.dpr;
      root.height = height * this.dpr;
      this._width = width;
      this._height = height; // Create layer if only one given canvas
      // Device can be specified to create a high dpi image.

      var mainLayer = new Layer_1(root, this, this.dpr);
      mainLayer.__builtin__ = true;
      mainLayer.initContext(); // FIXME Use canvas width and height
      // mainLayer.resize(width, height);

      layers[CANVAS_ZLEVEL] = mainLayer;
      mainLayer.zlevel = CANVAS_ZLEVEL; // Not use common zlevel.

      zlevelList.push(CANVAS_ZLEVEL);
      this._domRoot = root;
    }
    /**
     * @type {module:zrender/Layer}
     * @private
     */


    this._hoverlayer = null;
    this._hoverElements = [];
  };

  Painter.prototype = {
    constructor: Painter,
    getType: function () {
      return 'canvas';
    },

    /**
     * If painter use a single canvas
     * @return {boolean}
     */
    isSingleCanvas: function () {
      return this._singleCanvas;
    },

    /**
     * @return {HTMLDivElement}
     */
    getViewportRoot: function () {
      return this._domRoot;
    },
    getViewportRootOffset: function () {
      var viewportRoot = this.getViewportRoot();

      if (viewportRoot) {
        return {
          offsetLeft: viewportRoot.offsetLeft || 0,
          offsetTop: viewportRoot.offsetTop || 0
        };
      }
    },

    /**
     * 刷新
     * @param {boolean} [paintAll=false] 强制绘制所有displayable
     */
    refresh: function (paintAll) {
      var list = this.storage.getDisplayList(true);
      var zlevelList = this._zlevelList;
      this._redrawId = Math.random();

      this._paintList(list, paintAll, this._redrawId); // Paint custum layers


      for (var i = 0; i < zlevelList.length; i++) {
        var z = zlevelList[i];
        var layer = this._layers[z];

        if (!layer.__builtin__ && layer.refresh) {
          var clearColor = i === 0 ? this._backgroundColor : null;
          layer.refresh(clearColor);
        }
      }

      this.refreshHover();
      return this;
    },
    addHover: function (el, hoverStyle) {
      if (el.__hoverMir) {
        return;
      }

      var elMirror = new el.constructor({
        style: el.style,
        shape: el.shape,
        z: el.z,
        z2: el.z2,
        silent: el.silent
      });
      elMirror.__from = el;
      el.__hoverMir = elMirror;
      hoverStyle && elMirror.setStyle(hoverStyle);

      this._hoverElements.push(elMirror);

      return elMirror;
    },
    removeHover: function (el) {
      var elMirror = el.__hoverMir;
      var hoverElements = this._hoverElements;
      var idx = util.indexOf(hoverElements, elMirror);

      if (idx >= 0) {
        hoverElements.splice(idx, 1);
      }

      el.__hoverMir = null;
    },
    clearHover: function (el) {
      var hoverElements = this._hoverElements;

      for (var i = 0; i < hoverElements.length; i++) {
        var from = hoverElements[i].__from;

        if (from) {
          from.__hoverMir = null;
        }
      }

      hoverElements.length = 0;
    },
    refreshHover: function () {
      var hoverElements = this._hoverElements;
      var len = hoverElements.length;
      var hoverLayer = this._hoverlayer;
      hoverLayer && hoverLayer.clear();

      if (!len) {
        return;
      }

      timsort(hoverElements, this.storage.displayableSortFunc); // Use a extream large zlevel
      // FIXME?

      if (!hoverLayer) {
        hoverLayer = this._hoverlayer = this.getLayer(HOVER_LAYER_ZLEVEL);
      }

      var scope = {};
      hoverLayer.ctx.save();

      for (var i = 0; i < len;) {
        var el = hoverElements[i];
        var originalEl = el.__from; // Original el is removed
        // PENDING

        if (!(originalEl && originalEl.__zr)) {
          hoverElements.splice(i, 1);
          originalEl.__hoverMir = null;
          len--;
          continue;
        }

        i++; // Use transform
        // FIXME style and shape ?

        if (!originalEl.invisible) {
          el.transform = originalEl.transform;
          el.invTransform = originalEl.invTransform;
          el.__clipPaths = originalEl.__clipPaths; // el.

          this._doPaintEl(el, hoverLayer, true, scope);
        }
      }

      hoverLayer.ctx.restore();
    },
    getHoverLayer: function () {
      return this.getLayer(HOVER_LAYER_ZLEVEL);
    },
    _paintList: function (list, paintAll, redrawId) {
      if (this._redrawId !== redrawId) {
        return;
      }

      paintAll = paintAll || false;

      this._updateLayerStatus(list);

      var finished = this._doPaintList(list, paintAll);

      if (this._needsManuallyCompositing) {
        this._compositeManually();
      }

      if (!finished) {
        var self = this;
        requestAnimationFrame$1(function () {
          self._paintList(list, paintAll, redrawId);
        });
      }
    },
    _compositeManually: function () {
      var ctx = this.getLayer(CANVAS_ZLEVEL).ctx;
      var width = this._domRoot.width;
      var height = this._domRoot.height;
      ctx.clearRect(0, 0, width, height); // PENDING, If only builtin layer?

      this.eachBuiltinLayer(function (layer) {
        if (layer.virtual) {
          ctx.drawImage(layer.dom, 0, 0, width, height);
        }
      });
    },
    _doPaintList: function (list, paintAll) {
      var layerList = [];

      for (var zi = 0; zi < this._zlevelList.length; zi++) {
        var zlevel = this._zlevelList[zi];
        var layer = this._layers[zlevel];

        if (layer.__builtin__ && layer !== this._hoverlayer && (layer.__dirty || paintAll)) {
          layerList.push(layer);
        }
      }

      var finished = true;

      for (var k = 0; k < layerList.length; k++) {
        var layer = layerList[k];
        var ctx = layer.ctx;
        var scope = {};
        ctx.save();
        var start = paintAll ? layer.__startIndex : layer.__drawIndex;
        var useTimer = !paintAll && layer.incremental && Date.now;
        var startTime = useTimer && Date.now();
        var clearColor = layer.zlevel === this._zlevelList[0] ? this._backgroundColor : null; // All elements in this layer are cleared.

        if (layer.__startIndex === layer.__endIndex) {
          layer.clear(false, clearColor);
        } else if (start === layer.__startIndex) {
          var firstEl = list[start];

          if (!firstEl.incremental || !firstEl.notClear || paintAll) {
            layer.clear(false, clearColor);
          }
        }

        if (start === -1) {
          console.error('For some unknown reason. drawIndex is -1');
          start = layer.__startIndex;
        }

        for (var i = start; i < layer.__endIndex; i++) {
          var el = list[i];

          this._doPaintEl(el, layer, paintAll, scope);

          el.__dirty = el.__dirtyText = false;

          if (useTimer) {
            // Date.now can be executed in 13,025,305 ops/second.
            var dTime = Date.now() - startTime; // Give 15 millisecond to draw.
            // The rest elements will be drawn in the next frame.

            if (dTime > 15) {
              break;
            }
          }
        }

        layer.__drawIndex = i;

        if (layer.__drawIndex < layer.__endIndex) {
          finished = false;
        }

        if (scope.prevElClipPaths) {
          // Needs restore the state. If last drawn element is in the clipping area.
          ctx.restore();
        }

        ctx.restore();
      }

      if (env_1.wxa) {
        // Flush for weixin application
        util.each(this._layers, function (layer) {
          if (layer && layer.ctx && layer.ctx.draw) {
            layer.ctx.draw();
          }
        });
      }

      return finished;
    },
    _doPaintEl: function (el, currentLayer, forcePaint, scope) {
      var ctx = currentLayer.ctx;
      var m = el.transform;

      if ((currentLayer.__dirty || forcePaint) && // Ignore invisible element
      !el.invisible // Ignore transparent element
      && el.style.opacity !== 0 // Ignore scale 0 element, in some environment like node-canvas
      // Draw a scale 0 element can cause all following draw wrong
      // And setTransform with scale 0 will cause set back transform failed.
      && !(m && !m[0] && !m[3]) // Ignore culled element
      && !(el.culling && isDisplayableCulled(el, this._width, this._height))) {
        var clipPaths = el.__clipPaths;
        var prevElClipPaths = scope.prevElClipPaths; // Optimize when clipping on group with several elements

        if (!prevElClipPaths || isClipPathChanged(clipPaths, prevElClipPaths)) {
          // If has previous clipping state, restore from it
          if (prevElClipPaths) {
            ctx.restore();
            scope.prevElClipPaths = null; // Reset prevEl since context has been restored

            scope.prevEl = null;
          } // New clipping state


          if (clipPaths) {
            ctx.save();
            doClip(clipPaths, ctx);
            scope.prevElClipPaths = clipPaths;
          }
        }

        el.beforeBrush && el.beforeBrush(ctx);
        el.brush(ctx, scope.prevEl || null);
        scope.prevEl = el;
        el.afterBrush && el.afterBrush(ctx);
      }
    },

    /**
     * 获取 zlevel 所在层，如果不存在则会创建一个新的层
     * @param {number} zlevel
     * @param {boolean} virtual Virtual layer will not be inserted into dom.
     * @return {module:zrender/Layer}
     */
    getLayer: function (zlevel, virtual) {
      if (this._singleCanvas && !this._needsManuallyCompositing) {
        zlevel = CANVAS_ZLEVEL;
      }

      var layer = this._layers[zlevel];

      if (!layer) {
        // Create a new layer
        layer = new Layer_1('zr_' + zlevel, this, this.dpr);
        layer.zlevel = zlevel;
        layer.__builtin__ = true;

        if (this._layerConfig[zlevel]) {
          util.merge(layer, this._layerConfig[zlevel], true);
        }

        if (virtual) {
          layer.virtual = virtual;
        }

        this.insertLayer(zlevel, layer); // Context is created after dom inserted to document
        // Or excanvas will get 0px clientWidth and clientHeight

        layer.initContext();
      }

      return layer;
    },
    insertLayer: function (zlevel, layer) {
      var layersMap = this._layers;
      var zlevelList = this._zlevelList;
      var len = zlevelList.length;
      var prevLayer = null;
      var i = -1;
      var domRoot = this._domRoot;

      if (layersMap[zlevel]) {
        return;
      } // Check if is a valid layer


      if (!isLayerValid(layer)) {
        return;
      }

      if (len > 0 && zlevel > zlevelList[0]) {
        for (i = 0; i < len - 1; i++) {
          if (zlevelList[i] < zlevel && zlevelList[i + 1] > zlevel) {
            break;
          }
        }

        prevLayer = layersMap[zlevelList[i]];
      }

      zlevelList.splice(i + 1, 0, zlevel);
      layersMap[zlevel] = layer; // Vitual layer will not directly show on the screen.
      // (It can be a WebGL layer and assigned to a ZImage element)
      // But it still under management of zrender.

      if (!layer.virtual) {
        if (prevLayer) {
          var prevDom = prevLayer.dom;

          if (prevDom.nextSibling) {
            domRoot.insertBefore(layer.dom, prevDom.nextSibling);
          } else {
            domRoot.appendChild(layer.dom);
          }
        } else {
          if (domRoot.firstChild) {
            domRoot.insertBefore(layer.dom, domRoot.firstChild);
          } else {
            domRoot.appendChild(layer.dom);
          }
        }
      }
    },
    // Iterate each layer
    eachLayer: function (cb, context) {
      var zlevelList = this._zlevelList;
      var z;
      var i;

      for (i = 0; i < zlevelList.length; i++) {
        z = zlevelList[i];
        cb.call(context, this._layers[z], z);
      }
    },
    // Iterate each buildin layer
    eachBuiltinLayer: function (cb, context) {
      var zlevelList = this._zlevelList;
      var layer;
      var z;
      var i;

      for (i = 0; i < zlevelList.length; i++) {
        z = zlevelList[i];
        layer = this._layers[z];

        if (layer.__builtin__) {
          cb.call(context, layer, z);
        }
      }
    },
    // Iterate each other layer except buildin layer
    eachOtherLayer: function (cb, context) {
      var zlevelList = this._zlevelList;
      var layer;
      var z;
      var i;

      for (i = 0; i < zlevelList.length; i++) {
        z = zlevelList[i];
        layer = this._layers[z];

        if (!layer.__builtin__) {
          cb.call(context, layer, z);
        }
      }
    },

    /**
     * 获取所有已创建的层
     * @param {Array.<module:zrender/Layer>} [prevLayer]
     */
    getLayers: function () {
      return this._layers;
    },
    _updateLayerStatus: function (list) {
      this.eachBuiltinLayer(function (layer, z) {
        layer.__dirty = layer.__used = false;
      });

      function updatePrevLayer(idx) {
        if (prevLayer) {
          if (prevLayer.__endIndex !== idx) {
            prevLayer.__dirty = true;
          }

          prevLayer.__endIndex = idx;
        }
      }

      if (this._singleCanvas) {
        for (var i = 1; i < list.length; i++) {
          var el = list[i];

          if (el.zlevel !== list[i - 1].zlevel || el.incremental) {
            this._needsManuallyCompositing = true;
            break;
          }
        }
      }

      var prevLayer = null;
      var incrementalLayerCount = 0;

      for (var i = 0; i < list.length; i++) {
        var el = list[i];
        var zlevel = el.zlevel;
        var layer; // PENDING If change one incremental element style ?
        // TODO Where there are non-incremental elements between incremental elements.

        if (el.incremental) {
          layer = this.getLayer(zlevel + INCREMENTAL_INC, this._needsManuallyCompositing);
          layer.incremental = true;
          incrementalLayerCount = 1;
        } else {
          layer = this.getLayer(zlevel + (incrementalLayerCount > 0 ? EL_AFTER_INCREMENTAL_INC : 0), this._needsManuallyCompositing);
        }

        if (!layer.__builtin__) {
          log('ZLevel ' + zlevel + ' has been used by unkown layer ' + layer.id);
        }

        if (layer !== prevLayer) {
          layer.__used = true;

          if (layer.__startIndex !== i) {
            layer.__dirty = true;
          }

          layer.__startIndex = i;

          if (!layer.incremental) {
            layer.__drawIndex = i;
          } else {
            // Mark layer draw index needs to update.
            layer.__drawIndex = -1;
          }

          updatePrevLayer(i);
          prevLayer = layer;
        }

        if (el.__dirty) {
          layer.__dirty = true;

          if (layer.incremental && layer.__drawIndex < 0) {
            // Start draw from the first dirty element.
            layer.__drawIndex = i;
          }
        }
      }

      updatePrevLayer(i);
      this.eachBuiltinLayer(function (layer, z) {
        // Used in last frame but not in this frame. Needs clear
        if (!layer.__used && layer.getElementCount() > 0) {
          layer.__dirty = true;
          layer.__startIndex = layer.__endIndex = layer.__drawIndex = 0;
        } // For incremental layer. In case start index changed and no elements are dirty.


        if (layer.__dirty && layer.__drawIndex < 0) {
          layer.__drawIndex = layer.__startIndex;
        }
      });
    },

    /**
     * 清除hover层外所有内容
     */
    clear: function () {
      this.eachBuiltinLayer(this._clearLayer);
      return this;
    },
    _clearLayer: function (layer) {
      layer.clear();
    },
    setBackgroundColor: function (backgroundColor) {
      this._backgroundColor = backgroundColor;
    },

    /**
     * 修改指定zlevel的绘制参数
     *
     * @param {string} zlevel
     * @param {Object} config 配置对象
     * @param {string} [config.clearColor=0] 每次清空画布的颜色
     * @param {string} [config.motionBlur=false] 是否开启动态模糊
     * @param {number} [config.lastFrameAlpha=0.7]
     *                 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显
     */
    configLayer: function (zlevel, config) {
      if (config) {
        var layerConfig = this._layerConfig;

        if (!layerConfig[zlevel]) {
          layerConfig[zlevel] = config;
        } else {
          util.merge(layerConfig[zlevel], config, true);
        }

        for (var i = 0; i < this._zlevelList.length; i++) {
          var _zlevel = this._zlevelList[i];

          if (_zlevel === zlevel || _zlevel === zlevel + EL_AFTER_INCREMENTAL_INC) {
            var layer = this._layers[_zlevel];
            util.merge(layer, layerConfig[zlevel], true);
          }
        }
      }
    },

    /**
     * 删除指定层
     * @param {number} zlevel 层所在的zlevel
     */
    delLayer: function (zlevel) {
      var layers = this._layers;
      var zlevelList = this._zlevelList;
      var layer = layers[zlevel];

      if (!layer) {
        return;
      }

      layer.dom.parentNode.removeChild(layer.dom);
      delete layers[zlevel];
      zlevelList.splice(util.indexOf(zlevelList, zlevel), 1);
    },

    /**
     * 区域大小变化后重绘
     */
    resize: function (width, height) {
      if (!this._domRoot.style) {
        // Maybe in node or worker
        if (width == null || height == null) {
          return;
        }

        this._width = width;
        this._height = height;
        this.getLayer(CANVAS_ZLEVEL).resize(width, height);
      } else {
        var domRoot = this._domRoot; // FIXME Why ?

        domRoot.style.display = 'none'; // Save input w/h

        var opts = this._opts;
        width != null && (opts.width = width);
        height != null && (opts.height = height);
        width = this._getSize(0);
        height = this._getSize(1);
        domRoot.style.display = ''; // 优化没有实际改变的resize

        if (this._width !== width || height !== this._height) {
          domRoot.style.width = width + 'px';
          domRoot.style.height = height + 'px';

          for (var id in this._layers) {
            if (this._layers.hasOwnProperty(id)) {
              this._layers[id].resize(width, height);
            }
          }

          util.each(this._progressiveLayers, function (layer) {
            layer.resize(width, height);
          });
          this.refresh(true);
        }

        this._width = width;
        this._height = height;
      }

      return this;
    },

    /**
     * 清除单独的一个层
     * @param {number} zlevel
     */
    clearLayer: function (zlevel) {
      var layer = this._layers[zlevel];

      if (layer) {
        layer.clear();
      }
    },

    /**
     * 释放
     */
    dispose: function () {
      this.root.innerHTML = '';
      this.root = this.storage = this._domRoot = this._layers = null;
    },

    /**
     * Get canvas which has all thing rendered
     * @param {Object} opts
     * @param {string} [opts.backgroundColor]
     * @param {number} [opts.pixelRatio]
     */
    getRenderedCanvas: function (opts) {
      opts = opts || {};

      if (this._singleCanvas && !this._compositeManually) {
        return this._layers[CANVAS_ZLEVEL].dom;
      }

      var imageLayer = new Layer_1('image', this, opts.pixelRatio || this.dpr);
      imageLayer.initContext();
      imageLayer.clear(false, opts.backgroundColor || this._backgroundColor);

      if (opts.pixelRatio <= this.dpr) {
        this.refresh();
        var width = imageLayer.dom.width;
        var height = imageLayer.dom.height;
        var ctx = imageLayer.ctx;
        this.eachLayer(function (layer) {
          if (layer.__builtin__) {
            ctx.drawImage(layer.dom, 0, 0, width, height);
          } else if (layer.renderToCanvas) {
            imageLayer.ctx.save();
            layer.renderToCanvas(imageLayer.ctx);
            imageLayer.ctx.restore();
          }
        });
      } else {
        // PENDING, echarts-gl and incremental rendering.
        var scope = {};
        var displayList = this.storage.getDisplayList(true);

        for (var i = 0; i < displayList.length; i++) {
          var el = displayList[i];

          this._doPaintEl(el, imageLayer, true, scope);
        }
      }

      return imageLayer.dom;
    },

    /**
     * 获取绘图区域宽度
     */
    getWidth: function () {
      return this._width;
    },

    /**
     * 获取绘图区域高度
     */
    getHeight: function () {
      return this._height;
    },
    _getSize: function (whIdx) {
      var opts = this._opts;
      var wh = ['width', 'height'][whIdx];
      var cwh = ['clientWidth', 'clientHeight'][whIdx];
      var plt = ['paddingLeft', 'paddingTop'][whIdx];
      var prb = ['paddingRight', 'paddingBottom'][whIdx];

      if (opts[wh] != null && opts[wh] !== 'auto') {
        return parseFloat(opts[wh]);
      }

      var root = this.root; // IE8 does not support getComputedStyle, but it use VML.

      var stl = document.defaultView.getComputedStyle(root);
      return (root[cwh] || parseInt10(stl[wh]) || parseInt10(root.style[wh])) - (parseInt10(stl[plt]) || 0) - (parseInt10(stl[prb]) || 0) | 0;
    },
    pathToImage: function (path, dpr) {
      dpr = dpr || this.dpr;
      var canvas = document.createElement('canvas');
      var ctx = canvas.getContext('2d');
      var rect = path.getBoundingRect();
      var style = path.style;
      var shadowBlurSize = style.shadowBlur * dpr;
      var shadowOffsetX = style.shadowOffsetX * dpr;
      var shadowOffsetY = style.shadowOffsetY * dpr;
      var lineWidth = style.hasStroke() ? style.lineWidth : 0;
      var leftMargin = Math.max(lineWidth / 2, -shadowOffsetX + shadowBlurSize);
      var rightMargin = Math.max(lineWidth / 2, shadowOffsetX + shadowBlurSize);
      var topMargin = Math.max(lineWidth / 2, -shadowOffsetY + shadowBlurSize);
      var bottomMargin = Math.max(lineWidth / 2, shadowOffsetY + shadowBlurSize);
      var width = rect.width + leftMargin + rightMargin;
      var height = rect.height + topMargin + bottomMargin;
      canvas.width = width * dpr;
      canvas.height = height * dpr;
      ctx.scale(dpr, dpr);
      ctx.clearRect(0, 0, width, height);
      ctx.dpr = dpr;
      var pathTransform = {
        position: path.position,
        rotation: path.rotation,
        scale: path.scale
      };
      path.position = [leftMargin - rect.x, topMargin - rect.y];
      path.rotation = 0;
      path.scale = [1, 1];
      path.updateTransform();

      if (path) {
        path.brush(ctx);
      }

      var ImageShape = Image$1;
      var imgShape = new ImageShape({
        style: {
          x: 0,
          y: 0,
          image: canvas
        }
      });

      if (pathTransform.position != null) {
        imgShape.position = path.position = pathTransform.position;
      }

      if (pathTransform.rotation != null) {
        imgShape.rotation = path.rotation = pathTransform.rotation;
      }

      if (pathTransform.scale != null) {
        imgShape.scale = path.scale = pathTransform.scale;
      }

      return imgShape;
    }
  };
  var _default$p = Painter;
  var Painter_1 = _default$p;

  var Dispatcher$1 = event.Dispatcher;





  /**
   * Animation main class, dispatch and manage all animation controllers
   *
   * @module zrender/animation/Animation
   * @author pissang(https://github.com/pissang)
   */
  // TODO Additive animation
  // http://iosoteric.com/additive-animations-animatewithduration-in-ios-8/
  // https://developer.apple.com/videos/wwdc2014/#236

  /**
   * @typedef {Object} IZRenderStage
   * @property {Function} update
   */

  /**
   * @alias module:zrender/animation/Animation
   * @constructor
   * @param {Object} [options]
   * @param {Function} [options.onframe]
   * @param {IZRenderStage} [options.stage]
   * @example
   *     var animation = new Animation();
   *     var obj = {
   *         x: 100,
   *         y: 100
   *     };
   *     animation.animate(node.position)
   *         .when(1000, {
   *             x: 500,
   *             y: 500
   *         })
   *         .when(2000, {
   *             x: 100,
   *             y: 100
   *         })
   *         .start('spline');
   */
  var Animation = function (options) {
    options = options || {};
    this.stage = options.stage || {};

    this.onframe = options.onframe || function () {}; // private properties


    this._clips = [];
    this._running = false;
    this._time;
    this._pausedTime;
    this._pauseStart;
    this._paused = false;
    Dispatcher$1.call(this);
  };

  Animation.prototype = {
    constructor: Animation,

    /**
     * Add clip
     * @param {module:zrender/animation/Clip} clip
     */
    addClip: function (clip) {
      this._clips.push(clip);
    },

    /**
     * Add animator
     * @param {module:zrender/animation/Animator} animator
     */
    addAnimator: function (animator) {
      animator.animation = this;
      var clips = animator.getClips();

      for (var i = 0; i < clips.length; i++) {
        this.addClip(clips[i]);
      }
    },

    /**
     * Delete animation clip
     * @param {module:zrender/animation/Clip} clip
     */
    removeClip: function (clip) {
      var idx = util.indexOf(this._clips, clip);

      if (idx >= 0) {
        this._clips.splice(idx, 1);
      }
    },

    /**
     * Delete animation clip
     * @param {module:zrender/animation/Animator} animator
     */
    removeAnimator: function (animator) {
      var clips = animator.getClips();

      for (var i = 0; i < clips.length; i++) {
        this.removeClip(clips[i]);
      }

      animator.animation = null;
    },
    _update: function () {
      var time = new Date().getTime() - this._pausedTime;

      var delta = time - this._time;
      var clips = this._clips;
      var len = clips.length;
      var deferredEvents = [];
      var deferredClips = [];

      for (var i = 0; i < len; i++) {
        var clip = clips[i];
        var e = clip.step(time, delta); // Throw out the events need to be called after
        // stage.update, like destroy

        if (e) {
          deferredEvents.push(e);
          deferredClips.push(clip);
        }
      } // Remove the finished clip


      for (var i = 0; i < len;) {
        if (clips[i]._needsRemove) {
          clips[i] = clips[len - 1];
          clips.pop();
          len--;
        } else {
          i++;
        }
      }

      len = deferredEvents.length;

      for (var i = 0; i < len; i++) {
        deferredClips[i].fire(deferredEvents[i]);
      }

      this._time = time;
      this.onframe(delta); // 'frame' should be triggered before stage, because upper application
      // depends on the sequence (e.g., echarts-stream and finish
      // event judge)

      this.trigger('frame', delta);

      if (this.stage.update) {
        this.stage.update();
      }
    },
    _startLoop: function () {
      var self = this;
      this._running = true;

      function step() {
        if (self._running) {
          requestAnimationFrame$1(step);
          !self._paused && self._update();
        }
      }

      requestAnimationFrame$1(step);
    },

    /**
     * Start animation.
     */
    start: function () {
      this._time = new Date().getTime();
      this._pausedTime = 0;

      this._startLoop();
    },

    /**
     * Stop animation.
     */
    stop: function () {
      this._running = false;
    },

    /**
     * Pause animation.
     */
    pause: function () {
      if (!this._paused) {
        this._pauseStart = new Date().getTime();
        this._paused = true;
      }
    },

    /**
     * Resume animation.
     */
    resume: function () {
      if (this._paused) {
        this._pausedTime += new Date().getTime() - this._pauseStart;
        this._paused = false;
      }
    },

    /**
     * Clear animation.
     */
    clear: function () {
      this._clips = [];
    },

    /**
     * Whether animation finished.
     */
    isFinished: function () {
      return !this._clips.length;
    },

    /**
     * Creat animator for a target, whose props can be animated.
     *
     * @param  {Object} target
     * @param  {Object} options
     * @param  {boolean} [options.loop=false] Whether loop animation.
     * @param  {Function} [options.getter=null] Get value from target.
     * @param  {Function} [options.setter=null] Set value to target.
     * @return {module:zrender/animation/Animation~Animator}
     */
    // TODO Gap
    animate: function (target, options) {
      options = options || {};
      var animator = new Animator_1(target, options.loop, options.getter, options.setter);
      this.addAnimator(animator);
      return animator;
    }
  };
  util.mixin(Animation, Dispatcher$1);
  var _default$q = Animation;
  var Animation_1 = _default$q;

  var addEventListener$1 = event.addEventListener;
  var removeEventListener$1 = event.removeEventListener;
  var normalizeEvent$1 = event.normalizeEvent;
  var getNativeEvent$1 = event.getNativeEvent;







  /* global document */
  var TOUCH_CLICK_DELAY = 300;
  var globalEventSupported = env_1.domSupported;

  var localNativeListenerNames = function () {
    var mouseHandlerNames = ['click', 'dblclick', 'mousewheel', 'mouseout', 'mouseup', 'mousedown', 'mousemove', 'contextmenu'];
    var touchHandlerNames = ['touchstart', 'touchend', 'touchmove'];
    var pointerEventNameMap = {
      pointerdown: 1,
      pointerup: 1,
      pointermove: 1,
      pointerout: 1
    };
    var pointerHandlerNames = util.map(mouseHandlerNames, function (name) {
      var nm = name.replace('mouse', 'pointer');
      return pointerEventNameMap.hasOwnProperty(nm) ? nm : name;
    });
    return {
      mouse: mouseHandlerNames,
      touch: touchHandlerNames,
      pointer: pointerHandlerNames
    };
  }();

  var globalNativeListenerNames = {
    mouse: ['mousemove', 'mouseup'],
    pointer: ['pointermove', 'pointerup']
  };

  function eventNameFix(name) {
    return name === 'mousewheel' && env_1.browser.firefox ? 'DOMMouseScroll' : name;
  }

  function isPointerFromTouch(event) {
    var pointerType = event.pointerType;
    return pointerType === 'pen' || pointerType === 'touch';
  } // function useMSGuesture(handlerProxy, event) {
  //     return isPointerFromTouch(event) && !!handlerProxy._msGesture;
  // }
  // function onMSGestureChange(proxy, event) {
  //     if (event.translationX || event.translationY) {
  //         // mousemove is carried by MSGesture to reduce the sensitivity.
  //         proxy.handler.dispatchToElement(event.target, 'mousemove', event);
  //     }
  //     if (event.scale !== 1) {
  //         event.pinchX = event.offsetX;
  //         event.pinchY = event.offsetY;
  //         event.pinchScale = event.scale;
  //         proxy.handler.dispatchToElement(event.target, 'pinch', event);
  //     }
  // }

  /**
   * Prevent mouse event from being dispatched after Touch Events action
   * @see <https://github.com/deltakosh/handjs/blob/master/src/hand.base.js>
   * 1. Mobile browsers dispatch mouse events 300ms after touchend.
   * 2. Chrome for Android dispatch mousedown for long-touch about 650ms
   * Result: Blocking Mouse Events for 700ms.
   *
   * @param {DOMHandlerScope} scope
   */


  function setTouchTimer(scope) {
    scope.touching = true;

    if (scope.touchTimer != null) {
      clearTimeout(scope.touchTimer);
      scope.touchTimer = null;
    }

    scope.touchTimer = setTimeout(function () {
      scope.touching = false;
      scope.touchTimer = null;
    }, 700);
  } // Mark touch, which is useful in distinguish touch and
  // mouse event in upper applicatoin.


  function markTouch(event) {
    event && (event.zrByTouch = true);
  } // function markTriggeredFromLocal(event) {
  //     event && (event.__zrIsFromLocal = true);
  // }
  // function isTriggeredFromLocal(instance, event) {
  //     return !!(event && event.__zrIsFromLocal);
  // }


  function normalizeGlobalEvent(instance, event) {
    // offsetX, offsetY still need to be calculated. They are necessary in the event
    // handlers of the upper applications. Set `true` to force calculate them.
    return normalizeEvent$1(instance.dom, new FakeGlobalEvent(instance, event), true);
  }
  /**
   * Detect whether the given el is in `painterRoot`.
   */


  function isLocalEl(instance, el) {
    var elTmp = el;
    var isLocal = false;

    while (elTmp && elTmp.nodeType !== 9 && !(isLocal = elTmp.domBelongToZr || elTmp !== el && elTmp === instance.painterRoot)) {
      elTmp = elTmp.parentNode;
    }

    return isLocal;
  }
  /**
   * Make a fake event but not change the original event,
   * becuase the global event probably be used by other
   * listeners not belonging to zrender.
   * @class
   */


  function FakeGlobalEvent(instance, event) {
    this.type = event.type;
    this.target = this.currentTarget = instance.dom;
    this.pointerType = event.pointerType; // Necessray for the force calculation of zrX, zrY

    this.clientX = event.clientX;
    this.clientY = event.clientY; // Because we do not mount global listeners to touch events,
    // we do not copy `targetTouches` and `changedTouches` here.
  }

  var fakeGlobalEventProto = FakeGlobalEvent.prototype; // we make the default methods on the event do nothing,
  // otherwise it is dangerous. See more details in
  // [Drag outside] in `Handler.js`.

  fakeGlobalEventProto.stopPropagation = fakeGlobalEventProto.stopImmediatePropagation = fakeGlobalEventProto.preventDefault = util.noop;
  /**
   * Local DOM Handlers
   * @this {HandlerProxy}
   */

  var localDOMHandlers = {
    mousedown: function (event) {
      event = normalizeEvent$1(this.dom, event);
      this._mayPointerCapture = [event.zrX, event.zrY];
      this.trigger('mousedown', event);
    },
    mousemove: function (event) {
      event = normalizeEvent$1(this.dom, event);
      var downPoint = this._mayPointerCapture;

      if (downPoint && (event.zrX !== downPoint[0] || event.zrY !== downPoint[1])) {
        togglePointerCapture(this, true);
      }

      this.trigger('mousemove', event);
    },
    mouseup: function (event) {
      event = normalizeEvent$1(this.dom, event);
      togglePointerCapture(this, false);
      this.trigger('mouseup', event);
    },
    mouseout: function (event) {
      event = normalizeEvent$1(this.dom, event); // Similarly to the browser did on `document` and touch event,
      // `globalout` will be delayed to final pointer cature release.

      if (this._pointerCapturing) {
        event.zrEventControl = 'no_globalout';
      } // There might be some doms created by upper layer application
      // at the same level of painter.getViewportRoot() (e.g., tooltip
      // dom created by echarts), where 'globalout' event should not
      // be triggered when mouse enters these doms. (But 'mouseout'
      // should be triggered at the original hovered element as usual).


      var element = event.toElement || event.relatedTarget;
      event.zrIsToLocalDOM = isLocalEl(this, element);
      this.trigger('mouseout', event);
    },
    touchstart: function (event) {
      // Default mouse behaviour should not be disabled here.
      // For example, page may needs to be slided.
      event = normalizeEvent$1(this.dom, event);
      markTouch(event);
      this._lastTouchMoment = new Date();
      this.handler.processGesture(event, 'start'); // For consistent event listener for both touch device and mouse device,
      // we simulate "mouseover-->mousedown" in touch device. So we trigger
      // `mousemove` here (to trigger `mouseover` inside), and then trigger
      // `mousedown`.

      localDOMHandlers.mousemove.call(this, event);
      localDOMHandlers.mousedown.call(this, event);
    },
    touchmove: function (event) {
      event = normalizeEvent$1(this.dom, event);
      markTouch(event);
      this.handler.processGesture(event, 'change'); // Mouse move should always be triggered no matter whether
      // there is gestrue event, because mouse move and pinch may
      // be used at the same time.

      localDOMHandlers.mousemove.call(this, event);
    },
    touchend: function (event) {
      event = normalizeEvent$1(this.dom, event);
      markTouch(event);
      this.handler.processGesture(event, 'end');
      localDOMHandlers.mouseup.call(this, event); // Do not trigger `mouseout` here, in spite of `mousemove`(`mouseover`) is
      // triggered in `touchstart`. This seems to be illogical, but by this mechanism,
      // we can conveniently implement "hover style" in both PC and touch device just
      // by listening to `mouseover` to add "hover style" and listening to `mouseout`
      // to remove "hover style" on an element, without any additional code for
      // compatibility. (`mouseout` will not be triggered in `touchend`, so "hover
      // style" will remain for user view)
      // click event should always be triggered no matter whether
      // there is gestrue event. System click can not be prevented.

      if (+new Date() - this._lastTouchMoment < TOUCH_CLICK_DELAY) {
        localDOMHandlers.click.call(this, event);
      }
    },
    pointerdown: function (event) {
      localDOMHandlers.mousedown.call(this, event); // if (useMSGuesture(this, event)) {
      //     this._msGesture.addPointer(event.pointerId);
      // }
    },
    pointermove: function (event) {
      // FIXME
      // pointermove is so sensitive that it always triggered when
      // tap(click) on touch screen, which affect some judgement in
      // upper application. So, we dont support mousemove on MS touch
      // device yet.
      if (!isPointerFromTouch(event)) {
        localDOMHandlers.mousemove.call(this, event);
      }
    },
    pointerup: function (event) {
      localDOMHandlers.mouseup.call(this, event);
    },
    pointerout: function (event) {
      // pointerout will be triggered when tap on touch screen
      // (IE11+/Edge on MS Surface) after click event triggered,
      // which is inconsistent with the mousout behavior we defined
      // in touchend. So we unify them.
      // (check localDOMHandlers.touchend for detailed explanation)
      if (!isPointerFromTouch(event)) {
        localDOMHandlers.mouseout.call(this, event);
      }
    }
  };
  /**
   * Othere DOM UI Event handlers for zr dom.
   * @this {HandlerProxy}
   */

  util.each(['click', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {
    localDOMHandlers[name] = function (event) {
      event = normalizeEvent$1(this.dom, event);
      this.trigger(name, event);
    };
  });
  /**
   * DOM UI Event handlers for global page.
   *
   * [Caution]:
   * those handlers should both support in capture phase and bubble phase!
   *
   * @this {HandlerProxy}
   */

  var globalDOMHandlers = {
    pointermove: function (event) {
      // FIXME
      // pointermove is so sensitive that it always triggered when
      // tap(click) on touch screen, which affect some judgement in
      // upper application. So, we dont support mousemove on MS touch
      // device yet.
      if (!isPointerFromTouch(event)) {
        globalDOMHandlers.mousemove.call(this, event);
      }
    },
    pointerup: function (event) {
      globalDOMHandlers.mouseup.call(this, event);
    },
    mousemove: function (event) {
      this.trigger('mousemove', event);
    },
    mouseup: function (event) {
      var pointerCaptureReleasing = this._pointerCapturing;
      togglePointerCapture(this, false);
      this.trigger('mouseup', event);

      if (pointerCaptureReleasing) {
        event.zrEventControl = 'only_globalout';
        this.trigger('mouseout', event);
      }
    }
  };
  /**
   * @param {HandlerProxy} instance
   * @param {DOMHandlerScope} scope
   */

  function mountLocalDOMEventListeners(instance, scope) {
    var domHandlers = scope.domHandlers;

    if (env_1.pointerEventsSupported) {
      // Only IE11+/Edge
      // 1. On devices that both enable touch and mouse (e.g., MS Surface and lenovo X240),
      // IE11+/Edge do not trigger touch event, but trigger pointer event and mouse event
      // at the same time.
      // 2. On MS Surface, it probablely only trigger mousedown but no mouseup when tap on
      // screen, which do not occurs in pointer event.
      // So we use pointer event to both detect touch gesture and mouse behavior.
      util.each(localNativeListenerNames.pointer, function (nativeEventName) {
        mountSingleDOMEventListener(scope, nativeEventName, function (event) {
          // markTriggeredFromLocal(event);
          domHandlers[nativeEventName].call(instance, event);
        });
      }); // FIXME
      // Note: MS Gesture require CSS touch-action set. But touch-action is not reliable,
      // which does not prevent defuault behavior occasionally (which may cause view port
      // zoomed in but use can not zoom it back). And event.preventDefault() does not work.
      // So we have to not to use MSGesture and not to support touchmove and pinch on MS
      // touch screen. And we only support click behavior on MS touch screen now.
      // MS Gesture Event is only supported on IE11+/Edge and on Windows 8+.
      // We dont support touch on IE on win7.
      // See <https://msdn.microsoft.com/en-us/library/dn433243(v=vs.85).aspx>
      // if (typeof MSGesture === 'function') {
      //     (this._msGesture = new MSGesture()).target = dom; // jshint ignore:line
      //     dom.addEventListener('MSGestureChange', onMSGestureChange);
      // }
    } else {
      if (env_1.touchEventsSupported) {
        util.each(localNativeListenerNames.touch, function (nativeEventName) {
          mountSingleDOMEventListener(scope, nativeEventName, function (event) {
            // markTriggeredFromLocal(event);
            domHandlers[nativeEventName].call(instance, event);
            setTouchTimer(scope);
          });
        }); // Handler of 'mouseout' event is needed in touch mode, which will be mounted below.
        // addEventListener(root, 'mouseout', this._mouseoutHandler);
      } // 1. Considering some devices that both enable touch and mouse event (like on MS Surface
      // and lenovo X240, @see #2350), we make mouse event be always listened, otherwise
      // mouse event can not be handle in those devices.
      // 2. On MS Surface, Chrome will trigger both touch event and mouse event. How to prevent
      // mouseevent after touch event triggered, see `setTouchTimer`.


      util.each(localNativeListenerNames.mouse, function (nativeEventName) {
        mountSingleDOMEventListener(scope, nativeEventName, function (event) {
          event = getNativeEvent$1(event);

          if (!scope.touching) {
            // markTriggeredFromLocal(event);
            domHandlers[nativeEventName].call(instance, event);
          }
        });
      });
    }
  }
  /**
   * @param {HandlerProxy} instance
   * @param {DOMHandlerScope} scope
   */


  function mountGlobalDOMEventListeners(instance, scope) {
    // Only IE11+/Edge. See the comment in `mountLocalDOMEventListeners`.
    if (env_1.pointerEventsSupported) {
      util.each(globalNativeListenerNames.pointer, mount);
    } // Touch event has implemented "drag outside" so we do not mount global listener for touch event.
    // (see https://www.w3.org/TR/touch-events/#the-touchmove-event)
    // We do not consider "both-support-touch-and-mouse device" for this feature (see the comment of
    // `mountLocalDOMEventListeners`) to avoid bugs util some requirements come.
    else if (!env_1.touchEventsSupported) {
        util.each(globalNativeListenerNames.mouse, mount);
      }

    function mount(nativeEventName) {
      function nativeEventListener(event) {
        event = getNativeEvent$1(event); // See the reason in [Drag outside] in `Handler.js`
        // This checking supports both `useCapture` or not.
        // PENDING: if there is performance issue in some devices,
        // we probably can not use `useCapture` and change a easier
        // to judes whether local (mark).

        if (!isLocalEl(instance, event.target)) {
          event = normalizeGlobalEvent(instance, event);
          scope.domHandlers[nativeEventName].call(instance, event);
        }
      }

      mountSingleDOMEventListener(scope, nativeEventName, nativeEventListener, {
        capture: true
      } // See [Drag Outside] in `Handler.js`
      );
    }
  }

  function mountSingleDOMEventListener(scope, nativeEventName, listener, opt) {
    scope.mounted[nativeEventName] = listener;
    scope.listenerOpts[nativeEventName] = opt;
    addEventListener$1(scope.domTarget, eventNameFix(nativeEventName), listener, opt);
  }

  function unmountDOMEventListeners(scope) {
    var mounted = scope.mounted;

    for (var nativeEventName in mounted) {
      if (mounted.hasOwnProperty(nativeEventName)) {
        removeEventListener$1(scope.domTarget, eventNameFix(nativeEventName), mounted[nativeEventName], scope.listenerOpts[nativeEventName]);
      }
    }

    scope.mounted = {};
  }
  /**
   * See [Drag Outside] in `Handler.js`.
   * @implement
   * @param {boolean} isPointerCapturing Should never be `null`/`undefined`.
   *        `true`: start to capture pointer if it is not capturing.
   *        `false`: end the capture if it is capturing.
   */


  function togglePointerCapture(instance, isPointerCapturing) {
    instance._mayPointerCapture = null;

    if (globalEventSupported && instance._pointerCapturing ^ isPointerCapturing) {
      instance._pointerCapturing = isPointerCapturing;
      var globalHandlerScope = instance._globalHandlerScope;
      isPointerCapturing ? mountGlobalDOMEventListeners(instance, globalHandlerScope) : unmountDOMEventListeners(globalHandlerScope);
    }
  }
  /**
   * @inner
   * @class
   */


  function DOMHandlerScope(domTarget, domHandlers) {
    this.domTarget = domTarget;
    this.domHandlers = domHandlers; // Key: eventName, value: mounted handler funcitons.
    // Used for unmount.

    this.mounted = {};
    this.listenerOpts = {};
    this.touchTimer = null;
    this.touching = false;
  }
  /**
   * @public
   * @class
   */


  function HandlerDomProxy(dom, painterRoot) {
    Eventful_1.call(this);
    this.dom = dom;
    this.painterRoot = painterRoot;
    this._localHandlerScope = new DOMHandlerScope(dom, localDOMHandlers);

    if (globalEventSupported) {
      this._globalHandlerScope = new DOMHandlerScope(document, globalDOMHandlers);
    }
    /**
     * @type {boolean}
     */


    this._pointerCapturing = false;
    /**
     * @type {Array.<number>} [x, y] or null.
     */

    this._mayPointerCapture = null;
    mountLocalDOMEventListeners(this, this._localHandlerScope);
  }

  var handlerDomProxyProto = HandlerDomProxy.prototype;

  handlerDomProxyProto.dispose = function () {
    unmountDOMEventListeners(this._localHandlerScope);

    if (globalEventSupported) {
      unmountDOMEventListeners(this._globalHandlerScope);
    }
  };

  handlerDomProxyProto.setCursor = function (cursorStyle) {
    this.dom.style && (this.dom.style.cursor = cursorStyle || 'default');
  };

  util.mixin(HandlerDomProxy, Eventful_1);
  var _default$r = HandlerDomProxy;
  var HandlerProxy = _default$r;

  /*!
  * ZRender, a high performance 2d drawing library.
  *
  * Copyright (c) 2013, Baidu Inc.
  * All rights reserved.
  *
  * LICENSE
  * https://github.com/ecomfe/zrender/blob/master/LICENSE.txt
  */
  var useVML = !env_1.canvasSupported;
  var painterCtors = {
    canvas: Painter_1
  };
  var instances = {}; // ZRender实例map索引

  /**
   * @type {string}
   */

  var version = '4.3.0';
  /**
   * Initializing a zrender instance
   * @param {HTMLElement} dom
   * @param {Object} [opts]
   * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'
   * @param {number} [opts.devicePixelRatio]
   * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)
   * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)
   * @return {module:zrender/ZRender}
   */

  function init(dom, opts) {
    var zr = new ZRender(guid(), dom, opts);
    instances[zr.id] = zr;
    return zr;
  }
  /**
   * Dispose zrender instance
   * @param {module:zrender/ZRender} zr
   */


  function dispose(zr) {
    if (zr) {
      zr.dispose();
    } else {
      for (var key in instances) {
        if (instances.hasOwnProperty(key)) {
          instances[key].dispose();
        }
      }

      instances = {};
    }

    return this;
  }
  /**
   * Get zrender instance by id
   * @param {string} id zrender instance id
   * @return {module:zrender/ZRender}
   */


  function getInstance(id) {
    return instances[id];
  }

  function registerPainter(name, Ctor) {
    painterCtors[name] = Ctor;
  }

  function delInstance(id) {
    delete instances[id];
  }
  /**
   * @module zrender/ZRender
   */

  /**
   * @constructor
   * @alias module:zrender/ZRender
   * @param {string} id
   * @param {HTMLElement} dom
   * @param {Object} opts
   * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'
   * @param {number} [opts.devicePixelRatio]
   * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)
   * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)
   */


  var ZRender = function (id, dom, opts) {
    opts = opts || {};
    /**
     * @type {HTMLDomElement}
     */

    this.dom = dom;
    /**
     * @type {string}
     */

    this.id = id;
    var self = this;
    var storage = new Storage_1();
    var rendererType = opts.renderer; // TODO WebGL

    if (useVML) {
      if (!painterCtors.vml) {
        throw new Error('You need to require \'zrender/vml/vml\' to support IE8');
      }

      rendererType = 'vml';
    } else if (!rendererType || !painterCtors[rendererType]) {
      rendererType = 'canvas';
    }

    var painter = new painterCtors[rendererType](dom, storage, opts, id);
    this.storage = storage;
    this.painter = painter;
    var handerProxy = !env_1.node && !env_1.worker ? new HandlerProxy(painter.getViewportRoot(), painter.root) : null;
    this.handler = new Handler_1(storage, painter, handerProxy, painter.root);
    /**
     * @type {module:zrender/animation/Animation}
     */

    this.animation = new Animation_1({
      stage: {
        update: util.bind(this.flush, this)
      }
    });
    this.animation.start();
    /**
     * @type {boolean}
     * @private
     */

    this._needsRefresh; // 修改 storage.delFromStorage, 每次删除元素之前删除动画
    // FIXME 有点ugly

    var oldDelFromStorage = storage.delFromStorage;
    var oldAddToStorage = storage.addToStorage;

    storage.delFromStorage = function (el) {
      oldDelFromStorage.call(storage, el);
      el && el.removeSelfFromZr(self);
    };

    storage.addToStorage = function (el) {
      oldAddToStorage.call(storage, el);
      el.addSelfToZr(self);
    };
  };

  ZRender.prototype = {
    constructor: ZRender,

    /**
     * 获取实例唯一标识
     * @return {string}
     */
    getId: function () {
      return this.id;
    },

    /**
     * 添加元素
     * @param  {module:zrender/Element} el
     */
    add: function (el) {
      this.storage.addRoot(el);
      this._needsRefresh = true;
    },

    /**
     * 删除元素
     * @param  {module:zrender/Element} el
     */
    remove: function (el) {
      this.storage.delRoot(el);
      this._needsRefresh = true;
    },

    /**
     * Change configuration of layer
     * @param {string} zLevel
     * @param {Object} config
     * @param {string} [config.clearColor=0] Clear color
     * @param {string} [config.motionBlur=false] If enable motion blur
     * @param {number} [config.lastFrameAlpha=0.7] Motion blur factor. Larger value cause longer trailer
    */
    configLayer: function (zLevel, config) {
      if (this.painter.configLayer) {
        this.painter.configLayer(zLevel, config);
      }

      this._needsRefresh = true;
    },

    /**
     * Set background color
     * @param {string} backgroundColor
     */
    setBackgroundColor: function (backgroundColor) {
      if (this.painter.setBackgroundColor) {
        this.painter.setBackgroundColor(backgroundColor);
      }

      this._needsRefresh = true;
    },

    /**
     * Repaint the canvas immediately
     */
    refreshImmediately: function () {
      // var start = new Date();
      // Clear needsRefresh ahead to avoid something wrong happens in refresh
      // Or it will cause zrender refreshes again and again.
      this._needsRefresh = this._needsRefreshHover = false;
      this.painter.refresh(); // Avoid trigger zr.refresh in Element#beforeUpdate hook

      this._needsRefresh = this._needsRefreshHover = false; // var end = new Date();
      // var log = document.getElementById('log');
      // if (log) {
      //     log.innerHTML = log.innerHTML + '<br>' + (end - start);
      // }
    },

    /**
     * Mark and repaint the canvas in the next frame of browser
     */
    refresh: function () {
      this._needsRefresh = true;
    },

    /**
     * Perform all refresh
     */
    flush: function () {
      var triggerRendered;

      if (this._needsRefresh) {
        triggerRendered = true;
        this.refreshImmediately();
      }

      if (this._needsRefreshHover) {
        triggerRendered = true;
        this.refreshHoverImmediately();
      }

      triggerRendered && this.trigger('rendered');
    },

    /**
     * Add element to hover layer
     * @param  {module:zrender/Element} el
     * @param {Object} style
     */
    addHover: function (el, style) {
      if (this.painter.addHover) {
        var elMirror = this.painter.addHover(el, style);
        this.refreshHover();
        return elMirror;
      }
    },

    /**
     * Add element from hover layer
     * @param  {module:zrender/Element} el
     */
    removeHover: function (el) {
      if (this.painter.removeHover) {
        this.painter.removeHover(el);
        this.refreshHover();
      }
    },

    /**
     * Clear all hover elements in hover layer
     * @param  {module:zrender/Element} el
     */
    clearHover: function () {
      if (this.painter.clearHover) {
        this.painter.clearHover();
        this.refreshHover();
      }
    },

    /**
     * Refresh hover in next frame
     */
    refreshHover: function () {
      this._needsRefreshHover = true;
    },

    /**
     * Refresh hover immediately
     */
    refreshHoverImmediately: function () {
      this._needsRefreshHover = false;
      this.painter.refreshHover && this.painter.refreshHover();
    },

    /**
     * Resize the canvas.
     * Should be invoked when container size is changed
     * @param {Object} [opts]
     * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)
     * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)
     */
    resize: function (opts) {
      opts = opts || {};
      this.painter.resize(opts.width, opts.height);
      this.handler.resize();
    },

    /**
     * Stop and clear all animation immediately
     */
    clearAnimation: function () {
      this.animation.clear();
    },

    /**
     * Get container width
     */
    getWidth: function () {
      return this.painter.getWidth();
    },

    /**
     * Get container height
     */
    getHeight: function () {
      return this.painter.getHeight();
    },

    /**
     * Export the canvas as Base64 URL
     * @param {string} type
     * @param {string} [backgroundColor='#fff']
     * @return {string} Base64 URL
     */
    // toDataURL: function(type, backgroundColor) {
    //     return this.painter.getRenderedCanvas({
    //         backgroundColor: backgroundColor
    //     }).toDataURL(type);
    // },

    /**
     * Converting a path to image.
     * It has much better performance of drawing image rather than drawing a vector path.
     * @param {module:zrender/graphic/Path} e
     * @param {number} width
     * @param {number} height
     */
    pathToImage: function (e, dpr) {
      return this.painter.pathToImage(e, dpr);
    },

    /**
     * Set default cursor
     * @param {string} [cursorStyle='default'] 例如 crosshair
     */
    setCursorStyle: function (cursorStyle) {
      this.handler.setCursorStyle(cursorStyle);
    },

    /**
     * Find hovered element
     * @param {number} x
     * @param {number} y
     * @return {Object} {target, topTarget}
     */
    findHover: function (x, y) {
      return this.handler.findHover(x, y);
    },

    /**
     * Bind event
     *
     * @param {string} eventName Event name
     * @param {Function} eventHandler Handler function
     * @param {Object} [context] Context object
     */
    on: function (eventName, eventHandler, context) {
      this.handler.on(eventName, eventHandler, context);
    },

    /**
     * Unbind event
     * @param {string} eventName Event name
     * @param {Function} [eventHandler] Handler function
     */
    off: function (eventName, eventHandler) {
      this.handler.off(eventName, eventHandler);
    },

    /**
     * Trigger event manually
     *
     * @param {string} eventName Event name
     * @param {event=} event Event object
     */
    trigger: function (eventName, event) {
      this.handler.trigger(eventName, event);
    },

    /**
     * Clear all objects and the canvas.
     */
    clear: function () {
      this.storage.delRoot();
      this.painter.clear();
    },

    /**
     * Dispose self.
     */
    dispose: function () {
      this.animation.stop();
      this.clear();
      this.storage.dispose();
      this.painter.dispose();
      this.handler.dispose();
      this.animation = this.storage = this.painter = this.handler = null;
      delInstance(this.id);
    }
  };
  var version_1 = version;
  var init_1 = init;
  var dispose_1 = dispose;
  var getInstance_1 = getInstance;
  var registerPainter_1 = registerPainter;

  var zrender = {
  	version: version_1,
  	init: init_1,
  	dispose: dispose_1,
  	getInstance: getInstance_1,
  	registerPainter: registerPainter_1
  };

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */





  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var each$2 = util.each;
  var isObject$3 = util.isObject;
  var isArray$1 = util.isArray;
  /**
   * Make the name displayable. But we should
   * make sure it is not duplicated with user
   * specified name, so use '\0';
   */

  var DUMMY_COMPONENT_NAME_PREFIX = 'series\0';
  /**
   * If value is not array, then translate it to array.
   * @param  {*} value
   * @return {Array} [value] or value
   */

  function normalizeToArray(value) {
    return value instanceof Array ? value : value == null ? [] : [value];
  }
  /**
   * Sync default option between normal and emphasis like `position` and `show`
   * In case some one will write code like
   *     label: {
   *          show: false,
   *          position: 'outside',
   *          fontSize: 18
   *     },
   *     emphasis: {
   *          label: { show: true }
   *     }
   * @param {Object} opt
   * @param {string} key
   * @param {Array.<string>} subOpts
   */


  function defaultEmphasis(opt, key, subOpts) {
    // Caution: performance sensitive.
    if (opt) {
      opt[key] = opt[key] || {};
      opt.emphasis = opt.emphasis || {};
      opt.emphasis[key] = opt.emphasis[key] || {}; // Default emphasis option from normal

      for (var i = 0, len = subOpts.length; i < len; i++) {
        var subOptName = subOpts[i];

        if (!opt.emphasis[key].hasOwnProperty(subOptName) && opt[key].hasOwnProperty(subOptName)) {
          opt.emphasis[key][subOptName] = opt[key][subOptName];
        }
      }
    }
  }

  var TEXT_STYLE_OPTIONS = ['fontStyle', 'fontWeight', 'fontSize', 'fontFamily', 'rich', 'tag', 'color', 'textBorderColor', 'textBorderWidth', 'width', 'height', 'lineHeight', 'align', 'verticalAlign', 'baseline', 'shadowColor', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY', 'textShadowColor', 'textShadowBlur', 'textShadowOffsetX', 'textShadowOffsetY', 'backgroundColor', 'borderColor', 'borderWidth', 'borderRadius', 'padding']; // modelUtil.LABEL_OPTIONS = modelUtil.TEXT_STYLE_OPTIONS.concat([
  //     'position', 'offset', 'rotate', 'origin', 'show', 'distance', 'formatter',
  //     'fontStyle', 'fontWeight', 'fontSize', 'fontFamily',
  //     // FIXME: deprecated, check and remove it.
  //     'textStyle'
  // ]);

  /**
   * The method do not ensure performance.
   * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]
   * This helper method retieves value from data.
   * @param {string|number|Date|Array|Object} dataItem
   * @return {number|string|Date|Array.<number|string|Date>}
   */

  function getDataItemValue(dataItem) {
    return isObject$3(dataItem) && !isArray$1(dataItem) && !(dataItem instanceof Date) ? dataItem.value : dataItem;
  }
  /**
   * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]
   * This helper method determine if dataItem has extra option besides value
   * @param {string|number|Date|Array|Object} dataItem
   */


  function isDataItemOption(dataItem) {
    return isObject$3(dataItem) && !(dataItem instanceof Array); // // markLine data can be array
    // && !(dataItem[0] && isObject(dataItem[0]) && !(dataItem[0] instanceof Array));
  }
  /**
   * Mapping to exists for merge.
   *
   * @public
   * @param {Array.<Object>|Array.<module:echarts/model/Component>} exists
   * @param {Object|Array.<Object>} newCptOptions
   * @return {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],
   *                          index of which is the same as exists.
   */


  function mappingToExists(exists, newCptOptions) {
    // Mapping by the order by original option (but not order of
    // new option) in merge mode. Because we should ensure
    // some specified index (like xAxisIndex) is consistent with
    // original option, which is easy to understand, espatially in
    // media query. And in most case, merge option is used to
    // update partial option but not be expected to change order.
    newCptOptions = (newCptOptions || []).slice();
    var result = util.map(exists || [], function (obj, index) {
      return {
        exist: obj
      };
    }); // Mapping by id or name if specified.

    each$2(newCptOptions, function (cptOption, index) {
      if (!isObject$3(cptOption)) {
        return;
      } // id has highest priority.


      for (var i = 0; i < result.length; i++) {
        if (!result[i].option // Consider name: two map to one.
        && cptOption.id != null && result[i].exist.id === cptOption.id + '') {
          result[i].option = cptOption;
          newCptOptions[index] = null;
          return;
        }
      }

      for (var i = 0; i < result.length; i++) {
        var exist = result[i].exist;

        if (!result[i].option // Consider name: two map to one.
        // Can not match when both ids exist but different.
        && (exist.id == null || cptOption.id == null) && cptOption.name != null && !isIdInner(cptOption) && !isIdInner(exist) && exist.name === cptOption.name + '') {
          result[i].option = cptOption;
          newCptOptions[index] = null;
          return;
        }
      }
    }); // Otherwise mapping by index.

    each$2(newCptOptions, function (cptOption, index) {
      if (!isObject$3(cptOption)) {
        return;
      }

      var i = 0;

      for (; i < result.length; i++) {
        var exist = result[i].exist;

        if (!result[i].option // Existing model that already has id should be able to
        // mapped to (because after mapping performed model may
        // be assigned with a id, whish should not affect next
        // mapping), except those has inner id.
        && !isIdInner(exist) // Caution:
        // Do not overwrite id. But name can be overwritten,
        // because axis use name as 'show label text'.
        // 'exist' always has id and name and we dont
        // need to check it.
        && cptOption.id == null) {
          result[i].option = cptOption;
          break;
        }
      }

      if (i >= result.length) {
        result.push({
          option: cptOption
        });
      }
    });
    return result;
  }
  /**
   * Make id and name for mapping result (result of mappingToExists)
   * into `keyInfo` field.
   *
   * @public
   * @param {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],
   *                          which order is the same as exists.
   * @return {Array.<Object>} The input.
   */


  function makeIdAndName(mapResult) {
    // We use this id to hash component models and view instances
    // in echarts. id can be specified by user, or auto generated.
    // The id generation rule ensures new view instance are able
    // to mapped to old instance when setOption are called in
    // no-merge mode. So we generate model id by name and plus
    // type in view id.
    // name can be duplicated among components, which is convenient
    // to specify multi components (like series) by one name.
    // Ensure that each id is distinct.
    var idMap = util.createHashMap();
    each$2(mapResult, function (item, index) {
      var existCpt = item.exist;
      existCpt && idMap.set(existCpt.id, item);
    });
    each$2(mapResult, function (item, index) {
      var opt = item.option;
      util.assert(!opt || opt.id == null || !idMap.get(opt.id) || idMap.get(opt.id) === item, 'id duplicates: ' + (opt && opt.id));
      opt && opt.id != null && idMap.set(opt.id, item);
      !item.keyInfo && (item.keyInfo = {});
    }); // Make name and id.

    each$2(mapResult, function (item, index) {
      var existCpt = item.exist;
      var opt = item.option;
      var keyInfo = item.keyInfo;

      if (!isObject$3(opt)) {
        return;
      } // name can be overwitten. Consider case: axis.name = '20km'.
      // But id generated by name will not be changed, which affect
      // only in that case: setOption with 'not merge mode' and view
      // instance will be recreated, which can be accepted.


      keyInfo.name = opt.name != null ? opt.name + '' : existCpt ? existCpt.name // Avoid diffferent series has the same name,
      // because name may be used like in color pallet.
      : DUMMY_COMPONENT_NAME_PREFIX + index;

      if (existCpt) {
        keyInfo.id = existCpt.id;
      } else if (opt.id != null) {
        keyInfo.id = opt.id + '';
      } else {
        // Consider this situatoin:
        //  optionA: [{name: 'a'}, {name: 'a'}, {..}]
        //  optionB [{..}, {name: 'a'}, {name: 'a'}]
        // Series with the same name between optionA and optionB
        // should be mapped.
        var idNum = 0;

        do {
          keyInfo.id = '\0' + keyInfo.name + '\0' + idNum++;
        } while (idMap.get(keyInfo.id));
      }

      idMap.set(keyInfo.id, item);
    });
  }

  function isNameSpecified(componentModel) {
    var name = componentModel.name; // Is specified when `indexOf` get -1 or > 0.

    return !!(name && name.indexOf(DUMMY_COMPONENT_NAME_PREFIX));
  }
  /**
   * @public
   * @param {Object} cptOption
   * @return {boolean}
   */


  function isIdInner(cptOption) {
    return isObject$3(cptOption) && cptOption.id && (cptOption.id + '').indexOf('\0_ec_\0') === 0;
  }
  /**
   * A helper for removing duplicate items between batchA and batchB,
   * and in themselves, and categorize by series.
   *
   * @param {Array.<Object>} batchA Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]
   * @param {Array.<Object>} batchB Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]
   * @return {Array.<Array.<Object>, Array.<Object>>} result: [resultBatchA, resultBatchB]
   */


  function compressBatches(batchA, batchB) {
    var mapA = {};
    var mapB = {};
    makeMap(batchA || [], mapA);
    makeMap(batchB || [], mapB, mapA);
    return [mapToArray(mapA), mapToArray(mapB)];

    function makeMap(sourceBatch, map, otherMap) {
      for (var i = 0, len = sourceBatch.length; i < len; i++) {
        var seriesId = sourceBatch[i].seriesId;
        var dataIndices = normalizeToArray(sourceBatch[i].dataIndex);
        var otherDataIndices = otherMap && otherMap[seriesId];

        for (var j = 0, lenj = dataIndices.length; j < lenj; j++) {
          var dataIndex = dataIndices[j];

          if (otherDataIndices && otherDataIndices[dataIndex]) {
            otherDataIndices[dataIndex] = null;
          } else {
            (map[seriesId] || (map[seriesId] = {}))[dataIndex] = 1;
          }
        }
      }
    }

    function mapToArray(map, isData) {
      var result = [];

      for (var i in map) {
        if (map.hasOwnProperty(i) && map[i] != null) {
          if (isData) {
            result.push(+i);
          } else {
            var dataIndices = mapToArray(map[i], true);
            dataIndices.length && result.push({
              seriesId: i,
              dataIndex: dataIndices
            });
          }
        }
      }

      return result;
    }
  }
  /**
   * @param {module:echarts/data/List} data
   * @param {Object} payload Contains dataIndex (means rawIndex) / dataIndexInside / name
   *                         each of which can be Array or primary type.
   * @return {number|Array.<number>} dataIndex If not found, return undefined/null.
   */


  function queryDataIndex(data, payload) {
    if (payload.dataIndexInside != null) {
      return payload.dataIndexInside;
    } else if (payload.dataIndex != null) {
      return util.isArray(payload.dataIndex) ? util.map(payload.dataIndex, function (value) {
        return data.indexOfRawIndex(value);
      }) : data.indexOfRawIndex(payload.dataIndex);
    } else if (payload.name != null) {
      return util.isArray(payload.name) ? util.map(payload.name, function (value) {
        return data.indexOfName(value);
      }) : data.indexOfName(payload.name);
    }
  }
  /**
   * Enable property storage to any host object.
   * Notice: Serialization is not supported.
   *
   * For example:
   * var inner = zrUitl.makeInner();
   *
   * function some1(hostObj) {
   *      inner(hostObj).someProperty = 1212;
   *      ...
   * }
   * function some2() {
   *      var fields = inner(this);
   *      fields.someProperty1 = 1212;
   *      fields.someProperty2 = 'xx';
   *      ...
   * }
   *
   * @return {Function}
   */


  function makeInner() {
    // Consider different scope by es module import.
    var key = '__\0ec_inner_' + innerUniqueIndex++ + '_' + Math.random().toFixed(5);
    return function (hostObj) {
      return hostObj[key] || (hostObj[key] = {});
    };
  }

  var innerUniqueIndex = 0;
  /**
   * @param {module:echarts/model/Global} ecModel
   * @param {string|Object} finder
   *        If string, e.g., 'geo', means {geoIndex: 0}.
   *        If Object, could contain some of these properties below:
   *        {
   *            seriesIndex, seriesId, seriesName,
   *            geoIndex, geoId, geoName,
   *            bmapIndex, bmapId, bmapName,
   *            xAxisIndex, xAxisId, xAxisName,
   *            yAxisIndex, yAxisId, yAxisName,
   *            gridIndex, gridId, gridName,
   *            ... (can be extended)
   *        }
   *        Each properties can be number|string|Array.<number>|Array.<string>
   *        For example, a finder could be
   *        {
   *            seriesIndex: 3,
   *            geoId: ['aa', 'cc'],
   *            gridName: ['xx', 'rr']
   *        }
   *        xxxIndex can be set as 'all' (means all xxx) or 'none' (means not specify)
   *        If nothing or null/undefined specified, return nothing.
   * @param {Object} [opt]
   * @param {string} [opt.defaultMainType]
   * @param {Array.<string>} [opt.includeMainTypes]
   * @return {Object} result like:
   *        {
   *            seriesModels: [seriesModel1, seriesModel2],
   *            seriesModel: seriesModel1, // The first model
   *            geoModels: [geoModel1, geoModel2],
   *            geoModel: geoModel1, // The first model
   *            ...
   *        }
   */

  function parseFinder(ecModel, finder, opt) {
    if (util.isString(finder)) {
      var obj = {};
      obj[finder + 'Index'] = 0;
      finder = obj;
    }

    var defaultMainType = opt && opt.defaultMainType;

    if (defaultMainType && !has(finder, defaultMainType + 'Index') && !has(finder, defaultMainType + 'Id') && !has(finder, defaultMainType + 'Name')) {
      finder[defaultMainType + 'Index'] = 0;
    }

    var result = {};
    each$2(finder, function (value, key) {
      var value = finder[key]; // Exclude 'dataIndex' and other illgal keys.

      if (key === 'dataIndex' || key === 'dataIndexInside') {
        result[key] = value;
        return;
      }

      var parsedKey = key.match(/^(\w+)(Index|Id|Name)$/) || [];
      var mainType = parsedKey[1];
      var queryType = (parsedKey[2] || '').toLowerCase();

      if (!mainType || !queryType || value == null || queryType === 'index' && value === 'none' || opt && opt.includeMainTypes && util.indexOf(opt.includeMainTypes, mainType) < 0) {
        return;
      }

      var queryParam = {
        mainType: mainType
      };

      if (queryType !== 'index' || value !== 'all') {
        queryParam[queryType] = value;
      }

      var models = ecModel.queryComponents(queryParam);
      result[mainType + 'Models'] = models;
      result[mainType + 'Model'] = models[0];
    });
    return result;
  }

  function has(obj, prop) {
    return obj && obj.hasOwnProperty(prop);
  }

  function setAttribute(dom, key, value) {
    dom.setAttribute ? dom.setAttribute(key, value) : dom[key] = value;
  }

  function getAttribute(dom, key) {
    return dom.getAttribute ? dom.getAttribute(key) : dom[key];
  }

  function getTooltipRenderMode(renderModeOption) {
    if (renderModeOption === 'auto') {
      // Using html when `document` exists, use richText otherwise
      return env_1.domSupported ? 'html' : 'richText';
    } else {
      return renderModeOption || 'html';
    }
  }
  /**
   * Group a list by key.
   *
   * @param {Array} array
   * @param {Function} getKey
   *        param {*} Array item
   *        return {string} key
   * @return {Object} Result
   *        {Array}: keys,
   *        {module:zrender/core/util/HashMap} buckets: {key -> Array}
   */


  function groupData(array, getKey) {
    var buckets = util.createHashMap();
    var keys = [];
    util.each(array, function (item) {
      var key = getKey(item);
      (buckets.get(key) || (keys.push(key), buckets.set(key, []))).push(item);
    });
    return {
      keys: keys,
      buckets: buckets
    };
  }

  var normalizeToArray_1 = normalizeToArray;
  var defaultEmphasis_1 = defaultEmphasis;
  var TEXT_STYLE_OPTIONS_1 = TEXT_STYLE_OPTIONS;
  var getDataItemValue_1 = getDataItemValue;
  var isDataItemOption_1 = isDataItemOption;
  var mappingToExists_1 = mappingToExists;
  var makeIdAndName_1 = makeIdAndName;
  var isNameSpecified_1 = isNameSpecified;
  var isIdInner_1 = isIdInner;
  var compressBatches_1 = compressBatches;
  var queryDataIndex_1 = queryDataIndex;
  var makeInner_1 = makeInner;
  var parseFinder_1 = parseFinder;
  var setAttribute_1 = setAttribute;
  var getAttribute_1 = getAttribute;
  var getTooltipRenderMode_1 = getTooltipRenderMode;
  var groupData_1 = groupData;

  var model = {
  	normalizeToArray: normalizeToArray_1,
  	defaultEmphasis: defaultEmphasis_1,
  	TEXT_STYLE_OPTIONS: TEXT_STYLE_OPTIONS_1,
  	getDataItemValue: getDataItemValue_1,
  	isDataItemOption: isDataItemOption_1,
  	mappingToExists: mappingToExists_1,
  	makeIdAndName: makeIdAndName_1,
  	isNameSpecified: isNameSpecified_1,
  	isIdInner: isIdInner_1,
  	compressBatches: compressBatches_1,
  	queryDataIndex: queryDataIndex_1,
  	makeInner: makeInner_1,
  	parseFinder: parseFinder_1,
  	setAttribute: setAttribute_1,
  	getAttribute: getAttribute_1,
  	getTooltipRenderMode: getTooltipRenderMode_1,
  	groupData: groupData_1
  };

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var TYPE_DELIMITER = '.';
  var IS_CONTAINER = '___EC__COMPONENT__CONTAINER___';
  /**
   * Notice, parseClassType('') should returns {main: '', sub: ''}
   * @public
   */

  function parseClassType(componentType) {
    var ret = {
      main: '',
      sub: ''
    };

    if (componentType) {
      componentType = componentType.split(TYPE_DELIMITER);
      ret.main = componentType[0] || '';
      ret.sub = componentType[1] || '';
    }

    return ret;
  }
  /**
   * @public
   */


  function checkClassType(componentType) {
    util.assert(/^[a-zA-Z0-9_]+([.][a-zA-Z0-9_]+)?$/.test(componentType), 'componentType "' + componentType + '" illegal');
  }
  /**
   * @public
   */


  function enableClassExtend(RootClass, mandatoryMethods) {
    RootClass.$constructor = RootClass;

    RootClass.extend = function (proto) {
      var superClass = this;

      var ExtendedClass = function () {
        if (!proto.$constructor) {
          superClass.apply(this, arguments);
        } else {
          proto.$constructor.apply(this, arguments);
        }
      };

      util.extend(ExtendedClass.prototype, proto);
      ExtendedClass.extend = this.extend;
      ExtendedClass.superCall = superCall;
      ExtendedClass.superApply = superApply;
      util.inherits(ExtendedClass, this);
      ExtendedClass.superClass = superClass;
      return ExtendedClass;
    };
  }

  var classBase = 0;
  /**
   * Can not use instanceof, consider different scope by
   * cross domain or es module import in ec extensions.
   * Mount a method "isInstance()" to Clz.
   */

  function enableClassCheck(Clz) {
    var classAttr = ['__\0is_clz', classBase++, Math.random().toFixed(3)].join('_');
    Clz.prototype[classAttr] = true;

    Clz.isInstance = function (obj) {
      return !!(obj && obj[classAttr]);
    };
  } // superCall should have class info, which can not be fetch from 'this'.
  // Consider this case:
  // class A has method f,
  // class B inherits class A, overrides method f, f call superApply('f'),
  // class C inherits class B, do not overrides method f,
  // then when method of class C is called, dead loop occured.


  function superCall(context, methodName) {
    var args = util.slice(arguments, 2);
    return this.superClass.prototype[methodName].apply(context, args);
  }

  function superApply(context, methodName, args) {
    return this.superClass.prototype[methodName].apply(context, args);
  }
  /**
   * @param {Object} entity
   * @param {Object} options
   * @param {boolean} [options.registerWhenExtend]
   * @public
   */


  function enableClassManagement(entity, options) {
    options = options || {};
    /**
     * Component model classes
     * key: componentType,
     * value:
     *     componentClass, when componentType is 'xxx'
     *     or Object.<subKey, componentClass>, when componentType is 'xxx.yy'
     * @type {Object}
     */

    var storage = {};

    entity.registerClass = function (Clazz, componentType) {
      if (componentType) {
        checkClassType(componentType);
        componentType = parseClassType(componentType);

        if (!componentType.sub) {
          storage[componentType.main] = Clazz;
        } else if (componentType.sub !== IS_CONTAINER) {
          var container = makeContainer(componentType);
          container[componentType.sub] = Clazz;
        }
      }

      return Clazz;
    };

    entity.getClass = function (componentMainType, subType, throwWhenNotFound) {
      var Clazz = storage[componentMainType];

      if (Clazz && Clazz[IS_CONTAINER]) {
        Clazz = subType ? Clazz[subType] : null;
      }

      if (throwWhenNotFound && !Clazz) {
        throw new Error(!subType ? componentMainType + '.' + 'type should be specified.' : 'Component ' + componentMainType + '.' + (subType || '') + ' not exists. Load it first.');
      }

      return Clazz;
    };

    entity.getClassesByMainType = function (componentType) {
      componentType = parseClassType(componentType);
      var result = [];
      var obj = storage[componentType.main];

      if (obj && obj[IS_CONTAINER]) {
        util.each(obj, function (o, type) {
          type !== IS_CONTAINER && result.push(o);
        });
      } else {
        result.push(obj);
      }

      return result;
    };

    entity.hasClass = function (componentType) {
      // Just consider componentType.main.
      componentType = parseClassType(componentType);
      return !!storage[componentType.main];
    };
    /**
     * @return {Array.<string>} Like ['aa', 'bb'], but can not be ['aa.xx']
     */


    entity.getAllClassMainTypes = function () {
      var types = [];
      util.each(storage, function (obj, type) {
        types.push(type);
      });
      return types;
    };
    /**
     * If a main type is container and has sub types
     * @param  {string}  mainType
     * @return {boolean}
     */


    entity.hasSubTypes = function (componentType) {
      componentType = parseClassType(componentType);
      var obj = storage[componentType.main];
      return obj && obj[IS_CONTAINER];
    };

    entity.parseClassType = parseClassType;

    function makeContainer(componentType) {
      var container = storage[componentType.main];

      if (!container || !container[IS_CONTAINER]) {
        container = storage[componentType.main] = {};
        container[IS_CONTAINER] = true;
      }

      return container;
    }

    if (options.registerWhenExtend) {
      var originalExtend = entity.extend;

      if (originalExtend) {
        entity.extend = function (proto) {
          var ExtendedClass = originalExtend.call(this, proto);
          return entity.registerClass(ExtendedClass, proto.type);
        };
      }
    }

    return entity;
  }
  /**
   * @param {string|Array.<string>} properties
   */


  function setReadOnly(obj, properties) {// FIXME It seems broken in IE8 simulation of IE11
    // if (!zrUtil.isArray(properties)) {
    //     properties = properties != null ? [properties] : [];
    // }
    // zrUtil.each(properties, function (prop) {
    //     var value = obj[prop];
    //     Object.defineProperty
    //         && Object.defineProperty(obj, prop, {
    //             value: value, writable: false
    //         });
    //     zrUtil.isArray(obj[prop])
    //         && Object.freeze
    //         && Object.freeze(obj[prop]);
    // });
  }

  var parseClassType_1 = parseClassType;
  var enableClassExtend_1 = enableClassExtend;
  var enableClassCheck_1 = enableClassCheck;
  var enableClassManagement_1 = enableClassManagement;
  var setReadOnly_1 = setReadOnly;

  var clazz = {
  	parseClassType: parseClassType_1,
  	enableClassExtend: enableClassExtend_1,
  	enableClassCheck: enableClassCheck_1,
  	enableClassManagement: enableClassManagement_1,
  	setReadOnly: setReadOnly_1
  };

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  // TODO Parse shadow style
  // TODO Only shallow path support
  function _default$s(properties) {
    // Normalize
    for (var i = 0; i < properties.length; i++) {
      if (!properties[i][1]) {
        properties[i][1] = properties[i][0];
      }
    }

    return function (model, excludes, includes) {
      var style = {};

      for (var i = 0; i < properties.length; i++) {
        var propName = properties[i][1];

        if (excludes && util.indexOf(excludes, propName) >= 0 || includes && util.indexOf(includes, propName) < 0) {
          continue;
        }

        var val = model.getShallow(propName);

        if (val != null) {
          style[properties[i][0]] = val;
        }
      }

      return style;
    };
  }

  var makeStyleMapper = _default$s;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var getLineStyle = makeStyleMapper([['lineWidth', 'width'], ['stroke', 'color'], ['opacity'], ['shadowBlur'], ['shadowOffsetX'], ['shadowOffsetY'], ['shadowColor']]);
  var _default$t = {
    getLineStyle: function (excludes) {
      var style = getLineStyle(this, excludes); // Always set lineDash whether dashed, otherwise we can not
      // erase the previous style when assigning to el.style.

      style.lineDash = this.getLineDash(style.lineWidth);
      return style;
    },
    getLineDash: function (lineWidth) {
      if (lineWidth == null) {
        lineWidth = 1;
      }

      var lineType = this.get('type');
      var dotSize = Math.max(lineWidth, 2);
      var dashSize = lineWidth * 4;
      return lineType === 'solid' || lineType == null ? // Use `false` but not `null` for the solid line here, because `null` might be
      // ignored when assigning to `el.style`. e.g., when setting `lineStyle.type` as
      // `'dashed'` and `emphasis.lineStyle.type` as `'solid'` in graph series, the
      // `lineDash` gotten form the latter one is not able to erase that from the former
      // one if using `null` here according to the emhpsis strategy in `util/graphic.js`.
      false : lineType === 'dashed' ? [dashSize, dashSize] : [dotSize, dotSize];
    }
  };
  var lineStyle = _default$t;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var getAreaStyle = makeStyleMapper([['fill', 'color'], ['shadowBlur'], ['shadowOffsetX'], ['shadowOffsetY'], ['opacity'], ['shadowColor']]);
  var _default$u = {
    getAreaStyle: function (excludes, includes) {
      return getAreaStyle(this, excludes, includes);
    }
  };
  var areaStyle = _default$u;

  var v2Create = vector.create;
  var v2DistSquare = vector.distSquare;

  /**
   * 曲线辅助模块
   * @module zrender/core/curve
   * @author pissang(https://www.github.com/pissang)
   */
  var mathPow = Math.pow;
  var mathSqrt = Math.sqrt;
  var EPSILON$1 = 1e-8;
  var EPSILON_NUMERIC = 1e-4;
  var THREE_SQRT = mathSqrt(3);
  var ONE_THIRD = 1 / 3; // 临时变量

  var _v0 = v2Create();

  var _v1 = v2Create();

  var _v2 = v2Create();

  function isAroundZero(val) {
    return val > -EPSILON$1 && val < EPSILON$1;
  }

  function isNotAroundZero$1(val) {
    return val > EPSILON$1 || val < -EPSILON$1;
  }
  /**
   * 计算三次贝塞尔值
   * @memberOf module:zrender/core/curve
   * @param  {number} p0
   * @param  {number} p1
   * @param  {number} p2
   * @param  {number} p3
   * @param  {number} t
   * @return {number}
   */


  function cubicAt(p0, p1, p2, p3, t) {
    var onet = 1 - t;
    return onet * onet * (onet * p0 + 3 * t * p1) + t * t * (t * p3 + 3 * onet * p2);
  }
  /**
   * 计算三次贝塞尔导数值
   * @memberOf module:zrender/core/curve
   * @param  {number} p0
   * @param  {number} p1
   * @param  {number} p2
   * @param  {number} p3
   * @param  {number} t
   * @return {number}
   */


  function cubicDerivativeAt(p0, p1, p2, p3, t) {
    var onet = 1 - t;
    return 3 * (((p1 - p0) * onet + 2 * (p2 - p1) * t) * onet + (p3 - p2) * t * t);
  }
  /**
   * 计算三次贝塞尔方程根，使用盛金公式
   * @memberOf module:zrender/core/curve
   * @param  {number} p0
   * @param  {number} p1
   * @param  {number} p2
   * @param  {number} p3
   * @param  {number} val
   * @param  {Array.<number>} roots
   * @return {number} 有效根数目
   */


  function cubicRootAt(p0, p1, p2, p3, val, roots) {
    // Evaluate roots of cubic functions
    var a = p3 + 3 * (p1 - p2) - p0;
    var b = 3 * (p2 - p1 * 2 + p0);
    var c = 3 * (p1 - p0);
    var d = p0 - val;
    var A = b * b - 3 * a * c;
    var B = b * c - 9 * a * d;
    var C = c * c - 3 * b * d;
    var n = 0;

    if (isAroundZero(A) && isAroundZero(B)) {
      if (isAroundZero(b)) {
        roots[0] = 0;
      } else {
        var t1 = -c / b; //t1, t2, t3, b is not zero

        if (t1 >= 0 && t1 <= 1) {
          roots[n++] = t1;
        }
      }
    } else {
      var disc = B * B - 4 * A * C;

      if (isAroundZero(disc)) {
        var K = B / A;
        var t1 = -b / a + K; // t1, a is not zero

        var t2 = -K / 2; // t2, t3

        if (t1 >= 0 && t1 <= 1) {
          roots[n++] = t1;
        }

        if (t2 >= 0 && t2 <= 1) {
          roots[n++] = t2;
        }
      } else if (disc > 0) {
        var discSqrt = mathSqrt(disc);
        var Y1 = A * b + 1.5 * a * (-B + discSqrt);
        var Y2 = A * b + 1.5 * a * (-B - discSqrt);

        if (Y1 < 0) {
          Y1 = -mathPow(-Y1, ONE_THIRD);
        } else {
          Y1 = mathPow(Y1, ONE_THIRD);
        }

        if (Y2 < 0) {
          Y2 = -mathPow(-Y2, ONE_THIRD);
        } else {
          Y2 = mathPow(Y2, ONE_THIRD);
        }

        var t1 = (-b - (Y1 + Y2)) / (3 * a);

        if (t1 >= 0 && t1 <= 1) {
          roots[n++] = t1;
        }
      } else {
        var T = (2 * A * b - 3 * a * B) / (2 * mathSqrt(A * A * A));
        var theta = Math.acos(T) / 3;
        var ASqrt = mathSqrt(A);
        var tmp = Math.cos(theta);
        var t1 = (-b - 2 * ASqrt * tmp) / (3 * a);
        var t2 = (-b + ASqrt * (tmp + THREE_SQRT * Math.sin(theta))) / (3 * a);
        var t3 = (-b + ASqrt * (tmp - THREE_SQRT * Math.sin(theta))) / (3 * a);

        if (t1 >= 0 && t1 <= 1) {
          roots[n++] = t1;
        }

        if (t2 >= 0 && t2 <= 1) {
          roots[n++] = t2;
        }

        if (t3 >= 0 && t3 <= 1) {
          roots[n++] = t3;
        }
      }
    }

    return n;
  }
  /**
   * 计算三次贝塞尔方程极限值的位置
   * @memberOf module:zrender/core/curve
   * @param  {number} p0
   * @param  {number} p1
   * @param  {number} p2
   * @param  {number} p3
   * @param  {Array.<number>} extrema
   * @return {number} 有效数目
   */


  function cubicExtrema(p0, p1, p2, p3, extrema) {
    var b = 6 * p2 - 12 * p1 + 6 * p0;
    var a = 9 * p1 + 3 * p3 - 3 * p0 - 9 * p2;
    var c = 3 * p1 - 3 * p0;
    var n = 0;

    if (isAroundZero(a)) {
      if (isNotAroundZero$1(b)) {
        var t1 = -c / b;

        if (t1 >= 0 && t1 <= 1) {
          extrema[n++] = t1;
        }
      }
    } else {
      var disc = b * b - 4 * a * c;

      if (isAroundZero(disc)) {
        extrema[0] = -b / (2 * a);
      } else if (disc > 0) {
        var discSqrt = mathSqrt(disc);
        var t1 = (-b + discSqrt) / (2 * a);
        var t2 = (-b - discSqrt) / (2 * a);

        if (t1 >= 0 && t1 <= 1) {
          extrema[n++] = t1;
        }

        if (t2 >= 0 && t2 <= 1) {
          extrema[n++] = t2;
        }
      }
    }

    return n;
  }
  /**
   * 细分三次贝塞尔曲线
   * @memberOf module:zrender/core/curve
   * @param  {number} p0
   * @param  {number} p1
   * @param  {number} p2
   * @param  {number} p3
   * @param  {number} t
   * @param  {Array.<number>} out
   */


  function cubicSubdivide(p0, p1, p2, p3, t, out) {
    var p01 = (p1 - p0) * t + p0;
    var p12 = (p2 - p1) * t + p1;
    var p23 = (p3 - p2) * t + p2;
    var p012 = (p12 - p01) * t + p01;
    var p123 = (p23 - p12) * t + p12;
    var p0123 = (p123 - p012) * t + p012; // Seg0

    out[0] = p0;
    out[1] = p01;
    out[2] = p012;
    out[3] = p0123; // Seg1

    out[4] = p0123;
    out[5] = p123;
    out[6] = p23;
    out[7] = p3;
  }
  /**
   * 投射点到三次贝塞尔曲线上，返回投射距离。
   * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。
   * @param {number} x0
   * @param {number} y0
   * @param {number} x1
   * @param {number} y1
   * @param {number} x2
   * @param {number} y2
   * @param {number} x3
   * @param {number} y3
   * @param {number} x
   * @param {number} y
   * @param {Array.<number>} [out] 投射点
   * @return {number}
   */


  function cubicProjectPoint(x0, y0, x1, y1, x2, y2, x3, y3, x, y, out) {
    // http://pomax.github.io/bezierinfo/#projections
    var t;
    var interval = 0.005;
    var d = Infinity;
    var prev;
    var next;
    var d1;
    var d2;
    _v0[0] = x;
    _v0[1] = y; // 先粗略估计一下可能的最小距离的 t 值
    // PENDING

    for (var _t = 0; _t < 1; _t += 0.05) {
      _v1[0] = cubicAt(x0, x1, x2, x3, _t);
      _v1[1] = cubicAt(y0, y1, y2, y3, _t);
      d1 = v2DistSquare(_v0, _v1);

      if (d1 < d) {
        t = _t;
        d = d1;
      }
    }

    d = Infinity; // At most 32 iteration

    for (var i = 0; i < 32; i++) {
      if (interval < EPSILON_NUMERIC) {
        break;
      }

      prev = t - interval;
      next = t + interval; // t - interval

      _v1[0] = cubicAt(x0, x1, x2, x3, prev);
      _v1[1] = cubicAt(y0, y1, y2, y3, prev);
      d1 = v2DistSquare(_v1, _v0);

      if (prev >= 0 && d1 < d) {
        t = prev;
        d = d1;
      } else {
        // t + interval
        _v2[0] = cubicAt(x0, x1, x2, x3, next);
        _v2[1] = cubicAt(y0, y1, y2, y3, next);
        d2 = v2DistSquare(_v2, _v0);

        if (next <= 1 && d2 < d) {
          t = next;
          d = d2;
        } else {
          interval *= 0.5;
        }
      }
    } // t


    if (out) {
      out[0] = cubicAt(x0, x1, x2, x3, t);
      out[1] = cubicAt(y0, y1, y2, y3, t);
    } // console.log(interval, i);


    return mathSqrt(d);
  }
  /**
   * 计算二次方贝塞尔值
   * @param  {number} p0
   * @param  {number} p1
   * @param  {number} p2
   * @param  {number} t
   * @return {number}
   */


  function quadraticAt(p0, p1, p2, t) {
    var onet = 1 - t;
    return onet * (onet * p0 + 2 * t * p1) + t * t * p2;
  }
  /**
   * 计算二次方贝塞尔导数值
   * @param  {number} p0
   * @param  {number} p1
   * @param  {number} p2
   * @param  {number} t
   * @return {number}
   */


  function quadraticDerivativeAt(p0, p1, p2, t) {
    return 2 * ((1 - t) * (p1 - p0) + t * (p2 - p1));
  }
  /**
   * 计算二次方贝塞尔方程根
   * @param  {number} p0
   * @param  {number} p1
   * @param  {number} p2
   * @param  {number} t
   * @param  {Array.<number>} roots
   * @return {number} 有效根数目
   */


  function quadraticRootAt(p0, p1, p2, val, roots) {
    var a = p0 - 2 * p1 + p2;
    var b = 2 * (p1 - p0);
    var c = p0 - val;
    var n = 0;

    if (isAroundZero(a)) {
      if (isNotAroundZero$1(b)) {
        var t1 = -c / b;

        if (t1 >= 0 && t1 <= 1) {
          roots[n++] = t1;
        }
      }
    } else {
      var disc = b * b - 4 * a * c;

      if (isAroundZero(disc)) {
        var t1 = -b / (2 * a);

        if (t1 >= 0 && t1 <= 1) {
          roots[n++] = t1;
        }
      } else if (disc > 0) {
        var discSqrt = mathSqrt(disc);
        var t1 = (-b + discSqrt) / (2 * a);
        var t2 = (-b - discSqrt) / (2 * a);

        if (t1 >= 0 && t1 <= 1) {
          roots[n++] = t1;
        }

        if (t2 >= 0 && t2 <= 1) {
          roots[n++] = t2;
        }
      }
    }

    return n;
  }
  /**
   * 计算二次贝塞尔方程极限值
   * @memberOf module:zrender/core/curve
   * @param  {number} p0
   * @param  {number} p1
   * @param  {number} p2
   * @return {number}
   */


  function quadraticExtremum(p0, p1, p2) {
    var divider = p0 + p2 - 2 * p1;

    if (divider === 0) {
      // p1 is center of p0 and p2
      return 0.5;
    } else {
      return (p0 - p1) / divider;
    }
  }
  /**
   * 细分二次贝塞尔曲线
   * @memberOf module:zrender/core/curve
   * @param  {number} p0
   * @param  {number} p1
   * @param  {number} p2
   * @param  {number} t
   * @param  {Array.<number>} out
   */


  function quadraticSubdivide(p0, p1, p2, t, out) {
    var p01 = (p1 - p0) * t + p0;
    var p12 = (p2 - p1) * t + p1;
    var p012 = (p12 - p01) * t + p01; // Seg0

    out[0] = p0;
    out[1] = p01;
    out[2] = p012; // Seg1

    out[3] = p012;
    out[4] = p12;
    out[5] = p2;
  }
  /**
   * 投射点到二次贝塞尔曲线上，返回投射距离。
   * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。
   * @param {number} x0
   * @param {number} y0
   * @param {number} x1
   * @param {number} y1
   * @param {number} x2
   * @param {number} y2
   * @param {number} x
   * @param {number} y
   * @param {Array.<number>} out 投射点
   * @return {number}
   */


  function quadraticProjectPoint(x0, y0, x1, y1, x2, y2, x, y, out) {
    // http://pomax.github.io/bezierinfo/#projections
    var t;
    var interval = 0.005;
    var d = Infinity;
    _v0[0] = x;
    _v0[1] = y; // 先粗略估计一下可能的最小距离的 t 值
    // PENDING

    for (var _t = 0; _t < 1; _t += 0.05) {
      _v1[0] = quadraticAt(x0, x1, x2, _t);
      _v1[1] = quadraticAt(y0, y1, y2, _t);
      var d1 = v2DistSquare(_v0, _v1);

      if (d1 < d) {
        t = _t;
        d = d1;
      }
    }

    d = Infinity; // At most 32 iteration

    for (var i = 0; i < 32; i++) {
      if (interval < EPSILON_NUMERIC) {
        break;
      }

      var prev = t - interval;
      var next = t + interval; // t - interval

      _v1[0] = quadraticAt(x0, x1, x2, prev);
      _v1[1] = quadraticAt(y0, y1, y2, prev);
      var d1 = v2DistSquare(_v1, _v0);

      if (prev >= 0 && d1 < d) {
        t = prev;
        d = d1;
      } else {
        // t + interval
        _v2[0] = quadraticAt(x0, x1, x2, next);
        _v2[1] = quadraticAt(y0, y1, y2, next);
        var d2 = v2DistSquare(_v2, _v0);

        if (next <= 1 && d2 < d) {
          t = next;
          d = d2;
        } else {
          interval *= 0.5;
        }
      }
    } // t


    if (out) {
      out[0] = quadraticAt(x0, x1, x2, t);
      out[1] = quadraticAt(y0, y1, y2, t);
    } // console.log(interval, i);


    return mathSqrt(d);
  }

  var cubicAt_1 = cubicAt;
  var cubicDerivativeAt_1 = cubicDerivativeAt;
  var cubicRootAt_1 = cubicRootAt;
  var cubicExtrema_1 = cubicExtrema;
  var cubicSubdivide_1 = cubicSubdivide;
  var cubicProjectPoint_1 = cubicProjectPoint;
  var quadraticAt_1 = quadraticAt;
  var quadraticDerivativeAt_1 = quadraticDerivativeAt;
  var quadraticRootAt_1 = quadraticRootAt;
  var quadraticExtremum_1 = quadraticExtremum;
  var quadraticSubdivide_1 = quadraticSubdivide;
  var quadraticProjectPoint_1 = quadraticProjectPoint;

  var curve = {
  	cubicAt: cubicAt_1,
  	cubicDerivativeAt: cubicDerivativeAt_1,
  	cubicRootAt: cubicRootAt_1,
  	cubicExtrema: cubicExtrema_1,
  	cubicSubdivide: cubicSubdivide_1,
  	cubicProjectPoint: cubicProjectPoint_1,
  	quadraticAt: quadraticAt_1,
  	quadraticDerivativeAt: quadraticDerivativeAt_1,
  	quadraticRootAt: quadraticRootAt_1,
  	quadraticExtremum: quadraticExtremum_1,
  	quadraticSubdivide: quadraticSubdivide_1,
  	quadraticProjectPoint: quadraticProjectPoint_1
  };

  /**
   * @author Yi Shen(https://github.com/pissang)
   */
  var mathMin$1 = Math.min;
  var mathMax$1 = Math.max;
  var mathSin = Math.sin;
  var mathCos = Math.cos;
  var PI2 = Math.PI * 2;
  var start = vector.create();
  var end = vector.create();
  var extremity = vector.create();
  /**
   * 从顶点数组中计算出最小包围盒，写入`min`和`max`中
   * @module zrender/core/bbox
   * @param {Array<Object>} points 顶点数组
   * @param {number} min
   * @param {number} max
   */

  function fromPoints(points, min, max) {
    if (points.length === 0) {
      return;
    }

    var p = points[0];
    var left = p[0];
    var right = p[0];
    var top = p[1];
    var bottom = p[1];
    var i;

    for (i = 1; i < points.length; i++) {
      p = points[i];
      left = mathMin$1(left, p[0]);
      right = mathMax$1(right, p[0]);
      top = mathMin$1(top, p[1]);
      bottom = mathMax$1(bottom, p[1]);
    }

    min[0] = left;
    min[1] = top;
    max[0] = right;
    max[1] = bottom;
  }
  /**
   * @memberOf module:zrender/core/bbox
   * @param {number} x0
   * @param {number} y0
   * @param {number} x1
   * @param {number} y1
   * @param {Array.<number>} min
   * @param {Array.<number>} max
   */


  function fromLine(x0, y0, x1, y1, min, max) {
    min[0] = mathMin$1(x0, x1);
    min[1] = mathMin$1(y0, y1);
    max[0] = mathMax$1(x0, x1);
    max[1] = mathMax$1(y0, y1);
  }

  var xDim = [];
  var yDim = [];
  /**
   * 从三阶贝塞尔曲线(p0, p1, p2, p3)中计算出最小包围盒，写入`min`和`max`中
   * @memberOf module:zrender/core/bbox
   * @param {number} x0
   * @param {number} y0
   * @param {number} x1
   * @param {number} y1
   * @param {number} x2
   * @param {number} y2
   * @param {number} x3
   * @param {number} y3
   * @param {Array.<number>} min
   * @param {Array.<number>} max
   */

  function fromCubic(x0, y0, x1, y1, x2, y2, x3, y3, min, max) {
    var cubicExtrema = curve.cubicExtrema;
    var cubicAt = curve.cubicAt;
    var i;
    var n = cubicExtrema(x0, x1, x2, x3, xDim);
    min[0] = Infinity;
    min[1] = Infinity;
    max[0] = -Infinity;
    max[1] = -Infinity;

    for (i = 0; i < n; i++) {
      var x = cubicAt(x0, x1, x2, x3, xDim[i]);
      min[0] = mathMin$1(x, min[0]);
      max[0] = mathMax$1(x, max[0]);
    }

    n = cubicExtrema(y0, y1, y2, y3, yDim);

    for (i = 0; i < n; i++) {
      var y = cubicAt(y0, y1, y2, y3, yDim[i]);
      min[1] = mathMin$1(y, min[1]);
      max[1] = mathMax$1(y, max[1]);
    }

    min[0] = mathMin$1(x0, min[0]);
    max[0] = mathMax$1(x0, max[0]);
    min[0] = mathMin$1(x3, min[0]);
    max[0] = mathMax$1(x3, max[0]);
    min[1] = mathMin$1(y0, min[1]);
    max[1] = mathMax$1(y0, max[1]);
    min[1] = mathMin$1(y3, min[1]);
    max[1] = mathMax$1(y3, max[1]);
  }
  /**
   * 从二阶贝塞尔曲线(p0, p1, p2)中计算出最小包围盒，写入`min`和`max`中
   * @memberOf module:zrender/core/bbox
   * @param {number} x0
   * @param {number} y0
   * @param {number} x1
   * @param {number} y1
   * @param {number} x2
   * @param {number} y2
   * @param {Array.<number>} min
   * @param {Array.<number>} max
   */


  function fromQuadratic(x0, y0, x1, y1, x2, y2, min, max) {
    var quadraticExtremum = curve.quadraticExtremum;
    var quadraticAt = curve.quadraticAt; // Find extremities, where derivative in x dim or y dim is zero

    var tx = mathMax$1(mathMin$1(quadraticExtremum(x0, x1, x2), 1), 0);
    var ty = mathMax$1(mathMin$1(quadraticExtremum(y0, y1, y2), 1), 0);
    var x = quadraticAt(x0, x1, x2, tx);
    var y = quadraticAt(y0, y1, y2, ty);
    min[0] = mathMin$1(x0, x2, x);
    min[1] = mathMin$1(y0, y2, y);
    max[0] = mathMax$1(x0, x2, x);
    max[1] = mathMax$1(y0, y2, y);
  }
  /**
   * 从圆弧中计算出最小包围盒，写入`min`和`max`中
   * @method
   * @memberOf module:zrender/core/bbox
   * @param {number} x
   * @param {number} y
   * @param {number} rx
   * @param {number} ry
   * @param {number} startAngle
   * @param {number} endAngle
   * @param {number} anticlockwise
   * @param {Array.<number>} min
   * @param {Array.<number>} max
   */


  function fromArc(x, y, rx, ry, startAngle, endAngle, anticlockwise, min, max) {
    var vec2Min = vector.min;
    var vec2Max = vector.max;
    var diff = Math.abs(startAngle - endAngle);

    if (diff % PI2 < 1e-4 && diff > 1e-4) {
      // Is a circle
      min[0] = x - rx;
      min[1] = y - ry;
      max[0] = x + rx;
      max[1] = y + ry;
      return;
    }

    start[0] = mathCos(startAngle) * rx + x;
    start[1] = mathSin(startAngle) * ry + y;
    end[0] = mathCos(endAngle) * rx + x;
    end[1] = mathSin(endAngle) * ry + y;
    vec2Min(min, start, end);
    vec2Max(max, start, end); // Thresh to [0, Math.PI * 2]

    startAngle = startAngle % PI2;

    if (startAngle < 0) {
      startAngle = startAngle + PI2;
    }

    endAngle = endAngle % PI2;

    if (endAngle < 0) {
      endAngle = endAngle + PI2;
    }

    if (startAngle > endAngle && !anticlockwise) {
      endAngle += PI2;
    } else if (startAngle < endAngle && anticlockwise) {
      startAngle += PI2;
    }

    if (anticlockwise) {
      var tmp = endAngle;
      endAngle = startAngle;
      startAngle = tmp;
    } // var number = 0;
    // var step = (anticlockwise ? -Math.PI : Math.PI) / 2;


    for (var angle = 0; angle < endAngle; angle += Math.PI / 2) {
      if (angle > startAngle) {
        extremity[0] = mathCos(angle) * rx + x;
        extremity[1] = mathSin(angle) * ry + y;
        vec2Min(min, extremity, min);
        vec2Max(max, extremity, max);
      }
    }
  }

  var fromPoints_1 = fromPoints;
  var fromLine_1 = fromLine;
  var fromCubic_1 = fromCubic;
  var fromQuadratic_1 = fromQuadratic;
  var fromArc_1 = fromArc;

  var bbox = {
  	fromPoints: fromPoints_1,
  	fromLine: fromLine_1,
  	fromCubic: fromCubic_1,
  	fromQuadratic: fromQuadratic_1,
  	fromArc: fromArc_1
  };

  var dpr$1 = config.devicePixelRatio;

  /**
   * Path 代理，可以在`buildPath`中用于替代`ctx`, 会保存每个path操作的命令到pathCommands属性中
   * 可以用于 isInsidePath 判断以及获取boundingRect
   *
   * @module zrender/core/PathProxy
   * @author Yi Shen (http://www.github.com/pissang)
   */
  // TODO getTotalLength, getPointAtLength

  /* global Float32Array */
  var CMD = {
    M: 1,
    L: 2,
    C: 3,
    Q: 4,
    A: 5,
    Z: 6,
    // Rect
    R: 7
  }; // var CMD_MEM_SIZE = {
  //     M: 3,
  //     L: 3,
  //     C: 7,
  //     Q: 5,
  //     A: 9,
  //     R: 5,
  //     Z: 1
  // };

  var min$1 = [];
  var max$1 = [];
  var min2 = [];
  var max2 = [];
  var mathMin$2 = Math.min;
  var mathMax$2 = Math.max;
  var mathCos$1 = Math.cos;
  var mathSin$1 = Math.sin;
  var mathSqrt$1 = Math.sqrt;
  var mathAbs = Math.abs;
  var hasTypedArray = typeof Float32Array !== 'undefined';
  /**
   * @alias module:zrender/core/PathProxy
   * @constructor
   */

  var PathProxy = function (notSaveData) {
    this._saveData = !(notSaveData || false);

    if (this._saveData) {
      /**
       * Path data. Stored as flat array
       * @type {Array.<Object>}
       */
      this.data = [];
    }

    this._ctx = null;
  };
  /**
   * 快速计算Path包围盒（并不是最小包围盒）
   * @return {Object}
   */


  PathProxy.prototype = {
    constructor: PathProxy,
    _xi: 0,
    _yi: 0,
    _x0: 0,
    _y0: 0,
    // Unit x, Unit y. Provide for avoiding drawing that too short line segment
    _ux: 0,
    _uy: 0,
    _len: 0,
    _lineDash: null,
    _dashOffset: 0,
    _dashIdx: 0,
    _dashSum: 0,

    /**
     * @readOnly
     */
    setScale: function (sx, sy, segmentIgnoreThreshold) {
      // Compat. Previously there is no segmentIgnoreThreshold.
      segmentIgnoreThreshold = segmentIgnoreThreshold || 0;
      this._ux = mathAbs(segmentIgnoreThreshold / dpr$1 / sx) || 0;
      this._uy = mathAbs(segmentIgnoreThreshold / dpr$1 / sy) || 0;
    },
    getContext: function () {
      return this._ctx;
    },

    /**
     * @param  {CanvasRenderingContext2D} ctx
     * @return {module:zrender/core/PathProxy}
     */
    beginPath: function (ctx) {
      this._ctx = ctx;
      ctx && ctx.beginPath();
      ctx && (this.dpr = ctx.dpr); // Reset

      if (this._saveData) {
        this._len = 0;
      }

      if (this._lineDash) {
        this._lineDash = null;
        this._dashOffset = 0;
      }

      return this;
    },

    /**
     * @param  {number} x
     * @param  {number} y
     * @return {module:zrender/core/PathProxy}
     */
    moveTo: function (x, y) {
      this.addData(CMD.M, x, y);
      this._ctx && this._ctx.moveTo(x, y); // x0, y0, xi, yi 是记录在 _dashedXXXXTo 方法中使用
      // xi, yi 记录当前点, x0, y0 在 closePath 的时候回到起始点。
      // 有可能在 beginPath 之后直接调用 lineTo，这时候 x0, y0 需要
      // 在 lineTo 方法中记录，这里先不考虑这种情况，dashed line 也只在 IE10- 中不支持

      this._x0 = x;
      this._y0 = y;
      this._xi = x;
      this._yi = y;
      return this;
    },

    /**
     * @param  {number} x
     * @param  {number} y
     * @return {module:zrender/core/PathProxy}
     */
    lineTo: function (x, y) {
      var exceedUnit = mathAbs(x - this._xi) > this._ux || mathAbs(y - this._yi) > this._uy // Force draw the first segment
      || this._len < 5;
      this.addData(CMD.L, x, y);

      if (this._ctx && exceedUnit) {
        this._needsDash() ? this._dashedLineTo(x, y) : this._ctx.lineTo(x, y);
      }

      if (exceedUnit) {
        this._xi = x;
        this._yi = y;
      }

      return this;
    },

    /**
     * @param  {number} x1
     * @param  {number} y1
     * @param  {number} x2
     * @param  {number} y2
     * @param  {number} x3
     * @param  {number} y3
     * @return {module:zrender/core/PathProxy}
     */
    bezierCurveTo: function (x1, y1, x2, y2, x3, y3) {
      this.addData(CMD.C, x1, y1, x2, y2, x3, y3);

      if (this._ctx) {
        this._needsDash() ? this._dashedBezierTo(x1, y1, x2, y2, x3, y3) : this._ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);
      }

      this._xi = x3;
      this._yi = y3;
      return this;
    },

    /**
     * @param  {number} x1
     * @param  {number} y1
     * @param  {number} x2
     * @param  {number} y2
     * @return {module:zrender/core/PathProxy}
     */
    quadraticCurveTo: function (x1, y1, x2, y2) {
      this.addData(CMD.Q, x1, y1, x2, y2);

      if (this._ctx) {
        this._needsDash() ? this._dashedQuadraticTo(x1, y1, x2, y2) : this._ctx.quadraticCurveTo(x1, y1, x2, y2);
      }

      this._xi = x2;
      this._yi = y2;
      return this;
    },

    /**
     * @param  {number} cx
     * @param  {number} cy
     * @param  {number} r
     * @param  {number} startAngle
     * @param  {number} endAngle
     * @param  {boolean} anticlockwise
     * @return {module:zrender/core/PathProxy}
     */
    arc: function (cx, cy, r, startAngle, endAngle, anticlockwise) {
      this.addData(CMD.A, cx, cy, r, r, startAngle, endAngle - startAngle, 0, anticlockwise ? 0 : 1);
      this._ctx && this._ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);
      this._xi = mathCos$1(endAngle) * r + cx;
      this._yi = mathSin$1(endAngle) * r + cy;
      return this;
    },
    // TODO
    arcTo: function (x1, y1, x2, y2, radius) {
      if (this._ctx) {
        this._ctx.arcTo(x1, y1, x2, y2, radius);
      }

      return this;
    },
    // TODO
    rect: function (x, y, w, h) {
      this._ctx && this._ctx.rect(x, y, w, h);
      this.addData(CMD.R, x, y, w, h);
      return this;
    },

    /**
     * @return {module:zrender/core/PathProxy}
     */
    closePath: function () {
      this.addData(CMD.Z);
      var ctx = this._ctx;
      var x0 = this._x0;
      var y0 = this._y0;

      if (ctx) {
        this._needsDash() && this._dashedLineTo(x0, y0);
        ctx.closePath();
      }

      this._xi = x0;
      this._yi = y0;
      return this;
    },

    /**
     * Context 从外部传入，因为有可能是 rebuildPath 完之后再 fill。
     * stroke 同样
     * @param {CanvasRenderingContext2D} ctx
     * @return {module:zrender/core/PathProxy}
     */
    fill: function (ctx) {
      ctx && ctx.fill();
      this.toStatic();
    },

    /**
     * @param {CanvasRenderingContext2D} ctx
     * @return {module:zrender/core/PathProxy}
     */
    stroke: function (ctx) {
      ctx && ctx.stroke();
      this.toStatic();
    },

    /**
     * 必须在其它绘制命令前调用
     * Must be invoked before all other path drawing methods
     * @return {module:zrender/core/PathProxy}
     */
    setLineDash: function (lineDash) {
      if (lineDash instanceof Array) {
        this._lineDash = lineDash;
        this._dashIdx = 0;
        var lineDashSum = 0;

        for (var i = 0; i < lineDash.length; i++) {
          lineDashSum += lineDash[i];
        }

        this._dashSum = lineDashSum;
      }

      return this;
    },

    /**
     * 必须在其它绘制命令前调用
     * Must be invoked before all other path drawing methods
     * @return {module:zrender/core/PathProxy}
     */
    setLineDashOffset: function (offset) {
      this._dashOffset = offset;
      return this;
    },

    /**
     *
     * @return {boolean}
     */
    len: function () {
      return this._len;
    },

    /**
     * 直接设置 Path 数据
     */
    setData: function (data) {
      var len = data.length;

      if (!(this.data && this.data.length === len) && hasTypedArray) {
        this.data = new Float32Array(len);
      }

      for (var i = 0; i < len; i++) {
        this.data[i] = data[i];
      }

      this._len = len;
    },

    /**
     * 添加子路径
     * @param {module:zrender/core/PathProxy|Array.<module:zrender/core/PathProxy>} path
     */
    appendPath: function (path) {
      if (!(path instanceof Array)) {
        path = [path];
      }

      var len = path.length;
      var appendSize = 0;
      var offset = this._len;

      for (var i = 0; i < len; i++) {
        appendSize += path[i].len();
      }

      if (hasTypedArray && this.data instanceof Float32Array) {
        this.data = new Float32Array(offset + appendSize);
      }

      for (var i = 0; i < len; i++) {
        var appendPathData = path[i].data;

        for (var k = 0; k < appendPathData.length; k++) {
          this.data[offset++] = appendPathData[k];
        }
      }

      this._len = offset;
    },

    /**
     * 填充 Path 数据。
     * 尽量复用而不申明新的数组。大部分图形重绘的指令数据长度都是不变的。
     */
    addData: function (cmd) {
      if (!this._saveData) {
        return;
      }

      var data = this.data;

      if (this._len + arguments.length > data.length) {
        // 因为之前的数组已经转换成静态的 Float32Array
        // 所以不够用时需要扩展一个新的动态数组
        this._expandData();

        data = this.data;
      }

      for (var i = 0; i < arguments.length; i++) {
        data[this._len++] = arguments[i];
      }

      this._prevCmd = cmd;
    },
    _expandData: function () {
      // Only if data is Float32Array
      if (!(this.data instanceof Array)) {
        var newData = [];

        for (var i = 0; i < this._len; i++) {
          newData[i] = this.data[i];
        }

        this.data = newData;
      }
    },

    /**
     * If needs js implemented dashed line
     * @return {boolean}
     * @private
     */
    _needsDash: function () {
      return this._lineDash;
    },
    _dashedLineTo: function (x1, y1) {
      var dashSum = this._dashSum;
      var offset = this._dashOffset;
      var lineDash = this._lineDash;
      var ctx = this._ctx;
      var x0 = this._xi;
      var y0 = this._yi;
      var dx = x1 - x0;
      var dy = y1 - y0;
      var dist = mathSqrt$1(dx * dx + dy * dy);
      var x = x0;
      var y = y0;
      var dash;
      var nDash = lineDash.length;
      var idx;
      dx /= dist;
      dy /= dist;

      if (offset < 0) {
        // Convert to positive offset
        offset = dashSum + offset;
      }

      offset %= dashSum;
      x -= offset * dx;
      y -= offset * dy;

      while (dx > 0 && x <= x1 || dx < 0 && x >= x1 || dx === 0 && (dy > 0 && y <= y1 || dy < 0 && y >= y1)) {
        idx = this._dashIdx;
        dash = lineDash[idx];
        x += dx * dash;
        y += dy * dash;
        this._dashIdx = (idx + 1) % nDash; // Skip positive offset

        if (dx > 0 && x < x0 || dx < 0 && x > x0 || dy > 0 && y < y0 || dy < 0 && y > y0) {
          continue;
        }

        ctx[idx % 2 ? 'moveTo' : 'lineTo'](dx >= 0 ? mathMin$2(x, x1) : mathMax$2(x, x1), dy >= 0 ? mathMin$2(y, y1) : mathMax$2(y, y1));
      } // Offset for next lineTo


      dx = x - x1;
      dy = y - y1;
      this._dashOffset = -mathSqrt$1(dx * dx + dy * dy);
    },
    // Not accurate dashed line to
    _dashedBezierTo: function (x1, y1, x2, y2, x3, y3) {
      var dashSum = this._dashSum;
      var offset = this._dashOffset;
      var lineDash = this._lineDash;
      var ctx = this._ctx;
      var x0 = this._xi;
      var y0 = this._yi;
      var t;
      var dx;
      var dy;
      var cubicAt = curve.cubicAt;
      var bezierLen = 0;
      var idx = this._dashIdx;
      var nDash = lineDash.length;
      var x;
      var y;
      var tmpLen = 0;

      if (offset < 0) {
        // Convert to positive offset
        offset = dashSum + offset;
      }

      offset %= dashSum; // Bezier approx length

      for (t = 0; t < 1; t += 0.1) {
        dx = cubicAt(x0, x1, x2, x3, t + 0.1) - cubicAt(x0, x1, x2, x3, t);
        dy = cubicAt(y0, y1, y2, y3, t + 0.1) - cubicAt(y0, y1, y2, y3, t);
        bezierLen += mathSqrt$1(dx * dx + dy * dy);
      } // Find idx after add offset


      for (; idx < nDash; idx++) {
        tmpLen += lineDash[idx];

        if (tmpLen > offset) {
          break;
        }
      }

      t = (tmpLen - offset) / bezierLen;

      while (t <= 1) {
        x = cubicAt(x0, x1, x2, x3, t);
        y = cubicAt(y0, y1, y2, y3, t); // Use line to approximate dashed bezier
        // Bad result if dash is long

        idx % 2 ? ctx.moveTo(x, y) : ctx.lineTo(x, y);
        t += lineDash[idx] / bezierLen;
        idx = (idx + 1) % nDash;
      } // Finish the last segment and calculate the new offset


      idx % 2 !== 0 && ctx.lineTo(x3, y3);
      dx = x3 - x;
      dy = y3 - y;
      this._dashOffset = -mathSqrt$1(dx * dx + dy * dy);
    },
    _dashedQuadraticTo: function (x1, y1, x2, y2) {
      // Convert quadratic to cubic using degree elevation
      var x3 = x2;
      var y3 = y2;
      x2 = (x2 + 2 * x1) / 3;
      y2 = (y2 + 2 * y1) / 3;
      x1 = (this._xi + 2 * x1) / 3;
      y1 = (this._yi + 2 * y1) / 3;

      this._dashedBezierTo(x1, y1, x2, y2, x3, y3);
    },

    /**
     * 转成静态的 Float32Array 减少堆内存占用
     * Convert dynamic array to static Float32Array
     */
    toStatic: function () {
      var data = this.data;

      if (data instanceof Array) {
        data.length = this._len;

        if (hasTypedArray) {
          this.data = new Float32Array(data);
        }
      }
    },

    /**
     * @return {module:zrender/core/BoundingRect}
     */
    getBoundingRect: function () {
      min$1[0] = min$1[1] = min2[0] = min2[1] = Number.MAX_VALUE;
      max$1[0] = max$1[1] = max2[0] = max2[1] = -Number.MAX_VALUE;
      var data = this.data;
      var xi = 0;
      var yi = 0;
      var x0 = 0;
      var y0 = 0;

      for (var i = 0; i < data.length;) {
        var cmd = data[i++];

        if (i === 1) {
          // 如果第一个命令是 L, C, Q
          // 则 previous point 同绘制命令的第一个 point
          //
          // 第一个命令为 Arc 的情况下会在后面特殊处理
          xi = data[i];
          yi = data[i + 1];
          x0 = xi;
          y0 = yi;
        }

        switch (cmd) {
          case CMD.M:
            // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点
            // 在 closePath 的时候使用
            x0 = data[i++];
            y0 = data[i++];
            xi = x0;
            yi = y0;
            min2[0] = x0;
            min2[1] = y0;
            max2[0] = x0;
            max2[1] = y0;
            break;

          case CMD.L:
            bbox.fromLine(xi, yi, data[i], data[i + 1], min2, max2);
            xi = data[i++];
            yi = data[i++];
            break;

          case CMD.C:
            bbox.fromCubic(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], min2, max2);
            xi = data[i++];
            yi = data[i++];
            break;

          case CMD.Q:
            bbox.fromQuadratic(xi, yi, data[i++], data[i++], data[i], data[i + 1], min2, max2);
            xi = data[i++];
            yi = data[i++];
            break;

          case CMD.A:
            // TODO Arc 判断的开销比较大
            var cx = data[i++];
            var cy = data[i++];
            var rx = data[i++];
            var ry = data[i++];
            var startAngle = data[i++];
            var endAngle = data[i++] + startAngle; // TODO Arc 旋转

            i += 1;
            var anticlockwise = 1 - data[i++];

            if (i === 1) {
              // 直接使用 arc 命令
              // 第一个命令起点还未定义
              x0 = mathCos$1(startAngle) * rx + cx;
              y0 = mathSin$1(startAngle) * ry + cy;
            }

            bbox.fromArc(cx, cy, rx, ry, startAngle, endAngle, anticlockwise, min2, max2);
            xi = mathCos$1(endAngle) * rx + cx;
            yi = mathSin$1(endAngle) * ry + cy;
            break;

          case CMD.R:
            x0 = xi = data[i++];
            y0 = yi = data[i++];
            var width = data[i++];
            var height = data[i++]; // Use fromLine

            bbox.fromLine(x0, y0, x0 + width, y0 + height, min2, max2);
            break;

          case CMD.Z:
            xi = x0;
            yi = y0;
            break;
        } // Union


        vector.min(min$1, min$1, min2);
        vector.max(max$1, max$1, max2);
      } // No data


      if (i === 0) {
        min$1[0] = min$1[1] = max$1[0] = max$1[1] = 0;
      }

      return new BoundingRect_1(min$1[0], min$1[1], max$1[0] - min$1[0], max$1[1] - min$1[1]);
    },

    /**
     * Rebuild path from current data
     * Rebuild path will not consider javascript implemented line dash.
     * @param {CanvasRenderingContext2D} ctx
     */
    rebuildPath: function (ctx) {
      var d = this.data;
      var x0;
      var y0;
      var xi;
      var yi;
      var x;
      var y;
      var ux = this._ux;
      var uy = this._uy;
      var len = this._len;

      for (var i = 0; i < len;) {
        var cmd = d[i++];

        if (i === 1) {
          // 如果第一个命令是 L, C, Q
          // 则 previous point 同绘制命令的第一个 point
          //
          // 第一个命令为 Arc 的情况下会在后面特殊处理
          xi = d[i];
          yi = d[i + 1];
          x0 = xi;
          y0 = yi;
        }

        switch (cmd) {
          case CMD.M:
            x0 = xi = d[i++];
            y0 = yi = d[i++];
            ctx.moveTo(xi, yi);
            break;

          case CMD.L:
            x = d[i++];
            y = d[i++]; // Not draw too small seg between

            if (mathAbs(x - xi) > ux || mathAbs(y - yi) > uy || i === len - 1) {
              ctx.lineTo(x, y);
              xi = x;
              yi = y;
            }

            break;

          case CMD.C:
            ctx.bezierCurveTo(d[i++], d[i++], d[i++], d[i++], d[i++], d[i++]);
            xi = d[i - 2];
            yi = d[i - 1];
            break;

          case CMD.Q:
            ctx.quadraticCurveTo(d[i++], d[i++], d[i++], d[i++]);
            xi = d[i - 2];
            yi = d[i - 1];
            break;

          case CMD.A:
            var cx = d[i++];
            var cy = d[i++];
            var rx = d[i++];
            var ry = d[i++];
            var theta = d[i++];
            var dTheta = d[i++];
            var psi = d[i++];
            var fs = d[i++];
            var r = rx > ry ? rx : ry;
            var scaleX = rx > ry ? 1 : rx / ry;
            var scaleY = rx > ry ? ry / rx : 1;
            var isEllipse = Math.abs(rx - ry) > 1e-3;
            var endAngle = theta + dTheta;

            if (isEllipse) {
              ctx.translate(cx, cy);
              ctx.rotate(psi);
              ctx.scale(scaleX, scaleY);
              ctx.arc(0, 0, r, theta, endAngle, 1 - fs);
              ctx.scale(1 / scaleX, 1 / scaleY);
              ctx.rotate(-psi);
              ctx.translate(-cx, -cy);
            } else {
              ctx.arc(cx, cy, r, theta, endAngle, 1 - fs);
            }

            if (i === 1) {
              // 直接使用 arc 命令
              // 第一个命令起点还未定义
              x0 = mathCos$1(theta) * rx + cx;
              y0 = mathSin$1(theta) * ry + cy;
            }

            xi = mathCos$1(endAngle) * rx + cx;
            yi = mathSin$1(endAngle) * ry + cy;
            break;

          case CMD.R:
            x0 = xi = d[i];
            y0 = yi = d[i + 1];
            ctx.rect(d[i++], d[i++], d[i++], d[i++]);
            break;

          case CMD.Z:
            ctx.closePath();
            xi = x0;
            yi = y0;
        }
      }
    }
  };
  PathProxy.CMD = CMD;
  var _default$v = PathProxy;
  var PathProxy_1 = _default$v;

  /**
   * 线段包含判断
   * @param  {number}  x0
   * @param  {number}  y0
   * @param  {number}  x1
   * @param  {number}  y1
   * @param  {number}  lineWidth
   * @param  {number}  x
   * @param  {number}  y
   * @return {boolean}
   */
  function containStroke(x0, y0, x1, y1, lineWidth, x, y) {
    if (lineWidth === 0) {
      return false;
    }

    var _l = lineWidth;
    var _a = 0;
    var _b = x0; // Quick reject

    if (y > y0 + _l && y > y1 + _l || y < y0 - _l && y < y1 - _l || x > x0 + _l && x > x1 + _l || x < x0 - _l && x < x1 - _l) {
      return false;
    }

    if (x0 !== x1) {
      _a = (y0 - y1) / (x0 - x1);
      _b = (x0 * y1 - x1 * y0) / (x0 - x1);
    } else {
      return Math.abs(x - x0) <= _l / 2;
    }

    var tmp = _a * x - y + _b;

    var _s = tmp * tmp / (_a * _a + 1);

    return _s <= _l / 2 * _l / 2;
  }

  var containStroke_1 = containStroke;

  var line = {
  	containStroke: containStroke_1
  };

  /**
   * 三次贝塞尔曲线描边包含判断
   * @param  {number}  x0
   * @param  {number}  y0
   * @param  {number}  x1
   * @param  {number}  y1
   * @param  {number}  x2
   * @param  {number}  y2
   * @param  {number}  x3
   * @param  {number}  y3
   * @param  {number}  lineWidth
   * @param  {number}  x
   * @param  {number}  y
   * @return {boolean}
   */
  function containStroke$1(x0, y0, x1, y1, x2, y2, x3, y3, lineWidth, x, y) {
    if (lineWidth === 0) {
      return false;
    }

    var _l = lineWidth; // Quick reject

    if (y > y0 + _l && y > y1 + _l && y > y2 + _l && y > y3 + _l || y < y0 - _l && y < y1 - _l && y < y2 - _l && y < y3 - _l || x > x0 + _l && x > x1 + _l && x > x2 + _l && x > x3 + _l || x < x0 - _l && x < x1 - _l && x < x2 - _l && x < x3 - _l) {
      return false;
    }

    var d = curve.cubicProjectPoint(x0, y0, x1, y1, x2, y2, x3, y3, x, y, null);
    return d <= _l / 2;
  }

  var containStroke_1$1 = containStroke$1;

  var cubic = {
  	containStroke: containStroke_1$1
  };

  var quadraticProjectPoint$1 = curve.quadraticProjectPoint;

  /**
   * 二次贝塞尔曲线描边包含判断
   * @param  {number}  x0
   * @param  {number}  y0
   * @param  {number}  x1
   * @param  {number}  y1
   * @param  {number}  x2
   * @param  {number}  y2
   * @param  {number}  lineWidth
   * @param  {number}  x
   * @param  {number}  y
   * @return {boolean}
   */
  function containStroke$2(x0, y0, x1, y1, x2, y2, lineWidth, x, y) {
    if (lineWidth === 0) {
      return false;
    }

    var _l = lineWidth; // Quick reject

    if (y > y0 + _l && y > y1 + _l && y > y2 + _l || y < y0 - _l && y < y1 - _l && y < y2 - _l || x > x0 + _l && x > x1 + _l && x > x2 + _l || x < x0 - _l && x < x1 - _l && x < x2 - _l) {
      return false;
    }

    var d = quadraticProjectPoint$1(x0, y0, x1, y1, x2, y2, x, y, null);
    return d <= _l / 2;
  }

  var containStroke_1$2 = containStroke$2;

  var quadratic = {
  	containStroke: containStroke_1$2
  };

  var PI2$1 = Math.PI * 2;

  function normalizeRadian(angle) {
    angle %= PI2$1;

    if (angle < 0) {
      angle += PI2$1;
    }

    return angle;
  }

  var normalizeRadian_1 = normalizeRadian;

  var util$1 = {
  	normalizeRadian: normalizeRadian_1
  };

  var normalizeRadian$1 = util$1.normalizeRadian;
  var PI2$2 = Math.PI * 2;
  /**
   * 圆弧描边包含判断
   * @param  {number}  cx
   * @param  {number}  cy
   * @param  {number}  r
   * @param  {number}  startAngle
   * @param  {number}  endAngle
   * @param  {boolean}  anticlockwise
   * @param  {number} lineWidth
   * @param  {number}  x
   * @param  {number}  y
   * @return {Boolean}
   */

  function containStroke$3(cx, cy, r, startAngle, endAngle, anticlockwise, lineWidth, x, y) {
    if (lineWidth === 0) {
      return false;
    }

    var _l = lineWidth;
    x -= cx;
    y -= cy;
    var d = Math.sqrt(x * x + y * y);

    if (d - _l > r || d + _l < r) {
      return false;
    }

    if (Math.abs(startAngle - endAngle) % PI2$2 < 1e-4) {
      // Is a circle
      return true;
    }

    if (anticlockwise) {
      var tmp = startAngle;
      startAngle = normalizeRadian$1(endAngle);
      endAngle = normalizeRadian$1(tmp);
    } else {
      startAngle = normalizeRadian$1(startAngle);
      endAngle = normalizeRadian$1(endAngle);
    }

    if (startAngle > endAngle) {
      endAngle += PI2$2;
    }

    var angle = Math.atan2(y, x);

    if (angle < 0) {
      angle += PI2$2;
    }

    return angle >= startAngle && angle <= endAngle || angle + PI2$2 >= startAngle && angle + PI2$2 <= endAngle;
  }

  var containStroke_1$3 = containStroke$3;

  var arc = {
  	containStroke: containStroke_1$3
  };

  function windingLine(x0, y0, x1, y1, x, y) {
    if (y > y0 && y > y1 || y < y0 && y < y1) {
      return 0;
    } // Ignore horizontal line


    if (y1 === y0) {
      return 0;
    }

    var dir = y1 < y0 ? 1 : -1;
    var t = (y - y0) / (y1 - y0); // Avoid winding error when intersection point is the connect point of two line of polygon

    if (t === 1 || t === 0) {
      dir = y1 < y0 ? 0.5 : -0.5;
    }

    var x_ = t * (x1 - x0) + x0; // If (x, y) on the line, considered as "contain".

    return x_ === x ? Infinity : x_ > x ? dir : 0;
  }

  var windingLine_1 = windingLine;

  var normalizeRadian$2 = util$1.normalizeRadian;





  var CMD$1 = PathProxy_1.CMD;
  var PI2$3 = Math.PI * 2;
  var EPSILON$2 = 1e-4;

  function isAroundEqual(a, b) {
    return Math.abs(a - b) < EPSILON$2;
  } // 临时数组


  var roots = [-1, -1, -1];
  var extrema = [-1, -1];

  function swapExtrema() {
    var tmp = extrema[0];
    extrema[0] = extrema[1];
    extrema[1] = tmp;
  }

  function windingCubic(x0, y0, x1, y1, x2, y2, x3, y3, x, y) {
    // Quick reject
    if (y > y0 && y > y1 && y > y2 && y > y3 || y < y0 && y < y1 && y < y2 && y < y3) {
      return 0;
    }

    var nRoots = curve.cubicRootAt(y0, y1, y2, y3, y, roots);

    if (nRoots === 0) {
      return 0;
    } else {
      var w = 0;
      var nExtrema = -1;
      var y0_;
      var y1_;

      for (var i = 0; i < nRoots; i++) {
        var t = roots[i]; // Avoid winding error when intersection point is the connect point of two line of polygon

        var unit = t === 0 || t === 1 ? 0.5 : 1;
        var x_ = curve.cubicAt(x0, x1, x2, x3, t);

        if (x_ < x) {
          // Quick reject
          continue;
        }

        if (nExtrema < 0) {
          nExtrema = curve.cubicExtrema(y0, y1, y2, y3, extrema);

          if (extrema[1] < extrema[0] && nExtrema > 1) {
            swapExtrema();
          }

          y0_ = curve.cubicAt(y0, y1, y2, y3, extrema[0]);

          if (nExtrema > 1) {
            y1_ = curve.cubicAt(y0, y1, y2, y3, extrema[1]);
          }
        }

        if (nExtrema === 2) {
          // 分成三段单调函数
          if (t < extrema[0]) {
            w += y0_ < y0 ? unit : -unit;
          } else if (t < extrema[1]) {
            w += y1_ < y0_ ? unit : -unit;
          } else {
            w += y3 < y1_ ? unit : -unit;
          }
        } else {
          // 分成两段单调函数
          if (t < extrema[0]) {
            w += y0_ < y0 ? unit : -unit;
          } else {
            w += y3 < y0_ ? unit : -unit;
          }
        }
      }

      return w;
    }
  }

  function windingQuadratic(x0, y0, x1, y1, x2, y2, x, y) {
    // Quick reject
    if (y > y0 && y > y1 && y > y2 || y < y0 && y < y1 && y < y2) {
      return 0;
    }

    var nRoots = curve.quadraticRootAt(y0, y1, y2, y, roots);

    if (nRoots === 0) {
      return 0;
    } else {
      var t = curve.quadraticExtremum(y0, y1, y2);

      if (t >= 0 && t <= 1) {
        var w = 0;
        var y_ = curve.quadraticAt(y0, y1, y2, t);

        for (var i = 0; i < nRoots; i++) {
          // Remove one endpoint.
          var unit = roots[i] === 0 || roots[i] === 1 ? 0.5 : 1;
          var x_ = curve.quadraticAt(x0, x1, x2, roots[i]);

          if (x_ < x) {
            // Quick reject
            continue;
          }

          if (roots[i] < t) {
            w += y_ < y0 ? unit : -unit;
          } else {
            w += y2 < y_ ? unit : -unit;
          }
        }

        return w;
      } else {
        // Remove one endpoint.
        var unit = roots[0] === 0 || roots[0] === 1 ? 0.5 : 1;
        var x_ = curve.quadraticAt(x0, x1, x2, roots[0]);

        if (x_ < x) {
          // Quick reject
          return 0;
        }

        return y2 < y0 ? unit : -unit;
      }
    }
  } // TODO
  // Arc 旋转


  function windingArc(cx, cy, r, startAngle, endAngle, anticlockwise, x, y) {
    y -= cy;

    if (y > r || y < -r) {
      return 0;
    }

    var tmp = Math.sqrt(r * r - y * y);
    roots[0] = -tmp;
    roots[1] = tmp;
    var diff = Math.abs(startAngle - endAngle);

    if (diff < 1e-4) {
      return 0;
    }

    if (diff % PI2$3 < 1e-4) {
      // Is a circle
      startAngle = 0;
      endAngle = PI2$3;
      var dir = anticlockwise ? 1 : -1;

      if (x >= roots[0] + cx && x <= roots[1] + cx) {
        return dir;
      } else {
        return 0;
      }
    }

    if (anticlockwise) {
      var tmp = startAngle;
      startAngle = normalizeRadian$2(endAngle);
      endAngle = normalizeRadian$2(tmp);
    } else {
      startAngle = normalizeRadian$2(startAngle);
      endAngle = normalizeRadian$2(endAngle);
    }

    if (startAngle > endAngle) {
      endAngle += PI2$3;
    }

    var w = 0;

    for (var i = 0; i < 2; i++) {
      var x_ = roots[i];

      if (x_ + cx > x) {
        var angle = Math.atan2(y, x_);
        var dir = anticlockwise ? 1 : -1;

        if (angle < 0) {
          angle = PI2$3 + angle;
        }

        if (angle >= startAngle && angle <= endAngle || angle + PI2$3 >= startAngle && angle + PI2$3 <= endAngle) {
          if (angle > Math.PI / 2 && angle < Math.PI * 1.5) {
            dir = -dir;
          }

          w += dir;
        }
      }
    }

    return w;
  }

  function containPath(data, lineWidth, isStroke, x, y) {
    var w = 0;
    var xi = 0;
    var yi = 0;
    var x0 = 0;
    var y0 = 0;

    for (var i = 0; i < data.length;) {
      var cmd = data[i++]; // Begin a new subpath

      if (cmd === CMD$1.M && i > 1) {
        // Close previous subpath
        if (!isStroke) {
          w += windingLine_1(xi, yi, x0, y0, x, y);
        } // 如果被任何一个 subpath 包含
        // if (w !== 0) {
        //     return true;
        // }

      }

      if (i === 1) {
        // 如果第一个命令是 L, C, Q
        // 则 previous point 同绘制命令的第一个 point
        //
        // 第一个命令为 Arc 的情况下会在后面特殊处理
        xi = data[i];
        yi = data[i + 1];
        x0 = xi;
        y0 = yi;
      }

      switch (cmd) {
        case CMD$1.M:
          // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点
          // 在 closePath 的时候使用
          x0 = data[i++];
          y0 = data[i++];
          xi = x0;
          yi = y0;
          break;

        case CMD$1.L:
          if (isStroke) {
            if (line.containStroke(xi, yi, data[i], data[i + 1], lineWidth, x, y)) {
              return true;
            }
          } else {
            // NOTE 在第一个命令为 L, C, Q 的时候会计算出 NaN
            w += windingLine_1(xi, yi, data[i], data[i + 1], x, y) || 0;
          }

          xi = data[i++];
          yi = data[i++];
          break;

        case CMD$1.C:
          if (isStroke) {
            if (cubic.containStroke(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], lineWidth, x, y)) {
              return true;
            }
          } else {
            w += windingCubic(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], x, y) || 0;
          }

          xi = data[i++];
          yi = data[i++];
          break;

        case CMD$1.Q:
          if (isStroke) {
            if (quadratic.containStroke(xi, yi, data[i++], data[i++], data[i], data[i + 1], lineWidth, x, y)) {
              return true;
            }
          } else {
            w += windingQuadratic(xi, yi, data[i++], data[i++], data[i], data[i + 1], x, y) || 0;
          }

          xi = data[i++];
          yi = data[i++];
          break;

        case CMD$1.A:
          // TODO Arc 判断的开销比较大
          var cx = data[i++];
          var cy = data[i++];
          var rx = data[i++];
          var ry = data[i++];
          var theta = data[i++];
          var dTheta = data[i++]; // TODO Arc 旋转

          i += 1;
          var anticlockwise = 1 - data[i++];
          var x1 = Math.cos(theta) * rx + cx;
          var y1 = Math.sin(theta) * ry + cy; // 不是直接使用 arc 命令

          if (i > 1) {
            w += windingLine_1(xi, yi, x1, y1, x, y);
          } else {
            // 第一个命令起点还未定义
            x0 = x1;
            y0 = y1;
          } // zr 使用scale来模拟椭圆, 这里也对x做一定的缩放


          var _x = (x - cx) * ry / rx + cx;

          if (isStroke) {
            if (arc.containStroke(cx, cy, ry, theta, theta + dTheta, anticlockwise, lineWidth, _x, y)) {
              return true;
            }
          } else {
            w += windingArc(cx, cy, ry, theta, theta + dTheta, anticlockwise, _x, y);
          }

          xi = Math.cos(theta + dTheta) * rx + cx;
          yi = Math.sin(theta + dTheta) * ry + cy;
          break;

        case CMD$1.R:
          x0 = xi = data[i++];
          y0 = yi = data[i++];
          var width = data[i++];
          var height = data[i++];
          var x1 = x0 + width;
          var y1 = y0 + height;

          if (isStroke) {
            if (line.containStroke(x0, y0, x1, y0, lineWidth, x, y) || line.containStroke(x1, y0, x1, y1, lineWidth, x, y) || line.containStroke(x1, y1, x0, y1, lineWidth, x, y) || line.containStroke(x0, y1, x0, y0, lineWidth, x, y)) {
              return true;
            }
          } else {
            // FIXME Clockwise ?
            w += windingLine_1(x1, y0, x1, y1, x, y);
            w += windingLine_1(x0, y1, x0, y0, x, y);
          }

          break;

        case CMD$1.Z:
          if (isStroke) {
            if (line.containStroke(xi, yi, x0, y0, lineWidth, x, y)) {
              return true;
            }
          } else {
            // Close a subpath
            w += windingLine_1(xi, yi, x0, y0, x, y); // 如果被任何一个 subpath 包含
            // FIXME subpaths may overlap
            // if (w !== 0) {
            //     return true;
            // }
          }

          xi = x0;
          yi = y0;
          break;
      }
    }

    if (!isStroke && !isAroundEqual(yi, y0)) {
      w += windingLine_1(xi, yi, x0, y0, x, y) || 0;
    }

    return w !== 0;
  }

  function contain(pathData, x, y) {
    return containPath(pathData, 0, false, x, y);
  }

  function containStroke$4(pathData, lineWidth, x, y) {
    return containPath(pathData, lineWidth, true, x, y);
  }

  var contain_1 = contain;
  var containStroke_1$4 = containStroke$4;

  var path = {
  	contain: contain_1,
  	containStroke: containStroke_1$4
  };

  var getCanvasPattern = Pattern_1.prototype.getCanvasPattern;
  var abs = Math.abs;
  var pathProxyForDraw = new PathProxy_1(true);
  /**
   * @alias module:zrender/graphic/Path
   * @extends module:zrender/graphic/Displayable
   * @constructor
   * @param {Object} opts
   */

  function Path(opts) {
    Displayable_1.call(this, opts);
    /**
     * @type {module:zrender/core/PathProxy}
     * @readOnly
     */

    this.path = null;
  }

  Path.prototype = {
    constructor: Path,
    type: 'path',
    __dirtyPath: true,
    strokeContainThreshold: 5,
    // This item default to be false. But in map series in echarts,
    // in order to improve performance, it should be set to true,
    // so the shorty segment won't draw.
    segmentIgnoreThreshold: 0,

    /**
     * See `module:zrender/src/graphic/helper/subPixelOptimize`.
     * @type {boolean}
     */
    subPixelOptimize: false,
    brush: function (ctx, prevEl) {
      var style = this.style;
      var path = this.path || pathProxyForDraw;
      var hasStroke = style.hasStroke();
      var hasFill = style.hasFill();
      var fill = style.fill;
      var stroke = style.stroke;
      var hasFillGradient = hasFill && !!fill.colorStops;
      var hasStrokeGradient = hasStroke && !!stroke.colorStops;
      var hasFillPattern = hasFill && !!fill.image;
      var hasStrokePattern = hasStroke && !!stroke.image;
      style.bind(ctx, this, prevEl);
      this.setTransform(ctx);

      if (this.__dirty) {
        var rect; // Update gradient because bounding rect may changed

        if (hasFillGradient) {
          rect = rect || this.getBoundingRect();
          this._fillGradient = style.getGradient(ctx, fill, rect);
        }

        if (hasStrokeGradient) {
          rect = rect || this.getBoundingRect();
          this._strokeGradient = style.getGradient(ctx, stroke, rect);
        }
      } // Use the gradient or pattern


      if (hasFillGradient) {
        // PENDING If may have affect the state
        ctx.fillStyle = this._fillGradient;
      } else if (hasFillPattern) {
        ctx.fillStyle = getCanvasPattern.call(fill, ctx);
      }

      if (hasStrokeGradient) {
        ctx.strokeStyle = this._strokeGradient;
      } else if (hasStrokePattern) {
        ctx.strokeStyle = getCanvasPattern.call(stroke, ctx);
      }

      var lineDash = style.lineDash;
      var lineDashOffset = style.lineDashOffset;
      var ctxLineDash = !!ctx.setLineDash; // Update path sx, sy

      var scale = this.getGlobalScale();
      path.setScale(scale[0], scale[1], this.segmentIgnoreThreshold); // Proxy context
      // Rebuild path in following 2 cases
      // 1. Path is dirty
      // 2. Path needs javascript implemented lineDash stroking.
      //    In this case, lineDash information will not be saved in PathProxy

      if (this.__dirtyPath || lineDash && !ctxLineDash && hasStroke) {
        path.beginPath(ctx); // Setting line dash before build path

        if (lineDash && !ctxLineDash) {
          path.setLineDash(lineDash);
          path.setLineDashOffset(lineDashOffset);
        }

        this.buildPath(path, this.shape, false); // Clear path dirty flag

        if (this.path) {
          this.__dirtyPath = false;
        }
      } else {
        // Replay path building
        ctx.beginPath();
        this.path.rebuildPath(ctx);
      }

      if (hasFill) {
        if (style.fillOpacity != null) {
          var originalGlobalAlpha = ctx.globalAlpha;
          ctx.globalAlpha = style.fillOpacity * style.opacity;
          path.fill(ctx);
          ctx.globalAlpha = originalGlobalAlpha;
        } else {
          path.fill(ctx);
        }
      }

      if (lineDash && ctxLineDash) {
        ctx.setLineDash(lineDash);
        ctx.lineDashOffset = lineDashOffset;
      }

      if (hasStroke) {
        if (style.strokeOpacity != null) {
          var originalGlobalAlpha = ctx.globalAlpha;
          ctx.globalAlpha = style.strokeOpacity * style.opacity;
          path.stroke(ctx);
          ctx.globalAlpha = originalGlobalAlpha;
        } else {
          path.stroke(ctx);
        }
      }

      if (lineDash && ctxLineDash) {
        // PENDING
        // Remove lineDash
        ctx.setLineDash([]);
      } // Draw rect text


      if (style.text != null) {
        // Only restore transform when needs draw text.
        this.restoreTransform(ctx);
        this.drawRectText(ctx, this.getBoundingRect());
      }
    },
    // When bundling path, some shape may decide if use moveTo to begin a new subpath or closePath
    // Like in circle
    buildPath: function (ctx, shapeCfg, inBundle) {},
    createPathProxy: function () {
      this.path = new PathProxy_1();
    },
    getBoundingRect: function () {
      var rect = this._rect;
      var style = this.style;
      var needsUpdateRect = !rect;

      if (needsUpdateRect) {
        var path = this.path;

        if (!path) {
          // Create path on demand.
          path = this.path = new PathProxy_1();
        }

        if (this.__dirtyPath) {
          path.beginPath();
          this.buildPath(path, this.shape, false);
        }

        rect = path.getBoundingRect();
      }

      this._rect = rect;

      if (style.hasStroke()) {
        // Needs update rect with stroke lineWidth when
        // 1. Element changes scale or lineWidth
        // 2. Shape is changed
        var rectWithStroke = this._rectWithStroke || (this._rectWithStroke = rect.clone());

        if (this.__dirty || needsUpdateRect) {
          rectWithStroke.copy(rect); // FIXME Must after updateTransform

          var w = style.lineWidth; // PENDING, Min line width is needed when line is horizontal or vertical

          var lineScale = style.strokeNoScale ? this.getLineScale() : 1; // Only add extra hover lineWidth when there are no fill

          if (!style.hasFill()) {
            w = Math.max(w, this.strokeContainThreshold || 4);
          } // Consider line width
          // Line scale can't be 0;


          if (lineScale > 1e-10) {
            rectWithStroke.width += w / lineScale;
            rectWithStroke.height += w / lineScale;
            rectWithStroke.x -= w / lineScale / 2;
            rectWithStroke.y -= w / lineScale / 2;
          }
        } // Return rect with stroke


        return rectWithStroke;
      }

      return rect;
    },
    contain: function (x, y) {
      var localPos = this.transformCoordToLocal(x, y);
      var rect = this.getBoundingRect();
      var style = this.style;
      x = localPos[0];
      y = localPos[1];

      if (rect.contain(x, y)) {
        var pathData = this.path.data;

        if (style.hasStroke()) {
          var lineWidth = style.lineWidth;
          var lineScale = style.strokeNoScale ? this.getLineScale() : 1; // Line scale can't be 0;

          if (lineScale > 1e-10) {
            // Only add extra hover lineWidth when there are no fill
            if (!style.hasFill()) {
              lineWidth = Math.max(lineWidth, this.strokeContainThreshold);
            }

            if (path.containStroke(pathData, lineWidth / lineScale, x, y)) {
              return true;
            }
          }
        }

        if (style.hasFill()) {
          return path.contain(pathData, x, y);
        }
      }

      return false;
    },

    /**
     * @param  {boolean} dirtyPath
     */
    dirty: function (dirtyPath) {
      if (dirtyPath == null) {
        dirtyPath = true;
      } // Only mark dirty, not mark clean


      if (dirtyPath) {
        this.__dirtyPath = dirtyPath;
        this._rect = null;
      }

      this.__dirty = this.__dirtyText = true;
      this.__zr && this.__zr.refresh(); // Used as a clipping path

      if (this.__clipTarget) {
        this.__clipTarget.dirty();
      }
    },

    /**
     * Alias for animate('shape')
     * @param {boolean} loop
     */
    animateShape: function (loop) {
      return this.animate('shape', loop);
    },
    // Overwrite attrKV
    attrKV: function (key, value) {
      // FIXME
      if (key === 'shape') {
        this.setShape(value);
        this.__dirtyPath = true;
        this._rect = null;
      } else {
        Displayable_1.prototype.attrKV.call(this, key, value);
      }
    },

    /**
     * @param {Object|string} key
     * @param {*} value
     */
    setShape: function (key, value) {
      var shape = this.shape; // Path from string may not have shape

      if (shape) {
        if (util.isObject(key)) {
          for (var name in key) {
            if (key.hasOwnProperty(name)) {
              shape[name] = key[name];
            }
          }
        } else {
          shape[key] = value;
        }

        this.dirty(true);
      }

      return this;
    },
    getLineScale: function () {
      var m = this.transform; // Get the line scale.
      // Determinant of `m` means how much the area is enlarged by the
      // transformation. So its square root can be used as a scale factor
      // for width.

      return m && abs(m[0] - 1) > 1e-10 && abs(m[3] - 1) > 1e-10 ? Math.sqrt(abs(m[0] * m[3] - m[2] * m[1])) : 1;
    }
  };
  /**
   * 扩展一个 Path element, 比如星形，圆等。
   * Extend a path element
   * @param {Object} props
   * @param {string} props.type Path type
   * @param {Function} props.init Initialize
   * @param {Function} props.buildPath Overwrite buildPath method
   * @param {Object} [props.style] Extended default style config
   * @param {Object} [props.shape] Extended default shape config
   */

  Path.extend = function (defaults) {
    var Sub = function (opts) {
      Path.call(this, opts);

      if (defaults.style) {
        // Extend default style
        this.style.extendFrom(defaults.style, false);
      } // Extend default shape


      var defaultShape = defaults.shape;

      if (defaultShape) {
        this.shape = this.shape || {};
        var thisShape = this.shape;

        for (var name in defaultShape) {
          if (!thisShape.hasOwnProperty(name) && defaultShape.hasOwnProperty(name)) {
            thisShape[name] = defaultShape[name];
          }
        }
      }

      defaults.init && defaults.init.call(this, opts);
    };

    util.inherits(Sub, Path); // FIXME 不能 extend position, rotation 等引用对象

    for (var name in defaults) {
      // Extending prototype values and methods
      if (name !== 'style' && name !== 'shape') {
        Sub.prototype[name] = defaults[name];
      }
    }

    return Sub;
  };

  util.inherits(Path, Displayable_1);
  var _default$w = Path;
  var Path_1 = _default$w;

  var v2ApplyTransform$1 = vector.applyTransform;
  var CMD$2 = PathProxy_1.CMD;
  var points = [[], [], []];
  var mathSqrt$2 = Math.sqrt;
  var mathAtan2 = Math.atan2;

  function _default$x(path, m) {
    var data = path.data;
    var cmd;
    var nPoint;
    var i;
    var j;
    var k;
    var p;
    var M = CMD$2.M;
    var C = CMD$2.C;
    var L = CMD$2.L;
    var R = CMD$2.R;
    var A = CMD$2.A;
    var Q = CMD$2.Q;

    for (i = 0, j = 0; i < data.length;) {
      cmd = data[i++];
      j = i;
      nPoint = 0;

      switch (cmd) {
        case M:
          nPoint = 1;
          break;

        case L:
          nPoint = 1;
          break;

        case C:
          nPoint = 3;
          break;

        case Q:
          nPoint = 2;
          break;

        case A:
          var x = m[4];
          var y = m[5];
          var sx = mathSqrt$2(m[0] * m[0] + m[1] * m[1]);
          var sy = mathSqrt$2(m[2] * m[2] + m[3] * m[3]);
          var angle = mathAtan2(-m[1] / sy, m[0] / sx); // cx

          data[i] *= sx;
          data[i++] += x; // cy

          data[i] *= sy;
          data[i++] += y; // Scale rx and ry
          // FIXME Assume psi is 0 here

          data[i++] *= sx;
          data[i++] *= sy; // Start angle

          data[i++] += angle; // end angle

          data[i++] += angle; // FIXME psi

          i += 2;
          j = i;
          break;

        case R:
          // x0, y0
          p[0] = data[i++];
          p[1] = data[i++];
          v2ApplyTransform$1(p, p, m);
          data[j++] = p[0];
          data[j++] = p[1]; // x1, y1

          p[0] += data[i++];
          p[1] += data[i++];
          v2ApplyTransform$1(p, p, m);
          data[j++] = p[0];
          data[j++] = p[1];
      }

      for (k = 0; k < nPoint; k++) {
        var p = points[k];
        p[0] = data[i++];
        p[1] = data[i++];
        v2ApplyTransform$1(p, p, m); // Write back

        data[j++] = p[0];
        data[j++] = p[1];
      }
    }
  }

  var transformPath = _default$x;

  // command chars
  // var cc = [
  //     'm', 'M', 'l', 'L', 'v', 'V', 'h', 'H', 'z', 'Z',
  //     'c', 'C', 'q', 'Q', 't', 'T', 's', 'S', 'a', 'A'
  // ];
  var mathSqrt$3 = Math.sqrt;
  var mathSin$2 = Math.sin;
  var mathCos$2 = Math.cos;
  var PI = Math.PI;

  var vMag = function (v) {
    return Math.sqrt(v[0] * v[0] + v[1] * v[1]);
  };

  var vRatio = function (u, v) {
    return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));
  };

  var vAngle = function (u, v) {
    return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vRatio(u, v));
  };

  function processArc(x1, y1, x2, y2, fa, fs, rx, ry, psiDeg, cmd, path) {
    var psi = psiDeg * (PI / 180.0);
    var xp = mathCos$2(psi) * (x1 - x2) / 2.0 + mathSin$2(psi) * (y1 - y2) / 2.0;
    var yp = -1 * mathSin$2(psi) * (x1 - x2) / 2.0 + mathCos$2(psi) * (y1 - y2) / 2.0;
    var lambda = xp * xp / (rx * rx) + yp * yp / (ry * ry);

    if (lambda > 1) {
      rx *= mathSqrt$3(lambda);
      ry *= mathSqrt$3(lambda);
    }

    var f = (fa === fs ? -1 : 1) * mathSqrt$3((rx * rx * (ry * ry) - rx * rx * (yp * yp) - ry * ry * (xp * xp)) / (rx * rx * (yp * yp) + ry * ry * (xp * xp))) || 0;
    var cxp = f * rx * yp / ry;
    var cyp = f * -ry * xp / rx;
    var cx = (x1 + x2) / 2.0 + mathCos$2(psi) * cxp - mathSin$2(psi) * cyp;
    var cy = (y1 + y2) / 2.0 + mathSin$2(psi) * cxp + mathCos$2(psi) * cyp;
    var theta = vAngle([1, 0], [(xp - cxp) / rx, (yp - cyp) / ry]);
    var u = [(xp - cxp) / rx, (yp - cyp) / ry];
    var v = [(-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry];
    var dTheta = vAngle(u, v);

    if (vRatio(u, v) <= -1) {
      dTheta = PI;
    }

    if (vRatio(u, v) >= 1) {
      dTheta = 0;
    }

    if (fs === 0 && dTheta > 0) {
      dTheta = dTheta - 2 * PI;
    }

    if (fs === 1 && dTheta < 0) {
      dTheta = dTheta + 2 * PI;
    }

    path.addData(cmd, cx, cy, rx, ry, theta, dTheta, psi, fs);
  }

  var commandReg = /([mlvhzcqtsa])([^mlvhzcqtsa]*)/ig; // Consider case:
  // (1) delimiter can be comma or space, where continuous commas
  // or spaces should be seen as one comma.
  // (2) value can be like:
  // '2e-4', 'l.5.9' (ignore 0), 'M-10-10', 'l-2.43e-1,34.9983',
  // 'l-.5E1,54', '121-23-44-11' (no delimiter)

  var numberReg = /-?([0-9]*\.)?[0-9]+([eE]-?[0-9]+)?/g; // var valueSplitReg = /[\s,]+/;

  function createPathProxyFromString(data) {
    if (!data) {
      return new PathProxy_1();
    } // var data = data.replace(/-/g, ' -')
    //     .replace(/  /g, ' ')
    //     .replace(/ /g, ',')
    //     .replace(/,,/g, ',');
    // var n;
    // create pipes so that we can split the data
    // for (n = 0; n < cc.length; n++) {
    //     cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);
    // }
    // data = data.replace(/-/g, ',-');
    // create array
    // var arr = cs.split('|');
    // init context point


    var cpx = 0;
    var cpy = 0;
    var subpathX = cpx;
    var subpathY = cpy;
    var prevCmd;
    var path = new PathProxy_1();
    var CMD = PathProxy_1.CMD; // commandReg.lastIndex = 0;
    // var cmdResult;
    // while ((cmdResult = commandReg.exec(data)) != null) {
    //     var cmdStr = cmdResult[1];
    //     var cmdContent = cmdResult[2];

    var cmdList = data.match(commandReg);

    for (var l = 0; l < cmdList.length; l++) {
      var cmdText = cmdList[l];
      var cmdStr = cmdText.charAt(0);
      var cmd; // String#split is faster a little bit than String#replace or RegExp#exec.
      // var p = cmdContent.split(valueSplitReg);
      // var pLen = 0;
      // for (var i = 0; i < p.length; i++) {
      //     // '' and other invalid str => NaN
      //     var val = parseFloat(p[i]);
      //     !isNaN(val) && (p[pLen++] = val);
      // }

      var p = cmdText.match(numberReg) || [];
      var pLen = p.length;

      for (var i = 0; i < pLen; i++) {
        p[i] = parseFloat(p[i]);
      }

      var off = 0;

      while (off < pLen) {
        var ctlPtx;
        var ctlPty;
        var rx;
        var ry;
        var psi;
        var fa;
        var fs;
        var x1 = cpx;
        var y1 = cpy; // convert l, H, h, V, and v to L

        switch (cmdStr) {
          case 'l':
            cpx += p[off++];
            cpy += p[off++];
            cmd = CMD.L;
            path.addData(cmd, cpx, cpy);
            break;

          case 'L':
            cpx = p[off++];
            cpy = p[off++];
            cmd = CMD.L;
            path.addData(cmd, cpx, cpy);
            break;

          case 'm':
            cpx += p[off++];
            cpy += p[off++];
            cmd = CMD.M;
            path.addData(cmd, cpx, cpy);
            subpathX = cpx;
            subpathY = cpy;
            cmdStr = 'l';
            break;

          case 'M':
            cpx = p[off++];
            cpy = p[off++];
            cmd = CMD.M;
            path.addData(cmd, cpx, cpy);
            subpathX = cpx;
            subpathY = cpy;
            cmdStr = 'L';
            break;

          case 'h':
            cpx += p[off++];
            cmd = CMD.L;
            path.addData(cmd, cpx, cpy);
            break;

          case 'H':
            cpx = p[off++];
            cmd = CMD.L;
            path.addData(cmd, cpx, cpy);
            break;

          case 'v':
            cpy += p[off++];
            cmd = CMD.L;
            path.addData(cmd, cpx, cpy);
            break;

          case 'V':
            cpy = p[off++];
            cmd = CMD.L;
            path.addData(cmd, cpx, cpy);
            break;

          case 'C':
            cmd = CMD.C;
            path.addData(cmd, p[off++], p[off++], p[off++], p[off++], p[off++], p[off++]);
            cpx = p[off - 2];
            cpy = p[off - 1];
            break;

          case 'c':
            cmd = CMD.C;
            path.addData(cmd, p[off++] + cpx, p[off++] + cpy, p[off++] + cpx, p[off++] + cpy, p[off++] + cpx, p[off++] + cpy);
            cpx += p[off - 2];
            cpy += p[off - 1];
            break;

          case 'S':
            ctlPtx = cpx;
            ctlPty = cpy;
            var len = path.len();
            var pathData = path.data;

            if (prevCmd === CMD.C) {
              ctlPtx += cpx - pathData[len - 4];
              ctlPty += cpy - pathData[len - 3];
            }

            cmd = CMD.C;
            x1 = p[off++];
            y1 = p[off++];
            cpx = p[off++];
            cpy = p[off++];
            path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);
            break;

          case 's':
            ctlPtx = cpx;
            ctlPty = cpy;
            var len = path.len();
            var pathData = path.data;

            if (prevCmd === CMD.C) {
              ctlPtx += cpx - pathData[len - 4];
              ctlPty += cpy - pathData[len - 3];
            }

            cmd = CMD.C;
            x1 = cpx + p[off++];
            y1 = cpy + p[off++];
            cpx += p[off++];
            cpy += p[off++];
            path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);
            break;

          case 'Q':
            x1 = p[off++];
            y1 = p[off++];
            cpx = p[off++];
            cpy = p[off++];
            cmd = CMD.Q;
            path.addData(cmd, x1, y1, cpx, cpy);
            break;

          case 'q':
            x1 = p[off++] + cpx;
            y1 = p[off++] + cpy;
            cpx += p[off++];
            cpy += p[off++];
            cmd = CMD.Q;
            path.addData(cmd, x1, y1, cpx, cpy);
            break;

          case 'T':
            ctlPtx = cpx;
            ctlPty = cpy;
            var len = path.len();
            var pathData = path.data;

            if (prevCmd === CMD.Q) {
              ctlPtx += cpx - pathData[len - 4];
              ctlPty += cpy - pathData[len - 3];
            }

            cpx = p[off++];
            cpy = p[off++];
            cmd = CMD.Q;
            path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);
            break;

          case 't':
            ctlPtx = cpx;
            ctlPty = cpy;
            var len = path.len();
            var pathData = path.data;

            if (prevCmd === CMD.Q) {
              ctlPtx += cpx - pathData[len - 4];
              ctlPty += cpy - pathData[len - 3];
            }

            cpx += p[off++];
            cpy += p[off++];
            cmd = CMD.Q;
            path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);
            break;

          case 'A':
            rx = p[off++];
            ry = p[off++];
            psi = p[off++];
            fa = p[off++];
            fs = p[off++];
            x1 = cpx, y1 = cpy;
            cpx = p[off++];
            cpy = p[off++];
            cmd = CMD.A;
            processArc(x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path);
            break;

          case 'a':
            rx = p[off++];
            ry = p[off++];
            psi = p[off++];
            fa = p[off++];
            fs = p[off++];
            x1 = cpx, y1 = cpy;
            cpx += p[off++];
            cpy += p[off++];
            cmd = CMD.A;
            processArc(x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path);
            break;
        }
      }

      if (cmdStr === 'z' || cmdStr === 'Z') {
        cmd = CMD.Z;
        path.addData(cmd); // z may be in the middle of the path.

        cpx = subpathX;
        cpy = subpathY;
      }

      prevCmd = cmd;
    }

    path.toStatic();
    return path;
  } // TODO Optimize double memory cost problem


  function createPathOptions(str, opts) {
    var pathProxy = createPathProxyFromString(str);
    opts = opts || {};

    opts.buildPath = function (path) {
      if (path.setData) {
        path.setData(pathProxy.data); // Svg and vml renderer don't have context

        var ctx = path.getContext();

        if (ctx) {
          path.rebuildPath(ctx);
        }
      } else {
        var ctx = path;
        pathProxy.rebuildPath(ctx);
      }
    };

    opts.applyTransform = function (m) {
      transformPath(pathProxy, m);
      this.dirty(true);
    };

    return opts;
  }
  /**
   * Create a Path object from path string data
   * http://www.w3.org/TR/SVG/paths.html#PathData
   * @param  {Object} opts Other options
   */


  function createFromString(str, opts) {
    return new Path_1(createPathOptions(str, opts));
  }
  /**
   * Create a Path class from path string data
   * @param  {string} str
   * @param  {Object} opts Other options
   */


  function extendFromString(str, opts) {
    return Path_1.extend(createPathOptions(str, opts));
  }
  /**
   * Merge multiple paths
   */
  // TODO Apply transform
  // TODO stroke dash
  // TODO Optimize double memory cost problem


  function mergePath(pathEls, opts) {
    var pathList = [];
    var len = pathEls.length;

    for (var i = 0; i < len; i++) {
      var pathEl = pathEls[i];

      if (!pathEl.path) {
        pathEl.createPathProxy();
      }

      if (pathEl.__dirtyPath) {
        pathEl.buildPath(pathEl.path, pathEl.shape, true);
      }

      pathList.push(pathEl.path);
    }

    var pathBundle = new Path_1(opts); // Need path proxy.

    pathBundle.createPathProxy();

    pathBundle.buildPath = function (path) {
      path.appendPath(pathList); // Svg and vml renderer don't have context

      var ctx = path.getContext();

      if (ctx) {
        path.rebuildPath(ctx);
      }
    };

    return pathBundle;
  }

  var createFromString_1 = createFromString;
  var extendFromString_1 = extendFromString;
  var mergePath_1 = mergePath;

  var path$1 = {
  	createFromString: createFromString_1,
  	extendFromString: extendFromString_1,
  	mergePath: mergePath_1
  };

  var ContextCachedBy$3 = constant.ContextCachedBy;

  /**
   * @alias zrender/graphic/Text
   * @extends module:zrender/graphic/Displayable
   * @constructor
   * @param {Object} opts
   */
  var Text = function (opts) {
    // jshint ignore:line
    Displayable_1.call(this, opts);
  };

  Text.prototype = {
    constructor: Text,
    type: 'text',
    brush: function (ctx, prevEl) {
      var style = this.style; // Optimize, avoid normalize every time.

      this.__dirty && text$1.normalizeTextStyle(style, true); // Use props with prefix 'text'.

      style.fill = style.stroke = style.shadowBlur = style.shadowColor = style.shadowOffsetX = style.shadowOffsetY = null;
      var text = style.text; // Convert to string

      text != null && (text += ''); // Do not apply style.bind in Text node. Because the real bind job
      // is in textHelper.renderText, and performance of text render should
      // be considered.
      // style.bind(ctx, this, prevEl);

      if (!text$1.needDrawText(text, style)) {
        // The current el.style is not applied
        // and should not be used as cache.
        ctx.__attrCachedBy = ContextCachedBy$3.NONE;
        return;
      }

      this.setTransform(ctx);
      text$1.renderText(this, ctx, text, style, null, prevEl);
      this.restoreTransform(ctx);
    },
    getBoundingRect: function () {
      var style = this.style; // Optimize, avoid normalize every time.

      this.__dirty && text$1.normalizeTextStyle(style, true);

      if (!this._rect) {
        var text$2 = style.text;
        text$2 != null ? text$2 += '' : text$2 = '';
        var rect = text.getBoundingRect(style.text + '', style.font, style.textAlign, style.textVerticalAlign, style.textPadding, style.textLineHeight, style.rich);
        rect.x += style.x || 0;
        rect.y += style.y || 0;

        if (text$1.getStroke(style.textStroke, style.textStrokeWidth)) {
          var w = style.textStrokeWidth;
          rect.x -= w / 2;
          rect.y -= w / 2;
          rect.width += w;
          rect.height += w;
        }

        this._rect = rect;
      }

      return this._rect;
    }
  };
  util.inherits(Text, Displayable_1);
  var _default$y = Text;
  var Text_1 = _default$y;

  /**
   * 圆形
   * @module zrender/shape/Circle
   */
  var _default$z = Path_1.extend({
    type: 'circle',
    shape: {
      cx: 0,
      cy: 0,
      r: 0
    },
    buildPath: function (ctx, shape, inBundle) {
      // Better stroking in ShapeBundle
      // Always do it may have performence issue ( fill may be 2x more cost)
      if (inBundle) {
        ctx.moveTo(shape.cx + shape.r, shape.cy);
      } // else {
      //     if (ctx.allocate && !ctx.data.length) {
      //         ctx.allocate(ctx.CMD_MEM_SIZE.A);
      //     }
      // }
      // Better stroking in ShapeBundle
      // ctx.moveTo(shape.cx + shape.r, shape.cy);


      ctx.arc(shape.cx, shape.cy, shape.r, 0, Math.PI * 2, true);
    }
  });

  var Circle = _default$z;

  // Fix weird bug in some version of IE11 (like 11.0.9600.178**),
  // where exception "unexpected call to method or property access"
  // might be thrown when calling ctx.fill or ctx.stroke after a path
  // whose area size is zero is drawn and ctx.clip() is called and
  // shadowBlur is set. See #4572, #3112, #5777.
  // (e.g.,
  //  ctx.moveTo(10, 10);
  //  ctx.lineTo(20, 10);
  //  ctx.closePath();
  //  ctx.clip();
  //  ctx.shadowBlur = 10;
  //  ...
  //  ctx.fill();
  // )
  var shadowTemp = [['shadowBlur', 0], ['shadowColor', '#000'], ['shadowOffsetX', 0], ['shadowOffsetY', 0]];

  function _default$A(orignalBrush) {
    // version string can be: '11.0'
    return env_1.browser.ie && env_1.browser.version >= 11 ? function () {
      var clipPaths = this.__clipPaths;
      var style = this.style;
      var modified;

      if (clipPaths) {
        for (var i = 0; i < clipPaths.length; i++) {
          var clipPath = clipPaths[i];
          var shape = clipPath && clipPath.shape;
          var type = clipPath && clipPath.type;

          if (shape && (type === 'sector' && shape.startAngle === shape.endAngle || type === 'rect' && (!shape.width || !shape.height))) {
            for (var j = 0; j < shadowTemp.length; j++) {
              // It is save to put shadowTemp static, because shadowTemp
              // will be all modified each item brush called.
              shadowTemp[j][2] = style[shadowTemp[j][0]];
              style[shadowTemp[j][0]] = shadowTemp[j][1];
            }

            modified = true;
            break;
          }
        }
      }

      orignalBrush.apply(this, arguments);

      if (modified) {
        for (var j = 0; j < shadowTemp.length; j++) {
          style[shadowTemp[j][0]] = shadowTemp[j][2];
        }
      }
    } : orignalBrush;
  }

  var fixClipWithShadow = _default$A;

  /**
   * 扇形
   * @module zrender/graphic/shape/Sector
   */
  var _default$B = Path_1.extend({
    type: 'sector',
    shape: {
      cx: 0,
      cy: 0,
      r0: 0,
      r: 0,
      startAngle: 0,
      endAngle: Math.PI * 2,
      clockwise: true
    },
    brush: fixClipWithShadow(Path_1.prototype.brush),
    buildPath: function (ctx, shape) {
      var x = shape.cx;
      var y = shape.cy;
      var r0 = Math.max(shape.r0 || 0, 0);
      var r = Math.max(shape.r, 0);
      var startAngle = shape.startAngle;
      var endAngle = shape.endAngle;
      var clockwise = shape.clockwise;
      var unitX = Math.cos(startAngle);
      var unitY = Math.sin(startAngle);
      ctx.moveTo(unitX * r0 + x, unitY * r0 + y);
      ctx.lineTo(unitX * r + x, unitY * r + y);
      ctx.arc(x, y, r, startAngle, endAngle, !clockwise);
      ctx.lineTo(Math.cos(endAngle) * r0 + x, Math.sin(endAngle) * r0 + y);

      if (r0 !== 0) {
        ctx.arc(x, y, r0, endAngle, startAngle, clockwise);
      }

      ctx.closePath();
    }
  });

  var Sector = _default$B;

  /**
   * 圆环
   * @module zrender/graphic/shape/Ring
   */
  var _default$C = Path_1.extend({
    type: 'ring',
    shape: {
      cx: 0,
      cy: 0,
      r: 0,
      r0: 0
    },
    buildPath: function (ctx, shape) {
      var x = shape.cx;
      var y = shape.cy;
      var PI2 = Math.PI * 2;
      ctx.moveTo(x + shape.r, y);
      ctx.arc(x, y, shape.r, 0, PI2, false);
      ctx.moveTo(x + shape.r0, y);
      ctx.arc(x, y, shape.r0, 0, PI2, true);
    }
  });

  var Ring = _default$C;

  var v2Distance = vector.distance;

  /**
   * Catmull-Rom spline 插值折线
   * @module zrender/shape/util/smoothSpline
   * @author pissang (https://www.github.com/pissang)
   *         Kener (@Kener-林峰, kener.linfeng@gmail.com)
   *         errorrik (errorrik@gmail.com)
   */

  /**
   * @inner
   */
  function interpolate(p0, p1, p2, p3, t, t2, t3) {
    var v0 = (p2 - p0) * 0.5;
    var v1 = (p3 - p1) * 0.5;
    return (2 * (p1 - p2) + v0 + v1) * t3 + (-3 * (p1 - p2) - 2 * v0 - v1) * t2 + v0 * t + p1;
  }
  /**
   * @alias module:zrender/shape/util/smoothSpline
   * @param {Array} points 线段顶点数组
   * @param {boolean} isLoop
   * @return {Array}
   */


  function _default$D(points, isLoop) {
    var len = points.length;
    var ret = [];
    var distance = 0;

    for (var i = 1; i < len; i++) {
      distance += v2Distance(points[i - 1], points[i]);
    }

    var segs = distance / 2;
    segs = segs < len ? len : segs;

    for (var i = 0; i < segs; i++) {
      var pos = i / (segs - 1) * (isLoop ? len : len - 1);
      var idx = Math.floor(pos);
      var w = pos - idx;
      var p0;
      var p1 = points[idx % len];
      var p2;
      var p3;

      if (!isLoop) {
        p0 = points[idx === 0 ? idx : idx - 1];
        p2 = points[idx > len - 2 ? len - 1 : idx + 1];
        p3 = points[idx > len - 3 ? len - 1 : idx + 2];
      } else {
        p0 = points[(idx - 1 + len) % len];
        p2 = points[(idx + 1) % len];
        p3 = points[(idx + 2) % len];
      }

      var w2 = w * w;
      var w3 = w * w2;
      ret.push([interpolate(p0[0], p1[0], p2[0], p3[0], w, w2, w3), interpolate(p0[1], p1[1], p2[1], p3[1], w, w2, w3)]);
    }

    return ret;
  }

  var smoothSpline = _default$D;

  var v2Min = vector.min;
  var v2Max = vector.max;
  var v2Scale = vector.scale;
  var v2Distance$1 = vector.distance;
  var v2Add = vector.add;
  var v2Clone = vector.clone;
  var v2Sub = vector.sub;

  /**
   * 贝塞尔平滑曲线
   * @module zrender/shape/util/smoothBezier
   * @author pissang (https://www.github.com/pissang)
   *         Kener (@Kener-林峰, kener.linfeng@gmail.com)
   *         errorrik (errorrik@gmail.com)
   */

  /**
   * 贝塞尔平滑曲线
   * @alias module:zrender/shape/util/smoothBezier
   * @param {Array} points 线段顶点数组
   * @param {number} smooth 平滑等级, 0-1
   * @param {boolean} isLoop
   * @param {Array} constraint 将计算出来的控制点约束在一个包围盒内
   *                           比如 [[0, 0], [100, 100]], 这个包围盒会与
   *                           整个折线的包围盒做一个并集用来约束控制点。
   * @param {Array} 计算出来的控制点数组
   */
  function _default$E(points, smooth, isLoop, constraint) {
    var cps = [];
    var v = [];
    var v1 = [];
    var v2 = [];
    var prevPoint;
    var nextPoint;
    var min;
    var max;

    if (constraint) {
      min = [Infinity, Infinity];
      max = [-Infinity, -Infinity];

      for (var i = 0, len = points.length; i < len; i++) {
        v2Min(min, min, points[i]);
        v2Max(max, max, points[i]);
      } // 与指定的包围盒做并集


      v2Min(min, min, constraint[0]);
      v2Max(max, max, constraint[1]);
    }

    for (var i = 0, len = points.length; i < len; i++) {
      var point = points[i];

      if (isLoop) {
        prevPoint = points[i ? i - 1 : len - 1];
        nextPoint = points[(i + 1) % len];
      } else {
        if (i === 0 || i === len - 1) {
          cps.push(v2Clone(points[i]));
          continue;
        } else {
          prevPoint = points[i - 1];
          nextPoint = points[i + 1];
        }
      }

      v2Sub(v, nextPoint, prevPoint); // use degree to scale the handle length

      v2Scale(v, v, smooth);
      var d0 = v2Distance$1(point, prevPoint);
      var d1 = v2Distance$1(point, nextPoint);
      var sum = d0 + d1;

      if (sum !== 0) {
        d0 /= sum;
        d1 /= sum;
      }

      v2Scale(v1, v, -d0);
      v2Scale(v2, v, d1);
      var cp0 = v2Add([], point, v1);
      var cp1 = v2Add([], point, v2);

      if (constraint) {
        v2Max(cp0, cp0, min);
        v2Min(cp0, cp0, max);
        v2Max(cp1, cp1, min);
        v2Min(cp1, cp1, max);
      }

      cps.push(cp0);
      cps.push(cp1);
    }

    if (isLoop) {
      cps.push(cps.shift());
    }

    return cps;
  }

  var smoothBezier = _default$E;

  function buildPath$1(ctx, shape, closePath) {
    var points = shape.points;
    var smooth = shape.smooth;

    if (points && points.length >= 2) {
      if (smooth && smooth !== 'spline') {
        var controlPoints = smoothBezier(points, smooth, closePath, shape.smoothConstraint);
        ctx.moveTo(points[0][0], points[0][1]);
        var len = points.length;

        for (var i = 0; i < (closePath ? len : len - 1); i++) {
          var cp1 = controlPoints[i * 2];
          var cp2 = controlPoints[i * 2 + 1];
          var p = points[(i + 1) % len];
          ctx.bezierCurveTo(cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]);
        }
      } else {
        if (smooth === 'spline') {
          points = smoothSpline(points, closePath);
        }

        ctx.moveTo(points[0][0], points[0][1]);

        for (var i = 1, l = points.length; i < l; i++) {
          ctx.lineTo(points[i][0], points[i][1]);
        }
      }

      closePath && ctx.closePath();
    }
  }

  var buildPath_1$1 = buildPath$1;

  var poly = {
  	buildPath: buildPath_1$1
  };

  /**
   * 多边形
   * @module zrender/shape/Polygon
   */
  var _default$F = Path_1.extend({
    type: 'polygon',
    shape: {
      points: null,
      smooth: false,
      smoothConstraint: null
    },
    buildPath: function (ctx, shape) {
      poly.buildPath(ctx, shape, true);
    }
  });

  var Polygon = _default$F;

  /**
   * @module zrender/graphic/shape/Polyline
   */
  var _default$G = Path_1.extend({
    type: 'polyline',
    shape: {
      points: null,
      smooth: false,
      smoothConstraint: null
    },
    style: {
      stroke: '#000',
      fill: null
    },
    buildPath: function (ctx, shape) {
      poly.buildPath(ctx, shape, false);
    }
  });

  var Polyline = _default$G;

  /**
   * Sub-pixel optimize for canvas rendering, prevent from blur
   * when rendering a thin vertical/horizontal line.
   */
  var round = Math.round;
  /**
   * Sub pixel optimize line for canvas
   *
   * @param {Object} outputShape The modification will be performed on `outputShape`.
   *                 `outputShape` and `inputShape` can be the same object.
   *                 `outputShape` object can be used repeatly, because all of
   *                 the `x1`, `x2`, `y1`, `y2` will be assigned in this method.
   * @param {Object} [inputShape]
   * @param {number} [inputShape.x1]
   * @param {number} [inputShape.y1]
   * @param {number} [inputShape.x2]
   * @param {number} [inputShape.y2]
   * @param {Object} [style]
   * @param {number} [style.lineWidth] If `null`/`undefined`/`0`, do not optimize.
   */

  function subPixelOptimizeLine(outputShape, inputShape, style) {
    if (!inputShape) {
      return;
    }

    var x1 = inputShape.x1;
    var x2 = inputShape.x2;
    var y1 = inputShape.y1;
    var y2 = inputShape.y2;
    outputShape.x1 = x1;
    outputShape.x2 = x2;
    outputShape.y1 = y1;
    outputShape.y2 = y2;
    var lineWidth = style && style.lineWidth;

    if (!lineWidth) {
      return;
    }

    if (round(x1 * 2) === round(x2 * 2)) {
      outputShape.x1 = outputShape.x2 = subPixelOptimize(x1, lineWidth, true);
    }

    if (round(y1 * 2) === round(y2 * 2)) {
      outputShape.y1 = outputShape.y2 = subPixelOptimize(y1, lineWidth, true);
    }
  }
  /**
   * Sub pixel optimize rect for canvas
   *
   * @param {Object} outputShape The modification will be performed on `outputShape`.
   *                 `outputShape` and `inputShape` can be the same object.
   *                 `outputShape` object can be used repeatly, because all of
   *                 the `x`, `y`, `width`, `height` will be assigned in this method.
   * @param {Object} [inputShape]
   * @param {number} [inputShape.x]
   * @param {number} [inputShape.y]
   * @param {number} [inputShape.width]
   * @param {number} [inputShape.height]
   * @param {Object} [style]
   * @param {number} [style.lineWidth] If `null`/`undefined`/`0`, do not optimize.
   */


  function subPixelOptimizeRect(outputShape, inputShape, style) {
    if (!inputShape) {
      return;
    }

    var originX = inputShape.x;
    var originY = inputShape.y;
    var originWidth = inputShape.width;
    var originHeight = inputShape.height;
    outputShape.x = originX;
    outputShape.y = originY;
    outputShape.width = originWidth;
    outputShape.height = originHeight;
    var lineWidth = style && style.lineWidth;

    if (!lineWidth) {
      return;
    }

    outputShape.x = subPixelOptimize(originX, lineWidth, true);
    outputShape.y = subPixelOptimize(originY, lineWidth, true);
    outputShape.width = Math.max(subPixelOptimize(originX + originWidth, lineWidth, false) - outputShape.x, originWidth === 0 ? 0 : 1);
    outputShape.height = Math.max(subPixelOptimize(originY + originHeight, lineWidth, false) - outputShape.y, originHeight === 0 ? 0 : 1);
  }
  /**
   * Sub pixel optimize for canvas
   *
   * @param {number} position Coordinate, such as x, y
   * @param {number} lineWidth If `null`/`undefined`/`0`, do not optimize.
   * @param {boolean=} positiveOrNegative Default false (negative).
   * @return {number} Optimized position.
   */


  function subPixelOptimize(position, lineWidth, positiveOrNegative) {
    if (!lineWidth) {
      return position;
    } // Assure that (position + lineWidth / 2) is near integer edge,
    // otherwise line will be fuzzy in canvas.


    var doubledPosition = round(position * 2);
    return (doubledPosition + round(lineWidth)) % 2 === 0 ? doubledPosition / 2 : (doubledPosition + (positiveOrNegative ? 1 : -1)) / 2;
  }

  var subPixelOptimizeLine_1 = subPixelOptimizeLine;
  var subPixelOptimizeRect_1 = subPixelOptimizeRect;
  var subPixelOptimize_2 = subPixelOptimize;

  var subPixelOptimize_1 = {
  	subPixelOptimizeLine: subPixelOptimizeLine_1,
  	subPixelOptimizeRect: subPixelOptimizeRect_1,
  	subPixelOptimize: subPixelOptimize_2
  };

  var subPixelOptimizeRect$1 = subPixelOptimize_1.subPixelOptimizeRect;

  /**
   * 矩形
   * @module zrender/graphic/shape/Rect
   */
  // Avoid create repeatly.
  var subPixelOptimizeOutputShape = {};

  var _default$H = Path_1.extend({
    type: 'rect',
    shape: {
      // 左上、右上、右下、左下角的半径依次为r1、r2、r3、r4
      // r缩写为1         相当于 [1, 1, 1, 1]
      // r缩写为[1]       相当于 [1, 1, 1, 1]
      // r缩写为[1, 2]    相当于 [1, 2, 1, 2]
      // r缩写为[1, 2, 3] 相当于 [1, 2, 3, 2]
      r: 0,
      x: 0,
      y: 0,
      width: 0,
      height: 0
    },
    buildPath: function (ctx, shape) {
      var x;
      var y;
      var width;
      var height;

      if (this.subPixelOptimize) {
        subPixelOptimizeRect$1(subPixelOptimizeOutputShape, shape, this.style);
        x = subPixelOptimizeOutputShape.x;
        y = subPixelOptimizeOutputShape.y;
        width = subPixelOptimizeOutputShape.width;
        height = subPixelOptimizeOutputShape.height;
        subPixelOptimizeOutputShape.r = shape.r;
        shape = subPixelOptimizeOutputShape;
      } else {
        x = shape.x;
        y = shape.y;
        width = shape.width;
        height = shape.height;
      }

      if (!shape.r) {
        ctx.rect(x, y, width, height);
      } else {
        roundRect.buildPath(ctx, shape);
      }

      ctx.closePath();
      return;
    }
  });

  var Rect = _default$H;

  var subPixelOptimizeLine$1 = subPixelOptimize_1.subPixelOptimizeLine;

  /**
   * 直线
   * @module zrender/graphic/shape/Line
   */
  // Avoid create repeatly.
  var subPixelOptimizeOutputShape$1 = {};

  var _default$I = Path_1.extend({
    type: 'line',
    shape: {
      // Start point
      x1: 0,
      y1: 0,
      // End point
      x2: 0,
      y2: 0,
      percent: 1
    },
    style: {
      stroke: '#000',
      fill: null
    },
    buildPath: function (ctx, shape) {
      var x1;
      var y1;
      var x2;
      var y2;

      if (this.subPixelOptimize) {
        subPixelOptimizeLine$1(subPixelOptimizeOutputShape$1, shape, this.style);
        x1 = subPixelOptimizeOutputShape$1.x1;
        y1 = subPixelOptimizeOutputShape$1.y1;
        x2 = subPixelOptimizeOutputShape$1.x2;
        y2 = subPixelOptimizeOutputShape$1.y2;
      } else {
        x1 = shape.x1;
        y1 = shape.y1;
        x2 = shape.x2;
        y2 = shape.y2;
      }

      var percent = shape.percent;

      if (percent === 0) {
        return;
      }

      ctx.moveTo(x1, y1);

      if (percent < 1) {
        x2 = x1 * (1 - percent) + x2 * percent;
        y2 = y1 * (1 - percent) + y2 * percent;
      }

      ctx.lineTo(x2, y2);
    },

    /**
     * Get point at percent
     * @param  {number} percent
     * @return {Array.<number>}
     */
    pointAt: function (p) {
      var shape = this.shape;
      return [shape.x1 * (1 - p) + shape.x2 * p, shape.y1 * (1 - p) + shape.y2 * p];
    }
  });

  var Line = _default$I;

  var quadraticSubdivide$1 = curve.quadraticSubdivide;
  var cubicSubdivide$1 = curve.cubicSubdivide;
  var quadraticAt$1 = curve.quadraticAt;
  var cubicAt$1 = curve.cubicAt;
  var quadraticDerivativeAt$1 = curve.quadraticDerivativeAt;
  var cubicDerivativeAt$1 = curve.cubicDerivativeAt;

  /**
   * 贝塞尔曲线
   * @module zrender/shape/BezierCurve
   */
  var out = [];

  function someVectorAt(shape, t, isTangent) {
    var cpx2 = shape.cpx2;
    var cpy2 = shape.cpy2;

    if (cpx2 === null || cpy2 === null) {
      return [(isTangent ? cubicDerivativeAt$1 : cubicAt$1)(shape.x1, shape.cpx1, shape.cpx2, shape.x2, t), (isTangent ? cubicDerivativeAt$1 : cubicAt$1)(shape.y1, shape.cpy1, shape.cpy2, shape.y2, t)];
    } else {
      return [(isTangent ? quadraticDerivativeAt$1 : quadraticAt$1)(shape.x1, shape.cpx1, shape.x2, t), (isTangent ? quadraticDerivativeAt$1 : quadraticAt$1)(shape.y1, shape.cpy1, shape.y2, t)];
    }
  }

  var _default$J = Path_1.extend({
    type: 'bezier-curve',
    shape: {
      x1: 0,
      y1: 0,
      x2: 0,
      y2: 0,
      cpx1: 0,
      cpy1: 0,
      // cpx2: 0,
      // cpy2: 0
      // Curve show percent, for animating
      percent: 1
    },
    style: {
      stroke: '#000',
      fill: null
    },
    buildPath: function (ctx, shape) {
      var x1 = shape.x1;
      var y1 = shape.y1;
      var x2 = shape.x2;
      var y2 = shape.y2;
      var cpx1 = shape.cpx1;
      var cpy1 = shape.cpy1;
      var cpx2 = shape.cpx2;
      var cpy2 = shape.cpy2;
      var percent = shape.percent;

      if (percent === 0) {
        return;
      }

      ctx.moveTo(x1, y1);

      if (cpx2 == null || cpy2 == null) {
        if (percent < 1) {
          quadraticSubdivide$1(x1, cpx1, x2, percent, out);
          cpx1 = out[1];
          x2 = out[2];
          quadraticSubdivide$1(y1, cpy1, y2, percent, out);
          cpy1 = out[1];
          y2 = out[2];
        }

        ctx.quadraticCurveTo(cpx1, cpy1, x2, y2);
      } else {
        if (percent < 1) {
          cubicSubdivide$1(x1, cpx1, cpx2, x2, percent, out);
          cpx1 = out[1];
          cpx2 = out[2];
          x2 = out[3];
          cubicSubdivide$1(y1, cpy1, cpy2, y2, percent, out);
          cpy1 = out[1];
          cpy2 = out[2];
          y2 = out[3];
        }

        ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);
      }
    },

    /**
     * Get point at percent
     * @param  {number} t
     * @return {Array.<number>}
     */
    pointAt: function (t) {
      return someVectorAt(this.shape, t, false);
    },

    /**
     * Get tangent at percent
     * @param  {number} t
     * @return {Array.<number>}
     */
    tangentAt: function (t) {
      var p = someVectorAt(this.shape, t, true);
      return vector.normalize(p, p);
    }
  });

  var BezierCurve = _default$J;

  /**
   * 圆弧
   * @module zrender/graphic/shape/Arc
   */
  var _default$K = Path_1.extend({
    type: 'arc',
    shape: {
      cx: 0,
      cy: 0,
      r: 0,
      startAngle: 0,
      endAngle: Math.PI * 2,
      clockwise: true
    },
    style: {
      stroke: '#000',
      fill: null
    },
    buildPath: function (ctx, shape) {
      var x = shape.cx;
      var y = shape.cy;
      var r = Math.max(shape.r, 0);
      var startAngle = shape.startAngle;
      var endAngle = shape.endAngle;
      var clockwise = shape.clockwise;
      var unitX = Math.cos(startAngle);
      var unitY = Math.sin(startAngle);
      ctx.moveTo(unitX * r + x, unitY * r + y);
      ctx.arc(x, y, r, startAngle, endAngle, !clockwise);
    }
  });

  var Arc = _default$K;

  // CompoundPath to improve performance
  var _default$L = Path_1.extend({
    type: 'compound',
    shape: {
      paths: null
    },
    _updatePathDirty: function () {
      var dirtyPath = this.__dirtyPath;
      var paths = this.shape.paths;

      for (var i = 0; i < paths.length; i++) {
        // Mark as dirty if any subpath is dirty
        dirtyPath = dirtyPath || paths[i].__dirtyPath;
      }

      this.__dirtyPath = dirtyPath;
      this.__dirty = this.__dirty || dirtyPath;
    },
    beforeBrush: function () {
      this._updatePathDirty();

      var paths = this.shape.paths || [];
      var scale = this.getGlobalScale(); // Update path scale

      for (var i = 0; i < paths.length; i++) {
        if (!paths[i].path) {
          paths[i].createPathProxy();
        }

        paths[i].path.setScale(scale[0], scale[1], paths[i].segmentIgnoreThreshold);
      }
    },
    buildPath: function (ctx, shape) {
      var paths = shape.paths || [];

      for (var i = 0; i < paths.length; i++) {
        paths[i].buildPath(ctx, paths[i].shape, true);
      }
    },
    afterBrush: function () {
      var paths = this.shape.paths || [];

      for (var i = 0; i < paths.length; i++) {
        paths[i].__dirtyPath = false;
      }
    },
    getBoundingRect: function () {
      this._updatePathDirty();

      return Path_1.prototype.getBoundingRect.call(this);
    }
  });

  var CompoundPath = _default$L;

  /**
   * @param {Array.<Object>} colorStops
   */
  var Gradient = function (colorStops) {
    this.colorStops = colorStops || [];
  };

  Gradient.prototype = {
    constructor: Gradient,
    addColorStop: function (offset, color) {
      this.colorStops.push({
        offset: offset,
        color: color
      });
    }
  };
  var _default$M = Gradient;
  var Gradient_1 = _default$M;

  /**
   * x, y, x2, y2 are all percent from 0 to 1
   * @param {number} [x=0]
   * @param {number} [y=0]
   * @param {number} [x2=1]
   * @param {number} [y2=0]
   * @param {Array.<Object>} colorStops
   * @param {boolean} [globalCoord=false]
   */
  var LinearGradient = function (x, y, x2, y2, colorStops, globalCoord) {
    // Should do nothing more in this constructor. Because gradient can be
    // declard by `color: {type: 'linear', colorStops: ...}`, where
    // this constructor will not be called.
    this.x = x == null ? 0 : x;
    this.y = y == null ? 0 : y;
    this.x2 = x2 == null ? 1 : x2;
    this.y2 = y2 == null ? 0 : y2; // Can be cloned

    this.type = 'linear'; // If use global coord

    this.global = globalCoord || false;
    Gradient_1.call(this, colorStops);
  };

  LinearGradient.prototype = {
    constructor: LinearGradient
  };
  util.inherits(LinearGradient, Gradient_1);
  var _default$N = LinearGradient;
  var LinearGradient_1 = _default$N;

  /**
   * x, y, r are all percent from 0 to 1
   * @param {number} [x=0.5]
   * @param {number} [y=0.5]
   * @param {number} [r=0.5]
   * @param {Array.<Object>} [colorStops]
   * @param {boolean} [globalCoord=false]
   */
  var RadialGradient = function (x, y, r, colorStops, globalCoord) {
    // Should do nothing more in this constructor. Because gradient can be
    // declard by `color: {type: 'radial', colorStops: ...}`, where
    // this constructor will not be called.
    this.x = x == null ? 0.5 : x;
    this.y = y == null ? 0.5 : y;
    this.r = r == null ? 0.5 : r; // Can be cloned

    this.type = 'radial'; // If use global coord

    this.global = globalCoord || false;
    Gradient_1.call(this, colorStops);
  };

  RadialGradient.prototype = {
    constructor: RadialGradient
  };
  util.inherits(RadialGradient, Gradient_1);
  var _default$O = RadialGradient;
  var RadialGradient_1 = _default$O;

  var inherits$1 = util.inherits;





  /**
   * Displayable for incremental rendering. It will be rendered in a separate layer
   * IncrementalDisplay have two main methods. `clearDisplayables` and `addDisplayables`
   * addDisplayables will render the added displayables incremetally.
   *
   * It use a not clearFlag to tell the painter don't clear the layer if it's the first element.
   */
  // TODO Style override ?
  function IncrementalDisplayble(opts) {
    Displayable_1.call(this, opts);
    this._displayables = [];
    this._temporaryDisplayables = [];
    this._cursor = 0;
    this.notClear = true;
  }

  IncrementalDisplayble.prototype.incremental = true;

  IncrementalDisplayble.prototype.clearDisplaybles = function () {
    this._displayables = [];
    this._temporaryDisplayables = [];
    this._cursor = 0;
    this.dirty();
    this.notClear = false;
  };

  IncrementalDisplayble.prototype.addDisplayable = function (displayable, notPersistent) {
    if (notPersistent) {
      this._temporaryDisplayables.push(displayable);
    } else {
      this._displayables.push(displayable);
    }

    this.dirty();
  };

  IncrementalDisplayble.prototype.addDisplayables = function (displayables, notPersistent) {
    notPersistent = notPersistent || false;

    for (var i = 0; i < displayables.length; i++) {
      this.addDisplayable(displayables[i], notPersistent);
    }
  };

  IncrementalDisplayble.prototype.eachPendingDisplayable = function (cb) {
    for (var i = this._cursor; i < this._displayables.length; i++) {
      cb && cb(this._displayables[i]);
    }

    for (var i = 0; i < this._temporaryDisplayables.length; i++) {
      cb && cb(this._temporaryDisplayables[i]);
    }
  };

  IncrementalDisplayble.prototype.update = function () {
    this.updateTransform();

    for (var i = this._cursor; i < this._displayables.length; i++) {
      var displayable = this._displayables[i]; // PENDING

      displayable.parent = this;
      displayable.update();
      displayable.parent = null;
    }

    for (var i = 0; i < this._temporaryDisplayables.length; i++) {
      var displayable = this._temporaryDisplayables[i]; // PENDING

      displayable.parent = this;
      displayable.update();
      displayable.parent = null;
    }
  };

  IncrementalDisplayble.prototype.brush = function (ctx, prevEl) {
    // Render persistant displayables.
    for (var i = this._cursor; i < this._displayables.length; i++) {
      var displayable = this._displayables[i];
      displayable.beforeBrush && displayable.beforeBrush(ctx);
      displayable.brush(ctx, i === this._cursor ? null : this._displayables[i - 1]);
      displayable.afterBrush && displayable.afterBrush(ctx);
    }

    this._cursor = i; // Render temporary displayables.

    for (var i = 0; i < this._temporaryDisplayables.length; i++) {
      var displayable = this._temporaryDisplayables[i];
      displayable.beforeBrush && displayable.beforeBrush(ctx);
      displayable.brush(ctx, i === 0 ? null : this._temporaryDisplayables[i - 1]);
      displayable.afterBrush && displayable.afterBrush(ctx);
    }

    this._temporaryDisplayables = [];
    this.notClear = true;
  };

  var m = [];

  IncrementalDisplayble.prototype.getBoundingRect = function () {
    if (!this._rect) {
      var rect = new BoundingRect_1(Infinity, Infinity, -Infinity, -Infinity);

      for (var i = 0; i < this._displayables.length; i++) {
        var displayable = this._displayables[i];
        var childRect = displayable.getBoundingRect().clone();

        if (displayable.needLocalTransform()) {
          childRect.applyTransform(displayable.getLocalTransform(m));
        }

        rect.union(childRect);
      }

      this._rect = rect;
    }

    return this._rect;
  };

  IncrementalDisplayble.prototype.contain = function (x, y) {
    var localPos = this.transformCoordToLocal(x, y);
    var rect = this.getBoundingRect();

    if (rect.contain(localPos[0], localPos[1])) {
      for (var i = 0; i < this._displayables.length; i++) {
        var displayable = this._displayables[i];

        if (displayable.contain(x, y)) {
          return true;
        }
      }
    }

    return false;
  };

  inherits$1(IncrementalDisplayble, Displayable_1);
  var _default$P = IncrementalDisplayble;
  var IncrementalDisplayable = _default$P;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

















  var Image$2 = Image$1;



  var Group_1$1 = Group_1;



  var Text_1$1 = Text_1;



  var Circle_1 = Circle;



  var Sector_1 = Sector;



  var Ring_1 = Ring;



  var Polygon_1 = Polygon;



  var Polyline_1 = Polyline;



  var Rect_1 = Rect;



  var Line_1 = Line;



  var BezierCurve_1 = BezierCurve;



  var Arc_1 = Arc;



  var CompoundPath_1 = CompoundPath;



  var LinearGradient_1$1 = LinearGradient_1;



  var RadialGradient_1$1 = RadialGradient_1;



  var BoundingRect_1$1 = BoundingRect_1;



  var IncrementalDisplayable_1 = IncrementalDisplayable;



  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var mathMax$3 = Math.max;
  var mathMin$3 = Math.min;
  var EMPTY_OBJ = {};
  var Z2_EMPHASIS_LIFT = 1; // key: label model property nane, value: style property name.

  var CACHED_LABEL_STYLE_PROPERTIES = {
    color: 'textFill',
    textBorderColor: 'textStroke',
    textBorderWidth: 'textStrokeWidth'
  };
  var EMPHASIS = 'emphasis';
  var NORMAL = 'normal'; // Reserve 0 as default.

  var _highlightNextDigit = 1;
  var _highlightKeyMap = {};
  var _customShapeMap = {};
  /**
   * Extend shape with parameters
   */

  function extendShape(opts) {
    return Path_1.extend(opts);
  }
  /**
   * Extend path
   */


  function extendPath(pathData, opts) {
    return path$1.extendFromString(pathData, opts);
  }
  /**
   * Register a user defined shape.
   * The shape class can be fetched by `getShapeClass`
   * This method will overwrite the registered shapes, including
   * the registered built-in shapes, if using the same `name`.
   * The shape can be used in `custom series` and
   * `graphic component` by declaring `{type: name}`.
   *
   * @param {string} name
   * @param {Object} ShapeClass Can be generated by `extendShape`.
   */


  function registerShape(name, ShapeClass) {
    _customShapeMap[name] = ShapeClass;
  }
  /**
   * Find shape class registered by `registerShape`. Usually used in
   * fetching user defined shape.
   *
   * [Caution]:
   * (1) This method **MUST NOT be used inside echarts !!!**, unless it is prepared
   * to use user registered shapes.
   * Because the built-in shape (see `getBuiltInShape`) will be registered by
   * `registerShape` by default. That enables users to get both built-in
   * shapes as well as the shapes belonging to themsleves. But users can overwrite
   * the built-in shapes by using names like 'circle', 'rect' via calling
   * `registerShape`. So the echarts inner featrues should not fetch shapes from here
   * in case that it is overwritten by users, except that some features, like
   * `custom series`, `graphic component`, do it deliberately.
   *
   * (2) In the features like `custom series`, `graphic component`, the user input
   * `{tpye: 'xxx'}` does not only specify shapes but also specify other graphic
   * elements like `'group'`, `'text'`, `'image'` or event `'path'`. Those names
   * are reserved names, that is, if some user register a shape named `'image'`,
   * the shape will not be used. If we intending to add some more reserved names
   * in feature, that might bring break changes (disable some existing user shape
   * names). But that case probably rearly happen. So we dont make more mechanism
   * to resolve this issue here.
   *
   * @param {string} name
   * @return {Object} The shape class. If not found, return nothing.
   */


  function getShapeClass(name) {
    if (_customShapeMap.hasOwnProperty(name)) {
      return _customShapeMap[name];
    }
  }
  /**
   * Create a path element from path data string
   * @param {string} pathData
   * @param {Object} opts
   * @param {module:zrender/core/BoundingRect} rect
   * @param {string} [layout=cover] 'center' or 'cover'
   */


  function makePath(pathData, opts, rect, layout) {
    var path = path$1.createFromString(pathData, opts);

    if (rect) {
      if (layout === 'center') {
        rect = centerGraphic(rect, path.getBoundingRect());
      }

      resizePath(path, rect);
    }

    return path;
  }
  /**
   * Create a image element from image url
   * @param {string} imageUrl image url
   * @param {Object} opts options
   * @param {module:zrender/core/BoundingRect} rect constrain rect
   * @param {string} [layout=cover] 'center' or 'cover'
   */


  function makeImage(imageUrl, rect, layout) {
    var path = new Image$1({
      style: {
        image: imageUrl,
        x: rect.x,
        y: rect.y,
        width: rect.width,
        height: rect.height
      },
      onload: function (img) {
        if (layout === 'center') {
          var boundingRect = {
            width: img.width,
            height: img.height
          };
          path.setStyle(centerGraphic(rect, boundingRect));
        }
      }
    });
    return path;
  }
  /**
   * Get position of centered element in bounding box.
   *
   * @param  {Object} rect         element local bounding box
   * @param  {Object} boundingRect constraint bounding box
   * @return {Object} element position containing x, y, width, and height
   */


  function centerGraphic(rect, boundingRect) {
    // Set rect to center, keep width / height ratio.
    var aspect = boundingRect.width / boundingRect.height;
    var width = rect.height * aspect;
    var height;

    if (width <= rect.width) {
      height = rect.height;
    } else {
      width = rect.width;
      height = width / aspect;
    }

    var cx = rect.x + rect.width / 2;
    var cy = rect.y + rect.height / 2;
    return {
      x: cx - width / 2,
      y: cy - height / 2,
      width: width,
      height: height
    };
  }

  var mergePath$1 = path$1.mergePath;
  /**
   * Resize a path to fit the rect
   * @param {module:zrender/graphic/Path} path
   * @param {Object} rect
   */

  function resizePath(path, rect) {
    if (!path.applyTransform) {
      return;
    }

    var pathRect = path.getBoundingRect();
    var m = pathRect.calculateTransform(rect);
    path.applyTransform(m);
  }
  /**
   * Sub pixel optimize line for canvas
   *
   * @param {Object} param
   * @param {Object} [param.shape]
   * @param {number} [param.shape.x1]
   * @param {number} [param.shape.y1]
   * @param {number} [param.shape.x2]
   * @param {number} [param.shape.y2]
   * @param {Object} [param.style]
   * @param {number} [param.style.lineWidth]
   * @return {Object} Modified param
   */


  function subPixelOptimizeLine$2(param) {
    subPixelOptimize_1.subPixelOptimizeLine(param.shape, param.shape, param.style);
    return param;
  }
  /**
   * Sub pixel optimize rect for canvas
   *
   * @param {Object} param
   * @param {Object} [param.shape]
   * @param {number} [param.shape.x]
   * @param {number} [param.shape.y]
   * @param {number} [param.shape.width]
   * @param {number} [param.shape.height]
   * @param {Object} [param.style]
   * @param {number} [param.style.lineWidth]
   * @return {Object} Modified param
   */


  function subPixelOptimizeRect$2(param) {
    subPixelOptimize_1.subPixelOptimizeRect(param.shape, param.shape, param.style);
    return param;
  }
  /**
   * Sub pixel optimize for canvas
   *
   * @param {number} position Coordinate, such as x, y
   * @param {number} lineWidth Should be nonnegative integer.
   * @param {boolean=} positiveOrNegative Default false (negative).
   * @return {number} Optimized position.
   */


  var subPixelOptimize$1 = subPixelOptimize_1.subPixelOptimize;

  function hasFillOrStroke(fillOrStroke) {
    return fillOrStroke != null && fillOrStroke !== 'none';
  } // Most lifted color are duplicated.


  var liftedColorMap = util.createHashMap();
  var liftedColorCount = 0;

  function liftColor(color$1) {
    if (typeof color$1 !== 'string') {
      return color$1;
    }

    var liftedColor = liftedColorMap.get(color$1);

    if (!liftedColor) {
      liftedColor = color.lift(color$1, -0.1);

      if (liftedColorCount < 10000) {
        liftedColorMap.set(color$1, liftedColor);
        liftedColorCount++;
      }
    }

    return liftedColor;
  }

  function cacheElementStl(el) {
    if (!el.__hoverStlDirty) {
      return;
    }

    el.__hoverStlDirty = false;
    var hoverStyle = el.__hoverStl;

    if (!hoverStyle) {
      el.__cachedNormalStl = el.__cachedNormalZ2 = null;
      return;
    }

    var normalStyle = el.__cachedNormalStl = {};
    el.__cachedNormalZ2 = el.z2;
    var elStyle = el.style;

    for (var name in hoverStyle) {
      // See comment in `singleEnterEmphasis`.
      if (hoverStyle[name] != null) {
        normalStyle[name] = elStyle[name];
      }
    } // Always cache fill and stroke to normalStyle for lifting color.


    normalStyle.fill = elStyle.fill;
    normalStyle.stroke = elStyle.stroke;
  }

  function singleEnterEmphasis(el) {
    var hoverStl = el.__hoverStl;

    if (!hoverStl || el.__highlighted) {
      return;
    }

    var zr = el.__zr;
    var useHoverLayer = el.useHoverLayer && zr && zr.painter.type === 'canvas';
    el.__highlighted = useHoverLayer ? 'layer' : 'plain';

    if (el.isGroup || !zr && el.useHoverLayer) {
      return;
    }

    var elTarget = el;
    var targetStyle = el.style;

    if (useHoverLayer) {
      elTarget = zr.addHover(el);
      targetStyle = elTarget.style;
    }

    rollbackDefaultTextStyle(targetStyle);

    if (!useHoverLayer) {
      cacheElementStl(elTarget);
    } // styles can be:
    // {
    //    label: {
    //        show: false,
    //        position: 'outside',
    //        fontSize: 18
    //    },
    //    emphasis: {
    //        label: {
    //            show: true
    //        }
    //    }
    // },
    // where properties of `emphasis` may not appear in `normal`. We previously use
    // module:echarts/util/model#defaultEmphasis to merge `normal` to `emphasis`.
    // But consider rich text and setOption in merge mode, it is impossible to cover
    // all properties in merge. So we use merge mode when setting style here.
    // But we choose the merge strategy that only properties that is not `null/undefined`.
    // Because when making a textStyle (espacially rich text), it is not easy to distinguish
    // `hasOwnProperty` and `null/undefined` in code, so we trade them as the same for simplicity.
    // But this strategy brings a trouble that `null/undefined` can not be used to remove
    // style any more in `emphasis`. Users can both set properties directly on normal and
    // emphasis to avoid this issue, or we might support `'none'` for this case if required.


    targetStyle.extendFrom(hoverStl);
    setDefaultHoverFillStroke(targetStyle, hoverStl, 'fill');
    setDefaultHoverFillStroke(targetStyle, hoverStl, 'stroke');
    applyDefaultTextStyle(targetStyle);

    if (!useHoverLayer) {
      el.dirty(false);
      el.z2 += Z2_EMPHASIS_LIFT;
    }
  }

  function setDefaultHoverFillStroke(targetStyle, hoverStyle, prop) {
    if (!hasFillOrStroke(hoverStyle[prop]) && hasFillOrStroke(targetStyle[prop])) {
      targetStyle[prop] = liftColor(targetStyle[prop]);
    }
  }

  function singleEnterNormal(el) {
    var highlighted = el.__highlighted;

    if (!highlighted) {
      return;
    }

    el.__highlighted = false;

    if (el.isGroup) {
      return;
    }

    if (highlighted === 'layer') {
      el.__zr && el.__zr.removeHover(el);
    } else {
      var style = el.style;
      var normalStl = el.__cachedNormalStl;

      if (normalStl) {
        rollbackDefaultTextStyle(style);
        el.setStyle(normalStl);
        applyDefaultTextStyle(style);
      } // `__cachedNormalZ2` will not be reset if calling `setElementHoverStyle`
      // when `el` is on emphasis state. So here by comparing with 1, we try
      // hard to make the bug case rare.


      var normalZ2 = el.__cachedNormalZ2;

      if (normalZ2 != null && el.z2 - normalZ2 === Z2_EMPHASIS_LIFT) {
        el.z2 = normalZ2;
      }
    }
  }

  function traverseUpdate(el, updater, commonParam) {
    // If root is group, also enter updater for `highDownOnUpdate`.
    var fromState = NORMAL;
    var toState = NORMAL;
    var trigger; // See the rule of `highDownOnUpdate` on `graphic.setAsHighDownDispatcher`.

    el.__highlighted && (fromState = EMPHASIS, trigger = true);
    updater(el, commonParam);
    el.__highlighted && (toState = EMPHASIS, trigger = true);
    el.isGroup && el.traverse(function (child) {
      !child.isGroup && updater(child, commonParam);
    });
    trigger && el.__highDownOnUpdate && el.__highDownOnUpdate(fromState, toState);
  }
  /**
   * Set hover style (namely "emphasis style") of element, based on the current
   * style of the given `el`.
   * This method should be called after all of the normal styles have been adopted
   * to the `el`. See the reason on `setHoverStyle`.
   *
   * @param {module:zrender/Element} el Should not be `zrender/container/Group`.
   * @param {Object} [el.hoverStyle] Can be set on el or its descendants,
   *        e.g., `el.hoverStyle = ...; graphic.setHoverStyle(el); `.
   *        Often used when item group has a label element and it's hoverStyle is different.
   * @param {Object|boolean} [hoverStl] The specified hover style.
   *        If set as `false`, disable the hover style.
   *        Similarly, The `el.hoverStyle` can alse be set
   *        as `false` to disable the hover style.
   *        Otherwise, use the default hover style if not provided.
   */


  function setElementHoverStyle(el, hoverStl) {
    // For performance consideration, it might be better to make the "hover style" only the
    // difference properties from the "normal style", but not a entire copy of all styles.
    hoverStl = el.__hoverStl = hoverStl !== false && (el.hoverStyle || hoverStl || {});
    el.__hoverStlDirty = true; // FIXME
    // It is not completely right to save "normal"/"emphasis" flag on elements.
    // It probably should be saved on `data` of series. Consider the cases:
    // (1) A highlighted elements are moved out of the view port and re-enter
    // again by dataZoom.
    // (2) call `setOption` and replace elements totally when they are highlighted.

    if (el.__highlighted) {
      // Consider the case:
      // The styles of a highlighted `el` is being updated. The new "emphasis style"
      // should be adapted to the `el`. Notice here new "normal styles" should have
      // been set outside and the cached "normal style" is out of date.
      el.__cachedNormalStl = null; // Do not clear `__cachedNormalZ2` here, because setting `z2` is not a constraint
      // of this method. In most cases, `z2` is not set and hover style should be able
      // to rollback. Of course, that would bring bug, but only in a rare case, see
      // `doSingleLeaveHover` for details.

      singleEnterNormal(el);
      singleEnterEmphasis(el);
    }
  }

  function onElementMouseOver(e) {
    !shouldSilent(this, e) // "emphasis" event highlight has higher priority than mouse highlight.
    && !this.__highByOuter && traverseUpdate(this, singleEnterEmphasis);
  }

  function onElementMouseOut(e) {
    !shouldSilent(this, e) // "emphasis" event highlight has higher priority than mouse highlight.
    && !this.__highByOuter && traverseUpdate(this, singleEnterNormal);
  }

  function onElementEmphasisEvent(highlightDigit) {
    this.__highByOuter |= 1 << (highlightDigit || 0);
    traverseUpdate(this, singleEnterEmphasis);
  }

  function onElementNormalEvent(highlightDigit) {
    !(this.__highByOuter &= ~(1 << (highlightDigit || 0))) && traverseUpdate(this, singleEnterNormal);
  }

  function shouldSilent(el, e) {
    return el.__highDownSilentOnTouch && e.zrByTouch;
  }
  /**
   * Set hover style (namely "emphasis style") of element,
   * based on the current style of the given `el`.
   *
   * (1)
   * **CONSTRAINTS** for this method:
   * <A> This method MUST be called after all of the normal styles having been adopted
   * to the `el`.
   * <B> The input `hoverStyle` (that is, "emphasis style") MUST be the subset of the
   * "normal style" having been set to the el.
   * <C> `color` MUST be one of the "normal styles" (because color might be lifted as
   * a default hover style).
   *
   * The reason: this method treat the current style of the `el` as the "normal style"
   * and cache them when enter/update the "emphasis style". Consider the case: the `el`
   * is in "emphasis" state and `setOption`/`dispatchAction` trigger the style updating
   * logic, where the el should shift from the original emphasis style to the new
   * "emphasis style" and should be able to "downplay" back to the new "normal style".
   *
   * Indeed, it is error-prone to make a interface has so many constraints, but I have
   * not found a better solution yet to fit the backward compatibility, performance and
   * the current programming style.
   *
   * (2)
   * Call the method for a "root" element once. Do not call it for each descendants.
   * If the descendants elemenets of a group has itself hover style different from the
   * root group, we can simply mount the style on `el.hoverStyle` for them, but should
   * not call this method for them.
   *
   * (3) These input parameters can be set directly on `el`:
   *
   * @param {module:zrender/Element} el
   * @param {Object} [el.hoverStyle] See `graphic.setElementHoverStyle`.
   * @param {boolean} [el.highDownSilentOnTouch=false] See `graphic.setAsHighDownDispatcher`.
   * @param {Function} [el.highDownOnUpdate] See `graphic.setAsHighDownDispatcher`.
   * @param {Object|boolean} [hoverStyle] See `graphic.setElementHoverStyle`.
   */


  function setHoverStyle(el, hoverStyle) {
    setAsHighDownDispatcher(el, true);
    traverseUpdate(el, setElementHoverStyle, hoverStyle);
  }
  /**
   * @param {module:zrender/Element} el
   * @param {Function} [el.highDownOnUpdate] Called when state updated.
   *        Since `setHoverStyle` has the constraint that it must be called after
   *        all of the normal style updated, `highDownOnUpdate` is not needed to
   *        trigger if both `fromState` and `toState` is 'normal', and needed to
   *        trigger if both `fromState` and `toState` is 'emphasis', which enables
   *        to sync outside style settings to "emphasis" state.
   *        @this {string} This dispatcher `el`.
   *        @param {string} fromState Can be "normal" or "emphasis".
   *               `fromState` might equal to `toState`,
   *               for example, when this method is called when `el` is
   *               on "emphasis" state.
   *        @param {string} toState Can be "normal" or "emphasis".
   *
   *        FIXME
   *        CAUTION: Do not expose `highDownOnUpdate` outside echarts.
   *        Because it is not a complete solution. The update
   *        listener should not have been mount in element,
   *        and the normal/emphasis state should not have
   *        mantained on elements.
   *
   * @param {boolean} [el.highDownSilentOnTouch=false]
   *        In touch device, mouseover event will be trigger on touchstart event
   *        (see module:zrender/dom/HandlerProxy). By this mechanism, we can
   *        conveniently use hoverStyle when tap on touch screen without additional
   *        code for compatibility.
   *        But if the chart/component has select feature, which usually also use
   *        hoverStyle, there might be conflict between 'select-highlight' and
   *        'hover-highlight' especially when roam is enabled (see geo for example).
   *        In this case, `highDownSilentOnTouch` should be used to disable
   *        hover-highlight on touch device.
   * @param {boolean} [asDispatcher=true] If `false`, do not set as "highDownDispatcher".
   */


  function setAsHighDownDispatcher(el, asDispatcher) {
    var disable = asDispatcher === false; // Make `highDownSilentOnTouch` and `highDownOnUpdate` only work after
    // `setAsHighDownDispatcher` called. Avoid it is modified by user unexpectedly.

    el.__highDownSilentOnTouch = el.highDownSilentOnTouch;
    el.__highDownOnUpdate = el.highDownOnUpdate; // Simple optimize, since this method might be
    // called for each elements of a group in some cases.

    if (!disable || el.__highDownDispatcher) {
      var method = disable ? 'off' : 'on'; // Duplicated function will be auto-ignored, see Eventful.js.

      el[method]('mouseover', onElementMouseOver)[method]('mouseout', onElementMouseOut); // Emphasis, normal can be triggered manually by API or other components like hover link.

      el[method]('emphasis', onElementEmphasisEvent)[method]('normal', onElementNormalEvent); // Also keep previous record.

      el.__highByOuter = el.__highByOuter || 0;
      el.__highDownDispatcher = !disable;
    }
  }
  /**
   * @param {module:zrender/src/Element} el
   * @return {boolean}
   */


  function isHighDownDispatcher(el) {
    return !!(el && el.__highDownDispatcher);
  }
  /**
   * Support hightlight/downplay record on each elements.
   * For the case: hover highlight/downplay (legend, visualMap, ...) and
   * user triggerred hightlight/downplay should not conflict.
   * Only all of the highlightDigit cleared, return to normal.
   * @param {string} highlightKey
   * @return {number} highlightDigit
   */


  function getHighlightDigit(highlightKey) {
    var highlightDigit = _highlightKeyMap[highlightKey];

    if (highlightDigit == null && _highlightNextDigit <= 32) {
      highlightDigit = _highlightKeyMap[highlightKey] = _highlightNextDigit++;
    }

    return highlightDigit;
  }
  /**
   * See more info in `setTextStyleCommon`.
   * @param {Object|module:zrender/graphic/Style} normalStyle
   * @param {Object} emphasisStyle
   * @param {module:echarts/model/Model} normalModel
   * @param {module:echarts/model/Model} emphasisModel
   * @param {Object} opt Check `opt` of `setTextStyleCommon` to find other props.
   * @param {string|Function} [opt.defaultText]
   * @param {module:echarts/model/Model} [opt.labelFetcher] Fetch text by
   *      `opt.labelFetcher.getFormattedLabel(opt.labelDataIndex, 'normal'/'emphasis', null, opt.labelDimIndex)`
   * @param {module:echarts/model/Model} [opt.labelDataIndex] Fetch text by
   *      `opt.textFetcher.getFormattedLabel(opt.labelDataIndex, 'normal'/'emphasis', null, opt.labelDimIndex)`
   * @param {module:echarts/model/Model} [opt.labelDimIndex] Fetch text by
   *      `opt.textFetcher.getFormattedLabel(opt.labelDataIndex, 'normal'/'emphasis', null, opt.labelDimIndex)`
   * @param {Object} [normalSpecified]
   * @param {Object} [emphasisSpecified]
   */


  function setLabelStyle(normalStyle, emphasisStyle, normalModel, emphasisModel, opt, normalSpecified, emphasisSpecified) {
    opt = opt || EMPTY_OBJ;
    var labelFetcher = opt.labelFetcher;
    var labelDataIndex = opt.labelDataIndex;
    var labelDimIndex = opt.labelDimIndex; // This scenario, `label.normal.show = true; label.emphasis.show = false`,
    // is not supported util someone requests.

    var showNormal = normalModel.getShallow('show');
    var showEmphasis = emphasisModel.getShallow('show'); // Consider performance, only fetch label when necessary.
    // If `normal.show` is `false` and `emphasis.show` is `true` and `emphasis.formatter` is not set,
    // label should be displayed, where text is fetched by `normal.formatter` or `opt.defaultText`.

    var baseText;

    if (showNormal || showEmphasis) {
      if (labelFetcher) {
        baseText = labelFetcher.getFormattedLabel(labelDataIndex, 'normal', null, labelDimIndex);
      }

      if (baseText == null) {
        baseText = util.isFunction(opt.defaultText) ? opt.defaultText(labelDataIndex, opt) : opt.defaultText;
      }
    }

    var normalStyleText = showNormal ? baseText : null;
    var emphasisStyleText = showEmphasis ? util.retrieve2(labelFetcher ? labelFetcher.getFormattedLabel(labelDataIndex, 'emphasis', null, labelDimIndex) : null, baseText) : null; // Optimize: If style.text is null, text will not be drawn.

    if (normalStyleText != null || emphasisStyleText != null) {
      // Always set `textStyle` even if `normalStyle.text` is null, because default
      // values have to be set on `normalStyle`.
      // If we set default values on `emphasisStyle`, consider case:
      // Firstly, `setOption(... label: {normal: {text: null}, emphasis: {show: true}} ...);`
      // Secondly, `setOption(... label: {noraml: {show: true, text: 'abc', color: 'red'} ...);`
      // Then the 'red' will not work on emphasis.
      setTextStyle(normalStyle, normalModel, normalSpecified, opt);
      setTextStyle(emphasisStyle, emphasisModel, emphasisSpecified, opt, true);
    }

    normalStyle.text = normalStyleText;
    emphasisStyle.text = emphasisStyleText;
  }
  /**
   * Modify label style manually.
   * Only works after `setLabelStyle` and `setElementHoverStyle` called.
   *
   * @param {module:zrender/src/Element} el
   * @param {Object} [normalStyleProps] optional
   * @param {Object} [emphasisStyleProps] optional
   */


  function modifyLabelStyle(el, normalStyleProps, emphasisStyleProps) {
    var elStyle = el.style;

    if (normalStyleProps) {
      rollbackDefaultTextStyle(elStyle);
      el.setStyle(normalStyleProps);
      applyDefaultTextStyle(elStyle);
    }

    elStyle = el.__hoverStl;

    if (emphasisStyleProps && elStyle) {
      rollbackDefaultTextStyle(elStyle);
      util.extend(elStyle, emphasisStyleProps);
      applyDefaultTextStyle(elStyle);
    }
  }
  /**
   * Set basic textStyle properties.
   * See more info in `setTextStyleCommon`.
   * @param {Object|module:zrender/graphic/Style} textStyle
   * @param {module:echarts/model/Model} model
   * @param {Object} [specifiedTextStyle] Can be overrided by settings in model.
   * @param {Object} [opt] See `opt` of `setTextStyleCommon`.
   * @param {boolean} [isEmphasis]
   */


  function setTextStyle(textStyle, textStyleModel, specifiedTextStyle, opt, isEmphasis) {
    setTextStyleCommon(textStyle, textStyleModel, opt, isEmphasis);
    specifiedTextStyle && util.extend(textStyle, specifiedTextStyle); // textStyle.host && textStyle.host.dirty && textStyle.host.dirty(false);

    return textStyle;
  }
  /**
   * Set text option in the style.
   * See more info in `setTextStyleCommon`.
   * @deprecated
   * @param {Object} textStyle
   * @param {module:echarts/model/Model} labelModel
   * @param {string|boolean} defaultColor Default text color.
   *        If set as false, it will be processed as a emphasis style.
   */


  function setText(textStyle, labelModel, defaultColor) {
    var opt = {
      isRectText: true
    };
    var isEmphasis;

    if (defaultColor === false) {
      isEmphasis = true;
    } else {
      // Support setting color as 'auto' to get visual color.
      opt.autoColor = defaultColor;
    }

    setTextStyleCommon(textStyle, labelModel, opt, isEmphasis); // textStyle.host && textStyle.host.dirty && textStyle.host.dirty(false);
  }
  /**
   * The uniform entry of set text style, that is, retrieve style definitions
   * from `model` and set to `textStyle` object.
   *
   * Never in merge mode, but in overwrite mode, that is, all of the text style
   * properties will be set. (Consider the states of normal and emphasis and
   * default value can be adopted, merge would make the logic too complicated
   * to manage.)
   *
   * The `textStyle` object can either be a plain object or an instance of
   * `zrender/src/graphic/Style`, and either be the style of normal or emphasis.
   * After this mothod called, the `textStyle` object can then be used in
   * `el.setStyle(textStyle)` or `el.hoverStyle = textStyle`.
   *
   * Default value will be adopted and `insideRollbackOpt` will be created.
   * See `applyDefaultTextStyle` `rollbackDefaultTextStyle` for more details.
   *
   * opt: {
   *      disableBox: boolean, Whether diable drawing box of block (outer most).
   *      isRectText: boolean,
   *      autoColor: string, specify a color when color is 'auto',
   *              for textFill, textStroke, textBackgroundColor, and textBorderColor.
   *              If autoColor specified, it is used as default textFill.
   *      useInsideStyle:
   *              `true`: Use inside style (textFill, textStroke, textStrokeWidth)
   *                  if `textFill` is not specified.
   *              `false`: Do not use inside style.
   *              `null/undefined`: use inside style if `isRectText` is true and
   *                  `textFill` is not specified and textPosition contains `'inside'`.
   *      forceRich: boolean
   * }
   */


  function setTextStyleCommon(textStyle, textStyleModel, opt, isEmphasis) {
    // Consider there will be abnormal when merge hover style to normal style if given default value.
    opt = opt || EMPTY_OBJ;

    if (opt.isRectText) {
      var textPosition;

      if (opt.getTextPosition) {
        textPosition = opt.getTextPosition(textStyleModel, isEmphasis);
      } else {
        textPosition = textStyleModel.getShallow('position') || (isEmphasis ? null : 'inside'); // 'outside' is not a valid zr textPostion value, but used
        // in bar series, and magric type should be considered.

        textPosition === 'outside' && (textPosition = 'top');
      }

      textStyle.textPosition = textPosition;
      textStyle.textOffset = textStyleModel.getShallow('offset');
      var labelRotate = textStyleModel.getShallow('rotate');
      labelRotate != null && (labelRotate *= Math.PI / 180);
      textStyle.textRotation = labelRotate;
      textStyle.textDistance = util.retrieve2(textStyleModel.getShallow('distance'), isEmphasis ? null : 5);
    }

    var ecModel = textStyleModel.ecModel;
    var globalTextStyle = ecModel && ecModel.option.textStyle; // Consider case:
    // {
    //     data: [{
    //         value: 12,
    //         label: {
    //             rich: {
    //                 // no 'a' here but using parent 'a'.
    //             }
    //         }
    //     }],
    //     rich: {
    //         a: { ... }
    //     }
    // }

    var richItemNames = getRichItemNames(textStyleModel);
    var richResult;

    if (richItemNames) {
      richResult = {};

      for (var name in richItemNames) {
        if (richItemNames.hasOwnProperty(name)) {
          // Cascade is supported in rich.
          var richTextStyle = textStyleModel.getModel(['rich', name]); // In rich, never `disableBox`.
          // FIXME: consider `label: {formatter: '{a|xx}', color: 'blue', rich: {a: {}}}`,
          // the default color `'blue'` will not be adopted if no color declared in `rich`.
          // That might confuses users. So probably we should put `textStyleModel` as the
          // root ancestor of the `richTextStyle`. But that would be a break change.

          setTokenTextStyle(richResult[name] = {}, richTextStyle, globalTextStyle, opt, isEmphasis);
        }
      }
    }

    textStyle.rich = richResult;
    setTokenTextStyle(textStyle, textStyleModel, globalTextStyle, opt, isEmphasis, true);

    if (opt.forceRich && !opt.textStyle) {
      opt.textStyle = {};
    }

    return textStyle;
  } // Consider case:
  // {
  //     data: [{
  //         value: 12,
  //         label: {
  //             rich: {
  //                 // no 'a' here but using parent 'a'.
  //             }
  //         }
  //     }],
  //     rich: {
  //         a: { ... }
  //     }
  // }


  function getRichItemNames(textStyleModel) {
    // Use object to remove duplicated names.
    var richItemNameMap;

    while (textStyleModel && textStyleModel !== textStyleModel.ecModel) {
      var rich = (textStyleModel.option || EMPTY_OBJ).rich;

      if (rich) {
        richItemNameMap = richItemNameMap || {};

        for (var name in rich) {
          if (rich.hasOwnProperty(name)) {
            richItemNameMap[name] = 1;
          }
        }
      }

      textStyleModel = textStyleModel.parentModel;
    }

    return richItemNameMap;
  }

  function setTokenTextStyle(textStyle, textStyleModel, globalTextStyle, opt, isEmphasis, isBlock) {
    // In merge mode, default value should not be given.
    globalTextStyle = !isEmphasis && globalTextStyle || EMPTY_OBJ;
    textStyle.textFill = getAutoColor(textStyleModel.getShallow('color'), opt) || globalTextStyle.color;
    textStyle.textStroke = getAutoColor(textStyleModel.getShallow('textBorderColor'), opt) || globalTextStyle.textBorderColor;
    textStyle.textStrokeWidth = util.retrieve2(textStyleModel.getShallow('textBorderWidth'), globalTextStyle.textBorderWidth);

    if (!isEmphasis) {
      if (isBlock) {
        textStyle.insideRollbackOpt = opt;
        applyDefaultTextStyle(textStyle);
      } // Set default finally.


      if (textStyle.textFill == null) {
        textStyle.textFill = opt.autoColor;
      }
    } // Do not use `getFont` here, because merge should be supported, where
    // part of these properties may be changed in emphasis style, and the
    // others should remain their original value got from normal style.


    textStyle.fontStyle = textStyleModel.getShallow('fontStyle') || globalTextStyle.fontStyle;
    textStyle.fontWeight = textStyleModel.getShallow('fontWeight') || globalTextStyle.fontWeight;
    textStyle.fontSize = textStyleModel.getShallow('fontSize') || globalTextStyle.fontSize;
    textStyle.fontFamily = textStyleModel.getShallow('fontFamily') || globalTextStyle.fontFamily;
    textStyle.textAlign = textStyleModel.getShallow('align');
    textStyle.textVerticalAlign = textStyleModel.getShallow('verticalAlign') || textStyleModel.getShallow('baseline');
    textStyle.textLineHeight = textStyleModel.getShallow('lineHeight');
    textStyle.textWidth = textStyleModel.getShallow('width');
    textStyle.textHeight = textStyleModel.getShallow('height');
    textStyle.textTag = textStyleModel.getShallow('tag');

    if (!isBlock || !opt.disableBox) {
      textStyle.textBackgroundColor = getAutoColor(textStyleModel.getShallow('backgroundColor'), opt);
      textStyle.textPadding = textStyleModel.getShallow('padding');
      textStyle.textBorderColor = getAutoColor(textStyleModel.getShallow('borderColor'), opt);
      textStyle.textBorderWidth = textStyleModel.getShallow('borderWidth');
      textStyle.textBorderRadius = textStyleModel.getShallow('borderRadius');
      textStyle.textBoxShadowColor = textStyleModel.getShallow('shadowColor');
      textStyle.textBoxShadowBlur = textStyleModel.getShallow('shadowBlur');
      textStyle.textBoxShadowOffsetX = textStyleModel.getShallow('shadowOffsetX');
      textStyle.textBoxShadowOffsetY = textStyleModel.getShallow('shadowOffsetY');
    }

    textStyle.textShadowColor = textStyleModel.getShallow('textShadowColor') || globalTextStyle.textShadowColor;
    textStyle.textShadowBlur = textStyleModel.getShallow('textShadowBlur') || globalTextStyle.textShadowBlur;
    textStyle.textShadowOffsetX = textStyleModel.getShallow('textShadowOffsetX') || globalTextStyle.textShadowOffsetX;
    textStyle.textShadowOffsetY = textStyleModel.getShallow('textShadowOffsetY') || globalTextStyle.textShadowOffsetY;
  }

  function getAutoColor(color, opt) {
    return color !== 'auto' ? color : opt && opt.autoColor ? opt.autoColor : null;
  }
  /**
   * Give some default value to the input `textStyle` object, based on the current settings
   * in this `textStyle` object.
   *
   * The Scenario:
   * when text position is `inside` and `textFill` is not specified, we show
   * text border by default for better view. But it should be considered that text position
   * might be changed when hovering or being emphasis, where the `insideRollback` is used to
   * restore the style.
   *
   * Usage (& NOTICE):
   * When a style object (eithor plain object or instance of `zrender/src/graphic/Style`) is
   * about to be modified on its text related properties, `rollbackDefaultTextStyle` should
   * be called before the modification and `applyDefaultTextStyle` should be called after that.
   * (For the case that all of the text related properties is reset, like `setTextStyleCommon`
   * does, `rollbackDefaultTextStyle` is not needed to be called).
   */


  function applyDefaultTextStyle(textStyle) {
    var textPosition = textStyle.textPosition;
    var opt = textStyle.insideRollbackOpt;
    var insideRollback;

    if (opt && textStyle.textFill == null) {
      var autoColor = opt.autoColor;
      var isRectText = opt.isRectText;
      var useInsideStyle = opt.useInsideStyle;
      var useInsideStyleCache = useInsideStyle !== false && (useInsideStyle === true || isRectText && textPosition // textPosition can be [10, 30]
      && typeof textPosition === 'string' && textPosition.indexOf('inside') >= 0);
      var useAutoColorCache = !useInsideStyleCache && autoColor != null; // All of the props declared in `CACHED_LABEL_STYLE_PROPERTIES` are to be cached.

      if (useInsideStyleCache || useAutoColorCache) {
        insideRollback = {
          textFill: textStyle.textFill,
          textStroke: textStyle.textStroke,
          textStrokeWidth: textStyle.textStrokeWidth
        };
      }

      if (useInsideStyleCache) {
        textStyle.textFill = '#fff'; // Consider text with #fff overflow its container.

        if (textStyle.textStroke == null) {
          textStyle.textStroke = autoColor;
          textStyle.textStrokeWidth == null && (textStyle.textStrokeWidth = 2);
        }
      }

      if (useAutoColorCache) {
        textStyle.textFill = autoColor;
      }
    } // Always set `insideRollback`, so that the previous one can be cleared.


    textStyle.insideRollback = insideRollback;
  }
  /**
   * Consider the case: in a scatter,
   * label: {
   *     normal: {position: 'inside'},
   *     emphasis: {position: 'top'}
   * }
   * In the normal state, the `textFill` will be set as '#fff' for pretty view (see
   * `applyDefaultTextStyle`), but when switching to emphasis state, the `textFill`
   * should be retured to 'autoColor', but not keep '#fff'.
   */


  function rollbackDefaultTextStyle(style) {
    var insideRollback = style.insideRollback;

    if (insideRollback) {
      // Reset all of the props in `CACHED_LABEL_STYLE_PROPERTIES`.
      style.textFill = insideRollback.textFill;
      style.textStroke = insideRollback.textStroke;
      style.textStrokeWidth = insideRollback.textStrokeWidth;
      style.insideRollback = null;
    }
  }

  function getFont(opt, ecModel) {
    var gTextStyleModel = ecModel && ecModel.getModel('textStyle');
    return util.trim([// FIXME in node-canvas fontWeight is before fontStyle
    opt.fontStyle || gTextStyleModel && gTextStyleModel.getShallow('fontStyle') || '', opt.fontWeight || gTextStyleModel && gTextStyleModel.getShallow('fontWeight') || '', (opt.fontSize || gTextStyleModel && gTextStyleModel.getShallow('fontSize') || 12) + 'px', opt.fontFamily || gTextStyleModel && gTextStyleModel.getShallow('fontFamily') || 'sans-serif'].join(' '));
  }

  function animateOrSetProps(isUpdate, el, props, animatableModel, dataIndex, cb) {
    if (typeof dataIndex === 'function') {
      cb = dataIndex;
      dataIndex = null;
    } // Do not check 'animation' property directly here. Consider this case:
    // animation model is an `itemModel`, whose does not have `isAnimationEnabled`
    // but its parent model (`seriesModel`) does.


    var animationEnabled = animatableModel && animatableModel.isAnimationEnabled();

    if (animationEnabled) {
      var postfix = isUpdate ? 'Update' : '';
      var duration = animatableModel.getShallow('animationDuration' + postfix);
      var animationEasing = animatableModel.getShallow('animationEasing' + postfix);
      var animationDelay = animatableModel.getShallow('animationDelay' + postfix);

      if (typeof animationDelay === 'function') {
        animationDelay = animationDelay(dataIndex, animatableModel.getAnimationDelayParams ? animatableModel.getAnimationDelayParams(el, dataIndex) : null);
      }

      if (typeof duration === 'function') {
        duration = duration(dataIndex);
      }

      duration > 0 ? el.animateTo(props, duration, animationDelay || 0, animationEasing, cb, !!cb) : (el.stopAnimation(), el.attr(props), cb && cb());
    } else {
      el.stopAnimation();
      el.attr(props);
      cb && cb();
    }
  }
  /**
   * Update graphic element properties with or without animation according to the
   * configuration in series.
   *
   * Caution: this method will stop previous animation.
   * So do not use this method to one element twice before
   * animation starts, unless you know what you are doing.
   *
   * @param {module:zrender/Element} el
   * @param {Object} props
   * @param {module:echarts/model/Model} [animatableModel]
   * @param {number} [dataIndex]
   * @param {Function} [cb]
   * @example
   *     graphic.updateProps(el, {
   *         position: [100, 100]
   *     }, seriesModel, dataIndex, function () { console.log('Animation done!'); });
   *     // Or
   *     graphic.updateProps(el, {
   *         position: [100, 100]
   *     }, seriesModel, function () { console.log('Animation done!'); });
   */


  function updateProps(el, props, animatableModel, dataIndex, cb) {
    animateOrSetProps(true, el, props, animatableModel, dataIndex, cb);
  }
  /**
   * Init graphic element properties with or without animation according to the
   * configuration in series.
   *
   * Caution: this method will stop previous animation.
   * So do not use this method to one element twice before
   * animation starts, unless you know what you are doing.
   *
   * @param {module:zrender/Element} el
   * @param {Object} props
   * @param {module:echarts/model/Model} [animatableModel]
   * @param {number} [dataIndex]
   * @param {Function} cb
   */


  function initProps(el, props, animatableModel, dataIndex, cb) {
    animateOrSetProps(false, el, props, animatableModel, dataIndex, cb);
  }
  /**
   * Get transform matrix of target (param target),
   * in coordinate of its ancestor (param ancestor)
   *
   * @param {module:zrender/mixin/Transformable} target
   * @param {module:zrender/mixin/Transformable} [ancestor]
   */


  function getTransform(target, ancestor) {
    var mat = matrix.identity([]);

    while (target && target !== ancestor) {
      matrix.mul(mat, target.getLocalTransform(), mat);
      target = target.parent;
    }

    return mat;
  }
  /**
   * Apply transform to an vertex.
   * @param {Array.<number>} target [x, y]
   * @param {Array.<number>|TypedArray.<number>|Object} transform Can be:
   *      + Transform matrix: like [1, 0, 0, 1, 0, 0]
   *      + {position, rotation, scale}, the same as `zrender/Transformable`.
   * @param {boolean=} invert Whether use invert matrix.
   * @return {Array.<number>} [x, y]
   */


  function applyTransform$1(target, transform, invert) {
    if (transform && !util.isArrayLike(transform)) {
      transform = Transformable_1.getLocalTransform(transform);
    }

    if (invert) {
      transform = matrix.invert([], transform);
    }

    return vector.applyTransform([], target, transform);
  }
  /**
   * @param {string} direction 'left' 'right' 'top' 'bottom'
   * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]
   * @param {boolean=} invert Whether use invert matrix.
   * @return {string} Transformed direction. 'left' 'right' 'top' 'bottom'
   */


  function transformDirection(direction, transform, invert) {
    // Pick a base, ensure that transform result will not be (0, 0).
    var hBase = transform[4] === 0 || transform[5] === 0 || transform[0] === 0 ? 1 : Math.abs(2 * transform[4] / transform[0]);
    var vBase = transform[4] === 0 || transform[5] === 0 || transform[2] === 0 ? 1 : Math.abs(2 * transform[4] / transform[2]);
    var vertex = [direction === 'left' ? -hBase : direction === 'right' ? hBase : 0, direction === 'top' ? -vBase : direction === 'bottom' ? vBase : 0];
    vertex = applyTransform$1(vertex, transform, invert);
    return Math.abs(vertex[0]) > Math.abs(vertex[1]) ? vertex[0] > 0 ? 'right' : 'left' : vertex[1] > 0 ? 'bottom' : 'top';
  }
  /**
   * Apply group transition animation from g1 to g2.
   * If no animatableModel, no animation.
   */


  function groupTransition(g1, g2, animatableModel, cb) {
    if (!g1 || !g2) {
      return;
    }

    function getElMap(g) {
      var elMap = {};
      g.traverse(function (el) {
        if (!el.isGroup && el.anid) {
          elMap[el.anid] = el;
        }
      });
      return elMap;
    }

    function getAnimatableProps(el) {
      var obj = {
        position: vector.clone(el.position),
        rotation: el.rotation
      };

      if (el.shape) {
        obj.shape = util.extend({}, el.shape);
      }

      return obj;
    }

    var elMap1 = getElMap(g1);
    g2.traverse(function (el) {
      if (!el.isGroup && el.anid) {
        var oldEl = elMap1[el.anid];

        if (oldEl) {
          var newProp = getAnimatableProps(el);
          el.attr(getAnimatableProps(oldEl));
          updateProps(el, newProp, animatableModel, el.dataIndex);
        } // else {
        //     if (el.previousProps) {
        //         graphic.updateProps
        //     }
        // }

      }
    });
  }
  /**
   * @param {Array.<Array.<number>>} points Like: [[23, 44], [53, 66], ...]
   * @param {Object} rect {x, y, width, height}
   * @return {Array.<Array.<number>>} A new clipped points.
   */


  function clipPointsByRect(points, rect) {
    // FIXME: this way migth be incorrect when grpahic clipped by a corner.
    // and when element have border.
    return util.map(points, function (point) {
      var x = point[0];
      x = mathMax$3(x, rect.x);
      x = mathMin$3(x, rect.x + rect.width);
      var y = point[1];
      y = mathMax$3(y, rect.y);
      y = mathMin$3(y, rect.y + rect.height);
      return [x, y];
    });
  }
  /**
   * @param {Object} targetRect {x, y, width, height}
   * @param {Object} rect {x, y, width, height}
   * @return {Object} A new clipped rect. If rect size are negative, return undefined.
   */


  function clipRectByRect(targetRect, rect) {
    var x = mathMax$3(targetRect.x, rect.x);
    var x2 = mathMin$3(targetRect.x + targetRect.width, rect.x + rect.width);
    var y = mathMax$3(targetRect.y, rect.y);
    var y2 = mathMin$3(targetRect.y + targetRect.height, rect.y + rect.height); // If the total rect is cliped, nothing, including the border,
    // should be painted. So return undefined.

    if (x2 >= x && y2 >= y) {
      return {
        x: x,
        y: y,
        width: x2 - x,
        height: y2 - y
      };
    }
  }
  /**
   * @param {string} iconStr Support 'image://' or 'path://' or direct svg path.
   * @param {Object} [opt] Properties of `module:zrender/Element`, except `style`.
   * @param {Object} [rect] {x, y, width, height}
   * @return {module:zrender/Element} Icon path or image element.
   */


  function createIcon(iconStr, opt, rect) {
    opt = util.extend({
      rectHover: true
    }, opt);
    var style = opt.style = {
      strokeNoScale: true
    };
    rect = rect || {
      x: -1,
      y: -1,
      width: 2,
      height: 2
    };

    if (iconStr) {
      return iconStr.indexOf('image://') === 0 ? (style.image = iconStr.slice(8), util.defaults(style, rect), new Image$1(opt)) : makePath(iconStr.replace('path://', ''), opt, rect, 'center');
    }
  }
  /**
   * Return `true` if the given line (line `a`) and the given polygon
   * are intersect.
   * Note that we do not count colinear as intersect here because no
   * requirement for that. We could do that if required in future.
   *
   * @param {number} a1x
   * @param {number} a1y
   * @param {number} a2x
   * @param {number} a2y
   * @param {Array.<Array.<number>>} points Points of the polygon.
   * @return {boolean}
   */


  function linePolygonIntersect(a1x, a1y, a2x, a2y, points) {
    for (var i = 0, p2 = points[points.length - 1]; i < points.length; i++) {
      var p = points[i];

      if (lineLineIntersect(a1x, a1y, a2x, a2y, p[0], p[1], p2[0], p2[1])) {
        return true;
      }

      p2 = p;
    }
  }
  /**
   * Return `true` if the given two lines (line `a` and line `b`)
   * are intersect.
   * Note that we do not count colinear as intersect here because no
   * requirement for that. We could do that if required in future.
   *
   * @param {number} a1x
   * @param {number} a1y
   * @param {number} a2x
   * @param {number} a2y
   * @param {number} b1x
   * @param {number} b1y
   * @param {number} b2x
   * @param {number} b2y
   * @return {boolean}
   */


  function lineLineIntersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y) {
    // let `vec_m` to be `vec_a2 - vec_a1` and `vec_n` to be `vec_b2 - vec_b1`.
    var mx = a2x - a1x;
    var my = a2y - a1y;
    var nx = b2x - b1x;
    var ny = b2y - b1y; // `vec_m` and `vec_n` are parallel iff
    //     exising `k` such that `vec_m = k · vec_n`, equivalent to `vec_m X vec_n = 0`.

    var nmCrossProduct = crossProduct2d(nx, ny, mx, my);

    if (nearZero(nmCrossProduct)) {
      return false;
    } // `vec_m` and `vec_n` are intersect iff
    //     existing `p` and `q` in [0, 1] such that `vec_a1 + p * vec_m = vec_b1 + q * vec_n`,
    //     such that `q = ((vec_a1 - vec_b1) X vec_m) / (vec_n X vec_m)`
    //           and `p = ((vec_a1 - vec_b1) X vec_n) / (vec_n X vec_m)`.


    var b1a1x = a1x - b1x;
    var b1a1y = a1y - b1y;
    var q = crossProduct2d(b1a1x, b1a1y, mx, my) / nmCrossProduct;

    if (q < 0 || q > 1) {
      return false;
    }

    var p = crossProduct2d(b1a1x, b1a1y, nx, ny) / nmCrossProduct;

    if (p < 0 || p > 1) {
      return false;
    }

    return true;
  }
  /**
   * Cross product of 2-dimension vector.
   */


  function crossProduct2d(x1, y1, x2, y2) {
    return x1 * y2 - x2 * y1;
  }

  function nearZero(val) {
    return val <= 1e-6 && val >= -1e-6;
  } // Register built-in shapes. These shapes might be overwirtten
  // by users, although we do not recommend that.


  registerShape('circle', Circle);
  registerShape('sector', Sector);
  registerShape('ring', Ring);
  registerShape('polygon', Polygon);
  registerShape('polyline', Polyline);
  registerShape('rect', Rect);
  registerShape('line', Line);
  registerShape('bezierCurve', BezierCurve);
  registerShape('arc', Arc);
  var Z2_EMPHASIS_LIFT_1 = Z2_EMPHASIS_LIFT;
  var CACHED_LABEL_STYLE_PROPERTIES_1 = CACHED_LABEL_STYLE_PROPERTIES;
  var extendShape_1 = extendShape;
  var extendPath_1 = extendPath;
  var registerShape_1 = registerShape;
  var getShapeClass_1 = getShapeClass;
  var makePath_1 = makePath;
  var makeImage_1 = makeImage;
  var mergePath_1$1 = mergePath$1;
  var resizePath_1 = resizePath;
  var subPixelOptimizeLine_1$1 = subPixelOptimizeLine$2;
  var subPixelOptimizeRect_1$1 = subPixelOptimizeRect$2;
  var subPixelOptimize_1$1 = subPixelOptimize$1;
  var setElementHoverStyle_1 = setElementHoverStyle;
  var setHoverStyle_1 = setHoverStyle;
  var setAsHighDownDispatcher_1 = setAsHighDownDispatcher;
  var isHighDownDispatcher_1 = isHighDownDispatcher;
  var getHighlightDigit_1 = getHighlightDigit;
  var setLabelStyle_1 = setLabelStyle;
  var modifyLabelStyle_1 = modifyLabelStyle;
  var setTextStyle_1 = setTextStyle;
  var setText_1 = setText;
  var getFont_1 = getFont;
  var updateProps_1 = updateProps;
  var initProps_1 = initProps;
  var getTransform_1 = getTransform;
  var applyTransform_1$1 = applyTransform$1;
  var transformDirection_1 = transformDirection;
  var groupTransition_1 = groupTransition;
  var clipPointsByRect_1 = clipPointsByRect;
  var clipRectByRect_1 = clipRectByRect;
  var createIcon_1 = createIcon;
  var linePolygonIntersect_1 = linePolygonIntersect;
  var lineLineIntersect_1 = lineLineIntersect;

  var graphic = {
  	Image: Image$2,
  	Group: Group_1$1,
  	Text: Text_1$1,
  	Circle: Circle_1,
  	Sector: Sector_1,
  	Ring: Ring_1,
  	Polygon: Polygon_1,
  	Polyline: Polyline_1,
  	Rect: Rect_1,
  	Line: Line_1,
  	BezierCurve: BezierCurve_1,
  	Arc: Arc_1,
  	CompoundPath: CompoundPath_1,
  	LinearGradient: LinearGradient_1$1,
  	RadialGradient: RadialGradient_1$1,
  	BoundingRect: BoundingRect_1$1,
  	IncrementalDisplayable: IncrementalDisplayable_1,
  	Z2_EMPHASIS_LIFT: Z2_EMPHASIS_LIFT_1,
  	CACHED_LABEL_STYLE_PROPERTIES: CACHED_LABEL_STYLE_PROPERTIES_1,
  	extendShape: extendShape_1,
  	extendPath: extendPath_1,
  	registerShape: registerShape_1,
  	getShapeClass: getShapeClass_1,
  	makePath: makePath_1,
  	makeImage: makeImage_1,
  	mergePath: mergePath_1$1,
  	resizePath: resizePath_1,
  	subPixelOptimizeLine: subPixelOptimizeLine_1$1,
  	subPixelOptimizeRect: subPixelOptimizeRect_1$1,
  	subPixelOptimize: subPixelOptimize_1$1,
  	setElementHoverStyle: setElementHoverStyle_1,
  	setHoverStyle: setHoverStyle_1,
  	setAsHighDownDispatcher: setAsHighDownDispatcher_1,
  	isHighDownDispatcher: isHighDownDispatcher_1,
  	getHighlightDigit: getHighlightDigit_1,
  	setLabelStyle: setLabelStyle_1,
  	modifyLabelStyle: modifyLabelStyle_1,
  	setTextStyle: setTextStyle_1,
  	setText: setText_1,
  	getFont: getFont_1,
  	updateProps: updateProps_1,
  	initProps: initProps_1,
  	getTransform: getTransform_1,
  	applyTransform: applyTransform_1$1,
  	transformDirection: transformDirection_1,
  	groupTransition: groupTransition_1,
  	clipPointsByRect: clipPointsByRect_1,
  	clipRectByRect: clipRectByRect_1,
  	createIcon: createIcon_1,
  	linePolygonIntersect: linePolygonIntersect_1,
  	lineLineIntersect: lineLineIntersect_1
  };

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */





  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var PATH_COLOR = ['textStyle', 'color'];
  var _default$Q = {
    /**
     * Get color property or get color from option.textStyle.color
     * @param {boolean} [isEmphasis]
     * @return {string}
     */
    getTextColor: function (isEmphasis) {
      var ecModel = this.ecModel;
      return this.getShallow('color') || (!isEmphasis && ecModel ? ecModel.get(PATH_COLOR) : null);
    },

    /**
     * Create font string from fontStyle, fontWeight, fontSize, fontFamily
     * @return {string}
     */
    getFont: function () {
      return graphic.getFont({
        fontStyle: this.getShallow('fontStyle'),
        fontWeight: this.getShallow('fontWeight'),
        fontSize: this.getShallow('fontSize'),
        fontFamily: this.getShallow('fontFamily')
      }, this.ecModel);
    },
    getTextRect: function (text$1) {
      return text.getBoundingRect(text$1, this.getFont(), this.getShallow('align'), this.getShallow('verticalAlign') || this.getShallow('baseline'), this.getShallow('padding'), this.getShallow('lineHeight'), this.getShallow('rich'), this.getShallow('truncateText'));
    }
  };
  var textStyle = _default$Q;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var getItemStyle = makeStyleMapper([['fill', 'color'], ['stroke', 'borderColor'], ['lineWidth', 'borderWidth'], ['opacity'], ['shadowBlur'], ['shadowOffsetX'], ['shadowOffsetY'], ['shadowColor'], ['textPosition'], ['textAlign']]);
  var _default$R = {
    getItemStyle: function (excludes, includes) {
      var style = getItemStyle(this, excludes, includes);
      var lineDash = this.getBorderLineDash();
      lineDash && (style.lineDash = lineDash);
      return style;
    },
    getBorderLineDash: function () {
      var lineType = this.get('borderType');
      return lineType === 'solid' || lineType == null ? null : lineType === 'dashed' ? [5, 5] : [1, 1];
    }
  };
  var itemStyle = _default$R;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */







  var makeInner$1 = model.makeInner;



  var enableClassExtend$1 = clazz.enableClassExtend;
  var enableClassCheck$1 = clazz.enableClassCheck;









  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * @module echarts/model/Model
   */
  var mixin$1 = util.mixin;
  var inner = makeInner$1();
  /**
   * @alias module:echarts/model/Model
   * @constructor
   * @param {Object} [option]
   * @param {module:echarts/model/Model} [parentModel]
   * @param {module:echarts/model/Global} [ecModel]
   */

  function Model(option, parentModel, ecModel) {
    /**
     * @type {module:echarts/model/Model}
     * @readOnly
     */
    this.parentModel = parentModel;
    /**
     * @type {module:echarts/model/Global}
     * @readOnly
     */

    this.ecModel = ecModel;
    /**
     * @type {Object}
     * @protected
     */

    this.option = option; // Simple optimization
    // if (this.init) {
    //     if (arguments.length <= 4) {
    //         this.init(option, parentModel, ecModel, extraOpt);
    //     }
    //     else {
    //         this.init.apply(this, arguments);
    //     }
    // }
  }

  Model.prototype = {
    constructor: Model,

    /**
     * Model 的初始化函数
     * @param {Object} option
     */
    init: null,

    /**
     * 从新的 Option merge
     */
    mergeOption: function (option) {
      util.merge(this.option, option, true);
    },

    /**
     * @param {string|Array.<string>} path
     * @param {boolean} [ignoreParent=false]
     * @return {*}
     */
    get: function (path, ignoreParent) {
      if (path == null) {
        return this.option;
      }

      return doGet(this.option, this.parsePath(path), !ignoreParent && getParent(this, path));
    },

    /**
     * @param {string} key
     * @param {boolean} [ignoreParent=false]
     * @return {*}
     */
    getShallow: function (key, ignoreParent) {
      var option = this.option;
      var val = option == null ? option : option[key];
      var parentModel = !ignoreParent && getParent(this, key);

      if (val == null && parentModel) {
        val = parentModel.getShallow(key);
      }

      return val;
    },

    /**
     * @param {string|Array.<string>} [path]
     * @param {module:echarts/model/Model} [parentModel]
     * @return {module:echarts/model/Model}
     */
    getModel: function (path, parentModel) {
      var obj = path == null ? this.option : doGet(this.option, path = this.parsePath(path));
      var thisParentModel;
      parentModel = parentModel || (thisParentModel = getParent(this, path)) && thisParentModel.getModel(path);
      return new Model(obj, parentModel, this.ecModel);
    },

    /**
     * If model has option
     */
    isEmpty: function () {
      return this.option == null;
    },
    restoreData: function () {},
    // Pending
    clone: function () {
      var Ctor = this.constructor;
      return new Ctor(util.clone(this.option));
    },
    setReadOnly: function (properties) {// clazzUtil.setReadOnly(this, properties);
    },
    // If path is null/undefined, return null/undefined.
    parsePath: function (path) {
      if (typeof path === 'string') {
        path = path.split('.');
      }

      return path;
    },

    /**
     * @param {Function} getParentMethod
     *        param {Array.<string>|string} path
     *        return {module:echarts/model/Model}
     */
    customizeGetParent: function (getParentMethod) {
      inner(this).getParent = getParentMethod;
    },
    isAnimationEnabled: function () {
      if (!env_1.node) {
        if (this.option.animation != null) {
          return !!this.option.animation;
        } else if (this.parentModel) {
          return this.parentModel.isAnimationEnabled();
        }
      }
    }
  };

  function doGet(obj, pathArr, parentModel) {
    for (var i = 0; i < pathArr.length; i++) {
      // Ignore empty
      if (!pathArr[i]) {
        continue;
      } // obj could be number/string/... (like 0)


      obj = obj && typeof obj === 'object' ? obj[pathArr[i]] : null;

      if (obj == null) {
        break;
      }
    }

    if (obj == null && parentModel) {
      obj = parentModel.get(pathArr);
    }

    return obj;
  } // `path` can be null/undefined


  function getParent(model, path) {
    var getParentMethod = inner(model).getParent;
    return getParentMethod ? getParentMethod.call(model, path) : model.parentModel;
  } // Enable Model.extend.


  enableClassExtend$1(Model);
  enableClassCheck$1(Model);
  mixin$1(Model, lineStyle);
  mixin$1(Model, areaStyle);
  mixin$1(Model, textStyle);
  mixin$1(Model, itemStyle);
  var _default$S = Model;
  var Model_1 = _default$S;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */





  var parseClassType$1 = clazz.parseClassType;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var base = 0;
  /**
   * @public
   * @param {string} type
   * @return {string}
   */

  function getUID(type) {
    // Considering the case of crossing js context,
    // use Math.random to make id as unique as possible.
    return [type || '', base++, Math.random().toFixed(5)].join('_');
  }
  /**
   * @inner
   */


  function enableSubTypeDefaulter(entity) {
    var subTypeDefaulters = {};

    entity.registerSubTypeDefaulter = function (componentType, defaulter) {
      componentType = parseClassType$1(componentType);
      subTypeDefaulters[componentType.main] = defaulter;
    };

    entity.determineSubType = function (componentType, option) {
      var type = option.type;

      if (!type) {
        var componentTypeMain = parseClassType$1(componentType).main;

        if (entity.hasSubTypes(componentType) && subTypeDefaulters[componentTypeMain]) {
          type = subTypeDefaulters[componentTypeMain](option);
        }
      }

      return type;
    };

    return entity;
  }
  /**
   * Topological travel on Activity Network (Activity On Vertices).
   * Dependencies is defined in Model.prototype.dependencies, like ['xAxis', 'yAxis'].
   *
   * If 'xAxis' or 'yAxis' is absent in componentTypeList, just ignore it in topology.
   *
   * If there is circle dependencey, Error will be thrown.
   *
   */


  function enableTopologicalTravel(entity, dependencyGetter) {
    /**
     * @public
     * @param {Array.<string>} targetNameList Target Component type list.
     *                                           Can be ['aa', 'bb', 'aa.xx']
     * @param {Array.<string>} fullNameList By which we can build dependency graph.
     * @param {Function} callback Params: componentType, dependencies.
     * @param {Object} context Scope of callback.
     */
    entity.topologicalTravel = function (targetNameList, fullNameList, callback, context) {
      if (!targetNameList.length) {
        return;
      }

      var result = makeDepndencyGraph(fullNameList);
      var graph = result.graph;
      var stack = result.noEntryList;
      var targetNameSet = {};
      util.each(targetNameList, function (name) {
        targetNameSet[name] = true;
      });

      while (stack.length) {
        var currComponentType = stack.pop();
        var currVertex = graph[currComponentType];
        var isInTargetNameSet = !!targetNameSet[currComponentType];

        if (isInTargetNameSet) {
          callback.call(context, currComponentType, currVertex.originalDeps.slice());
          delete targetNameSet[currComponentType];
        }

        util.each(currVertex.successor, isInTargetNameSet ? removeEdgeAndAdd : removeEdge);
      }

      util.each(targetNameSet, function () {
        throw new Error('Circle dependency may exists');
      });

      function removeEdge(succComponentType) {
        graph[succComponentType].entryCount--;

        if (graph[succComponentType].entryCount === 0) {
          stack.push(succComponentType);
        }
      } // Consider this case: legend depends on series, and we call
      // chart.setOption({series: [...]}), where only series is in option.
      // If we do not have 'removeEdgeAndAdd', legendModel.mergeOption will
      // not be called, but only sereis.mergeOption is called. Thus legend
      // have no chance to update its local record about series (like which
      // name of series is available in legend).


      function removeEdgeAndAdd(succComponentType) {
        targetNameSet[succComponentType] = true;
        removeEdge(succComponentType);
      }
    };
    /**
     * DepndencyGraph: {Object}
     * key: conponentType,
     * value: {
     *     successor: [conponentTypes...],
     *     originalDeps: [conponentTypes...],
     *     entryCount: {number}
     * }
     */


    function makeDepndencyGraph(fullNameList) {
      var graph = {};
      var noEntryList = [];
      util.each(fullNameList, function (name) {
        var thisItem = createDependencyGraphItem(graph, name);
        var originalDeps = thisItem.originalDeps = dependencyGetter(name);
        var availableDeps = getAvailableDependencies(originalDeps, fullNameList);
        thisItem.entryCount = availableDeps.length;

        if (thisItem.entryCount === 0) {
          noEntryList.push(name);
        }

        util.each(availableDeps, function (dependentName) {
          if (util.indexOf(thisItem.predecessor, dependentName) < 0) {
            thisItem.predecessor.push(dependentName);
          }

          var thatItem = createDependencyGraphItem(graph, dependentName);

          if (util.indexOf(thatItem.successor, dependentName) < 0) {
            thatItem.successor.push(name);
          }
        });
      });
      return {
        graph: graph,
        noEntryList: noEntryList
      };
    }

    function createDependencyGraphItem(graph, name) {
      if (!graph[name]) {
        graph[name] = {
          predecessor: [],
          successor: []
        };
      }

      return graph[name];
    }

    function getAvailableDependencies(originalDeps, fullNameList) {
      var availableDeps = [];
      util.each(originalDeps, function (dep) {
        util.indexOf(fullNameList, dep) >= 0 && availableDeps.push(dep);
      });
      return availableDeps;
    }
  }

  var getUID_1 = getUID;
  var enableSubTypeDefaulter_1 = enableSubTypeDefaulter;
  var enableTopologicalTravel_1 = enableTopologicalTravel;

  var component = {
  	getUID: getUID_1,
  	enableSubTypeDefaulter: enableSubTypeDefaulter_1,
  	enableTopologicalTravel: enableTopologicalTravel_1
  };

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /*
  * A third-party license is embeded for some of the code in this file:
  * The method "quantile" was copied from "d3.js".
  * (See more details in the comment of the method below.)
  * The use of the source code of this file is also subject to the terms
  * and consitions of the license of "d3.js" (BSD-3Clause, see
  * </licenses/LICENSE-d3>).
  */
  var RADIAN_EPSILON = 1e-4;

  function _trim(str) {
    return str.replace(/^\s+|\s+$/g, '');
  }
  /**
   * Linear mapping a value from domain to range
   * @memberOf module:echarts/util/number
   * @param  {(number|Array.<number>)} val
   * @param  {Array.<number>} domain Domain extent domain[0] can be bigger than domain[1]
   * @param  {Array.<number>} range  Range extent range[0] can be bigger than range[1]
   * @param  {boolean} clamp
   * @return {(number|Array.<number>}
   */


  function linearMap(val, domain, range, clamp) {
    var subDomain = domain[1] - domain[0];
    var subRange = range[1] - range[0];

    if (subDomain === 0) {
      return subRange === 0 ? range[0] : (range[0] + range[1]) / 2;
    } // Avoid accuracy problem in edge, such as
    // 146.39 - 62.83 === 83.55999999999999.
    // See echarts/test/ut/spec/util/number.js#linearMap#accuracyError
    // It is a little verbose for efficiency considering this method
    // is a hotspot.


    if (clamp) {
      if (subDomain > 0) {
        if (val <= domain[0]) {
          return range[0];
        } else if (val >= domain[1]) {
          return range[1];
        }
      } else {
        if (val >= domain[0]) {
          return range[0];
        } else if (val <= domain[1]) {
          return range[1];
        }
      }
    } else {
      if (val === domain[0]) {
        return range[0];
      }

      if (val === domain[1]) {
        return range[1];
      }
    }

    return (val - domain[0]) / subDomain * subRange + range[0];
  }
  /**
   * Convert a percent string to absolute number.
   * Returns NaN if percent is not a valid string or number
   * @memberOf module:echarts/util/number
   * @param {string|number} percent
   * @param {number} all
   * @return {number}
   */


  function parsePercent$1(percent, all) {
    switch (percent) {
      case 'center':
      case 'middle':
        percent = '50%';
        break;

      case 'left':
      case 'top':
        percent = '0%';
        break;

      case 'right':
      case 'bottom':
        percent = '100%';
        break;
    }

    if (typeof percent === 'string') {
      if (_trim(percent).match(/%$/)) {
        return parseFloat(percent) / 100 * all;
      }

      return parseFloat(percent);
    }

    return percent == null ? NaN : +percent;
  }
  /**
   * (1) Fix rounding error of float numbers.
   * (2) Support return string to avoid scientific notation like '3.5e-7'.
   *
   * @param {number} x
   * @param {number} [precision]
   * @param {boolean} [returnStr]
   * @return {number|string}
   */


  function round$1(x, precision, returnStr) {
    if (precision == null) {
      precision = 10;
    } // Avoid range error


    precision = Math.min(Math.max(0, precision), 20);
    x = (+x).toFixed(precision);
    return returnStr ? x : +x;
  }
  /**
   * asc sort arr.
   * The input arr will be modified.
   *
   * @param {Array} arr
   * @return {Array} The input arr.
   */


  function asc(arr) {
    arr.sort(function (a, b) {
      return a - b;
    });
    return arr;
  }
  /**
   * Get precision
   * @param {number} val
   */


  function getPrecision(val) {
    val = +val;

    if (isNaN(val)) {
      return 0;
    } // It is much faster than methods converting number to string as follows
    //      var tmp = val.toString();
    //      return tmp.length - 1 - tmp.indexOf('.');
    // especially when precision is low


    var e = 1;
    var count = 0;

    while (Math.round(val * e) / e !== val) {
      e *= 10;
      count++;
    }

    return count;
  }
  /**
   * @param {string|number} val
   * @return {number}
   */


  function getPrecisionSafe(val) {
    var str = val.toString(); // Consider scientific notation: '3.4e-12' '3.4e+12'

    var eIndex = str.indexOf('e');

    if (eIndex > 0) {
      var precision = +str.slice(eIndex + 1);
      return precision < 0 ? -precision : 0;
    } else {
      var dotIndex = str.indexOf('.');
      return dotIndex < 0 ? 0 : str.length - 1 - dotIndex;
    }
  }
  /**
   * Minimal dicernible data precisioin according to a single pixel.
   *
   * @param {Array.<number>} dataExtent
   * @param {Array.<number>} pixelExtent
   * @return {number} precision
   */


  function getPixelPrecision(dataExtent, pixelExtent) {
    var log = Math.log;
    var LN10 = Math.LN10;
    var dataQuantity = Math.floor(log(dataExtent[1] - dataExtent[0]) / LN10);
    var sizeQuantity = Math.round(log(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10); // toFixed() digits argument must be between 0 and 20.

    var precision = Math.min(Math.max(-dataQuantity + sizeQuantity, 0), 20);
    return !isFinite(precision) ? 20 : precision;
  }
  /**
   * Get a data of given precision, assuring the sum of percentages
   * in valueList is 1.
   * The largest remainer method is used.
   * https://en.wikipedia.org/wiki/Largest_remainder_method
   *
   * @param {Array.<number>} valueList a list of all data
   * @param {number} idx index of the data to be processed in valueList
   * @param {number} precision integer number showing digits of precision
   * @return {number} percent ranging from 0 to 100
   */


  function getPercentWithPrecision(valueList, idx, precision) {
    if (!valueList[idx]) {
      return 0;
    }

    var sum = util.reduce(valueList, function (acc, val) {
      return acc + (isNaN(val) ? 0 : val);
    }, 0);

    if (sum === 0) {
      return 0;
    }

    var digits = Math.pow(10, precision);
    var votesPerQuota = util.map(valueList, function (val) {
      return (isNaN(val) ? 0 : val) / sum * digits * 100;
    });
    var targetSeats = digits * 100;
    var seats = util.map(votesPerQuota, function (votes) {
      // Assign automatic seats.
      return Math.floor(votes);
    });
    var currentSum = util.reduce(seats, function (acc, val) {
      return acc + val;
    }, 0);
    var remainder = util.map(votesPerQuota, function (votes, idx) {
      return votes - seats[idx];
    }); // Has remainding votes.

    while (currentSum < targetSeats) {
      // Find next largest remainder.
      var max = Number.NEGATIVE_INFINITY;
      var maxId = null;

      for (var i = 0, len = remainder.length; i < len; ++i) {
        if (remainder[i] > max) {
          max = remainder[i];
          maxId = i;
        }
      } // Add a vote to max remainder.


      ++seats[maxId];
      remainder[maxId] = 0;
      ++currentSum;
    }

    return seats[idx] / digits;
  } // Number.MAX_SAFE_INTEGER, ie do not support.


  var MAX_SAFE_INTEGER = 9007199254740991;
  /**
   * To 0 - 2 * PI, considering negative radian.
   * @param {number} radian
   * @return {number}
   */

  function remRadian(radian) {
    var pi2 = Math.PI * 2;
    return (radian % pi2 + pi2) % pi2;
  }
  /**
   * @param {type} radian
   * @return {boolean}
   */


  function isRadianAroundZero(val) {
    return val > -RADIAN_EPSILON && val < RADIAN_EPSILON;
  }
  /* eslint-disable */


  var TIME_REG = /^(?:(\d{4})(?:[-\/](\d{1,2})(?:[-\/](\d{1,2})(?:[T ](\d{1,2})(?::(\d\d)(?::(\d\d)(?:[.,](\d+))?)?)?(Z|[\+\-]\d\d:?\d\d)?)?)?)?)?$/; // jshint ignore:line

  /* eslint-enable */

  /**
   * @param {string|Date|number} value These values can be accepted:
   *   + An instance of Date, represent a time in its own time zone.
   *   + Or string in a subset of ISO 8601, only including:
   *     + only year, month, date: '2012-03', '2012-03-01', '2012-03-01 05', '2012-03-01 05:06',
   *     + separated with T or space: '2012-03-01T12:22:33.123', '2012-03-01 12:22:33.123',
   *     + time zone: '2012-03-01T12:22:33Z', '2012-03-01T12:22:33+8000', '2012-03-01T12:22:33-05:00',
   *     all of which will be treated as local time if time zone is not specified
   *     (see <https://momentjs.com/>).
   *   + Or other string format, including (all of which will be treated as loacal time):
   *     '2012', '2012-3-1', '2012/3/1', '2012/03/01',
   *     '2009/6/12 2:00', '2009/6/12 2:05:08', '2009/6/12 2:05:08.123'
   *   + a timestamp, which represent a time in UTC.
   * @return {Date} date
   */

  function parseDate(value) {
    if (value instanceof Date) {
      return value;
    } else if (typeof value === 'string') {
      // Different browsers parse date in different way, so we parse it manually.
      // Some other issues:
      // new Date('1970-01-01') is UTC,
      // new Date('1970/01/01') and new Date('1970-1-01') is local.
      // See issue #3623
      var match = TIME_REG.exec(value);

      if (!match) {
        // return Invalid Date.
        return new Date(NaN);
      } // Use local time when no timezone offset specifed.


      if (!match[8]) {
        // match[n] can only be string or undefined.
        // But take care of '12' + 1 => '121'.
        return new Date(+match[1], +(match[2] || 1) - 1, +match[3] || 1, +match[4] || 0, +(match[5] || 0), +match[6] || 0, +match[7] || 0);
      } // Timezoneoffset of Javascript Date has considered DST (Daylight Saving Time,
      // https://tc39.github.io/ecma262/#sec-daylight-saving-time-adjustment).
      // For example, system timezone is set as "Time Zone: America/Toronto",
      // then these code will get different result:
      // `new Date(1478411999999).getTimezoneOffset();  // get 240`
      // `new Date(1478412000000).getTimezoneOffset();  // get 300`
      // So we should not use `new Date`, but use `Date.UTC`.
      else {
          var hour = +match[4] || 0;

          if (match[8].toUpperCase() !== 'Z') {
            hour -= match[8].slice(0, 3);
          }

          return new Date(Date.UTC(+match[1], +(match[2] || 1) - 1, +match[3] || 1, hour, +(match[5] || 0), +match[6] || 0, +match[7] || 0));
        }
    } else if (value == null) {
      return new Date(NaN);
    }

    return new Date(Math.round(value));
  }
  /**
   * Quantity of a number. e.g. 0.1, 1, 10, 100
   *
   * @param  {number} val
   * @return {number}
   */


  function quantity(val) {
    return Math.pow(10, quantityExponent(val));
  }
  /**
   * Exponent of the quantity of a number
   * e.g., 1234 equals to 1.234*10^3, so quantityExponent(1234) is 3
   *
   * @param  {number} val non-negative value
   * @return {number}
   */


  function quantityExponent(val) {
    if (val === 0) {
      return 0;
    }

    var exp = Math.floor(Math.log(val) / Math.LN10);
    /**
     * exp is expected to be the rounded-down result of the base-10 log of val.
     * But due to the precision loss with Math.log(val), we need to restore it
     * using 10^exp to make sure we can get val back from exp. #11249
     */

    if (val / Math.pow(10, exp) >= 10) {
      exp++;
    }

    return exp;
  }
  /**
   * find a “nice” number approximately equal to x. Round the number if round = true,
   * take ceiling if round = false. The primary observation is that the “nicest”
   * numbers in decimal are 1, 2, and 5, and all power-of-ten multiples of these numbers.
   *
   * See "Nice Numbers for Graph Labels" of Graphic Gems.
   *
   * @param  {number} val Non-negative value.
   * @param  {boolean} round
   * @return {number}
   */


  function nice(val, round) {
    var exponent = quantityExponent(val);
    var exp10 = Math.pow(10, exponent);
    var f = val / exp10; // 1 <= f < 10

    var nf;

    if (round) {
      if (f < 1.5) {
        nf = 1;
      } else if (f < 2.5) {
        nf = 2;
      } else if (f < 4) {
        nf = 3;
      } else if (f < 7) {
        nf = 5;
      } else {
        nf = 10;
      }
    } else {
      if (f < 1) {
        nf = 1;
      } else if (f < 2) {
        nf = 2;
      } else if (f < 3) {
        nf = 3;
      } else if (f < 5) {
        nf = 5;
      } else {
        nf = 10;
      }
    }

    val = nf * exp10; // Fix 3 * 0.1 === 0.30000000000000004 issue (see IEEE 754).
    // 20 is the uppper bound of toFixed.

    return exponent >= -20 ? +val.toFixed(exponent < 0 ? -exponent : 0) : val;
  }
  /**
   * This code was copied from "d3.js"
   * <https://github.com/d3/d3/blob/9cc9a875e636a1dcf36cc1e07bdf77e1ad6e2c74/src/arrays/quantile.js>.
   * See the license statement at the head of this file.
   * @param {Array.<number>} ascArr
   */


  function quantile(ascArr, p) {
    var H = (ascArr.length - 1) * p + 1;
    var h = Math.floor(H);
    var v = +ascArr[h - 1];
    var e = H - h;
    return e ? v + e * (ascArr[h] - v) : v;
  }
  /**
   * Order intervals asc, and split them when overlap.
   * expect(numberUtil.reformIntervals([
   *     {interval: [18, 62], close: [1, 1]},
   *     {interval: [-Infinity, -70], close: [0, 0]},
   *     {interval: [-70, -26], close: [1, 1]},
   *     {interval: [-26, 18], close: [1, 1]},
   *     {interval: [62, 150], close: [1, 1]},
   *     {interval: [106, 150], close: [1, 1]},
   *     {interval: [150, Infinity], close: [0, 0]}
   * ])).toEqual([
   *     {interval: [-Infinity, -70], close: [0, 0]},
   *     {interval: [-70, -26], close: [1, 1]},
   *     {interval: [-26, 18], close: [0, 1]},
   *     {interval: [18, 62], close: [0, 1]},
   *     {interval: [62, 150], close: [0, 1]},
   *     {interval: [150, Infinity], close: [0, 0]}
   * ]);
   * @param {Array.<Object>} list, where `close` mean open or close
   *        of the interval, and Infinity can be used.
   * @return {Array.<Object>} The origin list, which has been reformed.
   */


  function reformIntervals(list) {
    list.sort(function (a, b) {
      return littleThan(a, b, 0) ? -1 : 1;
    });
    var curr = -Infinity;
    var currClose = 1;

    for (var i = 0; i < list.length;) {
      var interval = list[i].interval;
      var close = list[i].close;

      for (var lg = 0; lg < 2; lg++) {
        if (interval[lg] <= curr) {
          interval[lg] = curr;
          close[lg] = !lg ? 1 - currClose : 1;
        }

        curr = interval[lg];
        currClose = close[lg];
      }

      if (interval[0] === interval[1] && close[0] * close[1] !== 1) {
        list.splice(i, 1);
      } else {
        i++;
      }
    }

    return list;

    function littleThan(a, b, lg) {
      return a.interval[lg] < b.interval[lg] || a.interval[lg] === b.interval[lg] && (a.close[lg] - b.close[lg] === (!lg ? 1 : -1) || !lg && littleThan(a, b, 1));
    }
  }
  /**
   * parseFloat NaNs numeric-cast false positives (null|true|false|"")
   * ...but misinterprets leading-number strings, particularly hex literals ("0x...")
   * subtraction forces infinities to NaN
   *
   * @param {*} v
   * @return {boolean}
   */


  function isNumeric(v) {
    return v - parseFloat(v) >= 0;
  }

  var linearMap_1 = linearMap;
  var parsePercent_1$1 = parsePercent$1;
  var round_1 = round$1;
  var asc_1 = asc;
  var getPrecision_1 = getPrecision;
  var getPrecisionSafe_1 = getPrecisionSafe;
  var getPixelPrecision_1 = getPixelPrecision;
  var getPercentWithPrecision_1 = getPercentWithPrecision;
  var MAX_SAFE_INTEGER_1 = MAX_SAFE_INTEGER;
  var remRadian_1 = remRadian;
  var isRadianAroundZero_1 = isRadianAroundZero;
  var parseDate_1 = parseDate;
  var quantity_1 = quantity;
  var quantityExponent_1 = quantityExponent;
  var nice_1 = nice;
  var quantile_1 = quantile;
  var reformIntervals_1 = reformIntervals;
  var isNumeric_1 = isNumeric;

  var number = {
  	linearMap: linearMap_1,
  	parsePercent: parsePercent_1$1,
  	round: round_1,
  	asc: asc_1,
  	getPrecision: getPrecision_1,
  	getPrecisionSafe: getPrecisionSafe_1,
  	getPixelPrecision: getPixelPrecision_1,
  	getPercentWithPrecision: getPercentWithPrecision_1,
  	MAX_SAFE_INTEGER: MAX_SAFE_INTEGER_1,
  	remRadian: remRadian_1,
  	isRadianAroundZero: isRadianAroundZero_1,
  	parseDate: parseDate_1,
  	quantity: quantity_1,
  	quantityExponent: quantityExponent_1,
  	nice: nice_1,
  	quantile: quantile_1,
  	reformIntervals: reformIntervals_1,
  	isNumeric: isNumeric_1
  };

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */







  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  // import Text from 'zrender/src/graphic/Text';

  /**
   * 每三位默认加,格式化
   * @param {string|number} x
   * @return {string}
   */
  function addCommas(x) {
    if (isNaN(x)) {
      return '-';
    }

    x = (x + '').split('.');
    return x[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g, '$1,') + (x.length > 1 ? '.' + x[1] : '');
  }
  /**
   * @param {string} str
   * @param {boolean} [upperCaseFirst=false]
   * @return {string} str
   */


  function toCamelCase(str, upperCaseFirst) {
    str = (str || '').toLowerCase().replace(/-(.)/g, function (match, group1) {
      return group1.toUpperCase();
    });

    if (upperCaseFirst && str) {
      str = str.charAt(0).toUpperCase() + str.slice(1);
    }

    return str;
  }

  var normalizeCssArray$2 = util.normalizeCssArray;
  var replaceReg = /([&<>"'])/g;
  var replaceMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    '\'': '&#39;'
  };

  function encodeHTML(source) {
    return source == null ? '' : (source + '').replace(replaceReg, function (str, c) {
      return replaceMap[c];
    });
  }

  var TPL_VAR_ALIAS = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];

  var wrapVar = function (varName, seriesIdx) {
    return '{' + varName + (seriesIdx == null ? '' : seriesIdx) + '}';
  };
  /**
   * Template formatter
   * @param {string} tpl
   * @param {Array.<Object>|Object} paramsList
   * @param {boolean} [encode=false]
   * @return {string}
   */


  function formatTpl(tpl, paramsList, encode) {
    if (!util.isArray(paramsList)) {
      paramsList = [paramsList];
    }

    var seriesLen = paramsList.length;

    if (!seriesLen) {
      return '';
    }

    var $vars = paramsList[0].$vars || [];

    for (var i = 0; i < $vars.length; i++) {
      var alias = TPL_VAR_ALIAS[i];
      tpl = tpl.replace(wrapVar(alias), wrapVar(alias, 0));
    }

    for (var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {
      for (var k = 0; k < $vars.length; k++) {
        var val = paramsList[seriesIdx][$vars[k]];
        tpl = tpl.replace(wrapVar(TPL_VAR_ALIAS[k], seriesIdx), encode ? encodeHTML(val) : val);
      }
    }

    return tpl;
  }
  /**
   * simple Template formatter
   *
   * @param {string} tpl
   * @param {Object} param
   * @param {boolean} [encode=false]
   * @return {string}
   */


  function formatTplSimple(tpl, param, encode) {
    util.each(param, function (value, key) {
      tpl = tpl.replace('{' + key + '}', encode ? encodeHTML(value) : value);
    });
    return tpl;
  }
  /**
   * @param {Object|string} [opt] If string, means color.
   * @param {string} [opt.color]
   * @param {string} [opt.extraCssText]
   * @param {string} [opt.type='item'] 'item' or 'subItem'
   * @param {string} [opt.renderMode='html'] render mode of tooltip, 'html' or 'richText'
   * @param {string} [opt.markerId='X'] id name for marker. If only one marker is in a rich text, this can be omitted.
   * @return {string}
   */


  function getTooltipMarker(opt, extraCssText) {
    opt = util.isString(opt) ? {
      color: opt,
      extraCssText: extraCssText
    } : opt || {};
    var color = opt.color;
    var type = opt.type;
    var extraCssText = opt.extraCssText;
    var renderMode = opt.renderMode || 'html';
    var markerId = opt.markerId || 'X';

    if (!color) {
      return '';
    }

    if (renderMode === 'html') {
      return type === 'subItem' ? '<span style="display:inline-block;vertical-align:middle;margin-right:8px;margin-left:3px;' + 'border-radius:4px;width:4px;height:4px;background-color:' + encodeHTML(color) + ';' + (extraCssText || '') + '"></span>' : '<span style="display:inline-block;margin-right:5px;' + 'border-radius:10px;width:10px;height:10px;background-color:' + encodeHTML(color) + ';' + (extraCssText || '') + '"></span>';
    } else {
      // Space for rich element marker
      return {
        renderMode: renderMode,
        content: '{marker' + markerId + '|}  ',
        style: {
          color: color
        }
      };
    }
  }

  function pad(str, len) {
    str += '';
    return '0000'.substr(0, len - str.length) + str;
  }
  /**
   * ISO Date format
   * @param {string} tpl
   * @param {number} value
   * @param {boolean} [isUTC=false] Default in local time.
   *           see `module:echarts/scale/Time`
   *           and `module:echarts/util/number#parseDate`.
   * @inner
   */


  function formatTime(tpl, value, isUTC) {
    if (tpl === 'week' || tpl === 'month' || tpl === 'quarter' || tpl === 'half-year' || tpl === 'year') {
      tpl = 'MM-dd\nyyyy';
    }

    var date = number.parseDate(value);
    var utc = isUTC ? 'UTC' : '';
    var y = date['get' + utc + 'FullYear']();
    var M = date['get' + utc + 'Month']() + 1;
    var d = date['get' + utc + 'Date']();
    var h = date['get' + utc + 'Hours']();
    var m = date['get' + utc + 'Minutes']();
    var s = date['get' + utc + 'Seconds']();
    var S = date['get' + utc + 'Milliseconds']();
    tpl = tpl.replace('MM', pad(M, 2)).replace('M', M).replace('yyyy', y).replace('yy', y % 100).replace('dd', pad(d, 2)).replace('d', d).replace('hh', pad(h, 2)).replace('h', h).replace('mm', pad(m, 2)).replace('m', m).replace('ss', pad(s, 2)).replace('s', s).replace('SSS', pad(S, 3));
    return tpl;
  }
  /**
   * Capital first
   * @param {string} str
   * @return {string}
   */


  function capitalFirst(str) {
    return str ? str.charAt(0).toUpperCase() + str.substr(1) : str;
  }

  var truncateText$1 = text.truncateText;
  /**
   * @public
   * @param {Object} opt
   * @param {string} opt.text
   * @param {string} opt.font
   * @param {string} [opt.textAlign='left']
   * @param {string} [opt.textVerticalAlign='top']
   * @param {Array.<number>} [opt.textPadding]
   * @param {number} [opt.textLineHeight]
   * @param {Object} [opt.rich]
   * @param {Object} [opt.truncate]
   * @return {Object} {x, y, width, height, lineHeight}
   */

  function getTextBoundingRect(opt) {
    return text.getBoundingRect(opt.text, opt.font, opt.textAlign, opt.textVerticalAlign, opt.textPadding, opt.textLineHeight, opt.rich, opt.truncate);
  }
  /**
   * @deprecated
   * the `textLineHeight` was added later.
   * For backward compatiblility, put it as the last parameter.
   * But deprecated this interface. Please use `getTextBoundingRect` instead.
   */


  function getTextRect(text$1, font, textAlign, textVerticalAlign, textPadding, rich, truncate, textLineHeight) {
    return text.getBoundingRect(text$1, font, textAlign, textVerticalAlign, textPadding, textLineHeight, rich, truncate);
  }

  var addCommas_1 = addCommas;
  var toCamelCase_1 = toCamelCase;
  var normalizeCssArray_1$1 = normalizeCssArray$2;
  var encodeHTML_1 = encodeHTML;
  var formatTpl_1 = formatTpl;
  var formatTplSimple_1 = formatTplSimple;
  var getTooltipMarker_1 = getTooltipMarker;
  var formatTime_1 = formatTime;
  var capitalFirst_1 = capitalFirst;
  var truncateText_1$1 = truncateText$1;
  var getTextBoundingRect_1 = getTextBoundingRect;
  var getTextRect_1 = getTextRect;

  var format = {
  	addCommas: addCommas_1,
  	toCamelCase: toCamelCase_1,
  	normalizeCssArray: normalizeCssArray_1$1,
  	encodeHTML: encodeHTML_1,
  	formatTpl: formatTpl_1,
  	formatTplSimple: formatTplSimple_1,
  	getTooltipMarker: getTooltipMarker_1,
  	formatTime: formatTime_1,
  	capitalFirst: capitalFirst_1,
  	truncateText: truncateText_1$1,
  	getTextBoundingRect: getTextBoundingRect_1,
  	getTextRect: getTextRect_1
  };

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */







  var parsePercent$2 = number.parsePercent;



  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  // Layout helpers for each component positioning
  var each$3 = util.each;
  /**
   * @public
   */

  var LOCATION_PARAMS = ['left', 'right', 'top', 'bottom', 'width', 'height'];
  /**
   * @public
   */

  var HV_NAMES = [['width', 'left', 'right'], ['height', 'top', 'bottom']];

  function boxLayout(orient, group, gap, maxWidth, maxHeight) {
    var x = 0;
    var y = 0;

    if (maxWidth == null) {
      maxWidth = Infinity;
    }

    if (maxHeight == null) {
      maxHeight = Infinity;
    }

    var currentLineMaxSize = 0;
    group.eachChild(function (child, idx) {
      var position = child.position;
      var rect = child.getBoundingRect();
      var nextChild = group.childAt(idx + 1);
      var nextChildRect = nextChild && nextChild.getBoundingRect();
      var nextX;
      var nextY;

      if (orient === 'horizontal') {
        var moveX = rect.width + (nextChildRect ? -nextChildRect.x + rect.x : 0);
        nextX = x + moveX; // Wrap when width exceeds maxWidth or meet a `newline` group
        // FIXME compare before adding gap?

        if (nextX > maxWidth || child.newline) {
          x = 0;
          nextX = moveX;
          y += currentLineMaxSize + gap;
          currentLineMaxSize = rect.height;
        } else {
          // FIXME: consider rect.y is not `0`?
          currentLineMaxSize = Math.max(currentLineMaxSize, rect.height);
        }
      } else {
        var moveY = rect.height + (nextChildRect ? -nextChildRect.y + rect.y : 0);
        nextY = y + moveY; // Wrap when width exceeds maxHeight or meet a `newline` group

        if (nextY > maxHeight || child.newline) {
          x += currentLineMaxSize + gap;
          y = 0;
          nextY = moveY;
          currentLineMaxSize = rect.width;
        } else {
          currentLineMaxSize = Math.max(currentLineMaxSize, rect.width);
        }
      }

      if (child.newline) {
        return;
      }

      position[0] = x;
      position[1] = y;
      orient === 'horizontal' ? x = nextX + gap : y = nextY + gap;
    });
  }
  /**
   * VBox or HBox layouting
   * @param {string} orient
   * @param {module:zrender/container/Group} group
   * @param {number} gap
   * @param {number} [width=Infinity]
   * @param {number} [height=Infinity]
   */


  var box = boxLayout;
  /**
   * VBox layouting
   * @param {module:zrender/container/Group} group
   * @param {number} gap
   * @param {number} [width=Infinity]
   * @param {number} [height=Infinity]
   */

  var vbox = util.curry(boxLayout, 'vertical');
  /**
   * HBox layouting
   * @param {module:zrender/container/Group} group
   * @param {number} gap
   * @param {number} [width=Infinity]
   * @param {number} [height=Infinity]
   */

  var hbox = util.curry(boxLayout, 'horizontal');
  /**
   * If x or x2 is not specified or 'center' 'left' 'right',
   * the width would be as long as possible.
   * If y or y2 is not specified or 'middle' 'top' 'bottom',
   * the height would be as long as possible.
   *
   * @param {Object} positionInfo
   * @param {number|string} [positionInfo.x]
   * @param {number|string} [positionInfo.y]
   * @param {number|string} [positionInfo.x2]
   * @param {number|string} [positionInfo.y2]
   * @param {Object} containerRect {width, height}
   * @param {string|number} margin
   * @return {Object} {width, height}
   */

  function getAvailableSize(positionInfo, containerRect, margin) {
    var containerWidth = containerRect.width;
    var containerHeight = containerRect.height;
    var x = parsePercent$2(positionInfo.x, containerWidth);
    var y = parsePercent$2(positionInfo.y, containerHeight);
    var x2 = parsePercent$2(positionInfo.x2, containerWidth);
    var y2 = parsePercent$2(positionInfo.y2, containerHeight);
    (isNaN(x) || isNaN(parseFloat(positionInfo.x))) && (x = 0);
    (isNaN(x2) || isNaN(parseFloat(positionInfo.x2))) && (x2 = containerWidth);
    (isNaN(y) || isNaN(parseFloat(positionInfo.y))) && (y = 0);
    (isNaN(y2) || isNaN(parseFloat(positionInfo.y2))) && (y2 = containerHeight);
    margin = format.normalizeCssArray(margin || 0);
    return {
      width: Math.max(x2 - x - margin[1] - margin[3], 0),
      height: Math.max(y2 - y - margin[0] - margin[2], 0)
    };
  }
  /**
   * Parse position info.
   *
   * @param {Object} positionInfo
   * @param {number|string} [positionInfo.left]
   * @param {number|string} [positionInfo.top]
   * @param {number|string} [positionInfo.right]
   * @param {number|string} [positionInfo.bottom]
   * @param {number|string} [positionInfo.width]
   * @param {number|string} [positionInfo.height]
   * @param {number|string} [positionInfo.aspect] Aspect is width / height
   * @param {Object} containerRect
   * @param {string|number} [margin]
   *
   * @return {module:zrender/core/BoundingRect}
   */


  function getLayoutRect(positionInfo, containerRect, margin) {
    margin = format.normalizeCssArray(margin || 0);
    var containerWidth = containerRect.width;
    var containerHeight = containerRect.height;
    var left = parsePercent$2(positionInfo.left, containerWidth);
    var top = parsePercent$2(positionInfo.top, containerHeight);
    var right = parsePercent$2(positionInfo.right, containerWidth);
    var bottom = parsePercent$2(positionInfo.bottom, containerHeight);
    var width = parsePercent$2(positionInfo.width, containerWidth);
    var height = parsePercent$2(positionInfo.height, containerHeight);
    var verticalMargin = margin[2] + margin[0];
    var horizontalMargin = margin[1] + margin[3];
    var aspect = positionInfo.aspect; // If width is not specified, calculate width from left and right

    if (isNaN(width)) {
      width = containerWidth - right - horizontalMargin - left;
    }

    if (isNaN(height)) {
      height = containerHeight - bottom - verticalMargin - top;
    }

    if (aspect != null) {
      // If width and height are not given
      // 1. Graph should not exceeds the container
      // 2. Aspect must be keeped
      // 3. Graph should take the space as more as possible
      // FIXME
      // Margin is not considered, because there is no case that both
      // using margin and aspect so far.
      if (isNaN(width) && isNaN(height)) {
        if (aspect > containerWidth / containerHeight) {
          width = containerWidth * 0.8;
        } else {
          height = containerHeight * 0.8;
        }
      } // Calculate width or height with given aspect


      if (isNaN(width)) {
        width = aspect * height;
      }

      if (isNaN(height)) {
        height = width / aspect;
      }
    } // If left is not specified, calculate left from right and width


    if (isNaN(left)) {
      left = containerWidth - right - width - horizontalMargin;
    }

    if (isNaN(top)) {
      top = containerHeight - bottom - height - verticalMargin;
    } // Align left and top


    switch (positionInfo.left || positionInfo.right) {
      case 'center':
        left = containerWidth / 2 - width / 2 - margin[3];
        break;

      case 'right':
        left = containerWidth - width - horizontalMargin;
        break;
    }

    switch (positionInfo.top || positionInfo.bottom) {
      case 'middle':
      case 'center':
        top = containerHeight / 2 - height / 2 - margin[0];
        break;

      case 'bottom':
        top = containerHeight - height - verticalMargin;
        break;
    } // If something is wrong and left, top, width, height are calculated as NaN


    left = left || 0;
    top = top || 0;

    if (isNaN(width)) {
      // Width may be NaN if only one value is given except width
      width = containerWidth - horizontalMargin - left - (right || 0);
    }

    if (isNaN(height)) {
      // Height may be NaN if only one value is given except height
      height = containerHeight - verticalMargin - top - (bottom || 0);
    }

    var rect = new BoundingRect_1(left + margin[3], top + margin[0], width, height);
    rect.margin = margin;
    return rect;
  }
  /**
   * Position a zr element in viewport
   *  Group position is specified by either
   *  {left, top}, {right, bottom}
   *  If all properties exists, right and bottom will be igonred.
   *
   * Logic:
   *     1. Scale (against origin point in parent coord)
   *     2. Rotate (against origin point in parent coord)
   *     3. Traslate (with el.position by this method)
   * So this method only fixes the last step 'Traslate', which does not affect
   * scaling and rotating.
   *
   * If be called repeatly with the same input el, the same result will be gotten.
   *
   * @param {module:zrender/Element} el Should have `getBoundingRect` method.
   * @param {Object} positionInfo
   * @param {number|string} [positionInfo.left]
   * @param {number|string} [positionInfo.top]
   * @param {number|string} [positionInfo.right]
   * @param {number|string} [positionInfo.bottom]
   * @param {number|string} [positionInfo.width] Only for opt.boundingModel: 'raw'
   * @param {number|string} [positionInfo.height] Only for opt.boundingModel: 'raw'
   * @param {Object} containerRect
   * @param {string|number} margin
   * @param {Object} [opt]
   * @param {Array.<number>} [opt.hv=[1,1]] Only horizontal or only vertical.
   * @param {Array.<number>} [opt.boundingMode='all']
   *        Specify how to calculate boundingRect when locating.
   *        'all': Position the boundingRect that is transformed and uioned
   *               both itself and its descendants.
   *               This mode simplies confine the elements in the bounding
   *               of their container (e.g., using 'right: 0').
   *        'raw': Position the boundingRect that is not transformed and only itself.
   *               This mode is useful when you want a element can overflow its
   *               container. (Consider a rotated circle needs to be located in a corner.)
   *               In this mode positionInfo.width/height can only be number.
   */


  function positionElement(el, positionInfo, containerRect, margin, opt) {
    var h = !opt || !opt.hv || opt.hv[0];
    var v = !opt || !opt.hv || opt.hv[1];
    var boundingMode = opt && opt.boundingMode || 'all';

    if (!h && !v) {
      return;
    }

    var rect;

    if (boundingMode === 'raw') {
      rect = el.type === 'group' ? new BoundingRect_1(0, 0, +positionInfo.width || 0, +positionInfo.height || 0) : el.getBoundingRect();
    } else {
      rect = el.getBoundingRect();

      if (el.needLocalTransform()) {
        var transform = el.getLocalTransform(); // Notice: raw rect may be inner object of el,
        // which should not be modified.

        rect = rect.clone();
        rect.applyTransform(transform);
      }
    } // The real width and height can not be specified but calculated by the given el.


    positionInfo = getLayoutRect(util.defaults({
      width: rect.width,
      height: rect.height
    }, positionInfo), containerRect, margin); // Because 'tranlate' is the last step in transform
    // (see zrender/core/Transformable#getLocalTransform),
    // we can just only modify el.position to get final result.

    var elPos = el.position;
    var dx = h ? positionInfo.x - rect.x : 0;
    var dy = v ? positionInfo.y - rect.y : 0;
    el.attr('position', boundingMode === 'raw' ? [dx, dy] : [elPos[0] + dx, elPos[1] + dy]);
  }
  /**
   * @param {Object} option Contains some of the properties in HV_NAMES.
   * @param {number} hvIdx 0: horizontal; 1: vertical.
   */


  function sizeCalculable(option, hvIdx) {
    return option[HV_NAMES[hvIdx][0]] != null || option[HV_NAMES[hvIdx][1]] != null && option[HV_NAMES[hvIdx][2]] != null;
  }
  /**
   * Consider Case:
   * When defulat option has {left: 0, width: 100}, and we set {right: 0}
   * through setOption or media query, using normal zrUtil.merge will cause
   * {right: 0} does not take effect.
   *
   * @example
   * ComponentModel.extend({
   *     init: function () {
   *         ...
   *         var inputPositionParams = layout.getLayoutParams(option);
   *         this.mergeOption(inputPositionParams);
   *     },
   *     mergeOption: function (newOption) {
   *         newOption && zrUtil.merge(thisOption, newOption, true);
   *         layout.mergeLayoutParam(thisOption, newOption);
   *     }
   * });
   *
   * @param {Object} targetOption
   * @param {Object} newOption
   * @param {Object|string} [opt]
   * @param {boolean|Array.<boolean>} [opt.ignoreSize=false] Used for the components
   *  that width (or height) should not be calculated by left and right (or top and bottom).
   */


  function mergeLayoutParam(targetOption, newOption, opt) {
    !util.isObject(opt) && (opt = {});
    var ignoreSize = opt.ignoreSize;
    !util.isArray(ignoreSize) && (ignoreSize = [ignoreSize, ignoreSize]);
    var hResult = merge(HV_NAMES[0], 0);
    var vResult = merge(HV_NAMES[1], 1);
    copy(HV_NAMES[0], targetOption, hResult);
    copy(HV_NAMES[1], targetOption, vResult);

    function merge(names, hvIdx) {
      var newParams = {};
      var newValueCount = 0;
      var merged = {};
      var mergedValueCount = 0;
      var enoughParamNumber = 2;
      each$3(names, function (name) {
        merged[name] = targetOption[name];
      });
      each$3(names, function (name) {
        // Consider case: newOption.width is null, which is
        // set by user for removing width setting.
        hasProp(newOption, name) && (newParams[name] = merged[name] = newOption[name]);
        hasValue(newParams, name) && newValueCount++;
        hasValue(merged, name) && mergedValueCount++;
      });

      if (ignoreSize[hvIdx]) {
        // Only one of left/right is premitted to exist.
        if (hasValue(newOption, names[1])) {
          merged[names[2]] = null;
        } else if (hasValue(newOption, names[2])) {
          merged[names[1]] = null;
        }

        return merged;
      } // Case: newOption: {width: ..., right: ...},
      // or targetOption: {right: ...} and newOption: {width: ...},
      // There is no conflict when merged only has params count
      // little than enoughParamNumber.


      if (mergedValueCount === enoughParamNumber || !newValueCount) {
        return merged;
      } // Case: newOption: {width: ..., right: ...},
      // Than we can make sure user only want those two, and ignore
      // all origin params in targetOption.
      else if (newValueCount >= enoughParamNumber) {
          return newParams;
        } else {
          // Chose another param from targetOption by priority.
          for (var i = 0; i < names.length; i++) {
            var name = names[i];

            if (!hasProp(newParams, name) && hasProp(targetOption, name)) {
              newParams[name] = targetOption[name];
              break;
            }
          }

          return newParams;
        }
    }

    function hasProp(obj, name) {
      return obj.hasOwnProperty(name);
    }

    function hasValue(obj, name) {
      return obj[name] != null && obj[name] !== 'auto';
    }

    function copy(names, target, source) {
      each$3(names, function (name) {
        target[name] = source[name];
      });
    }
  }
  /**
   * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.
   * @param {Object} source
   * @return {Object} Result contains those props.
   */


  function getLayoutParams(source) {
    return copyLayoutParams({}, source);
  }
  /**
   * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.
   * @param {Object} source
   * @return {Object} Result contains those props.
   */


  function copyLayoutParams(target, source) {
    source && target && each$3(LOCATION_PARAMS, function (name) {
      source.hasOwnProperty(name) && (target[name] = source[name]);
    });
    return target;
  }

  var LOCATION_PARAMS_1 = LOCATION_PARAMS;
  var HV_NAMES_1 = HV_NAMES;
  var box_1 = box;
  var vbox_1 = vbox;
  var hbox_1 = hbox;
  var getAvailableSize_1 = getAvailableSize;
  var getLayoutRect_1 = getLayoutRect;
  var positionElement_1 = positionElement;
  var sizeCalculable_1 = sizeCalculable;
  var mergeLayoutParam_1 = mergeLayoutParam;
  var getLayoutParams_1 = getLayoutParams;
  var copyLayoutParams_1 = copyLayoutParams;

  var layout = {
  	LOCATION_PARAMS: LOCATION_PARAMS_1,
  	HV_NAMES: HV_NAMES_1,
  	box: box_1,
  	vbox: vbox_1,
  	hbox: hbox_1,
  	getAvailableSize: getAvailableSize_1,
  	getLayoutRect: getLayoutRect_1,
  	positionElement: positionElement_1,
  	sizeCalculable: sizeCalculable_1,
  	mergeLayoutParam: mergeLayoutParam_1,
  	getLayoutParams: getLayoutParams_1,
  	copyLayoutParams: copyLayoutParams_1
  };

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var _default$T = {
    getBoxLayoutParams: function () {
      return {
        left: this.get('left'),
        top: this.get('top'),
        right: this.get('right'),
        bottom: this.get('bottom'),
        width: this.get('width'),
        height: this.get('height')
      };
    }
  };
  var boxLayout$1 = _default$T;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */









  var enableClassManagement$1 = clazz.enableClassManagement;
  var parseClassType$2 = clazz.parseClassType;



  var makeInner$2 = model.makeInner;





  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * Component model
   *
   * @module echarts/model/Component
   */
  var inner$1 = makeInner$2();
  /**
   * @alias module:echarts/model/Component
   * @constructor
   * @param {Object} option
   * @param {module:echarts/model/Model} parentModel
   * @param {module:echarts/model/Model} ecModel
   */

  var ComponentModel = Model_1.extend({
    type: 'component',

    /**
     * @readOnly
     * @type {string}
     */
    id: '',

    /**
     * Because simplified concept is probably better, series.name (or component.name)
     * has been having too many resposibilities:
     * (1) Generating id (which requires name in option should not be modified).
     * (2) As an index to mapping series when merging option or calling API (a name
     * can refer to more then one components, which is convinient is some case).
     * (3) Display.
     * @readOnly
     */
    name: '',

    /**
     * @readOnly
     * @type {string}
     */
    mainType: '',

    /**
     * @readOnly
     * @type {string}
     */
    subType: '',

    /**
     * @readOnly
     * @type {number}
     */
    componentIndex: 0,

    /**
     * @type {Object}
     * @protected
     */
    defaultOption: null,

    /**
     * @type {module:echarts/model/Global}
     * @readOnly
     */
    ecModel: null,

    /**
     * key: componentType
     * value:  Component model list, can not be null.
     * @type {Object.<string, Array.<module:echarts/model/Model>>}
     * @readOnly
     */
    dependentModels: [],

    /**
     * @type {string}
     * @readOnly
     */
    uid: null,

    /**
     * Support merge layout params.
     * Only support 'box' now (left/right/top/bottom/width/height).
     * @type {string|Object} Object can be {ignoreSize: true}
     * @readOnly
     */
    layoutMode: null,
    $constructor: function (option, parentModel, ecModel, extraOpt) {
      Model_1.call(this, option, parentModel, ecModel, extraOpt);
      this.uid = component.getUID('ec_cpt_model');
    },
    init: function (option, parentModel, ecModel, extraOpt) {
      this.mergeDefaultAndTheme(option, ecModel);
    },
    mergeDefaultAndTheme: function (option, ecModel) {
      var layoutMode = this.layoutMode;
      var inputPositionParams = layoutMode ? layout.getLayoutParams(option) : {};
      var themeModel = ecModel.getTheme();
      util.merge(option, themeModel.get(this.mainType));
      util.merge(option, this.getDefaultOption());

      if (layoutMode) {
        layout.mergeLayoutParam(option, inputPositionParams, layoutMode);
      }
    },
    mergeOption: function (option, extraOpt) {
      util.merge(this.option, option, true);
      var layoutMode = this.layoutMode;

      if (layoutMode) {
        layout.mergeLayoutParam(this.option, option, layoutMode);
      }
    },
    // Hooker after init or mergeOption
    optionUpdated: function (newCptOption, isInit) {},
    getDefaultOption: function () {
      var fields = inner$1(this);

      if (!fields.defaultOption) {
        var optList = [];
        var Class = this.constructor;

        while (Class) {
          var opt = Class.prototype.defaultOption;
          opt && optList.push(opt);
          Class = Class.superClass;
        }

        var defaultOption = {};

        for (var i = optList.length - 1; i >= 0; i--) {
          defaultOption = util.merge(defaultOption, optList[i], true);
        }

        fields.defaultOption = defaultOption;
      }

      return fields.defaultOption;
    },
    getReferringComponents: function (mainType) {
      return this.ecModel.queryComponents({
        mainType: mainType,
        index: this.get(mainType + 'Index', true),
        id: this.get(mainType + 'Id', true)
      });
    }
  }); // Reset ComponentModel.extend, add preConstruct.
  // clazzUtil.enableClassExtend(
  //     ComponentModel,
  //     function (option, parentModel, ecModel, extraOpt) {
  //         // Set dependentModels, componentIndex, name, id, mainType, subType.
  //         zrUtil.extend(this, extraOpt);
  //         this.uid = componentUtil.getUID('componentModel');
  //         // this.setReadOnly([
  //         //     'type', 'id', 'uid', 'name', 'mainType', 'subType',
  //         //     'dependentModels', 'componentIndex'
  //         // ]);
  //     }
  // );
  // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.

  enableClassManagement$1(ComponentModel, {
    registerWhenExtend: true
  });
  component.enableSubTypeDefaulter(ComponentModel); // Add capability of ComponentModel.topologicalTravel.

  component.enableTopologicalTravel(ComponentModel, getDependencies);

  function getDependencies(componentType) {
    var deps = [];
    util.each(ComponentModel.getClassesByMainType(componentType), function (Clazz) {
      deps = deps.concat(Clazz.prototype.dependencies || []);
    }); // Ensure main type.

    deps = util.map(deps, function (type) {
      return parseClassType$2(type).main;
    }); // Hack dataset for convenience.

    if (componentType !== 'dataset' && util.indexOf(deps, 'dataset') <= 0) {
      deps.unshift('dataset');
    }

    return deps;
  }

  util.mixin(ComponentModel, boxLayout$1);
  var _default$U = ComponentModel;
  var Component = _default$U;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var platform = ''; // Navigator not exists in node

  if (typeof navigator !== 'undefined') {
    platform = navigator.platform || '';
  }

  var _default$V = {
    // backgroundColor: 'rgba(0,0,0,0)',
    // https://dribbble.com/shots/1065960-Infographic-Pie-chart-visualization
    // color: ['#5793f3', '#d14a61', '#fd9c35', '#675bba', '#fec42c', '#dd4444', '#d4df5a', '#cd4870'],
    // Light colors:
    // color: ['#bcd3bb', '#e88f70', '#edc1a5', '#9dc5c8', '#e1e8c8', '#7b7c68', '#e5b5b5', '#f0b489', '#928ea8', '#bda29a'],
    // color: ['#cc5664', '#9bd6ec', '#ea946e', '#8acaaa', '#f1ec64', '#ee8686', '#a48dc1', '#5da6bc', '#b9dcae'],
    // Dark colors:
    color: ['#c23531', '#2f4554', '#61a0a8', '#d48265', '#91c7ae', '#749f83', '#ca8622', '#bda29a', '#6e7074', '#546570', '#c4ccd3'],
    gradientColor: ['#f6efa6', '#d88273', '#bf444c'],
    // If xAxis and yAxis declared, grid is created by default.
    // grid: {},
    textStyle: {
      // color: '#000',
      // decoration: 'none',
      // PENDING
      fontFamily: platform.match(/^Win/) ? 'Microsoft YaHei' : 'sans-serif',
      // fontFamily: 'Arial, Verdana, sans-serif',
      fontSize: 12,
      fontStyle: 'normal',
      fontWeight: 'normal'
    },
    // http://blogs.adobe.com/webplatform/2014/02/24/using-blend-modes-in-html-canvas/
    // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation
    // Default is source-over
    blendMode: null,
    animation: 'auto',
    animationDuration: 1000,
    animationDurationUpdate: 300,
    animationEasing: 'exponentialOut',
    animationEasingUpdate: 'cubicOut',
    animationThreshold: 2000,
    // Configuration for progressive/incremental rendering
    progressiveThreshold: 3000,
    progressive: 400,
    // Threshold of if use single hover layer to optimize.
    // It is recommended that `hoverLayerThreshold` is equivalent to or less than
    // `progressiveThreshold`, otherwise hover will cause restart of progressive,
    // which is unexpected.
    // see example <echarts/test/heatmap-large.html>.
    hoverLayerThreshold: 3000,
    // See: module:echarts/scale/Time
    useUTC: false
  };
  var globalDefault = _default$V;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  var makeInner$3 = model.makeInner;
  var normalizeToArray$1 = model.normalizeToArray;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var inner$2 = makeInner$3();

  function getNearestColorPalette(colors, requestColorNum) {
    var paletteNum = colors.length; // TODO colors must be in order

    for (var i = 0; i < paletteNum; i++) {
      if (colors[i].length > requestColorNum) {
        return colors[i];
      }
    }

    return colors[paletteNum - 1];
  }

  var _default$W = {
    clearColorPalette: function () {
      inner$2(this).colorIdx = 0;
      inner$2(this).colorNameMap = {};
    },

    /**
     * @param {string} name MUST NOT be null/undefined. Otherwise call this function
     *                 twise with the same parameters will get different result.
     * @param {Object} [scope=this]
     * @param {Object} [requestColorNum]
     * @return {string} color string.
     */
    getColorFromPalette: function (name, scope, requestColorNum) {
      scope = scope || this;
      var scopeFields = inner$2(scope);
      var colorIdx = scopeFields.colorIdx || 0;
      var colorNameMap = scopeFields.colorNameMap = scopeFields.colorNameMap || {}; // Use `hasOwnProperty` to avoid conflict with Object.prototype.

      if (colorNameMap.hasOwnProperty(name)) {
        return colorNameMap[name];
      }

      var defaultColorPalette = normalizeToArray$1(this.get('color', true));
      var layeredColorPalette = this.get('colorLayer', true);
      var colorPalette = requestColorNum == null || !layeredColorPalette ? defaultColorPalette : getNearestColorPalette(layeredColorPalette, requestColorNum); // In case can't find in layered color palette.

      colorPalette = colorPalette || defaultColorPalette;

      if (!colorPalette || !colorPalette.length) {
        return;
      }

      var color = colorPalette[colorIdx];

      if (name) {
        colorNameMap[name] = color;
      }

      scopeFields.colorIdx = (colorIdx + 1) % colorPalette.length;
      return color;
    }
  };
  var colorPalette = _default$W;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  // Avoid typo.
  var SOURCE_FORMAT_ORIGINAL = 'original';
  var SOURCE_FORMAT_ARRAY_ROWS = 'arrayRows';
  var SOURCE_FORMAT_OBJECT_ROWS = 'objectRows';
  var SOURCE_FORMAT_KEYED_COLUMNS = 'keyedColumns';
  var SOURCE_FORMAT_UNKNOWN = 'unknown'; // ??? CHANGE A NAME

  var SOURCE_FORMAT_TYPED_ARRAY = 'typedArray';
  var SERIES_LAYOUT_BY_COLUMN = 'column';
  var SERIES_LAYOUT_BY_ROW = 'row';
  var SOURCE_FORMAT_ORIGINAL_1 = SOURCE_FORMAT_ORIGINAL;
  var SOURCE_FORMAT_ARRAY_ROWS_1 = SOURCE_FORMAT_ARRAY_ROWS;
  var SOURCE_FORMAT_OBJECT_ROWS_1 = SOURCE_FORMAT_OBJECT_ROWS;
  var SOURCE_FORMAT_KEYED_COLUMNS_1 = SOURCE_FORMAT_KEYED_COLUMNS;
  var SOURCE_FORMAT_UNKNOWN_1 = SOURCE_FORMAT_UNKNOWN;
  var SOURCE_FORMAT_TYPED_ARRAY_1 = SOURCE_FORMAT_TYPED_ARRAY;
  var SERIES_LAYOUT_BY_COLUMN_1 = SERIES_LAYOUT_BY_COLUMN;
  var SERIES_LAYOUT_BY_ROW_1 = SERIES_LAYOUT_BY_ROW;

  var sourceType = {
  	SOURCE_FORMAT_ORIGINAL: SOURCE_FORMAT_ORIGINAL_1,
  	SOURCE_FORMAT_ARRAY_ROWS: SOURCE_FORMAT_ARRAY_ROWS_1,
  	SOURCE_FORMAT_OBJECT_ROWS: SOURCE_FORMAT_OBJECT_ROWS_1,
  	SOURCE_FORMAT_KEYED_COLUMNS: SOURCE_FORMAT_KEYED_COLUMNS_1,
  	SOURCE_FORMAT_UNKNOWN: SOURCE_FORMAT_UNKNOWN_1,
  	SOURCE_FORMAT_TYPED_ARRAY: SOURCE_FORMAT_TYPED_ARRAY_1,
  	SERIES_LAYOUT_BY_COLUMN: SERIES_LAYOUT_BY_COLUMN_1,
  	SERIES_LAYOUT_BY_ROW: SERIES_LAYOUT_BY_ROW_1
  };

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  var createHashMap$1 = util.createHashMap;
  var isTypedArray$1 = util.isTypedArray;



  var enableClassCheck$2 = clazz.enableClassCheck;



  var SOURCE_FORMAT_ORIGINAL$1 = sourceType.SOURCE_FORMAT_ORIGINAL;
  var SERIES_LAYOUT_BY_COLUMN$1 = sourceType.SERIES_LAYOUT_BY_COLUMN;
  var SOURCE_FORMAT_UNKNOWN$1 = sourceType.SOURCE_FORMAT_UNKNOWN;
  var SOURCE_FORMAT_TYPED_ARRAY$1 = sourceType.SOURCE_FORMAT_TYPED_ARRAY;
  var SOURCE_FORMAT_KEYED_COLUMNS$1 = sourceType.SOURCE_FORMAT_KEYED_COLUMNS;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * [sourceFormat]
   *
   * + "original":
   * This format is only used in series.data, where
   * itemStyle can be specified in data item.
   *
   * + "arrayRows":
   * [
   *     ['product', 'score', 'amount'],
   *     ['Matcha Latte', 89.3, 95.8],
   *     ['Milk Tea', 92.1, 89.4],
   *     ['Cheese Cocoa', 94.4, 91.2],
   *     ['Walnut Brownie', 85.4, 76.9]
   * ]
   *
   * + "objectRows":
   * [
   *     {product: 'Matcha Latte', score: 89.3, amount: 95.8},
   *     {product: 'Milk Tea', score: 92.1, amount: 89.4},
   *     {product: 'Cheese Cocoa', score: 94.4, amount: 91.2},
   *     {product: 'Walnut Brownie', score: 85.4, amount: 76.9}
   * ]
   *
   * + "keyedColumns":
   * {
   *     'product': ['Matcha Latte', 'Milk Tea', 'Cheese Cocoa', 'Walnut Brownie'],
   *     'count': [823, 235, 1042, 988],
   *     'score': [95.8, 81.4, 91.2, 76.9]
   * }
   *
   * + "typedArray"
   *
   * + "unknown"
   */

  /**
   * @constructor
   * @param {Object} fields
   * @param {string} fields.sourceFormat
   * @param {Array|Object} fields.fromDataset
   * @param {Array|Object} [fields.data]
   * @param {string} [seriesLayoutBy='column']
   * @param {Array.<Object|string>} [dimensionsDefine]
   * @param {Objet|HashMap} [encodeDefine]
   * @param {number} [startIndex=0]
   * @param {number} [dimensionsDetectCount]
   */
  function Source(fields) {
    /**
     * @type {boolean}
     */
    this.fromDataset = fields.fromDataset;
    /**
     * Not null/undefined.
     * @type {Array|Object}
     */

    this.data = fields.data || (fields.sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS$1 ? {} : []);
    /**
     * See also "detectSourceFormat".
     * Not null/undefined.
     * @type {string}
     */

    this.sourceFormat = fields.sourceFormat || SOURCE_FORMAT_UNKNOWN$1;
    /**
     * 'row' or 'column'
     * Not null/undefined.
     * @type {string} seriesLayoutBy
     */

    this.seriesLayoutBy = fields.seriesLayoutBy || SERIES_LAYOUT_BY_COLUMN$1;
    /**
     * dimensions definition in option.
     * can be null/undefined.
     * @type {Array.<Object|string>}
     */

    this.dimensionsDefine = fields.dimensionsDefine;
    /**
     * encode definition in option.
     * can be null/undefined.
     * @type {Objet|HashMap}
     */

    this.encodeDefine = fields.encodeDefine && createHashMap$1(fields.encodeDefine);
    /**
     * Not null/undefined, uint.
     * @type {number}
     */

    this.startIndex = fields.startIndex || 0;
    /**
     * Can be null/undefined (when unknown), uint.
     * @type {number}
     */

    this.dimensionsDetectCount = fields.dimensionsDetectCount;
  }
  /**
   * Wrap original series data for some compatibility cases.
   */


  Source.seriesDataToSource = function (data) {
    return new Source({
      data: data,
      sourceFormat: isTypedArray$1(data) ? SOURCE_FORMAT_TYPED_ARRAY$1 : SOURCE_FORMAT_ORIGINAL$1,
      fromDataset: false
    });
  };

  enableClassCheck$2(Source);
  var _default$X = Source;
  var Source_1 = _default$X;

  var makeInner$4 = model.makeInner;
  var getDataItemValue$1 = model.getDataItemValue;



  var createHashMap$2 = util.createHashMap;
  var each$4 = util.each;
  var map$1 = util.map;
  var isArray$2 = util.isArray;
  var isString$3 = util.isString;
  var isObject$4 = util.isObject;
  var isTypedArray$2 = util.isTypedArray;
  var isArrayLike$3 = util.isArrayLike;
  var extend$2 = util.extend;





  var SOURCE_FORMAT_ORIGINAL$2 = sourceType.SOURCE_FORMAT_ORIGINAL;
  var SOURCE_FORMAT_ARRAY_ROWS$1 = sourceType.SOURCE_FORMAT_ARRAY_ROWS;
  var SOURCE_FORMAT_OBJECT_ROWS$1 = sourceType.SOURCE_FORMAT_OBJECT_ROWS;
  var SOURCE_FORMAT_KEYED_COLUMNS$2 = sourceType.SOURCE_FORMAT_KEYED_COLUMNS;
  var SOURCE_FORMAT_UNKNOWN$2 = sourceType.SOURCE_FORMAT_UNKNOWN;
  var SOURCE_FORMAT_TYPED_ARRAY$2 = sourceType.SOURCE_FORMAT_TYPED_ARRAY;
  var SERIES_LAYOUT_BY_ROW$1 = sourceType.SERIES_LAYOUT_BY_ROW;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  // The result of `guessOrdinal`.
  var BE_ORDINAL = {
    Must: 1,
    // Encounter string but not '-' and not number-like.
    Might: 2,
    // Encounter string but number-like.
    Not: 3 // Other cases

  };
  var inner$3 = makeInner$4();
  /**
   * @see {module:echarts/data/Source}
   * @param {module:echarts/component/dataset/DatasetModel} datasetModel
   * @return {string} sourceFormat
   */

  function detectSourceFormat(datasetModel) {
    var data = datasetModel.option.source;
    var sourceFormat = SOURCE_FORMAT_UNKNOWN$2;

    if (isTypedArray$2(data)) {
      sourceFormat = SOURCE_FORMAT_TYPED_ARRAY$2;
    } else if (isArray$2(data)) {
      // FIXME Whether tolerate null in top level array?
      if (data.length === 0) {
        sourceFormat = SOURCE_FORMAT_ARRAY_ROWS$1;
      }

      for (var i = 0, len = data.length; i < len; i++) {
        var item = data[i];

        if (item == null) {
          continue;
        } else if (isArray$2(item)) {
          sourceFormat = SOURCE_FORMAT_ARRAY_ROWS$1;
          break;
        } else if (isObject$4(item)) {
          sourceFormat = SOURCE_FORMAT_OBJECT_ROWS$1;
          break;
        }
      }
    } else if (isObject$4(data)) {
      for (var key in data) {
        if (data.hasOwnProperty(key) && isArrayLike$3(data[key])) {
          sourceFormat = SOURCE_FORMAT_KEYED_COLUMNS$2;
          break;
        }
      }
    } else if (data != null) {
      throw new Error('Invalid data');
    }

    inner$3(datasetModel).sourceFormat = sourceFormat;
  }
  /**
   * [Scenarios]:
   * (1) Provide source data directly:
   *     series: {
   *         encode: {...},
   *         dimensions: [...]
   *         seriesLayoutBy: 'row',
   *         data: [[...]]
   *     }
   * (2) Refer to datasetModel.
   *     series: [{
   *         encode: {...}
   *         // Ignore datasetIndex means `datasetIndex: 0`
   *         // and the dimensions defination in dataset is used
   *     }, {
   *         encode: {...},
   *         seriesLayoutBy: 'column',
   *         datasetIndex: 1
   *     }]
   *
   * Get data from series itself or datset.
   * @return {module:echarts/data/Source} source
   */


  function getSource(seriesModel) {
    return inner$3(seriesModel).source;
  }
  /**
   * MUST be called before mergeOption of all series.
   * @param {module:echarts/model/Global} ecModel
   */


  function resetSourceDefaulter(ecModel) {
    // `datasetMap` is used to make default encode.
    inner$3(ecModel).datasetMap = createHashMap$2();
  }
  /**
   * [Caution]:
   * MUST be called after series option merged and
   * before "series.getInitailData()" called.
   *
   * [The rule of making default encode]:
   * Category axis (if exists) alway map to the first dimension.
   * Each other axis occupies a subsequent dimension.
   *
   * [Why make default encode]:
   * Simplify the typing of encode in option, avoiding the case like that:
   * series: [{encode: {x: 0, y: 1}}, {encode: {x: 0, y: 2}}, {encode: {x: 0, y: 3}}],
   * where the "y" have to be manually typed as "1, 2, 3, ...".
   *
   * @param {module:echarts/model/Series} seriesModel
   */


  function prepareSource(seriesModel) {
    var seriesOption = seriesModel.option;
    var data = seriesOption.data;
    var sourceFormat = isTypedArray$2(data) ? SOURCE_FORMAT_TYPED_ARRAY$2 : SOURCE_FORMAT_ORIGINAL$2;
    var fromDataset = false;
    var seriesLayoutBy = seriesOption.seriesLayoutBy;
    var sourceHeader = seriesOption.sourceHeader;
    var dimensionsDefine = seriesOption.dimensions;
    var datasetModel = getDatasetModel(seriesModel);

    if (datasetModel) {
      var datasetOption = datasetModel.option;
      data = datasetOption.source;
      sourceFormat = inner$3(datasetModel).sourceFormat;
      fromDataset = true; // These settings from series has higher priority.

      seriesLayoutBy = seriesLayoutBy || datasetOption.seriesLayoutBy;
      sourceHeader == null && (sourceHeader = datasetOption.sourceHeader);
      dimensionsDefine = dimensionsDefine || datasetOption.dimensions;
    }

    var completeResult = completeBySourceData(data, sourceFormat, seriesLayoutBy, sourceHeader, dimensionsDefine);
    inner$3(seriesModel).source = new Source_1({
      data: data,
      fromDataset: fromDataset,
      seriesLayoutBy: seriesLayoutBy,
      sourceFormat: sourceFormat,
      dimensionsDefine: completeResult.dimensionsDefine,
      startIndex: completeResult.startIndex,
      dimensionsDetectCount: completeResult.dimensionsDetectCount,
      // Note: dataset option does not have `encode`.
      encodeDefine: seriesOption.encode
    });
  } // return {startIndex, dimensionsDefine, dimensionsCount}


  function completeBySourceData(data, sourceFormat, seriesLayoutBy, sourceHeader, dimensionsDefine) {
    if (!data) {
      return {
        dimensionsDefine: normalizeDimensionsDefine(dimensionsDefine)
      };
    }

    var dimensionsDetectCount;
    var startIndex;

    if (sourceFormat === SOURCE_FORMAT_ARRAY_ROWS$1) {
      // Rule: Most of the first line are string: it is header.
      // Caution: consider a line with 5 string and 1 number,
      // it still can not be sure it is a head, because the
      // 5 string may be 5 values of category columns.
      if (sourceHeader === 'auto' || sourceHeader == null) {
        arrayRowsTravelFirst(function (val) {
          // '-' is regarded as null/undefined.
          if (val != null && val !== '-') {
            if (isString$3(val)) {
              startIndex == null && (startIndex = 1);
            } else {
              startIndex = 0;
            }
          } // 10 is an experience number, avoid long loop.

        }, seriesLayoutBy, data, 10);
      } else {
        startIndex = sourceHeader ? 1 : 0;
      }

      if (!dimensionsDefine && startIndex === 1) {
        dimensionsDefine = [];
        arrayRowsTravelFirst(function (val, index) {
          dimensionsDefine[index] = val != null ? val : '';
        }, seriesLayoutBy, data);
      }

      dimensionsDetectCount = dimensionsDefine ? dimensionsDefine.length : seriesLayoutBy === SERIES_LAYOUT_BY_ROW$1 ? data.length : data[0] ? data[0].length : null;
    } else if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS$1) {
      if (!dimensionsDefine) {
        dimensionsDefine = objectRowsCollectDimensions(data);
      }
    } else if (sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS$2) {
      if (!dimensionsDefine) {
        dimensionsDefine = [];
        each$4(data, function (colArr, key) {
          dimensionsDefine.push(key);
        });
      }
    } else if (sourceFormat === SOURCE_FORMAT_ORIGINAL$2) {
      var value0 = getDataItemValue$1(data[0]);
      dimensionsDetectCount = isArray$2(value0) && value0.length || 1;
    } else ;

    return {
      startIndex: startIndex,
      dimensionsDefine: normalizeDimensionsDefine(dimensionsDefine),
      dimensionsDetectCount: dimensionsDetectCount
    };
  } // Consider dimensions defined like ['A', 'price', 'B', 'price', 'C', 'price'],
  // which is reasonable. But dimension name is duplicated.
  // Returns undefined or an array contains only object without null/undefiend or string.


  function normalizeDimensionsDefine(dimensionsDefine) {
    if (!dimensionsDefine) {
      // The meaning of null/undefined is different from empty array.
      return;
    }

    var nameMap = createHashMap$2();
    return map$1(dimensionsDefine, function (item, index) {
      item = extend$2({}, isObject$4(item) ? item : {
        name: item
      }); // User can set null in dimensions.
      // We dont auto specify name, othewise a given name may
      // cause it be refered unexpectedly.

      if (item.name == null) {
        return item;
      } // Also consider number form like 2012.


      item.name += ''; // User may also specify displayName.
      // displayName will always exists except user not
      // specified or dim name is not specified or detected.
      // (A auto generated dim name will not be used as
      // displayName).

      if (item.displayName == null) {
        item.displayName = item.name;
      }

      var exist = nameMap.get(item.name);

      if (!exist) {
        nameMap.set(item.name, {
          count: 1
        });
      } else {
        item.name += '-' + exist.count++;
      }

      return item;
    });
  }

  function arrayRowsTravelFirst(cb, seriesLayoutBy, data, maxLoop) {
    maxLoop == null && (maxLoop = Infinity);

    if (seriesLayoutBy === SERIES_LAYOUT_BY_ROW$1) {
      for (var i = 0; i < data.length && i < maxLoop; i++) {
        cb(data[i] ? data[i][0] : null, i);
      }
    } else {
      var value0 = data[0] || [];

      for (var i = 0; i < value0.length && i < maxLoop; i++) {
        cb(value0[i], i);
      }
    }
  }

  function objectRowsCollectDimensions(data) {
    var firstIndex = 0;
    var obj;

    while (firstIndex < data.length && !(obj = data[firstIndex++])) {} // jshint ignore: line


    if (obj) {
      var dimensions = [];
      each$4(obj, function (value, key) {
        dimensions.push(key);
      });
      return dimensions;
    }
  }
  /**
   * [The strategy of the arrengment of data dimensions for dataset]:
   * "value way": all axes are non-category axes. So series one by one take
   *     several (the number is coordSysDims.length) dimensions from dataset.
   *     The result of data arrengment of data dimensions like:
   *     | ser0_x | ser0_y | ser1_x | ser1_y | ser2_x | ser2_y |
   * "category way": at least one axis is category axis. So the the first data
   *     dimension is always mapped to the first category axis and shared by
   *     all of the series. The other data dimensions are taken by series like
   *     "value way" does.
   *     The result of data arrengment of data dimensions like:
   *     | ser_shared_x | ser0_y | ser1_y | ser2_y |
   *
   * @param {Array.<Object|string>} coordDimensions [{name: <string>, type: <string>, dimsDef: <Array>}, ...]
   * @param {module:model/Series} seriesModel
   * @param {module:data/Source} source
   * @return {Object} encode Never be `null/undefined`.
   */


  function makeSeriesEncodeForAxisCoordSys(coordDimensions, seriesModel, source) {
    var encode = {};
    var datasetModel = getDatasetModel(seriesModel); // Currently only make default when using dataset, util more reqirements occur.

    if (!datasetModel || !coordDimensions) {
      return encode;
    }

    var encodeItemName = [];
    var encodeSeriesName = [];
    var ecModel = seriesModel.ecModel;
    var datasetMap = inner$3(ecModel).datasetMap;
    var key = datasetModel.uid + '_' + source.seriesLayoutBy;
    var baseCategoryDimIndex;
    var categoryWayValueDimStart;
    coordDimensions = coordDimensions.slice();
    each$4(coordDimensions, function (coordDimInfo, coordDimIdx) {
      !isObject$4(coordDimInfo) && (coordDimensions[coordDimIdx] = {
        name: coordDimInfo
      });

      if (coordDimInfo.type === 'ordinal' && baseCategoryDimIndex == null) {
        baseCategoryDimIndex = coordDimIdx;
        categoryWayValueDimStart = getDataDimCountOnCoordDim(coordDimensions[coordDimIdx]);
      }

      encode[coordDimInfo.name] = [];
    });
    var datasetRecord = datasetMap.get(key) || datasetMap.set(key, {
      categoryWayDim: categoryWayValueDimStart,
      valueWayDim: 0
    }); // TODO
    // Auto detect first time axis and do arrangement.

    each$4(coordDimensions, function (coordDimInfo, coordDimIdx) {
      var coordDimName = coordDimInfo.name;
      var count = getDataDimCountOnCoordDim(coordDimInfo); // In value way.

      if (baseCategoryDimIndex == null) {
        var start = datasetRecord.valueWayDim;
        pushDim(encode[coordDimName], start, count);
        pushDim(encodeSeriesName, start, count);
        datasetRecord.valueWayDim += count; // ??? TODO give a better default series name rule?
        // especially when encode x y specified.
        // consider: when mutiple series share one dimension
        // category axis, series name should better use
        // the other dimsion name. On the other hand, use
        // both dimensions name.
      } // In category way, the first category axis.
      else if (baseCategoryDimIndex === coordDimIdx) {
          pushDim(encode[coordDimName], 0, count);
          pushDim(encodeItemName, 0, count);
        } // In category way, the other axis.
        else {
            var start = datasetRecord.categoryWayDim;
            pushDim(encode[coordDimName], start, count);
            pushDim(encodeSeriesName, start, count);
            datasetRecord.categoryWayDim += count;
          }
    });

    function pushDim(dimIdxArr, idxFrom, idxCount) {
      for (var i = 0; i < idxCount; i++) {
        dimIdxArr.push(idxFrom + i);
      }
    }

    function getDataDimCountOnCoordDim(coordDimInfo) {
      var dimsDef = coordDimInfo.dimsDef;
      return dimsDef ? dimsDef.length : 1;
    }

    encodeItemName.length && (encode.itemName = encodeItemName);
    encodeSeriesName.length && (encode.seriesName = encodeSeriesName);
    return encode;
  }
  /**
   * Work for data like [{name: ..., value: ...}, ...].
   *
   * @param {module:model/Series} seriesModel
   * @param {module:data/Source} source
   * @return {Object} encode Never be `null/undefined`.
   */


  function makeSeriesEncodeForNameBased(seriesModel, source, dimCount) {
    var encode = {};
    var datasetModel = getDatasetModel(seriesModel); // Currently only make default when using dataset, util more reqirements occur.

    if (!datasetModel) {
      return encode;
    }

    var sourceFormat = source.sourceFormat;
    var dimensionsDefine = source.dimensionsDefine;
    var potentialNameDimIndex;

    if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS$1 || sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS$2) {
      each$4(dimensionsDefine, function (dim, idx) {
        if ((isObject$4(dim) ? dim.name : dim) === 'name') {
          potentialNameDimIndex = idx;
        }
      });
    } // idxResult: {v, n}.


    var idxResult = function () {
      var idxRes0 = {};
      var idxRes1 = {};
      var guessRecords = []; // 5 is an experience value.

      for (var i = 0, len = Math.min(5, dimCount); i < len; i++) {
        var guessResult = doGuessOrdinal(source.data, sourceFormat, source.seriesLayoutBy, dimensionsDefine, source.startIndex, i);
        guessRecords.push(guessResult);
        var isPureNumber = guessResult === BE_ORDINAL.Not; // [Strategy of idxRes0]: find the first BE_ORDINAL.Not as the value dim,
        // and then find a name dim with the priority:
        // "BE_ORDINAL.Might|BE_ORDINAL.Must" > "other dim" > "the value dim itself".

        if (isPureNumber && idxRes0.v == null && i !== potentialNameDimIndex) {
          idxRes0.v = i;
        }

        if (idxRes0.n == null || idxRes0.n === idxRes0.v || !isPureNumber && guessRecords[idxRes0.n] === BE_ORDINAL.Not) {
          idxRes0.n = i;
        }

        if (fulfilled(idxRes0) && guessRecords[idxRes0.n] !== BE_ORDINAL.Not) {
          return idxRes0;
        } // [Strategy of idxRes1]: if idxRes0 not satisfied (that is, no BE_ORDINAL.Not),
        // find the first BE_ORDINAL.Might as the value dim,
        // and then find a name dim with the priority:
        // "other dim" > "the value dim itself".
        // That is for backward compat: number-like (e.g., `'3'`, `'55'`) can be
        // treated as number.


        if (!isPureNumber) {
          if (guessResult === BE_ORDINAL.Might && idxRes1.v == null && i !== potentialNameDimIndex) {
            idxRes1.v = i;
          }

          if (idxRes1.n == null || idxRes1.n === idxRes1.v) {
            idxRes1.n = i;
          }
        }
      }

      function fulfilled(idxResult) {
        return idxResult.v != null && idxResult.n != null;
      }

      return fulfilled(idxRes0) ? idxRes0 : fulfilled(idxRes1) ? idxRes1 : null;
    }();

    if (idxResult) {
      encode.value = idxResult.v; // `potentialNameDimIndex` has highest priority.

      var nameDimIndex = potentialNameDimIndex != null ? potentialNameDimIndex : idxResult.n; // By default, label use itemName in charts.
      // So we dont set encodeLabel here.

      encode.itemName = [nameDimIndex];
      encode.seriesName = [nameDimIndex];
    }

    return encode;
  }
  /**
   * If return null/undefined, indicate that should not use datasetModel.
   */


  function getDatasetModel(seriesModel) {
    var option = seriesModel.option; // Caution: consider the scenario:
    // A dataset is declared and a series is not expected to use the dataset,
    // and at the beginning `setOption({series: { noData })` (just prepare other
    // option but no data), then `setOption({series: {data: [...]}); In this case,
    // the user should set an empty array to avoid that dataset is used by default.

    var thisData = option.data;

    if (!thisData) {
      return seriesModel.ecModel.getComponent('dataset', option.datasetIndex || 0);
    }
  }
  /**
   * The rule should not be complex, otherwise user might not
   * be able to known where the data is wrong.
   * The code is ugly, but how to make it neat?
   *
   * @param {module:echars/data/Source} source
   * @param {number} dimIndex
   * @return {BE_ORDINAL} guess result.
   */


  function guessOrdinal(source, dimIndex) {
    return doGuessOrdinal(source.data, source.sourceFormat, source.seriesLayoutBy, source.dimensionsDefine, source.startIndex, dimIndex);
  } // dimIndex may be overflow source data.
  // return {BE_ORDINAL}


  function doGuessOrdinal(data, sourceFormat, seriesLayoutBy, dimensionsDefine, startIndex, dimIndex) {
    var result; // Experience value.

    var maxLoop = 5;

    if (isTypedArray$2(data)) {
      return BE_ORDINAL.Not;
    } // When sourceType is 'objectRows' or 'keyedColumns', dimensionsDefine
    // always exists in source.


    var dimName;
    var dimType;

    if (dimensionsDefine) {
      var dimDefItem = dimensionsDefine[dimIndex];

      if (isObject$4(dimDefItem)) {
        dimName = dimDefItem.name;
        dimType = dimDefItem.type;
      } else if (isString$3(dimDefItem)) {
        dimName = dimDefItem;
      }
    }

    if (dimType != null) {
      return dimType === 'ordinal' ? BE_ORDINAL.Must : BE_ORDINAL.Not;
    }

    if (sourceFormat === SOURCE_FORMAT_ARRAY_ROWS$1) {
      if (seriesLayoutBy === SERIES_LAYOUT_BY_ROW$1) {
        var sample = data[dimIndex];

        for (var i = 0; i < (sample || []).length && i < maxLoop; i++) {
          if ((result = detectValue(sample[startIndex + i])) != null) {
            return result;
          }
        }
      } else {
        for (var i = 0; i < data.length && i < maxLoop; i++) {
          var row = data[startIndex + i];

          if (row && (result = detectValue(row[dimIndex])) != null) {
            return result;
          }
        }
      }
    } else if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS$1) {
      if (!dimName) {
        return BE_ORDINAL.Not;
      }

      for (var i = 0; i < data.length && i < maxLoop; i++) {
        var item = data[i];

        if (item && (result = detectValue(item[dimName])) != null) {
          return result;
        }
      }
    } else if (sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS$2) {
      if (!dimName) {
        return BE_ORDINAL.Not;
      }

      var sample = data[dimName];

      if (!sample || isTypedArray$2(sample)) {
        return BE_ORDINAL.Not;
      }

      for (var i = 0; i < sample.length && i < maxLoop; i++) {
        if ((result = detectValue(sample[i])) != null) {
          return result;
        }
      }
    } else if (sourceFormat === SOURCE_FORMAT_ORIGINAL$2) {
      for (var i = 0; i < data.length && i < maxLoop; i++) {
        var item = data[i];
        var val = getDataItemValue$1(item);

        if (!isArray$2(val)) {
          return BE_ORDINAL.Not;
        }

        if ((result = detectValue(val[dimIndex])) != null) {
          return result;
        }
      }
    }

    function detectValue(val) {
      var beStr = isString$3(val); // Consider usage convenience, '1', '2' will be treated as "number".
      // `isFinit('')` get `true`.

      if (val != null && isFinite(val) && val !== '') {
        return beStr ? BE_ORDINAL.Might : BE_ORDINAL.Not;
      } else if (beStr && val !== '-') {
        return BE_ORDINAL.Must;
      }
    }

    return BE_ORDINAL.Not;
  }

  var BE_ORDINAL_1 = BE_ORDINAL;
  var detectSourceFormat_1 = detectSourceFormat;
  var getSource_1 = getSource;
  var resetSourceDefaulter_1 = resetSourceDefaulter;
  var prepareSource_1 = prepareSource;
  var makeSeriesEncodeForAxisCoordSys_1 = makeSeriesEncodeForAxisCoordSys;
  var makeSeriesEncodeForNameBased_1 = makeSeriesEncodeForNameBased;
  var guessOrdinal_1 = guessOrdinal;

  var sourceHelper = {
  	BE_ORDINAL: BE_ORDINAL_1,
  	detectSourceFormat: detectSourceFormat_1,
  	getSource: getSource_1,
  	resetSourceDefaulter: resetSourceDefaulter_1,
  	prepareSource: prepareSource_1,
  	makeSeriesEncodeForAxisCoordSys: makeSeriesEncodeForAxisCoordSys_1,
  	makeSeriesEncodeForNameBased: makeSeriesEncodeForNameBased_1,
  	guessOrdinal: guessOrdinal_1
  };

  var each$5 = util.each;
  var filter$1 = util.filter;
  var map$2 = util.map;
  var isArray$3 = util.isArray;
  var indexOf$2 = util.indexOf;
  var isObject$5 = util.isObject;
  var isString$4 = util.isString;
  var createHashMap$3 = util.createHashMap;
  var assert$1 = util.assert;
  var clone$3 = util.clone;
  var merge$1 = util.merge;
  var extend$3 = util.extend;
  var mixin$2 = util.mixin;













  var resetSourceDefaulter$1 = sourceHelper.resetSourceDefaulter;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * ECharts global model
   *
   * @module {echarts/model/Global}
   */

  /**
   * Caution: If the mechanism should be changed some day, these cases
   * should be considered:
   *
   * (1) In `merge option` mode, if using the same option to call `setOption`
   * many times, the result should be the same (try our best to ensure that).
   * (2) In `merge option` mode, if a component has no id/name specified, it
   * will be merged by index, and the result sequence of the components is
   * consistent to the original sequence.
   * (3) `reset` feature (in toolbox). Find detailed info in comments about
   * `mergeOption` in module:echarts/model/OptionManager.
   */
  var OPTION_INNER_KEY = '\0_ec_inner';
  /**
   * @alias module:echarts/model/Global
   *
   * @param {Object} option
   * @param {module:echarts/model/Model} parentModel
   * @param {Object} theme
   */

  var GlobalModel = Model_1.extend({
    init: function (option, parentModel, theme, optionManager) {
      theme = theme || {};
      this.option = null; // Mark as not initialized.

      /**
       * @type {module:echarts/model/Model}
       * @private
       */

      this._theme = new Model_1(theme);
      /**
       * @type {module:echarts/model/OptionManager}
       */

      this._optionManager = optionManager;
    },
    setOption: function (option, optionPreprocessorFuncs) {
      assert$1(!(OPTION_INNER_KEY in option), 'please use chart.getOption()');

      this._optionManager.setOption(option, optionPreprocessorFuncs);

      this.resetOption(null);
    },

    /**
     * @param {string} type null/undefined: reset all.
     *                      'recreate': force recreate all.
     *                      'timeline': only reset timeline option
     *                      'media': only reset media query option
     * @return {boolean} Whether option changed.
     */
    resetOption: function (type) {
      var optionChanged = false;
      var optionManager = this._optionManager;

      if (!type || type === 'recreate') {
        var baseOption = optionManager.mountOption(type === 'recreate');

        if (!this.option || type === 'recreate') {
          initBase.call(this, baseOption);
        } else {
          this.restoreData();
          this.mergeOption(baseOption);
        }

        optionChanged = true;
      }

      if (type === 'timeline' || type === 'media') {
        this.restoreData();
      }

      if (!type || type === 'recreate' || type === 'timeline') {
        var timelineOption = optionManager.getTimelineOption(this);
        timelineOption && (this.mergeOption(timelineOption), optionChanged = true);
      }

      if (!type || type === 'recreate' || type === 'media') {
        var mediaOptions = optionManager.getMediaOption(this, this._api);

        if (mediaOptions.length) {
          each$5(mediaOptions, function (mediaOption) {
            this.mergeOption(mediaOption, optionChanged = true);
          }, this);
        }
      }

      return optionChanged;
    },

    /**
     * @protected
     */
    mergeOption: function (newOption) {
      var option = this.option;
      var componentsMap = this._componentsMap;
      var newCptTypes = [];
      resetSourceDefaulter$1(this); // If no component class, merge directly.
      // For example: color, animaiton options, etc.

      each$5(newOption, function (componentOption, mainType) {
        if (componentOption == null) {
          return;
        }

        if (!Component.hasClass(mainType)) {
          // globalSettingTask.dirty();
          option[mainType] = option[mainType] == null ? clone$3(componentOption) : merge$1(option[mainType], componentOption, true);
        } else if (mainType) {
          newCptTypes.push(mainType);
        }
      });
      Component.topologicalTravel(newCptTypes, Component.getAllClassMainTypes(), visitComponent, this);

      function visitComponent(mainType, dependencies) {
        var newCptOptionList = model.normalizeToArray(newOption[mainType]);
        var mapResult = model.mappingToExists(componentsMap.get(mainType), newCptOptionList);
        model.makeIdAndName(mapResult); // Set mainType and complete subType.

        each$5(mapResult, function (item, index) {
          var opt = item.option;

          if (isObject$5(opt)) {
            item.keyInfo.mainType = mainType;
            item.keyInfo.subType = determineSubType(mainType, opt, item.exist);
          }
        });
        var dependentModels = getComponentsByTypes(componentsMap, dependencies);
        option[mainType] = [];
        componentsMap.set(mainType, []);
        each$5(mapResult, function (resultItem, index) {
          var componentModel = resultItem.exist;
          var newCptOption = resultItem.option;
          assert$1(isObject$5(newCptOption) || componentModel, 'Empty component definition'); // Consider where is no new option and should be merged using {},
          // see removeEdgeAndAdd in topologicalTravel and
          // ComponentModel.getAllClassMainTypes.

          if (!newCptOption) {
            componentModel.mergeOption({}, this);
            componentModel.optionUpdated({}, false);
          } else {
            var ComponentModelClass = Component.getClass(mainType, resultItem.keyInfo.subType, true);

            if (componentModel && componentModel.constructor === ComponentModelClass) {
              componentModel.name = resultItem.keyInfo.name; // componentModel.settingTask && componentModel.settingTask.dirty();

              componentModel.mergeOption(newCptOption, this);
              componentModel.optionUpdated(newCptOption, false);
            } else {
              // PENDING Global as parent ?
              var extraOpt = extend$3({
                dependentModels: dependentModels,
                componentIndex: index
              }, resultItem.keyInfo);
              componentModel = new ComponentModelClass(newCptOption, this, this, extraOpt);
              extend$3(componentModel, extraOpt);
              componentModel.init(newCptOption, this, this, extraOpt); // Call optionUpdated after init.
              // newCptOption has been used as componentModel.option
              // and may be merged with theme and default, so pass null
              // to avoid confusion.

              componentModel.optionUpdated(null, true);
            }
          }

          componentsMap.get(mainType)[index] = componentModel;
          option[mainType][index] = componentModel.option;
        }, this); // Backup series for filtering.

        if (mainType === 'series') {
          createSeriesIndices(this, componentsMap.get('series'));
        }
      }

      this._seriesIndicesMap = createHashMap$3(this._seriesIndices = this._seriesIndices || []);
    },

    /**
     * Get option for output (cloned option and inner info removed)
     * @public
     * @return {Object}
     */
    getOption: function () {
      var option = clone$3(this.option);
      each$5(option, function (opts, mainType) {
        if (Component.hasClass(mainType)) {
          var opts = model.normalizeToArray(opts);

          for (var i = opts.length - 1; i >= 0; i--) {
            // Remove options with inner id.
            if (model.isIdInner(opts[i])) {
              opts.splice(i, 1);
            }
          }

          option[mainType] = opts;
        }
      });
      delete option[OPTION_INNER_KEY];
      return option;
    },

    /**
     * @return {module:echarts/model/Model}
     */
    getTheme: function () {
      return this._theme;
    },

    /**
     * @param {string} mainType
     * @param {number} [idx=0]
     * @return {module:echarts/model/Component}
     */
    getComponent: function (mainType, idx) {
      var list = this._componentsMap.get(mainType);

      if (list) {
        return list[idx || 0];
      }
    },

    /**
     * If none of index and id and name used, return all components with mainType.
     * @param {Object} condition
     * @param {string} condition.mainType
     * @param {string} [condition.subType] If ignore, only query by mainType
     * @param {number|Array.<number>} [condition.index] Either input index or id or name.
     * @param {string|Array.<string>} [condition.id] Either input index or id or name.
     * @param {string|Array.<string>} [condition.name] Either input index or id or name.
     * @return {Array.<module:echarts/model/Component>}
     */
    queryComponents: function (condition) {
      var mainType = condition.mainType;

      if (!mainType) {
        return [];
      }

      var index = condition.index;
      var id = condition.id;
      var name = condition.name;

      var cpts = this._componentsMap.get(mainType);

      if (!cpts || !cpts.length) {
        return [];
      }

      var result;

      if (index != null) {
        if (!isArray$3(index)) {
          index = [index];
        }

        result = filter$1(map$2(index, function (idx) {
          return cpts[idx];
        }), function (val) {
          return !!val;
        });
      } else if (id != null) {
        var isIdArray = isArray$3(id);
        result = filter$1(cpts, function (cpt) {
          return isIdArray && indexOf$2(id, cpt.id) >= 0 || !isIdArray && cpt.id === id;
        });
      } else if (name != null) {
        var isNameArray = isArray$3(name);
        result = filter$1(cpts, function (cpt) {
          return isNameArray && indexOf$2(name, cpt.name) >= 0 || !isNameArray && cpt.name === name;
        });
      } else {
        // Return all components with mainType
        result = cpts.slice();
      }

      return filterBySubType(result, condition);
    },

    /**
     * The interface is different from queryComponents,
     * which is convenient for inner usage.
     *
     * @usage
     * var result = findComponents(
     *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}}
     * );
     * var result = findComponents(
     *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}}
     * );
     * var result = findComponents(
     *     {mainType: 'series',
     *     filter: function (model, index) {...}}
     * );
     * // result like [component0, componnet1, ...]
     *
     * @param {Object} condition
     * @param {string} condition.mainType Mandatory.
     * @param {string} [condition.subType] Optional.
     * @param {Object} [condition.query] like {xxxIndex, xxxId, xxxName},
     *        where xxx is mainType.
     *        If query attribute is null/undefined or has no index/id/name,
     *        do not filtering by query conditions, which is convenient for
     *        no-payload situations or when target of action is global.
     * @param {Function} [condition.filter] parameter: component, return boolean.
     * @return {Array.<module:echarts/model/Component>}
     */
    findComponents: function (condition) {
      var query = condition.query;
      var mainType = condition.mainType;
      var queryCond = getQueryCond(query);
      var result = queryCond ? this.queryComponents(queryCond) : this._componentsMap.get(mainType);
      return doFilter(filterBySubType(result, condition));

      function getQueryCond(q) {
        var indexAttr = mainType + 'Index';
        var idAttr = mainType + 'Id';
        var nameAttr = mainType + 'Name';
        return q && (q[indexAttr] != null || q[idAttr] != null || q[nameAttr] != null) ? {
          mainType: mainType,
          // subType will be filtered finally.
          index: q[indexAttr],
          id: q[idAttr],
          name: q[nameAttr]
        } : null;
      }

      function doFilter(res) {
        return condition.filter ? filter$1(res, condition.filter) : res;
      }
    },

    /**
     * @usage
     * eachComponent('legend', function (legendModel, index) {
     *     ...
     * });
     * eachComponent(function (componentType, model, index) {
     *     // componentType does not include subType
     *     // (componentType is 'xxx' but not 'xxx.aa')
     * });
     * eachComponent(
     *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}},
     *     function (model, index) {...}
     * );
     * eachComponent(
     *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}},
     *     function (model, index) {...}
     * );
     *
     * @param {string|Object=} mainType When mainType is object, the definition
     *                                  is the same as the method 'findComponents'.
     * @param {Function} cb
     * @param {*} context
     */
    eachComponent: function (mainType, cb, context) {
      var componentsMap = this._componentsMap;

      if (typeof mainType === 'function') {
        context = cb;
        cb = mainType;
        componentsMap.each(function (components, componentType) {
          each$5(components, function (component, index) {
            cb.call(context, componentType, component, index);
          });
        });
      } else if (isString$4(mainType)) {
        each$5(componentsMap.get(mainType), cb, context);
      } else if (isObject$5(mainType)) {
        var queryResult = this.findComponents(mainType);
        each$5(queryResult, cb, context);
      }
    },

    /**
     * @param {string} name
     * @return {Array.<module:echarts/model/Series>}
     */
    getSeriesByName: function (name) {
      var series = this._componentsMap.get('series');

      return filter$1(series, function (oneSeries) {
        return oneSeries.name === name;
      });
    },

    /**
     * @param {number} seriesIndex
     * @return {module:echarts/model/Series}
     */
    getSeriesByIndex: function (seriesIndex) {
      return this._componentsMap.get('series')[seriesIndex];
    },

    /**
     * Get series list before filtered by type.
     * FIXME: rename to getRawSeriesByType?
     *
     * @param {string} subType
     * @return {Array.<module:echarts/model/Series>}
     */
    getSeriesByType: function (subType) {
      var series = this._componentsMap.get('series');

      return filter$1(series, function (oneSeries) {
        return oneSeries.subType === subType;
      });
    },

    /**
     * @return {Array.<module:echarts/model/Series>}
     */
    getSeries: function () {
      return this._componentsMap.get('series').slice();
    },

    /**
     * @return {number}
     */
    getSeriesCount: function () {
      return this._componentsMap.get('series').length;
    },

    /**
     * After filtering, series may be different
     * frome raw series.
     *
     * @param {Function} cb
     * @param {*} context
     */
    eachSeries: function (cb, context) {
      each$5(this._seriesIndices, function (rawSeriesIndex) {
        var series = this._componentsMap.get('series')[rawSeriesIndex];

        cb.call(context, series, rawSeriesIndex);
      }, this);
    },

    /**
     * Iterate raw series before filtered.
     *
     * @param {Function} cb
     * @param {*} context
     */
    eachRawSeries: function (cb, context) {
      each$5(this._componentsMap.get('series'), cb, context);
    },

    /**
     * After filtering, series may be different.
     * frome raw series.
     *
     * @param {string} subType.
     * @param {Function} cb
     * @param {*} context
     */
    eachSeriesByType: function (subType, cb, context) {
      each$5(this._seriesIndices, function (rawSeriesIndex) {
        var series = this._componentsMap.get('series')[rawSeriesIndex];

        if (series.subType === subType) {
          cb.call(context, series, rawSeriesIndex);
        }
      }, this);
    },

    /**
     * Iterate raw series before filtered of given type.
     *
     * @parma {string} subType
     * @param {Function} cb
     * @param {*} context
     */
    eachRawSeriesByType: function (subType, cb, context) {
      return each$5(this.getSeriesByType(subType), cb, context);
    },

    /**
     * @param {module:echarts/model/Series} seriesModel
     */
    isSeriesFiltered: function (seriesModel) {
      return this._seriesIndicesMap.get(seriesModel.componentIndex) == null;
    },

    /**
     * @return {Array.<number>}
     */
    getCurrentSeriesIndices: function () {
      return (this._seriesIndices || []).slice();
    },

    /**
     * @param {Function} cb
     * @param {*} context
     */
    filterSeries: function (cb, context) {
      var filteredSeries = filter$1(this._componentsMap.get('series'), cb, context);
      createSeriesIndices(this, filteredSeries);
    },
    restoreData: function (payload) {
      var componentsMap = this._componentsMap;
      createSeriesIndices(this, componentsMap.get('series'));
      var componentTypes = [];
      componentsMap.each(function (components, componentType) {
        componentTypes.push(componentType);
      });
      Component.topologicalTravel(componentTypes, Component.getAllClassMainTypes(), function (componentType, dependencies) {
        each$5(componentsMap.get(componentType), function (component) {
          (componentType !== 'series' || !isNotTargetSeries(component, payload)) && component.restoreData();
        });
      });
    }
  });

  function isNotTargetSeries(seriesModel, payload) {
    if (payload) {
      var index = payload.seiresIndex;
      var id = payload.seriesId;
      var name = payload.seriesName;
      return index != null && seriesModel.componentIndex !== index || id != null && seriesModel.id !== id || name != null && seriesModel.name !== name;
    }
  }
  /**
   * @inner
   */


  function mergeTheme(option, theme) {
    // PENDING
    // NOT use `colorLayer` in theme if option has `color`
    var notMergeColorLayer = option.color && !option.colorLayer;
    each$5(theme, function (themeItem, name) {
      if (name === 'colorLayer' && notMergeColorLayer) {
        return;
      } // 如果有 component model 则把具体的 merge 逻辑交给该 model 处理


      if (!Component.hasClass(name)) {
        if (typeof themeItem === 'object') {
          option[name] = !option[name] ? clone$3(themeItem) : merge$1(option[name], themeItem, false);
        } else {
          if (option[name] == null) {
            option[name] = themeItem;
          }
        }
      }
    });
  }

  function initBase(baseOption) {
    baseOption = baseOption; // Using OPTION_INNER_KEY to mark that this option can not be used outside,
    // i.e. `chart.setOption(chart.getModel().option);` is forbiden.

    this.option = {};
    this.option[OPTION_INNER_KEY] = 1;
    /**
     * Init with series: [], in case of calling findSeries method
     * before series initialized.
     * @type {Object.<string, Array.<module:echarts/model/Model>>}
     * @private
     */

    this._componentsMap = createHashMap$3({
      series: []
    });
    /**
     * Mapping between filtered series list and raw series list.
     * key: filtered series indices, value: raw series indices.
     * @type {Array.<nubmer>}
     * @private
     */

    this._seriesIndices;
    this._seriesIndicesMap;
    mergeTheme(baseOption, this._theme.option); // TODO Needs clone when merging to the unexisted property

    merge$1(baseOption, globalDefault, false);
    this.mergeOption(baseOption);
  }
  /**
   * @inner
   * @param {Array.<string>|string} types model types
   * @return {Object} key: {string} type, value: {Array.<Object>} models
   */


  function getComponentsByTypes(componentsMap, types) {
    if (!isArray$3(types)) {
      types = types ? [types] : [];
    }

    var ret = {};
    each$5(types, function (type) {
      ret[type] = (componentsMap.get(type) || []).slice();
    });
    return ret;
  }
  /**
   * @inner
   */


  function determineSubType(mainType, newCptOption, existComponent) {
    var subType = newCptOption.type ? newCptOption.type : existComponent ? existComponent.subType // Use determineSubType only when there is no existComponent.
    : Component.determineSubType(mainType, newCptOption); // tooltip, markline, markpoint may always has no subType

    return subType;
  }
  /**
   * @inner
   */


  function createSeriesIndices(ecModel, seriesModels) {
    ecModel._seriesIndicesMap = createHashMap$3(ecModel._seriesIndices = map$2(seriesModels, function (series) {
      return series.componentIndex;
    }) || []);
  }
  /**
   * @inner
   */


  function filterBySubType(components, condition) {
    // Using hasOwnProperty for restrict. Consider
    // subType is undefined in user payload.
    return condition.hasOwnProperty('subType') ? filter$1(components, function (cpt) {
      return cpt.subType === condition.subType;
    }) : components;
  }

  mixin$2(GlobalModel, colorPalette);
  var _default$Y = GlobalModel;
  var Global = _default$Y;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var echartsAPIList = ['getDom', 'getZr', 'getWidth', 'getHeight', 'getDevicePixelRatio', 'dispatchAction', 'isDisposed', 'on', 'off', 'getDataURL', 'getConnectedDataURL', 'getModel', 'getOption', 'getViewOfComponentModel', 'getViewOfSeriesModel']; // And `getCoordinateSystems` and `getComponentByElement` will be injected in echarts.js

  function ExtensionAPI(chartInstance) {
    util.each(echartsAPIList, function (name) {
      this[name] = util.bind(chartInstance[name], chartInstance);
    }, this);
  }

  var _default$Z = ExtensionAPI;
  var ExtensionAPI_1 = _default$Z;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var coordinateSystemCreators = {};

  function CoordinateSystemManager() {
    this._coordinateSystems = [];
  }

  CoordinateSystemManager.prototype = {
    constructor: CoordinateSystemManager,
    create: function (ecModel, api) {
      var coordinateSystems = [];
      util.each(coordinateSystemCreators, function (creater, type) {
        var list = creater.create(ecModel, api);
        coordinateSystems = coordinateSystems.concat(list || []);
      });
      this._coordinateSystems = coordinateSystems;
    },
    update: function (ecModel, api) {
      util.each(this._coordinateSystems, function (coordSys) {
        coordSys.update && coordSys.update(ecModel, api);
      });
    },
    getCoordinateSystems: function () {
      return this._coordinateSystems.slice();
    }
  };

  CoordinateSystemManager.register = function (type, coordinateSystemCreator) {
    coordinateSystemCreators[type] = coordinateSystemCreator;
  };

  CoordinateSystemManager.get = function (type) {
    return coordinateSystemCreators[type];
  };

  var _default$_ = CoordinateSystemManager;
  var CoordinateSystem = _default$_;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */







  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * ECharts option manager
   *
   * @module {echarts/model/OptionManager}
   */
  var each$6 = util.each;
  var clone$4 = util.clone;
  var map$3 = util.map;
  var merge$2 = util.merge;
  var QUERY_REG = /^(min|max)?(.+)$/;
  /**
   * TERM EXPLANATIONS:
   *
   * [option]:
   *
   *     An object that contains definitions of components. For example:
   *     var option = {
   *         title: {...},
   *         legend: {...},
   *         visualMap: {...},
   *         series: [
   *             {data: [...]},
   *             {data: [...]},
   *             ...
   *         ]
   *     };
   *
   * [rawOption]:
   *
   *     An object input to echarts.setOption. 'rawOption' may be an
   *     'option', or may be an object contains multi-options. For example:
   *     var option = {
   *         baseOption: {
   *             title: {...},
   *             legend: {...},
   *             series: [
   *                 {data: [...]},
   *                 {data: [...]},
   *                 ...
   *             ]
   *         },
   *         timeline: {...},
   *         options: [
   *             {title: {...}, series: {data: [...]}},
   *             {title: {...}, series: {data: [...]}},
   *             ...
   *         ],
   *         media: [
   *             {
   *                 query: {maxWidth: 320},
   *                 option: {series: {x: 20}, visualMap: {show: false}}
   *             },
   *             {
   *                 query: {minWidth: 320, maxWidth: 720},
   *                 option: {series: {x: 500}, visualMap: {show: true}}
   *             },
   *             {
   *                 option: {series: {x: 1200}, visualMap: {show: true}}
   *             }
   *         ]
   *     };
   *
   * @alias module:echarts/model/OptionManager
   * @param {module:echarts/ExtensionAPI} api
   */

  function OptionManager(api) {
    /**
     * @private
     * @type {module:echarts/ExtensionAPI}
     */
    this._api = api;
    /**
     * @private
     * @type {Array.<number>}
     */

    this._timelineOptions = [];
    /**
     * @private
     * @type {Array.<Object>}
     */

    this._mediaList = [];
    /**
     * @private
     * @type {Object}
     */

    this._mediaDefault;
    /**
     * -1, means default.
     * empty means no media.
     * @private
     * @type {Array.<number>}
     */

    this._currentMediaIndices = [];
    /**
     * @private
     * @type {Object}
     */

    this._optionBackup;
    /**
     * @private
     * @type {Object}
     */

    this._newBaseOption;
  } // timeline.notMerge is not supported in ec3. Firstly there is rearly
  // case that notMerge is needed. Secondly supporting 'notMerge' requires
  // rawOption cloned and backuped when timeline changed, which does no
  // good to performance. What's more, that both timeline and setOption
  // method supply 'notMerge' brings complex and some problems.
  // Consider this case:
  // (step1) chart.setOption({timeline: {notMerge: false}, ...}, false);
  // (step2) chart.setOption({timeline: {notMerge: true}, ...}, false);


  OptionManager.prototype = {
    constructor: OptionManager,

    /**
     * @public
     * @param {Object} rawOption Raw option.
     * @param {module:echarts/model/Global} ecModel
     * @param {Array.<Function>} optionPreprocessorFuncs
     * @return {Object} Init option
     */
    setOption: function (rawOption, optionPreprocessorFuncs) {
      if (rawOption) {
        // That set dat primitive is dangerous if user reuse the data when setOption again.
        util.each(model.normalizeToArray(rawOption.series), function (series) {
          series && series.data && util.isTypedArray(series.data) && util.setAsPrimitive(series.data);
        });
      } // Caution: some series modify option data, if do not clone,
      // it should ensure that the repeat modify correctly
      // (create a new object when modify itself).


      rawOption = clone$4(rawOption); // FIXME
      // 如果 timeline options 或者 media 中设置了某个属性，而baseOption中没有设置，则进行警告。

      var oldOptionBackup = this._optionBackup;
      var newParsedOption = parseRawOption.call(this, rawOption, optionPreprocessorFuncs, !oldOptionBackup);
      this._newBaseOption = newParsedOption.baseOption; // For setOption at second time (using merge mode);

      if (oldOptionBackup) {
        // Only baseOption can be merged.
        mergeOption(oldOptionBackup.baseOption, newParsedOption.baseOption); // For simplicity, timeline options and media options do not support merge,
        // that is, if you `setOption` twice and both has timeline options, the latter
        // timeline opitons will not be merged to the formers, but just substitude them.

        if (newParsedOption.timelineOptions.length) {
          oldOptionBackup.timelineOptions = newParsedOption.timelineOptions;
        }

        if (newParsedOption.mediaList.length) {
          oldOptionBackup.mediaList = newParsedOption.mediaList;
        }

        if (newParsedOption.mediaDefault) {
          oldOptionBackup.mediaDefault = newParsedOption.mediaDefault;
        }
      } else {
        this._optionBackup = newParsedOption;
      }
    },

    /**
     * @param {boolean} isRecreate
     * @return {Object}
     */
    mountOption: function (isRecreate) {
      var optionBackup = this._optionBackup; // TODO
      // 如果没有reset功能则不clone。

      this._timelineOptions = map$3(optionBackup.timelineOptions, clone$4);
      this._mediaList = map$3(optionBackup.mediaList, clone$4);
      this._mediaDefault = clone$4(optionBackup.mediaDefault);
      this._currentMediaIndices = [];
      return clone$4(isRecreate // this._optionBackup.baseOption, which is created at the first `setOption`
      // called, and is merged into every new option by inner method `mergeOption`
      // each time `setOption` called, can be only used in `isRecreate`, because
      // its reliability is under suspicion. In other cases option merge is
      // performed by `model.mergeOption`.
      ? optionBackup.baseOption : this._newBaseOption);
    },

    /**
     * @param {module:echarts/model/Global} ecModel
     * @return {Object}
     */
    getTimelineOption: function (ecModel) {
      var option;
      var timelineOptions = this._timelineOptions;

      if (timelineOptions.length) {
        // getTimelineOption can only be called after ecModel inited,
        // so we can get currentIndex from timelineModel.
        var timelineModel = ecModel.getComponent('timeline');

        if (timelineModel) {
          option = clone$4(timelineOptions[timelineModel.getCurrentIndex()], true);
        }
      }

      return option;
    },

    /**
     * @param {module:echarts/model/Global} ecModel
     * @return {Array.<Object>}
     */
    getMediaOption: function (ecModel) {
      var ecWidth = this._api.getWidth();

      var ecHeight = this._api.getHeight();

      var mediaList = this._mediaList;
      var mediaDefault = this._mediaDefault;
      var indices = [];
      var result = []; // No media defined.

      if (!mediaList.length && !mediaDefault) {
        return result;
      } // Multi media may be applied, the latter defined media has higher priority.


      for (var i = 0, len = mediaList.length; i < len; i++) {
        if (applyMediaQuery(mediaList[i].query, ecWidth, ecHeight)) {
          indices.push(i);
        }
      } // FIXME
      // 是否mediaDefault应该强制用户设置，否则可能修改不能回归。


      if (!indices.length && mediaDefault) {
        indices = [-1];
      }

      if (indices.length && !indicesEquals(indices, this._currentMediaIndices)) {
        result = map$3(indices, function (index) {
          return clone$4(index === -1 ? mediaDefault.option : mediaList[index].option);
        });
      } // Otherwise return nothing.


      this._currentMediaIndices = indices;
      return result;
    }
  };

  function parseRawOption(rawOption, optionPreprocessorFuncs, isNew) {
    var timelineOptions = [];
    var mediaList = [];
    var mediaDefault;
    var baseOption; // Compatible with ec2.

    var timelineOpt = rawOption.timeline;

    if (rawOption.baseOption) {
      baseOption = rawOption.baseOption;
    } // For timeline


    if (timelineOpt || rawOption.options) {
      baseOption = baseOption || {};
      timelineOptions = (rawOption.options || []).slice();
    } // For media query


    if (rawOption.media) {
      baseOption = baseOption || {};
      var media = rawOption.media;
      each$6(media, function (singleMedia) {
        if (singleMedia && singleMedia.option) {
          if (singleMedia.query) {
            mediaList.push(singleMedia);
          } else if (!mediaDefault) {
            // Use the first media default.
            mediaDefault = singleMedia;
          }
        }
      });
    } // For normal option


    if (!baseOption) {
      baseOption = rawOption;
    } // Set timelineOpt to baseOption in ec3,
    // which is convenient for merge option.


    if (!baseOption.timeline) {
      baseOption.timeline = timelineOpt;
    } // Preprocess.


    each$6([baseOption].concat(timelineOptions).concat(util.map(mediaList, function (media) {
      return media.option;
    })), function (option) {
      each$6(optionPreprocessorFuncs, function (preProcess) {
        preProcess(option, isNew);
      });
    });
    return {
      baseOption: baseOption,
      timelineOptions: timelineOptions,
      mediaDefault: mediaDefault,
      mediaList: mediaList
    };
  }
  /**
   * @see <http://www.w3.org/TR/css3-mediaqueries/#media1>
   * Support: width, height, aspectRatio
   * Can use max or min as prefix.
   */


  function applyMediaQuery(query, ecWidth, ecHeight) {
    var realMap = {
      width: ecWidth,
      height: ecHeight,
      aspectratio: ecWidth / ecHeight // lowser case for convenientce.

    };
    var applicatable = true;
    util.each(query, function (value, attr) {
      var matched = attr.match(QUERY_REG);

      if (!matched || !matched[1] || !matched[2]) {
        return;
      }

      var operator = matched[1];
      var realAttr = matched[2].toLowerCase();

      if (!compare(realMap[realAttr], value, operator)) {
        applicatable = false;
      }
    });
    return applicatable;
  }

  function compare(real, expect, operator) {
    if (operator === 'min') {
      return real >= expect;
    } else if (operator === 'max') {
      return real <= expect;
    } else {
      // Equals
      return real === expect;
    }
  }

  function indicesEquals(indices1, indices2) {
    // indices is always order by asc and has only finite number.
    return indices1.join(',') === indices2.join(',');
  }
  /**
   * Consider case:
   * `chart.setOption(opt1);`
   * Then user do some interaction like dataZoom, dataView changing.
   * `chart.setOption(opt2);`
   * Then user press 'reset button' in toolbox.
   *
   * After doing that all of the interaction effects should be reset, the
   * chart should be the same as the result of invoke
   * `chart.setOption(opt1); chart.setOption(opt2);`.
   *
   * Although it is not able ensure that
   * `chart.setOption(opt1); chart.setOption(opt2);` is equivalents to
   * `chart.setOption(merge(opt1, opt2));` exactly,
   * this might be the only simple way to implement that feature.
   *
   * MEMO: We've considered some other approaches:
   * 1. Each model handle its self restoration but not uniform treatment.
   *     (Too complex in logic and error-prone)
   * 2. Use a shadow ecModel. (Performace expensive)
   */


  function mergeOption(oldOption, newOption) {
    newOption = newOption || {};
    each$6(newOption, function (newCptOpt, mainType) {
      if (newCptOpt == null) {
        return;
      }

      var oldCptOpt = oldOption[mainType];

      if (!Component.hasClass(mainType)) {
        oldOption[mainType] = merge$2(oldCptOpt, newCptOpt, true);
      } else {
        newCptOpt = model.normalizeToArray(newCptOpt);
        oldCptOpt = model.normalizeToArray(oldCptOpt);
        var mapResult = model.mappingToExists(oldCptOpt, newCptOpt);
        oldOption[mainType] = map$3(mapResult, function (item) {
          return item.option && item.exist ? merge$2(item.exist, item.option, true) : item.exist || item.option;
        });
      }
    });
  }

  var _default$$ = OptionManager;
  var OptionManager_1 = _default$$;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */





  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var each$7 = util.each;
  var isObject$6 = util.isObject;
  var POSSIBLE_STYLES = ['areaStyle', 'lineStyle', 'nodeStyle', 'linkStyle', 'chordStyle', 'label', 'labelLine'];

  function compatEC2ItemStyle(opt) {
    var itemStyleOpt = opt && opt.itemStyle;

    if (!itemStyleOpt) {
      return;
    }

    for (var i = 0, len = POSSIBLE_STYLES.length; i < len; i++) {
      var styleName = POSSIBLE_STYLES[i];
      var normalItemStyleOpt = itemStyleOpt.normal;
      var emphasisItemStyleOpt = itemStyleOpt.emphasis;

      if (normalItemStyleOpt && normalItemStyleOpt[styleName]) {
        opt[styleName] = opt[styleName] || {};

        if (!opt[styleName].normal) {
          opt[styleName].normal = normalItemStyleOpt[styleName];
        } else {
          util.merge(opt[styleName].normal, normalItemStyleOpt[styleName]);
        }

        normalItemStyleOpt[styleName] = null;
      }

      if (emphasisItemStyleOpt && emphasisItemStyleOpt[styleName]) {
        opt[styleName] = opt[styleName] || {};

        if (!opt[styleName].emphasis) {
          opt[styleName].emphasis = emphasisItemStyleOpt[styleName];
        } else {
          util.merge(opt[styleName].emphasis, emphasisItemStyleOpt[styleName]);
        }

        emphasisItemStyleOpt[styleName] = null;
      }
    }
  }

  function convertNormalEmphasis(opt, optType, useExtend) {
    if (opt && opt[optType] && (opt[optType].normal || opt[optType].emphasis)) {
      var normalOpt = opt[optType].normal;
      var emphasisOpt = opt[optType].emphasis;

      if (normalOpt) {
        // Timeline controlStyle has other properties besides normal and emphasis
        if (useExtend) {
          opt[optType].normal = opt[optType].emphasis = null;
          util.defaults(opt[optType], normalOpt);
        } else {
          opt[optType] = normalOpt;
        }
      }

      if (emphasisOpt) {
        opt.emphasis = opt.emphasis || {};
        opt.emphasis[optType] = emphasisOpt;
      }
    }
  }

  function removeEC3NormalStatus(opt) {
    convertNormalEmphasis(opt, 'itemStyle');
    convertNormalEmphasis(opt, 'lineStyle');
    convertNormalEmphasis(opt, 'areaStyle');
    convertNormalEmphasis(opt, 'label');
    convertNormalEmphasis(opt, 'labelLine'); // treemap

    convertNormalEmphasis(opt, 'upperLabel'); // graph

    convertNormalEmphasis(opt, 'edgeLabel');
  }

  function compatTextStyle(opt, propName) {
    // Check whether is not object (string\null\undefined ...)
    var labelOptSingle = isObject$6(opt) && opt[propName];
    var textStyle = isObject$6(labelOptSingle) && labelOptSingle.textStyle;

    if (textStyle) {
      for (var i = 0, len = model.TEXT_STYLE_OPTIONS.length; i < len; i++) {
        var propName = model.TEXT_STYLE_OPTIONS[i];

        if (textStyle.hasOwnProperty(propName)) {
          labelOptSingle[propName] = textStyle[propName];
        }
      }
    }
  }

  function compatEC3CommonStyles(opt) {
    if (opt) {
      removeEC3NormalStatus(opt);
      compatTextStyle(opt, 'label');
      opt.emphasis && compatTextStyle(opt.emphasis, 'label');
    }
  }

  function processSeries(seriesOpt) {
    if (!isObject$6(seriesOpt)) {
      return;
    }

    compatEC2ItemStyle(seriesOpt);
    removeEC3NormalStatus(seriesOpt);
    compatTextStyle(seriesOpt, 'label'); // treemap

    compatTextStyle(seriesOpt, 'upperLabel'); // graph

    compatTextStyle(seriesOpt, 'edgeLabel');

    if (seriesOpt.emphasis) {
      compatTextStyle(seriesOpt.emphasis, 'label'); // treemap

      compatTextStyle(seriesOpt.emphasis, 'upperLabel'); // graph

      compatTextStyle(seriesOpt.emphasis, 'edgeLabel');
    }

    var markPoint = seriesOpt.markPoint;

    if (markPoint) {
      compatEC2ItemStyle(markPoint);
      compatEC3CommonStyles(markPoint);
    }

    var markLine = seriesOpt.markLine;

    if (markLine) {
      compatEC2ItemStyle(markLine);
      compatEC3CommonStyles(markLine);
    }

    var markArea = seriesOpt.markArea;

    if (markArea) {
      compatEC3CommonStyles(markArea);
    }

    var data = seriesOpt.data; // Break with ec3: if `setOption` again, there may be no `type` in option,
    // then the backward compat based on option type will not be performed.

    if (seriesOpt.type === 'graph') {
      data = data || seriesOpt.nodes;
      var edgeData = seriesOpt.links || seriesOpt.edges;

      if (edgeData && !util.isTypedArray(edgeData)) {
        for (var i = 0; i < edgeData.length; i++) {
          compatEC3CommonStyles(edgeData[i]);
        }
      }

      util.each(seriesOpt.categories, function (opt) {
        removeEC3NormalStatus(opt);
      });
    }

    if (data && !util.isTypedArray(data)) {
      for (var i = 0; i < data.length; i++) {
        compatEC3CommonStyles(data[i]);
      }
    } // mark point data


    var markPoint = seriesOpt.markPoint;

    if (markPoint && markPoint.data) {
      var mpData = markPoint.data;

      for (var i = 0; i < mpData.length; i++) {
        compatEC3CommonStyles(mpData[i]);
      }
    } // mark line data


    var markLine = seriesOpt.markLine;

    if (markLine && markLine.data) {
      var mlData = markLine.data;

      for (var i = 0; i < mlData.length; i++) {
        if (util.isArray(mlData[i])) {
          compatEC3CommonStyles(mlData[i][0]);
          compatEC3CommonStyles(mlData[i][1]);
        } else {
          compatEC3CommonStyles(mlData[i]);
        }
      }
    } // Series


    if (seriesOpt.type === 'gauge') {
      compatTextStyle(seriesOpt, 'axisLabel');
      compatTextStyle(seriesOpt, 'title');
      compatTextStyle(seriesOpt, 'detail');
    } else if (seriesOpt.type === 'treemap') {
      convertNormalEmphasis(seriesOpt.breadcrumb, 'itemStyle');
      util.each(seriesOpt.levels, function (opt) {
        removeEC3NormalStatus(opt);
      });
    } else if (seriesOpt.type === 'tree') {
      removeEC3NormalStatus(seriesOpt.leaves);
    } // sunburst starts from ec4, so it does not need to compat levels.

  }

  function toArr(o) {
    return util.isArray(o) ? o : o ? [o] : [];
  }

  function toObj(o) {
    return (util.isArray(o) ? o[0] : o) || {};
  }

  function _default$10(option, isTheme) {
    each$7(toArr(option.series), function (seriesOpt) {
      isObject$6(seriesOpt) && processSeries(seriesOpt);
    });
    var axes = ['xAxis', 'yAxis', 'radiusAxis', 'angleAxis', 'singleAxis', 'parallelAxis', 'radar'];
    isTheme && axes.push('valueAxis', 'categoryAxis', 'logAxis', 'timeAxis');
    each$7(axes, function (axisName) {
      each$7(toArr(option[axisName]), function (axisOpt) {
        if (axisOpt) {
          compatTextStyle(axisOpt, 'axisLabel');
          compatTextStyle(axisOpt.axisPointer, 'label');
        }
      });
    });
    each$7(toArr(option.parallel), function (parallelOpt) {
      var parallelAxisDefault = parallelOpt && parallelOpt.parallelAxisDefault;
      compatTextStyle(parallelAxisDefault, 'axisLabel');
      compatTextStyle(parallelAxisDefault && parallelAxisDefault.axisPointer, 'label');
    });
    each$7(toArr(option.calendar), function (calendarOpt) {
      convertNormalEmphasis(calendarOpt, 'itemStyle');
      compatTextStyle(calendarOpt, 'dayLabel');
      compatTextStyle(calendarOpt, 'monthLabel');
      compatTextStyle(calendarOpt, 'yearLabel');
    }); // radar.name.textStyle

    each$7(toArr(option.radar), function (radarOpt) {
      compatTextStyle(radarOpt, 'name');
    });
    each$7(toArr(option.geo), function (geoOpt) {
      if (isObject$6(geoOpt)) {
        compatEC3CommonStyles(geoOpt);
        each$7(toArr(geoOpt.regions), function (regionObj) {
          compatEC3CommonStyles(regionObj);
        });
      }
    });
    each$7(toArr(option.timeline), function (timelineOpt) {
      compatEC3CommonStyles(timelineOpt);
      convertNormalEmphasis(timelineOpt, 'label');
      convertNormalEmphasis(timelineOpt, 'itemStyle');
      convertNormalEmphasis(timelineOpt, 'controlStyle', true);
      var data = timelineOpt.data;
      util.isArray(data) && util.each(data, function (item) {
        if (util.isObject(item)) {
          convertNormalEmphasis(item, 'label');
          convertNormalEmphasis(item, 'itemStyle');
        }
      });
    });
    each$7(toArr(option.toolbox), function (toolboxOpt) {
      convertNormalEmphasis(toolboxOpt, 'iconStyle');
      each$7(toolboxOpt.feature, function (featureOpt) {
        convertNormalEmphasis(featureOpt, 'iconStyle');
      });
    });
    compatTextStyle(toObj(option.axisPointer), 'label');
    compatTextStyle(toObj(option.tooltip).axisPointer, 'label');
  }

  var compatStyle = _default$10;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  var each$8 = util.each;
  var isArray$4 = util.isArray;
  var isObject$7 = util.isObject;





  var normalizeToArray$2 = model.normalizeToArray;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  // Compatitable with 2.0
  function get(opt, path) {
    path = path.split(',');
    var obj = opt;

    for (var i = 0; i < path.length; i++) {
      obj = obj && obj[path[i]];

      if (obj == null) {
        break;
      }
    }

    return obj;
  }

  function set$1(opt, path, val, overwrite) {
    path = path.split(',');
    var obj = opt;
    var key;

    for (var i = 0; i < path.length - 1; i++) {
      key = path[i];

      if (obj[key] == null) {
        obj[key] = {};
      }

      obj = obj[key];
    }

    if (overwrite || obj[path[i]] == null) {
      obj[path[i]] = val;
    }
  }

  function compatLayoutProperties(option) {
    each$8(LAYOUT_PROPERTIES, function (prop) {
      if (prop[0] in option && !(prop[1] in option)) {
        option[prop[1]] = option[prop[0]];
      }
    });
  }

  var LAYOUT_PROPERTIES = [['x', 'left'], ['y', 'top'], ['x2', 'right'], ['y2', 'bottom']];
  var COMPATITABLE_COMPONENTS = ['grid', 'geo', 'parallel', 'legend', 'toolbox', 'title', 'visualMap', 'dataZoom', 'timeline'];

  function _default$11(option, isTheme) {
    compatStyle(option, isTheme); // Make sure series array for model initialization.

    option.series = normalizeToArray$2(option.series);
    each$8(option.series, function (seriesOpt) {
      if (!isObject$7(seriesOpt)) {
        return;
      }

      var seriesType = seriesOpt.type;

      if (seriesType === 'line') {
        if (seriesOpt.clipOverflow != null) {
          seriesOpt.clip = seriesOpt.clipOverflow;
        }
      } else if (seriesType === 'pie' || seriesType === 'gauge') {
        if (seriesOpt.clockWise != null) {
          seriesOpt.clockwise = seriesOpt.clockWise;
        }
      } else if (seriesType === 'gauge') {
        var pointerColor = get(seriesOpt, 'pointer.color');
        pointerColor != null && set$1(seriesOpt, 'itemStyle.color', pointerColor);
      }

      compatLayoutProperties(seriesOpt);
    }); // dataRange has changed to visualMap

    if (option.dataRange) {
      option.visualMap = option.dataRange;
    }

    each$8(COMPATITABLE_COMPONENTS, function (componentName) {
      var options = option[componentName];

      if (options) {
        if (!isArray$4(options)) {
          options = [options];
        }

        each$8(options, function (option) {
          compatLayoutProperties(option);
        });
      }
    });
  }

  var backwardCompat = _default$11;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  var createHashMap$4 = util.createHashMap;
  var each$9 = util.each;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  // (1) [Caution]: the logic is correct based on the premises:
  //     data processing stage is blocked in stream.
  //     See <module:echarts/stream/Scheduler#performDataProcessorTasks>
  // (2) Only register once when import repeatly.
  //     Should be executed after series filtered and before stack calculation.
  function _default$12(ecModel) {
    var stackInfoMap = createHashMap$4();
    ecModel.eachSeries(function (seriesModel) {
      var stack = seriesModel.get('stack'); // Compatibal: when `stack` is set as '', do not stack.

      if (stack) {
        var stackInfoList = stackInfoMap.get(stack) || stackInfoMap.set(stack, []);
        var data = seriesModel.getData();
        var stackInfo = {
          // Used for calculate axis extent automatically.
          stackResultDimension: data.getCalculationInfo('stackResultDimension'),
          stackedOverDimension: data.getCalculationInfo('stackedOverDimension'),
          stackedDimension: data.getCalculationInfo('stackedDimension'),
          stackedByDimension: data.getCalculationInfo('stackedByDimension'),
          isStackedByIndex: data.getCalculationInfo('isStackedByIndex'),
          data: data,
          seriesModel: seriesModel
        }; // If stacked on axis that do not support data stack.

        if (!stackInfo.stackedDimension || !(stackInfo.isStackedByIndex || stackInfo.stackedByDimension)) {
          return;
        }

        stackInfoList.length && data.setCalculationInfo('stackedOnSeries', stackInfoList[stackInfoList.length - 1].seriesModel);
        stackInfoList.push(stackInfo);
      }
    });
    stackInfoMap.each(calculateStack);
  }

  function calculateStack(stackInfoList) {
    each$9(stackInfoList, function (targetStackInfo, idxInStack) {
      var resultVal = [];
      var resultNaN = [NaN, NaN];
      var dims = [targetStackInfo.stackResultDimension, targetStackInfo.stackedOverDimension];
      var targetData = targetStackInfo.data;
      var isStackedByIndex = targetStackInfo.isStackedByIndex; // Should not write on raw data, because stack series model list changes
      // depending on legend selection.

      var newData = targetData.map(dims, function (v0, v1, dataIndex) {
        var sum = targetData.get(targetStackInfo.stackedDimension, dataIndex); // Consider `connectNulls` of line area, if value is NaN, stackedOver
        // should also be NaN, to draw a appropriate belt area.

        if (isNaN(sum)) {
          return resultNaN;
        }

        var byValue;
        var stackedDataRawIndex;

        if (isStackedByIndex) {
          stackedDataRawIndex = targetData.getRawIndex(dataIndex);
        } else {
          byValue = targetData.get(targetStackInfo.stackedByDimension, dataIndex);
        } // If stackOver is NaN, chart view will render point on value start.


        var stackedOver = NaN;

        for (var j = idxInStack - 1; j >= 0; j--) {
          var stackInfo = stackInfoList[j]; // Has been optimized by inverted indices on `stackedByDimension`.

          if (!isStackedByIndex) {
            stackedDataRawIndex = stackInfo.data.rawIndexOf(stackInfo.stackedByDimension, byValue);
          }

          if (stackedDataRawIndex >= 0) {
            var val = stackInfo.data.getByRawIndex(stackInfo.stackResultDimension, stackedDataRawIndex); // Considering positive stack, negative stack and empty data

            if (sum >= 0 && val > 0 || // Positive stack
            sum <= 0 && val < 0 // Negative stack
            ) {
                sum += val;
                stackedOver = val;
                break;
              }
          }
        }

        resultVal[0] = sum;
        resultVal[1] = stackedOver;
        return resultVal;
      });
      targetData.hostModel.setData(newData); // Update for consequent calculation

      targetStackInfo.data = newData;
    });
  }

  var dataStack = _default$12;

  var extend$4 = util.extend;
  var each$a = util.each;
  var isObject$8 = util.isObject;



  var getDataItemValue$2 = model.getDataItemValue;
  var isDataItemOption$1 = model.isDataItemOption;



  var parseDate$1 = number.parseDate;





  var SOURCE_FORMAT_TYPED_ARRAY$3 = sourceType.SOURCE_FORMAT_TYPED_ARRAY;
  var SOURCE_FORMAT_ARRAY_ROWS$2 = sourceType.SOURCE_FORMAT_ARRAY_ROWS;
  var SOURCE_FORMAT_ORIGINAL$3 = sourceType.SOURCE_FORMAT_ORIGINAL;
  var SOURCE_FORMAT_OBJECT_ROWS$2 = sourceType.SOURCE_FORMAT_OBJECT_ROWS;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  // TODO
  // ??? refactor? check the outer usage of data provider.
  // merge with defaultDimValueGetter?

  /**
   * If normal array used, mutable chunk size is supported.
   * If typed array used, chunk size must be fixed.
   */
  function DefaultDataProvider(source, dimSize) {
    if (!Source_1.isInstance(source)) {
      source = Source_1.seriesDataToSource(source);
    }

    this._source = source;
    var data = this._data = source.data;
    var sourceFormat = source.sourceFormat; // Typed array. TODO IE10+?

    if (sourceFormat === SOURCE_FORMAT_TYPED_ARRAY$3) {
      this._offset = 0;
      this._dimSize = dimSize;
      this._data = data;
    }

    var methods = providerMethods[sourceFormat === SOURCE_FORMAT_ARRAY_ROWS$2 ? sourceFormat + '_' + source.seriesLayoutBy : sourceFormat];
    extend$4(this, methods);
  }

  var providerProto = DefaultDataProvider.prototype; // If data is pure without style configuration

  providerProto.pure = false; // If data is persistent and will not be released after use.

  providerProto.persistent = true; // ???! FIXME legacy data provider do not has method getSource

  providerProto.getSource = function () {
    return this._source;
  };

  var providerMethods = {
    'arrayRows_column': {
      pure: true,
      count: function () {
        return Math.max(0, this._data.length - this._source.startIndex);
      },
      getItem: function (idx) {
        return this._data[idx + this._source.startIndex];
      },
      appendData: appendDataSimply
    },
    'arrayRows_row': {
      pure: true,
      count: function () {
        var row = this._data[0];
        return row ? Math.max(0, row.length - this._source.startIndex) : 0;
      },
      getItem: function (idx) {
        idx += this._source.startIndex;
        var item = [];
        var data = this._data;

        for (var i = 0; i < data.length; i++) {
          var row = data[i];
          item.push(row ? row[idx] : null);
        }

        return item;
      },
      appendData: function () {
        throw new Error('Do not support appendData when set seriesLayoutBy: "row".');
      }
    },
    'objectRows': {
      pure: true,
      count: countSimply,
      getItem: getItemSimply,
      appendData: appendDataSimply
    },
    'keyedColumns': {
      pure: true,
      count: function () {
        var dimName = this._source.dimensionsDefine[0].name;
        var col = this._data[dimName];
        return col ? col.length : 0;
      },
      getItem: function (idx) {
        var item = [];
        var dims = this._source.dimensionsDefine;

        for (var i = 0; i < dims.length; i++) {
          var col = this._data[dims[i].name];
          item.push(col ? col[idx] : null);
        }

        return item;
      },
      appendData: function (newData) {
        var data = this._data;
        each$a(newData, function (newCol, key) {
          var oldCol = data[key] || (data[key] = []);

          for (var i = 0; i < (newCol || []).length; i++) {
            oldCol.push(newCol[i]);
          }
        });
      }
    },
    'original': {
      count: countSimply,
      getItem: getItemSimply,
      appendData: appendDataSimply
    },
    'typedArray': {
      persistent: false,
      pure: true,
      count: function () {
        return this._data ? this._data.length / this._dimSize : 0;
      },
      getItem: function (idx, out) {
        idx = idx - this._offset;
        out = out || [];
        var offset = this._dimSize * idx;

        for (var i = 0; i < this._dimSize; i++) {
          out[i] = this._data[offset + i];
        }

        return out;
      },
      appendData: function (newData) {
        this._data = newData;
      },
      // Clean self if data is already used.
      clean: function () {
        // PENDING
        this._offset += this.count();
        this._data = null;
      }
    }
  };

  function countSimply() {
    return this._data.length;
  }

  function getItemSimply(idx) {
    return this._data[idx];
  }

  function appendDataSimply(newData) {
    for (var i = 0; i < newData.length; i++) {
      this._data.push(newData[i]);
    }
  }

  var rawValueGetters = {
    arrayRows: getRawValueSimply,
    objectRows: function (dataItem, dataIndex, dimIndex, dimName) {
      return dimIndex != null ? dataItem[dimName] : dataItem;
    },
    keyedColumns: getRawValueSimply,
    original: function (dataItem, dataIndex, dimIndex, dimName) {
      // FIXME
      // In some case (markpoint in geo (geo-map.html)), dataItem
      // is {coord: [...]}
      var value = getDataItemValue$2(dataItem);
      return dimIndex == null || !(value instanceof Array) ? value : value[dimIndex];
    },
    typedArray: getRawValueSimply
  };

  function getRawValueSimply(dataItem, dataIndex, dimIndex, dimName) {
    return dimIndex != null ? dataItem[dimIndex] : dataItem;
  }

  var defaultDimValueGetters = {
    arrayRows: getDimValueSimply,
    objectRows: function (dataItem, dimName, dataIndex, dimIndex) {
      return converDataValue(dataItem[dimName], this._dimensionInfos[dimName]);
    },
    keyedColumns: getDimValueSimply,
    original: function (dataItem, dimName, dataIndex, dimIndex) {
      // Performance sensitive, do not use modelUtil.getDataItemValue.
      // If dataItem is an plain object with no value field, the var `value`
      // will be assigned with the object, but it will be tread correctly
      // in the `convertDataValue`.
      var value = dataItem && (dataItem.value == null ? dataItem : dataItem.value); // If any dataItem is like { value: 10 }

      if (!this._rawData.pure && isDataItemOption$1(dataItem)) {
        this.hasItemOption = true;
      }

      return converDataValue(value instanceof Array ? value[dimIndex] // If value is a single number or something else not array.
      : value, this._dimensionInfos[dimName]);
    },
    typedArray: function (dataItem, dimName, dataIndex, dimIndex) {
      return dataItem[dimIndex];
    }
  };

  function getDimValueSimply(dataItem, dimName, dataIndex, dimIndex) {
    return converDataValue(dataItem[dimIndex], this._dimensionInfos[dimName]);
  }
  /**
   * This helper method convert value in data.
   * @param {string|number|Date} value
   * @param {Object|string} [dimInfo] If string (like 'x'), dimType defaults 'number'.
   *        If "dimInfo.ordinalParseAndSave", ordinal value can be parsed.
   */


  function converDataValue(value, dimInfo) {
    // Performance sensitive.
    var dimType = dimInfo && dimInfo.type;

    if (dimType === 'ordinal') {
      // If given value is a category string
      var ordinalMeta = dimInfo && dimInfo.ordinalMeta;
      return ordinalMeta ? ordinalMeta.parseAndCollect(value) : value;
    }

    if (dimType === 'time' // spead up when using timestamp
    && typeof value !== 'number' && value != null && value !== '-') {
      value = +parseDate$1(value);
    } // dimType defaults 'number'.
    // If dimType is not ordinal and value is null or undefined or NaN or '-',
    // parse to NaN.


    return value == null || value === '' ? NaN // If string (like '-'), using '+' parse to NaN
    // If object, also parse to NaN
    : +value;
  } // ??? FIXME can these logic be more neat: getRawValue, getRawDataItem,
  // Consider persistent.
  // Caution: why use raw value to display on label or tooltip?
  // A reason is to avoid format. For example time value we do not know
  // how to format is expected. More over, if stack is used, calculated
  // value may be 0.91000000001, which have brings trouble to display.
  // TODO: consider how to treat null/undefined/NaN when display?

  /**
   * @param {module:echarts/data/List} data
   * @param {number} dataIndex
   * @param {string|number} [dim] dimName or dimIndex
   * @return {Array.<number>|string|number} can be null/undefined.
   */


  function retrieveRawValue(data, dataIndex, dim) {
    if (!data) {
      return;
    } // Consider data may be not persistent.


    var dataItem = data.getRawDataItem(dataIndex);

    if (dataItem == null) {
      return;
    }

    var sourceFormat = data.getProvider().getSource().sourceFormat;
    var dimName;
    var dimIndex;
    var dimInfo = data.getDimensionInfo(dim);

    if (dimInfo) {
      dimName = dimInfo.name;
      dimIndex = dimInfo.index;
    }

    return rawValueGetters[sourceFormat](dataItem, dataIndex, dimIndex, dimName);
  }
  /**
   * Compatible with some cases (in pie, map) like:
   * data: [{name: 'xx', value: 5, selected: true}, ...]
   * where only sourceFormat is 'original' and 'objectRows' supported.
   *
   * ??? TODO
   * Supported detail options in data item when using 'arrayRows'.
   *
   * @param {module:echarts/data/List} data
   * @param {number} dataIndex
   * @param {string} attr like 'selected'
   */


  function retrieveRawAttr(data, dataIndex, attr) {
    if (!data) {
      return;
    }

    var sourceFormat = data.getProvider().getSource().sourceFormat;

    if (sourceFormat !== SOURCE_FORMAT_ORIGINAL$3 && sourceFormat !== SOURCE_FORMAT_OBJECT_ROWS$2) {
      return;
    }

    var dataItem = data.getRawDataItem(dataIndex);

    if (sourceFormat === SOURCE_FORMAT_ORIGINAL$3 && !isObject$8(dataItem)) {
      dataItem = null;
    }

    if (dataItem) {
      return dataItem[attr];
    }
  }

  var DefaultDataProvider_1 = DefaultDataProvider;
  var defaultDimValueGetters_1 = defaultDimValueGetters;
  var retrieveRawValue_1 = retrieveRawValue;
  var retrieveRawAttr_1 = retrieveRawAttr;

  var dataProvider = {
  	DefaultDataProvider: DefaultDataProvider_1,
  	defaultDimValueGetters: defaultDimValueGetters_1,
  	retrieveRawValue: retrieveRawValue_1,
  	retrieveRawAttr: retrieveRawAttr_1
  };

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  var retrieveRawValue$1 = dataProvider.retrieveRawValue;



  var getTooltipMarker$1 = format.getTooltipMarker;
  var formatTpl$1 = format.formatTpl;



  var getTooltipRenderMode$1 = model.getTooltipRenderMode;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var DIMENSION_LABEL_REG = /\{@(.+?)\}/g; // PENDING A little ugly

  var _default$13 = {
    /**
     * Get params for formatter
     * @param {number} dataIndex
     * @param {string} [dataType]
     * @return {Object}
     */
    getDataParams: function (dataIndex, dataType) {
      var data = this.getData(dataType);
      var rawValue = this.getRawValue(dataIndex, dataType);
      var rawDataIndex = data.getRawIndex(dataIndex);
      var name = data.getName(dataIndex);
      var itemOpt = data.getRawDataItem(dataIndex);
      var color = data.getItemVisual(dataIndex, 'color');
      var borderColor = data.getItemVisual(dataIndex, 'borderColor');
      var tooltipModel = this.ecModel.getComponent('tooltip');
      var renderModeOption = tooltipModel && tooltipModel.get('renderMode');
      var renderMode = getTooltipRenderMode$1(renderModeOption);
      var mainType = this.mainType;
      var isSeries = mainType === 'series';
      var userOutput = data.userOutput;
      return {
        componentType: mainType,
        componentSubType: this.subType,
        componentIndex: this.componentIndex,
        seriesType: isSeries ? this.subType : null,
        seriesIndex: this.seriesIndex,
        seriesId: isSeries ? this.id : null,
        seriesName: isSeries ? this.name : null,
        name: name,
        dataIndex: rawDataIndex,
        data: itemOpt,
        dataType: dataType,
        value: rawValue,
        color: color,
        borderColor: borderColor,
        dimensionNames: userOutput ? userOutput.dimensionNames : null,
        encode: userOutput ? userOutput.encode : null,
        marker: getTooltipMarker$1({
          color: color,
          renderMode: renderMode
        }),
        // Param name list for mapping `a`, `b`, `c`, `d`, `e`
        $vars: ['seriesName', 'name', 'value']
      };
    },

    /**
     * Format label
     * @param {number} dataIndex
     * @param {string} [status='normal'] 'normal' or 'emphasis'
     * @param {string} [dataType]
     * @param {number} [dimIndex] Only used in some chart that
     *        use formatter in different dimensions, like radar.
     * @param {string} [labelProp='label']
     * @return {string} If not formatter, return null/undefined
     */
    getFormattedLabel: function (dataIndex, status, dataType, dimIndex, labelProp) {
      status = status || 'normal';
      var data = this.getData(dataType);
      var itemModel = data.getItemModel(dataIndex);
      var params = this.getDataParams(dataIndex, dataType);

      if (dimIndex != null && params.value instanceof Array) {
        params.value = params.value[dimIndex];
      }

      var formatter = itemModel.get(status === 'normal' ? [labelProp || 'label', 'formatter'] : [status, labelProp || 'label', 'formatter']);

      if (typeof formatter === 'function') {
        params.status = status;
        params.dimensionIndex = dimIndex;
        return formatter(params);
      } else if (typeof formatter === 'string') {
        var str = formatTpl$1(formatter, params); // Support 'aaa{@[3]}bbb{@product}ccc'.
        // Do not support '}' in dim name util have to.

        return str.replace(DIMENSION_LABEL_REG, function (origin, dim) {
          var len = dim.length;

          if (dim.charAt(0) === '[' && dim.charAt(len - 1) === ']') {
            dim = +dim.slice(1, len - 1); // Also: '[]' => 0
          }

          return retrieveRawValue$1(data, dataIndex, dim);
        });
      }
    },

    /**
     * Get raw value in option
     * @param {number} idx
     * @param {string} [dataType]
     * @return {Array|number|string}
     */
    getRawValue: function (idx, dataType) {
      return retrieveRawValue$1(this.getData(dataType), idx);
    },

    /**
     * Should be implemented.
     * @param {number} dataIndex
     * @param {boolean} [multipleSeries=false]
     * @param {number} [dataType]
     * @return {string} tooltip string
     */
    formatTooltip: function () {// Empty function
    }
  };
  var dataFormat = _default$13;

  var isArray$5 = util.isArray;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * @param {Object} define
   * @return See the return of `createTask`.
   */
  function createTask(define) {
    return new Task(define);
  }
  /**
   * @constructor
   * @param {Object} define
   * @param {Function} define.reset Custom reset
   * @param {Function} [define.plan] Returns 'reset' indicate reset immediately.
   * @param {Function} [define.count] count is used to determin data task.
   * @param {Function} [define.onDirty] count is used to determin data task.
   */


  function Task(define) {
    define = define || {};
    this._reset = define.reset;
    this._plan = define.plan;
    this._count = define.count;
    this._onDirty = define.onDirty;
    this._dirty = true; // Context must be specified implicitly, to
    // avoid miss update context when model changed.

    this.context;
  }

  var taskProto = Task.prototype;
  /**
   * @param {Object} performArgs
   * @param {number} [performArgs.step] Specified step.
   * @param {number} [performArgs.skip] Skip customer perform call.
   * @param {number} [performArgs.modBy] Sampling window size.
   * @param {number} [performArgs.modDataCount] Sampling count.
   */

  taskProto.perform = function (performArgs) {
    var upTask = this._upstream;
    var skip = performArgs && performArgs.skip; // TODO some refactor.
    // Pull data. Must pull data each time, because context.data
    // may be updated by Series.setData.

    if (this._dirty && upTask) {
      var context = this.context;
      context.data = context.outputData = upTask.context.outputData;
    }

    if (this.__pipeline) {
      this.__pipeline.currentTask = this;
    }

    var planResult;

    if (this._plan && !skip) {
      planResult = this._plan(this.context);
    } // Support sharding by mod, which changes the render sequence and makes the rendered graphic
    // elements uniformed distributed when progress, especially when moving or zooming.


    var lastModBy = normalizeModBy(this._modBy);
    var lastModDataCount = this._modDataCount || 0;
    var modBy = normalizeModBy(performArgs && performArgs.modBy);
    var modDataCount = performArgs && performArgs.modDataCount || 0;

    if (lastModBy !== modBy || lastModDataCount !== modDataCount) {
      planResult = 'reset';
    }

    function normalizeModBy(val) {
      !(val >= 1) && (val = 1); // jshint ignore:line

      return val;
    }

    var forceFirstProgress;

    if (this._dirty || planResult === 'reset') {
      this._dirty = false;
      forceFirstProgress = reset(this, skip);
    }

    this._modBy = modBy;
    this._modDataCount = modDataCount;
    var step = performArgs && performArgs.step;

    if (upTask) {
      this._dueEnd = upTask._outputDueEnd;
    } // DataTask or overallTask
    else {
        this._dueEnd = this._count ? this._count(this.context) : Infinity;
      } // Note: Stubs, that its host overall task let it has progress, has progress.
    // If no progress, pass index from upstream to downstream each time plan called.


    if (this._progress) {
      var start = this._dueIndex;
      var end = Math.min(step != null ? this._dueIndex + step : Infinity, this._dueEnd);

      if (!skip && (forceFirstProgress || start < end)) {
        var progress = this._progress;

        if (isArray$5(progress)) {
          for (var i = 0; i < progress.length; i++) {
            doProgress(this, progress[i], start, end, modBy, modDataCount);
          }
        } else {
          doProgress(this, progress, start, end, modBy, modDataCount);
        }
      }

      this._dueIndex = end; // If no `outputDueEnd`, assume that output data and
      // input data is the same, so use `dueIndex` as `outputDueEnd`.

      var outputDueEnd = this._settedOutputEnd != null ? this._settedOutputEnd : end;
      this._outputDueEnd = outputDueEnd;
    } else {
      // (1) Some overall task has no progress.
      // (2) Stubs, that its host overall task do not let it has progress, has no progress.
      // This should always be performed so it can be passed to downstream.
      this._dueIndex = this._outputDueEnd = this._settedOutputEnd != null ? this._settedOutputEnd : this._dueEnd;
    }

    return this.unfinished();
  };

  var iterator = function () {
    var end;
    var current;
    var modBy;
    var modDataCount;
    var winCount;
    var it = {
      reset: function (s, e, sStep, sCount) {
        current = s;
        end = e;
        modBy = sStep;
        modDataCount = sCount;
        winCount = Math.ceil(modDataCount / modBy);
        it.next = modBy > 1 && modDataCount > 0 ? modNext : sequentialNext;
      }
    };
    return it;

    function sequentialNext() {
      return current < end ? current++ : null;
    }

    function modNext() {
      var dataIndex = current % winCount * modBy + Math.ceil(current / winCount);
      var result = current >= end ? null : dataIndex < modDataCount ? dataIndex // If modDataCount is smaller than data.count() (consider `appendData` case),
      // Use normal linear rendering mode.
      : current;
      current++;
      return result;
    }
  }();

  taskProto.dirty = function () {
    this._dirty = true;
    this._onDirty && this._onDirty(this.context);
  };

  function doProgress(taskIns, progress, start, end, modBy, modDataCount) {
    iterator.reset(start, end, modBy, modDataCount);
    taskIns._callingProgress = progress;

    taskIns._callingProgress({
      start: start,
      end: end,
      count: end - start,
      next: iterator.next
    }, taskIns.context);
  }

  function reset(taskIns, skip) {
    taskIns._dueIndex = taskIns._outputDueEnd = taskIns._dueEnd = 0;
    taskIns._settedOutputEnd = null;
    var progress;
    var forceFirstProgress;

    if (!skip && taskIns._reset) {
      progress = taskIns._reset(taskIns.context);

      if (progress && progress.progress) {
        forceFirstProgress = progress.forceFirstProgress;
        progress = progress.progress;
      } // To simplify no progress checking, array must has item.


      if (isArray$5(progress) && !progress.length) {
        progress = null;
      }
    }

    taskIns._progress = progress;
    taskIns._modBy = taskIns._modDataCount = null;
    var downstream = taskIns._downstream;
    downstream && downstream.dirty();
    return forceFirstProgress;
  }
  /**
   * @return {boolean}
   */


  taskProto.unfinished = function () {
    return this._progress && this._dueIndex < this._dueEnd;
  };
  /**
   * @param {Object} downTask The downstream task.
   * @return {Object} The downstream task.
   */


  taskProto.pipe = function (downTask) {
    // If already downstream, do not dirty downTask.
    if (this._downstream !== downTask || this._dirty) {
      this._downstream = downTask;
      downTask._upstream = this;
      downTask.dirty();
    }
  };

  taskProto.dispose = function () {
    if (this._disposed) {
      return;
    }

    this._upstream && (this._upstream._downstream = null);
    this._downstream && (this._downstream._upstream = null);
    this._dirty = false;
    this._disposed = true;
  };

  taskProto.getUpstream = function () {
    return this._upstream;
  };

  taskProto.getDownstream = function () {
    return this._downstream;
  };

  taskProto.setOutputEnd = function (end) {
    // This only happend in dataTask, dataZoom, map, currently.
    // where dataZoom do not set end each time, but only set
    // when reset. So we should record the setted end, in case
    // that the stub of dataZoom perform again and earse the
    // setted end by upstream.
    this._outputDueEnd = this._settedOutputEnd = end;
  }; ///////////////////////////////////////////////////////////
  // For stream debug (Should be commented out after used!)
  // Usage: printTask(this, 'begin');
  // Usage: printTask(this, null, {someExtraProp});
  // function printTask(task, prefix, extra) {
  //     window.ecTaskUID == null && (window.ecTaskUID = 0);
  //     task.uidDebug == null && (task.uidDebug = `task_${window.ecTaskUID++}`);
  //     task.agent && task.agent.uidDebug == null && (task.agent.uidDebug = `task_${window.ecTaskUID++}`);
  //     var props = [];
  //     if (task.__pipeline) {
  //         var val = `${task.__idxInPipeline}/${task.__pipeline.tail.__idxInPipeline} ${task.agent ? '(stub)' : ''}`;
  //         props.push({text: 'idx', value: val});
  //     } else {
  //         var stubCount = 0;
  //         task.agentStubMap.each(() => stubCount++);
  //         props.push({text: 'idx', value: `overall (stubs: ${stubCount})`});
  //     }
  //     props.push({text: 'uid', value: task.uidDebug});
  //     if (task.__pipeline) {
  //         props.push({text: 'pid', value: task.__pipeline.id});
  //         task.agent && props.push(
  //             {text: 'stubFor', value: task.agent.uidDebug}
  //         );
  //     }
  //     props.push(
  //         {text: 'dirty', value: task._dirty},
  //         {text: 'dueIndex', value: task._dueIndex},
  //         {text: 'dueEnd', value: task._dueEnd},
  //         {text: 'outputDueEnd', value: task._outputDueEnd}
  //     );
  //     if (extra) {
  //         Object.keys(extra).forEach(key => {
  //             props.push({text: key, value: extra[key]});
  //         });
  //     }
  //     var args = ['color: blue'];
  //     var msg = `%c[${prefix || 'T'}] %c` + props.map(item => (
  //         args.push('color: black', 'color: red'),
  //         `${item.text}: %c${item.value}`
  //     )).join('%c, ');
  //     console.log.apply(console, [msg].concat(args));
  //     // console.log(this);
  // }


  var createTask_1 = createTask;

  var task = {
  	createTask: createTask_1
  };

  var formatTime$1 = format.formatTime;
  var encodeHTML$1 = format.encodeHTML;
  var addCommas$1 = format.addCommas;
  var getTooltipMarker$2 = format.getTooltipMarker;











  var getLayoutParams$1 = layout.getLayoutParams;
  var mergeLayoutParam$1 = layout.mergeLayoutParam;



  var createTask$1 = task.createTask;



  var prepareSource$1 = sourceHelper.prepareSource;
  var getSource$1 = sourceHelper.getSource;



  var retrieveRawValue$2 = dataProvider.retrieveRawValue;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var inner$4 = model.makeInner();
  var SeriesModel = Component.extend({
    type: 'series.__base__',

    /**
     * @readOnly
     */
    seriesIndex: 0,
    // coodinateSystem will be injected in the echarts/CoordinateSystem
    coordinateSystem: null,

    /**
     * @type {Object}
     * @protected
     */
    defaultOption: null,

    /**
     * legend visual provider to the legend component
     * @type {Object}
     */
    // PENDING
    legendVisualProvider: null,

    /**
     * Access path of color for visual
     */
    visualColorAccessPath: 'itemStyle.color',

    /**
     * Access path of borderColor for visual
     */
    visualBorderColorAccessPath: 'itemStyle.borderColor',

    /**
     * Support merge layout params.
     * Only support 'box' now (left/right/top/bottom/width/height).
     * @type {string|Object} Object can be {ignoreSize: true}
     * @readOnly
     */
    layoutMode: null,
    init: function (option, parentModel, ecModel, extraOpt) {
      /**
       * @type {number}
       * @readOnly
       */
      this.seriesIndex = this.componentIndex;
      this.dataTask = createTask$1({
        count: dataTaskCount,
        reset: dataTaskReset
      });
      this.dataTask.context = {
        model: this
      };
      this.mergeDefaultAndTheme(option, ecModel);
      prepareSource$1(this);
      var data = this.getInitialData(option, ecModel);
      wrapData(data, this);
      this.dataTask.context.data = data;

      /**
       * @type {module:echarts/data/List|module:echarts/data/Tree|module:echarts/data/Graph}
       * @private
       */
      inner$4(this).dataBeforeProcessed = data; // If we reverse the order (make data firstly, and then make
      // dataBeforeProcessed by cloneShallow), cloneShallow will
      // cause data.graph.data !== data when using
      // module:echarts/data/Graph or module:echarts/data/Tree.
      // See module:echarts/data/helper/linkList
      // Theoretically, it is unreasonable to call `seriesModel.getData()` in the model
      // init or merge stage, because the data can be restored. So we do not `restoreData`
      // and `setData` here, which forbids calling `seriesModel.getData()` in this stage.
      // Call `seriesModel.getRawData()` instead.
      // this.restoreData();

      autoSeriesName(this);
    },

    /**
     * Util for merge default and theme to option
     * @param  {Object} option
     * @param  {module:echarts/model/Global} ecModel
     */
    mergeDefaultAndTheme: function (option, ecModel) {
      var layoutMode = this.layoutMode;
      var inputPositionParams = layoutMode ? getLayoutParams$1(option) : {}; // Backward compat: using subType on theme.
      // But if name duplicate between series subType
      // (for example: parallel) add component mainType,
      // add suffix 'Series'.

      var themeSubType = this.subType;

      if (Component.hasClass(themeSubType)) {
        themeSubType += 'Series';
      }

      util.merge(option, ecModel.getTheme().get(this.subType));
      util.merge(option, this.getDefaultOption()); // Default label emphasis `show`

      model.defaultEmphasis(option, 'label', ['show']);
      this.fillDataTextStyle(option.data);

      if (layoutMode) {
        mergeLayoutParam$1(option, inputPositionParams, layoutMode);
      }
    },
    mergeOption: function (newSeriesOption, ecModel) {
      // this.settingTask.dirty();
      newSeriesOption = util.merge(this.option, newSeriesOption, true);
      this.fillDataTextStyle(newSeriesOption.data);
      var layoutMode = this.layoutMode;

      if (layoutMode) {
        mergeLayoutParam$1(this.option, newSeriesOption, layoutMode);
      }

      prepareSource$1(this);
      var data = this.getInitialData(newSeriesOption, ecModel);
      wrapData(data, this);
      this.dataTask.dirty();
      this.dataTask.context.data = data;
      inner$4(this).dataBeforeProcessed = data;
      autoSeriesName(this);
    },
    fillDataTextStyle: function (data) {
      // Default data label emphasis `show`
      // FIXME Tree structure data ?
      // FIXME Performance ?
      if (data && !util.isTypedArray(data)) {
        var props = ['show'];

        for (var i = 0; i < data.length; i++) {
          if (data[i] && data[i].label) {
            model.defaultEmphasis(data[i], 'label', props);
          }
        }
      }
    },

    /**
     * Init a data structure from data related option in series
     * Must be overwritten
     */
    getInitialData: function () {},

    /**
     * Append data to list
     * @param {Object} params
     * @param {Array|TypedArray} params.data
     */
    appendData: function (params) {
      // FIXME ???
      // (1) If data from dataset, forbidden append.
      // (2) support append data of dataset.
      var data = this.getRawData();
      data.appendData(params.data);
    },

    /**
     * Consider some method like `filter`, `map` need make new data,
     * We should make sure that `seriesModel.getData()` get correct
     * data in the stream procedure. So we fetch data from upstream
     * each time `task.perform` called.
     * @param {string} [dataType]
     * @return {module:echarts/data/List}
     */
    getData: function (dataType) {
      var task = getCurrentTask(this);

      if (task) {
        var data = task.context.data;
        return dataType == null ? data : data.getLinkedData(dataType);
      } else {
        // When series is not alive (that may happen when click toolbox
        // restore or setOption with not merge mode), series data may
        // be still need to judge animation or something when graphic
        // elements want to know whether fade out.
        return inner$4(this).data;
      }
    },

    /**
     * @param {module:echarts/data/List} data
     */
    setData: function (data) {
      var task = getCurrentTask(this);

      if (task) {
        var context = task.context; // Consider case: filter, data sample.

        if (context.data !== data && task.modifyOutputEnd) {
          task.setOutputEnd(data.count());
        }

        context.outputData = data; // Caution: setData should update context.data,
        // Because getData may be called multiply in a
        // single stage and expect to get the data just
        // set. (For example, AxisProxy, x y both call
        // getData and setDate sequentially).
        // So the context.data should be fetched from
        // upstream each time when a stage starts to be
        // performed.

        if (task !== this.dataTask) {
          context.data = data;
        }
      }

      inner$4(this).data = data;
    },

    /**
     * @see {module:echarts/data/helper/sourceHelper#getSource}
     * @return {module:echarts/data/Source} source
     */
    getSource: function () {
      return getSource$1(this);
    },

    /**
     * Get data before processed
     * @return {module:echarts/data/List}
     */
    getRawData: function () {
      return inner$4(this).dataBeforeProcessed;
    },

    /**
     * Get base axis if has coordinate system and has axis.
     * By default use coordSys.getBaseAxis();
     * Can be overrided for some chart.
     * @return {type} description
     */
    getBaseAxis: function () {
      var coordSys = this.coordinateSystem;
      return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();
    },
    // FIXME

    /**
     * Default tooltip formatter
     *
     * @param {number} dataIndex
     * @param {boolean} [multipleSeries=false]
     * @param {number} [dataType]
     * @param {string} [renderMode='html'] valid values: 'html' and 'richText'.
     *                                     'html' is used for rendering tooltip in extra DOM form, and the result
     *                                     string is used as DOM HTML content.
     *                                     'richText' is used for rendering tooltip in rich text form, for those where
     *                                     DOM operation is not supported.
     * @return {Object} formatted tooltip with `html` and `markers`
     */
    formatTooltip: function (dataIndex, multipleSeries, dataType, renderMode) {
      var series = this;
      renderMode = renderMode || 'html';
      var newLine = renderMode === 'html' ? '<br/>' : '\n';
      var isRichText = renderMode === 'richText';
      var markers = {};
      var markerId = 0;

      function formatArrayValue(value) {
        // ??? TODO refactor these logic.
        // check: category-no-encode-has-axis-data in dataset.html
        var vertially = util.reduce(value, function (vertially, val, idx) {
          var dimItem = data.getDimensionInfo(idx);
          return vertially |= dimItem && dimItem.tooltip !== false && dimItem.displayName != null;
        }, 0);
        var result = [];
        tooltipDims.length ? util.each(tooltipDims, function (dim) {
          setEachItem(retrieveRawValue$2(data, dataIndex, dim), dim);
        }) // By default, all dims is used on tooltip.
        : util.each(value, setEachItem);

        function setEachItem(val, dim) {
          var dimInfo = data.getDimensionInfo(dim); // If `dimInfo.tooltip` is not set, show tooltip.

          if (!dimInfo || dimInfo.otherDims.tooltip === false) {
            return;
          }

          var dimType = dimInfo.type;
          var markName = 'sub' + series.seriesIndex + 'at' + markerId;
          var dimHead = getTooltipMarker$2({
            color: color,
            type: 'subItem',
            renderMode: renderMode,
            markerId: markName
          });
          var dimHeadStr = typeof dimHead === 'string' ? dimHead : dimHead.content;
          var valStr = (vertially ? dimHeadStr + encodeHTML$1(dimInfo.displayName || '-') + ': ' : '') + // FIXME should not format time for raw data?
          encodeHTML$1(dimType === 'ordinal' ? val + '' : dimType === 'time' ? multipleSeries ? '' : formatTime$1('yyyy/MM/dd hh:mm:ss', val) : addCommas$1(val));
          valStr && result.push(valStr);

          if (isRichText) {
            markers[markName] = color;
            ++markerId;
          }
        }

        var newLine = vertially ? isRichText ? '\n' : '<br/>' : '';
        var content = newLine + result.join(newLine || ', ');
        return {
          renderMode: renderMode,
          content: content,
          style: markers
        };
      }

      function formatSingleValue(val) {
        // return encodeHTML(addCommas(val));
        return {
          renderMode: renderMode,
          content: encodeHTML$1(addCommas$1(val)),
          style: markers
        };
      }

      var data = this.getData();
      var tooltipDims = data.mapDimension('defaultedTooltip', true);
      var tooltipDimLen = tooltipDims.length;
      var value = this.getRawValue(dataIndex);
      var isValueArr = util.isArray(value);
      var color = data.getItemVisual(dataIndex, 'color');

      if (util.isObject(color) && color.colorStops) {
        color = (color.colorStops[0] || {}).color;
      }

      color = color || 'transparent'; // Complicated rule for pretty tooltip.

      var formattedValue = tooltipDimLen > 1 || isValueArr && !tooltipDimLen ? formatArrayValue(value) : tooltipDimLen ? formatSingleValue(retrieveRawValue$2(data, dataIndex, tooltipDims[0])) : formatSingleValue(isValueArr ? value[0] : value);
      var content = formattedValue.content;
      var markName = series.seriesIndex + 'at' + markerId;
      var colorEl = getTooltipMarker$2({
        color: color,
        type: 'item',
        renderMode: renderMode,
        markerId: markName
      });
      markers[markName] = color;
      ++markerId;
      var name = data.getName(dataIndex);
      var seriesName = this.name;

      if (!model.isNameSpecified(this)) {
        seriesName = '';
      }

      seriesName = seriesName ? encodeHTML$1(seriesName) + (!multipleSeries ? newLine : ': ') : '';
      var colorStr = typeof colorEl === 'string' ? colorEl : colorEl.content;
      var html = !multipleSeries ? seriesName + colorStr + (name ? encodeHTML$1(name) + ': ' + content : content) : colorStr + seriesName + content;
      return {
        html: html,
        markers: markers
      };
    },

    /**
     * @return {boolean}
     */
    isAnimationEnabled: function () {
      if (env_1.node) {
        return false;
      }

      var animationEnabled = this.getShallow('animation');

      if (animationEnabled) {
        if (this.getData().count() > this.getShallow('animationThreshold')) {
          animationEnabled = false;
        }
      }

      return animationEnabled;
    },
    restoreData: function () {
      this.dataTask.dirty();
    },
    getColorFromPalette: function (name, scope, requestColorNum) {
      var ecModel = this.ecModel; // PENDING

      var color = colorPalette.getColorFromPalette.call(this, name, scope, requestColorNum);

      if (!color) {
        color = ecModel.getColorFromPalette(name, scope, requestColorNum);
      }

      return color;
    },

    /**
     * Use `data.mapDimension(coordDim, true)` instead.
     * @deprecated
     */
    coordDimToDataDim: function (coordDim) {
      return this.getRawData().mapDimension(coordDim, true);
    },

    /**
     * Get progressive rendering count each step
     * @return {number}
     */
    getProgressive: function () {
      return this.get('progressive');
    },

    /**
     * Get progressive rendering count each step
     * @return {number}
     */
    getProgressiveThreshold: function () {
      return this.get('progressiveThreshold');
    },

    /**
     * Get data indices for show tooltip content. See tooltip.
     * @abstract
     * @param {Array.<string>|string} dim
     * @param {Array.<number>} value
     * @param {module:echarts/coord/single/SingleAxis} baseAxis
     * @return {Object} {dataIndices, nestestValue}.
     */
    getAxisTooltipData: null,

    /**
     * See tooltip.
     * @abstract
     * @param {number} dataIndex
     * @return {Array.<number>} Point of tooltip. null/undefined can be returned.
     */
    getTooltipPosition: null,

    /**
     * @see {module:echarts/stream/Scheduler}
     */
    pipeTask: null,

    /**
     * Convinient for override in extended class.
     * @protected
     * @type {Function}
     */
    preventIncremental: null,

    /**
     * @public
     * @readOnly
     * @type {Object}
     */
    pipelineContext: null
  });
  util.mixin(SeriesModel, dataFormat);
  util.mixin(SeriesModel, colorPalette);
  /**
   * MUST be called after `prepareSource` called
   * Here we need to make auto series, especially for auto legend. But we
   * do not modify series.name in option to avoid side effects.
   */

  function autoSeriesName(seriesModel) {
    // User specified name has higher priority, otherwise it may cause
    // series can not be queried unexpectedly.
    var name = seriesModel.name;

    if (!model.isNameSpecified(seriesModel)) {
      seriesModel.name = getSeriesAutoName(seriesModel) || name;
    }
  }

  function getSeriesAutoName(seriesModel) {
    var data = seriesModel.getRawData();
    var dataDims = data.mapDimension('seriesName', true);
    var nameArr = [];
    util.each(dataDims, function (dataDim) {
      var dimInfo = data.getDimensionInfo(dataDim);
      dimInfo.displayName && nameArr.push(dimInfo.displayName);
    });
    return nameArr.join(' ');
  }

  function dataTaskCount(context) {
    return context.model.getRawData().count();
  }

  function dataTaskReset(context) {
    var seriesModel = context.model;
    seriesModel.setData(seriesModel.getRawData().cloneShallow());
    return dataTaskProgress;
  }

  function dataTaskProgress(param, context) {
    // Avoid repead cloneShallow when data just created in reset.
    if (param.end > context.outputData.count()) {
      context.model.getRawData().cloneShallow(context.outputData);
    }
  } // TODO refactor


  function wrapData(data, seriesModel) {
    util.each(data.CHANGABLE_METHODS, function (methodName) {
      data.wrapMethod(methodName, util.curry(onDataSelfChange, seriesModel));
    });
  }

  function onDataSelfChange(seriesModel) {
    var task = getCurrentTask(seriesModel);

    if (task) {
      // Consider case: filter, selectRange
      task.setOutputEnd(this.count());
    }
  }

  function getCurrentTask(seriesModel) {
    var scheduler = (seriesModel.ecModel || {}).scheduler;
    var pipeline = scheduler && scheduler.getPipeline(seriesModel.uid);

    if (pipeline) {
      // When pipline finished, the currrentTask keep the last
      // task (renderTask).
      var task = pipeline.currentTask;

      if (task) {
        var agentStubMap = task.agentStubMap;

        if (agentStubMap) {
          task = agentStubMap.get(seriesModel.uid);
        }
      }

      return task;
    }
  }

  var _default$14 = SeriesModel;
  var Series = _default$14;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */







  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var Component$1 = function () {
    /**
     * @type {module:zrender/container/Group}
     * @readOnly
     */
    this.group = new Group_1();
    /**
     * @type {string}
     * @readOnly
     */

    this.uid = component.getUID('viewComponent');
  };

  Component$1.prototype = {
    constructor: Component$1,
    init: function (ecModel, api) {},
    render: function (componentModel, ecModel, api, payload) {},
    dispose: function () {},

    /**
     * @param {string} eventType
     * @param {Object} query
     * @param {module:zrender/Element} targetEl
     * @param {Object} packedEvent
     * @return {boolen} Pass only when return `true`.
     */
    filterForExposedEvent: null
  };
  var componentProto = Component$1.prototype;

  componentProto.updateView = componentProto.updateLayout = componentProto.updateVisual = function (seriesModel, ecModel, api, payload) {// Do nothing;
  }; // Enable Component.extend.


  clazz.enableClassExtend(Component$1); // Enable capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.

  clazz.enableClassManagement(Component$1, {
    registerWhenExtend: true
  });
  var _default$15 = Component$1;
  var Component_1 = _default$15;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  var makeInner$5 = model.makeInner;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * @return {string} If large mode changed, return string 'reset';
   */
  function _default$16() {
    var inner = makeInner$5();
    return function (seriesModel) {
      var fields = inner(seriesModel);
      var pipelineContext = seriesModel.pipelineContext;
      var originalLarge = fields.large;
      var originalProgressive = fields.progressiveRender; // FIXME: if the planner works on a filtered series, `pipelineContext` does not
      // exists. See #11611 . Probably we need to modify this structure, see the comment
      // on `performRawSeries` in `Schedular.js`.

      var large = fields.large = pipelineContext && pipelineContext.large;
      var progressive = fields.progressiveRender = pipelineContext && pipelineContext.progressiveRender;
      return !!(originalLarge ^ large || originalProgressive ^ progressive) && 'reset';
    };
  }

  var createRenderPlanner = _default$16;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  var each$b = util.each;













  var createTask$2 = task.createTask;



  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var inner$5 = model.makeInner();
  var renderPlanner = createRenderPlanner();

  function Chart() {
    /**
     * @type {module:zrender/container/Group}
     * @readOnly
     */
    this.group = new Group_1();
    /**
     * @type {string}
     * @readOnly
     */

    this.uid = component.getUID('viewChart');
    this.renderTask = createTask$2({
      plan: renderTaskPlan,
      reset: renderTaskReset
    });
    this.renderTask.context = {
      view: this
    };
  }

  Chart.prototype = {
    type: 'chart',

    /**
     * Init the chart.
     * @param  {module:echarts/model/Global} ecModel
     * @param  {module:echarts/ExtensionAPI} api
     */
    init: function (ecModel, api) {},

    /**
     * Render the chart.
     * @param  {module:echarts/model/Series} seriesModel
     * @param  {module:echarts/model/Global} ecModel
     * @param  {module:echarts/ExtensionAPI} api
     * @param  {Object} payload
     */
    render: function (seriesModel, ecModel, api, payload) {},

    /**
     * Highlight series or specified data item.
     * @param  {module:echarts/model/Series} seriesModel
     * @param  {module:echarts/model/Global} ecModel
     * @param  {module:echarts/ExtensionAPI} api
     * @param  {Object} payload
     */
    highlight: function (seriesModel, ecModel, api, payload) {
      toggleHighlight(seriesModel.getData(), payload, 'emphasis');
    },

    /**
     * Downplay series or specified data item.
     * @param  {module:echarts/model/Series} seriesModel
     * @param  {module:echarts/model/Global} ecModel
     * @param  {module:echarts/ExtensionAPI} api
     * @param  {Object} payload
     */
    downplay: function (seriesModel, ecModel, api, payload) {
      toggleHighlight(seriesModel.getData(), payload, 'normal');
    },

    /**
     * Remove self.
     * @param  {module:echarts/model/Global} ecModel
     * @param  {module:echarts/ExtensionAPI} api
     */
    remove: function (ecModel, api) {
      this.group.removeAll();
    },

    /**
     * Dispose self.
     * @param  {module:echarts/model/Global} ecModel
     * @param  {module:echarts/ExtensionAPI} api
     */
    dispose: function () {},

    /**
     * Rendering preparation in progressive mode.
     * @param  {module:echarts/model/Series} seriesModel
     * @param  {module:echarts/model/Global} ecModel
     * @param  {module:echarts/ExtensionAPI} api
     * @param  {Object} payload
     */
    incrementalPrepareRender: null,

    /**
     * Render in progressive mode.
     * @param  {Object} params See taskParams in `stream/task.js`
     * @param  {module:echarts/model/Series} seriesModel
     * @param  {module:echarts/model/Global} ecModel
     * @param  {module:echarts/ExtensionAPI} api
     * @param  {Object} payload
     */
    incrementalRender: null,

    /**
     * Update transform directly.
     * @param  {module:echarts/model/Series} seriesModel
     * @param  {module:echarts/model/Global} ecModel
     * @param  {module:echarts/ExtensionAPI} api
     * @param  {Object} payload
     * @return {Object} {update: true}
     */
    updateTransform: null,

    /**
     * The view contains the given point.
     * @interface
     * @param {Array.<number>} point
     * @return {boolean}
     */
    // containPoint: function () {}

    /**
     * @param {string} eventType
     * @param {Object} query
     * @param {module:zrender/Element} targetEl
     * @param {Object} packedEvent
     * @return {boolen} Pass only when return `true`.
     */
    filterForExposedEvent: null
  };
  var chartProto = Chart.prototype;

  chartProto.updateView = chartProto.updateLayout = chartProto.updateVisual = function (seriesModel, ecModel, api, payload) {
    this.render(seriesModel, ecModel, api, payload);
  };
  /**
   * Set state of single element
   * @param {module:zrender/Element} el
   * @param {string} state 'normal'|'emphasis'
   * @param {number} highlightDigit
   */


  function elSetState(el, state, highlightDigit) {
    if (el) {
      el.trigger(state, highlightDigit);

      if (el.isGroup // Simple optimize.
      && !graphic.isHighDownDispatcher(el)) {
        for (var i = 0, len = el.childCount(); i < len; i++) {
          elSetState(el.childAt(i), state, highlightDigit);
        }
      }
    }
  }
  /**
   * @param {module:echarts/data/List} data
   * @param {Object} payload
   * @param {string} state 'normal'|'emphasis'
   */


  function toggleHighlight(data, payload, state) {
    var dataIndex = model.queryDataIndex(data, payload);
    var highlightDigit = payload && payload.highlightKey != null ? graphic.getHighlightDigit(payload.highlightKey) : null;

    if (dataIndex != null) {
      each$b(model.normalizeToArray(dataIndex), function (dataIdx) {
        elSetState(data.getItemGraphicEl(dataIdx), state, highlightDigit);
      });
    } else {
      data.eachItemGraphicEl(function (el) {
        elSetState(el, state, highlightDigit);
      });
    }
  } // Enable Chart.extend.


  clazz.enableClassExtend(Chart, ['dispose']); // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.

  clazz.enableClassManagement(Chart, {
    registerWhenExtend: true
  });

  Chart.markUpdateMethod = function (payload, methodName) {
    inner$5(payload).updateMethod = methodName;
  };

  function renderTaskPlan(context) {
    return renderPlanner(context.model);
  }

  function renderTaskReset(context) {
    var seriesModel = context.model;
    var ecModel = context.ecModel;
    var api = context.api;
    var payload = context.payload; // ???! remove updateView updateVisual

    var progressiveRender = seriesModel.pipelineContext.progressiveRender;
    var view = context.view;
    var updateMethod = payload && inner$5(payload).updateMethod;
    var methodName = progressiveRender ? 'incrementalPrepareRender' : updateMethod && view[updateMethod] ? updateMethod // `appendData` is also supported when data amount
    // is less than progressive threshold.
    : 'render';

    if (methodName !== 'render') {
      view[methodName](seriesModel, ecModel, api, payload);
    }

    return progressMethodMap[methodName];
  }

  var progressMethodMap = {
    incrementalPrepareRender: {
      progress: function (params, context) {
        context.view.incrementalRender(params, context.model, context.ecModel, context.api, context.payload);
      }
    },
    render: {
      // Put view.render in `progress` to support appendData. But in this case
      // view.render should not be called in reset, otherwise it will be called
      // twise. Use `forceFirstProgress` to make sure that view.render is called
      // in any cases.
      forceFirstProgress: true,
      progress: function (params, context) {
        context.view.render(context.model, context.ecModel, context.api, context.payload);
      }
    }
  };
  var _default$17 = Chart;
  var Chart_1 = _default$17;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var ORIGIN_METHOD = '\0__throttleOriginMethod';
  var RATE = '\0__throttleRate';
  var THROTTLE_TYPE = '\0__throttleType';
  /**
   * @public
   * @param {(Function)} fn
   * @param {number} [delay=0] Unit: ms.
   * @param {boolean} [debounce=false]
   *        true: If call interval less than `delay`, only the last call works.
   *        false: If call interval less than `delay, call works on fixed rate.
   * @return {(Function)} throttled fn.
   */

  function throttle(fn, delay, debounce) {
    var currCall;
    var lastCall = 0;
    var lastExec = 0;
    var timer = null;
    var diff;
    var scope;
    var args;
    var debounceNextCall;
    delay = delay || 0;

    function exec() {
      lastExec = new Date().getTime();
      timer = null;
      fn.apply(scope, args || []);
    }

    var cb = function () {
      currCall = new Date().getTime();
      scope = this;
      args = arguments;
      var thisDelay = debounceNextCall || delay;
      var thisDebounce = debounceNextCall || debounce;
      debounceNextCall = null;
      diff = currCall - (thisDebounce ? lastCall : lastExec) - thisDelay;
      clearTimeout(timer); // Here we should make sure that: the `exec` SHOULD NOT be called later
      // than a new call of `cb`, that is, preserving the command order. Consider
      // calculating "scale rate" when roaming as an example. When a call of `cb`
      // happens, either the `exec` is called dierectly, or the call is delayed.
      // But the delayed call should never be later than next call of `cb`. Under
      // this assurance, we can simply update view state each time `dispatchAction`
      // triggered by user roaming, but not need to add extra code to avoid the
      // state being "rolled-back".

      if (thisDebounce) {
        timer = setTimeout(exec, thisDelay);
      } else {
        if (diff >= 0) {
          exec();
        } else {
          timer = setTimeout(exec, -diff);
        }
      }

      lastCall = currCall;
    };
    /**
     * Clear throttle.
     * @public
     */


    cb.clear = function () {
      if (timer) {
        clearTimeout(timer);
        timer = null;
      }
    };
    /**
     * Enable debounce once.
     */


    cb.debounceNextCall = function (debounceDelay) {
      debounceNextCall = debounceDelay;
    };

    return cb;
  }
  /**
   * Create throttle method or update throttle rate.
   *
   * @example
   * ComponentView.prototype.render = function () {
   *     ...
   *     throttle.createOrUpdate(
   *         this,
   *         '_dispatchAction',
   *         this.model.get('throttle'),
   *         'fixRate'
   *     );
   * };
   * ComponentView.prototype.remove = function () {
   *     throttle.clear(this, '_dispatchAction');
   * };
   * ComponentView.prototype.dispose = function () {
   *     throttle.clear(this, '_dispatchAction');
   * };
   *
   * @public
   * @param {Object} obj
   * @param {string} fnAttr
   * @param {number} [rate]
   * @param {string} [throttleType='fixRate'] 'fixRate' or 'debounce'
   * @return {Function} throttled function.
   */


  function createOrUpdate(obj, fnAttr, rate, throttleType) {
    var fn = obj[fnAttr];

    if (!fn) {
      return;
    }

    var originFn = fn[ORIGIN_METHOD] || fn;
    var lastThrottleType = fn[THROTTLE_TYPE];
    var lastRate = fn[RATE];

    if (lastRate !== rate || lastThrottleType !== throttleType) {
      if (rate == null || !throttleType) {
        return obj[fnAttr] = originFn;
      }

      fn = obj[fnAttr] = throttle(originFn, rate, throttleType === 'debounce');
      fn[ORIGIN_METHOD] = originFn;
      fn[THROTTLE_TYPE] = throttleType;
      fn[RATE] = rate;
    }

    return fn;
  }
  /**
   * Clear throttle. Example see throttle.createOrUpdate.
   *
   * @public
   * @param {Object} obj
   * @param {string} fnAttr
   */


  function clear(obj, fnAttr) {
    var fn = obj[fnAttr];

    if (fn && fn[ORIGIN_METHOD]) {
      obj[fnAttr] = fn[ORIGIN_METHOD];
    }
  }

  var throttle_2 = throttle;
  var createOrUpdate_1 = createOrUpdate;
  var clear_1 = clear;

  var throttle_1 = {
  	throttle: throttle_2,
  	createOrUpdate: createOrUpdate_1,
  	clear: clear_1
  };

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */





  var isFunction$2 = util.isFunction;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var _default$18 = {
    createOnAllSeries: true,
    performRawSeries: true,
    reset: function (seriesModel, ecModel) {
      var data = seriesModel.getData();
      var colorAccessPath = (seriesModel.visualColorAccessPath || 'itemStyle.color').split('.'); // Set in itemStyle

      var color = seriesModel.get(colorAccessPath);
      var colorCallback = isFunction$2(color) && !(color instanceof Gradient_1) ? color : null; // Default color

      if (!color || colorCallback) {
        color = seriesModel.getColorFromPalette( // TODO series count changed.
        seriesModel.name, null, ecModel.getSeriesCount());
      }

      data.setVisual('color', color);
      var borderColorAccessPath = (seriesModel.visualBorderColorAccessPath || 'itemStyle.borderColor').split('.');
      var borderColor = seriesModel.get(borderColorAccessPath);
      data.setVisual('borderColor', borderColor); // Only visible series has each data be visual encoded

      if (!ecModel.isSeriesFiltered(seriesModel)) {
        if (colorCallback) {
          data.each(function (idx) {
            data.setItemVisual(idx, 'color', colorCallback(seriesModel.getDataParams(idx)));
          });
        } // itemStyle in each data item


        var dataEach = function (data, idx) {
          var itemModel = data.getItemModel(idx);
          var color = itemModel.get(colorAccessPath, true);
          var borderColor = itemModel.get(borderColorAccessPath, true);

          if (color != null) {
            data.setItemVisual(idx, 'color', color);
          }

          if (borderColor != null) {
            data.setItemVisual(idx, 'borderColor', borderColor);
          }
        };

        return {
          dataEach: data.hasItemOption ? dataEach : null
        };
      }
    }
  };
  var seriesColor = _default$18;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * Language: (Simplified) Chinese.
   */
  var _default$19 = {
    legend: {
      selector: {
        all: '全选',
        inverse: '反选'
      }
    },
    toolbox: {
      brush: {
        title: {
          rect: '矩形选择',
          polygon: '圈选',
          lineX: '横向选择',
          lineY: '纵向选择',
          keep: '保持选择',
          clear: '清除选择'
        }
      },
      dataView: {
        title: '数据视图',
        lang: ['数据视图', '关闭', '刷新']
      },
      dataZoom: {
        title: {
          zoom: '区域缩放',
          back: '区域缩放还原'
        }
      },
      magicType: {
        title: {
          line: '切换为折线图',
          bar: '切换为柱状图',
          stack: '切换为堆叠',
          tiled: '切换为平铺'
        }
      },
      restore: {
        title: '还原'
      },
      saveAsImage: {
        title: '保存为图片',
        lang: ['右键另存为图片']
      }
    },
    series: {
      typeNames: {
        pie: '饼图',
        bar: '柱状图',
        line: '折线图',
        scatter: '散点图',
        effectScatter: '涟漪散点图',
        radar: '雷达图',
        tree: '树图',
        treemap: '矩形树图',
        boxplot: '箱型图',
        candlestick: 'K线图',
        k: 'K线图',
        heatmap: '热力图',
        map: '地图',
        parallel: '平行坐标图',
        lines: '线图',
        graph: '关系图',
        sankey: '桑基图',
        funnel: '漏斗图',
        gauge: '仪表盘图',
        pictorialBar: '象形柱图',
        themeRiver: '主题河流图',
        sunburst: '旭日图'
      }
    },
    aria: {
      general: {
        withTitle: '这是一个关于“{title}”的图表。',
        withoutTitle: '这是一个图表，'
      },
      series: {
        single: {
          prefix: '',
          withName: '图表类型是{seriesType}，表示{seriesName}。',
          withoutName: '图表类型是{seriesType}。'
        },
        multiple: {
          prefix: '它由{seriesCount}个图表系列组成。',
          withName: '第{seriesId}个系列是一个表示{seriesName}的{seriesType}，',
          withoutName: '第{seriesId}个系列是一个{seriesType}，',
          separator: {
            middle: '；',
            end: '。'
          }
        }
      },
      data: {
        allData: '其数据是——',
        partialData: '其中，前{displayCnt}项是——',
        withName: '{name}的数据是{value}',
        withoutName: '{value}',
        separator: {
          middle: '，',
          end: ''
        }
      }
    }
  };
  var lang = _default$19;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */







  var retrieveRawValue$3 = dataProvider.retrieveRawValue;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  function _default$1a(dom, ecModel) {
    var ariaModel = ecModel.getModel('aria');

    if (!ariaModel.get('show')) {
      return;
    } else if (ariaModel.get('description')) {
      dom.setAttribute('aria-label', ariaModel.get('description'));
      return;
    }

    var seriesCnt = 0;
    ecModel.eachSeries(function (seriesModel, idx) {
      ++seriesCnt;
    }, this);
    var maxDataCnt = ariaModel.get('data.maxCount') || 10;
    var maxSeriesCnt = ariaModel.get('series.maxCount') || 10;
    var displaySeriesCnt = Math.min(seriesCnt, maxSeriesCnt);
    var ariaLabel;

    if (seriesCnt < 1) {
      // No series, no aria label
      return;
    } else {
      var title = getTitle();

      if (title) {
        ariaLabel = replace(getConfig('general.withTitle'), {
          title: title
        });
      } else {
        ariaLabel = getConfig('general.withoutTitle');
      }

      var seriesLabels = [];
      var prefix = seriesCnt > 1 ? 'series.multiple.prefix' : 'series.single.prefix';
      ariaLabel += replace(getConfig(prefix), {
        seriesCount: seriesCnt
      });
      ecModel.eachSeries(function (seriesModel, idx) {
        if (idx < displaySeriesCnt) {
          var seriesLabel;
          var seriesName = seriesModel.get('name');
          var seriesTpl = 'series.' + (seriesCnt > 1 ? 'multiple' : 'single') + '.';
          seriesLabel = getConfig(seriesName ? seriesTpl + 'withName' : seriesTpl + 'withoutName');
          seriesLabel = replace(seriesLabel, {
            seriesId: seriesModel.seriesIndex,
            seriesName: seriesModel.get('name'),
            seriesType: getSeriesTypeName(seriesModel.subType)
          });
          var data = seriesModel.getData();
          window.data = data;

          if (data.count() > maxDataCnt) {
            // Show part of data
            seriesLabel += replace(getConfig('data.partialData'), {
              displayCnt: maxDataCnt
            });
          } else {
            seriesLabel += getConfig('data.allData');
          }

          var dataLabels = [];

          for (var i = 0; i < data.count(); i++) {
            if (i < maxDataCnt) {
              var name = data.getName(i);
              var value = retrieveRawValue$3(data, i);
              dataLabels.push(replace(name ? getConfig('data.withName') : getConfig('data.withoutName'), {
                name: name,
                value: value
              }));
            }
          }

          seriesLabel += dataLabels.join(getConfig('data.separator.middle')) + getConfig('data.separator.end');
          seriesLabels.push(seriesLabel);
        }
      });
      ariaLabel += seriesLabels.join(getConfig('series.multiple.separator.middle')) + getConfig('series.multiple.separator.end');
      dom.setAttribute('aria-label', ariaLabel);
    }

    function replace(str, keyValues) {
      if (typeof str !== 'string') {
        return str;
      }

      var result = str;
      util.each(keyValues, function (value, key) {
        result = result.replace(new RegExp('\\{\\s*' + key + '\\s*\\}', 'g'), value);
      });
      return result;
    }

    function getConfig(path) {
      var userConfig = ariaModel.get(path);

      if (userConfig == null) {
        var pathArr = path.split('.');
        var result = lang.aria;

        for (var i = 0; i < pathArr.length; ++i) {
          result = result[pathArr[i]];
        }

        return result;
      } else {
        return userConfig;
      }
    }

    function getTitle() {
      var title = ecModel.getModel('title').option;

      if (title && title.length) {
        title = title[0];
      }

      return title && title.text;
    }

    function getSeriesTypeName(type) {
      return lang.series.typeNames[type] || '自定义图';
    }
  }

  var aria = _default$1a;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */





  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var PI$1 = Math.PI;
  /**
   * @param {module:echarts/ExtensionAPI} api
   * @param {Object} [opts]
   * @param {string} [opts.text]
   * @param {string} [opts.color]
   * @param {string} [opts.textColor]
   * @return {module:zrender/Element}
   */

  function _default$1b(api, opts) {
    opts = opts || {};
    util.defaults(opts, {
      text: 'loading',
      color: '#c23531',
      textColor: '#000',
      maskColor: 'rgba(255, 255, 255, 0.8)',
      zlevel: 0
    });
    var mask = new graphic.Rect({
      style: {
        fill: opts.maskColor
      },
      zlevel: opts.zlevel,
      z: 10000
    });
    var arc = new graphic.Arc({
      shape: {
        startAngle: -PI$1 / 2,
        endAngle: -PI$1 / 2 + 0.1,
        r: 10
      },
      style: {
        stroke: opts.color,
        lineCap: 'round',
        lineWidth: 5
      },
      zlevel: opts.zlevel,
      z: 10001
    });
    var labelRect = new graphic.Rect({
      style: {
        fill: 'none',
        text: opts.text,
        textPosition: 'right',
        textDistance: 10,
        textFill: opts.textColor
      },
      zlevel: opts.zlevel,
      z: 10001
    });
    arc.animateShape(true).when(1000, {
      endAngle: PI$1 * 3 / 2
    }).start('circularInOut');
    arc.animateShape(true).when(1000, {
      startAngle: PI$1 * 3 / 2
    }).delay(300).start('circularInOut');
    var group = new graphic.Group();
    group.add(arc);
    group.add(labelRect);
    group.add(mask); // Inject resize

    group.resize = function () {
      var cx = api.getWidth() / 2;
      var cy = api.getHeight() / 2;
      arc.setShape({
        cx: cx,
        cy: cy
      });
      var r = arc.shape.r;
      labelRect.setShape({
        x: cx - r,
        y: cy - r,
        width: r * 2,
        height: r * 2
      });
      mask.setShape({
        x: 0,
        y: 0,
        width: api.getWidth(),
        height: api.getHeight()
      });
    };

    group.resize();
    return group;
  }

  var _default_1 = _default$1b;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  var each$c = util.each;
  var map$4 = util.map;
  var isFunction$3 = util.isFunction;
  var createHashMap$5 = util.createHashMap;
  var noop$1 = util.noop;



  var createTask$3 = task.createTask;



  var getUID$1 = component.getUID;







  var normalizeToArray$3 = model.normalizeToArray;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * @module echarts/stream/Scheduler
   */

  /**
   * @constructor
   */
  function Scheduler(ecInstance, api, dataProcessorHandlers, visualHandlers) {
    this.ecInstance = ecInstance;
    this.api = api;
    this.unfinished; // Fix current processors in case that in some rear cases that
    // processors might be registered after echarts instance created.
    // Register processors incrementally for a echarts instance is
    // not supported by this stream architecture.

    var dataProcessorHandlers = this._dataProcessorHandlers = dataProcessorHandlers.slice();
    var visualHandlers = this._visualHandlers = visualHandlers.slice();
    this._allHandlers = dataProcessorHandlers.concat(visualHandlers);
    /**
     * @private
     * @type {
     *     [handlerUID: string]: {
     *         seriesTaskMap?: {
     *             [seriesUID: string]: Task
     *         },
     *         overallTask?: Task
     *     }
     * }
     */

    this._stageTaskMap = createHashMap$5();
  }

  var proto = Scheduler.prototype;
  /**
   * @param {module:echarts/model/Global} ecModel
   * @param {Object} payload
   */

  proto.restoreData = function (ecModel, payload) {
    // TODO: Only restroe needed series and components, but not all components.
    // Currently `restoreData` of all of the series and component will be called.
    // But some independent components like `title`, `legend`, `graphic`, `toolbox`,
    // `tooltip`, `axisPointer`, etc, do not need series refresh when `setOption`,
    // and some components like coordinate system, axes, dataZoom, visualMap only
    // need their target series refresh.
    // (1) If we are implementing this feature some day, we should consider these cases:
    // if a data processor depends on a component (e.g., dataZoomProcessor depends
    // on the settings of `dataZoom`), it should be re-performed if the component
    // is modified by `setOption`.
    // (2) If a processor depends on sevral series, speicified by its `getTargetSeries`,
    // it should be re-performed when the result array of `getTargetSeries` changed.
    // We use `dependencies` to cover these issues.
    // (3) How to update target series when coordinate system related components modified.
    // TODO: simply the dirty mechanism? Check whether only the case here can set tasks dirty,
    // and this case all of the tasks will be set as dirty.
    ecModel.restoreData(payload); // Theoretically an overall task not only depends on each of its target series, but also
    // depends on all of the series.
    // The overall task is not in pipeline, and `ecModel.restoreData` only set pipeline tasks
    // dirty. If `getTargetSeries` of an overall task returns nothing, we should also ensure
    // that the overall task is set as dirty and to be performed, otherwise it probably cause
    // state chaos. So we have to set dirty of all of the overall tasks manually, otherwise it
    // probably cause state chaos (consider `dataZoomProcessor`).

    this._stageTaskMap.each(function (taskRecord) {
      var overallTask = taskRecord.overallTask;
      overallTask && overallTask.dirty();
    });
  }; // If seriesModel provided, incremental threshold is check by series data.


  proto.getPerformArgs = function (task, isBlock) {
    // For overall task
    if (!task.__pipeline) {
      return;
    }

    var pipeline = this._pipelineMap.get(task.__pipeline.id);

    var pCtx = pipeline.context;
    var incremental = !isBlock && pipeline.progressiveEnabled && (!pCtx || pCtx.progressiveRender) && task.__idxInPipeline > pipeline.blockIndex;
    var step = incremental ? pipeline.step : null;
    var modDataCount = pCtx && pCtx.modDataCount;
    var modBy = modDataCount != null ? Math.ceil(modDataCount / step) : null;
    return {
      step: step,
      modBy: modBy,
      modDataCount: modDataCount
    };
  };

  proto.getPipeline = function (pipelineId) {
    return this._pipelineMap.get(pipelineId);
  };
  /**
   * Current, progressive rendering starts from visual and layout.
   * Always detect render mode in the same stage, avoiding that incorrect
   * detection caused by data filtering.
   * Caution:
   * `updateStreamModes` use `seriesModel.getData()`.
   */


  proto.updateStreamModes = function (seriesModel, view) {
    var pipeline = this._pipelineMap.get(seriesModel.uid);

    var data = seriesModel.getData();
    var dataLen = data.count(); // `progressiveRender` means that can render progressively in each
    // animation frame. Note that some types of series do not provide
    // `view.incrementalPrepareRender` but support `chart.appendData`. We
    // use the term `incremental` but not `progressive` to describe the
    // case that `chart.appendData`.

    var progressiveRender = pipeline.progressiveEnabled && view.incrementalPrepareRender && dataLen >= pipeline.threshold;
    var large = seriesModel.get('large') && dataLen >= seriesModel.get('largeThreshold'); // TODO: modDataCount should not updated if `appendData`, otherwise cause whole repaint.
    // see `test/candlestick-large3.html`

    var modDataCount = seriesModel.get('progressiveChunkMode') === 'mod' ? dataLen : null;
    seriesModel.pipelineContext = pipeline.context = {
      progressiveRender: progressiveRender,
      modDataCount: modDataCount,
      large: large
    };
  };

  proto.restorePipelines = function (ecModel) {
    var scheduler = this;
    var pipelineMap = scheduler._pipelineMap = createHashMap$5();
    ecModel.eachSeries(function (seriesModel) {
      var progressive = seriesModel.getProgressive();
      var pipelineId = seriesModel.uid;
      pipelineMap.set(pipelineId, {
        id: pipelineId,
        head: null,
        tail: null,
        threshold: seriesModel.getProgressiveThreshold(),
        progressiveEnabled: progressive && !(seriesModel.preventIncremental && seriesModel.preventIncremental()),
        blockIndex: -1,
        step: Math.round(progressive || 700),
        count: 0
      });
      pipe(scheduler, seriesModel, seriesModel.dataTask);
    });
  };

  proto.prepareStageTasks = function () {
    var stageTaskMap = this._stageTaskMap;
    var ecModel = this.ecInstance.getModel();
    var api = this.api;
    each$c(this._allHandlers, function (handler) {
      var record = stageTaskMap.get(handler.uid) || stageTaskMap.set(handler.uid, []);
      handler.reset && createSeriesStageTask(this, handler, record, ecModel, api);
      handler.overallReset && createOverallStageTask(this, handler, record, ecModel, api);
    }, this);
  };

  proto.prepareView = function (view, model, ecModel, api) {
    var renderTask = view.renderTask;
    var context = renderTask.context;
    context.model = model;
    context.ecModel = ecModel;
    context.api = api;
    renderTask.__block = !view.incrementalPrepareRender;
    pipe(this, model, renderTask);
  };

  proto.performDataProcessorTasks = function (ecModel, payload) {
    // If we do not use `block` here, it should be considered when to update modes.
    performStageTasks(this, this._dataProcessorHandlers, ecModel, payload, {
      block: true
    });
  }; // opt
  // opt.visualType: 'visual' or 'layout'
  // opt.setDirty


  proto.performVisualTasks = function (ecModel, payload, opt) {
    performStageTasks(this, this._visualHandlers, ecModel, payload, opt);
  };

  function performStageTasks(scheduler, stageHandlers, ecModel, payload, opt) {
    opt = opt || {};
    var unfinished;
    each$c(stageHandlers, function (stageHandler, idx) {
      if (opt.visualType && opt.visualType !== stageHandler.visualType) {
        return;
      }

      var stageHandlerRecord = scheduler._stageTaskMap.get(stageHandler.uid);

      var seriesTaskMap = stageHandlerRecord.seriesTaskMap;
      var overallTask = stageHandlerRecord.overallTask;

      if (overallTask) {
        var overallNeedDirty;
        var agentStubMap = overallTask.agentStubMap;
        agentStubMap.each(function (stub) {
          if (needSetDirty(opt, stub)) {
            stub.dirty();
            overallNeedDirty = true;
          }
        });
        overallNeedDirty && overallTask.dirty();
        updatePayload(overallTask, payload);
        var performArgs = scheduler.getPerformArgs(overallTask, opt.block); // Execute stubs firstly, which may set the overall task dirty,
        // then execute the overall task. And stub will call seriesModel.setData,
        // which ensures that in the overallTask seriesModel.getData() will not
        // return incorrect data.

        agentStubMap.each(function (stub) {
          stub.perform(performArgs);
        });
        unfinished |= overallTask.perform(performArgs);
      } else if (seriesTaskMap) {
        seriesTaskMap.each(function (task, pipelineId) {
          if (needSetDirty(opt, task)) {
            task.dirty();
          }

          var performArgs = scheduler.getPerformArgs(task, opt.block); // FIXME
          // if intending to decalare `performRawSeries` in handlers, only
          // stream-independent (specifically, data item independent) operations can be
          // performed. Because is a series is filtered, most of the tasks will not
          // be performed. A stream-dependent operation probably cause wrong biz logic.
          // Perhaps we should not provide a separate callback for this case instead
          // of providing the config `performRawSeries`. The stream-dependent operaions
          // and stream-independent operations should better not be mixed.

          performArgs.skip = !stageHandler.performRawSeries && ecModel.isSeriesFiltered(task.context.model);
          updatePayload(task, payload);
          unfinished |= task.perform(performArgs);
        });
      }
    });

    function needSetDirty(opt, task) {
      return opt.setDirty && (!opt.dirtyMap || opt.dirtyMap.get(task.__pipeline.id));
    }

    scheduler.unfinished |= unfinished;
  }

  proto.performSeriesTasks = function (ecModel) {
    var unfinished;
    ecModel.eachSeries(function (seriesModel) {
      // Progress to the end for dataInit and dataRestore.
      unfinished |= seriesModel.dataTask.perform();
    });
    this.unfinished |= unfinished;
  };

  proto.plan = function () {
    // Travel pipelines, check block.
    this._pipelineMap.each(function (pipeline) {
      var task = pipeline.tail;

      do {
        if (task.__block) {
          pipeline.blockIndex = task.__idxInPipeline;
          break;
        }

        task = task.getUpstream();
      } while (task);
    });
  };

  var updatePayload = proto.updatePayload = function (task, payload) {
    payload !== 'remain' && (task.context.payload = payload);
  };

  function createSeriesStageTask(scheduler, stageHandler, stageHandlerRecord, ecModel, api) {
    var seriesTaskMap = stageHandlerRecord.seriesTaskMap || (stageHandlerRecord.seriesTaskMap = createHashMap$5());
    var seriesType = stageHandler.seriesType;
    var getTargetSeries = stageHandler.getTargetSeries; // If a stageHandler should cover all series, `createOnAllSeries` should be declared mandatorily,
    // to avoid some typo or abuse. Otherwise if an extension do not specify a `seriesType`,
    // it works but it may cause other irrelevant charts blocked.

    if (stageHandler.createOnAllSeries) {
      ecModel.eachRawSeries(create);
    } else if (seriesType) {
      ecModel.eachRawSeriesByType(seriesType, create);
    } else if (getTargetSeries) {
      getTargetSeries(ecModel, api).each(create);
    }

    function create(seriesModel) {
      var pipelineId = seriesModel.uid; // Init tasks for each seriesModel only once.
      // Reuse original task instance.

      var task = seriesTaskMap.get(pipelineId) || seriesTaskMap.set(pipelineId, createTask$3({
        plan: seriesTaskPlan,
        reset: seriesTaskReset,
        count: seriesTaskCount
      }));
      task.context = {
        model: seriesModel,
        ecModel: ecModel,
        api: api,
        useClearVisual: stageHandler.isVisual && !stageHandler.isLayout,
        plan: stageHandler.plan,
        reset: stageHandler.reset,
        scheduler: scheduler
      };
      pipe(scheduler, seriesModel, task);
    } // Clear unused series tasks.


    var pipelineMap = scheduler._pipelineMap;
    seriesTaskMap.each(function (task, pipelineId) {
      if (!pipelineMap.get(pipelineId)) {
        task.dispose();
        seriesTaskMap.removeKey(pipelineId);
      }
    });
  }

  function createOverallStageTask(scheduler, stageHandler, stageHandlerRecord, ecModel, api) {
    var overallTask = stageHandlerRecord.overallTask = stageHandlerRecord.overallTask // For overall task, the function only be called on reset stage.
    || createTask$3({
      reset: overallTaskReset
    });
    overallTask.context = {
      ecModel: ecModel,
      api: api,
      overallReset: stageHandler.overallReset,
      scheduler: scheduler
    }; // Reuse orignal stubs.

    var agentStubMap = overallTask.agentStubMap = overallTask.agentStubMap || createHashMap$5();
    var seriesType = stageHandler.seriesType;
    var getTargetSeries = stageHandler.getTargetSeries;
    var overallProgress = true;
    var modifyOutputEnd = stageHandler.modifyOutputEnd; // An overall task with seriesType detected or has `getTargetSeries`, we add
    // stub in each pipelines, it will set the overall task dirty when the pipeline
    // progress. Moreover, to avoid call the overall task each frame (too frequent),
    // we set the pipeline block.

    if (seriesType) {
      ecModel.eachRawSeriesByType(seriesType, createStub);
    } else if (getTargetSeries) {
      getTargetSeries(ecModel, api).each(createStub);
    } // Otherwise, (usually it is legancy case), the overall task will only be
    // executed when upstream dirty. Otherwise the progressive rendering of all
    // pipelines will be disabled unexpectedly. But it still needs stubs to receive
    // dirty info from upsteam.
    else {
        overallProgress = false;
        each$c(ecModel.getSeries(), createStub);
      }

    function createStub(seriesModel) {
      var pipelineId = seriesModel.uid;
      var stub = agentStubMap.get(pipelineId);

      if (!stub) {
        stub = agentStubMap.set(pipelineId, createTask$3({
          reset: stubReset,
          onDirty: stubOnDirty
        })); // When the result of `getTargetSeries` changed, the overallTask
        // should be set as dirty and re-performed.

        overallTask.dirty();
      }

      stub.context = {
        model: seriesModel,
        overallProgress: overallProgress,
        modifyOutputEnd: modifyOutputEnd
      };
      stub.agent = overallTask;
      stub.__block = overallProgress;
      pipe(scheduler, seriesModel, stub);
    } // Clear unused stubs.


    var pipelineMap = scheduler._pipelineMap;
    agentStubMap.each(function (stub, pipelineId) {
      if (!pipelineMap.get(pipelineId)) {
        stub.dispose(); // When the result of `getTargetSeries` changed, the overallTask
        // should be set as dirty and re-performed.

        overallTask.dirty();
        agentStubMap.removeKey(pipelineId);
      }
    });
  }

  function overallTaskReset(context) {
    context.overallReset(context.ecModel, context.api, context.payload);
  }

  function stubReset(context, upstreamContext) {
    return context.overallProgress && stubProgress;
  }

  function stubProgress() {
    this.agent.dirty();
    this.getDownstream().dirty();
  }

  function stubOnDirty() {
    this.agent && this.agent.dirty();
  }

  function seriesTaskPlan(context) {
    return context.plan && context.plan(context.model, context.ecModel, context.api, context.payload);
  }

  function seriesTaskReset(context) {
    if (context.useClearVisual) {
      context.data.clearAllVisual();
    }

    var resetDefines = context.resetDefines = normalizeToArray$3(context.reset(context.model, context.ecModel, context.api, context.payload));
    return resetDefines.length > 1 ? map$4(resetDefines, function (v, idx) {
      return makeSeriesTaskProgress(idx);
    }) : singleSeriesTaskProgress;
  }

  var singleSeriesTaskProgress = makeSeriesTaskProgress(0);

  function makeSeriesTaskProgress(resetDefineIdx) {
    return function (params, context) {
      var data = context.data;
      var resetDefine = context.resetDefines[resetDefineIdx];

      if (resetDefine && resetDefine.dataEach) {
        for (var i = params.start; i < params.end; i++) {
          resetDefine.dataEach(data, i);
        }
      } else if (resetDefine && resetDefine.progress) {
        resetDefine.progress(params, data);
      }
    };
  }

  function seriesTaskCount(context) {
    return context.data.count();
  }

  function pipe(scheduler, seriesModel, task) {
    var pipelineId = seriesModel.uid;

    var pipeline = scheduler._pipelineMap.get(pipelineId);

    !pipeline.head && (pipeline.head = task);
    pipeline.tail && pipeline.tail.pipe(task);
    pipeline.tail = task;
    task.__idxInPipeline = pipeline.count++;
    task.__pipeline = pipeline;
  }

  Scheduler.wrapStageHandler = function (stageHandler, visualType) {
    if (isFunction$3(stageHandler)) {
      stageHandler = {
        overallReset: stageHandler,
        seriesType: detectSeriseType(stageHandler)
      };
    }

    stageHandler.uid = getUID$1('stageHandler');
    visualType && (stageHandler.visualType = visualType);
    return stageHandler;
  };
  /**
   * Only some legacy stage handlers (usually in echarts extensions) are pure function.
   * To ensure that they can work normally, they should work in block mode, that is,
   * they should not be started util the previous tasks finished. So they cause the
   * progressive rendering disabled. We try to detect the series type, to narrow down
   * the block range to only the series type they concern, but not all series.
   */


  function detectSeriseType(legacyFunc) {
    seriesType = null;

    try {
      // Assume there is no async when calling `eachSeriesByType`.
      legacyFunc(ecModelMock, apiMock);
    } catch (e) {}

    return seriesType;
  }

  var ecModelMock = {};
  var apiMock = {};
  var seriesType;
  mockMethods(ecModelMock, Global);
  mockMethods(apiMock, ExtensionAPI_1);

  ecModelMock.eachSeriesByType = ecModelMock.eachRawSeriesByType = function (type) {
    seriesType = type;
  };

  ecModelMock.eachComponent = function (cond) {
    if (cond.mainType === 'series' && cond.subType) {
      seriesType = cond.subType;
    }
  };

  function mockMethods(target, Clz) {
    /* eslint-disable */
    for (var name in Clz.prototype) {
      // Do not use hasOwnProperty
      target[name] = noop$1;
    }
    /* eslint-enable */

  }

  var _default$1c = Scheduler;
  var Scheduler_1 = _default$1c;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var colorAll = ['#37A2DA', '#32C5E9', '#67E0E3', '#9FE6B8', '#FFDB5C', '#ff9f7f', '#fb7293', '#E062AE', '#E690D1', '#e7bcf3', '#9d96f5', '#8378EA', '#96BFFF'];
  var _default$1d = {
    color: colorAll,
    colorLayer: [['#37A2DA', '#ffd85c', '#fd7b5f'], ['#37A2DA', '#67E0E3', '#FFDB5C', '#ff9f7f', '#E062AE', '#9d96f5'], ['#37A2DA', '#32C5E9', '#9FE6B8', '#FFDB5C', '#ff9f7f', '#fb7293', '#e7bcf3', '#8378EA', '#96BFFF'], colorAll]
  };
  var light = _default$1d;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var contrastColor = '#eee';

  var axisCommon = function () {
    return {
      axisLine: {
        lineStyle: {
          color: contrastColor
        }
      },
      axisTick: {
        lineStyle: {
          color: contrastColor
        }
      },
      axisLabel: {
        textStyle: {
          color: contrastColor
        }
      },
      splitLine: {
        lineStyle: {
          type: 'dashed',
          color: '#aaa'
        }
      },
      splitArea: {
        areaStyle: {
          color: contrastColor
        }
      }
    };
  };

  var colorPalette$1 = ['#dd6b66', '#759aa0', '#e69d87', '#8dc1a9', '#ea7e53', '#eedd78', '#73a373', '#73b9bc', '#7289ab', '#91ca8c', '#f49f42'];
  var theme = {
    color: colorPalette$1,
    backgroundColor: '#333',
    tooltip: {
      axisPointer: {
        lineStyle: {
          color: contrastColor
        },
        crossStyle: {
          color: contrastColor
        },
        label: {
          color: '#000'
        }
      }
    },
    legend: {
      textStyle: {
        color: contrastColor
      }
    },
    textStyle: {
      color: contrastColor
    },
    title: {
      textStyle: {
        color: contrastColor
      }
    },
    toolbox: {
      iconStyle: {
        normal: {
          borderColor: contrastColor
        }
      }
    },
    dataZoom: {
      textStyle: {
        color: contrastColor
      }
    },
    visualMap: {
      textStyle: {
        color: contrastColor
      }
    },
    timeline: {
      lineStyle: {
        color: contrastColor
      },
      itemStyle: {
        normal: {
          color: colorPalette$1[1]
        }
      },
      label: {
        normal: {
          textStyle: {
            color: contrastColor
          }
        }
      },
      controlStyle: {
        normal: {
          color: contrastColor,
          borderColor: contrastColor
        }
      }
    },
    timeAxis: axisCommon(),
    logAxis: axisCommon(),
    valueAxis: axisCommon(),
    categoryAxis: axisCommon(),
    line: {
      symbol: 'circle'
    },
    graph: {
      color: colorPalette$1
    },
    gauge: {
      title: {
        textStyle: {
          color: contrastColor
        }
      }
    },
    candlestick: {
      itemStyle: {
        normal: {
          color: '#FD1050',
          color0: '#0CF49B',
          borderColor: '#FD1050',
          borderColor0: '#0CF49B'
        }
      }
    }
  };
  theme.categoryAxis.splitLine.show = false;
  var _default$1e = theme;
  var dark = _default$1e;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */







  var detectSourceFormat$1 = sourceHelper.detectSourceFormat;



  var SERIES_LAYOUT_BY_COLUMN$2 = sourceType.SERIES_LAYOUT_BY_COLUMN;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * This module is imported by echarts directly.
   *
   * Notice:
   * Always keep this file exists for backward compatibility.
   * Because before 4.1.0, dataset is an optional component,
   * some users may import this module manually.
   */
  Component.extend({
    type: 'dataset',

    /**
     * @protected
     */
    defaultOption: {
      // 'row', 'column'
      seriesLayoutBy: SERIES_LAYOUT_BY_COLUMN$2,
      // null/'auto': auto detect header, see "module:echarts/data/helper/sourceHelper"
      sourceHeader: null,
      dimensions: null,
      source: null
    },
    optionUpdated: function () {
      detectSourceFormat$1(this);
    }
  });
  Component_1.extend({
    type: 'dataset'
  });

  /**
   * 椭圆形状
   * @module zrender/graphic/shape/Ellipse
   */
  var _default$1f = Path_1.extend({
    type: 'ellipse',
    shape: {
      cx: 0,
      cy: 0,
      rx: 0,
      ry: 0
    },
    buildPath: function (ctx, shape) {
      var k = 0.5522848;
      var x = shape.cx;
      var y = shape.cy;
      var a = shape.rx;
      var b = shape.ry;
      var ox = a * k; // 水平控制点偏移量

      var oy = b * k; // 垂直控制点偏移量
      // 从椭圆的左端点开始顺时针绘制四条三次贝塞尔曲线

      ctx.moveTo(x - a, y);
      ctx.bezierCurveTo(x - a, y - oy, x - ox, y - b, x, y - b);
      ctx.bezierCurveTo(x + ox, y - b, x + a, y - oy, x + a, y);
      ctx.bezierCurveTo(x + a, y + oy, x + ox, y + b, x, y + b);
      ctx.bezierCurveTo(x - ox, y + b, x - a, y + oy, x - a, y);
      ctx.closePath();
    }
  });

  var Ellipse = _default$1f;

  var createFromString$1 = path$1.createFromString;



  var isString$5 = util.isString;
  var extend$5 = util.extend;
  var defaults$1 = util.defaults;
  var trim$2 = util.trim;
  var each$d = util.each;
  // import RadialGradient from '../graphic/RadialGradient';
  // import Pattern from '../graphic/Pattern';
  // import * as vector from '../core/vector';
  // Most of the values can be separated by comma and/or white space.
  var DILIMITER_REG = /[\s,]+/;
  /**
   * For big svg string, this method might be time consuming.
   *
   * @param {string} svg xml string
   * @return {Object} xml root.
   */

  function parseXML(svg) {
    if (isString$5(svg)) {
      var parser = new DOMParser();
      svg = parser.parseFromString(svg, 'text/xml');
    } // Document node. If using $.get, doc node may be input.


    if (svg.nodeType === 9) {
      svg = svg.firstChild;
    } // nodeName of <!DOCTYPE svg> is also 'svg'.


    while (svg.nodeName.toLowerCase() !== 'svg' || svg.nodeType !== 1) {
      svg = svg.nextSibling;
    }

    return svg;
  }

  function SVGParser() {
    this._defs = {};
    this._root = null;
    this._isDefine = false;
    this._isText = false;
  }

  SVGParser.prototype.parse = function (xml, opt) {
    opt = opt || {};
    var svg = parseXML(xml);

    if (!svg) {
      throw new Error('Illegal svg');
    }

    var root = new Group_1();
    this._root = root; // parse view port

    var viewBox = svg.getAttribute('viewBox') || ''; // If width/height not specified, means "100%" of `opt.width/height`.
    // TODO: Other percent value not supported yet.

    var width = parseFloat(svg.getAttribute('width') || opt.width);
    var height = parseFloat(svg.getAttribute('height') || opt.height); // If width/height not specified, set as null for output.

    isNaN(width) && (width = null);
    isNaN(height) && (height = null); // Apply inline style on svg element.

    parseAttributes(svg, root, null, true);
    var child = svg.firstChild;

    while (child) {
      this._parseNode(child, root);

      child = child.nextSibling;
    }

    var viewBoxRect;
    var viewBoxTransform;

    if (viewBox) {
      var viewBoxArr = trim$2(viewBox).split(DILIMITER_REG); // Some invalid case like viewBox: 'none'.

      if (viewBoxArr.length >= 4) {
        viewBoxRect = {
          x: parseFloat(viewBoxArr[0] || 0),
          y: parseFloat(viewBoxArr[1] || 0),
          width: parseFloat(viewBoxArr[2]),
          height: parseFloat(viewBoxArr[3])
        };
      }
    }

    if (viewBoxRect && width != null && height != null) {
      viewBoxTransform = makeViewBoxTransform(viewBoxRect, width, height);

      if (!opt.ignoreViewBox) {
        // If set transform on the output group, it probably bring trouble when
        // some users only intend to show the clipped content inside the viewBox,
        // but not intend to transform the output group. So we keep the output
        // group no transform. If the user intend to use the viewBox as a
        // camera, just set `opt.ignoreViewBox` as `true` and set transfrom
        // manually according to the viewBox info in the output of this method.
        var elRoot = root;
        root = new Group_1();
        root.add(elRoot);
        elRoot.scale = viewBoxTransform.scale.slice();
        elRoot.position = viewBoxTransform.position.slice();
      }
    } // Some shapes might be overflow the viewport, which should be
    // clipped despite whether the viewBox is used, as the SVG does.


    if (!opt.ignoreRootClip && width != null && height != null) {
      root.setClipPath(new Rect({
        shape: {
          x: 0,
          y: 0,
          width: width,
          height: height
        }
      }));
    } // Set width/height on group just for output the viewport size.


    return {
      root: root,
      width: width,
      height: height,
      viewBoxRect: viewBoxRect,
      viewBoxTransform: viewBoxTransform
    };
  };

  SVGParser.prototype._parseNode = function (xmlNode, parentGroup) {
    var nodeName = xmlNode.nodeName.toLowerCase(); // TODO
    // support <style>...</style> in svg, where nodeName is 'style',
    // CSS classes is defined globally wherever the style tags are declared.

    if (nodeName === 'defs') {
      // define flag
      this._isDefine = true;
    } else if (nodeName === 'text') {
      this._isText = true;
    }

    var el;

    if (this._isDefine) {
      var parser = defineParsers[nodeName];

      if (parser) {
        var def = parser.call(this, xmlNode);
        var id = xmlNode.getAttribute('id');

        if (id) {
          this._defs[id] = def;
        }
      }
    } else {
      var parser = nodeParsers[nodeName];

      if (parser) {
        el = parser.call(this, xmlNode, parentGroup);
        parentGroup.add(el);
      }
    }

    var child = xmlNode.firstChild;

    while (child) {
      if (child.nodeType === 1) {
        this._parseNode(child, el);
      } // Is text


      if (child.nodeType === 3 && this._isText) {
        this._parseText(child, el);
      }

      child = child.nextSibling;
    } // Quit define


    if (nodeName === 'defs') {
      this._isDefine = false;
    } else if (nodeName === 'text') {
      this._isText = false;
    }
  };

  SVGParser.prototype._parseText = function (xmlNode, parentGroup) {
    if (xmlNode.nodeType === 1) {
      var dx = xmlNode.getAttribute('dx') || 0;
      var dy = xmlNode.getAttribute('dy') || 0;
      this._textX += parseFloat(dx);
      this._textY += parseFloat(dy);
    }

    var text = new Text_1({
      style: {
        text: xmlNode.textContent,
        transformText: true
      },
      position: [this._textX || 0, this._textY || 0]
    });
    inheritStyle(parentGroup, text);
    parseAttributes(xmlNode, text, this._defs);
    var fontSize = text.style.fontSize;

    if (fontSize && fontSize < 9) {
      // PENDING
      text.style.fontSize = 9;
      text.scale = text.scale || [1, 1];
      text.scale[0] *= fontSize / 9;
      text.scale[1] *= fontSize / 9;
    }

    var rect = text.getBoundingRect();
    this._textX += rect.width;
    parentGroup.add(text);
    return text;
  };

  var nodeParsers = {
    'g': function (xmlNode, parentGroup) {
      var g = new Group_1();
      inheritStyle(parentGroup, g);
      parseAttributes(xmlNode, g, this._defs);
      return g;
    },
    'rect': function (xmlNode, parentGroup) {
      var rect = new Rect();
      inheritStyle(parentGroup, rect);
      parseAttributes(xmlNode, rect, this._defs);
      rect.setShape({
        x: parseFloat(xmlNode.getAttribute('x') || 0),
        y: parseFloat(xmlNode.getAttribute('y') || 0),
        width: parseFloat(xmlNode.getAttribute('width') || 0),
        height: parseFloat(xmlNode.getAttribute('height') || 0)
      }); // console.log(xmlNode.getAttribute('transform'));
      // console.log(rect.transform);

      return rect;
    },
    'circle': function (xmlNode, parentGroup) {
      var circle = new Circle();
      inheritStyle(parentGroup, circle);
      parseAttributes(xmlNode, circle, this._defs);
      circle.setShape({
        cx: parseFloat(xmlNode.getAttribute('cx') || 0),
        cy: parseFloat(xmlNode.getAttribute('cy') || 0),
        r: parseFloat(xmlNode.getAttribute('r') || 0)
      });
      return circle;
    },
    'line': function (xmlNode, parentGroup) {
      var line = new Line();
      inheritStyle(parentGroup, line);
      parseAttributes(xmlNode, line, this._defs);
      line.setShape({
        x1: parseFloat(xmlNode.getAttribute('x1') || 0),
        y1: parseFloat(xmlNode.getAttribute('y1') || 0),
        x2: parseFloat(xmlNode.getAttribute('x2') || 0),
        y2: parseFloat(xmlNode.getAttribute('y2') || 0)
      });
      return line;
    },
    'ellipse': function (xmlNode, parentGroup) {
      var ellipse = new Ellipse();
      inheritStyle(parentGroup, ellipse);
      parseAttributes(xmlNode, ellipse, this._defs);
      ellipse.setShape({
        cx: parseFloat(xmlNode.getAttribute('cx') || 0),
        cy: parseFloat(xmlNode.getAttribute('cy') || 0),
        rx: parseFloat(xmlNode.getAttribute('rx') || 0),
        ry: parseFloat(xmlNode.getAttribute('ry') || 0)
      });
      return ellipse;
    },
    'polygon': function (xmlNode, parentGroup) {
      var points = xmlNode.getAttribute('points');

      if (points) {
        points = parsePoints(points);
      }

      var polygon = new Polygon({
        shape: {
          points: points || []
        }
      });
      inheritStyle(parentGroup, polygon);
      parseAttributes(xmlNode, polygon, this._defs);
      return polygon;
    },
    'polyline': function (xmlNode, parentGroup) {
      var path = new Path_1();
      inheritStyle(parentGroup, path);
      parseAttributes(xmlNode, path, this._defs);
      var points = xmlNode.getAttribute('points');

      if (points) {
        points = parsePoints(points);
      }

      var polyline = new Polyline({
        shape: {
          points: points || []
        }
      });
      return polyline;
    },
    'image': function (xmlNode, parentGroup) {
      var img = new Image$1();
      inheritStyle(parentGroup, img);
      parseAttributes(xmlNode, img, this._defs);
      img.setStyle({
        image: xmlNode.getAttribute('xlink:href'),
        x: xmlNode.getAttribute('x'),
        y: xmlNode.getAttribute('y'),
        width: xmlNode.getAttribute('width'),
        height: xmlNode.getAttribute('height')
      });
      return img;
    },
    'text': function (xmlNode, parentGroup) {
      var x = xmlNode.getAttribute('x') || 0;
      var y = xmlNode.getAttribute('y') || 0;
      var dx = xmlNode.getAttribute('dx') || 0;
      var dy = xmlNode.getAttribute('dy') || 0;
      this._textX = parseFloat(x) + parseFloat(dx);
      this._textY = parseFloat(y) + parseFloat(dy);
      var g = new Group_1();
      inheritStyle(parentGroup, g);
      parseAttributes(xmlNode, g, this._defs);
      return g;
    },
    'tspan': function (xmlNode, parentGroup) {
      var x = xmlNode.getAttribute('x');
      var y = xmlNode.getAttribute('y');

      if (x != null) {
        // new offset x
        this._textX = parseFloat(x);
      }

      if (y != null) {
        // new offset y
        this._textY = parseFloat(y);
      }

      var dx = xmlNode.getAttribute('dx') || 0;
      var dy = xmlNode.getAttribute('dy') || 0;
      var g = new Group_1();
      inheritStyle(parentGroup, g);
      parseAttributes(xmlNode, g, this._defs);
      this._textX += dx;
      this._textY += dy;
      return g;
    },
    'path': function (xmlNode, parentGroup) {
      // TODO svg fill rule
      // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule
      // path.style.globalCompositeOperation = 'xor';
      var d = xmlNode.getAttribute('d') || ''; // Performance sensitive.

      var path = createFromString$1(d);
      inheritStyle(parentGroup, path);
      parseAttributes(xmlNode, path, this._defs);
      return path;
    }
  };
  var defineParsers = {
    'lineargradient': function (xmlNode) {
      var x1 = parseInt(xmlNode.getAttribute('x1') || 0, 10);
      var y1 = parseInt(xmlNode.getAttribute('y1') || 0, 10);
      var x2 = parseInt(xmlNode.getAttribute('x2') || 10, 10);
      var y2 = parseInt(xmlNode.getAttribute('y2') || 0, 10);
      var gradient = new LinearGradient_1(x1, y1, x2, y2);

      _parseGradientColorStops(xmlNode, gradient);

      return gradient;
    },
    'radialgradient': function (xmlNode) {}
  };

  function _parseGradientColorStops(xmlNode, gradient) {
    var stop = xmlNode.firstChild;

    while (stop) {
      if (stop.nodeType === 1) {
        var offset = stop.getAttribute('offset');

        if (offset.indexOf('%') > 0) {
          // percentage
          offset = parseInt(offset, 10) / 100;
        } else if (offset) {
          // number from 0 to 1
          offset = parseFloat(offset);
        } else {
          offset = 0;
        }

        var stopColor = stop.getAttribute('stop-color') || '#000000';
        gradient.addColorStop(offset, stopColor);
      }

      stop = stop.nextSibling;
    }
  }

  function inheritStyle(parent, child) {
    if (parent && parent.__inheritedStyle) {
      if (!child.__inheritedStyle) {
        child.__inheritedStyle = {};
      }

      defaults$1(child.__inheritedStyle, parent.__inheritedStyle);
    }
  }

  function parsePoints(pointsString) {
    var list = trim$2(pointsString).split(DILIMITER_REG);
    var points = [];

    for (var i = 0; i < list.length; i += 2) {
      var x = parseFloat(list[i]);
      var y = parseFloat(list[i + 1]);
      points.push([x, y]);
    }

    return points;
  }

  var attributesMap = {
    'fill': 'fill',
    'stroke': 'stroke',
    'stroke-width': 'lineWidth',
    'opacity': 'opacity',
    'fill-opacity': 'fillOpacity',
    'stroke-opacity': 'strokeOpacity',
    'stroke-dasharray': 'lineDash',
    'stroke-dashoffset': 'lineDashOffset',
    'stroke-linecap': 'lineCap',
    'stroke-linejoin': 'lineJoin',
    'stroke-miterlimit': 'miterLimit',
    'font-family': 'fontFamily',
    'font-size': 'fontSize',
    'font-style': 'fontStyle',
    'font-weight': 'fontWeight',
    'text-align': 'textAlign',
    'alignment-baseline': 'textBaseline'
  };

  function parseAttributes(xmlNode, el, defs, onlyInlineStyle) {
    var zrStyle = el.__inheritedStyle || {};
    var isTextEl = el.type === 'text'; // TODO Shadow

    if (xmlNode.nodeType === 1) {
      parseTransformAttribute(xmlNode, el);
      extend$5(zrStyle, parseStyleAttribute(xmlNode));

      if (!onlyInlineStyle) {
        for (var svgAttrName in attributesMap) {
          if (attributesMap.hasOwnProperty(svgAttrName)) {
            var attrValue = xmlNode.getAttribute(svgAttrName);

            if (attrValue != null) {
              zrStyle[attributesMap[svgAttrName]] = attrValue;
            }
          }
        }
      }
    }

    var elFillProp = isTextEl ? 'textFill' : 'fill';
    var elStrokeProp = isTextEl ? 'textStroke' : 'stroke';
    el.style = el.style || new Style_1();
    var elStyle = el.style;
    zrStyle.fill != null && elStyle.set(elFillProp, getPaint(zrStyle.fill, defs));
    zrStyle.stroke != null && elStyle.set(elStrokeProp, getPaint(zrStyle.stroke, defs));
    each$d(['lineWidth', 'opacity', 'fillOpacity', 'strokeOpacity', 'miterLimit', 'fontSize'], function (propName) {
      var elPropName = propName === 'lineWidth' && isTextEl ? 'textStrokeWidth' : propName;
      zrStyle[propName] != null && elStyle.set(elPropName, parseFloat(zrStyle[propName]));
    });

    if (!zrStyle.textBaseline || zrStyle.textBaseline === 'auto') {
      zrStyle.textBaseline = 'alphabetic';
    }

    if (zrStyle.textBaseline === 'alphabetic') {
      zrStyle.textBaseline = 'bottom';
    }

    if (zrStyle.textAlign === 'start') {
      zrStyle.textAlign = 'left';
    }

    if (zrStyle.textAlign === 'end') {
      zrStyle.textAlign = 'right';
    }

    each$d(['lineDashOffset', 'lineCap', 'lineJoin', 'fontWeight', 'fontFamily', 'fontStyle', 'textAlign', 'textBaseline'], function (propName) {
      zrStyle[propName] != null && elStyle.set(propName, zrStyle[propName]);
    });

    if (zrStyle.lineDash) {
      el.style.lineDash = trim$2(zrStyle.lineDash).split(DILIMITER_REG);
    }

    if (elStyle[elStrokeProp] && elStyle[elStrokeProp] !== 'none') {
      // enable stroke
      el[elStrokeProp] = true;
    }

    el.__inheritedStyle = zrStyle;
  }

  var urlRegex = /url\(\s*#(.*?)\)/;

  function getPaint(str, defs) {
    // if (str === 'none') {
    //     return;
    // }
    var urlMatch = defs && str && str.match(urlRegex);

    if (urlMatch) {
      var url = trim$2(urlMatch[1]);
      var def = defs[url];
      return def;
    }

    return str;
  }

  var transformRegex = /(translate|scale|rotate|skewX|skewY|matrix)\(([\-\s0-9\.e,]*)\)/g;

  function parseTransformAttribute(xmlNode, node) {
    var transform = xmlNode.getAttribute('transform');

    if (transform) {
      transform = transform.replace(/,/g, ' ');
      var m = null;
      var transformOps = [];
      transform.replace(transformRegex, function (str, type, value) {
        transformOps.push(type, value);
      });

      for (var i = transformOps.length - 1; i > 0; i -= 2) {
        var value = transformOps[i];
        var type = transformOps[i - 1];
        m = m || matrix.create();

        switch (type) {
          case 'translate':
            value = trim$2(value).split(DILIMITER_REG);
            matrix.translate(m, m, [parseFloat(value[0]), parseFloat(value[1] || 0)]);
            break;

          case 'scale':
            value = trim$2(value).split(DILIMITER_REG);
            matrix.scale(m, m, [parseFloat(value[0]), parseFloat(value[1] || value[0])]);
            break;

          case 'rotate':
            value = trim$2(value).split(DILIMITER_REG);
            matrix.rotate(m, m, parseFloat(value[0]));
            break;

          case 'skew':
            value = trim$2(value).split(DILIMITER_REG);
            console.warn('Skew transform is not supported yet');
            break;

          case 'matrix':
            var value = trim$2(value).split(DILIMITER_REG);
            m[0] = parseFloat(value[0]);
            m[1] = parseFloat(value[1]);
            m[2] = parseFloat(value[2]);
            m[3] = parseFloat(value[3]);
            m[4] = parseFloat(value[4]);
            m[5] = parseFloat(value[5]);
            break;
        }
      }

      node.setLocalTransform(m);
    }
  } // Value may contain space.


  var styleRegex = /([^\s:;]+)\s*:\s*([^:;]+)/g;

  function parseStyleAttribute(xmlNode) {
    var style = xmlNode.getAttribute('style');
    var result = {};

    if (!style) {
      return result;
    }

    var styleList = {};
    styleRegex.lastIndex = 0;
    var styleRegResult;

    while ((styleRegResult = styleRegex.exec(style)) != null) {
      styleList[styleRegResult[1]] = styleRegResult[2];
    }

    for (var svgAttrName in attributesMap) {
      if (attributesMap.hasOwnProperty(svgAttrName) && styleList[svgAttrName] != null) {
        result[attributesMap[svgAttrName]] = styleList[svgAttrName];
      }
    }

    return result;
  }
  /**
   * @param {Array.<number>} viewBoxRect
   * @param {number} width
   * @param {number} height
   * @return {Object} {scale, position}
   */


  function makeViewBoxTransform(viewBoxRect, width, height) {
    var scaleX = width / viewBoxRect.width;
    var scaleY = height / viewBoxRect.height;
    var scale = Math.min(scaleX, scaleY); // preserveAspectRatio 'xMidYMid'

    var viewBoxScale = [scale, scale];
    var viewBoxPosition = [-(viewBoxRect.x + viewBoxRect.width / 2) * scale + width / 2, -(viewBoxRect.y + viewBoxRect.height / 2) * scale + height / 2];
    return {
      scale: viewBoxScale,
      position: viewBoxPosition
    };
  }
  /**
   * @param {string|XMLElement} xml
   * @param {Object} [opt]
   * @param {number} [opt.width] Default width if svg width not specified or is a percent value.
   * @param {number} [opt.height] Default height if svg height not specified or is a percent value.
   * @param {boolean} [opt.ignoreViewBox]
   * @param {boolean} [opt.ignoreRootClip]
   * @return {Object} result:
   * {
   *     root: Group, The root of the the result tree of zrender shapes,
   *     width: number, the viewport width of the SVG,
   *     height: number, the viewport height of the SVG,
   *     viewBoxRect: {x, y, width, height}, the declared viewBox rect of the SVG, if exists,
   *     viewBoxTransform: the {scale, position} calculated by viewBox and viewport, is exists.
   * }
   */


  function parseSVG(xml, opt) {
    var parser = new SVGParser();
    return parser.parse(xml, opt);
  }

  var parseXML_1 = parseXML;
  var makeViewBoxTransform_1 = makeViewBoxTransform;
  var parseSVG_2 = parseSVG;

  var parseSVG_1 = {
  	parseXML: parseXML_1,
  	makeViewBoxTransform: makeViewBoxTransform_1,
  	parseSVG: parseSVG_2
  };

  var createHashMap$6 = util.createHashMap;
  var isString$6 = util.isString;
  var isArray$6 = util.isArray;
  var each$e = util.each;



  var parseXML$1 = parseSVG_1.parseXML;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var storage = createHashMap$6(); // For minimize the code size of common echarts package,
  // do not put too much logic in this module.

  var _default$1g = {
    // The format of record: see `echarts.registerMap`.
    // Compatible with previous `echarts.registerMap`.
    registerMap: function (mapName, rawGeoJson, rawSpecialAreas) {
      var records;

      if (isArray$6(rawGeoJson)) {
        records = rawGeoJson;
      } else if (rawGeoJson.svg) {
        records = [{
          type: 'svg',
          source: rawGeoJson.svg,
          specialAreas: rawGeoJson.specialAreas
        }];
      } else {
        // Backward compatibility.
        if (rawGeoJson.geoJson && !rawGeoJson.features) {
          rawSpecialAreas = rawGeoJson.specialAreas;
          rawGeoJson = rawGeoJson.geoJson;
        }

        records = [{
          type: 'geoJSON',
          source: rawGeoJson,
          specialAreas: rawSpecialAreas
        }];
      }

      each$e(records, function (record) {
        var type = record.type;
        type === 'geoJson' && (type = record.type = 'geoJSON');
        var parse = parsers[type];
        parse(record);
      });
      return storage.set(mapName, records);
    },
    retrieveMap: function (mapName) {
      return storage.get(mapName);
    }
  };
  var parsers = {
    geoJSON: function (record) {
      var source = record.source;
      record.geoJSON = !isString$6(source) ? source : typeof JSON !== 'undefined' && JSON.parse ? JSON.parse(source) : new Function('return (' + source + ');')();
    },
    // Only perform parse to XML object here, which might be time
    // consiming for large SVG.
    // Although convert XML to zrender element is also time consiming,
    // if we do it here, the clone of zrender elements has to be
    // required. So we do it once for each geo instance, util real
    // performance issues call for optimizing it.
    svg: function (record) {
      record.svgXML = parseXML$1(record.source);
    }
  };
  var mapDataStorage = _default$1g;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  function defaultKeyGetter(item) {
    return item;
  }
  /**
   * @param {Array} oldArr
   * @param {Array} newArr
   * @param {Function} oldKeyGetter
   * @param {Function} newKeyGetter
   * @param {Object} [context] Can be visited by this.context in callback.
   */


  function DataDiffer(oldArr, newArr, oldKeyGetter, newKeyGetter, context) {
    this._old = oldArr;
    this._new = newArr;
    this._oldKeyGetter = oldKeyGetter || defaultKeyGetter;
    this._newKeyGetter = newKeyGetter || defaultKeyGetter;
    this.context = context;
  }

  DataDiffer.prototype = {
    constructor: DataDiffer,

    /**
     * Callback function when add a data
     */
    add: function (func) {
      this._add = func;
      return this;
    },

    /**
     * Callback function when update a data
     */
    update: function (func) {
      this._update = func;
      return this;
    },

    /**
     * Callback function when remove a data
     */
    remove: function (func) {
      this._remove = func;
      return this;
    },
    execute: function () {
      var oldArr = this._old;
      var newArr = this._new;
      var oldDataIndexMap = {};
      var newDataIndexMap = {};
      var oldDataKeyArr = [];
      var newDataKeyArr = [];
      var i;
      initIndexMap(oldArr, oldDataIndexMap, oldDataKeyArr, '_oldKeyGetter', this);
      initIndexMap(newArr, newDataIndexMap, newDataKeyArr, '_newKeyGetter', this);

      for (i = 0; i < oldArr.length; i++) {
        var key = oldDataKeyArr[i];
        var idx = newDataIndexMap[key]; // idx can never be empty array here. see 'set null' logic below.

        if (idx != null) {
          // Consider there is duplicate key (for example, use dataItem.name as key).
          // We should make sure every item in newArr and oldArr can be visited.
          var len = idx.length;

          if (len) {
            len === 1 && (newDataIndexMap[key] = null);
            idx = idx.shift();
          } else {
            newDataIndexMap[key] = null;
          }

          this._update && this._update(idx, i);
        } else {
          this._remove && this._remove(i);
        }
      }

      for (var i = 0; i < newDataKeyArr.length; i++) {
        var key = newDataKeyArr[i];

        if (newDataIndexMap.hasOwnProperty(key)) {
          var idx = newDataIndexMap[key];

          if (idx == null) {
            continue;
          } // idx can never be empty array here. see 'set null' logic above.


          if (!idx.length) {
            this._add && this._add(idx);
          } else {
            for (var j = 0, len = idx.length; j < len; j++) {
              this._add && this._add(idx[j]);
            }
          }
        }
      }
    }
  };

  function initIndexMap(arr, map, keyArr, keyGetterName, dataDiffer) {
    for (var i = 0; i < arr.length; i++) {
      // Add prefix to avoid conflict with Object.prototype.
      var key = '_ec_' + dataDiffer[keyGetterName](arr[i], i);
      var existence = map[key];

      if (existence == null) {
        keyArr.push(key);
        map[key] = i;
      } else {
        if (!existence.length) {
          map[key] = existence = [existence];
        }

        existence.push(i);
      }
    }
  }

  var _default$1h = DataDiffer;
  var DataDiffer_1 = _default$1h;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  var each$f = util.each;
  var createHashMap$7 = util.createHashMap;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var OTHER_DIMENSIONS = createHashMap$7(['tooltip', 'label', 'itemName', 'itemId', 'seriesName']);

  function summarizeDimensions(data) {
    var summary = {};
    var encode = summary.encode = {};
    var notExtraCoordDimMap = createHashMap$7();
    var defaultedLabel = [];
    var defaultedTooltip = []; // See the comment of `List.js#userOutput`.

    var userOutput = summary.userOutput = {
      dimensionNames: data.dimensions.slice(),
      encode: {}
    };
    each$f(data.dimensions, function (dimName) {
      var dimItem = data.getDimensionInfo(dimName);
      var coordDim = dimItem.coordDim;

      if (coordDim) {
        var coordDimIndex = dimItem.coordDimIndex;
        getOrCreateEncodeArr(encode, coordDim)[coordDimIndex] = dimName;

        if (!dimItem.isExtraCoord) {
          notExtraCoordDimMap.set(coordDim, 1); // Use the last coord dim (and label friendly) as default label,
          // because when dataset is used, it is hard to guess which dimension
          // can be value dimension. If both show x, y on label is not look good,
          // and conventionally y axis is focused more.

          if (mayLabelDimType(dimItem.type)) {
            defaultedLabel[0] = dimName;
          } // User output encode do not contain generated coords.
          // And it only has index. User can use index to retrieve value from the raw item array.


          getOrCreateEncodeArr(userOutput.encode, coordDim)[coordDimIndex] = dimItem.index;
        }

        if (dimItem.defaultTooltip) {
          defaultedTooltip.push(dimName);
        }
      }

      OTHER_DIMENSIONS.each(function (v, otherDim) {
        var encodeArr = getOrCreateEncodeArr(encode, otherDim);
        var dimIndex = dimItem.otherDims[otherDim];

        if (dimIndex != null && dimIndex !== false) {
          encodeArr[dimIndex] = dimItem.name;
        }
      });
    });
    var dataDimsOnCoord = [];
    var encodeFirstDimNotExtra = {};
    notExtraCoordDimMap.each(function (v, coordDim) {
      var dimArr = encode[coordDim]; // ??? FIXME extra coord should not be set in dataDimsOnCoord.
      // But should fix the case that radar axes: simplify the logic
      // of `completeDimension`, remove `extraPrefix`.

      encodeFirstDimNotExtra[coordDim] = dimArr[0]; // Not necessary to remove duplicate, because a data
      // dim canot on more than one coordDim.

      dataDimsOnCoord = dataDimsOnCoord.concat(dimArr);
    });
    summary.dataDimsOnCoord = dataDimsOnCoord;
    summary.encodeFirstDimNotExtra = encodeFirstDimNotExtra;
    var encodeLabel = encode.label; // FIXME `encode.label` is not recommanded, because formatter can not be set
    // in this way. Use label.formatter instead. May be remove this approach someday.

    if (encodeLabel && encodeLabel.length) {
      defaultedLabel = encodeLabel.slice();
    }

    var encodeTooltip = encode.tooltip;

    if (encodeTooltip && encodeTooltip.length) {
      defaultedTooltip = encodeTooltip.slice();
    } else if (!defaultedTooltip.length) {
      defaultedTooltip = defaultedLabel.slice();
    }

    encode.defaultedLabel = defaultedLabel;
    encode.defaultedTooltip = defaultedTooltip;
    return summary;
  }

  function getOrCreateEncodeArr(encode, dim) {
    if (!encode.hasOwnProperty(dim)) {
      encode[dim] = [];
    }

    return encode[dim];
  }

  function getDimensionTypeByAxis(axisType) {
    return axisType === 'category' ? 'ordinal' : axisType === 'time' ? 'time' : 'float';
  }

  function mayLabelDimType(dimType) {
    // In most cases, ordinal and time do not suitable for label.
    // Ordinal info can be displayed on axis. Time is too long.
    return !(dimType === 'ordinal' || dimType === 'time');
  } // function findTheLastDimMayLabel(data) {
  //     // Get last value dim
  //     var dimensions = data.dimensions.slice();
  //     var valueType;
  //     var valueDim;
  //     while (dimensions.length && (
  //         valueDim = dimensions.pop(),
  //         valueType = data.getDimensionInfo(valueDim).type,
  //         valueType === 'ordinal' || valueType === 'time'
  //     )) {} // jshint ignore:line
  //     return valueDim;
  // }


  var OTHER_DIMENSIONS_1 = OTHER_DIMENSIONS;
  var summarizeDimensions_1 = summarizeDimensions;
  var getDimensionTypeByAxis_1 = getDimensionTypeByAxis;

  var dimensionHelper = {
  	OTHER_DIMENSIONS: OTHER_DIMENSIONS_1,
  	summarizeDimensions: summarizeDimensions_1,
  	getDimensionTypeByAxis: getDimensionTypeByAxis_1
  };

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * @class
   * @param {Object|DataDimensionInfo} [opt] All of the fields will be shallow copied.
   */
  function DataDimensionInfo(opt) {
    if (opt != null) {
      util.extend(this, opt);
    }
    /**
     * Dimension name.
     * Mandatory.
     * @type {string}
     */
    // this.name;

    /**
     * The origin name in dimsDef, see source helper.
     * If displayName given, the tooltip will displayed vertically.
     * Optional.
     * @type {string}
     */
    // this.displayName;

    /**
     * Which coordSys dimension this dimension mapped to.
     * A `coordDim` can be a "coordSysDim" that the coordSys required
     * (for example, an item in `coordSysDims` of `model/referHelper#CoordSysInfo`),
     * or an generated "extra coord name" if does not mapped to any "coordSysDim"
     * (That is determined by whether `isExtraCoord` is `true`).
     * Mandatory.
     * @type {string}
     */
    // this.coordDim;

    /**
     * The index of this dimension in `series.encode[coordDim]`.
     * Mandatory.
     * @type {number}
     */
    // this.coordDimIndex;

    /**
     * Dimension type. The enumerable values are the key of
     * `dataCtors` of `data/List`.
     * Optional.
     * @type {string}
     */
    // this.type;

    /**
     * This index of this dimension info in `data/List#_dimensionInfos`.
     * Mandatory after added to `data/List`.
     * @type {number}
     */
    // this.index;

    /**
     * The format of `otherDims` is:
     * ```js
     * {
     *     tooltip: number optional,
     *     label: number optional,
     *     itemName: number optional,
     *     seriesName: number optional,
     * }
     * ```
     *
     * A `series.encode` can specified these fields:
     * ```js
     * encode: {
     *     // "3, 1, 5" is the index of data dimension.
     *     tooltip: [3, 1, 5],
     *     label: [0, 3],
     *     ...
     * }
     * ```
     * `otherDims` is the parse result of the `series.encode` above, like:
     * ```js
     * // Suppose the index of this data dimension is `3`.
     * this.otherDims = {
     *     // `3` is at the index `0` of the `encode.tooltip`
     *     tooltip: 0,
     *     // `3` is at the index `1` of the `encode.tooltip`
     *     label: 1
     * };
     * ```
     *
     * This prop should never be `null`/`undefined` after initialized.
     * @type {Object}
     */


    this.otherDims = {};
    /**
     * Be `true` if this dimension is not mapped to any "coordSysDim" that the
     * "coordSys" required.
     * Mandatory.
     * @type {boolean}
     */
    // this.isExtraCoord;

    /**
     * @type {module:data/OrdinalMeta}
     */
    // this.ordinalMeta;

    /**
     * Whether to create inverted indices.
     * @type {boolean}
     */
    // this.createInvertedIndices;
  }
  var _default$1i = DataDimensionInfo;
  var DataDimensionInfo_1 = _default$1i;

  var defaultDimValueGetters$1 = dataProvider.defaultDimValueGetters;
  var DefaultDataProvider$1 = dataProvider.DefaultDataProvider;



  var summarizeDimensions$1 = dimensionHelper.summarizeDimensions;



  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /* global Float64Array, Int32Array, Uint32Array, Uint16Array */

  /**
   * List for data storage
   * @module echarts/data/List
   */
  var isObject$9 = util.isObject;
  var UNDEFINED = 'undefined';
  var INDEX_NOT_FOUND = -1; // Use prefix to avoid index to be the same as otherIdList[idx],
  // which will cause weird udpate animation.

  var ID_PREFIX = 'e\0\0';
  var dataCtors = {
    'float': typeof Float64Array === UNDEFINED ? Array : Float64Array,
    'int': typeof Int32Array === UNDEFINED ? Array : Int32Array,
    // Ordinal data type can be string or int
    'ordinal': Array,
    'number': Array,
    'time': Array
  }; // Caution: MUST not use `new CtorUint32Array(arr, 0, len)`, because the Ctor of array is
  // different from the Ctor of typed array.

  var CtorUint32Array = typeof Uint32Array === UNDEFINED ? Array : Uint32Array;
  var CtorInt32Array = typeof Int32Array === UNDEFINED ? Array : Int32Array;
  var CtorUint16Array = typeof Uint16Array === UNDEFINED ? Array : Uint16Array;

  function getIndicesCtor(list) {
    // The possible max value in this._indicies is always this._rawCount despite of filtering.
    return list._rawCount > 65535 ? CtorUint32Array : CtorUint16Array;
  }

  function cloneChunk(originalChunk) {
    var Ctor = originalChunk.constructor; // Only shallow clone is enough when Array.

    return Ctor === Array ? originalChunk.slice() : new Ctor(originalChunk);
  }

  var TRANSFERABLE_PROPERTIES = ['hasItemOption', '_nameList', '_idList', '_invertedIndicesMap', '_rawData', '_chunkSize', '_chunkCount', '_dimValueGetter', '_count', '_rawCount', '_nameDimIdx', '_idDimIdx'];
  var CLONE_PROPERTIES = ['_extent', '_approximateExtent', '_rawExtent'];

  function transferProperties(target, source) {
    util.each(TRANSFERABLE_PROPERTIES.concat(source.__wrappedMethods || []), function (propName) {
      if (source.hasOwnProperty(propName)) {
        target[propName] = source[propName];
      }
    });
    target.__wrappedMethods = source.__wrappedMethods;
    util.each(CLONE_PROPERTIES, function (propName) {
      target[propName] = util.clone(source[propName]);
    });
    target._calculationInfo = util.extend(source._calculationInfo);
  }
  /**
   * @constructor
   * @alias module:echarts/data/List
   *
   * @param {Array.<string|Object|module:data/DataDimensionInfo>} dimensions
   *      For example, ['someDimName', {name: 'someDimName', type: 'someDimType'}, ...].
   *      Dimensions should be concrete names like x, y, z, lng, lat, angle, radius
   * @param {module:echarts/model/Model} hostModel
   */


  var List = function (dimensions, hostModel) {
    dimensions = dimensions || ['x', 'y'];
    var dimensionInfos = {};
    var dimensionNames = [];
    var invertedIndicesMap = {};

    for (var i = 0; i < dimensions.length; i++) {
      // Use the original dimensions[i], where other flag props may exists.
      var dimensionInfo = dimensions[i];

      if (util.isString(dimensionInfo)) {
        dimensionInfo = new DataDimensionInfo_1({
          name: dimensionInfo
        });
      } else if (!(dimensionInfo instanceof DataDimensionInfo_1)) {
        dimensionInfo = new DataDimensionInfo_1(dimensionInfo);
      }

      var dimensionName = dimensionInfo.name;
      dimensionInfo.type = dimensionInfo.type || 'float';

      if (!dimensionInfo.coordDim) {
        dimensionInfo.coordDim = dimensionName;
        dimensionInfo.coordDimIndex = 0;
      }

      dimensionInfo.otherDims = dimensionInfo.otherDims || {};
      dimensionNames.push(dimensionName);
      dimensionInfos[dimensionName] = dimensionInfo;
      dimensionInfo.index = i;

      if (dimensionInfo.createInvertedIndices) {
        invertedIndicesMap[dimensionName] = [];
      }
    }
    /**
     * @readOnly
     * @type {Array.<string>}
     */


    this.dimensions = dimensionNames;
    /**
     * Infomation of each data dimension, like data type.
     * @type {Object}
     */

    this._dimensionInfos = dimensionInfos;
    /**
     * @type {module:echarts/model/Model}
     */

    this.hostModel = hostModel;
    /**
     * @type {module:echarts/model/Model}
     */

    this.dataType;
    /**
     * Indices stores the indices of data subset after filtered.
     * This data subset will be used in chart.
     * @type {Array.<number>}
     * @readOnly
     */

    this._indices = null;
    this._count = 0;
    this._rawCount = 0;
    /**
     * Data storage
     * @type {Object.<key, Array.<TypedArray|Array>>}
     * @private
     */

    this._storage = {};
    /**
     * @type {Array.<string>}
     */

    this._nameList = [];
    /**
     * @type {Array.<string>}
     */

    this._idList = [];
    /**
     * Models of data option is stored sparse for optimizing memory cost
     * @type {Array.<module:echarts/model/Model>}
     * @private
     */

    this._optionModels = [];
    /**
     * Global visual properties after visual coding
     * @type {Object}
     * @private
     */

    this._visual = {};
    /**
     * Globel layout properties.
     * @type {Object}
     * @private
     */

    this._layout = {};
    /**
     * Item visual properties after visual coding
     * @type {Array.<Object>}
     * @private
     */

    this._itemVisuals = [];
    /**
     * Key: visual type, Value: boolean
     * @type {Object}
     * @readOnly
     */

    this.hasItemVisual = {};
    /**
     * Item layout properties after layout
     * @type {Array.<Object>}
     * @private
     */

    this._itemLayouts = [];
    /**
     * Graphic elemnents
     * @type {Array.<module:zrender/Element>}
     * @private
     */

    this._graphicEls = [];
    /**
     * Max size of each chunk.
     * @type {number}
     * @private
     */

    this._chunkSize = 1e5;
    /**
     * @type {number}
     * @private
     */

    this._chunkCount = 0;
    /**
     * @type {Array.<Array|Object>}
     * @private
     */

    this._rawData;
    /**
     * Raw extent will not be cloned, but only transfered.
     * It will not be calculated util needed.
     * key: dim,
     * value: {end: number, extent: Array.<number>}
     * @type {Object}
     * @private
     */

    this._rawExtent = {};
    /**
     * @type {Object}
     * @private
     */

    this._extent = {};
    /**
     * key: dim
     * value: extent
     * @type {Object}
     * @private
     */

    this._approximateExtent = {};
    /**
     * Cache summary info for fast visit. See "dimensionHelper".
     * @type {Object}
     * @private
     */

    this._dimensionsSummary = summarizeDimensions$1(this);
    /**
     * @type {Object.<Array|TypedArray>}
     * @private
     */

    this._invertedIndicesMap = invertedIndicesMap;
    /**
     * @type {Object}
     * @private
     */

    this._calculationInfo = {};
    /**
     * User output info of this data.
     * DO NOT use it in other places!
     *
     * When preparing user params for user callbacks, we have
     * to clone these inner data structures to prevent users
     * from modifying them to effect built-in logic. And for
     * performance consideration we make this `userOutput` to
     * avoid clone them too many times.
     *
     * @type {Object}
     * @readOnly
     */

    this.userOutput = this._dimensionsSummary.userOutput;
  };

  var listProto = List.prototype;
  listProto.type = 'list';
  /**
   * If each data item has it's own option
   * @type {boolean}
   */

  listProto.hasItemOption = true;
  /**
   * The meanings of the input parameter `dim`:
   *
   * + If dim is a number (e.g., `1`), it means the index of the dimension.
   *   For example, `getDimension(0)` will return 'x' or 'lng' or 'radius'.
   * + If dim is a number-like string (e.g., `"1"`):
   *     + If there is the same concrete dim name defined in `this.dimensions`, it means that concrete name.
   *     + If not, it will be converted to a number, which means the index of the dimension.
   *        (why? because of the backward compatbility. We have been tolerating number-like string in
   *        dimension setting, although now it seems that it is not a good idea.)
   *     For example, `visualMap[i].dimension: "1"` is the same meaning as `visualMap[i].dimension: 1`,
   *     if no dimension name is defined as `"1"`.
   * + If dim is a not-number-like string, it means the concrete dim name.
   *   For example, it can be be default name `"x"`, `"y"`, `"z"`, `"lng"`, `"lat"`, `"angle"`, `"radius"`,
   *   or customized in `dimensions` property of option like `"age"`.
   *
   * Get dimension name
   * @param {string|number} dim See above.
   * @return {string} Concrete dim name.
   */

  listProto.getDimension = function (dim) {
    if (typeof dim === 'number' // If being a number-like string but not being defined a dimension name.
    || !isNaN(dim) && !this._dimensionInfos.hasOwnProperty(dim)) {
      dim = this.dimensions[dim];
    }

    return dim;
  };
  /**
   * Get type and calculation info of particular dimension
   * @param {string|number} dim
   *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius
   *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'
   */


  listProto.getDimensionInfo = function (dim) {
    // Do not clone, because there may be categories in dimInfo.
    return this._dimensionInfos[this.getDimension(dim)];
  };
  /**
   * @return {Array.<string>} concrete dimension name list on coord.
   */


  listProto.getDimensionsOnCoord = function () {
    return this._dimensionsSummary.dataDimsOnCoord.slice();
  };
  /**
   * @param {string} coordDim
   * @param {number} [idx] A coordDim may map to more than one data dim.
   *        If idx is `true`, return a array of all mapped dims.
   *        If idx is not specified, return the first dim not extra.
   * @return {string|Array.<string>} concrete data dim.
   *        If idx is number, and not found, return null/undefined.
   *        If idx is `true`, and not found, return empty array (always return array).
   */


  listProto.mapDimension = function (coordDim, idx) {
    var dimensionsSummary = this._dimensionsSummary;

    if (idx == null) {
      return dimensionsSummary.encodeFirstDimNotExtra[coordDim];
    }

    var dims = dimensionsSummary.encode[coordDim];
    return idx === true // always return array if idx is `true`
    ? (dims || []).slice() : dims && dims[idx];
  };
  /**
   * Initialize from data
   * @param {Array.<Object|number|Array>} data source or data or data provider.
   * @param {Array.<string>} [nameLIst] The name of a datum is used on data diff and
   *        defualt label/tooltip.
   *        A name can be specified in encode.itemName,
   *        or dataItem.name (only for series option data),
   *        or provided in nameList from outside.
   * @param {Function} [dimValueGetter] (dataItem, dimName, dataIndex, dimIndex) => number
   */


  listProto.initData = function (data, nameList, dimValueGetter) {
    var notProvider = Source_1.isInstance(data) || util.isArrayLike(data);

    if (notProvider) {
      data = new DefaultDataProvider$1(data, this.dimensions.length);
    }

    this._rawData = data; // Clear

    this._storage = {};
    this._indices = null;
    this._nameList = nameList || [];
    this._idList = [];
    this._nameRepeatCount = {};

    if (!dimValueGetter) {
      this.hasItemOption = false;
    }
    /**
     * @readOnly
     */


    this.defaultDimValueGetter = defaultDimValueGetters$1[this._rawData.getSource().sourceFormat]; // Default dim value getter

    this._dimValueGetter = dimValueGetter = dimValueGetter || this.defaultDimValueGetter;
    this._dimValueGetterArrayRows = defaultDimValueGetters$1.arrayRows; // Reset raw extent.

    this._rawExtent = {};

    this._initDataFromProvider(0, data.count()); // If data has no item option.


    if (data.pure) {
      this.hasItemOption = false;
    }
  };

  listProto.getProvider = function () {
    return this._rawData;
  };
  /**
   * Caution: Can be only called on raw data (before `this._indices` created).
   */


  listProto.appendData = function (data) {
    var rawData = this._rawData;
    var start = this.count();
    rawData.appendData(data);
    var end = rawData.count();

    if (!rawData.persistent) {
      end += start;
    }

    this._initDataFromProvider(start, end);
  };
  /**
   * Caution: Can be only called on raw data (before `this._indices` created).
   * This method does not modify `rawData` (`dataProvider`), but only
   * add values to storage.
   *
   * The final count will be increased by `Math.max(values.length, names.length)`.
   *
   * @param {Array.<Array.<*>>} values That is the SourceType: 'arrayRows', like
   *        [
   *            [12, 33, 44],
   *            [NaN, 43, 1],
   *            ['-', 'asdf', 0]
   *        ]
   *        Each item is exaclty cooresponding to a dimension.
   * @param {Array.<string>} [names]
   */


  listProto.appendValues = function (values, names) {
    var chunkSize = this._chunkSize;
    var storage = this._storage;
    var dimensions = this.dimensions;
    var dimLen = dimensions.length;
    var rawExtent = this._rawExtent;
    var start = this.count();
    var end = start + Math.max(values.length, names ? names.length : 0);
    var originalChunkCount = this._chunkCount;

    for (var i = 0; i < dimLen; i++) {
      var dim = dimensions[i];

      if (!rawExtent[dim]) {
        rawExtent[dim] = getInitialExtent();
      }

      if (!storage[dim]) {
        storage[dim] = [];
      }

      prepareChunks(storage, this._dimensionInfos[dim], chunkSize, originalChunkCount, end);
      this._chunkCount = storage[dim].length;
    }

    var emptyDataItem = new Array(dimLen);

    for (var idx = start; idx < end; idx++) {
      var sourceIdx = idx - start;
      var chunkIndex = Math.floor(idx / chunkSize);
      var chunkOffset = idx % chunkSize; // Store the data by dimensions

      for (var k = 0; k < dimLen; k++) {
        var dim = dimensions[k];

        var val = this._dimValueGetterArrayRows(values[sourceIdx] || emptyDataItem, dim, sourceIdx, k);

        storage[dim][chunkIndex][chunkOffset] = val;
        var dimRawExtent = rawExtent[dim];
        val < dimRawExtent[0] && (dimRawExtent[0] = val);
        val > dimRawExtent[1] && (dimRawExtent[1] = val);
      }

      if (names) {
        this._nameList[idx] = names[sourceIdx];
      }
    }

    this._rawCount = this._count = end; // Reset data extent

    this._extent = {};
    prepareInvertedIndex(this);
  };

  listProto._initDataFromProvider = function (start, end) {
    // Optimize.
    if (start >= end) {
      return;
    }

    var chunkSize = this._chunkSize;
    var rawData = this._rawData;
    var storage = this._storage;
    var dimensions = this.dimensions;
    var dimLen = dimensions.length;
    var dimensionInfoMap = this._dimensionInfos;
    var nameList = this._nameList;
    var idList = this._idList;
    var rawExtent = this._rawExtent;
    var nameRepeatCount = this._nameRepeatCount = {};
    var nameDimIdx;
    var originalChunkCount = this._chunkCount;

    for (var i = 0; i < dimLen; i++) {
      var dim = dimensions[i];

      if (!rawExtent[dim]) {
        rawExtent[dim] = getInitialExtent();
      }

      var dimInfo = dimensionInfoMap[dim];

      if (dimInfo.otherDims.itemName === 0) {
        nameDimIdx = this._nameDimIdx = i;
      }

      if (dimInfo.otherDims.itemId === 0) {
        this._idDimIdx = i;
      }

      if (!storage[dim]) {
        storage[dim] = [];
      }

      prepareChunks(storage, dimInfo, chunkSize, originalChunkCount, end);
      this._chunkCount = storage[dim].length;
    }

    var dataItem = new Array(dimLen);

    for (var idx = start; idx < end; idx++) {
      // NOTICE: Try not to write things into dataItem
      dataItem = rawData.getItem(idx, dataItem); // Each data item is value
      // [1, 2]
      // 2
      // Bar chart, line chart which uses category axis
      // only gives the 'y' value. 'x' value is the indices of category
      // Use a tempValue to normalize the value to be a (x, y) value

      var chunkIndex = Math.floor(idx / chunkSize);
      var chunkOffset = idx % chunkSize; // Store the data by dimensions

      for (var k = 0; k < dimLen; k++) {
        var dim = dimensions[k];
        var dimStorage = storage[dim][chunkIndex]; // PENDING NULL is empty or zero

        var val = this._dimValueGetter(dataItem, dim, idx, k);

        dimStorage[chunkOffset] = val;
        var dimRawExtent = rawExtent[dim];
        val < dimRawExtent[0] && (dimRawExtent[0] = val);
        val > dimRawExtent[1] && (dimRawExtent[1] = val);
      } // ??? FIXME not check by pure but sourceFormat?
      // TODO refactor these logic.


      if (!rawData.pure) {
        var name = nameList[idx];

        if (dataItem && name == null) {
          // If dataItem is {name: ...}, it has highest priority.
          // That is appropriate for many common cases.
          if (dataItem.name != null) {
            // There is no other place to persistent dataItem.name,
            // so save it to nameList.
            nameList[idx] = name = dataItem.name;
          } else if (nameDimIdx != null) {
            var nameDim = dimensions[nameDimIdx];
            var nameDimChunk = storage[nameDim][chunkIndex];

            if (nameDimChunk) {
              name = nameDimChunk[chunkOffset];
              var ordinalMeta = dimensionInfoMap[nameDim].ordinalMeta;

              if (ordinalMeta && ordinalMeta.categories.length) {
                name = ordinalMeta.categories[name];
              }
            }
          }
        } // Try using the id in option
        // id or name is used on dynamical data, mapping old and new items.


        var id = dataItem == null ? null : dataItem.id;

        if (id == null && name != null) {
          // Use name as id and add counter to avoid same name
          nameRepeatCount[name] = nameRepeatCount[name] || 0;
          id = name;

          if (nameRepeatCount[name] > 0) {
            id += '__ec__' + nameRepeatCount[name];
          }

          nameRepeatCount[name]++;
        }

        id != null && (idList[idx] = id);
      }
    }

    if (!rawData.persistent && rawData.clean) {
      // Clean unused data if data source is typed array.
      rawData.clean();
    }

    this._rawCount = this._count = end; // Reset data extent

    this._extent = {};
    prepareInvertedIndex(this);
  };

  function prepareChunks(storage, dimInfo, chunkSize, chunkCount, end) {
    var DataCtor = dataCtors[dimInfo.type];
    var lastChunkIndex = chunkCount - 1;
    var dim = dimInfo.name;
    var resizeChunkArray = storage[dim][lastChunkIndex];

    if (resizeChunkArray && resizeChunkArray.length < chunkSize) {
      var newStore = new DataCtor(Math.min(end - lastChunkIndex * chunkSize, chunkSize)); // The cost of the copy is probably inconsiderable
      // within the initial chunkSize.

      for (var j = 0; j < resizeChunkArray.length; j++) {
        newStore[j] = resizeChunkArray[j];
      }

      storage[dim][lastChunkIndex] = newStore;
    } // Create new chunks.


    for (var k = chunkCount * chunkSize; k < end; k += chunkSize) {
      storage[dim].push(new DataCtor(Math.min(end - k, chunkSize)));
    }
  }

  function prepareInvertedIndex(list) {
    var invertedIndicesMap = list._invertedIndicesMap;
    util.each(invertedIndicesMap, function (invertedIndices, dim) {
      var dimInfo = list._dimensionInfos[dim]; // Currently, only dimensions that has ordinalMeta can create inverted indices.

      var ordinalMeta = dimInfo.ordinalMeta;

      if (ordinalMeta) {
        invertedIndices = invertedIndicesMap[dim] = new CtorInt32Array(ordinalMeta.categories.length); // The default value of TypedArray is 0. To avoid miss
        // mapping to 0, we should set it as INDEX_NOT_FOUND.

        for (var i = 0; i < invertedIndices.length; i++) {
          invertedIndices[i] = INDEX_NOT_FOUND;
        }

        for (var i = 0; i < list._count; i++) {
          // Only support the case that all values are distinct.
          invertedIndices[list.get(dim, i)] = i;
        }
      }
    });
  }

  function getRawValueFromStore(list, dimIndex, rawIndex) {
    var val;

    if (dimIndex != null) {
      var chunkSize = list._chunkSize;
      var chunkIndex = Math.floor(rawIndex / chunkSize);
      var chunkOffset = rawIndex % chunkSize;
      var dim = list.dimensions[dimIndex];
      var chunk = list._storage[dim][chunkIndex];

      if (chunk) {
        val = chunk[chunkOffset];
        var ordinalMeta = list._dimensionInfos[dim].ordinalMeta;

        if (ordinalMeta && ordinalMeta.categories.length) {
          val = ordinalMeta.categories[val];
        }
      }
    }

    return val;
  }
  /**
   * @return {number}
   */


  listProto.count = function () {
    return this._count;
  };

  listProto.getIndices = function () {
    var newIndices;
    var indices = this._indices;

    if (indices) {
      var Ctor = indices.constructor;
      var thisCount = this._count; // `new Array(a, b, c)` is different from `new Uint32Array(a, b, c)`.

      if (Ctor === Array) {
        newIndices = new Ctor(thisCount);

        for (var i = 0; i < thisCount; i++) {
          newIndices[i] = indices[i];
        }
      } else {
        newIndices = new Ctor(indices.buffer, 0, thisCount);
      }
    } else {
      var Ctor = getIndicesCtor(this);
      var newIndices = new Ctor(this.count());

      for (var i = 0; i < newIndices.length; i++) {
        newIndices[i] = i;
      }
    }

    return newIndices;
  };
  /**
   * Get value. Return NaN if idx is out of range.
   * @param {string} dim Dim must be concrete name.
   * @param {number} idx
   * @param {boolean} stack
   * @return {number}
   */


  listProto.get = function (dim, idx
  /*, stack */
  ) {
    if (!(idx >= 0 && idx < this._count)) {
      return NaN;
    }

    var storage = this._storage;

    if (!storage[dim]) {
      // TODO Warn ?
      return NaN;
    }

    idx = this.getRawIndex(idx);
    var chunkIndex = Math.floor(idx / this._chunkSize);
    var chunkOffset = idx % this._chunkSize;
    var chunkStore = storage[dim][chunkIndex];
    var value = chunkStore[chunkOffset]; // FIXME ordinal data type is not stackable
    // if (stack) {
    //     var dimensionInfo = this._dimensionInfos[dim];
    //     if (dimensionInfo && dimensionInfo.stackable) {
    //         var stackedOn = this.stackedOn;
    //         while (stackedOn) {
    //             // Get no stacked data of stacked on
    //             var stackedValue = stackedOn.get(dim, idx);
    //             // Considering positive stack, negative stack and empty data
    //             if ((value >= 0 && stackedValue > 0)  // Positive stack
    //                 || (value <= 0 && stackedValue < 0) // Negative stack
    //             ) {
    //                 value += stackedValue;
    //             }
    //             stackedOn = stackedOn.stackedOn;
    //         }
    //     }
    // }

    return value;
  };
  /**
   * @param {string} dim concrete dim
   * @param {number} rawIndex
   * @return {number|string}
   */


  listProto.getByRawIndex = function (dim, rawIdx) {
    if (!(rawIdx >= 0 && rawIdx < this._rawCount)) {
      return NaN;
    }

    var dimStore = this._storage[dim];

    if (!dimStore) {
      // TODO Warn ?
      return NaN;
    }

    var chunkIndex = Math.floor(rawIdx / this._chunkSize);
    var chunkOffset = rawIdx % this._chunkSize;
    var chunkStore = dimStore[chunkIndex];
    return chunkStore[chunkOffset];
  };
  /**
   * FIXME Use `get` on chrome maybe slow(in filterSelf and selectRange).
   * Hack a much simpler _getFast
   * @private
   */


  listProto._getFast = function (dim, rawIdx) {
    var chunkIndex = Math.floor(rawIdx / this._chunkSize);
    var chunkOffset = rawIdx % this._chunkSize;
    var chunkStore = this._storage[dim][chunkIndex];
    return chunkStore[chunkOffset];
  };
  /**
   * Get value for multi dimensions.
   * @param {Array.<string>} [dimensions] If ignored, using all dimensions.
   * @param {number} idx
   * @return {number}
   */


  listProto.getValues = function (dimensions, idx
  /*, stack */
  ) {
    var values = [];

    if (!util.isArray(dimensions)) {
      // stack = idx;
      idx = dimensions;
      dimensions = this.dimensions;
    }

    for (var i = 0, len = dimensions.length; i < len; i++) {
      values.push(this.get(dimensions[i], idx
      /*, stack */
      ));
    }

    return values;
  };
  /**
   * If value is NaN. Inlcuding '-'
   * Only check the coord dimensions.
   * @param {string} dim
   * @param {number} idx
   * @return {number}
   */


  listProto.hasValue = function (idx) {
    var dataDimsOnCoord = this._dimensionsSummary.dataDimsOnCoord;

    for (var i = 0, len = dataDimsOnCoord.length; i < len; i++) {
      // Ordinal type originally can be string or number.
      // But when an ordinal type is used on coord, it can
      // not be string but only number. So we can also use isNaN.
      if (isNaN(this.get(dataDimsOnCoord[i], idx))) {
        return false;
      }
    }

    return true;
  };
  /**
   * Get extent of data in one dimension
   * @param {string} dim
   * @param {boolean} stack
   */


  listProto.getDataExtent = function (dim
  /*, stack */
  ) {
    // Make sure use concrete dim as cache name.
    dim = this.getDimension(dim);
    var dimData = this._storage[dim];
    var initialExtent = getInitialExtent(); // stack = !!((stack || false) && this.getCalculationInfo(dim));

    if (!dimData) {
      return initialExtent;
    } // Make more strict checkings to ensure hitting cache.


    var currEnd = this.count(); // var cacheName = [dim, !!stack].join('_');
    // var cacheName = dim;
    // Consider the most cases when using data zoom, `getDataExtent`
    // happened before filtering. We cache raw extent, which is not
    // necessary to be cleared and recalculated when restore data.

    var useRaw = !this._indices; // && !stack;

    var dimExtent;

    if (useRaw) {
      return this._rawExtent[dim].slice();
    }

    dimExtent = this._extent[dim];

    if (dimExtent) {
      return dimExtent.slice();
    }

    dimExtent = initialExtent;
    var min = dimExtent[0];
    var max = dimExtent[1];

    for (var i = 0; i < currEnd; i++) {
      // var value = stack ? this.get(dim, i, true) : this._getFast(dim, this.getRawIndex(i));
      var value = this._getFast(dim, this.getRawIndex(i));

      value < min && (min = value);
      value > max && (max = value);
    }

    dimExtent = [min, max];
    this._extent[dim] = dimExtent;
    return dimExtent;
  };
  /**
   * Optimize for the scenario that data is filtered by a given extent.
   * Consider that if data amount is more than hundreds of thousand,
   * extent calculation will cost more than 10ms and the cache will
   * be erased because of the filtering.
   */


  listProto.getApproximateExtent = function (dim
  /*, stack */
  ) {
    dim = this.getDimension(dim);
    return this._approximateExtent[dim] || this.getDataExtent(dim
    /*, stack */
    );
  };

  listProto.setApproximateExtent = function (extent, dim
  /*, stack */
  ) {
    dim = this.getDimension(dim);
    this._approximateExtent[dim] = extent.slice();
  };
  /**
   * @param {string} key
   * @return {*}
   */


  listProto.getCalculationInfo = function (key) {
    return this._calculationInfo[key];
  };
  /**
   * @param {string|Object} key or k-v object
   * @param {*} [value]
   */


  listProto.setCalculationInfo = function (key, value) {
    isObject$9(key) ? util.extend(this._calculationInfo, key) : this._calculationInfo[key] = value;
  };
  /**
   * Get sum of data in one dimension
   * @param {string} dim
   */


  listProto.getSum = function (dim
  /*, stack */
  ) {
    var dimData = this._storage[dim];
    var sum = 0;

    if (dimData) {
      for (var i = 0, len = this.count(); i < len; i++) {
        var value = this.get(dim, i
        /*, stack */
        );

        if (!isNaN(value)) {
          sum += value;
        }
      }
    }

    return sum;
  };
  /**
   * Get median of data in one dimension
   * @param {string} dim
   */


  listProto.getMedian = function (dim
  /*, stack */
  ) {
    var dimDataArray = []; // map all data of one dimension

    this.each(dim, function (val, idx) {
      if (!isNaN(val)) {
        dimDataArray.push(val);
      }
    }); // TODO
    // Use quick select?
    // immutability & sort

    var sortedDimDataArray = [].concat(dimDataArray).sort(function (a, b) {
      return a - b;
    });
    var len = this.count(); // calculate median

    return len === 0 ? 0 : len % 2 === 1 ? sortedDimDataArray[(len - 1) / 2] : (sortedDimDataArray[len / 2] + sortedDimDataArray[len / 2 - 1]) / 2;
  }; // /**
  //  * Retreive the index with given value
  //  * @param {string} dim Concrete dimension.
  //  * @param {number} value
  //  * @return {number}
  //  */
  // Currently incorrect: should return dataIndex but not rawIndex.
  // Do not fix it until this method is to be used somewhere.
  // FIXME Precision of float value
  // listProto.indexOf = function (dim, value) {
  //     var storage = this._storage;
  //     var dimData = storage[dim];
  //     var chunkSize = this._chunkSize;
  //     if (dimData) {
  //         for (var i = 0, len = this.count(); i < len; i++) {
  //             var chunkIndex = Math.floor(i / chunkSize);
  //             var chunkOffset = i % chunkSize;
  //             if (dimData[chunkIndex][chunkOffset] === value) {
  //                 return i;
  //             }
  //         }
  //     }
  //     return -1;
  // };

  /**
   * Only support the dimension which inverted index created.
   * Do not support other cases until required.
   * @param {string} concrete dim
   * @param {number|string} value
   * @return {number} rawIndex
   */


  listProto.rawIndexOf = function (dim, value) {
    var invertedIndices = dim && this._invertedIndicesMap[dim];
    var rawIndex = invertedIndices[value];

    if (rawIndex == null || isNaN(rawIndex)) {
      return INDEX_NOT_FOUND;
    }

    return rawIndex;
  };
  /**
   * Retreive the index with given name
   * @param {number} idx
   * @param {number} name
   * @return {number}
   */


  listProto.indexOfName = function (name) {
    for (var i = 0, len = this.count(); i < len; i++) {
      if (this.getName(i) === name) {
        return i;
      }
    }

    return -1;
  };
  /**
   * Retreive the index with given raw data index
   * @param {number} idx
   * @param {number} name
   * @return {number}
   */


  listProto.indexOfRawIndex = function (rawIndex) {
    if (rawIndex >= this._rawCount || rawIndex < 0) {
      return -1;
    }

    if (!this._indices) {
      return rawIndex;
    } // Indices are ascending


    var indices = this._indices; // If rawIndex === dataIndex

    var rawDataIndex = indices[rawIndex];

    if (rawDataIndex != null && rawDataIndex < this._count && rawDataIndex === rawIndex) {
      return rawIndex;
    }

    var left = 0;
    var right = this._count - 1;

    while (left <= right) {
      var mid = (left + right) / 2 | 0;

      if (indices[mid] < rawIndex) {
        left = mid + 1;
      } else if (indices[mid] > rawIndex) {
        right = mid - 1;
      } else {
        return mid;
      }
    }

    return -1;
  };
  /**
   * Retreive the index of nearest value
   * @param {string} dim
   * @param {number} value
   * @param {number} [maxDistance=Infinity]
   * @return {Array.<number>} If and only if multiple indices has
   *        the same value, they are put to the result.
   */


  listProto.indicesOfNearest = function (dim, value, maxDistance) {
    var storage = this._storage;
    var dimData = storage[dim];
    var nearestIndices = [];

    if (!dimData) {
      return nearestIndices;
    }

    if (maxDistance == null) {
      maxDistance = Infinity;
    }

    var minDist = Infinity;
    var minDiff = -1;
    var nearestIndicesLen = 0; // Check the test case of `test/ut/spec/data/List.js`.

    for (var i = 0, len = this.count(); i < len; i++) {
      var diff = value - this.get(dim, i);
      var dist = Math.abs(diff);

      if (dist <= maxDistance) {
        // When the `value` is at the middle of `this.get(dim, i)` and `this.get(dim, i+1)`,
        // we'd better not push both of them to `nearestIndices`, otherwise it is easy to
        // get more than one item in `nearestIndices` (more specifically, in `tooltip`).
        // So we chose the one that `diff >= 0` in this csae.
        // But if `this.get(dim, i)` and `this.get(dim, j)` get the same value, both of them
        // should be push to `nearestIndices`.
        if (dist < minDist || dist === minDist && diff >= 0 && minDiff < 0) {
          minDist = dist;
          minDiff = diff;
          nearestIndicesLen = 0;
        }

        if (diff === minDiff) {
          nearestIndices[nearestIndicesLen++] = i;
        }
      }
    }

    nearestIndices.length = nearestIndicesLen;
    return nearestIndices;
  };
  /**
   * Get raw data index
   * @param {number} idx
   * @return {number}
   */


  listProto.getRawIndex = getRawIndexWithoutIndices;

  function getRawIndexWithoutIndices(idx) {
    return idx;
  }

  function getRawIndexWithIndices(idx) {
    if (idx < this._count && idx >= 0) {
      return this._indices[idx];
    }

    return -1;
  }
  /**
   * Get raw data item
   * @param {number} idx
   * @return {number}
   */


  listProto.getRawDataItem = function (idx) {
    if (!this._rawData.persistent) {
      var val = [];

      for (var i = 0; i < this.dimensions.length; i++) {
        var dim = this.dimensions[i];
        val.push(this.get(dim, idx));
      }

      return val;
    } else {
      return this._rawData.getItem(this.getRawIndex(idx));
    }
  };
  /**
   * @param {number} idx
   * @param {boolean} [notDefaultIdx=false]
   * @return {string}
   */


  listProto.getName = function (idx) {
    var rawIndex = this.getRawIndex(idx);
    return this._nameList[rawIndex] || getRawValueFromStore(this, this._nameDimIdx, rawIndex) || '';
  };
  /**
   * @param {number} idx
   * @param {boolean} [notDefaultIdx=false]
   * @return {string}
   */


  listProto.getId = function (idx) {
    return getId(this, this.getRawIndex(idx));
  };

  function getId(list, rawIndex) {
    var id = list._idList[rawIndex];

    if (id == null) {
      id = getRawValueFromStore(list, list._idDimIdx, rawIndex);
    }

    if (id == null) {
      // FIXME Check the usage in graph, should not use prefix.
      id = ID_PREFIX + rawIndex;
    }

    return id;
  }

  function normalizeDimensions(dimensions) {
    if (!util.isArray(dimensions)) {
      dimensions = [dimensions];
    }

    return dimensions;
  }
  /**
   * Data iteration
   * @param {string|Array.<string>}
   * @param {Function} cb
   * @param {*} [context=this]
   *
   * @example
   *  list.each('x', function (x, idx) {});
   *  list.each(['x', 'y'], function (x, y, idx) {});
   *  list.each(function (idx) {})
   */


  listProto.each = function (dims, cb, context, contextCompat) {

    if (!this._count) {
      return;
    }

    if (typeof dims === 'function') {
      contextCompat = context;
      context = cb;
      cb = dims;
      dims = [];
    } // contextCompat just for compat echarts3


    context = context || contextCompat || this;
    dims = util.map(normalizeDimensions(dims), this.getDimension, this);
    var dimSize = dims.length;

    for (var i = 0; i < this.count(); i++) {
      // Simple optimization
      switch (dimSize) {
        case 0:
          cb.call(context, i);
          break;

        case 1:
          cb.call(context, this.get(dims[0], i), i);
          break;

        case 2:
          cb.call(context, this.get(dims[0], i), this.get(dims[1], i), i);
          break;

        default:
          var k = 0;
          var value = [];

          for (; k < dimSize; k++) {
            value[k] = this.get(dims[k], i);
          } // Index


          value[k] = i;
          cb.apply(context, value);
      }
    }
  };
  /**
   * Data filter
   * @param {string|Array.<string>}
   * @param {Function} cb
   * @param {*} [context=this]
   */


  listProto.filterSelf = function (dimensions, cb, context, contextCompat) {

    if (!this._count) {
      return;
    }

    if (typeof dimensions === 'function') {
      contextCompat = context;
      context = cb;
      cb = dimensions;
      dimensions = [];
    } // contextCompat just for compat echarts3


    context = context || contextCompat || this;
    dimensions = util.map(normalizeDimensions(dimensions), this.getDimension, this);
    var count = this.count();
    var Ctor = getIndicesCtor(this);
    var newIndices = new Ctor(count);
    var value = [];
    var dimSize = dimensions.length;
    var offset = 0;
    var dim0 = dimensions[0];

    for (var i = 0; i < count; i++) {
      var keep;
      var rawIdx = this.getRawIndex(i); // Simple optimization

      if (dimSize === 0) {
        keep = cb.call(context, i);
      } else if (dimSize === 1) {
        var val = this._getFast(dim0, rawIdx);

        keep = cb.call(context, val, i);
      } else {
        for (var k = 0; k < dimSize; k++) {
          value[k] = this._getFast(dim0, rawIdx);
        }

        value[k] = i;
        keep = cb.apply(context, value);
      }

      if (keep) {
        newIndices[offset++] = rawIdx;
      }
    } // Set indices after filtered.


    if (offset < count) {
      this._indices = newIndices;
    }

    this._count = offset; // Reset data extent

    this._extent = {};
    this.getRawIndex = this._indices ? getRawIndexWithIndices : getRawIndexWithoutIndices;
    return this;
  };
  /**
   * Select data in range. (For optimization of filter)
   * (Manually inline code, support 5 million data filtering in data zoom.)
   */


  listProto.selectRange = function (range) {

    if (!this._count) {
      return;
    }

    var dimensions = [];

    for (var dim in range) {
      if (range.hasOwnProperty(dim)) {
        dimensions.push(dim);
      }
    }

    var dimSize = dimensions.length;

    if (!dimSize) {
      return;
    }

    var originalCount = this.count();
    var Ctor = getIndicesCtor(this);
    var newIndices = new Ctor(originalCount);
    var offset = 0;
    var dim0 = dimensions[0];
    var min = range[dim0][0];
    var max = range[dim0][1];
    var quickFinished = false;

    if (!this._indices) {
      // Extreme optimization for common case. About 2x faster in chrome.
      var idx = 0;

      if (dimSize === 1) {
        var dimStorage = this._storage[dimensions[0]];

        for (var k = 0; k < this._chunkCount; k++) {
          var chunkStorage = dimStorage[k];
          var len = Math.min(this._count - k * this._chunkSize, this._chunkSize);

          for (var i = 0; i < len; i++) {
            var val = chunkStorage[i]; // NaN will not be filtered. Consider the case, in line chart, empty
            // value indicates the line should be broken. But for the case like
            // scatter plot, a data item with empty value will not be rendered,
            // but the axis extent may be effected if some other dim of the data
            // item has value. Fortunately it is not a significant negative effect.

            if (val >= min && val <= max || isNaN(val)) {
              newIndices[offset++] = idx;
            }

            idx++;
          }
        }

        quickFinished = true;
      } else if (dimSize === 2) {
        var dimStorage = this._storage[dim0];
        var dimStorage2 = this._storage[dimensions[1]];
        var min2 = range[dimensions[1]][0];
        var max2 = range[dimensions[1]][1];

        for (var k = 0; k < this._chunkCount; k++) {
          var chunkStorage = dimStorage[k];
          var chunkStorage2 = dimStorage2[k];
          var len = Math.min(this._count - k * this._chunkSize, this._chunkSize);

          for (var i = 0; i < len; i++) {
            var val = chunkStorage[i];
            var val2 = chunkStorage2[i]; // Do not filter NaN, see comment above.

            if ((val >= min && val <= max || isNaN(val)) && (val2 >= min2 && val2 <= max2 || isNaN(val2))) {
              newIndices[offset++] = idx;
            }

            idx++;
          }
        }

        quickFinished = true;
      }
    }

    if (!quickFinished) {
      if (dimSize === 1) {
        for (var i = 0; i < originalCount; i++) {
          var rawIndex = this.getRawIndex(i);

          var val = this._getFast(dim0, rawIndex); // Do not filter NaN, see comment above.


          if (val >= min && val <= max || isNaN(val)) {
            newIndices[offset++] = rawIndex;
          }
        }
      } else {
        for (var i = 0; i < originalCount; i++) {
          var keep = true;
          var rawIndex = this.getRawIndex(i);

          for (var k = 0; k < dimSize; k++) {
            var dimk = dimensions[k];

            var val = this._getFast(dim, rawIndex); // Do not filter NaN, see comment above.


            if (val < range[dimk][0] || val > range[dimk][1]) {
              keep = false;
            }
          }

          if (keep) {
            newIndices[offset++] = this.getRawIndex(i);
          }
        }
      }
    } // Set indices after filtered.


    if (offset < originalCount) {
      this._indices = newIndices;
    }

    this._count = offset; // Reset data extent

    this._extent = {};
    this.getRawIndex = this._indices ? getRawIndexWithIndices : getRawIndexWithoutIndices;
    return this;
  };
  /**
   * Data mapping to a plain array
   * @param {string|Array.<string>} [dimensions]
   * @param {Function} cb
   * @param {*} [context=this]
   * @return {Array}
   */


  listProto.mapArray = function (dimensions, cb, context, contextCompat) {

    if (typeof dimensions === 'function') {
      contextCompat = context;
      context = cb;
      cb = dimensions;
      dimensions = [];
    } // contextCompat just for compat echarts3


    context = context || contextCompat || this;
    var result = [];
    this.each(dimensions, function () {
      result.push(cb && cb.apply(this, arguments));
    }, context);
    return result;
  }; // Data in excludeDimensions is copied, otherwise transfered.


  function cloneListForMapAndSample(original, excludeDimensions) {
    var allDimensions = original.dimensions;
    var list = new List(util.map(allDimensions, original.getDimensionInfo, original), original.hostModel); // FIXME If needs stackedOn, value may already been stacked

    transferProperties(list, original);
    var storage = list._storage = {};
    var originalStorage = original._storage; // Init storage

    for (var i = 0; i < allDimensions.length; i++) {
      var dim = allDimensions[i];

      if (originalStorage[dim]) {
        // Notice that we do not reset invertedIndicesMap here, becuase
        // there is no scenario of mapping or sampling ordinal dimension.
        if (util.indexOf(excludeDimensions, dim) >= 0) {
          storage[dim] = cloneDimStore(originalStorage[dim]);
          list._rawExtent[dim] = getInitialExtent();
          list._extent[dim] = null;
        } else {
          // Direct reference for other dimensions
          storage[dim] = originalStorage[dim];
        }
      }
    }

    return list;
  }

  function cloneDimStore(originalDimStore) {
    var newDimStore = new Array(originalDimStore.length);

    for (var j = 0; j < originalDimStore.length; j++) {
      newDimStore[j] = cloneChunk(originalDimStore[j]);
    }

    return newDimStore;
  }

  function getInitialExtent() {
    return [Infinity, -Infinity];
  }
  /**
   * Data mapping to a new List with given dimensions
   * @param {string|Array.<string>} dimensions
   * @param {Function} cb
   * @param {*} [context=this]
   * @return {Array}
   */


  listProto.map = function (dimensions, cb, context, contextCompat) {

    context = context || contextCompat || this;
    dimensions = util.map(normalizeDimensions(dimensions), this.getDimension, this);
    var list = cloneListForMapAndSample(this, dimensions); // Following properties are all immutable.
    // So we can reference to the same value

    list._indices = this._indices;
    list.getRawIndex = list._indices ? getRawIndexWithIndices : getRawIndexWithoutIndices;
    var storage = list._storage;
    var tmpRetValue = [];
    var chunkSize = this._chunkSize;
    var dimSize = dimensions.length;
    var dataCount = this.count();
    var values = [];
    var rawExtent = list._rawExtent;

    for (var dataIndex = 0; dataIndex < dataCount; dataIndex++) {
      for (var dimIndex = 0; dimIndex < dimSize; dimIndex++) {
        values[dimIndex] = this.get(dimensions[dimIndex], dataIndex
        /*, stack */
        );
      }

      values[dimSize] = dataIndex;
      var retValue = cb && cb.apply(context, values);

      if (retValue != null) {
        // a number or string (in oridinal dimension)?
        if (typeof retValue !== 'object') {
          tmpRetValue[0] = retValue;
          retValue = tmpRetValue;
        }

        var rawIndex = this.getRawIndex(dataIndex);
        var chunkIndex = Math.floor(rawIndex / chunkSize);
        var chunkOffset = rawIndex % chunkSize;

        for (var i = 0; i < retValue.length; i++) {
          var dim = dimensions[i];
          var val = retValue[i];
          var rawExtentOnDim = rawExtent[dim];
          var dimStore = storage[dim];

          if (dimStore) {
            dimStore[chunkIndex][chunkOffset] = val;
          }

          if (val < rawExtentOnDim[0]) {
            rawExtentOnDim[0] = val;
          }

          if (val > rawExtentOnDim[1]) {
            rawExtentOnDim[1] = val;
          }
        }
      }
    }

    return list;
  };
  /**
   * Large data down sampling on given dimension
   * @param {string} dimension
   * @param {number} rate
   * @param {Function} sampleValue
   * @param {Function} sampleIndex Sample index for name and id
   */


  listProto.downSample = function (dimension, rate, sampleValue, sampleIndex) {
    var list = cloneListForMapAndSample(this, [dimension]);
    var targetStorage = list._storage;
    var frameValues = [];
    var frameSize = Math.floor(1 / rate);
    var dimStore = targetStorage[dimension];
    var len = this.count();
    var chunkSize = this._chunkSize;
    var rawExtentOnDim = list._rawExtent[dimension];
    var newIndices = new (getIndicesCtor(this))(len);
    var offset = 0;

    for (var i = 0; i < len; i += frameSize) {
      // Last frame
      if (frameSize > len - i) {
        frameSize = len - i;
        frameValues.length = frameSize;
      }

      for (var k = 0; k < frameSize; k++) {
        var dataIdx = this.getRawIndex(i + k);
        var originalChunkIndex = Math.floor(dataIdx / chunkSize);
        var originalChunkOffset = dataIdx % chunkSize;
        frameValues[k] = dimStore[originalChunkIndex][originalChunkOffset];
      }

      var value = sampleValue(frameValues);
      var sampleFrameIdx = this.getRawIndex(Math.min(i + sampleIndex(frameValues, value) || 0, len - 1));
      var sampleChunkIndex = Math.floor(sampleFrameIdx / chunkSize);
      var sampleChunkOffset = sampleFrameIdx % chunkSize; // Only write value on the filtered data

      dimStore[sampleChunkIndex][sampleChunkOffset] = value;

      if (value < rawExtentOnDim[0]) {
        rawExtentOnDim[0] = value;
      }

      if (value > rawExtentOnDim[1]) {
        rawExtentOnDim[1] = value;
      }

      newIndices[offset++] = sampleFrameIdx;
    }

    list._count = offset;
    list._indices = newIndices;
    list.getRawIndex = getRawIndexWithIndices;
    return list;
  };
  /**
   * Get model of one data item.
   *
   * @param {number} idx
   */
  // FIXME Model proxy ?


  listProto.getItemModel = function (idx) {
    var hostModel = this.hostModel;
    return new Model_1(this.getRawDataItem(idx), hostModel, hostModel && hostModel.ecModel);
  };
  /**
   * Create a data differ
   * @param {module:echarts/data/List} otherList
   * @return {module:echarts/data/DataDiffer}
   */


  listProto.diff = function (otherList) {
    var thisList = this;
    return new DataDiffer_1(otherList ? otherList.getIndices() : [], this.getIndices(), function (idx) {
      return getId(otherList, idx);
    }, function (idx) {
      return getId(thisList, idx);
    });
  };
  /**
   * Get visual property.
   * @param {string} key
   */


  listProto.getVisual = function (key) {
    var visual = this._visual;
    return visual && visual[key];
  };
  /**
   * Set visual property
   * @param {string|Object} key
   * @param {*} [value]
   *
   * @example
   *  setVisual('color', color);
   *  setVisual({
   *      'color': color
   *  });
   */


  listProto.setVisual = function (key, val) {
    if (isObject$9(key)) {
      for (var name in key) {
        if (key.hasOwnProperty(name)) {
          this.setVisual(name, key[name]);
        }
      }

      return;
    }

    this._visual = this._visual || {};
    this._visual[key] = val;
  };
  /**
   * Set layout property.
   * @param {string|Object} key
   * @param {*} [val]
   */


  listProto.setLayout = function (key, val) {
    if (isObject$9(key)) {
      for (var name in key) {
        if (key.hasOwnProperty(name)) {
          this.setLayout(name, key[name]);
        }
      }

      return;
    }

    this._layout[key] = val;
  };
  /**
   * Get layout property.
   * @param  {string} key.
   * @return {*}
   */


  listProto.getLayout = function (key) {
    return this._layout[key];
  };
  /**
   * Get layout of single data item
   * @param {number} idx
   */


  listProto.getItemLayout = function (idx) {
    return this._itemLayouts[idx];
  };
  /**
   * Set layout of single data item
   * @param {number} idx
   * @param {Object} layout
   * @param {boolean=} [merge=false]
   */


  listProto.setItemLayout = function (idx, layout, merge) {
    this._itemLayouts[idx] = merge ? util.extend(this._itemLayouts[idx] || {}, layout) : layout;
  };
  /**
   * Clear all layout of single data item
   */


  listProto.clearItemLayouts = function () {
    this._itemLayouts.length = 0;
  };
  /**
   * Get visual property of single data item
   * @param {number} idx
   * @param {string} key
   * @param {boolean} [ignoreParent=false]
   */


  listProto.getItemVisual = function (idx, key, ignoreParent) {
    var itemVisual = this._itemVisuals[idx];
    var val = itemVisual && itemVisual[key];

    if (val == null && !ignoreParent) {
      // Use global visual property
      return this.getVisual(key);
    }

    return val;
  };
  /**
   * Set visual property of single data item
   *
   * @param {number} idx
   * @param {string|Object} key
   * @param {*} [value]
   *
   * @example
   *  setItemVisual(0, 'color', color);
   *  setItemVisual(0, {
   *      'color': color
   *  });
   */


  listProto.setItemVisual = function (idx, key, value) {
    var itemVisual = this._itemVisuals[idx] || {};
    var hasItemVisual = this.hasItemVisual;
    this._itemVisuals[idx] = itemVisual;

    if (isObject$9(key)) {
      for (var name in key) {
        if (key.hasOwnProperty(name)) {
          itemVisual[name] = key[name];
          hasItemVisual[name] = true;
        }
      }

      return;
    }

    itemVisual[key] = value;
    hasItemVisual[key] = true;
  };
  /**
   * Clear itemVisuals and list visual.
   */


  listProto.clearAllVisual = function () {
    this._visual = {};
    this._itemVisuals = [];
    this.hasItemVisual = {};
  };

  var setItemDataAndSeriesIndex = function (child) {
    child.seriesIndex = this.seriesIndex;
    child.dataIndex = this.dataIndex;
    child.dataType = this.dataType;
  };
  /**
   * Set graphic element relative to data. It can be set as null
   * @param {number} idx
   * @param {module:zrender/Element} [el]
   */


  listProto.setItemGraphicEl = function (idx, el) {
    var hostModel = this.hostModel;

    if (el) {
      // Add data index and series index for indexing the data by element
      // Useful in tooltip
      el.dataIndex = idx;
      el.dataType = this.dataType;
      el.seriesIndex = hostModel && hostModel.seriesIndex;

      if (el.type === 'group') {
        el.traverse(setItemDataAndSeriesIndex, el);
      }
    }

    this._graphicEls[idx] = el;
  };
  /**
   * @param {number} idx
   * @return {module:zrender/Element}
   */


  listProto.getItemGraphicEl = function (idx) {
    return this._graphicEls[idx];
  };
  /**
   * @param {Function} cb
   * @param {*} context
   */


  listProto.eachItemGraphicEl = function (cb, context) {
    util.each(this._graphicEls, function (el, idx) {
      if (el) {
        cb && cb.call(context, el, idx);
      }
    });
  };
  /**
   * Shallow clone a new list except visual and layout properties, and graph elements.
   * New list only change the indices.
   */


  listProto.cloneShallow = function (list) {
    if (!list) {
      var dimensionInfoList = util.map(this.dimensions, this.getDimensionInfo, this);
      list = new List(dimensionInfoList, this.hostModel);
    } // FIXME


    list._storage = this._storage;
    transferProperties(list, this); // Clone will not change the data extent and indices

    if (this._indices) {
      var Ctor = this._indices.constructor;
      list._indices = new Ctor(this._indices);
    } else {
      list._indices = null;
    }

    list.getRawIndex = list._indices ? getRawIndexWithIndices : getRawIndexWithoutIndices;
    return list;
  };
  /**
   * Wrap some method to add more feature
   * @param {string} methodName
   * @param {Function} injectFunction
   */


  listProto.wrapMethod = function (methodName, injectFunction) {
    var originalMethod = this[methodName];

    if (typeof originalMethod !== 'function') {
      return;
    }

    this.__wrappedMethods = this.__wrappedMethods || [];

    this.__wrappedMethods.push(methodName);

    this[methodName] = function () {
      var res = originalMethod.apply(this, arguments);
      return injectFunction.apply(this, [res].concat(util.slice(arguments)));
    };
  }; // Methods that create a new list based on this list should be listed here.
  // Notice that those method should `RETURN` the new list.


  listProto.TRANSFERABLE_METHODS = ['cloneShallow', 'downSample', 'map']; // Methods that change indices of this list should be listed here.

  listProto.CHANGABLE_METHODS = ['filterSelf', 'selectRange'];
  var _default$1j = List;
  var List_1 = _default$1j;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  var createHashMap$8 = util.createHashMap;
  var each$g = util.each;
  var isString$7 = util.isString;
  var defaults$2 = util.defaults;
  var extend$6 = util.extend;
  var isObject$a = util.isObject;
  var clone$5 = util.clone;



  var normalizeToArray$4 = model.normalizeToArray;



  var guessOrdinal$1 = sourceHelper.guessOrdinal;
  var BE_ORDINAL$1 = sourceHelper.BE_ORDINAL;





  var OTHER_DIMENSIONS$1 = dimensionHelper.OTHER_DIMENSIONS;



  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * @deprecated
   * Use `echarts/data/helper/createDimensions` instead.
   */

  /**
   * @see {module:echarts/test/ut/spec/data/completeDimensions}
   *
   * This method builds the relationship between:
   * + "what the coord sys or series requires (see `sysDims`)",
   * + "what the user defines (in `encode` and `dimensions`, see `opt.dimsDef` and `opt.encodeDef`)"
   * + "what the data source provids (see `source`)".
   *
   * Some guess strategy will be adapted if user does not define something.
   * If no 'value' dimension specified, the first no-named dimension will be
   * named as 'value'.
   *
   * @param {Array.<string>} sysDims Necessary dimensions, like ['x', 'y'], which
   *      provides not only dim template, but also default order.
   *      properties: 'name', 'type', 'displayName'.
   *      `name` of each item provides default coord name.
   *      [{dimsDef: [string|Object, ...]}, ...] dimsDef of sysDim item provides default dim name, and
   *                                    provide dims count that the sysDim required.
   *      [{ordinalMeta}] can be specified.
   * @param {module:echarts/data/Source|Array|Object} source or data (for compatibal with pervious)
   * @param {Object} [opt]
   * @param {Array.<Object|string>} [opt.dimsDef] option.series.dimensions User defined dimensions
   *      For example: ['asdf', {name, type}, ...].
   * @param {Object|HashMap} [opt.encodeDef] option.series.encode {x: 2, y: [3, 1], tooltip: [1, 2], label: 3}
   * @param {Function} [opt.encodeDefaulter] Called if no `opt.encodeDef` exists.
   *      If not specified, auto find the next available data dim.
   *      param source {module:data/Source}
   *      param dimCount {number}
   *      return {Object} encode Never be `null/undefined`.
   * @param {string} [opt.generateCoord] Generate coord dim with the given name.
   *      If not specified, extra dim names will be:
   *      'value', 'value0', 'value1', ...
   * @param {number} [opt.generateCoordCount] By default, the generated dim name is `generateCoord`.
   *      If `generateCoordCount` specified, the generated dim names will be:
   *      `generateCoord` + 0, `generateCoord` + 1, ...
   *      can be Infinity, indicate that use all of the remain columns.
   * @param {number} [opt.dimCount] If not specified, guess by the first data item.
   * @return {Array.<module:data/DataDimensionInfo>}
   */
  function completeDimensions(sysDims, source, opt) {
    if (!Source_1.isInstance(source)) {
      source = Source_1.seriesDataToSource(source);
    }

    opt = opt || {};
    sysDims = (sysDims || []).slice();
    var dimsDef = (opt.dimsDef || []).slice();
    var dataDimNameMap = createHashMap$8();
    var coordDimNameMap = createHashMap$8(); // var valueCandidate;

    var result = [];
    var dimCount = getDimCount(source, sysDims, dimsDef, opt.dimCount); // Apply user defined dims (`name` and `type`) and init result.

    for (var i = 0; i < dimCount; i++) {
      var dimDefItem = dimsDef[i] = extend$6({}, isObject$a(dimsDef[i]) ? dimsDef[i] : {
        name: dimsDef[i]
      });
      var userDimName = dimDefItem.name;
      var resultItem = result[i] = new DataDimensionInfo_1(); // Name will be applied later for avoiding duplication.

      if (userDimName != null && dataDimNameMap.get(userDimName) == null) {
        // Only if `series.dimensions` is defined in option
        // displayName, will be set, and dimension will be diplayed vertically in
        // tooltip by default.
        resultItem.name = resultItem.displayName = userDimName;
        dataDimNameMap.set(userDimName, i);
      }

      dimDefItem.type != null && (resultItem.type = dimDefItem.type);
      dimDefItem.displayName != null && (resultItem.displayName = dimDefItem.displayName);
    }

    var encodeDef = opt.encodeDef;

    if (!encodeDef && opt.encodeDefaulter) {
      encodeDef = opt.encodeDefaulter(source, dimCount);
    }

    encodeDef = createHashMap$8(encodeDef); // Set `coordDim` and `coordDimIndex` by `encodeDef` and normalize `encodeDef`.

    encodeDef.each(function (dataDims, coordDim) {
      dataDims = normalizeToArray$4(dataDims).slice(); // Note: It is allowed that `dataDims.length` is `0`, e.g., options is
      // `{encode: {x: -1, y: 1}}`. Should not filter anything in
      // this case.

      if (dataDims.length === 1 && !isString$7(dataDims[0]) && dataDims[0] < 0) {
        encodeDef.set(coordDim, false);
        return;
      }

      var validDataDims = encodeDef.set(coordDim, []);
      each$g(dataDims, function (resultDimIdx, idx) {
        // The input resultDimIdx can be dim name or index.
        isString$7(resultDimIdx) && (resultDimIdx = dataDimNameMap.get(resultDimIdx));

        if (resultDimIdx != null && resultDimIdx < dimCount) {
          validDataDims[idx] = resultDimIdx;
          applyDim(result[resultDimIdx], coordDim, idx);
        }
      });
    }); // Apply templetes and default order from `sysDims`.

    var availDimIdx = 0;
    each$g(sysDims, function (sysDimItem, sysDimIndex) {
      var coordDim;
      var sysDimItem;
      var sysDimItemDimsDef;
      var sysDimItemOtherDims;

      if (isString$7(sysDimItem)) {
        coordDim = sysDimItem;
        sysDimItem = {};
      } else {
        coordDim = sysDimItem.name;
        var ordinalMeta = sysDimItem.ordinalMeta;
        sysDimItem.ordinalMeta = null;
        sysDimItem = clone$5(sysDimItem);
        sysDimItem.ordinalMeta = ordinalMeta; // `coordDimIndex` should not be set directly.

        sysDimItemDimsDef = sysDimItem.dimsDef;
        sysDimItemOtherDims = sysDimItem.otherDims;
        sysDimItem.name = sysDimItem.coordDim = sysDimItem.coordDimIndex = sysDimItem.dimsDef = sysDimItem.otherDims = null;
      }

      var dataDims = encodeDef.get(coordDim); // negative resultDimIdx means no need to mapping.

      if (dataDims === false) {
        return;
      }

      var dataDims = normalizeToArray$4(dataDims); // dimensions provides default dim sequences.

      if (!dataDims.length) {
        for (var i = 0; i < (sysDimItemDimsDef && sysDimItemDimsDef.length || 1); i++) {
          while (availDimIdx < result.length && result[availDimIdx].coordDim != null) {
            availDimIdx++;
          }

          availDimIdx < result.length && dataDims.push(availDimIdx++);
        }
      } // Apply templates.


      each$g(dataDims, function (resultDimIdx, coordDimIndex) {
        var resultItem = result[resultDimIdx];
        applyDim(defaults$2(resultItem, sysDimItem), coordDim, coordDimIndex);

        if (resultItem.name == null && sysDimItemDimsDef) {
          var sysDimItemDimsDefItem = sysDimItemDimsDef[coordDimIndex];
          !isObject$a(sysDimItemDimsDefItem) && (sysDimItemDimsDefItem = {
            name: sysDimItemDimsDefItem
          });
          resultItem.name = resultItem.displayName = sysDimItemDimsDefItem.name;
          resultItem.defaultTooltip = sysDimItemDimsDefItem.defaultTooltip;
        } // FIXME refactor, currently only used in case: {otherDims: {tooltip: false}}


        sysDimItemOtherDims && defaults$2(resultItem.otherDims, sysDimItemOtherDims);
      });
    });

    function applyDim(resultItem, coordDim, coordDimIndex) {
      if (OTHER_DIMENSIONS$1.get(coordDim) != null) {
        resultItem.otherDims[coordDim] = coordDimIndex;
      } else {
        resultItem.coordDim = coordDim;
        resultItem.coordDimIndex = coordDimIndex;
        coordDimNameMap.set(coordDim, true);
      }
    } // Make sure the first extra dim is 'value'.


    var generateCoord = opt.generateCoord;
    var generateCoordCount = opt.generateCoordCount;
    var fromZero = generateCoordCount != null;
    generateCoordCount = generateCoord ? generateCoordCount || 1 : 0;
    var extra = generateCoord || 'value'; // Set dim `name` and other `coordDim` and other props.

    for (var resultDimIdx = 0; resultDimIdx < dimCount; resultDimIdx++) {
      var resultItem = result[resultDimIdx] = result[resultDimIdx] || new DataDimensionInfo_1();
      var coordDim = resultItem.coordDim;

      if (coordDim == null) {
        resultItem.coordDim = genName(extra, coordDimNameMap, fromZero);
        resultItem.coordDimIndex = 0;

        if (!generateCoord || generateCoordCount <= 0) {
          resultItem.isExtraCoord = true;
        }

        generateCoordCount--;
      }

      resultItem.name == null && (resultItem.name = genName(resultItem.coordDim, dataDimNameMap));

      if (resultItem.type == null && (guessOrdinal$1(source, resultDimIdx, resultItem.name) === BE_ORDINAL$1.Must // Consider the case:
      // {
      //    dataset: {source: [
      //        ['2001', 123],
      //        ['2002', 456],
      //        ...
      //        ['The others', 987],
      //    ]},
      //    series: {type: 'pie'}
      // }
      // The first colum should better be treated as a "ordinal" although it
      // might not able to be detected as an "ordinal" by `guessOrdinal`.
      || resultItem.isExtraCoord && (resultItem.otherDims.itemName != null || resultItem.otherDims.seriesName != null))) {
        resultItem.type = 'ordinal';
      }
    }

    return result;
  } // ??? TODO
  // Originally detect dimCount by data[0]. Should we
  // optimize it to only by sysDims and dimensions and encode.
  // So only necessary dims will be initialized.
  // But
  // (1) custom series should be considered. where other dims
  // may be visited.
  // (2) sometimes user need to calcualte bubble size or use visualMap
  // on other dimensions besides coordSys needed.
  // So, dims that is not used by system, should be shared in storage?


  function getDimCount(source, sysDims, dimsDef, optDimCount) {
    // Note that the result dimCount should not small than columns count
    // of data, otherwise `dataDimNameMap` checking will be incorrect.
    var dimCount = Math.max(source.dimensionsDetectCount || 1, sysDims.length, dimsDef.length, optDimCount || 0);
    each$g(sysDims, function (sysDimItem) {
      var sysDimItemDimsDef = sysDimItem.dimsDef;
      sysDimItemDimsDef && (dimCount = Math.max(dimCount, sysDimItemDimsDef.length));
    });
    return dimCount;
  }

  function genName(name, map, fromZero) {
    if (fromZero || map.get(name) != null) {
      var i = 0;

      while (map.get(name + i) != null) {
        i++;
      }

      name += i;
    }

    map.set(name, true);
    return name;
  }

  var _default$1k = completeDimensions;
  var completeDimensions_1 = _default$1k;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * Substitute `completeDimensions`.
   * `completeDimensions` is to be deprecated.
   */

  /**
   * @param {module:echarts/data/Source|module:echarts/data/List} source or data.
   * @param {Object|Array} [opt]
   * @param {Array.<string|Object>} [opt.coordDimensions=[]]
   * @param {number} [opt.dimensionsCount]
   * @param {string} [opt.generateCoord]
   * @param {string} [opt.generateCoordCount]
   * @param {Array.<string|Object>} [opt.dimensionsDefine=source.dimensionsDefine] Overwrite source define.
   * @param {Object|HashMap} [opt.encodeDefine=source.encodeDefine] Overwrite source define.
   * @param {Function} [opt.encodeDefaulter] Make default encode if user not specified.
   * @return {Array.<Object>} dimensionsInfo
   */
  function _default$1l(source, opt) {
    opt = opt || {};
    return completeDimensions_1(opt.coordDimensions || [], source, {
      dimsDef: opt.dimensionsDefine || source.dimensionsDefine,
      encodeDef: opt.encodeDefine || source.encodeDefine,
      dimCount: opt.dimensionsCount,
      encodeDefaulter: opt.encodeDefaulter,
      generateCoord: opt.generateCoord,
      generateCoordCount: opt.generateCoordCount
    });
  }

  var createDimensions = _default$1l;

  var createHashMap$9 = util.createHashMap;
  var each$h = util.each;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * Helper for model references.
   * There are many manners to refer axis/coordSys.
   */
  // TODO
  // merge relevant logic to this file?
  // check: "modelHelper" of tooltip and "BrushTargetManager".

  /**
   * @class
   * For example:
   * {
   *     coordSysName: 'cartesian2d',
   *     coordSysDims: ['x', 'y', ...],
   *     axisMap: HashMap({
   *         x: xAxisModel,
   *         y: yAxisModel
   *     }),
   *     categoryAxisMap: HashMap({
   *         x: xAxisModel,
   *         y: undefined
   *     }),
   *     // The index of the first category axis in `coordSysDims`.
   *     // `null/undefined` means no category axis exists.
   *     firstCategoryDimIndex: 1,
   *     // To replace user specified encode.
   * }
   */
  function CoordSysInfo(coordSysName) {
    /**
     * @type {string}
     */
    this.coordSysName = coordSysName;
    /**
     * @type {Array.<string>}
     */

    this.coordSysDims = [];
    /**
     * @type {module:zrender/core/util#HashMap}
     */

    this.axisMap = createHashMap$9();
    /**
     * @type {module:zrender/core/util#HashMap}
     */

    this.categoryAxisMap = createHashMap$9();
    /**
     * @type {number}
     */

    this.firstCategoryDimIndex = null;
  }
  /**
   * @return {module:model/referHelper#CoordSysInfo}
   */


  function getCoordSysInfoBySeries(seriesModel) {
    var coordSysName = seriesModel.get('coordinateSystem');
    var result = new CoordSysInfo(coordSysName);
    var fetch = fetchers[coordSysName];

    if (fetch) {
      fetch(seriesModel, result, result.axisMap, result.categoryAxisMap);
      return result;
    }
  }

  var fetchers = {
    cartesian2d: function (seriesModel, result, axisMap, categoryAxisMap) {
      var xAxisModel = seriesModel.getReferringComponents('xAxis')[0];
      var yAxisModel = seriesModel.getReferringComponents('yAxis')[0];
      result.coordSysDims = ['x', 'y'];
      axisMap.set('x', xAxisModel);
      axisMap.set('y', yAxisModel);

      if (isCategory(xAxisModel)) {
        categoryAxisMap.set('x', xAxisModel);
        result.firstCategoryDimIndex = 0;
      }

      if (isCategory(yAxisModel)) {
        categoryAxisMap.set('y', yAxisModel);
        result.firstCategoryDimIndex == null & (result.firstCategoryDimIndex = 1);
      }
    },
    singleAxis: function (seriesModel, result, axisMap, categoryAxisMap) {
      var singleAxisModel = seriesModel.getReferringComponents('singleAxis')[0];
      result.coordSysDims = ['single'];
      axisMap.set('single', singleAxisModel);

      if (isCategory(singleAxisModel)) {
        categoryAxisMap.set('single', singleAxisModel);
        result.firstCategoryDimIndex = 0;
      }
    },
    polar: function (seriesModel, result, axisMap, categoryAxisMap) {
      var polarModel = seriesModel.getReferringComponents('polar')[0];
      var radiusAxisModel = polarModel.findAxisModel('radiusAxis');
      var angleAxisModel = polarModel.findAxisModel('angleAxis');
      result.coordSysDims = ['radius', 'angle'];
      axisMap.set('radius', radiusAxisModel);
      axisMap.set('angle', angleAxisModel);

      if (isCategory(radiusAxisModel)) {
        categoryAxisMap.set('radius', radiusAxisModel);
        result.firstCategoryDimIndex = 0;
      }

      if (isCategory(angleAxisModel)) {
        categoryAxisMap.set('angle', angleAxisModel);
        result.firstCategoryDimIndex == null && (result.firstCategoryDimIndex = 1);
      }
    },
    geo: function (seriesModel, result, axisMap, categoryAxisMap) {
      result.coordSysDims = ['lng', 'lat'];
    },
    parallel: function (seriesModel, result, axisMap, categoryAxisMap) {
      var ecModel = seriesModel.ecModel;
      var parallelModel = ecModel.getComponent('parallel', seriesModel.get('parallelIndex'));
      var coordSysDims = result.coordSysDims = parallelModel.dimensions.slice();
      each$h(parallelModel.parallelAxisIndex, function (axisIndex, index) {
        var axisModel = ecModel.getComponent('parallelAxis', axisIndex);
        var axisDim = coordSysDims[index];
        axisMap.set(axisDim, axisModel);

        if (isCategory(axisModel) && result.firstCategoryDimIndex == null) {
          categoryAxisMap.set(axisDim, axisModel);
          result.firstCategoryDimIndex = index;
        }
      });
    }
  };

  function isCategory(axisModel) {
    return axisModel.get('type') === 'category';
  }

  var getCoordSysInfoBySeries_1 = getCoordSysInfoBySeries;

  var referHelper = {
  	getCoordSysInfoBySeries: getCoordSysInfoBySeries_1
  };

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  var each$i = util.each;
  var isString$8 = util.isString;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * Note that it is too complicated to support 3d stack by value
   * (have to create two-dimension inverted index), so in 3d case
   * we just support that stacked by index.
   *
   * @param {module:echarts/model/Series} seriesModel
   * @param {Array.<string|Object>} dimensionInfoList The same as the input of <module:echarts/data/List>.
   *        The input dimensionInfoList will be modified.
   * @param {Object} [opt]
   * @param {boolean} [opt.stackedCoordDimension=''] Specify a coord dimension if needed.
   * @param {boolean} [opt.byIndex=false]
   * @return {Object} calculationInfo
   * {
   *     stackedDimension: string
   *     stackedByDimension: string
   *     isStackedByIndex: boolean
   *     stackedOverDimension: string
   *     stackResultDimension: string
   * }
   */
  function enableDataStack(seriesModel, dimensionInfoList, opt) {
    opt = opt || {};
    var byIndex = opt.byIndex;
    var stackedCoordDimension = opt.stackedCoordDimension; // Compatibal: when `stack` is set as '', do not stack.

    var mayStack = !!(seriesModel && seriesModel.get('stack'));
    var stackedByDimInfo;
    var stackedDimInfo;
    var stackResultDimension;
    var stackedOverDimension;
    each$i(dimensionInfoList, function (dimensionInfo, index) {
      if (isString$8(dimensionInfo)) {
        dimensionInfoList[index] = dimensionInfo = {
          name: dimensionInfo
        };
      }

      if (mayStack && !dimensionInfo.isExtraCoord) {
        // Find the first ordinal dimension as the stackedByDimInfo.
        if (!byIndex && !stackedByDimInfo && dimensionInfo.ordinalMeta) {
          stackedByDimInfo = dimensionInfo;
        } // Find the first stackable dimension as the stackedDimInfo.


        if (!stackedDimInfo && dimensionInfo.type !== 'ordinal' && dimensionInfo.type !== 'time' && (!stackedCoordDimension || stackedCoordDimension === dimensionInfo.coordDim)) {
          stackedDimInfo = dimensionInfo;
        }
      }
    });

    if (stackedDimInfo && !byIndex && !stackedByDimInfo) {
      // Compatible with previous design, value axis (time axis) only stack by index.
      // It may make sense if the user provides elaborately constructed data.
      byIndex = true;
    } // Add stack dimension, they can be both calculated by coordinate system in `unionExtent`.
    // That put stack logic in List is for using conveniently in echarts extensions, but it
    // might not be a good way.


    if (stackedDimInfo) {
      // Use a weird name that not duplicated with other names.
      stackResultDimension = '__\0ecstackresult';
      stackedOverDimension = '__\0ecstackedover'; // Create inverted index to fast query index by value.

      if (stackedByDimInfo) {
        stackedByDimInfo.createInvertedIndices = true;
      }

      var stackedDimCoordDim = stackedDimInfo.coordDim;
      var stackedDimType = stackedDimInfo.type;
      var stackedDimCoordIndex = 0;
      each$i(dimensionInfoList, function (dimensionInfo) {
        if (dimensionInfo.coordDim === stackedDimCoordDim) {
          stackedDimCoordIndex++;
        }
      });
      dimensionInfoList.push({
        name: stackResultDimension,
        coordDim: stackedDimCoordDim,
        coordDimIndex: stackedDimCoordIndex,
        type: stackedDimType,
        isExtraCoord: true,
        isCalculationCoord: true
      });
      stackedDimCoordIndex++;
      dimensionInfoList.push({
        name: stackedOverDimension,
        // This dimension contains stack base (generally, 0), so do not set it as
        // `stackedDimCoordDim` to avoid extent calculation, consider log scale.
        coordDim: stackedOverDimension,
        coordDimIndex: stackedDimCoordIndex,
        type: stackedDimType,
        isExtraCoord: true,
        isCalculationCoord: true
      });
    }

    return {
      stackedDimension: stackedDimInfo && stackedDimInfo.name,
      stackedByDimension: stackedByDimInfo && stackedByDimInfo.name,
      isStackedByIndex: byIndex,
      stackedOverDimension: stackedOverDimension,
      stackResultDimension: stackResultDimension
    };
  }
  /**
   * @param {module:echarts/data/List} data
   * @param {string} stackedDim
   */


  function isDimensionStacked(data, stackedDim
  /*, stackedByDim*/
  ) {
    // Each single series only maps to one pair of axis. So we do not need to
    // check stackByDim, whatever stacked by a dimension or stacked by index.
    return !!stackedDim && stackedDim === data.getCalculationInfo('stackedDimension'); // && (
    //     stackedByDim != null
    //         ? stackedByDim === data.getCalculationInfo('stackedByDimension')
    //         : data.getCalculationInfo('isStackedByIndex')
    // );
  }
  /**
   * @param {module:echarts/data/List} data
   * @param {string} targetDim
   * @param {string} [stackedByDim] If not input this parameter, check whether
   *                                stacked by index.
   * @return {string} dimension
   */


  function getStackedDimension(data, targetDim) {
    return isDimensionStacked(data, targetDim) ? data.getCalculationInfo('stackResultDimension') : targetDim;
  }

  var enableDataStack_1 = enableDataStack;
  var isDimensionStacked_1 = isDimensionStacked;
  var getStackedDimension_1 = getStackedDimension;

  var dataStackHelper = {
  	enableDataStack: enableDataStack_1,
  	isDimensionStacked: isDimensionStacked_1,
  	getStackedDimension: getStackedDimension_1
  };

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */









  var SOURCE_FORMAT_ORIGINAL$4 = sourceType.SOURCE_FORMAT_ORIGINAL;



  var getDimensionTypeByAxis$1 = dimensionHelper.getDimensionTypeByAxis;



  var getDataItemValue$3 = model.getDataItemValue;





  var getCoordSysInfoBySeries$1 = referHelper.getCoordSysInfoBySeries;





  var enableDataStack$1 = dataStackHelper.enableDataStack;



  var makeSeriesEncodeForAxisCoordSys$1 = sourceHelper.makeSeriesEncodeForAxisCoordSys;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * @param {module:echarts/data/Source|Array} source Or raw data.
   * @param {module:echarts/model/Series} seriesModel
   * @param {Object} [opt]
   * @param {string} [opt.generateCoord]
   * @param {boolean} [opt.useEncodeDefaulter]
   */
  function createListFromArray(source, seriesModel, opt) {
    opt = opt || {};

    if (!Source_1.isInstance(source)) {
      source = Source_1.seriesDataToSource(source);
    }

    var coordSysName = seriesModel.get('coordinateSystem');
    var registeredCoordSys = CoordinateSystem.get(coordSysName);
    var coordSysInfo = getCoordSysInfoBySeries$1(seriesModel);
    var coordSysDimDefs;

    if (coordSysInfo) {
      coordSysDimDefs = util.map(coordSysInfo.coordSysDims, function (dim) {
        var dimInfo = {
          name: dim
        };
        var axisModel = coordSysInfo.axisMap.get(dim);

        if (axisModel) {
          var axisType = axisModel.get('type');
          dimInfo.type = getDimensionTypeByAxis$1(axisType); // dimInfo.stackable = isStackable(axisType);
        }

        return dimInfo;
      });
    }

    if (!coordSysDimDefs) {
      // Get dimensions from registered coordinate system
      coordSysDimDefs = registeredCoordSys && (registeredCoordSys.getDimensionsInfo ? registeredCoordSys.getDimensionsInfo() : registeredCoordSys.dimensions.slice()) || ['x', 'y'];
    }

    var dimInfoList = createDimensions(source, {
      coordDimensions: coordSysDimDefs,
      generateCoord: opt.generateCoord,
      encodeDefaulter: opt.useEncodeDefaulter ? util.curry(makeSeriesEncodeForAxisCoordSys$1, coordSysDimDefs, seriesModel) : null
    });
    var firstCategoryDimIndex;
    var hasNameEncode;
    coordSysInfo && util.each(dimInfoList, function (dimInfo, dimIndex) {
      var coordDim = dimInfo.coordDim;
      var categoryAxisModel = coordSysInfo.categoryAxisMap.get(coordDim);

      if (categoryAxisModel) {
        if (firstCategoryDimIndex == null) {
          firstCategoryDimIndex = dimIndex;
        }

        dimInfo.ordinalMeta = categoryAxisModel.getOrdinalMeta();
      }

      if (dimInfo.otherDims.itemName != null) {
        hasNameEncode = true;
      }
    });

    if (!hasNameEncode && firstCategoryDimIndex != null) {
      dimInfoList[firstCategoryDimIndex].otherDims.itemName = 0;
    }

    var stackCalculationInfo = enableDataStack$1(seriesModel, dimInfoList);
    var list = new List_1(dimInfoList, seriesModel);
    list.setCalculationInfo(stackCalculationInfo);
    var dimValueGetter = firstCategoryDimIndex != null && isNeedCompleteOrdinalData(source) ? function (itemOpt, dimName, dataIndex, dimIndex) {
      // Use dataIndex as ordinal value in categoryAxis
      return dimIndex === firstCategoryDimIndex ? dataIndex : this.defaultDimValueGetter(itemOpt, dimName, dataIndex, dimIndex);
    } : null;
    list.hasItemOption = false;
    list.initData(source, null, dimValueGetter);
    return list;
  }

  function isNeedCompleteOrdinalData(source) {
    if (source.sourceFormat === SOURCE_FORMAT_ORIGINAL$4) {
      var sampleItem = firstDataNotNull(source.data || []);
      return sampleItem != null && !util.isArray(getDataItemValue$3(sampleItem));
    }
  }

  function firstDataNotNull(data) {
    var i = 0;

    while (i < data.length && data[i] == null) {
      i++;
    }

    return data[i];
  }

  var _default$1m = createListFromArray;
  var createListFromArray_1 = _default$1m;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * // Scale class management
   * @module echarts/scale/Scale
   */

  /**
   * @param {Object} [setting]
   */
  function Scale(setting) {
    this._setting = setting || {};
    /**
     * Extent
     * @type {Array.<number>}
     * @protected
     */

    this._extent = [Infinity, -Infinity];
    /**
     * Step is calculated in adjustExtent
     * @type {Array.<number>}
     * @protected
     */

    this._interval = 0;
    this.init && this.init.apply(this, arguments);
  }
  /**
   * Parse input val to valid inner number.
   * @param {*} val
   * @return {number}
   */


  Scale.prototype.parse = function (val) {
    // Notice: This would be a trap here, If the implementation
    // of this method depends on extent, and this method is used
    // before extent set (like in dataZoom), it would be wrong.
    // Nevertheless, parse does not depend on extent generally.
    return val;
  };

  Scale.prototype.getSetting = function (name) {
    return this._setting[name];
  };

  Scale.prototype.contain = function (val) {
    var extent = this._extent;
    return val >= extent[0] && val <= extent[1];
  };
  /**
   * Normalize value to linear [0, 1], return 0.5 if extent span is 0
   * @param {number} val
   * @return {number}
   */


  Scale.prototype.normalize = function (val) {
    var extent = this._extent;

    if (extent[1] === extent[0]) {
      return 0.5;
    }

    return (val - extent[0]) / (extent[1] - extent[0]);
  };
  /**
   * Scale normalized value
   * @param {number} val
   * @return {number}
   */


  Scale.prototype.scale = function (val) {
    var extent = this._extent;
    return val * (extent[1] - extent[0]) + extent[0];
  };
  /**
   * Set extent from data
   * @param {Array.<number>} other
   */


  Scale.prototype.unionExtent = function (other) {
    var extent = this._extent;
    other[0] < extent[0] && (extent[0] = other[0]);
    other[1] > extent[1] && (extent[1] = other[1]); // not setExtent because in log axis it may transformed to power
    // this.setExtent(extent[0], extent[1]);
  };
  /**
   * Set extent from data
   * @param {module:echarts/data/List} data
   * @param {string} dim
   */


  Scale.prototype.unionExtentFromData = function (data, dim) {
    this.unionExtent(data.getApproximateExtent(dim));
  };
  /**
   * Get extent
   * @return {Array.<number>}
   */


  Scale.prototype.getExtent = function () {
    return this._extent.slice();
  };
  /**
   * Set extent
   * @param {number} start
   * @param {number} end
   */


  Scale.prototype.setExtent = function (start, end) {
    var thisExtent = this._extent;

    if (!isNaN(start)) {
      thisExtent[0] = start;
    }

    if (!isNaN(end)) {
      thisExtent[1] = end;
    }
  };
  /**
   * When axis extent depends on data and no data exists,
   * axis ticks should not be drawn, which is named 'blank'.
   */


  Scale.prototype.isBlank = function () {
    return this._isBlank;
  },
  /**
   * When axis extent depends on data and no data exists,
   * axis ticks should not be drawn, which is named 'blank'.
   */
  Scale.prototype.setBlank = function (isBlank) {
    this._isBlank = isBlank;
  };
  /**
   * @abstract
   * @param {*} tick
   * @return {string} label of the tick.
   */

  Scale.prototype.getLabel = null;
  clazz.enableClassExtend(Scale);
  clazz.enableClassManagement(Scale, {
    registerWhenExtend: true
  });
  var _default$1n = Scale;
  var Scale_1 = _default$1n;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  var createHashMap$a = util.createHashMap;
  var isObject$b = util.isObject;
  var map$5 = util.map;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * @constructor
   * @param {Object} [opt]
   * @param {Object} [opt.categories=[]]
   * @param {Object} [opt.needCollect=false]
   * @param {Object} [opt.deduplication=false]
   */
  function OrdinalMeta(opt) {
    /**
     * @readOnly
     * @type {Array.<string>}
     */
    this.categories = opt.categories || [];
    /**
     * @private
     * @type {boolean}
     */

    this._needCollect = opt.needCollect;
    /**
     * @private
     * @type {boolean}
     */

    this._deduplication = opt.deduplication;
    /**
     * @private
     * @type {boolean}
     */

    this._map;
  }
  /**
   * @param {module:echarts/model/Model} axisModel
   * @return {module:echarts/data/OrdinalMeta}
   */


  OrdinalMeta.createByAxisModel = function (axisModel) {
    var option = axisModel.option;
    var data = option.data;
    var categories = data && map$5(data, getName);
    return new OrdinalMeta({
      categories: categories,
      needCollect: !categories,
      // deduplication is default in axis.
      deduplication: option.dedplication !== false
    });
  };

  var proto$1 = OrdinalMeta.prototype;
  /**
   * @param {string} category
   * @return {number} ordinal
   */

  proto$1.getOrdinal = function (category) {
    return getOrCreateMap(this).get(category);
  };
  /**
   * @param {*} category
   * @return {number} The ordinal. If not found, return NaN.
   */


  proto$1.parseAndCollect = function (category) {
    var index;
    var needCollect = this._needCollect; // The value of category dim can be the index of the given category set.
    // This feature is only supported when !needCollect, because we should
    // consider a common case: a value is 2017, which is a number but is
    // expected to be tread as a category. This case usually happen in dataset,
    // where it happent to be no need of the index feature.

    if (typeof category !== 'string' && !needCollect) {
      return category;
    } // Optimize for the scenario:
    // category is ['2012-01-01', '2012-01-02', ...], where the input
    // data has been ensured not duplicate and is large data.
    // Notice, if a dataset dimension provide categroies, usually echarts
    // should remove duplication except user tell echarts dont do that
    // (set axis.deduplication = false), because echarts do not know whether
    // the values in the category dimension has duplication (consider the
    // parallel-aqi example)


    if (needCollect && !this._deduplication) {
      index = this.categories.length;
      this.categories[index] = category;
      return index;
    }

    var map = getOrCreateMap(this);
    index = map.get(category);

    if (index == null) {
      if (needCollect) {
        index = this.categories.length;
        this.categories[index] = category;
        map.set(category, index);
      } else {
        index = NaN;
      }
    }

    return index;
  }; // Consider big data, do not create map until needed.


  function getOrCreateMap(ordinalMeta) {
    return ordinalMeta._map || (ordinalMeta._map = createHashMap$a(ordinalMeta.categories));
  }

  function getName(obj) {
    if (isObject$b(obj) && obj.value != null) {
      return obj.value;
    } else {
      return obj + '';
    }
  }

  var _default$1o = OrdinalMeta;
  var OrdinalMeta_1 = _default$1o;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */







  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * Linear continuous scale
   * @module echarts/coord/scale/Ordinal
   *
   * http://en.wikipedia.org/wiki/Level_of_measurement
   */
  // FIXME only one data
  var scaleProto = Scale_1.prototype;
  var OrdinalScale = Scale_1.extend({
    type: 'ordinal',

    /**
     * @param {module:echarts/data/OrdianlMeta|Array.<string>} ordinalMeta
     */
    init: function (ordinalMeta, extent) {
      // Caution: Should not use instanceof, consider ec-extensions using
      // import approach to get OrdinalMeta class.
      if (!ordinalMeta || util.isArray(ordinalMeta)) {
        ordinalMeta = new OrdinalMeta_1({
          categories: ordinalMeta
        });
      }

      this._ordinalMeta = ordinalMeta;
      this._extent = extent || [0, ordinalMeta.categories.length - 1];
    },
    parse: function (val) {
      return typeof val === 'string' ? this._ordinalMeta.getOrdinal(val) // val might be float.
      : Math.round(val);
    },
    contain: function (rank) {
      rank = this.parse(rank);
      return scaleProto.contain.call(this, rank) && this._ordinalMeta.categories[rank] != null;
    },

    /**
     * Normalize given rank or name to linear [0, 1]
     * @param {number|string} [val]
     * @return {number}
     */
    normalize: function (val) {
      return scaleProto.normalize.call(this, this.parse(val));
    },
    scale: function (val) {
      return Math.round(scaleProto.scale.call(this, val));
    },

    /**
     * @return {Array}
     */
    getTicks: function () {
      var ticks = [];
      var extent = this._extent;
      var rank = extent[0];

      while (rank <= extent[1]) {
        ticks.push(rank);
        rank++;
      }

      return ticks;
    },

    /**
     * Get item on rank n
     * @param {number} n
     * @return {string}
     */
    getLabel: function (n) {
      if (!this.isBlank()) {
        // Note that if no data, ordinalMeta.categories is an empty array.
        return this._ordinalMeta.categories[n];
      }
    },

    /**
     * @return {number}
     */
    count: function () {
      return this._extent[1] - this._extent[0] + 1;
    },

    /**
     * @override
     */
    unionExtentFromData: function (data, dim) {
      this.unionExtent(data.getApproximateExtent(dim));
    },
    getOrdinalMeta: function () {
      return this._ordinalMeta;
    },
    niceTicks: util.noop,
    niceExtent: util.noop
  });
  /**
   * @return {module:echarts/scale/Time}
   */

  OrdinalScale.create = function () {
    return new OrdinalScale();
  };

  var _default$1p = OrdinalScale;
  var Ordinal = _default$1p;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * For testable.
   */
  var roundNumber = number.round;
  /**
   * @param {Array.<number>} extent Both extent[0] and extent[1] should be valid number.
   *                                Should be extent[0] < extent[1].
   * @param {number} splitNumber splitNumber should be >= 1.
   * @param {number} [minInterval]
   * @param {number} [maxInterval]
   * @return {Object} {interval, intervalPrecision, niceTickExtent}
   */

  function intervalScaleNiceTicks(extent, splitNumber, minInterval, maxInterval) {
    var result = {};
    var span = extent[1] - extent[0];
    var interval = result.interval = number.nice(span / splitNumber, true);

    if (minInterval != null && interval < minInterval) {
      interval = result.interval = minInterval;
    }

    if (maxInterval != null && interval > maxInterval) {
      interval = result.interval = maxInterval;
    } // Tow more digital for tick.


    var precision = result.intervalPrecision = getIntervalPrecision(interval); // Niced extent inside original extent

    var niceTickExtent = result.niceTickExtent = [roundNumber(Math.ceil(extent[0] / interval) * interval, precision), roundNumber(Math.floor(extent[1] / interval) * interval, precision)];
    fixExtent(niceTickExtent, extent);
    return result;
  }
  /**
   * @param {number} interval
   * @return {number} interval precision
   */


  function getIntervalPrecision(interval) {
    // Tow more digital for tick.
    return number.getPrecisionSafe(interval) + 2;
  }

  function clamp(niceTickExtent, idx, extent) {
    niceTickExtent[idx] = Math.max(Math.min(niceTickExtent[idx], extent[1]), extent[0]);
  } // In some cases (e.g., splitNumber is 1), niceTickExtent may be out of extent.


  function fixExtent(niceTickExtent, extent) {
    !isFinite(niceTickExtent[0]) && (niceTickExtent[0] = extent[0]);
    !isFinite(niceTickExtent[1]) && (niceTickExtent[1] = extent[1]);
    clamp(niceTickExtent, 0, extent);
    clamp(niceTickExtent, 1, extent);

    if (niceTickExtent[0] > niceTickExtent[1]) {
      niceTickExtent[0] = niceTickExtent[1];
    }
  }

  var intervalScaleNiceTicks_1 = intervalScaleNiceTicks;
  var getIntervalPrecision_1 = getIntervalPrecision;
  var fixExtent_1 = fixExtent;

  var helper = {
  	intervalScaleNiceTicks: intervalScaleNiceTicks_1,
  	getIntervalPrecision: getIntervalPrecision_1,
  	fixExtent: fixExtent_1
  };

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */









  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * Interval scale
   * @module echarts/scale/Interval
   */
  var roundNumber$1 = number.round;
  /**
   * @alias module:echarts/coord/scale/Interval
   * @constructor
   */

  var IntervalScale = Scale_1.extend({
    type: 'interval',
    _interval: 0,
    _intervalPrecision: 2,
    setExtent: function (start, end) {
      var thisExtent = this._extent; //start,end may be a Number like '25',so...

      if (!isNaN(start)) {
        thisExtent[0] = parseFloat(start);
      }

      if (!isNaN(end)) {
        thisExtent[1] = parseFloat(end);
      }
    },
    unionExtent: function (other) {
      var extent = this._extent;
      other[0] < extent[0] && (extent[0] = other[0]);
      other[1] > extent[1] && (extent[1] = other[1]); // unionExtent may called by it's sub classes

      IntervalScale.prototype.setExtent.call(this, extent[0], extent[1]);
    },

    /**
     * Get interval
     */
    getInterval: function () {
      return this._interval;
    },

    /**
     * Set interval
     */
    setInterval: function (interval) {
      this._interval = interval; // Dropped auto calculated niceExtent and use user setted extent
      // We assume user wan't to set both interval, min, max to get a better result

      this._niceExtent = this._extent.slice();
      this._intervalPrecision = helper.getIntervalPrecision(interval);
    },

    /**
     * @param {boolean} [expandToNicedExtent=false] If expand the ticks to niced extent.
     * @return {Array.<number>}
     */
    getTicks: function (expandToNicedExtent) {
      var interval = this._interval;
      var extent = this._extent;
      var niceTickExtent = this._niceExtent;
      var intervalPrecision = this._intervalPrecision;
      var ticks = []; // If interval is 0, return [];

      if (!interval) {
        return ticks;
      } // Consider this case: using dataZoom toolbox, zoom and zoom.


      var safeLimit = 10000;

      if (extent[0] < niceTickExtent[0]) {
        if (expandToNicedExtent) {
          ticks.push(roundNumber$1(niceTickExtent[0] - interval, intervalPrecision));
        } else {
          ticks.push(extent[0]);
        }
      }

      var tick = niceTickExtent[0];

      while (tick <= niceTickExtent[1]) {
        ticks.push(tick); // Avoid rounding error

        tick = roundNumber$1(tick + interval, intervalPrecision);

        if (tick === ticks[ticks.length - 1]) {
          // Consider out of safe float point, e.g.,
          // -3711126.9907707 + 2e-10 === -3711126.9907707
          break;
        }

        if (ticks.length > safeLimit) {
          return [];
        }
      } // Consider this case: the last item of ticks is smaller
      // than niceTickExtent[1] and niceTickExtent[1] === extent[1].


      var lastNiceTick = ticks.length ? ticks[ticks.length - 1] : niceTickExtent[1];

      if (extent[1] > lastNiceTick) {
        if (expandToNicedExtent) {
          ticks.push(roundNumber$1(lastNiceTick + interval, intervalPrecision));
        } else {
          ticks.push(extent[1]);
        }
      }

      return ticks;
    },

    /**
     * @param {number} [splitNumber=5]
     * @return {Array.<Array.<number>>}
     */
    getMinorTicks: function (splitNumber) {
      var ticks = this.getTicks(true);
      var minorTicks = [];
      var extent = this.getExtent();

      for (var i = 1; i < ticks.length; i++) {
        var nextTick = ticks[i];
        var prevTick = ticks[i - 1];
        var count = 0;
        var minorTicksGroup = [];
        var interval = nextTick - prevTick;
        var minorInterval = interval / splitNumber;

        while (count < splitNumber - 1) {
          var minorTick = number.round(prevTick + (count + 1) * minorInterval); // For the first and last interval. The count may be less than splitNumber.

          if (minorTick > extent[0] && minorTick < extent[1]) {
            minorTicksGroup.push(minorTick);
          }

          count++;
        }

        minorTicks.push(minorTicksGroup);
      }

      return minorTicks;
    },

    /**
     * @param {number} data
     * @param {Object} [opt]
     * @param {number|string} [opt.precision] If 'auto', use nice presision.
     * @param {boolean} [opt.pad] returns 1.50 but not 1.5 if precision is 2.
     * @return {string}
     */
    getLabel: function (data, opt) {
      if (data == null) {
        return '';
      }

      var precision = opt && opt.precision;

      if (precision == null) {
        precision = number.getPrecisionSafe(data) || 0;
      } else if (precision === 'auto') {
        // Should be more precise then tick.
        precision = this._intervalPrecision;
      } // (1) If `precision` is set, 12.005 should be display as '12.00500'.
      // (2) Use roundNumber (toFixed) to avoid scientific notation like '3.5e-7'.


      data = roundNumber$1(data, precision, true);
      return format.addCommas(data);
    },

    /**
     * Update interval and extent of intervals for nice ticks
     *
     * @param {number} [splitNumber = 5] Desired number of ticks
     * @param {number} [minInterval]
     * @param {number} [maxInterval]
     */
    niceTicks: function (splitNumber, minInterval, maxInterval) {
      splitNumber = splitNumber || 5;
      var extent = this._extent;
      var span = extent[1] - extent[0];

      if (!isFinite(span)) {
        return;
      } // User may set axis min 0 and data are all negative
      // FIXME If it needs to reverse ?


      if (span < 0) {
        span = -span;
        extent.reverse();
      }

      var result = helper.intervalScaleNiceTicks(extent, splitNumber, minInterval, maxInterval);
      this._intervalPrecision = result.intervalPrecision;
      this._interval = result.interval;
      this._niceExtent = result.niceTickExtent;
    },

    /**
     * Nice extent.
     * @param {Object} opt
     * @param {number} [opt.splitNumber = 5] Given approx tick number
     * @param {boolean} [opt.fixMin=false]
     * @param {boolean} [opt.fixMax=false]
     * @param {boolean} [opt.minInterval]
     * @param {boolean} [opt.maxInterval]
     */
    niceExtent: function (opt) {
      var extent = this._extent; // If extent start and end are same, expand them

      if (extent[0] === extent[1]) {
        if (extent[0] !== 0) {
          // Expand extent
          var expandSize = extent[0]; // In the fowllowing case
          //      Axis has been fixed max 100
          //      Plus data are all 100 and axis extent are [100, 100].
          // Extend to the both side will cause expanded max is larger than fixed max.
          // So only expand to the smaller side.

          if (!opt.fixMax) {
            extent[1] += expandSize / 2;
            extent[0] -= expandSize / 2;
          } else {
            extent[0] -= expandSize / 2;
          }
        } else {
          extent[1] = 1;
        }
      }

      var span = extent[1] - extent[0]; // If there are no data and extent are [Infinity, -Infinity]

      if (!isFinite(span)) {
        extent[0] = 0;
        extent[1] = 1;
      }

      this.niceTicks(opt.splitNumber, opt.minInterval, opt.maxInterval); // var extent = this._extent;

      var interval = this._interval;

      if (!opt.fixMin) {
        extent[0] = roundNumber$1(Math.floor(extent[0] / interval) * interval);
      }

      if (!opt.fixMax) {
        extent[1] = roundNumber$1(Math.ceil(extent[1] / interval) * interval);
      }
    }
  });
  /**
   * @return {module:echarts/scale/Time}
   */

  IntervalScale.create = function () {
    return new IntervalScale();
  };

  var _default$1q = IntervalScale;
  var Interval = _default$1q;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */





  var parsePercent$3 = number.parsePercent;



  var isDimensionStacked$1 = dataStackHelper.isDimensionStacked;



  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /* global Float32Array */
  var STACK_PREFIX = '__ec_stack_';
  var LARGE_BAR_MIN_WIDTH = 0.5;
  var LargeArr = typeof Float32Array !== 'undefined' ? Float32Array : Array;

  function getSeriesStackId(seriesModel) {
    return seriesModel.get('stack') || STACK_PREFIX + seriesModel.seriesIndex;
  }

  function getAxisKey(axis) {
    return axis.dim + axis.index;
  }
  /**
   * @param {Object} opt
   * @param {module:echarts/coord/Axis} opt.axis Only support category axis currently.
   * @param {number} opt.count Positive interger.
   * @param {number} [opt.barWidth]
   * @param {number} [opt.barMaxWidth]
   * @param {number} [opt.barMinWidth]
   * @param {number} [opt.barGap]
   * @param {number} [opt.barCategoryGap]
   * @return {Object} {width, offset, offsetCenter} If axis.type is not 'category', return undefined.
   */


  function getLayoutOnAxis(opt) {
    var params = [];
    var baseAxis = opt.axis;
    var axisKey = 'axis0';

    if (baseAxis.type !== 'category') {
      return;
    }

    var bandWidth = baseAxis.getBandWidth();

    for (var i = 0; i < opt.count || 0; i++) {
      params.push(util.defaults({
        bandWidth: bandWidth,
        axisKey: axisKey,
        stackId: STACK_PREFIX + i
      }, opt));
    }

    var widthAndOffsets = doCalBarWidthAndOffset(params);
    var result = [];

    for (var i = 0; i < opt.count; i++) {
      var item = widthAndOffsets[axisKey][STACK_PREFIX + i];
      item.offsetCenter = item.offset + item.width / 2;
      result.push(item);
    }

    return result;
  }

  function prepareLayoutBarSeries(seriesType, ecModel) {
    var seriesModels = [];
    ecModel.eachSeriesByType(seriesType, function (seriesModel) {
      // Check series coordinate, do layout for cartesian2d only
      if (isOnCartesian(seriesModel) && !isInLargeMode(seriesModel)) {
        seriesModels.push(seriesModel);
      }
    });
    return seriesModels;
  }
  /**
   * Map from (baseAxis.dim + '_' + baseAxis.index) to min gap of two adjacent
   * values.
   * This works for time axes, value axes, and log axes.
   * For a single time axis, return value is in the form like
   * {'x_0': [1000000]}.
   * The value of 1000000 is in milliseconds.
   */


  function getValueAxesMinGaps(barSeries) {
    /**
     * Map from axis.index to values.
     * For a single time axis, axisValues is in the form like
     * {'x_0': [1495555200000, 1495641600000, 1495728000000]}.
     * Items in axisValues[x], e.g. 1495555200000, are time values of all
     * series.
     */
    var axisValues = {};
    util.each(barSeries, function (seriesModel) {
      var cartesian = seriesModel.coordinateSystem;
      var baseAxis = cartesian.getBaseAxis();

      if (baseAxis.type !== 'time' && baseAxis.type !== 'value') {
        return;
      }

      var data = seriesModel.getData();
      var key = baseAxis.dim + '_' + baseAxis.index;
      var dim = data.mapDimension(baseAxis.dim);

      for (var i = 0, cnt = data.count(); i < cnt; ++i) {
        var value = data.get(dim, i);

        if (!axisValues[key]) {
          // No previous data for the axis
          axisValues[key] = [value];
        } else {
          // No value in previous series
          axisValues[key].push(value);
        } // Ignore duplicated time values in the same axis

      }
    });
    var axisMinGaps = [];

    for (var key in axisValues) {
      if (axisValues.hasOwnProperty(key)) {
        var valuesInAxis = axisValues[key];

        if (valuesInAxis) {
          // Sort axis values into ascending order to calculate gaps
          valuesInAxis.sort(function (a, b) {
            return a - b;
          });
          var min = null;

          for (var j = 1; j < valuesInAxis.length; ++j) {
            var delta = valuesInAxis[j] - valuesInAxis[j - 1];

            if (delta > 0) {
              // Ignore 0 delta because they are of the same axis value
              min = min === null ? delta : Math.min(min, delta);
            }
          } // Set to null if only have one data


          axisMinGaps[key] = min;
        }
      }
    }

    return axisMinGaps;
  }

  function makeColumnLayout(barSeries) {
    var axisMinGaps = getValueAxesMinGaps(barSeries);
    var seriesInfoList = [];
    util.each(barSeries, function (seriesModel) {
      var cartesian = seriesModel.coordinateSystem;
      var baseAxis = cartesian.getBaseAxis();
      var axisExtent = baseAxis.getExtent();
      var bandWidth;

      if (baseAxis.type === 'category') {
        bandWidth = baseAxis.getBandWidth();
      } else if (baseAxis.type === 'value' || baseAxis.type === 'time') {
        var key = baseAxis.dim + '_' + baseAxis.index;
        var minGap = axisMinGaps[key];
        var extentSpan = Math.abs(axisExtent[1] - axisExtent[0]);
        var scale = baseAxis.scale.getExtent();
        var scaleSpan = Math.abs(scale[1] - scale[0]);
        bandWidth = minGap ? extentSpan / scaleSpan * minGap : extentSpan; // When there is only one data value
      } else {
        var data = seriesModel.getData();
        bandWidth = Math.abs(axisExtent[1] - axisExtent[0]) / data.count();
      }

      var barWidth = parsePercent$3(seriesModel.get('barWidth'), bandWidth);
      var barMaxWidth = parsePercent$3(seriesModel.get('barMaxWidth'), bandWidth);
      var barMinWidth = parsePercent$3( // barMinWidth by default is 1 in cartesian. Because in value axis,
      // the auto-calculated bar width might be less than 1.
      seriesModel.get('barMinWidth') || 1, bandWidth);
      var barGap = seriesModel.get('barGap');
      var barCategoryGap = seriesModel.get('barCategoryGap');
      seriesInfoList.push({
        bandWidth: bandWidth,
        barWidth: barWidth,
        barMaxWidth: barMaxWidth,
        barMinWidth: barMinWidth,
        barGap: barGap,
        barCategoryGap: barCategoryGap,
        axisKey: getAxisKey(baseAxis),
        stackId: getSeriesStackId(seriesModel)
      });
    });
    return doCalBarWidthAndOffset(seriesInfoList);
  }

  function doCalBarWidthAndOffset(seriesInfoList) {
    // Columns info on each category axis. Key is cartesian name
    var columnsMap = {};
    util.each(seriesInfoList, function (seriesInfo, idx) {
      var axisKey = seriesInfo.axisKey;
      var bandWidth = seriesInfo.bandWidth;
      var columnsOnAxis = columnsMap[axisKey] || {
        bandWidth: bandWidth,
        remainedWidth: bandWidth,
        autoWidthCount: 0,
        categoryGap: '20%',
        gap: '30%',
        stacks: {}
      };
      var stacks = columnsOnAxis.stacks;
      columnsMap[axisKey] = columnsOnAxis;
      var stackId = seriesInfo.stackId;

      if (!stacks[stackId]) {
        columnsOnAxis.autoWidthCount++;
      }

      stacks[stackId] = stacks[stackId] || {
        width: 0,
        maxWidth: 0
      }; // Caution: In a single coordinate system, these barGrid attributes
      // will be shared by series. Consider that they have default values,
      // only the attributes set on the last series will work.
      // Do not change this fact unless there will be a break change.

      var barWidth = seriesInfo.barWidth;

      if (barWidth && !stacks[stackId].width) {
        // See #6312, do not restrict width.
        stacks[stackId].width = barWidth;
        barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);
        columnsOnAxis.remainedWidth -= barWidth;
      }

      var barMaxWidth = seriesInfo.barMaxWidth;
      barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);
      var barMinWidth = seriesInfo.barMinWidth;
      barMinWidth && (stacks[stackId].minWidth = barMinWidth);
      var barGap = seriesInfo.barGap;
      barGap != null && (columnsOnAxis.gap = barGap);
      var barCategoryGap = seriesInfo.barCategoryGap;
      barCategoryGap != null && (columnsOnAxis.categoryGap = barCategoryGap);
    });
    var result = {};
    util.each(columnsMap, function (columnsOnAxis, coordSysName) {
      result[coordSysName] = {};
      var stacks = columnsOnAxis.stacks;
      var bandWidth = columnsOnAxis.bandWidth;
      var categoryGap = parsePercent$3(columnsOnAxis.categoryGap, bandWidth);
      var barGapPercent = parsePercent$3(columnsOnAxis.gap, 1);
      var remainedWidth = columnsOnAxis.remainedWidth;
      var autoWidthCount = columnsOnAxis.autoWidthCount;
      var autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
      autoWidth = Math.max(autoWidth, 0); // Find if any auto calculated bar exceeded maxBarWidth

      util.each(stacks, function (column) {
        var maxWidth = column.maxWidth;
        var minWidth = column.minWidth;

        if (!column.width) {
          var finalWidth = autoWidth;

          if (maxWidth && maxWidth < finalWidth) {
            finalWidth = Math.min(maxWidth, remainedWidth);
          } // `minWidth` has higher priority. `minWidth` decide that wheter the
          // bar is able to be visible. So `minWidth` should not be restricted
          // by `maxWidth` or `remainedWidth` (which is from `bandWidth`). In
          // the extreme cases for `value` axis, bars are allowed to overlap
          // with each other if `minWidth` specified.


          if (minWidth && minWidth > finalWidth) {
            finalWidth = minWidth;
          }

          if (finalWidth !== autoWidth) {
            column.width = finalWidth;
            remainedWidth -= finalWidth + barGapPercent * finalWidth;
            autoWidthCount--;
          }
        } else {
          // `barMinWidth/barMaxWidth` has higher priority than `barWidth`, as
          // CSS does. Becuase barWidth can be a percent value, where
          // `barMaxWidth` can be used to restrict the final width.
          var finalWidth = column.width;

          if (maxWidth) {
            finalWidth = Math.min(finalWidth, maxWidth);
          } // `minWidth` has higher priority, as described above


          if (minWidth) {
            finalWidth = Math.max(finalWidth, minWidth);
          }

          column.width = finalWidth;
          remainedWidth -= finalWidth + barGapPercent * finalWidth;
          autoWidthCount--;
        }
      }); // Recalculate width again

      autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
      autoWidth = Math.max(autoWidth, 0);
      var widthSum = 0;
      var lastColumn;
      util.each(stacks, function (column, idx) {
        if (!column.width) {
          column.width = autoWidth;
        }

        lastColumn = column;
        widthSum += column.width * (1 + barGapPercent);
      });

      if (lastColumn) {
        widthSum -= lastColumn.width * barGapPercent;
      }

      var offset = -widthSum / 2;
      util.each(stacks, function (column, stackId) {
        result[coordSysName][stackId] = result[coordSysName][stackId] || {
          bandWidth: bandWidth,
          offset: offset,
          width: column.width
        };
        offset += column.width * (1 + barGapPercent);
      });
    });
    return result;
  }
  /**
   * @param {Object} barWidthAndOffset The result of makeColumnLayout
   * @param {module:echarts/coord/Axis} axis
   * @param {module:echarts/model/Series} [seriesModel] If not provided, return all.
   * @return {Object} {stackId: {offset, width}} or {offset, width} if seriesModel provided.
   */


  function retrieveColumnLayout(barWidthAndOffset, axis, seriesModel) {
    if (barWidthAndOffset && axis) {
      var result = barWidthAndOffset[getAxisKey(axis)];

      if (result != null && seriesModel != null) {
        result = result[getSeriesStackId(seriesModel)];
      }

      return result;
    }
  }
  /**
   * @param {string} seriesType
   * @param {module:echarts/model/Global} ecModel
   */


  function layout$1(seriesType, ecModel) {
    var seriesModels = prepareLayoutBarSeries(seriesType, ecModel);
    var barWidthAndOffset = makeColumnLayout(seriesModels);
    var lastStackCoords = {};
    util.each(seriesModels, function (seriesModel) {
      var data = seriesModel.getData();
      var cartesian = seriesModel.coordinateSystem;
      var baseAxis = cartesian.getBaseAxis();
      var stackId = getSeriesStackId(seriesModel);
      var columnLayoutInfo = barWidthAndOffset[getAxisKey(baseAxis)][stackId];
      var columnOffset = columnLayoutInfo.offset;
      var columnWidth = columnLayoutInfo.width;
      var valueAxis = cartesian.getOtherAxis(baseAxis);
      var barMinHeight = seriesModel.get('barMinHeight') || 0;
      lastStackCoords[stackId] = lastStackCoords[stackId] || [];

      data.setLayout({
        bandWidth: columnLayoutInfo.bandWidth,
        offset: columnOffset,
        size: columnWidth
      });
      var valueDim = data.mapDimension(valueAxis.dim);
      var baseDim = data.mapDimension(baseAxis.dim);
      var stacked = isDimensionStacked$1(data, valueDim
      /*, baseDim*/
      );
      var isValueAxisH = valueAxis.isHorizontal();
      var valueAxisStart = getValueAxisStart(baseAxis, valueAxis);

      for (var idx = 0, len = data.count(); idx < len; idx++) {
        var value = data.get(valueDim, idx);
        var baseValue = data.get(baseDim, idx);
        var sign = value >= 0 ? 'p' : 'n';
        var baseCoord = valueAxisStart; // Because of the barMinHeight, we can not use the value in
        // stackResultDimension directly.

        if (stacked) {
          // Only ordinal axis can be stacked.
          if (!lastStackCoords[stackId][baseValue]) {
            lastStackCoords[stackId][baseValue] = {
              p: valueAxisStart,
              // Positive stack
              n: valueAxisStart // Negative stack

            };
          } // Should also consider #4243


          baseCoord = lastStackCoords[stackId][baseValue][sign];
        }

        var x;
        var y;
        var width;
        var height;

        if (isValueAxisH) {
          var coord = cartesian.dataToPoint([value, baseValue]);
          x = baseCoord;
          y = coord[1] + columnOffset;
          width = coord[0] - valueAxisStart;
          height = columnWidth;

          if (Math.abs(width) < barMinHeight) {
            width = (width < 0 ? -1 : 1) * barMinHeight;
          } // Ignore stack from NaN value


          if (!isNaN(width)) {
            stacked && (lastStackCoords[stackId][baseValue][sign] += width);
          }
        } else {
          var coord = cartesian.dataToPoint([baseValue, value]);
          x = coord[0] + columnOffset;
          y = baseCoord;
          width = columnWidth;
          height = coord[1] - valueAxisStart;

          if (Math.abs(height) < barMinHeight) {
            // Include zero to has a positive bar
            height = (height <= 0 ? -1 : 1) * barMinHeight;
          } // Ignore stack from NaN value


          if (!isNaN(height)) {
            stacked && (lastStackCoords[stackId][baseValue][sign] += height);
          }
        }

        data.setItemLayout(idx, {
          x: x,
          y: y,
          width: width,
          height: height
        });
      }
    }, this);
  } // TODO: Do not support stack in large mode yet.


  var largeLayout = {
    seriesType: 'bar',
    plan: createRenderPlanner(),
    reset: function (seriesModel) {
      if (!isOnCartesian(seriesModel) || !isInLargeMode(seriesModel)) {
        return;
      }

      var data = seriesModel.getData();
      var cartesian = seriesModel.coordinateSystem;
      var coordLayout = cartesian.grid.getRect();
      var baseAxis = cartesian.getBaseAxis();
      var valueAxis = cartesian.getOtherAxis(baseAxis);
      var valueDim = data.mapDimension(valueAxis.dim);
      var baseDim = data.mapDimension(baseAxis.dim);
      var valueAxisHorizontal = valueAxis.isHorizontal();
      var valueDimIdx = valueAxisHorizontal ? 0 : 1;
      var barWidth = retrieveColumnLayout(makeColumnLayout([seriesModel]), baseAxis, seriesModel).width;

      if (!(barWidth > LARGE_BAR_MIN_WIDTH)) {
        // jshint ignore:line
        barWidth = LARGE_BAR_MIN_WIDTH;
      }

      return {
        progress: progress
      };

      function progress(params, data) {
        var count = params.count;
        var largePoints = new LargeArr(count * 2);
        var largeBackgroundPoints = new LargeArr(count * 2);
        var largeDataIndices = new LargeArr(count);
        var dataIndex;
        var coord = [];
        var valuePair = [];
        var pointsOffset = 0;
        var idxOffset = 0;

        while ((dataIndex = params.next()) != null) {
          valuePair[valueDimIdx] = data.get(valueDim, dataIndex);
          valuePair[1 - valueDimIdx] = data.get(baseDim, dataIndex);
          coord = cartesian.dataToPoint(valuePair, null, coord); // Data index might not be in order, depends on `progressiveChunkMode`.

          largeBackgroundPoints[pointsOffset] = valueAxisHorizontal ? coordLayout.x + coordLayout.width : coord[0];
          largePoints[pointsOffset++] = coord[0];
          largeBackgroundPoints[pointsOffset] = valueAxisHorizontal ? coord[1] : coordLayout.y + coordLayout.height;
          largePoints[pointsOffset++] = coord[1];
          largeDataIndices[idxOffset++] = dataIndex;
        }

        data.setLayout({
          largePoints: largePoints,
          largeDataIndices: largeDataIndices,
          largeBackgroundPoints: largeBackgroundPoints,
          barWidth: barWidth,
          valueAxisStart: getValueAxisStart(baseAxis, valueAxis),
          backgroundStart: valueAxisHorizontal ? coordLayout.x : coordLayout.y,
          valueAxisHorizontal: valueAxisHorizontal
        });
      }
    }
  };

  function isOnCartesian(seriesModel) {
    return seriesModel.coordinateSystem && seriesModel.coordinateSystem.type === 'cartesian2d';
  }

  function isInLargeMode(seriesModel) {
    return seriesModel.pipelineContext && seriesModel.pipelineContext.large;
  } // See cases in `test/bar-start.html` and `#7412`, `#8747`.


  function getValueAxisStart(baseAxis, valueAxis, stacked) {
    return valueAxis.toGlobalCoord(valueAxis.dataToCoord(valueAxis.type === 'log' ? 1 : 0));
  }

  var getLayoutOnAxis_1 = getLayoutOnAxis;
  var prepareLayoutBarSeries_1 = prepareLayoutBarSeries;
  var makeColumnLayout_1 = makeColumnLayout;
  var retrieveColumnLayout_1 = retrieveColumnLayout;
  var layout_1 = layout$1;
  var largeLayout_1 = largeLayout;

  var barGrid = {
  	getLayoutOnAxis: getLayoutOnAxis_1,
  	prepareLayoutBarSeries: prepareLayoutBarSeries_1,
  	makeColumnLayout: makeColumnLayout_1,
  	retrieveColumnLayout: retrieveColumnLayout_1,
  	layout: layout_1,
  	largeLayout: largeLayout_1
  };

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */











  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /*
  * A third-party license is embeded for some of the code in this file:
  * The "scaleLevels" was originally copied from "d3.js" with some
  * modifications made for this project.
  * (See more details in the comment on the definition of "scaleLevels" below.)
  * The use of the source code of this file is also subject to the terms
  * and consitions of the license of "d3.js" (BSD-3Clause, see
  * </licenses/LICENSE-d3>).
  */
  // [About UTC and local time zone]:
  // In most cases, `number.parseDate` will treat input data string as local time
  // (except time zone is specified in time string). And `format.formateTime` returns
  // local time by default. option.useUTC is false by default. This design have
  // concidered these common case:
  // (1) Time that is persistent in server is in UTC, but it is needed to be diplayed
  // in local time by default.
  // (2) By default, the input data string (e.g., '2011-01-02') should be displayed
  // as its original time, without any time difference.
  var intervalScaleProto = Interval.prototype;
  var mathCeil = Math.ceil;
  var mathFloor = Math.floor;
  var ONE_SECOND = 1000;
  var ONE_MINUTE = ONE_SECOND * 60;
  var ONE_HOUR = ONE_MINUTE * 60;
  var ONE_DAY = ONE_HOUR * 24; // FIXME 公用？

  var bisect = function (a, x, lo, hi) {
    while (lo < hi) {
      var mid = lo + hi >>> 1;

      if (a[mid][1] < x) {
        lo = mid + 1;
      } else {
        hi = mid;
      }
    }

    return lo;
  };
  /**
   * @alias module:echarts/coord/scale/Time
   * @constructor
   */


  var TimeScale = Interval.extend({
    type: 'time',

    /**
     * @override
     */
    getLabel: function (val) {
      var stepLvl = this._stepLvl;
      var date = new Date(val);
      return format.formatTime(stepLvl[0], date, this.getSetting('useUTC'));
    },

    /**
     * @override
     */
    niceExtent: function (opt) {
      var extent = this._extent; // If extent start and end are same, expand them

      if (extent[0] === extent[1]) {
        // Expand extent
        extent[0] -= ONE_DAY;
        extent[1] += ONE_DAY;
      } // If there are no data and extent are [Infinity, -Infinity]


      if (extent[1] === -Infinity && extent[0] === Infinity) {
        var d = new Date();
        extent[1] = +new Date(d.getFullYear(), d.getMonth(), d.getDate());
        extent[0] = extent[1] - ONE_DAY;
      }

      this.niceTicks(opt.splitNumber, opt.minInterval, opt.maxInterval); // var extent = this._extent;

      var interval = this._interval;

      if (!opt.fixMin) {
        extent[0] = number.round(mathFloor(extent[0] / interval) * interval);
      }

      if (!opt.fixMax) {
        extent[1] = number.round(mathCeil(extent[1] / interval) * interval);
      }
    },

    /**
     * @override
     */
    niceTicks: function (approxTickNum, minInterval, maxInterval) {
      approxTickNum = approxTickNum || 10;
      var extent = this._extent;
      var span = extent[1] - extent[0];
      var approxInterval = span / approxTickNum;

      if (minInterval != null && approxInterval < minInterval) {
        approxInterval = minInterval;
      }

      if (maxInterval != null && approxInterval > maxInterval) {
        approxInterval = maxInterval;
      }

      var scaleLevelsLen = scaleLevels.length;
      var idx = bisect(scaleLevels, approxInterval, 0, scaleLevelsLen);
      var level = scaleLevels[Math.min(idx, scaleLevelsLen - 1)];
      var interval = level[1]; // Same with interval scale if span is much larger than 1 year

      if (level[0] === 'year') {
        var yearSpan = span / interval; // From "Nice Numbers for Graph Labels" of Graphic Gems
        // var niceYearSpan = numberUtil.nice(yearSpan, false);

        var yearStep = number.nice(yearSpan / approxTickNum, true);
        interval *= yearStep;
      }

      var timezoneOffset = this.getSetting('useUTC') ? 0 : new Date(+extent[0] || +extent[1]).getTimezoneOffset() * 60 * 1000;
      var niceExtent = [Math.round(mathCeil((extent[0] - timezoneOffset) / interval) * interval + timezoneOffset), Math.round(mathFloor((extent[1] - timezoneOffset) / interval) * interval + timezoneOffset)];
      helper.fixExtent(niceExtent, extent);
      this._stepLvl = level; // Interval will be used in getTicks

      this._interval = interval;
      this._niceExtent = niceExtent;
    },
    parse: function (val) {
      // val might be float.
      return +number.parseDate(val);
    }
  });
  util.each(['contain', 'normalize'], function (methodName) {
    TimeScale.prototype[methodName] = function (val) {
      return intervalScaleProto[methodName].call(this, this.parse(val));
    };
  });
  /**
   * This implementation was originally copied from "d3.js"
   * <https://github.com/d3/d3/blob/b516d77fb8566b576088e73410437494717ada26/src/time/scale.js>
   * with some modifications made for this program.
   * See the license statement at the head of this file.
   */

  var scaleLevels = [// Format              interval
  ['hh:mm:ss', ONE_SECOND], // 1s
  ['hh:mm:ss', ONE_SECOND * 5], // 5s
  ['hh:mm:ss', ONE_SECOND * 10], // 10s
  ['hh:mm:ss', ONE_SECOND * 15], // 15s
  ['hh:mm:ss', ONE_SECOND * 30], // 30s
  ['hh:mm\nMM-dd', ONE_MINUTE], // 1m
  ['hh:mm\nMM-dd', ONE_MINUTE * 5], // 5m
  ['hh:mm\nMM-dd', ONE_MINUTE * 10], // 10m
  ['hh:mm\nMM-dd', ONE_MINUTE * 15], // 15m
  ['hh:mm\nMM-dd', ONE_MINUTE * 30], // 30m
  ['hh:mm\nMM-dd', ONE_HOUR], // 1h
  ['hh:mm\nMM-dd', ONE_HOUR * 2], // 2h
  ['hh:mm\nMM-dd', ONE_HOUR * 6], // 6h
  ['hh:mm\nMM-dd', ONE_HOUR * 12], // 12h
  ['MM-dd\nyyyy', ONE_DAY], // 1d
  ['MM-dd\nyyyy', ONE_DAY * 2], // 2d
  ['MM-dd\nyyyy', ONE_DAY * 3], // 3d
  ['MM-dd\nyyyy', ONE_DAY * 4], // 4d
  ['MM-dd\nyyyy', ONE_DAY * 5], // 5d
  ['MM-dd\nyyyy', ONE_DAY * 6], // 6d
  ['week', ONE_DAY * 7], // 7d
  ['MM-dd\nyyyy', ONE_DAY * 10], // 10d
  ['week', ONE_DAY * 14], // 2w
  ['week', ONE_DAY * 21], // 3w
  ['month', ONE_DAY * 31], // 1M
  ['week', ONE_DAY * 42], // 6w
  ['month', ONE_DAY * 62], // 2M
  ['week', ONE_DAY * 70], // 10w
  ['quarter', ONE_DAY * 95], // 3M
  ['month', ONE_DAY * 31 * 4], // 4M
  ['month', ONE_DAY * 31 * 5], // 5M
  ['half-year', ONE_DAY * 380 / 2], // 6M
  ['month', ONE_DAY * 31 * 8], // 8M
  ['month', ONE_DAY * 31 * 10], // 10M
  ['year', ONE_DAY * 380] // 1Y
  ];
  /**
   * @param {module:echarts/model/Model}
   * @return {module:echarts/scale/Time}
   */

  TimeScale.create = function (model) {
    return new TimeScale({
      useUTC: model.ecModel.get('useUTC')
    });
  };

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */









  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * Log scale
   * @module echarts/scale/Log
   */
  // Use some method of IntervalScale
  var scaleProto$1 = Scale_1.prototype;
  var intervalScaleProto$1 = Interval.prototype;
  var getPrecisionSafe$1 = number.getPrecisionSafe;
  var roundingErrorFix = number.round;
  var mathFloor$1 = Math.floor;
  var mathCeil$1 = Math.ceil;
  var mathPow$1 = Math.pow;
  var mathLog = Math.log;
  var LogScale = Scale_1.extend({
    type: 'log',
    base: 10,
    $constructor: function () {
      Scale_1.apply(this, arguments);
      this._originalScale = new Interval();
    },

    /**
     * @param {boolean} [expandToNicedExtent=false] If expand the ticks to niced extent.
     * @return {Array.<number>}
     */
    getTicks: function (expandToNicedExtent) {
      var originalScale = this._originalScale;
      var extent = this._extent;
      var originalExtent = originalScale.getExtent();
      return util.map(intervalScaleProto$1.getTicks.call(this, expandToNicedExtent), function (val) {
        var powVal = number.round(mathPow$1(this.base, val)); // Fix #4158

        powVal = val === extent[0] && originalScale.__fixMin ? fixRoundingError(powVal, originalExtent[0]) : powVal;
        powVal = val === extent[1] && originalScale.__fixMax ? fixRoundingError(powVal, originalExtent[1]) : powVal;
        return powVal;
      }, this);
    },

    /**
     * @param {number} splitNumber
     * @return {Array.<Array.<number>>}
     */
    getMinorTicks: intervalScaleProto$1.getMinorTicks,

    /**
     * @param {number} val
     * @return {string}
     */
    getLabel: intervalScaleProto$1.getLabel,

    /**
     * @param  {number} val
     * @return {number}
     */
    scale: function (val) {
      val = scaleProto$1.scale.call(this, val);
      return mathPow$1(this.base, val);
    },

    /**
     * @param {number} start
     * @param {number} end
     */
    setExtent: function (start, end) {
      var base = this.base;
      start = mathLog(start) / mathLog(base);
      end = mathLog(end) / mathLog(base);
      intervalScaleProto$1.setExtent.call(this, start, end);
    },

    /**
     * @return {number} end
     */
    getExtent: function () {
      var base = this.base;
      var extent = scaleProto$1.getExtent.call(this);
      extent[0] = mathPow$1(base, extent[0]);
      extent[1] = mathPow$1(base, extent[1]); // Fix #4158

      var originalScale = this._originalScale;
      var originalExtent = originalScale.getExtent();
      originalScale.__fixMin && (extent[0] = fixRoundingError(extent[0], originalExtent[0]));
      originalScale.__fixMax && (extent[1] = fixRoundingError(extent[1], originalExtent[1]));
      return extent;
    },

    /**
     * @param  {Array.<number>} extent
     */
    unionExtent: function (extent) {
      this._originalScale.unionExtent(extent);

      var base = this.base;
      extent[0] = mathLog(extent[0]) / mathLog(base);
      extent[1] = mathLog(extent[1]) / mathLog(base);
      scaleProto$1.unionExtent.call(this, extent);
    },

    /**
     * @override
     */
    unionExtentFromData: function (data, dim) {
      // TODO
      // filter value that <= 0
      this.unionExtent(data.getApproximateExtent(dim));
    },

    /**
     * Update interval and extent of intervals for nice ticks
     * @param  {number} [approxTickNum = 10] Given approx tick number
     */
    niceTicks: function (approxTickNum) {
      approxTickNum = approxTickNum || 10;
      var extent = this._extent;
      var span = extent[1] - extent[0];

      if (span === Infinity || span <= 0) {
        return;
      }

      var interval = number.quantity(span);
      var err = approxTickNum / span * interval; // Filter ticks to get closer to the desired count.

      if (err <= 0.5) {
        interval *= 10;
      } // Interval should be integer


      while (!isNaN(interval) && Math.abs(interval) < 1 && Math.abs(interval) > 0) {
        interval *= 10;
      }

      var niceExtent = [number.round(mathCeil$1(extent[0] / interval) * interval), number.round(mathFloor$1(extent[1] / interval) * interval)];
      this._interval = interval;
      this._niceExtent = niceExtent;
    },

    /**
     * Nice extent.
     * @override
     */
    niceExtent: function (opt) {
      intervalScaleProto$1.niceExtent.call(this, opt);
      var originalScale = this._originalScale;
      originalScale.__fixMin = opt.fixMin;
      originalScale.__fixMax = opt.fixMax;
    }
  });
  util.each(['contain', 'normalize'], function (methodName) {
    LogScale.prototype[methodName] = function (val) {
      val = mathLog(val) / mathLog(this.base);
      return scaleProto$1[methodName].call(this, val);
    };
  });

  LogScale.create = function () {
    return new LogScale();
  };

  function fixRoundingError(val, originalVal) {
    return roundingErrorFix(val, getPrecisionSafe$1(originalVal));
  }

  var prepareLayoutBarSeries$1 = barGrid.prepareLayoutBarSeries;
  var makeColumnLayout$1 = barGrid.makeColumnLayout;
  var retrieveColumnLayout$1 = barGrid.retrieveColumnLayout;







  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * Get axis scale extent before niced.
   * Item of returned array can only be number (including Infinity and NaN).
   */
  function getScaleExtent(scale, model) {
    var scaleType = scale.type;
    var min = model.getMin();
    var max = model.getMax();
    var fixMin = min != null;
    var fixMax = max != null;
    var originalExtent = scale.getExtent();
    var axisDataLen;
    var boundaryGap;
    var span;

    if (scaleType === 'ordinal') {
      axisDataLen = model.getCategories().length;
    } else {
      boundaryGap = model.get('boundaryGap');

      if (!util.isArray(boundaryGap)) {
        boundaryGap = [boundaryGap || 0, boundaryGap || 0];
      }

      if (typeof boundaryGap[0] === 'boolean') {
        boundaryGap = [0, 0];
      }

      boundaryGap[0] = number.parsePercent(boundaryGap[0], 1);
      boundaryGap[1] = number.parsePercent(boundaryGap[1], 1);
      span = originalExtent[1] - originalExtent[0] || Math.abs(originalExtent[0]);
    } // Notice: When min/max is not set (that is, when there are null/undefined,
    // which is the most common case), these cases should be ensured:
    // (1) For 'ordinal', show all axis.data.
    // (2) For others:
    //      + `boundaryGap` is applied (if min/max set, boundaryGap is
    //      disabled).
    //      + If `needCrossZero`, min/max should be zero, otherwise, min/max should
    //      be the result that originalExtent enlarged by boundaryGap.
    // (3) If no data, it should be ensured that `scale.setBlank` is set.
    // FIXME
    // (1) When min/max is 'dataMin' or 'dataMax', should boundaryGap be able to used?
    // (2) When `needCrossZero` and all data is positive/negative, should it be ensured
    // that the results processed by boundaryGap are positive/negative?


    if (min == null) {
      min = scaleType === 'ordinal' ? axisDataLen ? 0 : NaN : originalExtent[0] - boundaryGap[0] * span;
    }

    if (max == null) {
      max = scaleType === 'ordinal' ? axisDataLen ? axisDataLen - 1 : NaN : originalExtent[1] + boundaryGap[1] * span;
    }

    if (min === 'dataMin') {
      min = originalExtent[0];
    } else if (typeof min === 'function') {
      min = min({
        min: originalExtent[0],
        max: originalExtent[1]
      });
    }

    if (max === 'dataMax') {
      max = originalExtent[1];
    } else if (typeof max === 'function') {
      max = max({
        min: originalExtent[0],
        max: originalExtent[1]
      });
    }

    (min == null || !isFinite(min)) && (min = NaN);
    (max == null || !isFinite(max)) && (max = NaN);
    scale.setBlank(util.eqNaN(min) || util.eqNaN(max) || scaleType === 'ordinal' && !scale.getOrdinalMeta().categories.length); // Evaluate if axis needs cross zero

    if (model.getNeedCrossZero()) {
      // Axis is over zero and min is not set
      if (min > 0 && max > 0 && !fixMin) {
        min = 0;
      } // Axis is under zero and max is not set


      if (min < 0 && max < 0 && !fixMax) {
        max = 0;
      }
    } // If bars are placed on a base axis of type time or interval account for axis boundary overflow and current axis
    // is base axis
    // FIXME
    // (1) Consider support value axis, where below zero and axis `onZero` should be handled properly.
    // (2) Refactor the logic with `barGrid`. Is it not need to `makeBarWidthAndOffsetInfo` twice with different extent?
    //     Should not depend on series type `bar`?
    // (3) Fix that might overlap when using dataZoom.
    // (4) Consider other chart types using `barGrid`?
    // See #6728, #4862, `test/bar-overflow-time-plot.html`


    var ecModel = model.ecModel;

    if (ecModel && scaleType === 'time'
    /*|| scaleType === 'interval' */
    ) {
      var barSeriesModels = prepareLayoutBarSeries$1('bar', ecModel);
      var isBaseAxisAndHasBarSeries;
      util.each(barSeriesModels, function (seriesModel) {
        isBaseAxisAndHasBarSeries |= seriesModel.getBaseAxis() === model.axis;
      });

      if (isBaseAxisAndHasBarSeries) {
        // Calculate placement of bars on axis
        var barWidthAndOffset = makeColumnLayout$1(barSeriesModels); // Adjust axis min and max to account for overflow

        var adjustedScale = adjustScaleForOverflow(min, max, model, barWidthAndOffset);
        min = adjustedScale.min;
        max = adjustedScale.max;
      }
    }

    return [min, max];
  }

  function adjustScaleForOverflow(min, max, model, barWidthAndOffset) {
    // Get Axis Length
    var axisExtent = model.axis.getExtent();
    var axisLength = axisExtent[1] - axisExtent[0]; // Get bars on current base axis and calculate min and max overflow

    var barsOnCurrentAxis = retrieveColumnLayout$1(barWidthAndOffset, model.axis);

    if (barsOnCurrentAxis === undefined) {
      return {
        min: min,
        max: max
      };
    }

    var minOverflow = Infinity;
    util.each(barsOnCurrentAxis, function (item) {
      minOverflow = Math.min(item.offset, minOverflow);
    });
    var maxOverflow = -Infinity;
    util.each(barsOnCurrentAxis, function (item) {
      maxOverflow = Math.max(item.offset + item.width, maxOverflow);
    });
    minOverflow = Math.abs(minOverflow);
    maxOverflow = Math.abs(maxOverflow);
    var totalOverFlow = minOverflow + maxOverflow; // Calulate required buffer based on old range and overflow

    var oldRange = max - min;
    var oldRangePercentOfNew = 1 - (minOverflow + maxOverflow) / axisLength;
    var overflowBuffer = oldRange / oldRangePercentOfNew - oldRange;
    max += overflowBuffer * (maxOverflow / totalOverFlow);
    min -= overflowBuffer * (minOverflow / totalOverFlow);
    return {
      min: min,
      max: max
    };
  }

  function niceScaleExtent(scale, model) {
    var extent = getScaleExtent(scale, model);
    var fixMin = model.getMin() != null;
    var fixMax = model.getMax() != null;
    var splitNumber = model.get('splitNumber');

    if (scale.type === 'log') {
      scale.base = model.get('logBase');
    }

    var scaleType = scale.type;
    scale.setExtent(extent[0], extent[1]);
    scale.niceExtent({
      splitNumber: splitNumber,
      fixMin: fixMin,
      fixMax: fixMax,
      minInterval: scaleType === 'interval' || scaleType === 'time' ? model.get('minInterval') : null,
      maxInterval: scaleType === 'interval' || scaleType === 'time' ? model.get('maxInterval') : null
    }); // If some one specified the min, max. And the default calculated interval
    // is not good enough. He can specify the interval. It is often appeared
    // in angle axis with angle 0 - 360. Interval calculated in interval scale is hard
    // to be 60.
    // FIXME

    var interval = model.get('interval');

    if (interval != null) {
      scale.setInterval && scale.setInterval(interval);
    }
  }
  /**
   * @param {module:echarts/model/Model} model
   * @param {string} [axisType] Default retrieve from model.type
   * @return {module:echarts/scale/*}
   */


  function createScaleByModel(model, axisType) {
    axisType = axisType || model.get('type');

    if (axisType) {
      switch (axisType) {
        // Buildin scale
        case 'category':
          return new Ordinal(model.getOrdinalMeta ? model.getOrdinalMeta() : model.getCategories(), [Infinity, -Infinity]);

        case 'value':
          return new Interval();
        // Extended scale, like time and log

        default:
          return (Scale_1.getClass(axisType) || Interval).create(model);
      }
    }
  }
  /**
   * Check if the axis corss 0
   */


  function ifAxisCrossZero(axis) {
    var dataExtent = axis.scale.getExtent();
    var min = dataExtent[0];
    var max = dataExtent[1];
    return !(min > 0 && max > 0 || min < 0 && max < 0);
  }
  /**
   * @param {module:echarts/coord/Axis} axis
   * @return {Function} Label formatter function.
   *         param: {number} tickValue,
   *         param: {number} idx, the index in all ticks.
   *                         If category axis, this param is not requied.
   *         return: {string} label string.
   */


  function makeLabelFormatter(axis) {
    var labelFormatter = axis.getLabelModel().get('formatter');
    var categoryTickStart = axis.type === 'category' ? axis.scale.getExtent()[0] : null;

    if (typeof labelFormatter === 'string') {
      labelFormatter = function (tpl) {
        return function (val) {
          // For category axis, get raw value; for numeric axis,
          // get foramtted label like '1,333,444'.
          val = axis.scale.getLabel(val);
          return tpl.replace('{value}', val != null ? val : '');
        };
      }(labelFormatter); // Consider empty array


      return labelFormatter;
    } else if (typeof labelFormatter === 'function') {
      return function (tickValue, idx) {
        // The original intention of `idx` is "the index of the tick in all ticks".
        // But the previous implementation of category axis do not consider the
        // `axisLabel.interval`, which cause that, for example, the `interval` is
        // `1`, then the ticks "name5", "name7", "name9" are displayed, where the
        // corresponding `idx` are `0`, `2`, `4`, but not `0`, `1`, `2`. So we keep
        // the definition here for back compatibility.
        if (categoryTickStart != null) {
          idx = tickValue - categoryTickStart;
        }

        return labelFormatter(getAxisRawValue(axis, tickValue), idx);
      };
    } else {
      return function (tick) {
        return axis.scale.getLabel(tick);
      };
    }
  }

  function getAxisRawValue(axis, value) {
    // In category axis with data zoom, tick is not the original
    // index of axis.data. So tick should not be exposed to user
    // in category axis.
    return axis.type === 'category' ? axis.scale.getLabel(value) : value;
  }
  /**
   * @param {module:echarts/coord/Axis} axis
   * @return {module:zrender/core/BoundingRect} Be null/undefined if no labels.
   */


  function estimateLabelUnionRect(axis) {
    var axisModel = axis.model;
    var scale = axis.scale;

    if (!axisModel.get('axisLabel.show') || scale.isBlank()) {
      return;
    }

    var isCategory = axis.type === 'category';
    var realNumberScaleTicks;
    var tickCount;
    var categoryScaleExtent = scale.getExtent(); // Optimize for large category data, avoid call `getTicks()`.

    if (isCategory) {
      tickCount = scale.count();
    } else {
      realNumberScaleTicks = scale.getTicks();
      tickCount = realNumberScaleTicks.length;
    }

    var axisLabelModel = axis.getLabelModel();
    var labelFormatter = makeLabelFormatter(axis);
    var rect;
    var step = 1; // Simple optimization for large amount of labels

    if (tickCount > 40) {
      step = Math.ceil(tickCount / 40);
    }

    for (var i = 0; i < tickCount; i += step) {
      var tickValue = realNumberScaleTicks ? realNumberScaleTicks[i] : categoryScaleExtent[0] + i;
      var label = labelFormatter(tickValue);
      var unrotatedSingleRect = axisLabelModel.getTextRect(label);
      var singleRect = rotateTextRect(unrotatedSingleRect, axisLabelModel.get('rotate') || 0);
      rect ? rect.union(singleRect) : rect = singleRect;
    }

    return rect;
  }

  function rotateTextRect(textRect, rotate) {
    var rotateRadians = rotate * Math.PI / 180;
    var boundingBox = textRect.plain();
    var beforeWidth = boundingBox.width;
    var beforeHeight = boundingBox.height;
    var afterWidth = beforeWidth * Math.cos(rotateRadians) + beforeHeight * Math.sin(rotateRadians);
    var afterHeight = beforeWidth * Math.sin(rotateRadians) + beforeHeight * Math.cos(rotateRadians);
    var rotatedRect = new BoundingRect_1(boundingBox.x, boundingBox.y, afterWidth, afterHeight);
    return rotatedRect;
  }
  /**
   * @param {module:echarts/src/model/Model} model axisLabelModel or axisTickModel
   * @return {number|String} Can be null|'auto'|number|function
   */


  function getOptionCategoryInterval(model) {
    var interval = model.get('interval');
    return interval == null ? 'auto' : interval;
  }
  /**
   * Set `categoryInterval` as 0 implicitly indicates that
   * show all labels reguardless of overlap.
   * @param {Object} axis axisModel.axis
   * @return {boolean}
   */


  function shouldShowAllLabels(axis) {
    return axis.type === 'category' && getOptionCategoryInterval(axis.getLabelModel()) === 0;
  }

  var getScaleExtent_1 = getScaleExtent;
  var niceScaleExtent_1 = niceScaleExtent;
  var createScaleByModel_1 = createScaleByModel;
  var ifAxisCrossZero_1 = ifAxisCrossZero;
  var makeLabelFormatter_1 = makeLabelFormatter;
  var getAxisRawValue_1 = getAxisRawValue;
  var estimateLabelUnionRect_1 = estimateLabelUnionRect;
  var getOptionCategoryInterval_1 = getOptionCategoryInterval;
  var shouldShowAllLabels_1 = shouldShowAllLabels;

  var axisHelper = {
  	getScaleExtent: getScaleExtent_1,
  	niceScaleExtent: niceScaleExtent_1,
  	createScaleByModel: createScaleByModel_1,
  	ifAxisCrossZero: ifAxisCrossZero_1,
  	makeLabelFormatter: makeLabelFormatter_1,
  	getAxisRawValue: getAxisRawValue_1,
  	estimateLabelUnionRect: estimateLabelUnionRect_1,
  	getOptionCategoryInterval: getOptionCategoryInterval_1,
  	shouldShowAllLabels: shouldShowAllLabels_1
  };

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  // import * as axisHelper from './axisHelper';
  var _default$1r = {
    /**
     * @param {boolean} origin
     * @return {number|string} min value or 'dataMin' or null/undefined (means auto) or NaN
     */
    getMin: function (origin) {
      var option = this.option;
      var min = !origin && option.rangeStart != null ? option.rangeStart : option.min;

      if (this.axis && min != null && min !== 'dataMin' && typeof min !== 'function' && !util.eqNaN(min)) {
        min = this.axis.scale.parse(min);
      }

      return min;
    },

    /**
     * @param {boolean} origin
     * @return {number|string} max value or 'dataMax' or null/undefined (means auto) or NaN
     */
    getMax: function (origin) {
      var option = this.option;
      var max = !origin && option.rangeEnd != null ? option.rangeEnd : option.max;

      if (this.axis && max != null && max !== 'dataMax' && typeof max !== 'function' && !util.eqNaN(max)) {
        max = this.axis.scale.parse(max);
      }

      return max;
    },

    /**
     * @return {boolean}
     */
    getNeedCrossZero: function () {
      var option = this.option;
      return option.rangeStart != null || option.rangeEnd != null ? false : !option.scale;
    },

    /**
     * Should be implemented by each axis model if necessary.
     * @return {module:echarts/model/Component} coordinate system model
     */
    getCoordSysModel: util.noop,

    /**
     * @param {number} rangeStart Can only be finite number or null/undefined or NaN.
     * @param {number} rangeEnd Can only be finite number or null/undefined or NaN.
     */
    setRange: function (rangeStart, rangeEnd) {
      this.option.rangeStart = rangeStart;
      this.option.rangeEnd = rangeEnd;
    },

    /**
     * Reset range
     */
    resetRange: function () {
      // rangeStart and rangeEnd is readonly.
      this.option.rangeStart = this.option.rangeEnd = null;
    }
  };
  var axisModelCommonMixin = _default$1r;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */









  var calculateTextPosition$1 = text.calculateTextPosition;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  // Symbol factory

  /**
   * Triangle shape
   * @inner
   */
  var Triangle = graphic.extendShape({
    type: 'triangle',
    shape: {
      cx: 0,
      cy: 0,
      width: 0,
      height: 0
    },
    buildPath: function (path, shape) {
      var cx = shape.cx;
      var cy = shape.cy;
      var width = shape.width / 2;
      var height = shape.height / 2;
      path.moveTo(cx, cy - height);
      path.lineTo(cx + width, cy + height);
      path.lineTo(cx - width, cy + height);
      path.closePath();
    }
  });
  /**
   * Diamond shape
   * @inner
   */

  var Diamond = graphic.extendShape({
    type: 'diamond',
    shape: {
      cx: 0,
      cy: 0,
      width: 0,
      height: 0
    },
    buildPath: function (path, shape) {
      var cx = shape.cx;
      var cy = shape.cy;
      var width = shape.width / 2;
      var height = shape.height / 2;
      path.moveTo(cx, cy - height);
      path.lineTo(cx + width, cy);
      path.lineTo(cx, cy + height);
      path.lineTo(cx - width, cy);
      path.closePath();
    }
  });
  /**
   * Pin shape
   * @inner
   */

  var Pin = graphic.extendShape({
    type: 'pin',
    shape: {
      // x, y on the cusp
      x: 0,
      y: 0,
      width: 0,
      height: 0
    },
    buildPath: function (path, shape) {
      var x = shape.x;
      var y = shape.y;
      var w = shape.width / 5 * 3; // Height must be larger than width

      var h = Math.max(w, shape.height);
      var r = w / 2; // Dist on y with tangent point and circle center

      var dy = r * r / (h - r);
      var cy = y - h + r + dy;
      var angle = Math.asin(dy / r); // Dist on x with tangent point and circle center

      var dx = Math.cos(angle) * r;
      var tanX = Math.sin(angle);
      var tanY = Math.cos(angle);
      var cpLen = r * 0.6;
      var cpLen2 = r * 0.7;
      path.moveTo(x - dx, cy + dy);
      path.arc(x, cy, r, Math.PI - angle, Math.PI * 2 + angle);
      path.bezierCurveTo(x + dx - tanX * cpLen, cy + dy + tanY * cpLen, x, y - cpLen2, x, y);
      path.bezierCurveTo(x, y - cpLen2, x - dx + tanX * cpLen, cy + dy + tanY * cpLen, x - dx, cy + dy);
      path.closePath();
    }
  });
  /**
   * Arrow shape
   * @inner
   */

  var Arrow = graphic.extendShape({
    type: 'arrow',
    shape: {
      x: 0,
      y: 0,
      width: 0,
      height: 0
    },
    buildPath: function (ctx, shape) {
      var height = shape.height;
      var width = shape.width;
      var x = shape.x;
      var y = shape.y;
      var dx = width / 3 * 2;
      ctx.moveTo(x, y);
      ctx.lineTo(x + dx, y + height);
      ctx.lineTo(x, y + height / 4 * 3);
      ctx.lineTo(x - dx, y + height);
      ctx.lineTo(x, y);
      ctx.closePath();
    }
  });
  /**
   * Map of path contructors
   * @type {Object.<string, module:zrender/graphic/Path>}
   */

  var symbolCtors = {
    line: graphic.Line,
    rect: graphic.Rect,
    roundRect: graphic.Rect,
    square: graphic.Rect,
    circle: graphic.Circle,
    diamond: Diamond,
    pin: Pin,
    arrow: Arrow,
    triangle: Triangle
  };
  var symbolShapeMakers = {
    line: function (x, y, w, h, shape) {
      // FIXME
      shape.x1 = x;
      shape.y1 = y + h / 2;
      shape.x2 = x + w;
      shape.y2 = y + h / 2;
    },
    rect: function (x, y, w, h, shape) {
      shape.x = x;
      shape.y = y;
      shape.width = w;
      shape.height = h;
    },
    roundRect: function (x, y, w, h, shape) {
      shape.x = x;
      shape.y = y;
      shape.width = w;
      shape.height = h;
      shape.r = Math.min(w, h) / 4;
    },
    square: function (x, y, w, h, shape) {
      var size = Math.min(w, h);
      shape.x = x;
      shape.y = y;
      shape.width = size;
      shape.height = size;
    },
    circle: function (x, y, w, h, shape) {
      // Put circle in the center of square
      shape.cx = x + w / 2;
      shape.cy = y + h / 2;
      shape.r = Math.min(w, h) / 2;
    },
    diamond: function (x, y, w, h, shape) {
      shape.cx = x + w / 2;
      shape.cy = y + h / 2;
      shape.width = w;
      shape.height = h;
    },
    pin: function (x, y, w, h, shape) {
      shape.x = x + w / 2;
      shape.y = y + h / 2;
      shape.width = w;
      shape.height = h;
    },
    arrow: function (x, y, w, h, shape) {
      shape.x = x + w / 2;
      shape.y = y + h / 2;
      shape.width = w;
      shape.height = h;
    },
    triangle: function (x, y, w, h, shape) {
      shape.cx = x + w / 2;
      shape.cy = y + h / 2;
      shape.width = w;
      shape.height = h;
    }
  };
  var symbolBuildProxies = {};
  util.each(symbolCtors, function (Ctor, name) {
    symbolBuildProxies[name] = new Ctor();
  });
  var SymbolClz = graphic.extendShape({
    type: 'symbol',
    shape: {
      symbolType: '',
      x: 0,
      y: 0,
      width: 0,
      height: 0
    },
    calculateTextPosition: function (out, style, rect) {
      var res = calculateTextPosition$1(out, style, rect);
      var shape = this.shape;

      if (shape && shape.symbolType === 'pin' && style.textPosition === 'inside') {
        res.y = rect.y + rect.height * 0.4;
      }

      return res;
    },
    buildPath: function (ctx, shape, inBundle) {
      var symbolType = shape.symbolType;

      if (symbolType !== 'none') {
        var proxySymbol = symbolBuildProxies[symbolType];

        if (!proxySymbol) {
          // Default rect
          symbolType = 'rect';
          proxySymbol = symbolBuildProxies[symbolType];
        }

        symbolShapeMakers[symbolType](shape.x, shape.y, shape.width, shape.height, proxySymbol.shape);
        proxySymbol.buildPath(ctx, proxySymbol.shape, inBundle);
      }
    }
  }); // Provide setColor helper method to avoid determine if set the fill or stroke outside

  function symbolPathSetColor(color, innerColor) {
    if (this.type !== 'image') {
      var symbolStyle = this.style;
      var symbolShape = this.shape;

      if (symbolShape && symbolShape.symbolType === 'line') {
        symbolStyle.stroke = color;
      } else if (this.__isEmptyBrush) {
        symbolStyle.stroke = color;
        symbolStyle.fill = innerColor || '#fff';
      } else {
        // FIXME 判断图形默认是填充还是描边，使用 onlyStroke ?
        symbolStyle.fill && (symbolStyle.fill = color);
        symbolStyle.stroke && (symbolStyle.stroke = color);
      }

      this.dirty(false);
    }
  }
  /**
   * Create a symbol element with given symbol configuration: shape, x, y, width, height, color
   * @param {string} symbolType
   * @param {number} x
   * @param {number} y
   * @param {number} w
   * @param {number} h
   * @param {string} color
   * @param {boolean} [keepAspect=false] whether to keep the ratio of w/h,
   *                            for path and image only.
   */


  function createSymbol(symbolType, x, y, w, h, color, keepAspect) {
    // TODO Support image object, DynamicImage.
    var isEmpty = symbolType.indexOf('empty') === 0;

    if (isEmpty) {
      symbolType = symbolType.substr(5, 1).toLowerCase() + symbolType.substr(6);
    }

    var symbolPath;

    if (symbolType.indexOf('image://') === 0) {
      symbolPath = graphic.makeImage(symbolType.slice(8), new BoundingRect_1(x, y, w, h), keepAspect ? 'center' : 'cover');
    } else if (symbolType.indexOf('path://') === 0) {
      symbolPath = graphic.makePath(symbolType.slice(7), {}, new BoundingRect_1(x, y, w, h), keepAspect ? 'center' : 'cover');
    } else {
      symbolPath = new SymbolClz({
        shape: {
          symbolType: symbolType,
          x: x,
          y: y,
          width: w,
          height: h
        }
      });
    }

    symbolPath.__isEmptyBrush = isEmpty;
    symbolPath.setColor = symbolPathSetColor;
    symbolPath.setColor(color);
    return symbolPath;
  }

  var createSymbol_1 = createSymbol;

  var symbol = {
  	createSymbol: createSymbol_1
  };

  var getLayoutRect_1$1 = layout.getLayoutRect;



  var enableDataStack$2 = dataStackHelper.enableDataStack;
  var isDimensionStacked$2 = dataStackHelper.isDimensionStacked;
  var getStackedDimension$1 = dataStackHelper.getStackedDimension;



  var completeDimensions$1 = completeDimensions_1;



  var createDimensions$1 = createDimensions;



  var createSymbol$1 = symbol.createSymbol;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  // import createGraphFromNodeEdge from './chart/helper/createGraphFromNodeEdge';

  /**
   * Create a muti dimension List structure from seriesModel.
   * @param  {module:echarts/model/Model} seriesModel
   * @return {module:echarts/data/List} list
   */
  function createList(seriesModel) {
    return createListFromArray_1(seriesModel.getSource(), seriesModel);
  } // export function createGraph(seriesModel) {
  //     var nodes = seriesModel.get('data');
  //     var links = seriesModel.get('links');
  //     return createGraphFromNodeEdge(nodes, links, seriesModel);
  // }


  var dataStack$1 = {
    isDimensionStacked: isDimensionStacked$2,
    enableDataStack: enableDataStack$2,
    getStackedDimension: getStackedDimension$1
  };
  /**
   * Create a symbol element with given symbol configuration: shape, x, y, width, height, color
   * @param {string} symbolDesc
   * @param {number} x
   * @param {number} y
   * @param {number} w
   * @param {number} h
   * @param {string} color
   */

  /**
   * Create scale
   * @param {Array.<number>} dataExtent
   * @param {Object|module:echarts/Model} option
   */
  function createScale(dataExtent, option) {
    var axisModel = option;

    if (!Model_1.isInstance(option)) {
      axisModel = new Model_1(option);
      util.mixin(axisModel, axisModelCommonMixin);
    }

    var scale = axisHelper.createScaleByModel(axisModel);
    scale.setExtent(dataExtent[0], dataExtent[1]);
    axisHelper.niceScaleExtent(scale, axisModel);
    return scale;
  }
  /**
   * Mixin common methods to axis model,
   *
   * Inlcude methods
   * `getFormattedLabels() => Array.<string>`
   * `getCategories() => Array.<string>`
   * `getMin(origin: boolean) => number`
   * `getMax(origin: boolean) => number`
   * `getNeedCrossZero() => boolean`
   * `setRange(start: number, end: number)`
   * `resetRange()`
   */


  function mixinAxisModelCommonMethods(Model) {
    util.mixin(Model, axisModelCommonMixin);
  }

  var createList_1 = createList;
  var dataStack_1 = dataStack$1;
  var createScale_1 = createScale;
  var mixinAxisModelCommonMethods_1 = mixinAxisModelCommonMethods;

  var helper$1 = {
  	getLayoutRect: getLayoutRect_1$1,
  	completeDimensions: completeDimensions$1,
  	createDimensions: createDimensions$1,
  	createSymbol: createSymbol$1,
  	createList: createList_1,
  	dataStack: dataStack_1,
  	createScale: createScale_1,
  	mixinAxisModelCommonMethods: mixinAxisModelCommonMethods_1
  };

  var EPSILON$3 = 1e-8;

  function isAroundEqual$1(a, b) {
    return Math.abs(a - b) < EPSILON$3;
  }

  function contain$1(points, x, y) {
    var w = 0;
    var p = points[0];

    if (!p) {
      return false;
    }

    for (var i = 1; i < points.length; i++) {
      var p2 = points[i];
      w += windingLine_1(p[0], p[1], p2[0], p2[1], x, y);
      p = p2;
    } // Close polygon


    var p0 = points[0];

    if (!isAroundEqual$1(p[0], p0[0]) || !isAroundEqual$1(p[1], p0[1])) {
      w += windingLine_1(p[0], p[1], p0[0], p0[1], x, y);
    }

    return w !== 0;
  }

  var contain_1$1 = contain$1;

  var polygon = {
  	contain: contain_1$1
  };

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */









  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * @module echarts/coord/geo/Region
   */

  /**
   * @param {string|Region} name
   * @param {Array} geometries
   * @param {Array.<number>} cp
   */
  function Region(name, geometries, cp) {
    /**
     * @type {string}
     * @readOnly
     */
    this.name = name;
    /**
     * @type {Array.<Array>}
     * @readOnly
     */

    this.geometries = geometries;

    if (!cp) {
      var rect = this.getBoundingRect();
      cp = [rect.x + rect.width / 2, rect.y + rect.height / 2];
    } else {
      cp = [cp[0], cp[1]];
    }
    /**
     * @type {Array.<number>}
     */


    this.center = cp;
  }

  Region.prototype = {
    constructor: Region,
    properties: null,

    /**
     * @return {module:zrender/core/BoundingRect}
     */
    getBoundingRect: function () {
      var rect = this._rect;

      if (rect) {
        return rect;
      }

      var MAX_NUMBER = Number.MAX_VALUE;
      var min = [MAX_NUMBER, MAX_NUMBER];
      var max = [-MAX_NUMBER, -MAX_NUMBER];
      var min2 = [];
      var max2 = [];
      var geometries = this.geometries;

      for (var i = 0; i < geometries.length; i++) {
        // Only support polygon
        if (geometries[i].type !== 'polygon') {
          continue;
        } // Doesn't consider hole


        var exterior = geometries[i].exterior;
        bbox.fromPoints(exterior, min2, max2);
        vector.min(min, min, min2);
        vector.max(max, max, max2);
      } // No data


      if (i === 0) {
        min[0] = min[1] = max[0] = max[1] = 0;
      }

      return this._rect = new BoundingRect_1(min[0], min[1], max[0] - min[0], max[1] - min[1]);
    },

    /**
     * @param {<Array.<number>} coord
     * @return {boolean}
     */
    contain: function (coord) {
      var rect = this.getBoundingRect();
      var geometries = this.geometries;

      if (!rect.contain(coord[0], coord[1])) {
        return false;
      }

      loopGeo: for (var i = 0, len = geometries.length; i < len; i++) {
        // Only support polygon.
        if (geometries[i].type !== 'polygon') {
          continue;
        }

        var exterior = geometries[i].exterior;
        var interiors = geometries[i].interiors;

        if (polygon.contain(exterior, coord[0], coord[1])) {
          // Not in the region if point is in the hole.
          for (var k = 0; k < (interiors ? interiors.length : 0); k++) {
            if (polygon.contain(interiors[k])) {
              continue loopGeo;
            }
          }

          return true;
        }
      }

      return false;
    },
    transformTo: function (x, y, width, height) {
      var rect = this.getBoundingRect();
      var aspect = rect.width / rect.height;

      if (!width) {
        width = aspect * height;
      } else if (!height) {
        height = width / aspect;
      }

      var target = new BoundingRect_1(x, y, width, height);
      var transform = rect.calculateTransform(target);
      var geometries = this.geometries;

      for (var i = 0; i < geometries.length; i++) {
        // Only support polygon.
        if (geometries[i].type !== 'polygon') {
          continue;
        }

        var exterior = geometries[i].exterior;
        var interiors = geometries[i].interiors;

        for (var p = 0; p < exterior.length; p++) {
          vector.applyTransform(exterior[p], exterior[p], transform);
        }

        for (var h = 0; h < (interiors ? interiors.length : 0); h++) {
          for (var p = 0; p < interiors[h].length; p++) {
            vector.applyTransform(interiors[h][p], interiors[h][p], transform);
          }
        }
      }

      rect = this._rect;
      rect.copy(target); // Update center

      this.center = [rect.x + rect.width / 2, rect.y + rect.height / 2];
    },
    cloneShallow: function (name) {
      name == null && (name = this.name);
      var newRegion = new Region(name, this.geometries, this.center);
      newRegion._rect = this._rect;
      newRegion.transformTo = null; // Simply avoid to be called.

      return newRegion;
    }
  };
  var _default$1s = Region;
  var Region_1 = _default$1s;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */





  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * Parse and decode geo json
   * @module echarts/coord/geo/parseGeoJson
   */
  function decode(json) {
    if (!json.UTF8Encoding) {
      return json;
    }

    var encodeScale = json.UTF8Scale;

    if (encodeScale == null) {
      encodeScale = 1024;
    }

    var features = json.features;

    for (var f = 0; f < features.length; f++) {
      var feature = features[f];
      var geometry = feature.geometry;
      var coordinates = geometry.coordinates;
      var encodeOffsets = geometry.encodeOffsets;

      for (var c = 0; c < coordinates.length; c++) {
        var coordinate = coordinates[c];

        if (geometry.type === 'Polygon') {
          coordinates[c] = decodePolygon(coordinate, encodeOffsets[c], encodeScale);
        } else if (geometry.type === 'MultiPolygon') {
          for (var c2 = 0; c2 < coordinate.length; c2++) {
            var polygon = coordinate[c2];
            coordinate[c2] = decodePolygon(polygon, encodeOffsets[c][c2], encodeScale);
          }
        }
      }
    } // Has been decoded


    json.UTF8Encoding = false;
    return json;
  }

  function decodePolygon(coordinate, encodeOffsets, encodeScale) {
    var result = [];
    var prevX = encodeOffsets[0];
    var prevY = encodeOffsets[1];

    for (var i = 0; i < coordinate.length; i += 2) {
      var x = coordinate.charCodeAt(i) - 64;
      var y = coordinate.charCodeAt(i + 1) - 64; // ZigZag decoding

      x = x >> 1 ^ -(x & 1);
      y = y >> 1 ^ -(y & 1); // Delta deocding

      x += prevX;
      y += prevY;
      prevX = x;
      prevY = y; // Dequantize

      result.push([x / encodeScale, y / encodeScale]);
    }

    return result;
  }
  /**
   * @alias module:echarts/coord/geo/parseGeoJson
   * @param {Object} geoJson
   * @return {module:zrender/container/Group}
   */


  function _default$1t(geoJson) {
    decode(geoJson);
    return util.map(util.filter(geoJson.features, function (featureObj) {
      // Output of mapshaper may have geometry null
      return featureObj.geometry && featureObj.properties && featureObj.geometry.coordinates.length > 0;
    }), function (featureObj) {
      var properties = featureObj.properties;
      var geo = featureObj.geometry;
      var coordinates = geo.coordinates;
      var geometries = [];

      if (geo.type === 'Polygon') {
        geometries.push({
          type: 'polygon',
          // According to the GeoJSON specification.
          // First must be exterior, and the rest are all interior(holes).
          exterior: coordinates[0],
          interiors: coordinates.slice(1)
        });
      }

      if (geo.type === 'MultiPolygon') {
        util.each(coordinates, function (item) {
          if (item[0]) {
            geometries.push({
              type: 'polygon',
              exterior: item[0],
              interiors: item.slice(1)
            });
          }
        });
      }

      var region = new Region_1(properties.name, geometries, properties.cp);
      region.properties = properties;
      return region;
    });
  }

  var parseGeoJson = _default$1t;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */







  var makeInner$6 = model.makeInner;



  var makeLabelFormatter$1 = axisHelper.makeLabelFormatter;
  var getOptionCategoryInterval$1 = axisHelper.getOptionCategoryInterval;
  var shouldShowAllLabels$1 = axisHelper.shouldShowAllLabels;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var inner$6 = makeInner$6();
  /**
   * @param {module:echats/coord/Axis} axis
   * @return {Object} {
   *     labels: [{
   *         formattedLabel: string,
   *         rawLabel: string,
   *         tickValue: number
   *     }, ...],
   *     labelCategoryInterval: number
   * }
   */

  function createAxisLabels(axis) {
    // Only ordinal scale support tick interval
    return axis.type === 'category' ? makeCategoryLabels(axis) : makeRealNumberLabels(axis);
  }
  /**
   * @param {module:echats/coord/Axis} axis
   * @param {module:echarts/model/Model} tickModel For example, can be axisTick, splitLine, splitArea.
   * @return {Object} {
   *     ticks: Array.<number>
   *     tickCategoryInterval: number
   * }
   */


  function createAxisTicks(axis, tickModel) {
    // Only ordinal scale support tick interval
    return axis.type === 'category' ? makeCategoryTicks(axis, tickModel) : {
      ticks: axis.scale.getTicks()
    };
  }

  function makeCategoryLabels(axis) {
    var labelModel = axis.getLabelModel();
    var result = makeCategoryLabelsActually(axis, labelModel);
    return !labelModel.get('show') || axis.scale.isBlank() ? {
      labels: [],
      labelCategoryInterval: result.labelCategoryInterval
    } : result;
  }

  function makeCategoryLabelsActually(axis, labelModel) {
    var labelsCache = getListCache(axis, 'labels');
    var optionLabelInterval = getOptionCategoryInterval$1(labelModel);
    var result = listCacheGet(labelsCache, optionLabelInterval);

    if (result) {
      return result;
    }

    var labels;
    var numericLabelInterval;

    if (util.isFunction(optionLabelInterval)) {
      labels = makeLabelsByCustomizedCategoryInterval(axis, optionLabelInterval);
    } else {
      numericLabelInterval = optionLabelInterval === 'auto' ? makeAutoCategoryInterval(axis) : optionLabelInterval;
      labels = makeLabelsByNumericCategoryInterval(axis, numericLabelInterval);
    } // Cache to avoid calling interval function repeatly.


    return listCacheSet(labelsCache, optionLabelInterval, {
      labels: labels,
      labelCategoryInterval: numericLabelInterval
    });
  }

  function makeCategoryTicks(axis, tickModel) {
    var ticksCache = getListCache(axis, 'ticks');
    var optionTickInterval = getOptionCategoryInterval$1(tickModel);
    var result = listCacheGet(ticksCache, optionTickInterval);

    if (result) {
      return result;
    }

    var ticks;
    var tickCategoryInterval; // Optimize for the case that large category data and no label displayed,
    // we should not return all ticks.

    if (!tickModel.get('show') || axis.scale.isBlank()) {
      ticks = [];
    }

    if (util.isFunction(optionTickInterval)) {
      ticks = makeLabelsByCustomizedCategoryInterval(axis, optionTickInterval, true);
    } // Always use label interval by default despite label show. Consider this
    // scenario, Use multiple grid with the xAxis sync, and only one xAxis shows
    // labels. `splitLine` and `axisTick` should be consistent in this case.
    else if (optionTickInterval === 'auto') {
        var labelsResult = makeCategoryLabelsActually(axis, axis.getLabelModel());
        tickCategoryInterval = labelsResult.labelCategoryInterval;
        ticks = util.map(labelsResult.labels, function (labelItem) {
          return labelItem.tickValue;
        });
      } else {
        tickCategoryInterval = optionTickInterval;
        ticks = makeLabelsByNumericCategoryInterval(axis, tickCategoryInterval, true);
      } // Cache to avoid calling interval function repeatly.


    return listCacheSet(ticksCache, optionTickInterval, {
      ticks: ticks,
      tickCategoryInterval: tickCategoryInterval
    });
  }

  function makeRealNumberLabels(axis) {
    var ticks = axis.scale.getTicks();
    var labelFormatter = makeLabelFormatter$1(axis);
    return {
      labels: util.map(ticks, function (tickValue, idx) {
        return {
          formattedLabel: labelFormatter(tickValue, idx),
          rawLabel: axis.scale.getLabel(tickValue),
          tickValue: tickValue
        };
      })
    };
  } // Large category data calculation is performence sensitive, and ticks and label
  // probably be fetched by multiple times. So we cache the result.
  // axis is created each time during a ec process, so we do not need to clear cache.


  function getListCache(axis, prop) {
    // Because key can be funciton, and cache size always be small, we use array cache.
    return inner$6(axis)[prop] || (inner$6(axis)[prop] = []);
  }

  function listCacheGet(cache, key) {
    for (var i = 0; i < cache.length; i++) {
      if (cache[i].key === key) {
        return cache[i].value;
      }
    }
  }

  function listCacheSet(cache, key, value) {
    cache.push({
      key: key,
      value: value
    });
    return value;
  }

  function makeAutoCategoryInterval(axis) {
    var result = inner$6(axis).autoInterval;
    return result != null ? result : inner$6(axis).autoInterval = axis.calculateCategoryInterval();
  }
  /**
   * Calculate interval for category axis ticks and labels.
   * To get precise result, at least one of `getRotate` and `isHorizontal`
   * should be implemented in axis.
   */


  function calculateCategoryInterval(axis) {
    var params = fetchAutoCategoryIntervalCalculationParams(axis);
    var labelFormatter = makeLabelFormatter$1(axis);
    var rotation = (params.axisRotate - params.labelRotate) / 180 * Math.PI;
    var ordinalScale = axis.scale;
    var ordinalExtent = ordinalScale.getExtent(); // Providing this method is for optimization:
    // avoid generating a long array by `getTicks`
    // in large category data case.

    var tickCount = ordinalScale.count();

    if (ordinalExtent[1] - ordinalExtent[0] < 1) {
      return 0;
    }

    var step = 1; // Simple optimization. Empirical value: tick count should less than 40.

    if (tickCount > 40) {
      step = Math.max(1, Math.floor(tickCount / 40));
    }

    var tickValue = ordinalExtent[0];
    var unitSpan = axis.dataToCoord(tickValue + 1) - axis.dataToCoord(tickValue);
    var unitW = Math.abs(unitSpan * Math.cos(rotation));
    var unitH = Math.abs(unitSpan * Math.sin(rotation));
    var maxW = 0;
    var maxH = 0; // Caution: Performance sensitive for large category data.
    // Consider dataZoom, we should make appropriate step to avoid O(n) loop.

    for (; tickValue <= ordinalExtent[1]; tickValue += step) {
      var width = 0;
      var height = 0; // Not precise, do not consider align and vertical align
      // and each distance from axis line yet.

      var rect = text.getBoundingRect(labelFormatter(tickValue), params.font, 'center', 'top'); // Magic number

      width = rect.width * 1.3;
      height = rect.height * 1.3; // Min size, void long loop.

      maxW = Math.max(maxW, width, 7);
      maxH = Math.max(maxH, height, 7);
    }

    var dw = maxW / unitW;
    var dh = maxH / unitH; // 0/0 is NaN, 1/0 is Infinity.

    isNaN(dw) && (dw = Infinity);
    isNaN(dh) && (dh = Infinity);
    var interval = Math.max(0, Math.floor(Math.min(dw, dh)));
    var cache = inner$6(axis.model);
    var axisExtent = axis.getExtent();
    var lastAutoInterval = cache.lastAutoInterval;
    var lastTickCount = cache.lastTickCount; // Use cache to keep interval stable while moving zoom window,
    // otherwise the calculated interval might jitter when the zoom
    // window size is close to the interval-changing size.
    // For example, if all of the axis labels are `a, b, c, d, e, f, g`.
    // The jitter will cause that sometimes the displayed labels are
    // `a, d, g` (interval: 2) sometimes `a, c, e`(interval: 1).

    if (lastAutoInterval != null && lastTickCount != null && Math.abs(lastAutoInterval - interval) <= 1 && Math.abs(lastTickCount - tickCount) <= 1 // Always choose the bigger one, otherwise the critical
    // point is not the same when zooming in or zooming out.
    && lastAutoInterval > interval // If the axis change is caused by chart resize, the cache should not
    // be used. Otherwise some hiden labels might not be shown again.
    && cache.axisExtend0 === axisExtent[0] && cache.axisExtend1 === axisExtent[1]) {
      interval = lastAutoInterval;
    } // Only update cache if cache not used, otherwise the
    // changing of interval is too insensitive.
    else {
        cache.lastTickCount = tickCount;
        cache.lastAutoInterval = interval;
        cache.axisExtend0 = axisExtent[0];
        cache.axisExtend1 = axisExtent[1];
      }

    return interval;
  }

  function fetchAutoCategoryIntervalCalculationParams(axis) {
    var labelModel = axis.getLabelModel();
    return {
      axisRotate: axis.getRotate ? axis.getRotate() : axis.isHorizontal && !axis.isHorizontal() ? 90 : 0,
      labelRotate: labelModel.get('rotate') || 0,
      font: labelModel.getFont()
    };
  }

  function makeLabelsByNumericCategoryInterval(axis, categoryInterval, onlyTick) {
    var labelFormatter = makeLabelFormatter$1(axis);
    var ordinalScale = axis.scale;
    var ordinalExtent = ordinalScale.getExtent();
    var labelModel = axis.getLabelModel();
    var result = []; // TODO: axisType: ordinalTime, pick the tick from each month/day/year/...

    var step = Math.max((categoryInterval || 0) + 1, 1);
    var startTick = ordinalExtent[0];
    var tickCount = ordinalScale.count(); // Calculate start tick based on zero if possible to keep label consistent
    // while zooming and moving while interval > 0. Otherwise the selection
    // of displayable ticks and symbols probably keep changing.
    // 3 is empirical value.

    if (startTick !== 0 && step > 1 && tickCount / step > 2) {
      startTick = Math.round(Math.ceil(startTick / step) * step);
    } // (1) Only add min max label here but leave overlap checking
    // to render stage, which also ensure the returned list
    // suitable for splitLine and splitArea rendering.
    // (2) Scales except category always contain min max label so
    // do not need to perform this process.


    var showAllLabel = shouldShowAllLabels$1(axis);
    var includeMinLabel = labelModel.get('showMinLabel') || showAllLabel;
    var includeMaxLabel = labelModel.get('showMaxLabel') || showAllLabel;

    if (includeMinLabel && startTick !== ordinalExtent[0]) {
      addItem(ordinalExtent[0]);
    } // Optimize: avoid generating large array by `ordinalScale.getTicks()`.


    var tickValue = startTick;

    for (; tickValue <= ordinalExtent[1]; tickValue += step) {
      addItem(tickValue);
    }

    if (includeMaxLabel && tickValue - step !== ordinalExtent[1]) {
      addItem(ordinalExtent[1]);
    }

    function addItem(tVal) {
      result.push(onlyTick ? tVal : {
        formattedLabel: labelFormatter(tVal),
        rawLabel: ordinalScale.getLabel(tVal),
        tickValue: tVal
      });
    }

    return result;
  } // When interval is function, the result `false` means ignore the tick.
  // It is time consuming for large category data.


  function makeLabelsByCustomizedCategoryInterval(axis, categoryInterval, onlyTick) {
    var ordinalScale = axis.scale;
    var labelFormatter = makeLabelFormatter$1(axis);
    var result = [];
    util.each(ordinalScale.getTicks(), function (tickValue) {
      var rawLabel = ordinalScale.getLabel(tickValue);

      if (categoryInterval(tickValue, rawLabel)) {
        result.push(onlyTick ? tickValue : {
          formattedLabel: labelFormatter(tickValue),
          rawLabel: rawLabel,
          tickValue: tickValue
        });
      }
    });
    return result;
  }

  var createAxisLabels_1 = createAxisLabels;
  var createAxisTicks_1 = createAxisTicks;
  var calculateCategoryInterval_1 = calculateCategoryInterval;

  var axisTickLabelBuilder = {
  	createAxisLabels: createAxisLabels_1,
  	createAxisTicks: createAxisTicks_1,
  	calculateCategoryInterval: calculateCategoryInterval_1
  };

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  var each$j = util.each;
  var map$6 = util.map;



  var linearMap$1 = number.linearMap;
  var getPixelPrecision$1 = number.getPixelPrecision;
  var round$2 = number.round;



  var createAxisTicks$1 = axisTickLabelBuilder.createAxisTicks;
  var createAxisLabels$1 = axisTickLabelBuilder.createAxisLabels;
  var calculateCategoryInterval$1 = axisTickLabelBuilder.calculateCategoryInterval;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var NORMALIZED_EXTENT = [0, 1];
  /**
   * Base class of Axis.
   * @constructor
   */

  var Axis = function (dim, scale, extent) {
    /**
     * Axis dimension. Such as 'x', 'y', 'z', 'angle', 'radius'.
     * @type {string}
     */
    this.dim = dim;
    /**
     * Axis scale
     * @type {module:echarts/coord/scale/*}
     */

    this.scale = scale;
    /**
     * @type {Array.<number>}
     * @private
     */

    this._extent = extent || [0, 0];
    /**
     * @type {boolean}
     */

    this.inverse = false;
    /**
     * Usually true when axis has a ordinal scale
     * @type {boolean}
     */

    this.onBand = false;
  };

  Axis.prototype = {
    constructor: Axis,

    /**
     * If axis extent contain given coord
     * @param {number} coord
     * @return {boolean}
     */
    contain: function (coord) {
      var extent = this._extent;
      var min = Math.min(extent[0], extent[1]);
      var max = Math.max(extent[0], extent[1]);
      return coord >= min && coord <= max;
    },

    /**
     * If axis extent contain given data
     * @param {number} data
     * @return {boolean}
     */
    containData: function (data) {
      return this.scale.contain(data);
    },

    /**
     * Get coord extent.
     * @return {Array.<number>}
     */
    getExtent: function () {
      return this._extent.slice();
    },

    /**
     * Get precision used for formatting
     * @param {Array.<number>} [dataExtent]
     * @return {number}
     */
    getPixelPrecision: function (dataExtent) {
      return getPixelPrecision$1(dataExtent || this.scale.getExtent(), this._extent);
    },

    /**
     * Set coord extent
     * @param {number} start
     * @param {number} end
     */
    setExtent: function (start, end) {
      var extent = this._extent;
      extent[0] = start;
      extent[1] = end;
    },

    /**
     * Convert data to coord. Data is the rank if it has an ordinal scale
     * @param {number} data
     * @param  {boolean} clamp
     * @return {number}
     */
    dataToCoord: function (data, clamp) {
      var extent = this._extent;
      var scale = this.scale;
      data = scale.normalize(data);

      if (this.onBand && scale.type === 'ordinal') {
        extent = extent.slice();
        fixExtentWithBands(extent, scale.count());
      }

      return linearMap$1(data, NORMALIZED_EXTENT, extent, clamp);
    },

    /**
     * Convert coord to data. Data is the rank if it has an ordinal scale
     * @param {number} coord
     * @param  {boolean} clamp
     * @return {number}
     */
    coordToData: function (coord, clamp) {
      var extent = this._extent;
      var scale = this.scale;

      if (this.onBand && scale.type === 'ordinal') {
        extent = extent.slice();
        fixExtentWithBands(extent, scale.count());
      }

      var t = linearMap$1(coord, extent, NORMALIZED_EXTENT, clamp);
      return this.scale.scale(t);
    },

    /**
     * Convert pixel point to data in axis
     * @param {Array.<number>} point
     * @param  {boolean} clamp
     * @return {number} data
     */
    pointToData: function (point, clamp) {// Should be implemented in derived class if necessary.
    },

    /**
     * Different from `zrUtil.map(axis.getTicks(), axis.dataToCoord, axis)`,
     * `axis.getTicksCoords` considers `onBand`, which is used by
     * `boundaryGap:true` of category axis and splitLine and splitArea.
     * @param {Object} [opt]
     * @param {Model} [opt.tickModel=axis.model.getModel('axisTick')]
     * @param {boolean} [opt.clamp] If `true`, the first and the last
     *        tick must be at the axis end points. Otherwise, clip ticks
     *        that outside the axis extent.
     * @return {Array.<Object>} [{
     *     coord: ...,
     *     tickValue: ...
     * }, ...]
     */
    getTicksCoords: function (opt) {
      opt = opt || {};
      var tickModel = opt.tickModel || this.getTickModel();
      var result = createAxisTicks$1(this, tickModel);
      var ticks = result.ticks;
      var ticksCoords = map$6(ticks, function (tickValue) {
        return {
          coord: this.dataToCoord(tickValue),
          tickValue: tickValue
        };
      }, this);
      var alignWithLabel = tickModel.get('alignWithLabel');
      fixOnBandTicksCoords(this, ticksCoords, alignWithLabel, opt.clamp);
      return ticksCoords;
    },

    /**
     * @return {Array.<Array.<Object>>} [{ coord: ..., tickValue: ...}]
     */
    getMinorTicksCoords: function () {
      if (this.scale.type === 'ordinal') {
        // Category axis doesn't support minor ticks
        return [];
      }

      var minorTickModel = this.model.getModel('minorTick');
      var splitNumber = minorTickModel.get('splitNumber'); // Protection.

      if (!(splitNumber > 0 && splitNumber < 100)) {
        splitNumber = 5;
      }

      var minorTicks = this.scale.getMinorTicks(splitNumber);
      var minorTicksCoords = map$6(minorTicks, function (minorTicksGroup) {
        return map$6(minorTicksGroup, function (minorTick) {
          return {
            coord: this.dataToCoord(minorTick),
            tickValue: minorTick
          };
        }, this);
      }, this);
      return minorTicksCoords;
    },

    /**
     * @return {Array.<Object>} [{
     *     formattedLabel: string,
     *     rawLabel: axis.scale.getLabel(tickValue)
     *     tickValue: number
     * }, ...]
     */
    getViewLabels: function () {
      return createAxisLabels$1(this).labels;
    },

    /**
     * @return {module:echarts/coord/model/Model}
     */
    getLabelModel: function () {
      return this.model.getModel('axisLabel');
    },

    /**
     * Notice here we only get the default tick model. For splitLine
     * or splitArea, we should pass the splitLineModel or splitAreaModel
     * manually when calling `getTicksCoords`.
     * In GL, this method may be overrided to:
     * `axisModel.getModel('axisTick', grid3DModel.getModel('axisTick'));`
     * @return {module:echarts/coord/model/Model}
     */
    getTickModel: function () {
      return this.model.getModel('axisTick');
    },

    /**
     * Get width of band
     * @return {number}
     */
    getBandWidth: function () {
      var axisExtent = this._extent;
      var dataExtent = this.scale.getExtent();
      var len = dataExtent[1] - dataExtent[0] + (this.onBand ? 1 : 0); // Fix #2728, avoid NaN when only one data.

      len === 0 && (len = 1);
      var size = Math.abs(axisExtent[1] - axisExtent[0]);
      return Math.abs(size) / len;
    },

    /**
     * @abstract
     * @return {boolean} Is horizontal
     */
    isHorizontal: null,

    /**
     * @abstract
     * @return {number} Get axis rotate, by degree.
     */
    getRotate: null,

    /**
     * Only be called in category axis.
     * Can be overrided, consider other axes like in 3D.
     * @return {number} Auto interval for cateogry axis tick and label
     */
    calculateCategoryInterval: function () {
      return calculateCategoryInterval$1(this);
    }
  };

  function fixExtentWithBands(extent, nTick) {
    var size = extent[1] - extent[0];
    var len = nTick;
    var margin = size / len / 2;
    extent[0] += margin;
    extent[1] -= margin;
  } // If axis has labels [1, 2, 3, 4]. Bands on the axis are
  // |---1---|---2---|---3---|---4---|.
  // So the displayed ticks and splitLine/splitArea should between
  // each data item, otherwise cause misleading (e.g., split tow bars
  // of a single data item when there are two bar series).
  // Also consider if tickCategoryInterval > 0 and onBand, ticks and
  // splitLine/spliteArea should layout appropriately corresponding
  // to displayed labels. (So we should not use `getBandWidth` in this
  // case).


  function fixOnBandTicksCoords(axis, ticksCoords, alignWithLabel, clamp) {
    var ticksLen = ticksCoords.length;

    if (!axis.onBand || alignWithLabel || !ticksLen) {
      return;
    }

    var axisExtent = axis.getExtent();
    var last;
    var diffSize;

    if (ticksLen === 1) {
      ticksCoords[0].coord = axisExtent[0];
      last = ticksCoords[1] = {
        coord: axisExtent[0]
      };
    } else {
      var crossLen = ticksCoords[ticksLen - 1].tickValue - ticksCoords[0].tickValue;
      var shift = (ticksCoords[ticksLen - 1].coord - ticksCoords[0].coord) / crossLen;
      each$j(ticksCoords, function (ticksItem) {
        ticksItem.coord -= shift / 2;
      });
      var dataExtent = axis.scale.getExtent();
      diffSize = 1 + dataExtent[1] - ticksCoords[ticksLen - 1].tickValue;
      last = {
        coord: ticksCoords[ticksLen - 1].coord + shift * diffSize
      };
      ticksCoords.push(last);
    }

    var inverse = axisExtent[0] > axisExtent[1]; // Handling clamp.

    if (littleThan(ticksCoords[0].coord, axisExtent[0])) {
      clamp ? ticksCoords[0].coord = axisExtent[0] : ticksCoords.shift();
    }

    if (clamp && littleThan(axisExtent[0], ticksCoords[0].coord)) {
      ticksCoords.unshift({
        coord: axisExtent[0]
      });
    }

    if (littleThan(axisExtent[1], last.coord)) {
      clamp ? last.coord = axisExtent[1] : ticksCoords.pop();
    }

    if (clamp && littleThan(last.coord, axisExtent[1])) {
      ticksCoords.push({
        coord: axisExtent[1]
      });
    }

    function littleThan(a, b) {
      // Avoid rounding error cause calculated tick coord different with extent.
      // It may cause an extra unecessary tick added.
      a = round$2(a);
      b = round$2(b);
      return inverse ? a > b : a < b;
    }
  }

  var _default$1u = Axis;
  var Axis_1 = _default$1u;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  var zrender_1 = zrender;



  var matrix_1 = matrix;



  var vector_1 = vector;





  var color$1 = color;





  var number$1 = number;



  var format$1 = format;
  var throttle_1$1 = throttle_1.throttle;



  var helper$2 = helper$1;



  var parseGeoJSON_1 = parseGeoJson;



  var List$1 = List_1;



  var Model$1 = Model_1;



  var Axis$1 = Axis_1;



  var env$1 = env_1;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * Do not mount those modules on 'src/echarts' for better tree shaking.
   */
  var parseGeoJson$1 = parseGeoJson;
  var ecUtil = {};
  util.each(['map', 'each', 'filter', 'indexOf', 'inherits', 'reduce', 'filter', 'bind', 'curry', 'isArray', 'isString', 'isObject', 'isFunction', 'extend', 'defaults', 'clone', 'merge'], function (name) {
    ecUtil[name] = util[name];
  });
  var graphic$1 = {};
  util.each(['extendShape', 'extendPath', 'makePath', 'makeImage', 'mergePath', 'resizePath', 'createIcon', 'setHoverStyle', 'setLabelStyle', 'setTextStyle', 'setText', 'getFont', 'updateProps', 'initProps', 'getTransform', 'clipPointsByRect', 'clipRectByRect', 'registerShape', 'getShapeClass', 'Group', 'Image', 'Text', 'Circle', 'Sector', 'Ring', 'Polygon', 'Polyline', 'Rect', 'Line', 'BezierCurve', 'Arc', 'IncrementalDisplayable', 'CompoundPath', 'LinearGradient', 'RadialGradient', 'BoundingRect'], function (name) {
    graphic$1[name] = graphic[name];
  });
  var parseGeoJson_1 = parseGeoJson$1;
  var util$2 = ecUtil;
  var graphic_1 = graphic$1;

  var _export = {
  	zrender: zrender_1,
  	matrix: matrix_1,
  	vector: vector_1,
  	color: color$1,
  	number: number$1,
  	format: format$1,
  	throttle: throttle_1$1,
  	helper: helper$2,
  	parseGeoJSON: parseGeoJSON_1,
  	List: List$1,
  	Model: Model$1,
  	Axis: Axis$1,
  	env: env$1,
  	parseGeoJson: parseGeoJson_1,
  	util: util$2,
  	graphic: graphic_1
  };

  var echarts = createCommonjsModule(function (module, exports) {







































  var throttle = throttle_1.throttle;

















  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var assert = util.assert;
  var each = util.each;
  var isFunction = util.isFunction;
  var isObject = util.isObject;
  var parseClassType = Component.parseClassType;
  var version = '4.7.0';
  var dependencies = {
    zrender: '4.3.0'
  };
  var TEST_FRAME_REMAIN_TIME = 1;
  var PRIORITY_PROCESSOR_FILTER = 1000;
  var PRIORITY_PROCESSOR_SERIES_FILTER = 800;
  var PRIORITY_PROCESSOR_DATASTACK = 900;
  var PRIORITY_PROCESSOR_STATISTIC = 5000;
  var PRIORITY_VISUAL_LAYOUT = 1000;
  var PRIORITY_VISUAL_PROGRESSIVE_LAYOUT = 1100;
  var PRIORITY_VISUAL_GLOBAL = 2000;
  var PRIORITY_VISUAL_CHART = 3000;
  var PRIORITY_VISUAL_POST_CHART_LAYOUT = 3500;
  var PRIORITY_VISUAL_COMPONENT = 4000; // FIXME
  // necessary?

  var PRIORITY_VISUAL_BRUSH = 5000;
  var PRIORITY = {
    PROCESSOR: {
      FILTER: PRIORITY_PROCESSOR_FILTER,
      SERIES_FILTER: PRIORITY_PROCESSOR_SERIES_FILTER,
      STATISTIC: PRIORITY_PROCESSOR_STATISTIC
    },
    VISUAL: {
      LAYOUT: PRIORITY_VISUAL_LAYOUT,
      PROGRESSIVE_LAYOUT: PRIORITY_VISUAL_PROGRESSIVE_LAYOUT,
      GLOBAL: PRIORITY_VISUAL_GLOBAL,
      CHART: PRIORITY_VISUAL_CHART,
      POST_CHART_LAYOUT: PRIORITY_VISUAL_POST_CHART_LAYOUT,
      COMPONENT: PRIORITY_VISUAL_COMPONENT,
      BRUSH: PRIORITY_VISUAL_BRUSH
    }
  }; // Main process have three entries: `setOption`, `dispatchAction` and `resize`,
  // where they must not be invoked nestedly, except the only case: invoke
  // dispatchAction with updateMethod "none" in main process.
  // This flag is used to carry out this rule.
  // All events will be triggered out side main process (i.e. when !this[IN_MAIN_PROCESS]).

  var IN_MAIN_PROCESS = '__flagInMainProcess';
  var OPTION_UPDATED = '__optionUpdated';
  var ACTION_REG = /^[a-zA-Z0-9_]+$/;

  function createRegisterEventWithLowercaseName(method, ignoreDisposed) {
    return function (eventName, handler, context) {
      if (!ignoreDisposed && this._disposed) {
        disposedWarning(this.id);
        return;
      } // Event name is all lowercase


      eventName = eventName && eventName.toLowerCase();
      Eventful_1.prototype[method].call(this, eventName, handler, context);
    };
  }
  /**
   * @module echarts~MessageCenter
   */


  function MessageCenter() {
    Eventful_1.call(this);
  }

  MessageCenter.prototype.on = createRegisterEventWithLowercaseName('on', true);
  MessageCenter.prototype.off = createRegisterEventWithLowercaseName('off', true);
  MessageCenter.prototype.one = createRegisterEventWithLowercaseName('one', true);
  util.mixin(MessageCenter, Eventful_1);
  /**
   * @module echarts~ECharts
   */

  function ECharts(dom, theme, opts) {
    opts = opts || {}; // Get theme by name

    if (typeof theme === 'string') {
      theme = themeStorage[theme];
    }
    /**
     * @type {string}
     */


    this.id;
    /**
     * Group id
     * @type {string}
     */

    this.group;
    /**
     * @type {HTMLElement}
     * @private
     */

    this._dom = dom;
    var defaultRenderer = 'canvas';

    /**
     * @type {module:zrender/ZRender}
     * @private
     */
    var zr = this._zr = zrender.init(dom, {
      renderer: opts.renderer || defaultRenderer,
      devicePixelRatio: opts.devicePixelRatio,
      width: opts.width,
      height: opts.height
    });
    /**
     * Expect 60 fps.
     * @type {Function}
     * @private
     */

    this._throttledZrFlush = throttle(util.bind(zr.flush, zr), 17);
    var theme = util.clone(theme);
    theme && backwardCompat(theme, true);
    /**
     * @type {Object}
     * @private
     */

    this._theme = theme;
    /**
     * @type {Array.<module:echarts/view/Chart>}
     * @private
     */

    this._chartsViews = [];
    /**
     * @type {Object.<string, module:echarts/view/Chart>}
     * @private
     */

    this._chartsMap = {};
    /**
     * @type {Array.<module:echarts/view/Component>}
     * @private
     */

    this._componentsViews = [];
    /**
     * @type {Object.<string, module:echarts/view/Component>}
     * @private
     */

    this._componentsMap = {};
    /**
     * @type {module:echarts/CoordinateSystem}
     * @private
     */

    this._coordSysMgr = new CoordinateSystem();
    /**
     * @type {module:echarts/ExtensionAPI}
     * @private
     */

    var api = this._api = createExtensionAPI(this); // Sort on demand

    function prioritySortFunc(a, b) {
      return a.__prio - b.__prio;
    }

    timsort(visualFuncs, prioritySortFunc);
    timsort(dataProcessorFuncs, prioritySortFunc);
    /**
     * @type {module:echarts/stream/Scheduler}
     */

    this._scheduler = new Scheduler_1(this, api, dataProcessorFuncs, visualFuncs);
    Eventful_1.call(this, this._ecEventProcessor = new EventProcessor());
    /**
     * @type {module:echarts~MessageCenter}
     * @private
     */

    this._messageCenter = new MessageCenter(); // Init mouse events

    this._initEvents(); // In case some people write `window.onresize = chart.resize`


    this.resize = util.bind(this.resize, this); // Can't dispatch action during rendering procedure

    this._pendingActions = [];
    zr.animation.on('frame', this._onframe, this);
    bindRenderedEvent(zr, this); // ECharts instance can be used as value.

    util.setAsPrimitive(this);
  }

  var echartsProto = ECharts.prototype;

  echartsProto._onframe = function () {
    if (this._disposed) {
      return;
    }

    var scheduler = this._scheduler; // Lazy update

    if (this[OPTION_UPDATED]) {
      var silent = this[OPTION_UPDATED].silent;
      this[IN_MAIN_PROCESS] = true;
      prepare(this);
      updateMethods.update.call(this);
      this[IN_MAIN_PROCESS] = false;
      this[OPTION_UPDATED] = false;
      flushPendingActions.call(this, silent);
      triggerUpdatedEvent.call(this, silent);
    } // Avoid do both lazy update and progress in one frame.
    else if (scheduler.unfinished) {
        // Stream progress.
        var remainTime = TEST_FRAME_REMAIN_TIME;
        var ecModel = this._model;
        var api = this._api;
        scheduler.unfinished = false;

        do {
          var startTime = +new Date();
          scheduler.performSeriesTasks(ecModel); // Currently dataProcessorFuncs do not check threshold.

          scheduler.performDataProcessorTasks(ecModel);
          updateStreamModes(this, ecModel); // Do not update coordinate system here. Because that coord system update in
          // each frame is not a good user experience. So we follow the rule that
          // the extent of the coordinate system is determin in the first frame (the
          // frame is executed immedietely after task reset.
          // this._coordSysMgr.update(ecModel, api);
          // console.log('--- ec frame visual ---', remainTime);

          scheduler.performVisualTasks(ecModel);
          renderSeries(this, this._model, api, 'remain');
          remainTime -= +new Date() - startTime;
        } while (remainTime > 0 && scheduler.unfinished); // Call flush explicitly for trigger finished event.


        if (!scheduler.unfinished) {
          this._zr.flush();
        } // Else, zr flushing be ensue within the same frame,
        // because zr flushing is after onframe event.

      }
  };
  /**
   * @return {HTMLElement}
   */


  echartsProto.getDom = function () {
    return this._dom;
  };
  /**
   * @return {module:zrender~ZRender}
   */


  echartsProto.getZr = function () {
    return this._zr;
  };
  /**
   * Usage:
   * chart.setOption(option, notMerge, lazyUpdate);
   * chart.setOption(option, {
   *     notMerge: ...,
   *     lazyUpdate: ...,
   *     silent: ...
   * });
   *
   * @param {Object} option
   * @param {Object|boolean} [opts] opts or notMerge.
   * @param {boolean} [opts.notMerge=false]
   * @param {boolean} [opts.lazyUpdate=false] Useful when setOption frequently.
   */


  echartsProto.setOption = function (option, notMerge, lazyUpdate) {
    if (this._disposed) {
      disposedWarning(this.id);
      return;
    }

    var silent;

    if (isObject(notMerge)) {
      lazyUpdate = notMerge.lazyUpdate;
      silent = notMerge.silent;
      notMerge = notMerge.notMerge;
    }

    this[IN_MAIN_PROCESS] = true;

    if (!this._model || notMerge) {
      var optionManager = new OptionManager_1(this._api);
      var theme = this._theme;
      var ecModel = this._model = new Global();
      ecModel.scheduler = this._scheduler;
      ecModel.init(null, null, theme, optionManager);
    }

    this._model.setOption(option, optionPreprocessorFuncs);

    if (lazyUpdate) {
      this[OPTION_UPDATED] = {
        silent: silent
      };
      this[IN_MAIN_PROCESS] = false;
    } else {
      prepare(this);
      updateMethods.update.call(this); // Ensure zr refresh sychronously, and then pixel in canvas can be
      // fetched after `setOption`.

      this._zr.flush();

      this[OPTION_UPDATED] = false;
      this[IN_MAIN_PROCESS] = false;
      flushPendingActions.call(this, silent);
      triggerUpdatedEvent.call(this, silent);
    }
  };
  /**
   * @DEPRECATED
   */


  echartsProto.setTheme = function () {
    console.error('ECharts#setTheme() is DEPRECATED in ECharts 3.0');
  };
  /**
   * @return {module:echarts/model/Global}
   */


  echartsProto.getModel = function () {
    return this._model;
  };
  /**
   * @return {Object}
   */


  echartsProto.getOption = function () {
    return this._model && this._model.getOption();
  };
  /**
   * @return {number}
   */


  echartsProto.getWidth = function () {
    return this._zr.getWidth();
  };
  /**
   * @return {number}
   */


  echartsProto.getHeight = function () {
    return this._zr.getHeight();
  };
  /**
   * @return {number}
   */


  echartsProto.getDevicePixelRatio = function () {
    return this._zr.painter.dpr || window.devicePixelRatio || 1;
  };
  /**
   * Get canvas which has all thing rendered
   * @param {Object} opts
   * @param {string} [opts.backgroundColor]
   * @return {string}
   */


  echartsProto.getRenderedCanvas = function (opts) {
    if (!env_1.canvasSupported) {
      return;
    }

    opts = opts || {};
    opts.pixelRatio = opts.pixelRatio || 1;
    opts.backgroundColor = opts.backgroundColor || this._model.get('backgroundColor');
    var zr = this._zr; // var list = zr.storage.getDisplayList();
    // Stop animations
    // Never works before in init animation, so remove it.
    // zrUtil.each(list, function (el) {
    //     el.stopAnimation(true);
    // });

    return zr.painter.getRenderedCanvas(opts);
  };
  /**
   * Get svg data url
   * @return {string}
   */


  echartsProto.getSvgDataUrl = function () {
    if (!env_1.svgSupported) {
      return;
    }

    var zr = this._zr;
    var list = zr.storage.getDisplayList(); // Stop animations

    util.each(list, function (el) {
      el.stopAnimation(true);
    });
    return zr.painter.pathToDataUrl();
  };
  /**
   * @return {string}
   * @param {Object} opts
   * @param {string} [opts.type='png']
   * @param {string} [opts.pixelRatio=1]
   * @param {string} [opts.backgroundColor]
   * @param {string} [opts.excludeComponents]
   */


  echartsProto.getDataURL = function (opts) {
    if (this._disposed) {
      disposedWarning(this.id);
      return;
    }

    opts = opts || {};
    var excludeComponents = opts.excludeComponents;
    var ecModel = this._model;
    var excludesComponentViews = [];
    var self = this;
    each(excludeComponents, function (componentType) {
      ecModel.eachComponent({
        mainType: componentType
      }, function (component) {
        var view = self._componentsMap[component.__viewId];

        if (!view.group.ignore) {
          excludesComponentViews.push(view);
          view.group.ignore = true;
        }
      });
    });
    var url = this._zr.painter.getType() === 'svg' ? this.getSvgDataUrl() : this.getRenderedCanvas(opts).toDataURL('image/' + (opts && opts.type || 'png'));
    each(excludesComponentViews, function (view) {
      view.group.ignore = false;
    });
    return url;
  };
  /**
   * @return {string}
   * @param {Object} opts
   * @param {string} [opts.type='png']
   * @param {string} [opts.pixelRatio=1]
   * @param {string} [opts.backgroundColor]
   */


  echartsProto.getConnectedDataURL = function (opts) {
    if (this._disposed) {
      disposedWarning(this.id);
      return;
    }

    if (!env_1.canvasSupported) {
      return;
    }

    var groupId = this.group;
    var mathMin = Math.min;
    var mathMax = Math.max;
    var MAX_NUMBER = Infinity;

    if (connectedGroups[groupId]) {
      var left = MAX_NUMBER;
      var top = MAX_NUMBER;
      var right = -MAX_NUMBER;
      var bottom = -MAX_NUMBER;
      var canvasList = [];
      var dpr = opts && opts.pixelRatio || 1;
      util.each(instances, function (chart, id) {
        if (chart.group === groupId) {
          var canvas = chart.getRenderedCanvas(util.clone(opts));
          var boundingRect = chart.getDom().getBoundingClientRect();
          left = mathMin(boundingRect.left, left);
          top = mathMin(boundingRect.top, top);
          right = mathMax(boundingRect.right, right);
          bottom = mathMax(boundingRect.bottom, bottom);
          canvasList.push({
            dom: canvas,
            left: boundingRect.left,
            top: boundingRect.top
          });
        }
      });
      left *= dpr;
      top *= dpr;
      right *= dpr;
      bottom *= dpr;
      var width = right - left;
      var height = bottom - top;
      var targetCanvas = util.createCanvas();
      targetCanvas.width = width;
      targetCanvas.height = height;
      var zr = zrender.init(targetCanvas); // Background between the charts

      if (opts.connectedBackgroundColor) {
        zr.add(new graphic.Rect({
          shape: {
            x: 0,
            y: 0,
            width: width,
            height: height
          },
          style: {
            fill: opts.connectedBackgroundColor
          }
        }));
      }

      each(canvasList, function (item) {
        var img = new graphic.Image({
          style: {
            x: item.left * dpr - left,
            y: item.top * dpr - top,
            image: item.dom
          }
        });
        zr.add(img);
      });
      zr.refreshImmediately();
      return targetCanvas.toDataURL('image/' + (opts && opts.type || 'png'));
    } else {
      return this.getDataURL(opts);
    }
  };
  /**
   * Convert from logical coordinate system to pixel coordinate system.
   * See CoordinateSystem#convertToPixel.
   * @param {string|Object} finder
   *        If string, e.g., 'geo', means {geoIndex: 0}.
   *        If Object, could contain some of these properties below:
   *        {
   *            seriesIndex / seriesId / seriesName,
   *            geoIndex / geoId, geoName,
   *            bmapIndex / bmapId / bmapName,
   *            xAxisIndex / xAxisId / xAxisName,
   *            yAxisIndex / yAxisId / yAxisName,
   *            gridIndex / gridId / gridName,
   *            ... (can be extended)
   *        }
   * @param {Array|number} value
   * @return {Array|number} result
   */


  echartsProto.convertToPixel = util.curry(doConvertPixel, 'convertToPixel');
  /**
   * Convert from pixel coordinate system to logical coordinate system.
   * See CoordinateSystem#convertFromPixel.
   * @param {string|Object} finder
   *        If string, e.g., 'geo', means {geoIndex: 0}.
   *        If Object, could contain some of these properties below:
   *        {
   *            seriesIndex / seriesId / seriesName,
   *            geoIndex / geoId / geoName,
   *            bmapIndex / bmapId / bmapName,
   *            xAxisIndex / xAxisId / xAxisName,
   *            yAxisIndex / yAxisId / yAxisName
   *            gridIndex / gridId / gridName,
   *            ... (can be extended)
   *        }
   * @param {Array|number} value
   * @return {Array|number} result
   */

  echartsProto.convertFromPixel = util.curry(doConvertPixel, 'convertFromPixel');

  function doConvertPixel(methodName, finder, value) {
    if (this._disposed) {
      disposedWarning(this.id);
      return;
    }

    var ecModel = this._model;

    var coordSysList = this._coordSysMgr.getCoordinateSystems();

    var result;
    finder = model.parseFinder(ecModel, finder);

    for (var i = 0; i < coordSysList.length; i++) {
      var coordSys = coordSysList[i];

      if (coordSys[methodName] && (result = coordSys[methodName](ecModel, finder, value)) != null) {
        return result;
      }
    }
  }
  /**
   * Is the specified coordinate systems or components contain the given pixel point.
   * @param {string|Object} finder
   *        If string, e.g., 'geo', means {geoIndex: 0}.
   *        If Object, could contain some of these properties below:
   *        {
   *            seriesIndex / seriesId / seriesName,
   *            geoIndex / geoId / geoName,
   *            bmapIndex / bmapId / bmapName,
   *            xAxisIndex / xAxisId / xAxisName,
   *            yAxisIndex / yAxisId / yAxisName,
   *            gridIndex / gridId / gridName,
   *            ... (can be extended)
   *        }
   * @param {Array|number} value
   * @return {boolean} result
   */


  echartsProto.containPixel = function (finder, value) {
    if (this._disposed) {
      disposedWarning(this.id);
      return;
    }

    var ecModel = this._model;
    var result;
    finder = model.parseFinder(ecModel, finder);
    util.each(finder, function (models, key) {
      key.indexOf('Models') >= 0 && util.each(models, function (model) {
        var coordSys = model.coordinateSystem;

        if (coordSys && coordSys.containPoint) {
          result |= !!coordSys.containPoint(value);
        } else if (key === 'seriesModels') {
          var view = this._chartsMap[model.__viewId];

          if (view && view.containPoint) {
            result |= view.containPoint(value, model);
          }
        } else ;
      }, this);
    }, this);
    return !!result;
  };
  /**
   * Get visual from series or data.
   * @param {string|Object} finder
   *        If string, e.g., 'series', means {seriesIndex: 0}.
   *        If Object, could contain some of these properties below:
   *        {
   *            seriesIndex / seriesId / seriesName,
   *            dataIndex / dataIndexInside
   *        }
   *        If dataIndex is not specified, series visual will be fetched,
   *        but not data item visual.
   *        If all of seriesIndex, seriesId, seriesName are not specified,
   *        visual will be fetched from first series.
   * @param {string} visualType 'color', 'symbol', 'symbolSize'
   */


  echartsProto.getVisual = function (finder, visualType) {
    var ecModel = this._model;
    finder = model.parseFinder(ecModel, finder, {
      defaultMainType: 'series'
    });
    var seriesModel = finder.seriesModel;
    var data = seriesModel.getData();
    var dataIndexInside = finder.hasOwnProperty('dataIndexInside') ? finder.dataIndexInside : finder.hasOwnProperty('dataIndex') ? data.indexOfRawIndex(finder.dataIndex) : null;
    return dataIndexInside != null ? data.getItemVisual(dataIndexInside, visualType) : data.getVisual(visualType);
  };
  /**
   * Get view of corresponding component model
   * @param  {module:echarts/model/Component} componentModel
   * @return {module:echarts/view/Component}
   */


  echartsProto.getViewOfComponentModel = function (componentModel) {
    return this._componentsMap[componentModel.__viewId];
  };
  /**
   * Get view of corresponding series model
   * @param  {module:echarts/model/Series} seriesModel
   * @return {module:echarts/view/Chart}
   */


  echartsProto.getViewOfSeriesModel = function (seriesModel) {
    return this._chartsMap[seriesModel.__viewId];
  };

  var updateMethods = {
    prepareAndUpdate: function (payload) {
      prepare(this);
      updateMethods.update.call(this, payload);
    },

    /**
     * @param {Object} payload
     * @private
     */
    update: function (payload) {
      // console.profile && console.profile('update');
      var ecModel = this._model;
      var api = this._api;
      var zr = this._zr;
      var coordSysMgr = this._coordSysMgr;
      var scheduler = this._scheduler; // update before setOption

      if (!ecModel) {
        return;
      }

      scheduler.restoreData(ecModel, payload);
      scheduler.performSeriesTasks(ecModel); // TODO
      // Save total ecModel here for undo/redo (after restoring data and before processing data).
      // Undo (restoration of total ecModel) can be carried out in 'action' or outside API call.
      // Create new coordinate system each update
      // In LineView may save the old coordinate system and use it to get the orignal point

      coordSysMgr.create(ecModel, api);
      scheduler.performDataProcessorTasks(ecModel, payload); // Current stream render is not supported in data process. So we can update
      // stream modes after data processing, where the filtered data is used to
      // deteming whether use progressive rendering.

      updateStreamModes(this, ecModel); // We update stream modes before coordinate system updated, then the modes info
      // can be fetched when coord sys updating (consider the barGrid extent fix). But
      // the drawback is the full coord info can not be fetched. Fortunately this full
      // coord is not requied in stream mode updater currently.

      coordSysMgr.update(ecModel, api);
      clearColorPalette(ecModel);
      scheduler.performVisualTasks(ecModel, payload);
      render(this, ecModel, api, payload); // Set background

      var backgroundColor = ecModel.get('backgroundColor') || 'transparent'; // In IE8

      if (!env_1.canvasSupported) {
        var colorArr = color.parse(backgroundColor);
        backgroundColor = color.stringify(colorArr, 'rgb');

        if (colorArr[3] === 0) {
          backgroundColor = 'transparent';
        }
      } else {
        zr.setBackgroundColor(backgroundColor);
      }

      performPostUpdateFuncs(ecModel, api); // console.profile && console.profileEnd('update');
    },

    /**
     * @param {Object} payload
     * @private
     */
    updateTransform: function (payload) {
      var ecModel = this._model;
      var ecIns = this;
      var api = this._api; // update before setOption

      if (!ecModel) {
        return;
      } // ChartView.markUpdateMethod(payload, 'updateTransform');


      var componentDirtyList = [];
      ecModel.eachComponent(function (componentType, componentModel) {
        var componentView = ecIns.getViewOfComponentModel(componentModel);

        if (componentView && componentView.__alive) {
          if (componentView.updateTransform) {
            var result = componentView.updateTransform(componentModel, ecModel, api, payload);
            result && result.update && componentDirtyList.push(componentView);
          } else {
            componentDirtyList.push(componentView);
          }
        }
      });
      var seriesDirtyMap = util.createHashMap();
      ecModel.eachSeries(function (seriesModel) {
        var chartView = ecIns._chartsMap[seriesModel.__viewId];

        if (chartView.updateTransform) {
          var result = chartView.updateTransform(seriesModel, ecModel, api, payload);
          result && result.update && seriesDirtyMap.set(seriesModel.uid, 1);
        } else {
          seriesDirtyMap.set(seriesModel.uid, 1);
        }
      });
      clearColorPalette(ecModel); // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.
      // this._scheduler.performVisualTasks(ecModel, payload, 'layout', true);

      this._scheduler.performVisualTasks(ecModel, payload, {
        setDirty: true,
        dirtyMap: seriesDirtyMap
      }); // Currently, not call render of components. Geo render cost a lot.
      // renderComponents(ecIns, ecModel, api, payload, componentDirtyList);


      renderSeries(ecIns, ecModel, api, payload, seriesDirtyMap);
      performPostUpdateFuncs(ecModel, this._api);
    },

    /**
     * @param {Object} payload
     * @private
     */
    updateView: function (payload) {
      var ecModel = this._model; // update before setOption

      if (!ecModel) {
        return;
      }

      Chart_1.markUpdateMethod(payload, 'updateView');
      clearColorPalette(ecModel); // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.

      this._scheduler.performVisualTasks(ecModel, payload, {
        setDirty: true
      });

      render(this, this._model, this._api, payload);
      performPostUpdateFuncs(ecModel, this._api);
    },

    /**
     * @param {Object} payload
     * @private
     */
    updateVisual: function (payload) {
      updateMethods.update.call(this, payload); // var ecModel = this._model;
      // // update before setOption
      // if (!ecModel) {
      //     return;
      // }
      // ChartView.markUpdateMethod(payload, 'updateVisual');
      // clearColorPalette(ecModel);
      // // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.
      // this._scheduler.performVisualTasks(ecModel, payload, {visualType: 'visual', setDirty: true});
      // render(this, this._model, this._api, payload);
      // performPostUpdateFuncs(ecModel, this._api);
    },

    /**
     * @param {Object} payload
     * @private
     */
    updateLayout: function (payload) {
      updateMethods.update.call(this, payload); // var ecModel = this._model;
      // // update before setOption
      // if (!ecModel) {
      //     return;
      // }
      // ChartView.markUpdateMethod(payload, 'updateLayout');
      // // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.
      // // this._scheduler.performVisualTasks(ecModel, payload, 'layout', true);
      // this._scheduler.performVisualTasks(ecModel, payload, {setDirty: true});
      // render(this, this._model, this._api, payload);
      // performPostUpdateFuncs(ecModel, this._api);
    }
  };

  function prepare(ecIns) {
    var ecModel = ecIns._model;
    var scheduler = ecIns._scheduler;
    scheduler.restorePipelines(ecModel);
    scheduler.prepareStageTasks();
    prepareView(ecIns, 'component', ecModel, scheduler);
    prepareView(ecIns, 'chart', ecModel, scheduler);
    scheduler.plan();
  }
  /**
   * @private
   */


  function updateDirectly(ecIns, method, payload, mainType, subType) {
    var ecModel = ecIns._model; // broadcast

    if (!mainType) {
      // FIXME
      // Chart will not be update directly here, except set dirty.
      // But there is no such scenario now.
      each(ecIns._componentsViews.concat(ecIns._chartsViews), callView);
      return;
    }

    var query = {};
    query[mainType + 'Id'] = payload[mainType + 'Id'];
    query[mainType + 'Index'] = payload[mainType + 'Index'];
    query[mainType + 'Name'] = payload[mainType + 'Name'];
    var condition = {
      mainType: mainType,
      query: query
    };
    subType && (condition.subType = subType); // subType may be '' by parseClassType;

    var excludeSeriesId = payload.excludeSeriesId;

    if (excludeSeriesId != null) {
      excludeSeriesId = util.createHashMap(model.normalizeToArray(excludeSeriesId));
    } // If dispatchAction before setOption, do nothing.


    ecModel && ecModel.eachComponent(condition, function (model) {
      if (!excludeSeriesId || excludeSeriesId.get(model.id) == null) {
        callView(ecIns[mainType === 'series' ? '_chartsMap' : '_componentsMap'][model.__viewId]);
      }
    }, ecIns);

    function callView(view) {
      view && view.__alive && view[method] && view[method](view.__model, ecModel, ecIns._api, payload);
    }
  }
  /**
   * Resize the chart
   * @param {Object} opts
   * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)
   * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)
   * @param {boolean} [opts.silent=false]
   */


  echartsProto.resize = function (opts) {
    if (this._disposed) {
      disposedWarning(this.id);
      return;
    }

    this._zr.resize(opts);

    var ecModel = this._model; // Resize loading effect

    this._loadingFX && this._loadingFX.resize();

    if (!ecModel) {
      return;
    }

    var optionChanged = ecModel.resetOption('media');
    var silent = opts && opts.silent;
    this[IN_MAIN_PROCESS] = true;
    optionChanged && prepare(this);
    updateMethods.update.call(this);
    this[IN_MAIN_PROCESS] = false;
    flushPendingActions.call(this, silent);
    triggerUpdatedEvent.call(this, silent);
  };

  function updateStreamModes(ecIns, ecModel) {
    var chartsMap = ecIns._chartsMap;
    var scheduler = ecIns._scheduler;
    ecModel.eachSeries(function (seriesModel) {
      scheduler.updateStreamModes(seriesModel, chartsMap[seriesModel.__viewId]);
    });
  }
  /**
   * Show loading effect
   * @param  {string} [name='default']
   * @param  {Object} [cfg]
   */


  echartsProto.showLoading = function (name, cfg) {
    if (this._disposed) {
      disposedWarning(this.id);
      return;
    }

    if (isObject(name)) {
      cfg = name;
      name = '';
    }

    name = name || 'default';
    this.hideLoading();

    if (!loadingEffects[name]) {
      return;
    }

    var el = loadingEffects[name](this._api, cfg);
    var zr = this._zr;
    this._loadingFX = el;
    zr.add(el);
  };
  /**
   * Hide loading effect
   */


  echartsProto.hideLoading = function () {
    if (this._disposed) {
      disposedWarning(this.id);
      return;
    }

    this._loadingFX && this._zr.remove(this._loadingFX);
    this._loadingFX = null;
  };
  /**
   * @param {Object} eventObj
   * @return {Object}
   */


  echartsProto.makeActionFromEvent = function (eventObj) {
    var payload = util.extend({}, eventObj);
    payload.type = eventActionMap[eventObj.type];
    return payload;
  };
  /**
   * @pubilc
   * @param {Object} payload
   * @param {string} [payload.type] Action type
   * @param {Object|boolean} [opt] If pass boolean, means opt.silent
   * @param {boolean} [opt.silent=false] Whether trigger events.
   * @param {boolean} [opt.flush=undefined]
   *                  true: Flush immediately, and then pixel in canvas can be fetched
   *                      immediately. Caution: it might affect performance.
   *                  false: Not flush.
   *                  undefined: Auto decide whether perform flush.
   */


  echartsProto.dispatchAction = function (payload, opt) {
    if (this._disposed) {
      disposedWarning(this.id);
      return;
    }

    if (!isObject(opt)) {
      opt = {
        silent: !!opt
      };
    }

    if (!actions[payload.type]) {
      return;
    } // Avoid dispatch action before setOption. Especially in `connect`.


    if (!this._model) {
      return;
    } // May dispatchAction in rendering procedure


    if (this[IN_MAIN_PROCESS]) {
      this._pendingActions.push(payload);

      return;
    }

    doDispatchAction.call(this, payload, opt.silent);

    if (opt.flush) {
      this._zr.flush(true);
    } else if (opt.flush !== false && env_1.browser.weChat) {
      // In WeChat embeded browser, `requestAnimationFrame` and `setInterval`
      // hang when sliding page (on touch event), which cause that zr does not
      // refresh util user interaction finished, which is not expected.
      // But `dispatchAction` may be called too frequently when pan on touch
      // screen, which impacts performance if do not throttle them.
      this._throttledZrFlush();
    }

    flushPendingActions.call(this, opt.silent);
    triggerUpdatedEvent.call(this, opt.silent);
  };

  function doDispatchAction(payload, silent) {
    var payloadType = payload.type;
    var escapeConnect = payload.escapeConnect;
    var actionWrap = actions[payloadType];
    var actionInfo = actionWrap.actionInfo;
    var cptType = (actionInfo.update || 'update').split(':');
    var updateMethod = cptType.pop();
    cptType = cptType[0] != null && parseClassType(cptType[0]);
    this[IN_MAIN_PROCESS] = true;
    var payloads = [payload];
    var batched = false; // Batch action

    if (payload.batch) {
      batched = true;
      payloads = util.map(payload.batch, function (item) {
        item = util.defaults(util.extend({}, item), payload);
        item.batch = null;
        return item;
      });
    }

    var eventObjBatch = [];
    var eventObj;
    var isHighDown = payloadType === 'highlight' || payloadType === 'downplay';
    each(payloads, function (batchItem) {
      // Action can specify the event by return it.
      eventObj = actionWrap.action(batchItem, this._model, this._api); // Emit event outside

      eventObj = eventObj || util.extend({}, batchItem); // Convert type to eventType

      eventObj.type = actionInfo.event || eventObj.type;
      eventObjBatch.push(eventObj); // light update does not perform data process, layout and visual.

      if (isHighDown) {
        // method, payload, mainType, subType
        updateDirectly(this, updateMethod, batchItem, 'series');
      } else if (cptType) {
        updateDirectly(this, updateMethod, batchItem, cptType.main, cptType.sub);
      }
    }, this);

    if (updateMethod !== 'none' && !isHighDown && !cptType) {
      // Still dirty
      if (this[OPTION_UPDATED]) {
        // FIXME Pass payload ?
        prepare(this);
        updateMethods.update.call(this, payload);
        this[OPTION_UPDATED] = false;
      } else {
        updateMethods[updateMethod].call(this, payload);
      }
    } // Follow the rule of action batch


    if (batched) {
      eventObj = {
        type: actionInfo.event || payloadType,
        escapeConnect: escapeConnect,
        batch: eventObjBatch
      };
    } else {
      eventObj = eventObjBatch[0];
    }

    this[IN_MAIN_PROCESS] = false;
    !silent && this._messageCenter.trigger(eventObj.type, eventObj);
  }

  function flushPendingActions(silent) {
    var pendingActions = this._pendingActions;

    while (pendingActions.length) {
      var payload = pendingActions.shift();
      doDispatchAction.call(this, payload, silent);
    }
  }

  function triggerUpdatedEvent(silent) {
    !silent && this.trigger('updated');
  }
  /**
   * Event `rendered` is triggered when zr
   * rendered. It is useful for realtime
   * snapshot (reflect animation).
   *
   * Event `finished` is triggered when:
   * (1) zrender rendering finished.
   * (2) initial animation finished.
   * (3) progressive rendering finished.
   * (4) no pending action.
   * (5) no delayed setOption needs to be processed.
   */


  function bindRenderedEvent(zr, ecIns) {
    zr.on('rendered', function () {
      ecIns.trigger('rendered'); // The `finished` event should not be triggered repeatly,
      // so it should only be triggered when rendering indeed happend
      // in zrender. (Consider the case that dipatchAction is keep
      // triggering when mouse move).

      if ( // Although zr is dirty if initial animation is not finished
      // and this checking is called on frame, we also check
      // animation finished for robustness.
      zr.animation.isFinished() && !ecIns[OPTION_UPDATED] && !ecIns._scheduler.unfinished && !ecIns._pendingActions.length) {
        ecIns.trigger('finished');
      }
    });
  }
  /**
   * @param {Object} params
   * @param {number} params.seriesIndex
   * @param {Array|TypedArray} params.data
   */


  echartsProto.appendData = function (params) {
    if (this._disposed) {
      disposedWarning(this.id);
      return;
    }

    var seriesIndex = params.seriesIndex;
    var ecModel = this.getModel();
    var seriesModel = ecModel.getSeriesByIndex(seriesIndex);
    seriesModel.appendData(params); // Note: `appendData` does not support that update extent of coordinate
    // system, util some scenario require that. In the expected usage of
    // `appendData`, the initial extent of coordinate system should better
    // be fixed by axis `min`/`max` setting or initial data, otherwise if
    // the extent changed while `appendData`, the location of the painted
    // graphic elements have to be changed, which make the usage of
    // `appendData` meaningless.

    this._scheduler.unfinished = true;
  };
  /**
   * Register event
   * @method
   */


  echartsProto.on = createRegisterEventWithLowercaseName('on', false);
  echartsProto.off = createRegisterEventWithLowercaseName('off', false);
  echartsProto.one = createRegisterEventWithLowercaseName('one', false);
  /**
   * Prepare view instances of charts and components
   * @param  {module:echarts/model/Global} ecModel
   * @private
   */

  function prepareView(ecIns, type, ecModel, scheduler) {
    var isComponent = type === 'component';
    var viewList = isComponent ? ecIns._componentsViews : ecIns._chartsViews;
    var viewMap = isComponent ? ecIns._componentsMap : ecIns._chartsMap;
    var zr = ecIns._zr;
    var api = ecIns._api;

    for (var i = 0; i < viewList.length; i++) {
      viewList[i].__alive = false;
    }

    isComponent ? ecModel.eachComponent(function (componentType, model) {
      componentType !== 'series' && doPrepare(model);
    }) : ecModel.eachSeries(doPrepare);

    function doPrepare(model) {
      // Consider: id same and type changed.
      var viewId = '_ec_' + model.id + '_' + model.type;
      var view = viewMap[viewId];

      if (!view) {
        var classType = parseClassType(model.type);
        var Clazz = isComponent ? Component_1.getClass(classType.main, classType.sub) : Chart_1.getClass(classType.sub);
        view = new Clazz();
        view.init(ecModel, api);
        viewMap[viewId] = view;
        viewList.push(view);
        zr.add(view.group);
      }

      model.__viewId = view.__id = viewId;
      view.__alive = true;
      view.__model = model;
      view.group.__ecComponentInfo = {
        mainType: model.mainType,
        index: model.componentIndex
      };
      !isComponent && scheduler.prepareView(view, model, ecModel, api);
    }

    for (var i = 0; i < viewList.length;) {
      var view = viewList[i];

      if (!view.__alive) {
        !isComponent && view.renderTask.dispose();
        zr.remove(view.group);
        view.dispose(ecModel, api);
        viewList.splice(i, 1);
        delete viewMap[view.__id];
        view.__id = view.group.__ecComponentInfo = null;
      } else {
        i++;
      }
    }
  } // /**
  //  * Encode visual infomation from data after data processing
  //  *
  //  * @param {module:echarts/model/Global} ecModel
  //  * @param {object} layout
  //  * @param {boolean} [layoutFilter] `true`: only layout,
  //  *                                 `false`: only not layout,
  //  *                                 `null`/`undefined`: all.
  //  * @param {string} taskBaseTag
  //  * @private
  //  */
  // function startVisualEncoding(ecIns, ecModel, api, payload, layoutFilter) {
  //     each(visualFuncs, function (visual, index) {
  //         var isLayout = visual.isLayout;
  //         if (layoutFilter == null
  //             || (layoutFilter === false && !isLayout)
  //             || (layoutFilter === true && isLayout)
  //         ) {
  //             visual.func(ecModel, api, payload);
  //         }
  //     });
  // }


  function clearColorPalette(ecModel) {
    ecModel.clearColorPalette();
    ecModel.eachSeries(function (seriesModel) {
      seriesModel.clearColorPalette();
    });
  }

  function render(ecIns, ecModel, api, payload) {
    renderComponents(ecIns, ecModel, api, payload);
    each(ecIns._chartsViews, function (chart) {
      chart.__alive = false;
    });
    renderSeries(ecIns, ecModel, api, payload); // Remove groups of unrendered charts

    each(ecIns._chartsViews, function (chart) {
      if (!chart.__alive) {
        chart.remove(ecModel, api);
      }
    });
  }

  function renderComponents(ecIns, ecModel, api, payload, dirtyList) {
    each(dirtyList || ecIns._componentsViews, function (componentView) {
      var componentModel = componentView.__model;
      componentView.render(componentModel, ecModel, api, payload);
      updateZ(componentModel, componentView);
    });
  }
  /**
   * Render each chart and component
   * @private
   */


  function renderSeries(ecIns, ecModel, api, payload, dirtyMap) {
    // Render all charts
    var scheduler = ecIns._scheduler;
    var unfinished;
    ecModel.eachSeries(function (seriesModel) {
      var chartView = ecIns._chartsMap[seriesModel.__viewId];
      chartView.__alive = true;
      var renderTask = chartView.renderTask;
      scheduler.updatePayload(renderTask, payload);

      if (dirtyMap && dirtyMap.get(seriesModel.uid)) {
        renderTask.dirty();
      }

      unfinished |= renderTask.perform(scheduler.getPerformArgs(renderTask));
      chartView.group.silent = !!seriesModel.get('silent');
      updateZ(seriesModel, chartView);
      updateBlend(seriesModel, chartView);
    });
    scheduler.unfinished |= unfinished; // If use hover layer

    updateHoverLayerStatus(ecIns, ecModel); // Add aria

    aria(ecIns._zr.dom, ecModel);
  }

  function performPostUpdateFuncs(ecModel, api) {
    each(postUpdateFuncs, function (func) {
      func(ecModel, api);
    });
  }

  var MOUSE_EVENT_NAMES = ['click', 'dblclick', 'mouseover', 'mouseout', 'mousemove', 'mousedown', 'mouseup', 'globalout', 'contextmenu'];
  /**
   * @private
   */

  echartsProto._initEvents = function () {
    each(MOUSE_EVENT_NAMES, function (eveName) {
      var handler = function (e) {
        var ecModel = this.getModel();
        var el = e.target;
        var params;
        var isGlobalOut = eveName === 'globalout'; // no e.target when 'globalout'.

        if (isGlobalOut) {
          params = {};
        } else if (el && el.dataIndex != null) {
          var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);
          params = dataModel && dataModel.getDataParams(el.dataIndex, el.dataType, el) || {};
        } // If element has custom eventData of components
        else if (el && el.eventData) {
            params = util.extend({}, el.eventData);
          } // Contract: if params prepared in mouse event,
        // these properties must be specified:
        // {
        //    componentType: string (component main type)
        //    componentIndex: number
        // }
        // Otherwise event query can not work.


        if (params) {
          var componentType = params.componentType;
          var componentIndex = params.componentIndex; // Special handling for historic reason: when trigger by
          // markLine/markPoint/markArea, the componentType is
          // 'markLine'/'markPoint'/'markArea', but we should better
          // enable them to be queried by seriesIndex, since their
          // option is set in each series.

          if (componentType === 'markLine' || componentType === 'markPoint' || componentType === 'markArea') {
            componentType = 'series';
            componentIndex = params.seriesIndex;
          }

          var model = componentType && componentIndex != null && ecModel.getComponent(componentType, componentIndex);
          var view = model && this[model.mainType === 'series' ? '_chartsMap' : '_componentsMap'][model.__viewId];
          params.event = e;
          params.type = eveName;
          this._ecEventProcessor.eventInfo = {
            targetEl: el,
            packedEvent: params,
            model: model,
            view: view
          };
          this.trigger(eveName, params);
        }
      }; // Consider that some component (like tooltip, brush, ...)
      // register zr event handler, but user event handler might
      // do anything, such as call `setOption` or `dispatchAction`,
      // which probably update any of the content and probably
      // cause problem if it is called previous other inner handlers.


      handler.zrEventfulCallAtLast = true;

      this._zr.on(eveName, handler, this);
    }, this);
    each(eventActionMap, function (actionType, eventType) {
      this._messageCenter.on(eventType, function (event) {
        this.trigger(eventType, event);
      }, this);
    }, this);
  };
  /**
   * @return {boolean}
   */


  echartsProto.isDisposed = function () {
    return this._disposed;
  };
  /**
   * Clear
   */


  echartsProto.clear = function () {
    if (this._disposed) {
      disposedWarning(this.id);
      return;
    }

    this.setOption({
      series: []
    }, true);
  };
  /**
   * Dispose instance
   */


  echartsProto.dispose = function () {
    if (this._disposed) {
      disposedWarning(this.id);
      return;
    }

    this._disposed = true;
    model.setAttribute(this.getDom(), DOM_ATTRIBUTE_KEY, '');
    var api = this._api;
    var ecModel = this._model;
    each(this._componentsViews, function (component) {
      component.dispose(ecModel, api);
    });
    each(this._chartsViews, function (chart) {
      chart.dispose(ecModel, api);
    }); // Dispose after all views disposed

    this._zr.dispose();

    delete instances[this.id];
  };

  util.mixin(ECharts, Eventful_1);

  function disposedWarning(id) {}

  function updateHoverLayerStatus(ecIns, ecModel) {
    var zr = ecIns._zr;
    var storage = zr.storage;
    var elCount = 0;
    storage.traverse(function (el) {
      elCount++;
    });

    if (elCount > ecModel.get('hoverLayerThreshold') && !env_1.node) {
      ecModel.eachSeries(function (seriesModel) {
        if (seriesModel.preventUsingHoverLayer) {
          return;
        }

        var chartView = ecIns._chartsMap[seriesModel.__viewId];

        if (chartView.__alive) {
          chartView.group.traverse(function (el) {
            // Don't switch back.
            el.useHoverLayer = true;
          });
        }
      });
    }
  }
  /**
   * Update chart progressive and blend.
   * @param {module:echarts/model/Series|module:echarts/model/Component} model
   * @param {module:echarts/view/Component|module:echarts/view/Chart} view
   */


  function updateBlend(seriesModel, chartView) {
    var blendMode = seriesModel.get('blendMode') || null;
    chartView.group.traverse(function (el) {
      // FIXME marker and other components
      if (!el.isGroup) {
        // Only set if blendMode is changed. In case element is incremental and don't wan't to rerender.
        if (el.style.blend !== blendMode) {
          el.setStyle('blend', blendMode);
        }
      }

      if (el.eachPendingDisplayable) {
        el.eachPendingDisplayable(function (displayable) {
          displayable.setStyle('blend', blendMode);
        });
      }
    });
  }
  /**
   * @param {module:echarts/model/Series|module:echarts/model/Component} model
   * @param {module:echarts/view/Component|module:echarts/view/Chart} view
   */


  function updateZ(model, view) {
    var z = model.get('z');
    var zlevel = model.get('zlevel'); // Set z and zlevel

    view.group.traverse(function (el) {
      if (el.type !== 'group') {
        z != null && (el.z = z);
        zlevel != null && (el.zlevel = zlevel);
      }
    });
  }

  function createExtensionAPI(ecInstance) {
    var coordSysMgr = ecInstance._coordSysMgr;
    return util.extend(new ExtensionAPI_1(ecInstance), {
      // Inject methods
      getCoordinateSystems: util.bind(coordSysMgr.getCoordinateSystems, coordSysMgr),
      getComponentByElement: function (el) {
        while (el) {
          var modelInfo = el.__ecComponentInfo;

          if (modelInfo != null) {
            return ecInstance._model.getComponent(modelInfo.mainType, modelInfo.index);
          }

          el = el.parent;
        }
      }
    });
  }
  /**
   * @class
   * Usage of query:
   * `chart.on('click', query, handler);`
   * The `query` can be:
   * + The component type query string, only `mainType` or `mainType.subType`,
   *   like: 'xAxis', 'series', 'xAxis.category' or 'series.line'.
   * + The component query object, like:
   *   `{seriesIndex: 2}`, `{seriesName: 'xx'}`, `{seriesId: 'some'}`,
   *   `{xAxisIndex: 2}`, `{xAxisName: 'xx'}`, `{xAxisId: 'some'}`.
   * + The data query object, like:
   *   `{dataIndex: 123}`, `{dataType: 'link'}`, `{name: 'some'}`.
   * + The other query object (cmponent customized query), like:
   *   `{element: 'some'}` (only available in custom series).
   *
   * Caveat: If a prop in the `query` object is `null/undefined`, it is the
   * same as there is no such prop in the `query` object.
   */


  function EventProcessor() {
    // These info required: targetEl, packedEvent, model, view
    this.eventInfo;
  }

  EventProcessor.prototype = {
    constructor: EventProcessor,
    normalizeQuery: function (query) {
      var cptQuery = {};
      var dataQuery = {};
      var otherQuery = {}; // `query` is `mainType` or `mainType.subType` of component.

      if (util.isString(query)) {
        var condCptType = parseClassType(query); // `.main` and `.sub` may be ''.

        cptQuery.mainType = condCptType.main || null;
        cptQuery.subType = condCptType.sub || null;
      } // `query` is an object, convert to {mainType, index, name, id}.
      else {
          // `xxxIndex`, `xxxName`, `xxxId`, `name`, `dataIndex`, `dataType` is reserved,
          // can not be used in `compomentModel.filterForExposedEvent`.
          var suffixes = ['Index', 'Name', 'Id'];
          var dataKeys = {
            name: 1,
            dataIndex: 1,
            dataType: 1
          };
          util.each(query, function (val, key) {
            var reserved = false;

            for (var i = 0; i < suffixes.length; i++) {
              var propSuffix = suffixes[i];
              var suffixPos = key.lastIndexOf(propSuffix);

              if (suffixPos > 0 && suffixPos === key.length - propSuffix.length) {
                var mainType = key.slice(0, suffixPos); // Consider `dataIndex`.

                if (mainType !== 'data') {
                  cptQuery.mainType = mainType;
                  cptQuery[propSuffix.toLowerCase()] = val;
                  reserved = true;
                }
              }
            }

            if (dataKeys.hasOwnProperty(key)) {
              dataQuery[key] = val;
              reserved = true;
            }

            if (!reserved) {
              otherQuery[key] = val;
            }
          });
        }

      return {
        cptQuery: cptQuery,
        dataQuery: dataQuery,
        otherQuery: otherQuery
      };
    },
    filter: function (eventType, query, args) {
      // They should be assigned before each trigger call.
      var eventInfo = this.eventInfo;

      if (!eventInfo) {
        return true;
      }

      var targetEl = eventInfo.targetEl;
      var packedEvent = eventInfo.packedEvent;
      var model = eventInfo.model;
      var view = eventInfo.view; // For event like 'globalout'.

      if (!model || !view) {
        return true;
      }

      var cptQuery = query.cptQuery;
      var dataQuery = query.dataQuery;
      return check(cptQuery, model, 'mainType') && check(cptQuery, model, 'subType') && check(cptQuery, model, 'index', 'componentIndex') && check(cptQuery, model, 'name') && check(cptQuery, model, 'id') && check(dataQuery, packedEvent, 'name') && check(dataQuery, packedEvent, 'dataIndex') && check(dataQuery, packedEvent, 'dataType') && (!view.filterForExposedEvent || view.filterForExposedEvent(eventType, query.otherQuery, targetEl, packedEvent));

      function check(query, host, prop, propOnHost) {
        return query[prop] == null || host[propOnHost || prop] === query[prop];
      }
    },
    afterTrigger: function () {
      // Make sure the eventInfo wont be used in next trigger.
      this.eventInfo = null;
    }
  };
  /**
   * @type {Object} key: actionType.
   * @inner
   */

  var actions = {};
  /**
   * Map eventType to actionType
   * @type {Object}
   */

  var eventActionMap = {};
  /**
   * Data processor functions of each stage
   * @type {Array.<Object.<string, Function>>}
   * @inner
   */

  var dataProcessorFuncs = [];
  /**
   * @type {Array.<Function>}
   * @inner
   */

  var optionPreprocessorFuncs = [];
  /**
   * @type {Array.<Function>}
   * @inner
   */

  var postUpdateFuncs = [];
  /**
   * Visual encoding functions of each stage
   * @type {Array.<Object.<string, Function>>}
   */

  var visualFuncs = [];
  /**
   * Theme storage
   * @type {Object.<key, Object>}
   */

  var themeStorage = {};
  /**
   * Loading effects
   */

  var loadingEffects = {};
  var instances = {};
  var connectedGroups = {};
  var idBase = new Date() - 0;
  var groupIdBase = new Date() - 0;
  var DOM_ATTRIBUTE_KEY = '_echarts_instance_';

  function enableConnect(chart) {
    var STATUS_PENDING = 0;
    var STATUS_UPDATING = 1;
    var STATUS_UPDATED = 2;
    var STATUS_KEY = '__connectUpdateStatus';

    function updateConnectedChartsStatus(charts, status) {
      for (var i = 0; i < charts.length; i++) {
        var otherChart = charts[i];
        otherChart[STATUS_KEY] = status;
      }
    }

    each(eventActionMap, function (actionType, eventType) {
      chart._messageCenter.on(eventType, function (event) {
        if (connectedGroups[chart.group] && chart[STATUS_KEY] !== STATUS_PENDING) {
          if (event && event.escapeConnect) {
            return;
          }

          var action = chart.makeActionFromEvent(event);
          var otherCharts = [];
          each(instances, function (otherChart) {
            if (otherChart !== chart && otherChart.group === chart.group) {
              otherCharts.push(otherChart);
            }
          });
          updateConnectedChartsStatus(otherCharts, STATUS_PENDING);
          each(otherCharts, function (otherChart) {
            if (otherChart[STATUS_KEY] !== STATUS_UPDATING) {
              otherChart.dispatchAction(action);
            }
          });
          updateConnectedChartsStatus(otherCharts, STATUS_UPDATED);
        }
      });
    });
  }
  /**
   * @param {HTMLElement} dom
   * @param {Object} [theme]
   * @param {Object} opts
   * @param {number} [opts.devicePixelRatio] Use window.devicePixelRatio by default
   * @param {string} [opts.renderer] Can choose 'canvas' or 'svg' to render the chart.
   * @param {number} [opts.width] Use clientWidth of the input `dom` by default.
   *                              Can be 'auto' (the same as null/undefined)
   * @param {number} [opts.height] Use clientHeight of the input `dom` by default.
   *                               Can be 'auto' (the same as null/undefined)
   */


  function init(dom, theme, opts) {
    var existInstance = getInstanceByDom(dom);

    if (existInstance) {
      return existInstance;
    }

    var chart = new ECharts(dom, theme, opts);
    chart.id = 'ec_' + idBase++;
    instances[chart.id] = chart;
    model.setAttribute(dom, DOM_ATTRIBUTE_KEY, chart.id);
    enableConnect(chart);
    return chart;
  }
  /**
   * @return {string|Array.<module:echarts~ECharts>} groupId
   */


  function connect(groupId) {
    // Is array of charts
    if (util.isArray(groupId)) {
      var charts = groupId;
      groupId = null; // If any chart has group

      each(charts, function (chart) {
        if (chart.group != null) {
          groupId = chart.group;
        }
      });
      groupId = groupId || 'g_' + groupIdBase++;
      each(charts, function (chart) {
        chart.group = groupId;
      });
    }

    connectedGroups[groupId] = true;
    return groupId;
  }
  /**
   * @DEPRECATED
   * @return {string} groupId
   */


  function disConnect(groupId) {
    connectedGroups[groupId] = false;
  }
  /**
   * @return {string} groupId
   */


  var disconnect = disConnect;
  /**
   * Dispose a chart instance
   * @param  {module:echarts~ECharts|HTMLDomElement|string} chart
   */

  function dispose(chart) {
    if (typeof chart === 'string') {
      chart = instances[chart];
    } else if (!(chart instanceof ECharts)) {
      // Try to treat as dom
      chart = getInstanceByDom(chart);
    }

    if (chart instanceof ECharts && !chart.isDisposed()) {
      chart.dispose();
    }
  }
  /**
   * @param  {HTMLElement} dom
   * @return {echarts~ECharts}
   */


  function getInstanceByDom(dom) {
    return instances[model.getAttribute(dom, DOM_ATTRIBUTE_KEY)];
  }
  /**
   * @param {string} key
   * @return {echarts~ECharts}
   */


  function getInstanceById(key) {
    return instances[key];
  }
  /**
   * Register theme
   */


  function registerTheme(name, theme) {
    themeStorage[name] = theme;
  }
  /**
   * Register option preprocessor
   * @param {Function} preprocessorFunc
   */


  function registerPreprocessor(preprocessorFunc) {
    optionPreprocessorFuncs.push(preprocessorFunc);
  }
  /**
   * @param {number} [priority=1000]
   * @param {Object|Function} processor
   */


  function registerProcessor(priority, processor) {
    normalizeRegister(dataProcessorFuncs, priority, processor, PRIORITY_PROCESSOR_FILTER);
  }
  /**
   * Register postUpdater
   * @param {Function} postUpdateFunc
   */


  function registerPostUpdate(postUpdateFunc) {
    postUpdateFuncs.push(postUpdateFunc);
  }
  /**
   * Usage:
   * registerAction('someAction', 'someEvent', function () { ... });
   * registerAction('someAction', function () { ... });
   * registerAction(
   *     {type: 'someAction', event: 'someEvent', update: 'updateView'},
   *     function () { ... }
   * );
   *
   * @param {(string|Object)} actionInfo
   * @param {string} actionInfo.type
   * @param {string} [actionInfo.event]
   * @param {string} [actionInfo.update]
   * @param {string} [eventName]
   * @param {Function} action
   */


  function registerAction(actionInfo, eventName, action) {
    if (typeof eventName === 'function') {
      action = eventName;
      eventName = '';
    }

    var actionType = isObject(actionInfo) ? actionInfo.type : [actionInfo, actionInfo = {
      event: eventName
    }][0]; // Event name is all lowercase

    actionInfo.event = (actionInfo.event || actionType).toLowerCase();
    eventName = actionInfo.event; // Validate action type and event name.

    assert(ACTION_REG.test(actionType) && ACTION_REG.test(eventName));

    if (!actions[actionType]) {
      actions[actionType] = {
        action: action,
        actionInfo: actionInfo
      };
    }

    eventActionMap[eventName] = actionType;
  }
  /**
   * @param {string} type
   * @param {*} CoordinateSystem
   */


  function registerCoordinateSystem(type, CoordinateSystem$1) {
    CoordinateSystem.register(type, CoordinateSystem$1);
  }
  /**
   * Get dimensions of specified coordinate system.
   * @param {string} type
   * @return {Array.<string|Object>}
   */


  function getCoordinateSystemDimensions(type) {
    var coordSysCreator = CoordinateSystem.get(type);

    if (coordSysCreator) {
      return coordSysCreator.getDimensionsInfo ? coordSysCreator.getDimensionsInfo() : coordSysCreator.dimensions.slice();
    }
  }
  /**
   * Layout is a special stage of visual encoding
   * Most visual encoding like color are common for different chart
   * But each chart has it's own layout algorithm
   *
   * @param {number} [priority=1000]
   * @param {Function} layoutTask
   */


  function registerLayout(priority, layoutTask) {
    normalizeRegister(visualFuncs, priority, layoutTask, PRIORITY_VISUAL_LAYOUT, 'layout');
  }
  /**
   * @param {number} [priority=3000]
   * @param {module:echarts/stream/Task} visualTask
   */


  function registerVisual(priority, visualTask) {
    normalizeRegister(visualFuncs, priority, visualTask, PRIORITY_VISUAL_CHART, 'visual');
  }
  /**
   * @param {Object|Function} fn: {seriesType, createOnAllSeries, performRawSeries, reset}
   */


  function normalizeRegister(targetList, priority, fn, defaultPriority, visualType) {
    if (isFunction(priority) || isObject(priority)) {
      fn = priority;
      priority = defaultPriority;
    }

    var stageHandler = Scheduler_1.wrapStageHandler(fn, visualType);
    stageHandler.__prio = priority;
    stageHandler.__raw = fn;
    targetList.push(stageHandler);
    return stageHandler;
  }
  /**
   * @param {string} name
   */


  function registerLoading(name, loadingFx) {
    loadingEffects[name] = loadingFx;
  }
  /**
   * @param {Object} opts
   * @param {string} [superClass]
   */


  function extendComponentModel(opts
  /*, superClass*/
  ) {
    // var Clazz = ComponentModel;
    // if (superClass) {
    //     var classType = parseClassType(superClass);
    //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);
    // }
    return Component.extend(opts);
  }
  /**
   * @param {Object} opts
   * @param {string} [superClass]
   */


  function extendComponentView(opts
  /*, superClass*/
  ) {
    // var Clazz = ComponentView;
    // if (superClass) {
    //     var classType = parseClassType(superClass);
    //     Clazz = ComponentView.getClass(classType.main, classType.sub, true);
    // }
    return Component_1.extend(opts);
  }
  /**
   * @param {Object} opts
   * @param {string} [superClass]
   */


  function extendSeriesModel(opts
  /*, superClass*/
  ) {
    // var Clazz = SeriesModel;
    // if (superClass) {
    //     superClass = 'series.' + superClass.replace('series.', '');
    //     var classType = parseClassType(superClass);
    //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);
    // }
    return Series.extend(opts);
  }
  /**
   * @param {Object} opts
   * @param {string} [superClass]
   */


  function extendChartView(opts
  /*, superClass*/
  ) {
    // var Clazz = ChartView;
    // if (superClass) {
    //     superClass = superClass.replace('series.', '');
    //     var classType = parseClassType(superClass);
    //     Clazz = ChartView.getClass(classType.main, true);
    // }
    return Chart_1.extend(opts);
  }
  /**
   * ZRender need a canvas context to do measureText.
   * But in node environment canvas may be created by node-canvas.
   * So we need to specify how to create a canvas instead of using document.createElement('canvas')
   *
   * Be careful of using it in the browser.
   *
   * @param {Function} creator
   * @example
   *     var Canvas = require('canvas');
   *     var echarts = require('echarts');
   *     echarts.setCanvasCreator(function () {
   *         // Small size is enough.
   *         return new Canvas(32, 32);
   *     });
   */


  function setCanvasCreator(creator) {
    util.$override('createCanvas', creator);
  }
  /**
   * @param {string} mapName
   * @param {Array.<Object>|Object|string} geoJson
   * @param {Object} [specialAreas]
   *
   * @example GeoJSON
   *     $.get('USA.json', function (geoJson) {
   *         echarts.registerMap('USA', geoJson);
   *         // Or
   *         echarts.registerMap('USA', {
   *             geoJson: geoJson,
   *             specialAreas: {}
   *         })
   *     });
   *
   *     $.get('airport.svg', function (svg) {
   *         echarts.registerMap('airport', {
   *             svg: svg
   *         }
   *     });
   *
   *     echarts.registerMap('eu', [
   *         {svg: eu-topographic.svg},
   *         {geoJSON: eu.json}
   *     ])
   */


  function registerMap(mapName, geoJson, specialAreas) {
    mapDataStorage.registerMap(mapName, geoJson, specialAreas);
  }
  /**
   * @param {string} mapName
   * @return {Object}
   */


  function getMap(mapName) {
    // For backward compatibility, only return the first one.
    var records = mapDataStorage.retrieveMap(mapName);
    return records && records[0] && {
      geoJson: records[0].geoJSON,
      specialAreas: records[0].specialAreas
    };
  }

  registerVisual(PRIORITY_VISUAL_GLOBAL, seriesColor);
  registerPreprocessor(backwardCompat);
  registerProcessor(PRIORITY_PROCESSOR_DATASTACK, dataStack);
  registerLoading('default', _default_1); // Default actions

  registerAction({
    type: 'highlight',
    event: 'highlight',
    update: 'highlight'
  }, util.noop);
  registerAction({
    type: 'downplay',
    event: 'downplay',
    update: 'downplay'
  }, util.noop); // Default theme

  registerTheme('light', light);
  registerTheme('dark', dark); // For backward compatibility, where the namespace `dataTool` will
  // be mounted on `echarts` is the extension `dataTool` is imported.

  var dataTool = {};
  exports.version = version;
  exports.dependencies = dependencies;
  exports.PRIORITY = PRIORITY;
  exports.init = init;
  exports.connect = connect;
  exports.disConnect = disConnect;
  exports.disconnect = disconnect;
  exports.dispose = dispose;
  exports.getInstanceByDom = getInstanceByDom;
  exports.getInstanceById = getInstanceById;
  exports.registerTheme = registerTheme;
  exports.registerPreprocessor = registerPreprocessor;
  exports.registerProcessor = registerProcessor;
  exports.registerPostUpdate = registerPostUpdate;
  exports.registerAction = registerAction;
  exports.registerCoordinateSystem = registerCoordinateSystem;
  exports.getCoordinateSystemDimensions = getCoordinateSystemDimensions;
  exports.registerLayout = registerLayout;
  exports.registerVisual = registerVisual;
  exports.registerLoading = registerLoading;
  exports.extendComponentModel = extendComponentModel;
  exports.extendComponentView = extendComponentView;
  exports.extendSeriesModel = extendSeriesModel;
  exports.extendChartView = extendChartView;
  exports.setCanvasCreator = setCanvasCreator;
  exports.registerMap = registerMap;
  exports.getMap = getMap;
  exports.dataTool = dataTool;

  (function () {
      for (var key in _export) {
          if (_export.hasOwnProperty(key)) {
              exports[key] = _export[key];
          }
      }
  })();
  });
  var echarts_1 = echarts.version;
  var echarts_2 = echarts.dependencies;
  var echarts_3 = echarts.PRIORITY;
  var echarts_4 = echarts.init;
  var echarts_5 = echarts.connect;
  var echarts_6 = echarts.disConnect;
  var echarts_7 = echarts.disconnect;
  var echarts_8 = echarts.dispose;
  var echarts_9 = echarts.getInstanceByDom;
  var echarts_10 = echarts.getInstanceById;
  var echarts_11 = echarts.registerTheme;
  var echarts_12 = echarts.registerPreprocessor;
  var echarts_13 = echarts.registerProcessor;
  var echarts_14 = echarts.registerPostUpdate;
  var echarts_15 = echarts.registerAction;
  var echarts_16 = echarts.registerCoordinateSystem;
  var echarts_17 = echarts.getCoordinateSystemDimensions;
  var echarts_18 = echarts.registerLayout;
  var echarts_19 = echarts.registerVisual;
  var echarts_20 = echarts.registerLoading;
  var echarts_21 = echarts.extendComponentModel;
  var echarts_22 = echarts.extendComponentView;
  var echarts_23 = echarts.extendSeriesModel;
  var echarts_24 = echarts.extendChartView;
  var echarts_25 = echarts.setCanvasCreator;
  var echarts_26 = echarts.registerMap;
  var echarts_27 = echarts.getMap;
  var echarts_28 = echarts.dataTool;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * Cartesian coordinate system
   * @module  echarts/coord/Cartesian
   *
   */
  function dimAxisMapper(dim) {
    return this._axes[dim];
  }
  /**
   * @alias module:echarts/coord/Cartesian
   * @constructor
   */


  var Cartesian = function (name) {
    this._axes = {};
    this._dimList = [];
    /**
     * @type {string}
     */

    this.name = name || '';
  };

  Cartesian.prototype = {
    constructor: Cartesian,
    type: 'cartesian',

    /**
     * Get axis
     * @param  {number|string} dim
     * @return {module:echarts/coord/Cartesian~Axis}
     */
    getAxis: function (dim) {
      return this._axes[dim];
    },

    /**
     * Get axes list
     * @return {Array.<module:echarts/coord/Cartesian~Axis>}
     */
    getAxes: function () {
      return util.map(this._dimList, dimAxisMapper, this);
    },

    /**
     * Get axes list by given scale type
     */
    getAxesByScale: function (scaleType) {
      scaleType = scaleType.toLowerCase();
      return util.filter(this.getAxes(), function (axis) {
        return axis.scale.type === scaleType;
      });
    },

    /**
     * Add axis
     * @param {module:echarts/coord/Cartesian.Axis}
     */
    addAxis: function (axis) {
      var dim = axis.dim;
      this._axes[dim] = axis;

      this._dimList.push(dim);
    },

    /**
     * Convert data to coord in nd space
     * @param {Array.<number>|Object.<string, number>} val
     * @return {Array.<number>|Object.<string, number>}
     */
    dataToCoord: function (val) {
      return this._dataCoordConvert(val, 'dataToCoord');
    },

    /**
     * Convert coord in nd space to data
     * @param  {Array.<number>|Object.<string, number>} val
     * @return {Array.<number>|Object.<string, number>}
     */
    coordToData: function (val) {
      return this._dataCoordConvert(val, 'coordToData');
    },
    _dataCoordConvert: function (input, method) {
      var dimList = this._dimList;
      var output = input instanceof Array ? [] : {};

      for (var i = 0; i < dimList.length; i++) {
        var dim = dimList[i];
        var axis = this._axes[dim];
        output[dim] = axis[method](input[dim]);
      }

      return output;
    }
  };
  var _default$1v = Cartesian;
  var Cartesian_1 = _default$1v;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */







  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  function Cartesian2D(name) {
    Cartesian_1.call(this, name);
  }

  Cartesian2D.prototype = {
    constructor: Cartesian2D,
    type: 'cartesian2d',

    /**
     * @type {Array.<string>}
     * @readOnly
     */
    dimensions: ['x', 'y'],

    /**
     * Base axis will be used on stacking.
     *
     * @return {module:echarts/coord/cartesian/Axis2D}
     */
    getBaseAxis: function () {
      return this.getAxesByScale('ordinal')[0] || this.getAxesByScale('time')[0] || this.getAxis('x');
    },

    /**
     * If contain point
     * @param {Array.<number>} point
     * @return {boolean}
     */
    containPoint: function (point) {
      var axisX = this.getAxis('x');
      var axisY = this.getAxis('y');
      return axisX.contain(axisX.toLocalCoord(point[0])) && axisY.contain(axisY.toLocalCoord(point[1]));
    },

    /**
     * If contain data
     * @param {Array.<number>} data
     * @return {boolean}
     */
    containData: function (data) {
      return this.getAxis('x').containData(data[0]) && this.getAxis('y').containData(data[1]);
    },

    /**
     * @param {Array.<number>} data
     * @param {Array.<number>} out
     * @return {Array.<number>}
     */
    dataToPoint: function (data, reserved, out) {
      var xAxis = this.getAxis('x');
      var yAxis = this.getAxis('y');
      out = out || [];
      out[0] = xAxis.toGlobalCoord(xAxis.dataToCoord(data[0]));
      out[1] = yAxis.toGlobalCoord(yAxis.dataToCoord(data[1]));
      return out;
    },

    /**
     * @param {Array.<number>} data
     * @param {Array.<number>} out
     * @return {Array.<number>}
     */
    clampData: function (data, out) {
      var xScale = this.getAxis('x').scale;
      var yScale = this.getAxis('y').scale;
      var xAxisExtent = xScale.getExtent();
      var yAxisExtent = yScale.getExtent();
      var x = xScale.parse(data[0]);
      var y = yScale.parse(data[1]);
      out = out || [];
      out[0] = Math.min(Math.max(Math.min(xAxisExtent[0], xAxisExtent[1]), x), Math.max(xAxisExtent[0], xAxisExtent[1]));
      out[1] = Math.min(Math.max(Math.min(yAxisExtent[0], yAxisExtent[1]), y), Math.max(yAxisExtent[0], yAxisExtent[1]));
      return out;
    },

    /**
     * @param {Array.<number>} point
     * @param {Array.<number>} out
     * @return {Array.<number>}
     */
    pointToData: function (point, out) {
      var xAxis = this.getAxis('x');
      var yAxis = this.getAxis('y');
      out = out || [];
      out[0] = xAxis.coordToData(xAxis.toLocalCoord(point[0]));
      out[1] = yAxis.coordToData(yAxis.toLocalCoord(point[1]));
      return out;
    },

    /**
     * Get other axis
     * @param {module:echarts/coord/cartesian/Axis2D} axis
     */
    getOtherAxis: function (axis) {
      return this.getAxis(axis.dim === 'x' ? 'y' : 'x');
    },

    /**
     * Get rect area of cartesian.
     * Area will have a contain function to determine if a point is in the coordinate system.
     * @return {BoundingRect}
     */
    getArea: function () {
      var xExtent = this.getAxis('x').getGlobalExtent();
      var yExtent = this.getAxis('y').getGlobalExtent();
      var x = Math.min(xExtent[0], xExtent[1]);
      var y = Math.min(yExtent[0], yExtent[1]);
      var width = Math.max(xExtent[0], xExtent[1]) - x;
      var height = Math.max(yExtent[0], yExtent[1]) - y;
      var rect = new BoundingRect_1(x, y, width, height);
      return rect;
    }
  };
  util.inherits(Cartesian2D, Cartesian_1);
  var _default$1w = Cartesian2D;
  var Cartesian2D_1 = _default$1w;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */





  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * Extend axis 2d
   * @constructor module:echarts/coord/cartesian/Axis2D
   * @extends {module:echarts/coord/cartesian/Axis}
   * @param {string} dim
   * @param {*} scale
   * @param {Array.<number>} coordExtent
   * @param {string} axisType
   * @param {string} position
   */
  var Axis2D = function (dim, scale, coordExtent, axisType, position) {
    Axis_1.call(this, dim, scale, coordExtent);
    /**
     * Axis type
     *  - 'category'
     *  - 'value'
     *  - 'time'
     *  - 'log'
     * @type {string}
     */

    this.type = axisType || 'value';
    /**
     * Axis position
     *  - 'top'
     *  - 'bottom'
     *  - 'left'
     *  - 'right'
     */

    this.position = position || 'bottom';
  };

  Axis2D.prototype = {
    constructor: Axis2D,

    /**
     * Index of axis, can be used as key
     */
    index: 0,

    /**
     * Implemented in <module:echarts/coord/cartesian/Grid>.
     * @return {Array.<module:echarts/coord/cartesian/Axis2D>}
     *         If not on zero of other axis, return null/undefined.
     *         If no axes, return an empty array.
     */
    getAxesOnZeroOf: null,

    /**
     * Axis model
     * @param {module:echarts/coord/cartesian/AxisModel}
     */
    model: null,
    isHorizontal: function () {
      var position = this.position;
      return position === 'top' || position === 'bottom';
    },

    /**
     * Each item cooresponds to this.getExtent(), which
     * means globalExtent[0] may greater than globalExtent[1],
     * unless `asc` is input.
     *
     * @param {boolean} [asc]
     * @return {Array.<number>}
     */
    getGlobalExtent: function (asc) {
      var ret = this.getExtent();
      ret[0] = this.toGlobalCoord(ret[0]);
      ret[1] = this.toGlobalCoord(ret[1]);
      asc && ret[0] > ret[1] && ret.reverse();
      return ret;
    },
    getOtherAxis: function () {
      this.grid.getOtherAxis();
    },

    /**
     * @override
     */
    pointToData: function (point, clamp) {
      return this.coordToData(this.toLocalCoord(point[this.dim === 'x' ? 0 : 1]), clamp);
    },

    /**
     * Transform global coord to local coord,
     * i.e. var localCoord = axis.toLocalCoord(80);
     * designate by module:echarts/coord/cartesian/Grid.
     * @type {Function}
     */
    toLocalCoord: null,

    /**
     * Transform global coord to local coord,
     * i.e. var globalCoord = axis.toLocalCoord(40);
     * designate by module:echarts/coord/cartesian/Grid.
     * @type {Function}
     */
    toGlobalCoord: null
  };
  util.inherits(Axis2D, Axis_1);
  var _default$1x = Axis2D;
  var Axis2D_1 = _default$1x;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var defaultOption = {
    show: true,
    zlevel: 0,
    z: 0,
    // Inverse the axis.
    inverse: false,
    // Axis name displayed.
    name: '',
    // 'start' | 'middle' | 'end'
    nameLocation: 'end',
    // By degree. By defualt auto rotate by nameLocation.
    nameRotate: null,
    nameTruncate: {
      maxWidth: null,
      ellipsis: '...',
      placeholder: '.'
    },
    // Use global text style by default.
    nameTextStyle: {},
    // The gap between axisName and axisLine.
    nameGap: 15,
    // Default `false` to support tooltip.
    silent: false,
    // Default `false` to avoid legacy user event listener fail.
    triggerEvent: false,
    tooltip: {
      show: false
    },
    axisPointer: {},
    axisLine: {
      show: true,
      onZero: true,
      onZeroAxisIndex: null,
      lineStyle: {
        color: '#333',
        width: 1,
        type: 'solid'
      },
      // The arrow at both ends the the axis.
      symbol: ['none', 'none'],
      symbolSize: [10, 15]
    },
    axisTick: {
      show: true,
      // Whether axisTick is inside the grid or outside the grid.
      inside: false,
      // The length of axisTick.
      length: 5,
      lineStyle: {
        width: 1
      }
    },
    axisLabel: {
      show: true,
      // Whether axisLabel is inside the grid or outside the grid.
      inside: false,
      rotate: 0,
      // true | false | null/undefined (auto)
      showMinLabel: null,
      // true | false | null/undefined (auto)
      showMaxLabel: null,
      margin: 8,
      // formatter: null,
      fontSize: 12
    },
    splitLine: {
      show: true,
      lineStyle: {
        color: ['#ccc'],
        width: 1,
        type: 'solid'
      }
    },
    splitArea: {
      show: false,
      areaStyle: {
        color: ['rgba(250,250,250,0.3)', 'rgba(200,200,200,0.3)']
      }
    }
  };
  var axisDefault = {};
  axisDefault.categoryAxis = util.merge({
    // The gap at both ends of the axis. For categoryAxis, boolean.
    boundaryGap: true,
    // Set false to faster category collection.
    // Only usefull in the case like: category is
    // ['2012-01-01', '2012-01-02', ...], where the input
    // data has been ensured not duplicate and is large data.
    // null means "auto":
    // if axis.data provided, do not deduplication,
    // else do deduplication.
    deduplication: null,
    // splitArea: {
    // show: false
    // },
    splitLine: {
      show: false
    },
    axisTick: {
      // If tick is align with label when boundaryGap is true
      alignWithLabel: false,
      interval: 'auto'
    },
    axisLabel: {
      interval: 'auto'
    }
  }, defaultOption);
  axisDefault.valueAxis = util.merge({
    // The gap at both ends of the axis. For value axis, [GAP, GAP], where
    // `GAP` can be an absolute pixel number (like `35`), or percent (like `'30%'`)
    boundaryGap: [0, 0],
    // TODO
    // min/max: [30, datamin, 60] or [20, datamin] or [datamin, 60]
    // Min value of the axis. can be:
    // + a number
    // + 'dataMin': use the min value in data.
    // + null/undefined: auto decide min value (consider pretty look and boundaryGap).
    // min: null,
    // Max value of the axis. can be:
    // + a number
    // + 'dataMax': use the max value in data.
    // + null/undefined: auto decide max value (consider pretty look and boundaryGap).
    // max: null,
    // Readonly prop, specifies start value of the range when using data zoom.
    // rangeStart: null
    // Readonly prop, specifies end value of the range when using data zoom.
    // rangeEnd: null
    // Optional value can be:
    // + `false`: always include value 0.
    // + `true`: the extent do not consider value 0.
    // scale: false,
    // AxisTick and axisLabel and splitLine are caculated based on splitNumber.
    splitNumber: 5,
    // Interval specifies the span of the ticks is mandatorily.
    // interval: null
    // Specify min interval when auto calculate tick interval.
    // minInterval: null
    // Specify max interval when auto calculate tick interval.
    // maxInterval: null
    minorTick: {
      // Minor tick, not available for cateogry axis.
      show: false,
      // Split number of minor ticks. The value should be in range of (0, 100)
      splitNumber: 5,
      // Lenght of minor tick
      length: 3,
      // Same inside with axisTick
      // Line style
      lineStyle: {// Default to be same with axisTick
      }
    },
    minorSplitLine: {
      show: false,
      lineStyle: {
        color: '#eee',
        width: 1
      }
    }
  }, defaultOption);
  axisDefault.timeAxis = util.defaults({
    scale: true,
    min: 'dataMin',
    max: 'dataMax'
  }, axisDefault.valueAxis);
  axisDefault.logAxis = util.defaults({
    scale: true,
    logBase: 10
  }, axisDefault.valueAxis);
  var _default$1y = axisDefault;
  var axisDefault_1 = _default$1y;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */









  var getLayoutParams$2 = layout.getLayoutParams;
  var mergeLayoutParam$2 = layout.mergeLayoutParam;



  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  // FIXME axisType is fixed ?
  var AXIS_TYPES = ['value', 'category', 'time', 'log'];
  /**
   * Generate sub axis model class
   * @param {string} axisName 'x' 'y' 'radius' 'angle' 'parallel'
   * @param {module:echarts/model/Component} BaseAxisModelClass
   * @param {Function} axisTypeDefaulter
   * @param {Object} [extraDefaultOption]
   */

  function _default$1z(axisName, BaseAxisModelClass, axisTypeDefaulter, extraDefaultOption) {
    util.each(AXIS_TYPES, function (axisType) {
      BaseAxisModelClass.extend({
        /**
         * @readOnly
         */
        type: axisName + 'Axis.' + axisType,
        mergeDefaultAndTheme: function (option, ecModel) {
          var layoutMode = this.layoutMode;
          var inputPositionParams = layoutMode ? getLayoutParams$2(option) : {};
          var themeModel = ecModel.getTheme();
          util.merge(option, themeModel.get(axisType + 'Axis'));
          util.merge(option, this.getDefaultOption());
          option.type = axisTypeDefaulter(axisName, option);

          if (layoutMode) {
            mergeLayoutParam$2(option, inputPositionParams, layoutMode);
          }
        },

        /**
         * @override
         */
        optionUpdated: function () {
          var thisOption = this.option;

          if (thisOption.type === 'category') {
            this.__ordinalMeta = OrdinalMeta_1.createByAxisModel(this);
          }
        },

        /**
         * Should not be called before all of 'getInitailData' finished.
         * Because categories are collected during initializing data.
         */
        getCategories: function (rawData) {
          var option = this.option; // FIXME
          // warning if called before all of 'getInitailData' finished.

          if (option.type === 'category') {
            if (rawData) {
              return option.data;
            }

            return this.__ordinalMeta.categories;
          }
        },
        getOrdinalMeta: function () {
          return this.__ordinalMeta;
        },
        defaultOption: util.mergeAll([{}, axisDefault_1[axisType + 'Axis'], extraDefaultOption], true)
      });
    });
    Component.registerSubTypeDefaulter(axisName + 'Axis', util.curry(axisTypeDefaulter, axisName));
  }

  var axisModelCreator = _default$1z;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */









  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var AxisModel = Component.extend({
    type: 'cartesian2dAxis',

    /**
     * @type {module:echarts/coord/cartesian/Axis2D}
     */
    axis: null,

    /**
     * @override
     */
    init: function () {
      AxisModel.superApply(this, 'init', arguments);
      this.resetRange();
    },

    /**
     * @override
     */
    mergeOption: function () {
      AxisModel.superApply(this, 'mergeOption', arguments);
      this.resetRange();
    },

    /**
     * @override
     */
    restoreData: function () {
      AxisModel.superApply(this, 'restoreData', arguments);
      this.resetRange();
    },

    /**
     * @override
     * @return {module:echarts/model/Component}
     */
    getCoordSysModel: function () {
      return this.ecModel.queryComponents({
        mainType: 'grid',
        index: this.option.gridIndex,
        id: this.option.gridId
      })[0];
    }
  });

  function getAxisType(axisDim, option) {
    // Default axis with data is category axis
    return option.type || (option.data ? 'category' : 'value');
  }

  util.merge(AxisModel.prototype, axisModelCommonMixin);
  var extraOption = {
    // gridIndex: 0,
    // gridId: '',
    // Offset is for multiple axis on the same position
    offset: 0
  };
  axisModelCreator('x', AxisModel, getAxisType, extraOption);
  axisModelCreator('y', AxisModel, getAxisType, extraOption);

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */





  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  // Grid 是在有直角坐标系的时候必须要存在的
  // 所以这里也要被 Cartesian2D 依赖
  var _default$1A = Component.extend({
    type: 'grid',
    dependencies: ['xAxis', 'yAxis'],
    layoutMode: 'box',

    /**
     * @type {module:echarts/coord/cartesian/Grid}
     */
    coordinateSystem: null,
    defaultOption: {
      show: false,
      zlevel: 0,
      z: 0,
      left: '10%',
      top: 60,
      right: '10%',
      bottom: 60,
      // If grid size contain label
      containLabel: false,
      // width: {totalWidth} - left - right,
      // height: {totalHeight} - top - bottom,
      backgroundColor: 'rgba(0,0,0,0)',
      borderWidth: 1,
      borderColor: '#ccc'
    }
  });

  var isObject$c = util.isObject;
  var each$k = util.each;
  var map$7 = util.map;
  var indexOf$3 = util.indexOf;



  var getLayoutRect$1 = layout.getLayoutRect;



  var createScaleByModel$1 = axisHelper.createScaleByModel;
  var ifAxisCrossZero$1 = axisHelper.ifAxisCrossZero;
  var niceScaleExtent$1 = axisHelper.niceScaleExtent;
  var estimateLabelUnionRect$1 = axisHelper.estimateLabelUnionRect;









  var getStackedDimension$2 = dataStackHelper.getStackedDimension;



  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * Grid is a region which contains at most 4 cartesian systems
   *
   * TODO Default cartesian
   */
  // Depends on GridModel, AxisModel, which performs preprocess.

  /**
   * Check if the axis is used in the specified grid
   * @inner
   */
  function isAxisUsedInTheGrid(axisModel, gridModel, ecModel) {
    return axisModel.getCoordSysModel() === gridModel;
  }

  function Grid(gridModel, ecModel, api) {
    /**
     * @type {Object.<string, module:echarts/coord/cartesian/Cartesian2D>}
     * @private
     */
    this._coordsMap = {};
    /**
     * @type {Array.<module:echarts/coord/cartesian/Cartesian>}
     * @private
     */

    this._coordsList = [];
    /**
     * @type {Object.<string, Array.<module:echarts/coord/cartesian/Axis2D>>}
     * @private
     */

    this._axesMap = {};
    /**
     * @type {Array.<module:echarts/coord/cartesian/Axis2D>}
     * @private
     */

    this._axesList = [];

    this._initCartesian(gridModel, ecModel, api);

    this.model = gridModel;
  }

  var gridProto = Grid.prototype;
  gridProto.type = 'grid';
  gridProto.axisPointerEnabled = true;

  gridProto.getRect = function () {
    return this._rect;
  };

  gridProto.update = function (ecModel, api) {
    var axesMap = this._axesMap;

    this._updateScale(ecModel, this.model);

    each$k(axesMap.x, function (xAxis) {
      niceScaleExtent$1(xAxis.scale, xAxis.model);
    });
    each$k(axesMap.y, function (yAxis) {
      niceScaleExtent$1(yAxis.scale, yAxis.model);
    }); // Key: axisDim_axisIndex, value: boolean, whether onZero target.

    var onZeroRecords = {};
    each$k(axesMap.x, function (xAxis) {
      fixAxisOnZero(axesMap, 'y', xAxis, onZeroRecords);
    });
    each$k(axesMap.y, function (yAxis) {
      fixAxisOnZero(axesMap, 'x', yAxis, onZeroRecords);
    }); // Resize again if containLabel is enabled
    // FIXME It may cause getting wrong grid size in data processing stage

    this.resize(this.model, api);
  };

  function fixAxisOnZero(axesMap, otherAxisDim, axis, onZeroRecords) {
    axis.getAxesOnZeroOf = function () {
      // TODO: onZero of multiple axes.
      return otherAxisOnZeroOf ? [otherAxisOnZeroOf] : [];
    }; // onZero can not be enabled in these two situations:
    // 1. When any other axis is a category axis.
    // 2. When no axis is cross 0 point.


    var otherAxes = axesMap[otherAxisDim];
    var otherAxisOnZeroOf;
    var axisModel = axis.model;
    var onZero = axisModel.get('axisLine.onZero');
    var onZeroAxisIndex = axisModel.get('axisLine.onZeroAxisIndex');

    if (!onZero) {
      return;
    } // If target axis is specified.


    if (onZeroAxisIndex != null) {
      if (canOnZeroToAxis(otherAxes[onZeroAxisIndex])) {
        otherAxisOnZeroOf = otherAxes[onZeroAxisIndex];
      }
    } else {
      // Find the first available other axis.
      for (var idx in otherAxes) {
        if (otherAxes.hasOwnProperty(idx) && canOnZeroToAxis(otherAxes[idx]) // Consider that two Y axes on one value axis,
        // if both onZero, the two Y axes overlap.
        && !onZeroRecords[getOnZeroRecordKey(otherAxes[idx])]) {
          otherAxisOnZeroOf = otherAxes[idx];
          break;
        }
      }
    }

    if (otherAxisOnZeroOf) {
      onZeroRecords[getOnZeroRecordKey(otherAxisOnZeroOf)] = true;
    }

    function getOnZeroRecordKey(axis) {
      return axis.dim + '_' + axis.index;
    }
  }

  function canOnZeroToAxis(axis) {
    return axis && axis.type !== 'category' && axis.type !== 'time' && ifAxisCrossZero$1(axis);
  }
  /**
   * Resize the grid
   * @param {module:echarts/coord/cartesian/GridModel} gridModel
   * @param {module:echarts/ExtensionAPI} api
   */


  gridProto.resize = function (gridModel, api, ignoreContainLabel) {
    var gridRect = getLayoutRect$1(gridModel.getBoxLayoutParams(), {
      width: api.getWidth(),
      height: api.getHeight()
    });
    this._rect = gridRect;
    var axesList = this._axesList;
    adjustAxes(); // Minus label size

    if (!ignoreContainLabel && gridModel.get('containLabel')) {
      each$k(axesList, function (axis) {
        if (!axis.model.get('axisLabel.inside')) {
          var labelUnionRect = estimateLabelUnionRect$1(axis);

          if (labelUnionRect) {
            var dim = axis.isHorizontal() ? 'height' : 'width';
            var margin = axis.model.get('axisLabel.margin');
            gridRect[dim] -= labelUnionRect[dim] + margin;

            if (axis.position === 'top') {
              gridRect.y += labelUnionRect.height + margin;
            } else if (axis.position === 'left') {
              gridRect.x += labelUnionRect.width + margin;
            }
          }
        }
      });
      adjustAxes();
    }

    function adjustAxes() {
      each$k(axesList, function (axis) {
        var isHorizontal = axis.isHorizontal();
        var extent = isHorizontal ? [0, gridRect.width] : [0, gridRect.height];
        var idx = axis.inverse ? 1 : 0;
        axis.setExtent(extent[idx], extent[1 - idx]);
        updateAxisTransform(axis, isHorizontal ? gridRect.x : gridRect.y);
      });
    }
  };
  /**
   * @param {string} axisType
   * @param {number} [axisIndex]
   */


  gridProto.getAxis = function (axisType, axisIndex) {
    var axesMapOnDim = this._axesMap[axisType];

    if (axesMapOnDim != null) {
      if (axisIndex == null) {
        // Find first axis
        for (var name in axesMapOnDim) {
          if (axesMapOnDim.hasOwnProperty(name)) {
            return axesMapOnDim[name];
          }
        }
      }

      return axesMapOnDim[axisIndex];
    }
  };
  /**
   * @return {Array.<module:echarts/coord/Axis>}
   */


  gridProto.getAxes = function () {
    return this._axesList.slice();
  };
  /**
   * Usage:
   *      grid.getCartesian(xAxisIndex, yAxisIndex);
   *      grid.getCartesian(xAxisIndex);
   *      grid.getCartesian(null, yAxisIndex);
   *      grid.getCartesian({xAxisIndex: ..., yAxisIndex: ...});
   *
   * @param {number|Object} [xAxisIndex]
   * @param {number} [yAxisIndex]
   */


  gridProto.getCartesian = function (xAxisIndex, yAxisIndex) {
    if (xAxisIndex != null && yAxisIndex != null) {
      var key = 'x' + xAxisIndex + 'y' + yAxisIndex;
      return this._coordsMap[key];
    }

    if (isObject$c(xAxisIndex)) {
      yAxisIndex = xAxisIndex.yAxisIndex;
      xAxisIndex = xAxisIndex.xAxisIndex;
    } // When only xAxisIndex or yAxisIndex given, find its first cartesian.


    for (var i = 0, coordList = this._coordsList; i < coordList.length; i++) {
      if (coordList[i].getAxis('x').index === xAxisIndex || coordList[i].getAxis('y').index === yAxisIndex) {
        return coordList[i];
      }
    }
  };

  gridProto.getCartesians = function () {
    return this._coordsList.slice();
  };
  /**
   * @implements
   * see {module:echarts/CoodinateSystem}
   */


  gridProto.convertToPixel = function (ecModel, finder, value) {
    var target = this._findConvertTarget(ecModel, finder);

    return target.cartesian ? target.cartesian.dataToPoint(value) : target.axis ? target.axis.toGlobalCoord(target.axis.dataToCoord(value)) : null;
  };
  /**
   * @implements
   * see {module:echarts/CoodinateSystem}
   */


  gridProto.convertFromPixel = function (ecModel, finder, value) {
    var target = this._findConvertTarget(ecModel, finder);

    return target.cartesian ? target.cartesian.pointToData(value) : target.axis ? target.axis.coordToData(target.axis.toLocalCoord(value)) : null;
  };
  /**
   * @inner
   */


  gridProto._findConvertTarget = function (ecModel, finder) {
    var seriesModel = finder.seriesModel;
    var xAxisModel = finder.xAxisModel || seriesModel && seriesModel.getReferringComponents('xAxis')[0];
    var yAxisModel = finder.yAxisModel || seriesModel && seriesModel.getReferringComponents('yAxis')[0];
    var gridModel = finder.gridModel;
    var coordsList = this._coordsList;
    var cartesian;
    var axis;

    if (seriesModel) {
      cartesian = seriesModel.coordinateSystem;
      indexOf$3(coordsList, cartesian) < 0 && (cartesian = null);
    } else if (xAxisModel && yAxisModel) {
      cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);
    } else if (xAxisModel) {
      axis = this.getAxis('x', xAxisModel.componentIndex);
    } else if (yAxisModel) {
      axis = this.getAxis('y', yAxisModel.componentIndex);
    } // Lowest priority.
    else if (gridModel) {
        var grid = gridModel.coordinateSystem;

        if (grid === this) {
          cartesian = this._coordsList[0];
        }
      }

    return {
      cartesian: cartesian,
      axis: axis
    };
  };
  /**
   * @implements
   * see {module:echarts/CoodinateSystem}
   */


  gridProto.containPoint = function (point) {
    var coord = this._coordsList[0];

    if (coord) {
      return coord.containPoint(point);
    }
  };
  /**
   * Initialize cartesian coordinate systems
   * @private
   */


  gridProto._initCartesian = function (gridModel, ecModel, api) {
    var axisPositionUsed = {
      left: false,
      right: false,
      top: false,
      bottom: false
    };
    var axesMap = {
      x: {},
      y: {}
    };
    var axesCount = {
      x: 0,
      y: 0
    }; /// Create axis

    ecModel.eachComponent('xAxis', createAxisCreator('x'), this);
    ecModel.eachComponent('yAxis', createAxisCreator('y'), this);

    if (!axesCount.x || !axesCount.y) {
      // Roll back when there no either x or y axis
      this._axesMap = {};
      this._axesList = [];
      return;
    }

    this._axesMap = axesMap; /// Create cartesian2d

    each$k(axesMap.x, function (xAxis, xAxisIndex) {
      each$k(axesMap.y, function (yAxis, yAxisIndex) {
        var key = 'x' + xAxisIndex + 'y' + yAxisIndex;
        var cartesian = new Cartesian2D_1(key);
        cartesian.grid = this;
        cartesian.model = gridModel;
        this._coordsMap[key] = cartesian;

        this._coordsList.push(cartesian);

        cartesian.addAxis(xAxis);
        cartesian.addAxis(yAxis);
      }, this);
    }, this);

    function createAxisCreator(axisType) {
      return function (axisModel, idx) {
        if (!isAxisUsedInTheGrid(axisModel, gridModel)) {
          return;
        }

        var axisPosition = axisModel.get('position');

        if (axisType === 'x') {
          // Fix position
          if (axisPosition !== 'top' && axisPosition !== 'bottom') {
            // Default bottom of X
            axisPosition = axisPositionUsed.bottom ? 'top' : 'bottom';
          }
        } else {
          // Fix position
          if (axisPosition !== 'left' && axisPosition !== 'right') {
            // Default left of Y
            axisPosition = axisPositionUsed.left ? 'right' : 'left';
          }
        }

        axisPositionUsed[axisPosition] = true;
        var axis = new Axis2D_1(axisType, createScaleByModel$1(axisModel), [0, 0], axisModel.get('type'), axisPosition);
        var isCategory = axis.type === 'category';
        axis.onBand = isCategory && axisModel.get('boundaryGap');
        axis.inverse = axisModel.get('inverse'); // Inject axis into axisModel

        axisModel.axis = axis; // Inject axisModel into axis

        axis.model = axisModel; // Inject grid info axis

        axis.grid = this; // Index of axis, can be used as key

        axis.index = idx;

        this._axesList.push(axis);

        axesMap[axisType][idx] = axis;
        axesCount[axisType]++;
      };
    }
  };
  /**
   * Update cartesian properties from series
   * @param  {module:echarts/model/Option} option
   * @private
   */


  gridProto._updateScale = function (ecModel, gridModel) {
    // Reset scale
    each$k(this._axesList, function (axis) {
      axis.scale.setExtent(Infinity, -Infinity);
    });
    ecModel.eachSeries(function (seriesModel) {
      if (isCartesian2D(seriesModel)) {
        var axesModels = findAxesModels(seriesModel);
        var xAxisModel = axesModels[0];
        var yAxisModel = axesModels[1];

        if (!isAxisUsedInTheGrid(xAxisModel, gridModel) || !isAxisUsedInTheGrid(yAxisModel, gridModel)) {
          return;
        }

        var cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);
        var data = seriesModel.getData();
        var xAxis = cartesian.getAxis('x');
        var yAxis = cartesian.getAxis('y');

        if (data.type === 'list') {
          unionExtent(data, xAxis);
          unionExtent(data, yAxis);
        }
      }
    }, this);

    function unionExtent(data, axis, seriesModel) {
      each$k(data.mapDimension(axis.dim, true), function (dim) {
        axis.scale.unionExtentFromData( // For example, the extent of the orginal dimension
        // is [0.1, 0.5], the extent of the `stackResultDimension`
        // is [7, 9], the final extent should not include [0.1, 0.5].
        data, getStackedDimension$2(data, dim));
      });
    }
  };
  /**
   * @param {string} [dim] 'x' or 'y' or 'auto' or null/undefined
   * @return {Object} {baseAxes: [], otherAxes: []}
   */


  gridProto.getTooltipAxes = function (dim) {
    var baseAxes = [];
    var otherAxes = [];
    each$k(this.getCartesians(), function (cartesian) {
      var baseAxis = dim != null && dim !== 'auto' ? cartesian.getAxis(dim) : cartesian.getBaseAxis();
      var otherAxis = cartesian.getOtherAxis(baseAxis);
      indexOf$3(baseAxes, baseAxis) < 0 && baseAxes.push(baseAxis);
      indexOf$3(otherAxes, otherAxis) < 0 && otherAxes.push(otherAxis);
    });
    return {
      baseAxes: baseAxes,
      otherAxes: otherAxes
    };
  };
  /**
   * @inner
   */


  function updateAxisTransform(axis, coordBase) {
    var axisExtent = axis.getExtent();
    var axisExtentSum = axisExtent[0] + axisExtent[1]; // Fast transform

    axis.toGlobalCoord = axis.dim === 'x' ? function (coord) {
      return coord + coordBase;
    } : function (coord) {
      return axisExtentSum - coord + coordBase;
    };
    axis.toLocalCoord = axis.dim === 'x' ? function (coord) {
      return coord - coordBase;
    } : function (coord) {
      return axisExtentSum - coord + coordBase;
    };
  }

  var axesTypes = ['xAxis', 'yAxis'];
  /**
   * @inner
   */

  function findAxesModels(seriesModel, ecModel) {
    return map$7(axesTypes, function (axisType) {
      var axisModel = seriesModel.getReferringComponents(axisType)[0];
      return axisModel;
    });
  }
  /**
   * @inner
   */


  function isCartesian2D(seriesModel) {
    return seriesModel.get('coordinateSystem') === 'cartesian2d';
  }

  Grid.create = function (ecModel, api) {
    var grids = [];
    ecModel.eachComponent('grid', function (gridModel, idx) {
      var grid = new Grid(gridModel, ecModel, api);
      grid.name = 'grid_' + idx; // dataSampling requires axis extent, so resize
      // should be performed in create stage.

      grid.resize(gridModel, api, true);
      gridModel.coordinateSystem = grid;
      grids.push(grid);
    }); // Inject the coordinateSystems into seriesModel

    ecModel.eachSeries(function (seriesModel) {
      if (!isCartesian2D(seriesModel)) {
        return;
      }

      var axesModels = findAxesModels(seriesModel);
      var xAxisModel = axesModels[0];
      var yAxisModel = axesModels[1];
      var gridModel = xAxisModel.getCoordSysModel();
      var grid = gridModel.coordinateSystem;
      seriesModel.coordinateSystem = grid.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);
    });
    return grids;
  }; // For deciding which dimensions to use when creating list data


  Grid.dimensions = Grid.prototype.dimensions = Cartesian2D_1.prototype.dimensions;
  CoordinateSystem.register('cartesian2d', Grid);

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */





  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var _default$1B = Series.extend({
    type: 'series.__base_bar__',
    getInitialData: function (option, ecModel) {
      return createListFromArray_1(this.getSource(), this, {
        useEncodeDefaulter: true
      });
    },
    getMarkerPosition: function (value) {
      var coordSys = this.coordinateSystem;

      if (coordSys) {
        // PENDING if clamp ?
        var pt = coordSys.dataToPoint(coordSys.clampData(value));
        var data = this.getData();
        var offset = data.getLayout('offset');
        var size = data.getLayout('size');
        var offsetIndex = coordSys.getBaseAxis().isHorizontal() ? 0 : 1;
        pt[offsetIndex] += offset + size / 2;
        return pt;
      }

      return [NaN, NaN];
    },
    defaultOption: {
      zlevel: 0,
      // 一级层叠
      z: 2,
      // 二级层叠
      coordinateSystem: 'cartesian2d',
      legendHoverLink: true,
      // stack: null
      // Cartesian coordinate system
      // xAxisIndex: 0,
      // yAxisIndex: 0,
      // 最小高度改为0
      barMinHeight: 0,
      // 最小角度为0，仅对极坐标系下的柱状图有效
      barMinAngle: 0,
      // cursor: null,
      large: false,
      largeThreshold: 400,
      progressive: 3e3,
      progressiveChunkMode: 'mod',
      // barMaxWidth: null,
      // In cartesian, the default value is 1. Otherwise null.
      // barMinWidth: null,
      // 默认自适应
      // barWidth: null,
      // 柱间距离，默认为柱形宽度的30%，可设固定值
      // barGap: '30%',
      // 类目间柱形距离，默认为类目间距的20%，可设固定值
      // barCategoryGap: '20%',
      // label: {
      //      show: false
      // },
      itemStyle: {},
      emphasis: {}
    }
  });

  var BaseBarSeries = _default$1B;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var _default$1C = BaseBarSeries.extend({
    type: 'series.bar',
    dependencies: ['grid', 'polar'],
    brushSelector: 'rect',

    /**
     * @override
     */
    getProgressive: function () {
      // Do not support progressive in normal mode.
      return this.get('large') ? this.get('progressive') : false;
    },

    /**
     * @override
     */
    getProgressiveThreshold: function () {
      // Do not support progressive in normal mode.
      var progressiveThreshold = this.get('progressiveThreshold');
      var largeThreshold = this.get('largeThreshold');

      if (largeThreshold > progressiveThreshold) {
        progressiveThreshold = largeThreshold;
      }

      return progressiveThreshold;
    },
    defaultOption: {
      // If clipped
      // Only available on cartesian2d
      clip: true,
      // If use caps on two sides of bars
      // Only available on tangential polar bar
      roundCap: false,
      showBackground: false,
      backgroundStyle: {
        color: 'rgba(180, 180, 180, 0.2)',
        borderColor: null,
        borderWidth: 0,
        borderType: 'solid',
        borderRadius: 0,
        shadowBlur: 0,
        shadowColor: null,
        shadowOffsetX: 0,
        shadowOffsetY: 0,
        opacity: 1
      }
    }
  });

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  var retrieveRawValue$4 = dataProvider.retrieveRawValue;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * @param {module:echarts/data/List} data
   * @param {number} dataIndex
   * @return {string} label string. Not null/undefined
   */
  function getDefaultLabel(data, dataIndex) {
    var labelDims = data.mapDimension('defaultedLabel', true);
    var len = labelDims.length; // Simple optimization (in lots of cases, label dims length is 1)

    if (len === 1) {
      return retrieveRawValue$4(data, dataIndex, labelDims[0]);
    } else if (len) {
      var vals = [];

      for (var i = 0; i < labelDims.length; i++) {
        var val = retrieveRawValue$4(data, dataIndex, labelDims[i]);
        vals.push(val);
      }

      return vals.join(' ');
    }
  }

  var getDefaultLabel_1 = getDefaultLabel;

  var labelHelper = {
  	getDefaultLabel: getDefaultLabel_1
  };

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */





  var getDefaultLabel$1 = labelHelper.getDefaultLabel;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  function setLabel(normalStyle, hoverStyle, itemModel, color, seriesModel, dataIndex, labelPositionOutside) {
    var labelModel = itemModel.getModel('label');
    var hoverLabelModel = itemModel.getModel('emphasis.label');
    graphic.setLabelStyle(normalStyle, hoverStyle, labelModel, hoverLabelModel, {
      labelFetcher: seriesModel,
      labelDataIndex: dataIndex,
      defaultText: getDefaultLabel$1(seriesModel.getData(), dataIndex),
      isRectText: true,
      autoColor: color
    });
    fixPosition(normalStyle);
    fixPosition(hoverStyle);
  }

  function fixPosition(style, labelPositionOutside) {
    if (style.textPosition === 'outside') {
      style.textPosition = labelPositionOutside;
    }
  }

  var setLabel_1 = setLabel;

  var helper$3 = {
  	setLabel: setLabel_1
  };

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var getBarItemStyle = makeStyleMapper([['fill', 'color'], ['stroke', 'borderColor'], ['lineWidth', 'borderWidth'], // Compatitable with 2
  ['stroke', 'barBorderColor'], ['lineWidth', 'barBorderWidth'], ['opacity'], ['shadowBlur'], ['shadowOffsetX'], ['shadowOffsetY'], ['shadowColor']]);
  var _default$1D = {
    getBarItemStyle: function (excludes) {
      var style = getBarItemStyle(this, excludes);

      if (this.getBorderLineDash) {
        var lineDash = this.getBorderLineDash();
        lineDash && (style.lineDash = lineDash);
      }

      return style;
    }
  };
  var barItemStyle = _default$1D;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */





  var round$3 = number.round;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  function createGridClipPath(cartesian, hasAnimation, seriesModel) {
    var rect = cartesian.getArea();
    var isHorizontal = cartesian.getBaseAxis().isHorizontal();
    var x = rect.x;
    var y = rect.y;
    var width = rect.width;
    var height = rect.height;
    var lineWidth = seriesModel.get('lineStyle.width') || 2; // Expand the clip path a bit to avoid the border is clipped and looks thinner

    x -= lineWidth / 2;
    y -= lineWidth / 2;
    width += lineWidth;
    height += lineWidth;
    var clipPath = new graphic.Rect({
      shape: {
        x: x,
        y: y,
        width: width,
        height: height
      }
    });

    if (hasAnimation) {
      clipPath.shape[isHorizontal ? 'width' : 'height'] = 0;
      graphic.initProps(clipPath, {
        shape: {
          width: width,
          height: height
        }
      }, seriesModel);
    }

    return clipPath;
  }

  function createPolarClipPath(polar, hasAnimation, seriesModel) {
    var sectorArea = polar.getArea(); // Avoid float number rounding error for symbol on the edge of axis extent.

    var clipPath = new graphic.Sector({
      shape: {
        cx: round$3(polar.cx, 1),
        cy: round$3(polar.cy, 1),
        r0: round$3(sectorArea.r0, 1),
        r: round$3(sectorArea.r, 1),
        startAngle: sectorArea.startAngle,
        endAngle: sectorArea.endAngle,
        clockwise: sectorArea.clockwise
      }
    });

    if (hasAnimation) {
      clipPath.shape.endAngle = sectorArea.startAngle;
      graphic.initProps(clipPath, {
        shape: {
          endAngle: sectorArea.endAngle
        }
      }, seriesModel);
    }

    return clipPath;
  }

  function createClipPath(coordSys, hasAnimation, seriesModel) {
    if (!coordSys) {
      return null;
    } else if (coordSys.type === 'polar') {
      return createPolarClipPath(coordSys, hasAnimation, seriesModel);
    } else if (coordSys.type === 'cartesian2d') {
      return createGridClipPath(coordSys, hasAnimation, seriesModel);
    }

    return null;
  }

  var createGridClipPath_1 = createGridClipPath;
  var createPolarClipPath_1 = createPolarClipPath;
  var createClipPath_1 = createClipPath;

  var createClipPathFromCoordSys = {
  	createGridClipPath: createGridClipPath_1,
  	createPolarClipPath: createPolarClipPath_1,
  	createClipPath: createClipPath_1
  };

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  var extendShape$1 = graphic.extendShape;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * Sausage: similar to sector, but have half circle on both sides
   * @public
   */
  var _default$1E = extendShape$1({
    type: 'sausage',
    shape: {
      cx: 0,
      cy: 0,
      r0: 0,
      r: 0,
      startAngle: 0,
      endAngle: Math.PI * 2,
      clockwise: true
    },
    buildPath: function (ctx, shape) {
      var x = shape.cx;
      var y = shape.cy;
      var r0 = Math.max(shape.r0 || 0, 0);
      var r = Math.max(shape.r, 0);
      var dr = (r - r0) * 0.5;
      var rCenter = r0 + dr;
      var startAngle = shape.startAngle;
      var endAngle = shape.endAngle;
      var clockwise = shape.clockwise;
      var unitStartX = Math.cos(startAngle);
      var unitStartY = Math.sin(startAngle);
      var unitEndX = Math.cos(endAngle);
      var unitEndY = Math.sin(endAngle);
      var lessThanCircle = clockwise ? endAngle - startAngle < Math.PI * 2 : startAngle - endAngle < Math.PI * 2;

      if (lessThanCircle) {
        ctx.moveTo(unitStartX * r0 + x, unitStartY * r0 + y);
        ctx.arc(unitStartX * rCenter + x, unitStartY * rCenter + y, dr, -Math.PI + startAngle, startAngle, !clockwise);
      }

      ctx.arc(x, y, r, startAngle, endAngle, !clockwise);
      ctx.moveTo(unitEndX * r + x, unitEndY * r + y);
      ctx.arc(unitEndX * rCenter + x, unitEndY * rCenter + y, dr, endAngle - Math.PI * 2, endAngle - Math.PI, !clockwise);

      if (r0 !== 0) {
        ctx.arc(x, y, r0, endAngle, startAngle, clockwise);
        ctx.moveTo(unitStartX * r0 + x, unitEndY * r0 + y);
      }

      ctx.closePath();
    }
  });

  var sausage = _default$1E;

  var setLabel$1 = helper$3.setLabel;











  var throttle$1 = throttle_1.throttle;



  var createClipPath$1 = createClipPathFromCoordSys.createClipPath;



  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var BAR_BORDER_WIDTH_QUERY = ['itemStyle', 'barBorderWidth'];
  var _eventPos = [0, 0]; // FIXME
  // Just for compatible with ec2.

  util.extend(Model_1.prototype, barItemStyle);

  function getClipArea(coord, data) {
    var coordSysClipArea = coord.getArea && coord.getArea();

    if (coord.type === 'cartesian2d') {
      var baseAxis = coord.getBaseAxis(); // When boundaryGap is false or using time axis. bar may exceed the grid.
      // We should not clip this part.
      // See test/bar2.html

      if (baseAxis.type !== 'category' || !baseAxis.onBand) {
        var expandWidth = data.getLayout('bandWidth');

        if (baseAxis.isHorizontal()) {
          coordSysClipArea.x -= expandWidth;
          coordSysClipArea.width += expandWidth * 2;
        } else {
          coordSysClipArea.y -= expandWidth;
          coordSysClipArea.height += expandWidth * 2;
        }
      }
    }

    return coordSysClipArea;
  }

  var _default$1F = echarts.extendChartView({
    type: 'bar',
    render: function (seriesModel, ecModel, api) {
      this._updateDrawMode(seriesModel);

      var coordinateSystemType = seriesModel.get('coordinateSystem');

      if (coordinateSystemType === 'cartesian2d' || coordinateSystemType === 'polar') {
        this._isLargeDraw ? this._renderLarge(seriesModel, ecModel, api) : this._renderNormal(seriesModel, ecModel, api);
      }

      return this.group;
    },
    incrementalPrepareRender: function (seriesModel, ecModel, api) {
      this._clear();

      this._updateDrawMode(seriesModel);
    },
    incrementalRender: function (params, seriesModel, ecModel, api) {
      // Do not support progressive in normal mode.
      this._incrementalRenderLarge(params, seriesModel);
    },
    _updateDrawMode: function (seriesModel) {
      var isLargeDraw = seriesModel.pipelineContext.large;

      if (this._isLargeDraw == null || isLargeDraw ^ this._isLargeDraw) {
        this._isLargeDraw = isLargeDraw;

        this._clear();
      }
    },
    _renderNormal: function (seriesModel, ecModel, api) {
      var group = this.group;
      var data = seriesModel.getData();
      var oldData = this._data;
      var coord = seriesModel.coordinateSystem;
      var baseAxis = coord.getBaseAxis();
      var isHorizontalOrRadial;

      if (coord.type === 'cartesian2d') {
        isHorizontalOrRadial = baseAxis.isHorizontal();
      } else if (coord.type === 'polar') {
        isHorizontalOrRadial = baseAxis.dim === 'angle';
      }

      var animationModel = seriesModel.isAnimationEnabled() ? seriesModel : null;
      var needsClip = seriesModel.get('clip', true);
      var coordSysClipArea = getClipArea(coord, data); // If there is clipPath created in large mode. Remove it.

      group.removeClipPath(); // We don't use clipPath in normal mode because we needs a perfect animation
      // And don't want the label are clipped.

      var roundCap = seriesModel.get('roundCap', true);
      var drawBackground = seriesModel.get('showBackground', true);
      var backgroundModel = seriesModel.getModel('backgroundStyle');
      var bgEls = [];
      var oldBgEls = this._backgroundEls || [];
      data.diff(oldData).add(function (dataIndex) {
        var itemModel = data.getItemModel(dataIndex);
        var layout = getLayout[coord.type](data, dataIndex, itemModel);

        if (drawBackground) {
          var bgEl = createBackgroundEl(coord, isHorizontalOrRadial, layout);
          bgEl.useStyle(backgroundModel.getBarItemStyle());
          bgEls[dataIndex] = bgEl;
        } // If dataZoom in filteMode: 'empty', the baseValue can be set as NaN in "axisProxy".


        if (!data.hasValue(dataIndex)) {
          return;
        }

        if (needsClip) {
          // Clip will modify the layout params.
          // And return a boolean to determine if the shape are fully clipped.
          var isClipped = clip[coord.type](coordSysClipArea, layout);

          if (isClipped) {
            group.remove(el);
            return;
          }
        }

        var el = elementCreator[coord.type](dataIndex, layout, isHorizontalOrRadial, animationModel, false, roundCap);
        data.setItemGraphicEl(dataIndex, el);
        group.add(el);
        updateStyle(el, data, dataIndex, itemModel, layout, seriesModel, isHorizontalOrRadial, coord.type === 'polar');
      }).update(function (newIndex, oldIndex) {
        var itemModel = data.getItemModel(newIndex);
        var layout = getLayout[coord.type](data, newIndex, itemModel);

        if (drawBackground) {
          var bgEl = oldBgEls[oldIndex];
          bgEl.useStyle(backgroundModel.getBarItemStyle());
          bgEls[newIndex] = bgEl;
          var shape = createBackgroundShape(isHorizontalOrRadial, layout, coord);
          graphic.updateProps(bgEl, {
            shape: shape
          }, animationModel, newIndex);
        }

        var el = oldData.getItemGraphicEl(oldIndex);

        if (!data.hasValue(newIndex)) {
          group.remove(el);
          return;
        }

        if (needsClip) {
          var isClipped = clip[coord.type](coordSysClipArea, layout);

          if (isClipped) {
            group.remove(el);
            return;
          }
        }

        if (el) {
          graphic.updateProps(el, {
            shape: layout
          }, animationModel, newIndex);
        } else {
          el = elementCreator[coord.type](newIndex, layout, isHorizontalOrRadial, animationModel, true, roundCap);
        }

        data.setItemGraphicEl(newIndex, el); // Add back

        group.add(el);
        updateStyle(el, data, newIndex, itemModel, layout, seriesModel, isHorizontalOrRadial, coord.type === 'polar');
      }).remove(function (dataIndex) {
        var el = oldData.getItemGraphicEl(dataIndex);

        if (coord.type === 'cartesian2d') {
          el && removeRect(dataIndex, animationModel, el);
        } else {
          el && removeSector(dataIndex, animationModel, el);
        }
      }).execute();
      var bgGroup = this._backgroundGroup || (this._backgroundGroup = new Group_1());
      bgGroup.removeAll();

      for (var i = 0; i < bgEls.length; ++i) {
        bgGroup.add(bgEls[i]);
      }

      group.add(bgGroup);
      this._backgroundEls = bgEls;
      this._data = data;
    },
    _renderLarge: function (seriesModel, ecModel, api) {
      this._clear();

      createLarge(seriesModel, this.group); // Use clipPath in large mode.

      var clipPath = seriesModel.get('clip', true) ? createClipPath$1(seriesModel.coordinateSystem, false, seriesModel) : null;

      if (clipPath) {
        this.group.setClipPath(clipPath);
      } else {
        this.group.removeClipPath();
      }
    },
    _incrementalRenderLarge: function (params, seriesModel) {
      this._removeBackground();

      createLarge(seriesModel, this.group, true);
    },
    dispose: util.noop,
    remove: function (ecModel) {
      this._clear(ecModel);
    },
    _clear: function (ecModel) {
      var group = this.group;
      var data = this._data;

      if (ecModel && ecModel.get('animation') && data && !this._isLargeDraw) {
        this._removeBackground();

        this._backgroundEls = [];
        data.eachItemGraphicEl(function (el) {
          if (el.type === 'sector') {
            removeSector(el.dataIndex, ecModel, el);
          } else {
            removeRect(el.dataIndex, ecModel, el);
          }
        });
      } else {
        group.removeAll();
      }

      this._data = null;
    },
    _removeBackground: function () {
      this.group.remove(this._backgroundGroup);
      this._backgroundGroup = null;
    }
  });

  var mathMax$4 = Math.max;
  var mathMin$4 = Math.min;
  var clip = {
    cartesian2d: function (coordSysBoundingRect, layout) {
      var signWidth = layout.width < 0 ? -1 : 1;
      var signHeight = layout.height < 0 ? -1 : 1; // Needs positive width and height

      if (signWidth < 0) {
        layout.x += layout.width;
        layout.width = -layout.width;
      }

      if (signHeight < 0) {
        layout.y += layout.height;
        layout.height = -layout.height;
      }

      var x = mathMax$4(layout.x, coordSysBoundingRect.x);
      var x2 = mathMin$4(layout.x + layout.width, coordSysBoundingRect.x + coordSysBoundingRect.width);
      var y = mathMax$4(layout.y, coordSysBoundingRect.y);
      var y2 = mathMin$4(layout.y + layout.height, coordSysBoundingRect.y + coordSysBoundingRect.height);
      layout.x = x;
      layout.y = y;
      layout.width = x2 - x;
      layout.height = y2 - y;
      var clipped = layout.width < 0 || layout.height < 0; // Reverse back

      if (signWidth < 0) {
        layout.x += layout.width;
        layout.width = -layout.width;
      }

      if (signHeight < 0) {
        layout.y += layout.height;
        layout.height = -layout.height;
      }

      return clipped;
    },
    polar: function (coordSysClipArea) {
      return false;
    }
  };
  var elementCreator = {
    cartesian2d: function (dataIndex, layout, isHorizontal, animationModel, isUpdate) {
      var rect = new graphic.Rect({
        shape: util.extend({}, layout),
        z2: 1
      });
      rect.name = 'item'; // Animation

      if (animationModel) {
        var rectShape = rect.shape;
        var animateProperty = isHorizontal ? 'height' : 'width';
        var animateTarget = {};
        rectShape[animateProperty] = 0;
        animateTarget[animateProperty] = layout[animateProperty];
        graphic[isUpdate ? 'updateProps' : 'initProps'](rect, {
          shape: animateTarget
        }, animationModel, dataIndex);
      }

      return rect;
    },
    polar: function (dataIndex, layout, isRadial, animationModel, isUpdate, roundCap) {
      // Keep the same logic with bar in catesion: use end value to control
      // direction. Notice that if clockwise is true (by default), the sector
      // will always draw clockwisely, no matter whether endAngle is greater
      // or less than startAngle.
      var clockwise = layout.startAngle < layout.endAngle;
      var ShapeClass = !isRadial && roundCap ? sausage : graphic.Sector;
      var sector = new ShapeClass({
        shape: util.defaults({
          clockwise: clockwise
        }, layout),
        z2: 1
      });
      sector.name = 'item'; // Animation

      if (animationModel) {
        var sectorShape = sector.shape;
        var animateProperty = isRadial ? 'r' : 'endAngle';
        var animateTarget = {};
        sectorShape[animateProperty] = isRadial ? 0 : layout.startAngle;
        animateTarget[animateProperty] = layout[animateProperty];
        graphic[isUpdate ? 'updateProps' : 'initProps'](sector, {
          shape: animateTarget
        }, animationModel, dataIndex);
      }

      return sector;
    }
  };

  function removeRect(dataIndex, animationModel, el) {
    // Not show text when animating
    el.style.text = null;
    graphic.updateProps(el, {
      shape: {
        width: 0
      }
    }, animationModel, dataIndex, function () {
      el.parent && el.parent.remove(el);
    });
  }

  function removeSector(dataIndex, animationModel, el) {
    // Not show text when animating
    el.style.text = null;
    graphic.updateProps(el, {
      shape: {
        r: el.shape.r0
      }
    }, animationModel, dataIndex, function () {
      el.parent && el.parent.remove(el);
    });
  }

  var getLayout = {
    cartesian2d: function (data, dataIndex, itemModel) {
      var layout = data.getItemLayout(dataIndex);
      var fixedLineWidth = getLineWidth(itemModel, layout); // fix layout with lineWidth

      var signX = layout.width > 0 ? 1 : -1;
      var signY = layout.height > 0 ? 1 : -1;
      return {
        x: layout.x + signX * fixedLineWidth / 2,
        y: layout.y + signY * fixedLineWidth / 2,
        width: layout.width - signX * fixedLineWidth,
        height: layout.height - signY * fixedLineWidth
      };
    },
    polar: function (data, dataIndex, itemModel) {
      var layout = data.getItemLayout(dataIndex);
      return {
        cx: layout.cx,
        cy: layout.cy,
        r0: layout.r0,
        r: layout.r,
        startAngle: layout.startAngle,
        endAngle: layout.endAngle
      };
    }
  };

  function isZeroOnPolar(layout) {
    return layout.startAngle != null && layout.endAngle != null && layout.startAngle === layout.endAngle;
  }

  function updateStyle(el, data, dataIndex, itemModel, layout, seriesModel, isHorizontal, isPolar) {
    var color = data.getItemVisual(dataIndex, 'color');
    var opacity = data.getItemVisual(dataIndex, 'opacity');
    var stroke = data.getVisual('borderColor');
    var itemStyleModel = itemModel.getModel('itemStyle');
    var hoverStyle = itemModel.getModel('emphasis.itemStyle').getBarItemStyle();

    if (!isPolar) {
      el.setShape('r', itemStyleModel.get('barBorderRadius') || 0);
    }

    el.useStyle(util.defaults({
      stroke: isZeroOnPolar(layout) ? 'none' : stroke,
      fill: isZeroOnPolar(layout) ? 'none' : color,
      opacity: opacity
    }, itemStyleModel.getBarItemStyle()));
    var cursorStyle = itemModel.getShallow('cursor');
    cursorStyle && el.attr('cursor', cursorStyle);
    var labelPositionOutside = isHorizontal ? layout.height > 0 ? 'bottom' : 'top' : layout.width > 0 ? 'left' : 'right';

    if (!isPolar) {
      setLabel$1(el.style, hoverStyle, itemModel, color, seriesModel, dataIndex, labelPositionOutside);
    }

    if (isZeroOnPolar(layout)) {
      hoverStyle.fill = hoverStyle.stroke = 'none';
    }

    graphic.setHoverStyle(el, hoverStyle);
  } // In case width or height are too small.


  function getLineWidth(itemModel, rawLayout) {
    var lineWidth = itemModel.get(BAR_BORDER_WIDTH_QUERY) || 0; // width or height may be NaN for empty data

    var width = isNaN(rawLayout.width) ? Number.MAX_VALUE : Math.abs(rawLayout.width);
    var height = isNaN(rawLayout.height) ? Number.MAX_VALUE : Math.abs(rawLayout.height);
    return Math.min(lineWidth, width, height);
  }

  var LargePath = Path_1.extend({
    type: 'largeBar',
    shape: {
      points: []
    },
    buildPath: function (ctx, shape) {
      // Drawing lines is more efficient than drawing
      // a whole line or drawing rects.
      var points = shape.points;
      var startPoint = this.__startPoint;
      var baseDimIdx = this.__baseDimIdx;

      for (var i = 0; i < points.length; i += 2) {
        startPoint[baseDimIdx] = points[i + baseDimIdx];
        ctx.moveTo(startPoint[0], startPoint[1]);
        ctx.lineTo(points[i], points[i + 1]);
      }
    }
  });

  function createLarge(seriesModel, group, incremental) {
    // TODO support polar
    var data = seriesModel.getData();
    var startPoint = [];
    var baseDimIdx = data.getLayout('valueAxisHorizontal') ? 1 : 0;
    startPoint[1 - baseDimIdx] = data.getLayout('valueAxisStart');
    var largeDataIndices = data.getLayout('largeDataIndices');
    var barWidth = data.getLayout('barWidth');
    var backgroundModel = seriesModel.getModel('backgroundStyle');
    var drawBackground = seriesModel.get('showBackground', true);

    if (drawBackground) {
      var points = data.getLayout('largeBackgroundPoints');
      var backgroundStartPoint = [];
      backgroundStartPoint[1 - baseDimIdx] = data.getLayout('backgroundStart');
      var bgEl = new LargePath({
        shape: {
          points: points
        },
        incremental: !!incremental,
        __startPoint: backgroundStartPoint,
        __baseDimIdx: baseDimIdx,
        __largeDataIndices: largeDataIndices,
        __barWidth: barWidth,
        silent: true,
        z2: 0
      });
      setLargeBackgroundStyle(bgEl, backgroundModel, data);
      group.add(bgEl);
    }

    var el = new LargePath({
      shape: {
        points: data.getLayout('largePoints')
      },
      incremental: !!incremental,
      __startPoint: startPoint,
      __baseDimIdx: baseDimIdx,
      __largeDataIndices: largeDataIndices,
      __barWidth: barWidth
    });
    group.add(el);
    setLargeStyle(el, seriesModel, data); // Enable tooltip and user mouse/touch event handlers.

    el.seriesIndex = seriesModel.seriesIndex;

    if (!seriesModel.get('silent')) {
      el.on('mousedown', largePathUpdateDataIndex);
      el.on('mousemove', largePathUpdateDataIndex);
    }
  } // Use throttle to avoid frequently traverse to find dataIndex.


  var largePathUpdateDataIndex = throttle$1(function (event) {
    var largePath = this;
    var dataIndex = largePathFindDataIndex(largePath, event.offsetX, event.offsetY);
    largePath.dataIndex = dataIndex >= 0 ? dataIndex : null;
  }, 30, false);

  function largePathFindDataIndex(largePath, x, y) {
    var baseDimIdx = largePath.__baseDimIdx;
    var valueDimIdx = 1 - baseDimIdx;
    var points = largePath.shape.points;
    var largeDataIndices = largePath.__largeDataIndices;
    var barWidthHalf = Math.abs(largePath.__barWidth / 2);
    var startValueVal = largePath.__startPoint[valueDimIdx];
    _eventPos[0] = x;
    _eventPos[1] = y;
    var pointerBaseVal = _eventPos[baseDimIdx];
    var pointerValueVal = _eventPos[1 - baseDimIdx];
    var baseLowerBound = pointerBaseVal - barWidthHalf;
    var baseUpperBound = pointerBaseVal + barWidthHalf;

    for (var i = 0, len = points.length / 2; i < len; i++) {
      var ii = i * 2;
      var barBaseVal = points[ii + baseDimIdx];
      var barValueVal = points[ii + valueDimIdx];

      if (barBaseVal >= baseLowerBound && barBaseVal <= baseUpperBound && (startValueVal <= barValueVal ? pointerValueVal >= startValueVal && pointerValueVal <= barValueVal : pointerValueVal >= barValueVal && pointerValueVal <= startValueVal)) {
        return largeDataIndices[i];
      }
    }

    return -1;
  }

  function setLargeStyle(el, seriesModel, data) {
    var borderColor = data.getVisual('borderColor') || data.getVisual('color');
    var itemStyle = seriesModel.getModel('itemStyle').getItemStyle(['color', 'borderColor']);
    el.useStyle(itemStyle);
    el.style.fill = null;
    el.style.stroke = borderColor;
    el.style.lineWidth = data.getLayout('barWidth');
  }

  function setLargeBackgroundStyle(el, backgroundModel, data) {
    var borderColor = backgroundModel.get('borderColor') || backgroundModel.get('color');
    var itemStyle = backgroundModel.getItemStyle(['color', 'borderColor']);
    el.useStyle(itemStyle);
    el.style.fill = null;
    el.style.stroke = borderColor;
    el.style.lineWidth = data.getLayout('barWidth');
  }

  function createBackgroundShape(isHorizontalOrRadial, layout, coord) {
    var coordLayout;
    var isPolar = coord.type === 'polar';

    if (isPolar) {
      coordLayout = coord.getArea();
    } else {
      coordLayout = coord.grid.getRect();
    }

    if (isPolar) {
      return {
        cx: coordLayout.cx,
        cy: coordLayout.cy,
        r0: isHorizontalOrRadial ? coordLayout.r0 : layout.r0,
        r: isHorizontalOrRadial ? coordLayout.r : layout.r,
        startAngle: isHorizontalOrRadial ? layout.startAngle : 0,
        endAngle: isHorizontalOrRadial ? layout.endAngle : Math.PI * 2
      };
    } else {
      return {
        x: isHorizontalOrRadial ? layout.x : coordLayout.x,
        y: isHorizontalOrRadial ? coordLayout.y : layout.y,
        width: isHorizontalOrRadial ? layout.width : coordLayout.width,
        height: isHorizontalOrRadial ? coordLayout.height : layout.height
      };
    }
  }

  function createBackgroundEl(coord, isHorizontalOrRadial, layout) {
    var ElementClz = coord.type === 'polar' ? graphic.Sector : graphic.Rect;
    return new ElementClz({
      shape: createBackgroundShape(isHorizontalOrRadial, layout, coord),
      silent: true,
      z2: 0
    });
  }

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  var retrieve$1 = util.retrieve;
  var defaults$3 = util.defaults;
  var extend$7 = util.extend;
  var each$l = util.each;









  var isRadianAroundZero$1 = number.isRadianAroundZero;
  var remRadian$1 = number.remRadian;



  var createSymbol$2 = symbol.createSymbol;





  var v2ApplyTransform$2 = vector.applyTransform;



  var shouldShowAllLabels$2 = axisHelper.shouldShowAllLabels;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var PI$2 = Math.PI;
  /**
   * A final axis is translated and rotated from a "standard axis".
   * So opt.position and opt.rotation is required.
   *
   * A standard axis is and axis from [0, 0] to [0, axisExtent[1]],
   * for example: (0, 0) ------------> (0, 50)
   *
   * nameDirection or tickDirection or labelDirection is 1 means tick
   * or label is below the standard axis, whereas is -1 means above
   * the standard axis. labelOffset means offset between label and axis,
   * which is useful when 'onZero', where axisLabel is in the grid and
   * label in outside grid.
   *
   * Tips: like always,
   * positive rotation represents anticlockwise, and negative rotation
   * represents clockwise.
   * The direction of position coordinate is the same as the direction
   * of screen coordinate.
   *
   * Do not need to consider axis 'inverse', which is auto processed by
   * axis extent.
   *
   * @param {module:zrender/container/Group} group
   * @param {Object} axisModel
   * @param {Object} opt Standard axis parameters.
   * @param {Array.<number>} opt.position [x, y]
   * @param {number} opt.rotation by radian
   * @param {number} [opt.nameDirection=1] 1 or -1 Used when nameLocation is 'middle' or 'center'.
   * @param {number} [opt.tickDirection=1] 1 or -1
   * @param {number} [opt.labelDirection=1] 1 or -1
   * @param {number} [opt.labelOffset=0] Usefull when onZero.
   * @param {string} [opt.axisLabelShow] default get from axisModel.
   * @param {string} [opt.axisName] default get from axisModel.
   * @param {number} [opt.axisNameAvailableWidth]
   * @param {number} [opt.labelRotate] by degree, default get from axisModel.
   * @param {number} [opt.strokeContainThreshold] Default label interval when label
   * @param {number} [opt.nameTruncateMaxWidth]
   */

  var AxisBuilder = function (axisModel, opt) {
    /**
     * @readOnly
     */
    this.opt = opt;
    /**
     * @readOnly
     */

    this.axisModel = axisModel; // Default value

    defaults$3(opt, {
      labelOffset: 0,
      nameDirection: 1,
      tickDirection: 1,
      labelDirection: 1,
      silent: true
    });
    /**
     * @readOnly
     */

    this.group = new graphic.Group(); // FIXME Not use a seperate text group?

    var dumbGroup = new graphic.Group({
      position: opt.position.slice(),
      rotation: opt.rotation
    }); // this.group.add(dumbGroup);
    // this._dumbGroup = dumbGroup;

    dumbGroup.updateTransform();
    this._transform = dumbGroup.transform;
    this._dumbGroup = dumbGroup;
  };

  AxisBuilder.prototype = {
    constructor: AxisBuilder,
    hasBuilder: function (name) {
      return !!builders[name];
    },
    add: function (name) {
      builders[name].call(this);
    },
    getGroup: function () {
      return this.group;
    }
  };
  var builders = {
    /**
     * @private
     */
    axisLine: function () {
      var opt = this.opt;
      var axisModel = this.axisModel;

      if (!axisModel.get('axisLine.show')) {
        return;
      }

      var extent = this.axisModel.axis.getExtent();
      var matrix = this._transform;
      var pt1 = [extent[0], 0];
      var pt2 = [extent[1], 0];

      if (matrix) {
        v2ApplyTransform$2(pt1, pt1, matrix);
        v2ApplyTransform$2(pt2, pt2, matrix);
      }

      var lineStyle = extend$7({
        lineCap: 'round'
      }, axisModel.getModel('axisLine.lineStyle').getLineStyle());
      this.group.add(new graphic.Line({
        // Id for animation
        anid: 'line',
        subPixelOptimize: true,
        shape: {
          x1: pt1[0],
          y1: pt1[1],
          x2: pt2[0],
          y2: pt2[1]
        },
        style: lineStyle,
        strokeContainThreshold: opt.strokeContainThreshold || 5,
        silent: true,
        z2: 1
      }));
      var arrows = axisModel.get('axisLine.symbol');
      var arrowSize = axisModel.get('axisLine.symbolSize');
      var arrowOffset = axisModel.get('axisLine.symbolOffset') || 0;

      if (typeof arrowOffset === 'number') {
        arrowOffset = [arrowOffset, arrowOffset];
      }

      if (arrows != null) {
        if (typeof arrows === 'string') {
          // Use the same arrow for start and end point
          arrows = [arrows, arrows];
        }

        if (typeof arrowSize === 'string' || typeof arrowSize === 'number') {
          // Use the same size for width and height
          arrowSize = [arrowSize, arrowSize];
        }

        var symbolWidth = arrowSize[0];
        var symbolHeight = arrowSize[1];
        each$l([{
          rotate: opt.rotation + Math.PI / 2,
          offset: arrowOffset[0],
          r: 0
        }, {
          rotate: opt.rotation - Math.PI / 2,
          offset: arrowOffset[1],
          r: Math.sqrt((pt1[0] - pt2[0]) * (pt1[0] - pt2[0]) + (pt1[1] - pt2[1]) * (pt1[1] - pt2[1]))
        }], function (point, index) {
          if (arrows[index] !== 'none' && arrows[index] != null) {
            var symbol = createSymbol$2(arrows[index], -symbolWidth / 2, -symbolHeight / 2, symbolWidth, symbolHeight, lineStyle.stroke, true); // Calculate arrow position with offset

            var r = point.r + point.offset;
            var pos = [pt1[0] + r * Math.cos(opt.rotation), pt1[1] - r * Math.sin(opt.rotation)];
            symbol.attr({
              rotation: point.rotate,
              position: pos,
              silent: true,
              z2: 11
            });
            this.group.add(symbol);
          }
        }, this);
      }
    },

    /**
     * @private
     */
    axisTickLabel: function () {
      var axisModel = this.axisModel;
      var opt = this.opt;
      var ticksEls = buildAxisMajorTicks(this, axisModel, opt);
      var labelEls = buildAxisLabel(this, axisModel, opt);
      fixMinMaxLabelShow(axisModel, labelEls, ticksEls);
      buildAxisMinorTicks(this, axisModel, opt);
    },

    /**
     * @private
     */
    axisName: function () {
      var opt = this.opt;
      var axisModel = this.axisModel;
      var name = retrieve$1(opt.axisName, axisModel.get('name'));

      if (!name) {
        return;
      }

      var nameLocation = axisModel.get('nameLocation');
      var nameDirection = opt.nameDirection;
      var textStyleModel = axisModel.getModel('nameTextStyle');
      var gap = axisModel.get('nameGap') || 0;
      var extent = this.axisModel.axis.getExtent();
      var gapSignal = extent[0] > extent[1] ? -1 : 1;
      var pos = [nameLocation === 'start' ? extent[0] - gapSignal * gap : nameLocation === 'end' ? extent[1] + gapSignal * gap : (extent[0] + extent[1]) / 2, // 'middle'
      // Reuse labelOffset.
      isNameLocationCenter(nameLocation) ? opt.labelOffset + nameDirection * gap : 0];
      var labelLayout;
      var nameRotation = axisModel.get('nameRotate');

      if (nameRotation != null) {
        nameRotation = nameRotation * PI$2 / 180; // To radian.
      }

      var axisNameAvailableWidth;

      if (isNameLocationCenter(nameLocation)) {
        labelLayout = innerTextLayout(opt.rotation, nameRotation != null ? nameRotation : opt.rotation, // Adapt to axis.
        nameDirection);
      } else {
        labelLayout = endTextLayout(opt, nameLocation, nameRotation || 0, extent);
        axisNameAvailableWidth = opt.axisNameAvailableWidth;

        if (axisNameAvailableWidth != null) {
          axisNameAvailableWidth = Math.abs(axisNameAvailableWidth / Math.sin(labelLayout.rotation));
          !isFinite(axisNameAvailableWidth) && (axisNameAvailableWidth = null);
        }
      }

      var textFont = textStyleModel.getFont();
      var truncateOpt = axisModel.get('nameTruncate', true) || {};
      var ellipsis = truncateOpt.ellipsis;
      var maxWidth = retrieve$1(opt.nameTruncateMaxWidth, truncateOpt.maxWidth, axisNameAvailableWidth); // FIXME
      // truncate rich text? (consider performance)

      var truncatedText = ellipsis != null && maxWidth != null ? format.truncateText(name, maxWidth, textFont, ellipsis, {
        minChar: 2,
        placeholder: truncateOpt.placeholder
      }) : name;
      var tooltipOpt = axisModel.get('tooltip', true);
      var mainType = axisModel.mainType;
      var formatterParams = {
        componentType: mainType,
        name: name,
        $vars: ['name']
      };
      formatterParams[mainType + 'Index'] = axisModel.componentIndex;
      var textEl = new graphic.Text({
        // Id for animation
        anid: 'name',
        __fullText: name,
        __truncatedText: truncatedText,
        position: pos,
        rotation: labelLayout.rotation,
        silent: isLabelSilent(axisModel),
        z2: 1,
        tooltip: tooltipOpt && tooltipOpt.show ? extend$7({
          content: name,
          formatter: function () {
            return name;
          },
          formatterParams: formatterParams
        }, tooltipOpt) : null
      });
      graphic.setTextStyle(textEl.style, textStyleModel, {
        text: truncatedText,
        textFont: textFont,
        textFill: textStyleModel.getTextColor() || axisModel.get('axisLine.lineStyle.color'),
        textAlign: textStyleModel.get('align') || labelLayout.textAlign,
        textVerticalAlign: textStyleModel.get('verticalAlign') || labelLayout.textVerticalAlign
      });

      if (axisModel.get('triggerEvent')) {
        textEl.eventData = makeAxisEventDataBase(axisModel);
        textEl.eventData.targetType = 'axisName';
        textEl.eventData.name = name;
      } // FIXME


      this._dumbGroup.add(textEl);

      textEl.updateTransform();
      this.group.add(textEl);
      textEl.decomposeTransform();
    }
  };

  var makeAxisEventDataBase = AxisBuilder.makeAxisEventDataBase = function (axisModel) {
    var eventData = {
      componentType: axisModel.mainType,
      componentIndex: axisModel.componentIndex
    };
    eventData[axisModel.mainType + 'Index'] = axisModel.componentIndex;
    return eventData;
  };
  /**
   * @public
   * @static
   * @param {Object} opt
   * @param {number} axisRotation in radian
   * @param {number} textRotation in radian
   * @param {number} direction
   * @return {Object} {
   *  rotation, // according to axis
   *  textAlign,
   *  textVerticalAlign
   * }
   */


  var innerTextLayout = AxisBuilder.innerTextLayout = function (axisRotation, textRotation, direction) {
    var rotationDiff = remRadian$1(textRotation - axisRotation);
    var textAlign;
    var textVerticalAlign;

    if (isRadianAroundZero$1(rotationDiff)) {
      // Label is parallel with axis line.
      textVerticalAlign = direction > 0 ? 'top' : 'bottom';
      textAlign = 'center';
    } else if (isRadianAroundZero$1(rotationDiff - PI$2)) {
      // Label is inverse parallel with axis line.
      textVerticalAlign = direction > 0 ? 'bottom' : 'top';
      textAlign = 'center';
    } else {
      textVerticalAlign = 'middle';

      if (rotationDiff > 0 && rotationDiff < PI$2) {
        textAlign = direction > 0 ? 'right' : 'left';
      } else {
        textAlign = direction > 0 ? 'left' : 'right';
      }
    }

    return {
      rotation: rotationDiff,
      textAlign: textAlign,
      textVerticalAlign: textVerticalAlign
    };
  };

  function endTextLayout(opt, textPosition, textRotate, extent) {
    var rotationDiff = remRadian$1(textRotate - opt.rotation);
    var textAlign;
    var textVerticalAlign;
    var inverse = extent[0] > extent[1];
    var onLeft = textPosition === 'start' && !inverse || textPosition !== 'start' && inverse;

    if (isRadianAroundZero$1(rotationDiff - PI$2 / 2)) {
      textVerticalAlign = onLeft ? 'bottom' : 'top';
      textAlign = 'center';
    } else if (isRadianAroundZero$1(rotationDiff - PI$2 * 1.5)) {
      textVerticalAlign = onLeft ? 'top' : 'bottom';
      textAlign = 'center';
    } else {
      textVerticalAlign = 'middle';

      if (rotationDiff < PI$2 * 1.5 && rotationDiff > PI$2 / 2) {
        textAlign = onLeft ? 'left' : 'right';
      } else {
        textAlign = onLeft ? 'right' : 'left';
      }
    }

    return {
      rotation: rotationDiff,
      textAlign: textAlign,
      textVerticalAlign: textVerticalAlign
    };
  }

  var isLabelSilent = AxisBuilder.isLabelSilent = function (axisModel) {
    var tooltipOpt = axisModel.get('tooltip');
    return axisModel.get('silent') // Consider mouse cursor, add these restrictions.
    || !(axisModel.get('triggerEvent') || tooltipOpt && tooltipOpt.show);
  };

  function fixMinMaxLabelShow(axisModel, labelEls, tickEls) {
    if (shouldShowAllLabels$2(axisModel.axis)) {
      return;
    } // If min or max are user set, we need to check
    // If the tick on min(max) are overlap on their neighbour tick
    // If they are overlapped, we need to hide the min(max) tick label


    var showMinLabel = axisModel.get('axisLabel.showMinLabel');
    var showMaxLabel = axisModel.get('axisLabel.showMaxLabel'); // FIXME
    // Have not consider onBand yet, where tick els is more than label els.

    labelEls = labelEls || [];
    tickEls = tickEls || [];
    var firstLabel = labelEls[0];
    var nextLabel = labelEls[1];
    var lastLabel = labelEls[labelEls.length - 1];
    var prevLabel = labelEls[labelEls.length - 2];
    var firstTick = tickEls[0];
    var nextTick = tickEls[1];
    var lastTick = tickEls[tickEls.length - 1];
    var prevTick = tickEls[tickEls.length - 2];

    if (showMinLabel === false) {
      ignoreEl(firstLabel);
      ignoreEl(firstTick);
    } else if (isTwoLabelOverlapped(firstLabel, nextLabel)) {
      if (showMinLabel) {
        ignoreEl(nextLabel);
        ignoreEl(nextTick);
      } else {
        ignoreEl(firstLabel);
        ignoreEl(firstTick);
      }
    }

    if (showMaxLabel === false) {
      ignoreEl(lastLabel);
      ignoreEl(lastTick);
    } else if (isTwoLabelOverlapped(prevLabel, lastLabel)) {
      if (showMaxLabel) {
        ignoreEl(prevLabel);
        ignoreEl(prevTick);
      } else {
        ignoreEl(lastLabel);
        ignoreEl(lastTick);
      }
    }
  }

  function ignoreEl(el) {
    el && (el.ignore = true);
  }

  function isTwoLabelOverlapped(current, next, labelLayout) {
    // current and next has the same rotation.
    var firstRect = current && current.getBoundingRect().clone();
    var nextRect = next && next.getBoundingRect().clone();

    if (!firstRect || !nextRect) {
      return;
    } // When checking intersect of two rotated labels, we use mRotationBack
    // to avoid that boundingRect is enlarge when using `boundingRect.applyTransform`.


    var mRotationBack = matrix.identity([]);
    matrix.rotate(mRotationBack, mRotationBack, -current.rotation);
    firstRect.applyTransform(matrix.mul([], mRotationBack, current.getLocalTransform()));
    nextRect.applyTransform(matrix.mul([], mRotationBack, next.getLocalTransform()));
    return firstRect.intersect(nextRect);
  }

  function isNameLocationCenter(nameLocation) {
    return nameLocation === 'middle' || nameLocation === 'center';
  }

  function createTicks(ticksCoords, tickTransform, tickEndCoord, tickLineStyle, aniid) {
    var tickEls = [];
    var pt1 = [];
    var pt2 = [];

    for (var i = 0; i < ticksCoords.length; i++) {
      var tickCoord = ticksCoords[i].coord;
      pt1[0] = tickCoord;
      pt1[1] = 0;
      pt2[0] = tickCoord;
      pt2[1] = tickEndCoord;

      if (tickTransform) {
        v2ApplyTransform$2(pt1, pt1, tickTransform);
        v2ApplyTransform$2(pt2, pt2, tickTransform);
      } // Tick line, Not use group transform to have better line draw


      var tickEl = new graphic.Line({
        // Id for animation
        anid: aniid + '_' + ticksCoords[i].tickValue,
        subPixelOptimize: true,
        shape: {
          x1: pt1[0],
          y1: pt1[1],
          x2: pt2[0],
          y2: pt2[1]
        },
        style: tickLineStyle,
        z2: 2,
        silent: true
      });
      tickEls.push(tickEl);
    }

    return tickEls;
  }

  function buildAxisMajorTicks(axisBuilder, axisModel, opt) {
    var axis = axisModel.axis;
    var tickModel = axisModel.getModel('axisTick');

    if (!tickModel.get('show') || axis.scale.isBlank()) {
      return;
    }

    var lineStyleModel = tickModel.getModel('lineStyle');
    var tickEndCoord = opt.tickDirection * tickModel.get('length');
    var ticksCoords = axis.getTicksCoords();
    var ticksEls = createTicks(ticksCoords, axisBuilder._transform, tickEndCoord, defaults$3(lineStyleModel.getLineStyle(), {
      stroke: axisModel.get('axisLine.lineStyle.color')
    }), 'ticks');

    for (var i = 0; i < ticksEls.length; i++) {
      axisBuilder.group.add(ticksEls[i]);
    }

    return ticksEls;
  }

  function buildAxisMinorTicks(axisBuilder, axisModel, opt) {
    var axis = axisModel.axis;
    var minorTickModel = axisModel.getModel('minorTick');

    if (!minorTickModel.get('show') || axis.scale.isBlank()) {
      return;
    }

    var minorTicksCoords = axis.getMinorTicksCoords();

    if (!minorTicksCoords.length) {
      return;
    }

    var lineStyleModel = minorTickModel.getModel('lineStyle');
    var tickEndCoord = opt.tickDirection * minorTickModel.get('length');
    var minorTickLineStyle = defaults$3(lineStyleModel.getLineStyle(), defaults$3(axisModel.getModel('axisTick').getLineStyle(), {
      stroke: axisModel.get('axisLine.lineStyle.color')
    }));

    for (var i = 0; i < minorTicksCoords.length; i++) {
      var minorTicksEls = createTicks(minorTicksCoords[i], axisBuilder._transform, tickEndCoord, minorTickLineStyle, 'minorticks_' + i);

      for (var k = 0; k < minorTicksEls.length; k++) {
        axisBuilder.group.add(minorTicksEls[k]);
      }
    }
  }

  function buildAxisLabel(axisBuilder, axisModel, opt) {
    var axis = axisModel.axis;
    var show = retrieve$1(opt.axisLabelShow, axisModel.get('axisLabel.show'));

    if (!show || axis.scale.isBlank()) {
      return;
    }

    var labelModel = axisModel.getModel('axisLabel');
    var labelMargin = labelModel.get('margin');
    var labels = axis.getViewLabels(); // Special label rotate.

    var labelRotation = (retrieve$1(opt.labelRotate, labelModel.get('rotate')) || 0) * PI$2 / 180;
    var labelLayout = innerTextLayout(opt.rotation, labelRotation, opt.labelDirection);
    var rawCategoryData = axisModel.getCategories && axisModel.getCategories(true);
    var labelEls = [];
    var silent = isLabelSilent(axisModel);
    var triggerEvent = axisModel.get('triggerEvent');
    each$l(labels, function (labelItem, index) {
      var tickValue = labelItem.tickValue;
      var formattedLabel = labelItem.formattedLabel;
      var rawLabel = labelItem.rawLabel;
      var itemLabelModel = labelModel;

      if (rawCategoryData && rawCategoryData[tickValue] && rawCategoryData[tickValue].textStyle) {
        itemLabelModel = new Model_1(rawCategoryData[tickValue].textStyle, labelModel, axisModel.ecModel);
      }

      var textColor = itemLabelModel.getTextColor() || axisModel.get('axisLine.lineStyle.color');
      var tickCoord = axis.dataToCoord(tickValue);
      var pos = [tickCoord, opt.labelOffset + opt.labelDirection * labelMargin];
      var textEl = new graphic.Text({
        // Id for animation
        anid: 'label_' + tickValue,
        position: pos,
        rotation: labelLayout.rotation,
        silent: silent,
        z2: 10
      });
      graphic.setTextStyle(textEl.style, itemLabelModel, {
        text: formattedLabel,
        textAlign: itemLabelModel.getShallow('align', true) || labelLayout.textAlign,
        textVerticalAlign: itemLabelModel.getShallow('verticalAlign', true) || itemLabelModel.getShallow('baseline', true) || labelLayout.textVerticalAlign,
        textFill: typeof textColor === 'function' ? textColor( // (1) In category axis with data zoom, tick is not the original
        // index of axis.data. So tick should not be exposed to user
        // in category axis.
        // (2) Compatible with previous version, which always use formatted label as
        // input. But in interval scale the formatted label is like '223,445', which
        // maked user repalce ','. So we modify it to return original val but remain
        // it as 'string' to avoid error in replacing.
        axis.type === 'category' ? rawLabel : axis.type === 'value' ? tickValue + '' : tickValue, index) : textColor
      }); // Pack data for mouse event

      if (triggerEvent) {
        textEl.eventData = makeAxisEventDataBase(axisModel);
        textEl.eventData.targetType = 'axisLabel';
        textEl.eventData.value = rawLabel;
      } // FIXME


      axisBuilder._dumbGroup.add(textEl);

      textEl.updateTransform();
      labelEls.push(textEl);
      axisBuilder.group.add(textEl);
      textEl.decomposeTransform();
    });
    return labelEls;
  }

  var _default$1G = AxisBuilder;
  var AxisBuilder_1 = _default$1G;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */





  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var each$m = util.each;
  var curry$1 = util.curry; // Build axisPointerModel, mergin tooltip.axisPointer model for each axis.
  // allAxesInfo should be updated when setOption performed.

  function collect(ecModel, api) {
    var result = {
      /**
       * key: makeKey(axis.model)
       * value: {
       *      axis,
       *      coordSys,
       *      axisPointerModel,
       *      triggerTooltip,
       *      involveSeries,
       *      snap,
       *      seriesModels,
       *      seriesDataCount
       * }
       */
      axesInfo: {},
      seriesInvolved: false,

      /**
       * key: makeKey(coordSys.model)
       * value: Object: key makeKey(axis.model), value: axisInfo
       */
      coordSysAxesInfo: {},
      coordSysMap: {}
    };
    collectAxesInfo(result, ecModel, api); // Check seriesInvolved for performance, in case too many series in some chart.

    result.seriesInvolved && collectSeriesInfo(result, ecModel);
    return result;
  }

  function collectAxesInfo(result, ecModel, api) {
    var globalTooltipModel = ecModel.getComponent('tooltip');
    var globalAxisPointerModel = ecModel.getComponent('axisPointer'); // links can only be set on global.

    var linksOption = globalAxisPointerModel.get('link', true) || [];
    var linkGroups = []; // Collect axes info.

    each$m(api.getCoordinateSystems(), function (coordSys) {
      // Some coordinate system do not support axes, like geo.
      if (!coordSys.axisPointerEnabled) {
        return;
      }

      var coordSysKey = makeKey(coordSys.model);
      var axesInfoInCoordSys = result.coordSysAxesInfo[coordSysKey] = {};
      result.coordSysMap[coordSysKey] = coordSys; // Set tooltip (like 'cross') is a convienent way to show axisPointer
      // for user. So we enable seting tooltip on coordSys model.

      var coordSysModel = coordSys.model;
      var baseTooltipModel = coordSysModel.getModel('tooltip', globalTooltipModel);
      each$m(coordSys.getAxes(), curry$1(saveTooltipAxisInfo, false, null)); // If axis tooltip used, choose tooltip axis for each coordSys.
      // Notice this case: coordSys is `grid` but not `cartesian2D` here.

      if (coordSys.getTooltipAxes && globalTooltipModel // If tooltip.showContent is set as false, tooltip will not
      // show but axisPointer will show as normal.
      && baseTooltipModel.get('show')) {
        // Compatible with previous logic. But series.tooltip.trigger: 'axis'
        // or series.data[n].tooltip.trigger: 'axis' are not support any more.
        var triggerAxis = baseTooltipModel.get('trigger') === 'axis';
        var cross = baseTooltipModel.get('axisPointer.type') === 'cross';
        var tooltipAxes = coordSys.getTooltipAxes(baseTooltipModel.get('axisPointer.axis'));

        if (triggerAxis || cross) {
          each$m(tooltipAxes.baseAxes, curry$1(saveTooltipAxisInfo, cross ? 'cross' : true, triggerAxis));
        }

        if (cross) {
          each$m(tooltipAxes.otherAxes, curry$1(saveTooltipAxisInfo, 'cross', false));
        }
      } // fromTooltip: true | false | 'cross'
      // triggerTooltip: true | false | null


      function saveTooltipAxisInfo(fromTooltip, triggerTooltip, axis) {
        var axisPointerModel = axis.model.getModel('axisPointer', globalAxisPointerModel);
        var axisPointerShow = axisPointerModel.get('show');

        if (!axisPointerShow || axisPointerShow === 'auto' && !fromTooltip && !isHandleTrigger(axisPointerModel)) {
          return;
        }

        if (triggerTooltip == null) {
          triggerTooltip = axisPointerModel.get('triggerTooltip');
        }

        axisPointerModel = fromTooltip ? makeAxisPointerModel(axis, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip) : axisPointerModel;
        var snap = axisPointerModel.get('snap');
        var key = makeKey(axis.model);
        var involveSeries = triggerTooltip || snap || axis.type === 'category'; // If result.axesInfo[key] exist, override it (tooltip has higher priority).

        var axisInfo = result.axesInfo[key] = {
          key: key,
          axis: axis,
          coordSys: coordSys,
          axisPointerModel: axisPointerModel,
          triggerTooltip: triggerTooltip,
          involveSeries: involveSeries,
          snap: snap,
          useHandle: isHandleTrigger(axisPointerModel),
          seriesModels: []
        };
        axesInfoInCoordSys[key] = axisInfo;
        result.seriesInvolved |= involveSeries;
        var groupIndex = getLinkGroupIndex(linksOption, axis);

        if (groupIndex != null) {
          var linkGroup = linkGroups[groupIndex] || (linkGroups[groupIndex] = {
            axesInfo: {}
          });
          linkGroup.axesInfo[key] = axisInfo;
          linkGroup.mapper = linksOption[groupIndex].mapper;
          axisInfo.linkGroup = linkGroup;
        }
      }
    });
  }

  function makeAxisPointerModel(axis, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip) {
    var tooltipAxisPointerModel = baseTooltipModel.getModel('axisPointer');
    var volatileOption = {};
    each$m(['type', 'snap', 'lineStyle', 'shadowStyle', 'label', 'animation', 'animationDurationUpdate', 'animationEasingUpdate', 'z'], function (field) {
      volatileOption[field] = util.clone(tooltipAxisPointerModel.get(field));
    }); // category axis do not auto snap, otherwise some tick that do not
    // has value can not be hovered. value/time/log axis default snap if
    // triggered from tooltip and trigger tooltip.

    volatileOption.snap = axis.type !== 'category' && !!triggerTooltip; // Compatibel with previous behavior, tooltip axis do not show label by default.
    // Only these properties can be overrided from tooltip to axisPointer.

    if (tooltipAxisPointerModel.get('type') === 'cross') {
      volatileOption.type = 'line';
    }

    var labelOption = volatileOption.label || (volatileOption.label = {}); // Follow the convention, do not show label when triggered by tooltip by default.

    labelOption.show == null && (labelOption.show = false);

    if (fromTooltip === 'cross') {
      // When 'cross', both axes show labels.
      var tooltipAxisPointerLabelShow = tooltipAxisPointerModel.get('label.show');
      labelOption.show = tooltipAxisPointerLabelShow != null ? tooltipAxisPointerLabelShow : true; // If triggerTooltip, this is a base axis, which should better not use cross style
      // (cross style is dashed by default)

      if (!triggerTooltip) {
        var crossStyle = volatileOption.lineStyle = tooltipAxisPointerModel.get('crossStyle');
        crossStyle && util.defaults(labelOption, crossStyle.textStyle);
      }
    }

    return axis.model.getModel('axisPointer', new Model_1(volatileOption, globalAxisPointerModel, ecModel));
  }

  function collectSeriesInfo(result, ecModel) {
    // Prepare data for axis trigger
    ecModel.eachSeries(function (seriesModel) {
      // Notice this case: this coordSys is `cartesian2D` but not `grid`.
      var coordSys = seriesModel.coordinateSystem;
      var seriesTooltipTrigger = seriesModel.get('tooltip.trigger', true);
      var seriesTooltipShow = seriesModel.get('tooltip.show', true);

      if (!coordSys || seriesTooltipTrigger === 'none' || seriesTooltipTrigger === false || seriesTooltipTrigger === 'item' || seriesTooltipShow === false || seriesModel.get('axisPointer.show', true) === false) {
        return;
      }

      each$m(result.coordSysAxesInfo[makeKey(coordSys.model)], function (axisInfo) {
        var axis = axisInfo.axis;

        if (coordSys.getAxis(axis.dim) === axis) {
          axisInfo.seriesModels.push(seriesModel);
          axisInfo.seriesDataCount == null && (axisInfo.seriesDataCount = 0);
          axisInfo.seriesDataCount += seriesModel.getData().count();
        }
      });
    }, this);
  }
  /**
   * For example:
   * {
   *     axisPointer: {
   *         links: [{
   *             xAxisIndex: [2, 4],
   *             yAxisIndex: 'all'
   *         }, {
   *             xAxisId: ['a5', 'a7'],
   *             xAxisName: 'xxx'
   *         }]
   *     }
   * }
   */


  function getLinkGroupIndex(linksOption, axis) {
    var axisModel = axis.model;
    var dim = axis.dim;

    for (var i = 0; i < linksOption.length; i++) {
      var linkOption = linksOption[i] || {};

      if (checkPropInLink(linkOption[dim + 'AxisId'], axisModel.id) || checkPropInLink(linkOption[dim + 'AxisIndex'], axisModel.componentIndex) || checkPropInLink(linkOption[dim + 'AxisName'], axisModel.name)) {
        return i;
      }
    }
  }

  function checkPropInLink(linkPropValue, axisPropValue) {
    return linkPropValue === 'all' || util.isArray(linkPropValue) && util.indexOf(linkPropValue, axisPropValue) >= 0 || linkPropValue === axisPropValue;
  }

  function fixValue(axisModel) {
    var axisInfo = getAxisInfo(axisModel);

    if (!axisInfo) {
      return;
    }

    var axisPointerModel = axisInfo.axisPointerModel;
    var scale = axisInfo.axis.scale;
    var option = axisPointerModel.option;
    var status = axisPointerModel.get('status');
    var value = axisPointerModel.get('value'); // Parse init value for category and time axis.

    if (value != null) {
      value = scale.parse(value);
    }

    var useHandle = isHandleTrigger(axisPointerModel); // If `handle` used, `axisPointer` will always be displayed, so value
    // and status should be initialized.

    if (status == null) {
      option.status = useHandle ? 'show' : 'hide';
    }

    var extent = scale.getExtent().slice();
    extent[0] > extent[1] && extent.reverse();

    if ( // Pick a value on axis when initializing.
    value == null // If both `handle` and `dataZoom` are used, value may be out of axis extent,
    // where we should re-pick a value to keep `handle` displaying normally.
    || value > extent[1]) {
      // Make handle displayed on the end of the axis when init, which looks better.
      value = extent[1];
    }

    if (value < extent[0]) {
      value = extent[0];
    }

    option.value = value;

    if (useHandle) {
      option.status = axisInfo.axis.scale.isBlank() ? 'hide' : 'show';
    }
  }

  function getAxisInfo(axisModel) {
    var coordSysAxesInfo = (axisModel.ecModel.getComponent('axisPointer') || {}).coordSysAxesInfo;
    return coordSysAxesInfo && coordSysAxesInfo.axesInfo[makeKey(axisModel)];
  }

  function getAxisPointerModel(axisModel) {
    var axisInfo = getAxisInfo(axisModel);
    return axisInfo && axisInfo.axisPointerModel;
  }

  function isHandleTrigger(axisPointerModel) {
    return !!axisPointerModel.get('handle.show');
  }
  /**
   * @param {module:echarts/model/Model} model
   * @return {string} unique key
   */


  function makeKey(model) {
    return model.type + '||' + model.id;
  }

  var collect_1 = collect;
  var fixValue_1 = fixValue;
  var getAxisInfo_1 = getAxisInfo;
  var getAxisPointerModel_1 = getAxisPointerModel;
  var makeKey_1 = makeKey;

  var modelHelper = {
  	collect: collect_1,
  	fixValue: fixValue_1,
  	getAxisInfo: getAxisInfo_1,
  	getAxisPointerModel: getAxisPointerModel_1,
  	makeKey: makeKey_1
  };

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * Base class of AxisView.
   */
  var AxisView = echarts.extendComponentView({
    type: 'axis',

    /**
     * @private
     */
    _axisPointer: null,

    /**
     * @protected
     * @type {string}
     */
    axisPointerClass: null,

    /**
     * @override
     */
    render: function (axisModel, ecModel, api, payload) {
      // FIXME
      // This process should proformed after coordinate systems updated
      // (axis scale updated), and should be performed each time update.
      // So put it here temporarily, although it is not appropriate to
      // put a model-writing procedure in `view`.
      this.axisPointerClass && modelHelper.fixValue(axisModel);
      AxisView.superApply(this, 'render', arguments);
      updateAxisPointer(this, axisModel, ecModel, api, payload, true);
    },

    /**
     * Action handler.
     * @public
     * @param {module:echarts/coord/cartesian/AxisModel} axisModel
     * @param {module:echarts/model/Global} ecModel
     * @param {module:echarts/ExtensionAPI} api
     * @param {Object} payload
     */
    updateAxisPointer: function (axisModel, ecModel, api, payload, force) {
      updateAxisPointer(this, axisModel, ecModel, api, payload, false);
    },

    /**
     * @override
     */
    remove: function (ecModel, api) {
      var axisPointer = this._axisPointer;
      axisPointer && axisPointer.remove(api);
      AxisView.superApply(this, 'remove', arguments);
    },

    /**
     * @override
     */
    dispose: function (ecModel, api) {
      disposeAxisPointer(this, api);
      AxisView.superApply(this, 'dispose', arguments);
    }
  });

  function updateAxisPointer(axisView, axisModel, ecModel, api, payload, forceRender) {
    var Clazz = AxisView.getAxisPointerClass(axisView.axisPointerClass);

    if (!Clazz) {
      return;
    }

    var axisPointerModel = modelHelper.getAxisPointerModel(axisModel);
    axisPointerModel ? (axisView._axisPointer || (axisView._axisPointer = new Clazz())).render(axisModel, axisPointerModel, api, forceRender) : disposeAxisPointer(axisView, api);
  }

  function disposeAxisPointer(axisView, ecModel, api) {
    var axisPointer = axisView._axisPointer;
    axisPointer && axisPointer.dispose(ecModel, api);
    axisView._axisPointer = null;
  }

  var axisPointerClazz = [];

  AxisView.registerAxisPointerClass = function (type, clazz) {
    axisPointerClazz[type] = clazz;
  };

  AxisView.getAxisPointerClass = function (type) {
    return type && axisPointerClazz[type];
  };

  var _default$1H = AxisView;
  var AxisView_1 = _default$1H;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */



  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * Can only be called after coordinate system creation stage.
   * (Can be called before coordinate system update stage).
   *
   * @param {Object} opt {labelInside}
   * @return {Object} {
   *  position, rotation, labelDirection, labelOffset,
   *  tickDirection, labelRotate, z2
   * }
   */
  function layout$2(gridModel, axisModel, opt) {
    opt = opt || {};
    var grid = gridModel.coordinateSystem;
    var axis = axisModel.axis;
    var layout = {};
    var otherAxisOnZeroOf = axis.getAxesOnZeroOf()[0];
    var rawAxisPosition = axis.position;
    var axisPosition = otherAxisOnZeroOf ? 'onZero' : rawAxisPosition;
    var axisDim = axis.dim;
    var rect = grid.getRect();
    var rectBound = [rect.x, rect.x + rect.width, rect.y, rect.y + rect.height];
    var idx = {
      left: 0,
      right: 1,
      top: 0,
      bottom: 1,
      onZero: 2
    };
    var axisOffset = axisModel.get('offset') || 0;
    var posBound = axisDim === 'x' ? [rectBound[2] - axisOffset, rectBound[3] + axisOffset] : [rectBound[0] - axisOffset, rectBound[1] + axisOffset];

    if (otherAxisOnZeroOf) {
      var onZeroCoord = otherAxisOnZeroOf.toGlobalCoord(otherAxisOnZeroOf.dataToCoord(0));
      posBound[idx.onZero] = Math.max(Math.min(onZeroCoord, posBound[1]), posBound[0]);
    } // Axis position


    layout.position = [axisDim === 'y' ? posBound[idx[axisPosition]] : rectBound[0], axisDim === 'x' ? posBound[idx[axisPosition]] : rectBound[3]]; // Axis rotation

    layout.rotation = Math.PI / 2 * (axisDim === 'x' ? 0 : 1); // Tick and label direction, x y is axisDim

    var dirMap = {
      top: -1,
      bottom: 1,
      left: -1,
      right: 1
    };
    layout.labelDirection = layout.tickDirection = layout.nameDirection = dirMap[rawAxisPosition];
    layout.labelOffset = otherAxisOnZeroOf ? posBound[idx[rawAxisPosition]] - posBound[idx.onZero] : 0;

    if (axisModel.get('axisTick.inside')) {
      layout.tickDirection = -layout.tickDirection;
    }

    if (util.retrieve(opt.labelInside, axisModel.get('axisLabel.inside'))) {
      layout.labelDirection = -layout.labelDirection;
    } // Special label rotation


    var labelRotate = axisModel.get('axisLabel.rotate');
    layout.labelRotate = axisPosition === 'top' ? -labelRotate : labelRotate; // Over splitLine and splitArea

    layout.z2 = 1;
    return layout;
  }

  var layout_1$1 = layout$2;

  var cartesianAxisHelper = {
  	layout: layout_1$1
  };

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */





  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  function rectCoordAxisBuildSplitArea(axisView, axisGroup, axisModel, gridModel) {
    var axis = axisModel.axis;

    if (axis.scale.isBlank()) {
      return;
    }

    var splitAreaModel = axisModel.getModel('splitArea');
    var areaStyleModel = splitAreaModel.getModel('areaStyle');
    var areaColors = areaStyleModel.get('color');
    var gridRect = gridModel.coordinateSystem.getRect();
    var ticksCoords = axis.getTicksCoords({
      tickModel: splitAreaModel,
      clamp: true
    });

    if (!ticksCoords.length) {
      return;
    } // For Making appropriate splitArea animation, the color and anid
    // should be corresponding to previous one if possible.


    var areaColorsLen = areaColors.length;
    var lastSplitAreaColors = axisView.__splitAreaColors;
    var newSplitAreaColors = util.createHashMap();
    var colorIndex = 0;

    if (lastSplitAreaColors) {
      for (var i = 0; i < ticksCoords.length; i++) {
        var cIndex = lastSplitAreaColors.get(ticksCoords[i].tickValue);

        if (cIndex != null) {
          colorIndex = (cIndex + (areaColorsLen - 1) * i) % areaColorsLen;
          break;
        }
      }
    }

    var prev = axis.toGlobalCoord(ticksCoords[0].coord);
    var areaStyle = areaStyleModel.getAreaStyle();
    areaColors = util.isArray(areaColors) ? areaColors : [areaColors];

    for (var i = 1; i < ticksCoords.length; i++) {
      var tickCoord = axis.toGlobalCoord(ticksCoords[i].coord);
      var x;
      var y;
      var width;
      var height;

      if (axis.isHorizontal()) {
        x = prev;
        y = gridRect.y;
        width = tickCoord - x;
        height = gridRect.height;
        prev = x + width;
      } else {
        x = gridRect.x;
        y = prev;
        width = gridRect.width;
        height = tickCoord - y;
        prev = y + height;
      }

      var tickValue = ticksCoords[i - 1].tickValue;
      tickValue != null && newSplitAreaColors.set(tickValue, colorIndex);
      axisGroup.add(new graphic.Rect({
        anid: tickValue != null ? 'area_' + tickValue : null,
        shape: {
          x: x,
          y: y,
          width: width,
          height: height
        },
        style: util.defaults({
          fill: areaColors[colorIndex]
        }, areaStyle),
        silent: true
      }));
      colorIndex = (colorIndex + 1) % areaColorsLen;
    }

    axisView.__splitAreaColors = newSplitAreaColors;
  }

  function rectCoordAxisHandleRemove(axisView) {
    axisView.__splitAreaColors = null;
  }

  var rectCoordAxisBuildSplitArea_1 = rectCoordAxisBuildSplitArea;
  var rectCoordAxisHandleRemove_1 = rectCoordAxisHandleRemove;

  var axisSplitHelper = {
  	rectCoordAxisBuildSplitArea: rectCoordAxisBuildSplitArea_1,
  	rectCoordAxisHandleRemove: rectCoordAxisHandleRemove_1
  };

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */













  var rectCoordAxisBuildSplitArea$1 = axisSplitHelper.rectCoordAxisBuildSplitArea;
  var rectCoordAxisHandleRemove$1 = axisSplitHelper.rectCoordAxisHandleRemove;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];
  var selfBuilderAttrs = ['splitArea', 'splitLine', 'minorSplitLine'];
  var CartesianAxisView = AxisView_1.extend({
    type: 'cartesianAxis',
    axisPointerClass: 'CartesianAxisPointer',

    /**
     * @override
     */
    render: function (axisModel, ecModel, api, payload) {
      this.group.removeAll();
      var oldAxisGroup = this._axisGroup;
      this._axisGroup = new graphic.Group();
      this.group.add(this._axisGroup);

      if (!axisModel.get('show')) {
        return;
      }

      var gridModel = axisModel.getCoordSysModel();
      var layout = cartesianAxisHelper.layout(gridModel, axisModel);
      var axisBuilder = new AxisBuilder_1(axisModel, layout);
      util.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);

      this._axisGroup.add(axisBuilder.getGroup());

      util.each(selfBuilderAttrs, function (name) {
        if (axisModel.get(name + '.show')) {
          this['_' + name](axisModel, gridModel);
        }
      }, this);
      graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);
      CartesianAxisView.superCall(this, 'render', axisModel, ecModel, api, payload);
    },
    remove: function () {
      rectCoordAxisHandleRemove$1(this);
    },

    /**
     * @param {module:echarts/coord/cartesian/AxisModel} axisModel
     * @param {module:echarts/coord/cartesian/GridModel} gridModel
     * @private
     */
    _splitLine: function (axisModel, gridModel) {
      var axis = axisModel.axis;

      if (axis.scale.isBlank()) {
        return;
      }

      var splitLineModel = axisModel.getModel('splitLine');
      var lineStyleModel = splitLineModel.getModel('lineStyle');
      var lineColors = lineStyleModel.get('color');
      lineColors = util.isArray(lineColors) ? lineColors : [lineColors];
      var gridRect = gridModel.coordinateSystem.getRect();
      var isHorizontal = axis.isHorizontal();
      var lineCount = 0;
      var ticksCoords = axis.getTicksCoords({
        tickModel: splitLineModel
      });
      var p1 = [];
      var p2 = [];
      var lineStyle = lineStyleModel.getLineStyle();

      for (var i = 0; i < ticksCoords.length; i++) {
        var tickCoord = axis.toGlobalCoord(ticksCoords[i].coord);

        if (isHorizontal) {
          p1[0] = tickCoord;
          p1[1] = gridRect.y;
          p2[0] = tickCoord;
          p2[1] = gridRect.y + gridRect.height;
        } else {
          p1[0] = gridRect.x;
          p1[1] = tickCoord;
          p2[0] = gridRect.x + gridRect.width;
          p2[1] = tickCoord;
        }

        var colorIndex = lineCount++ % lineColors.length;
        var tickValue = ticksCoords[i].tickValue;

        this._axisGroup.add(new graphic.Line({
          anid: tickValue != null ? 'line_' + ticksCoords[i].tickValue : null,
          subPixelOptimize: true,
          shape: {
            x1: p1[0],
            y1: p1[1],
            x2: p2[0],
            y2: p2[1]
          },
          style: util.defaults({
            stroke: lineColors[colorIndex]
          }, lineStyle),
          silent: true
        }));
      }
    },

    /**
     * @param {module:echarts/coord/cartesian/AxisModel} axisModel
     * @param {module:echarts/coord/cartesian/GridModel} gridModel
     * @private
     */
    _minorSplitLine: function (axisModel, gridModel) {
      var axis = axisModel.axis;
      var minorSplitLineModel = axisModel.getModel('minorSplitLine');
      var lineStyleModel = minorSplitLineModel.getModel('lineStyle');
      var gridRect = gridModel.coordinateSystem.getRect();
      var isHorizontal = axis.isHorizontal();
      var minorTicksCoords = axis.getMinorTicksCoords();

      if (!minorTicksCoords.length) {
        return;
      }

      var p1 = [];
      var p2 = [];
      var lineStyle = lineStyleModel.getLineStyle();

      for (var i = 0; i < minorTicksCoords.length; i++) {
        for (var k = 0; k < minorTicksCoords[i].length; k++) {
          var tickCoord = axis.toGlobalCoord(minorTicksCoords[i][k].coord);

          if (isHorizontal) {
            p1[0] = tickCoord;
            p1[1] = gridRect.y;
            p2[0] = tickCoord;
            p2[1] = gridRect.y + gridRect.height;
          } else {
            p1[0] = gridRect.x;
            p1[1] = tickCoord;
            p2[0] = gridRect.x + gridRect.width;
            p2[1] = tickCoord;
          }

          this._axisGroup.add(new graphic.Line({
            anid: 'minor_line_' + minorTicksCoords[i][k].tickValue,
            subPixelOptimize: true,
            shape: {
              x1: p1[0],
              y1: p1[1],
              x2: p2[0],
              y2: p2[1]
            },
            style: lineStyle,
            silent: true
          }));
        }
      }
    },

    /**
     * @param {module:echarts/coord/cartesian/AxisModel} axisModel
     * @param {module:echarts/coord/cartesian/GridModel} gridModel
     * @private
     */
    _splitArea: function (axisModel, gridModel) {
      rectCoordAxisBuildSplitArea$1(this, this._axisGroup, axisModel, gridModel);
    }
  });
  CartesianAxisView.extend({
    type: 'xAxis'
  });
  CartesianAxisView.extend({
    type: 'yAxis'
  });

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */











  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  // Grid view
  echarts.extendComponentView({
    type: 'grid',
    render: function (gridModel, ecModel) {
      this.group.removeAll();

      if (gridModel.get('show')) {
        this.group.add(new graphic.Rect({
          shape: gridModel.coordinateSystem.getRect(),
          style: util.defaults({
            fill: gridModel.get('backgroundColor')
          }, gridModel.getItemStyle()),
          silent: true,
          z2: -1
        }));
      }
    }
  });
  echarts.registerPreprocessor(function (option) {
    // Only create grid when need
    if (option.xAxis && option.yAxis && !option.grid) {
      option.grid = {};
    }
  });

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */







  var layout$3 = barGrid.layout;
  var largeLayout$1 = barGrid.largeLayout;









  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  // In case developer forget to include grid component
  echarts.registerLayout(echarts.PRIORITY.VISUAL.LAYOUT, util.curry(layout$3, 'bar')); // Use higher prority to avoid to be blocked by other overall layout, which do not
  // only exist in this module, but probably also exist in other modules, like `barPolar`.

  echarts.registerLayout(echarts.PRIORITY.VISUAL.PROGRESSIVE_LAYOUT, largeLayout$1);
  echarts.registerVisual({
    seriesType: 'bar',
    reset: function (seriesModel) {
      // Visual coding for legend
      seriesModel.getData().setVisual('legendSymbol', 'roundRect');
    }
  });

  var script$7 = {
    name: 'averageAge',
    props: {
      data: Array,
      avgAge: Number
    },
    setup: function setup(ctx) {
      var startAge = vue.ref(0);
      var options = vue.ref(null);

      var updateChart = function updateChart() {
        var newData = ['指标'];
        var color = [];
        var max = 0;
        var axis = ['指标'];
        ctx.data.forEach(function (item) {
          newData.push(item.value);
          max += +item.value;
          color.push(item.color);
          axis.push(item.axis);
        });
        options.value = {
          tooltip: {
            textStyle: {
              fontSize: 28
            }
          },
          color: color,
          grid: {
            left: 40,
            right: 40,
            top: 0
          },
          dataset: {
            source: [axis, newData]
          },
          xAxis: {
            type: 'value',
            max: max,
            splitLine: {
              show: false
            },
            axisTick: {
              show: false
            },
            axisLabel: {
              color: 'rgb(98,105,113)',
              fontSize: 18
            },
            axisLine: {
              lineStyle: {
                color: 'rgb(50,51,53)',
                width: 3
              }
            }
          },
          yAxis: {
            type: 'category',
            show: false
          },
          series: [{
            type: 'bar',
            stack: 'total',
            barWidth: 15
          }, {
            type: 'bar',
            stack: 'total'
          }, {
            type: 'bar',
            stack: 'total'
          }, {
            type: 'bar',
            stack: 'total'
          }]
        };
      };

      vue.watch(function () {
        return ctx.avgAge;
      }, function (nextValue, prevValue) {
        startAge.value = prevValue;
      });
      vue.watch(function () {
        return ctx.data;
      }, function () {
        updateChart();
      });
      vue.onMounted(function () {
      });
      return {
        startAge: startAge,
        options: options
      };
    }
  };

  var _withId$5 = /*#__PURE__*/vue.withScopeId("data-v-53a210cf");

  vue.pushScopeId("data-v-53a210cf");

  var _hoisted_1$5 = {
    "class": "average-age"
  };
  var _hoisted_2$4 = {
    "class": "title-wrapper"
  };

  var _hoisted_3$3 = /*#__PURE__*/vue.createVNode("div", {
    "class": "average-age-left"
  }, [/*#__PURE__*/vue.createVNode("div", {
    "class": "title"
  }, "用户年龄分布&平均年龄"), /*#__PURE__*/vue.createVNode("div", {
    "class": "sub-title"
  }, "Distribution of Age")], -1
  /* HOISTED */
  );

  var _hoisted_4$1 = {
    "class": "average-age-right"
  };
  var _hoisted_5$1 = {
    "class": "age"
  };

  var _hoisted_6$1 = /*#__PURE__*/vue.createVNode("span", {
    "class": "age-unit"
  }, "岁", -1
  /* HOISTED */
  );

  var _hoisted_7$1 = {
    id: "average-age-chart"
  };
  var _hoisted_8$1 = {
    "class": "average-data-wrapper"
  };
  var _hoisted_9$1 = {
    "class": "average-data-value"
  };
  var _hoisted_10$1 = {
    "class": "average-data-axis"
  };
  var _hoisted_11$1 = {
    "class": "text"
  };

  vue.popScopeId();

  var render$7 = /*#__PURE__*/_withId$5(function (_ctx, _cache, $props, $setup, $data, $options) {
    var _component_CountTo = vue.resolveComponent("CountTo");

    var _component_VueEcharts = vue.resolveComponent("VueEcharts");

    return vue.openBlock(), vue.createBlock("div", _hoisted_1$5, [vue.createVNode("div", _hoisted_2$4, [_hoisted_3$3, vue.createVNode("div", _hoisted_4$1, [vue.createVNode("div", _hoisted_5$1, [vue.createVNode(_component_CountTo, {
      "start-val": $setup.startAge,
      "end-val": $props.avgAge,
      duration: 1000,
      decimals: 2
    }, null, 8
    /* PROPS */
    , ["start-val", "end-val"]), _hoisted_6$1])])]), vue.createVNode("div", _hoisted_7$1, [vue.createVNode(_component_VueEcharts, {
      options: $setup.options
    }, null, 8
    /* PROPS */
    , ["options"])]), vue.createVNode("div", _hoisted_8$1, [(vue.openBlock(true), vue.createBlock(vue.Fragment, null, vue.renderList($props.data, function (item, index) {
      return vue.openBlock(), vue.createBlock("div", {
        "class": "average-data",
        key: index
      }, [vue.createVNode("div", _hoisted_9$1, [vue.createVNode(_component_CountTo, {
        "start-val": item.startValue,
        "end-val": item.value,
        duration: 1000
      }, null, 8
      /* PROPS */
      , ["start-val", "end-val"])]), vue.createVNode("div", _hoisted_10$1, [vue.createVNode("div", {
        "class": "point",
        style: {
          background: item.color
        }
      }, null, 4
      /* STYLE */
      ), vue.createVNode("div", _hoisted_11$1, vue.toDisplayString(item.axis), 1
      /* TEXT */
      )])]);
    }), 128
    /* KEYED_FRAGMENT */
    ))])]);
  });

  var css_248z$6 = ".average-age[data-v-53a210cf] {\n  width: 100%;\n  height: 100%;\n  background: #2b2c2e;\n  padding: 20px 40px;\n  box-sizing: border-box;\n}\n.average-age[data-v-53a210cf] .title-wrapper {\n  display: flex;\n  align-items: center;\n}\n.average-age[data-v-53a210cf] .title-wrapper .average-age-left .title {\n  font-size: 32px;\n}\n.average-age[data-v-53a210cf] .title-wrapper .average-age-left .sub-title {\n  font-size: 16px;\n  margin-top: 10px;\n}\n.average-age[data-v-53a210cf] .title-wrapper .average-age-right {\n  flex: 1;\n  margin-left: 40px;\n  font-weight: bold;\n}\n.average-age[data-v-53a210cf] .title-wrapper .average-age-right .age {\n  font-size: 68px;\n  font-family: DIN;\n}\n.average-age[data-v-53a210cf] .title-wrapper .average-age-right .age .age-unit {\n  font-size: 20px;\n}\n.average-age[data-v-53a210cf] #average-age-chart {\n  height: 120px;\n}\n.average-age[data-v-53a210cf] .average-data-wrapper {\n  display: flex;\n}\n.average-age[data-v-53a210cf] .average-data-wrapper .average-data {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: 30px;\n  font-weight: bolder;\n}\n.average-age[data-v-53a210cf] .average-data-wrapper .average-data .average-data-value {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n}\n.average-age[data-v-53a210cf] .average-data-wrapper .average-data .average-data-axis {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  margin-top: 5px;\n}\n.average-age[data-v-53a210cf] .average-data-wrapper .average-data .average-data-axis .point {\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n}\n.average-age[data-v-53a210cf] .average-data-wrapper .average-data .average-data-axis .text {\n  margin-left: 10px;\n  font-size: 16px;\n}";
  styleInject(css_248z$6);

  script$7.render = render$7;
  script$7.__scopeId = "data-v-53a210cf";
  script$7.__file = "src/components/AverageAge/AverageAge.vue";

  function AverageAge (Vue) {
    Vue.component(script$7.name, script$7);
  }

  var script$8 = {
    name: 'VueEcharts',
    props: {
      options: Object,
      theme: [String, Object]
    },
    setup: function setup(ctx) {
      var dom;
      var chart;
      var className = "echarts".concat(v4());

      var initChart = function initChart() {
        if (!chart) {
          dom = document.getElementsByClassName(className)[0];
          chart = Echarts__default['default'].init(dom, ctx.theme);
        }

        if (ctx.options) {
          chart.setOption(ctx.options);
        }
      };

      vue.onMounted(function () {
        initChart();
      });
      vue.watch(function () {
        return ctx.options;
      }, function () {
        console.log(ctx.options);
        initChart();
      });
      return {
        className: className
      };
    }
  };

  var _withId$6 = /*#__PURE__*/vue.withScopeId("data-v-1f52796f");

  var render$8 = /*#__PURE__*/_withId$6(function (_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createBlock("div", {
      "class": [$setup.className, 'echarts']
    }, null, 2
    /* CLASS */
    );
  });

  var css_248z$7 = ".echarts[data-v-1f52796f] {\n  width: 100%;\n  height: 100%;\n}";
  styleInject(css_248z$7);

  script$8.render = render$8;
  script$8.__scopeId = "data-v-1f52796f";
  script$8.__file = "src/components/VueEcharts/vueEcharts.vue";

  function Echarts (Vue) {
    Vue.component(script$8.name, script$8);
  }

  var color$2 = ['rgb(176,207,120)', 'rgb(157,195,91)', 'rgb(131,167,72)'];
  var script$9 = {
    name: 'TotalDevice',
    props: {
      data: Object
    },
    setup: function setup(props) {
      var refData = vue.ref([]);
      var num = vue.ref(0);
      var startNum = vue.ref(0);
      var options = vue.ref({});

      var updateChart = function updateChart() {
        options.value = {
          series: [{
            name: '设备总数',
            type: 'pie',
            data: refData.value,
            roseType: 'radius',
            //南丁格尔图
            label: {
              show: false
            },
            //外圆指示文字
            emphasis: {
              //鼠标移动上去的颜色变化
              itemStyle: {
                color: 'rgb(140,251,182)'
              }
            },
            radius: '70%',
            //半径大小
            clockwise: true,
            //true 数据从大到小顺时针排列 false 数据从大到小逆时针排列
            color: color$2,
            //颜色
            selectedMode: 'multiple',
            //可以一次点击多个区域
            selectedOffset: 15 //点击之后扇形图偏移的距离

          }]
        };
      };

      var update = function update(newData) {
        if (refData.value.length > 0) {
          refData.value = newData.devices.map(function (item, index) {
            return {
              startValue: refData.value[index].value,
              value: item.value,
              name: item.key,
              color: color$2[index]
            };
          });
        } else {
          refData.value = newData.devices.map(function (item, index) {
            return {
              startValue: 0,
              value: item.value,
              name: item.key,
              color: color$2[index]
            };
          });
        }

        startNum.value = num.value;
        num.value = +newData.totalDevices;
        updateChart();
      };

      vue.watch(function () {
        return props.data;
      }, function (newData) {
        update(newData);
      });
      vue.onMounted(function () {
        update(props.data);
      });
      return {
        refData: refData,
        num: num,
        startNum: startNum,
        options: options
      };
    }
  };

  var _withId$7 = /*#__PURE__*/vue.withScopeId("data-v-6ca3fa45");

  vue.pushScopeId("data-v-6ca3fa45");

  var _hoisted_1$6 = {
    "class": "total-device"
  };
  var _hoisted_2$5 = {
    "class": "total-device-left"
  };
  var _hoisted_3$4 = {
    id: "total-device-chart"
  };
  var _hoisted_4$2 = {
    "class": "total-device-right"
  };
  var _hoisted_5$2 = {
    "class": "title-wrapper"
  };

  var _hoisted_6$2 = /*#__PURE__*/vue.createVNode("div", {
    "class": "total-device-right-left"
  }, [/*#__PURE__*/vue.createVNode("div", {
    "class": "title"
  }, "登录设备"), /*#__PURE__*/vue.createVNode("div", {
    "class": "sub-title"
  }, "Distribution of Internet devices")], -1
  /* HOISTED */
  );

  var _hoisted_7$2 = {
    "class": "total-device-right-right"
  };
  var _hoisted_8$2 = {
    "class": "age"
  };

  var _hoisted_9$2 = /*#__PURE__*/vue.createVNode("span", {
    "class": "age-unit"
  }, "台", -1
  /* HOISTED */
  );

  var _hoisted_10$2 = {
    "class": "average-data-wrapper"
  };
  var _hoisted_11$2 = {
    "class": "average-data-value"
  };
  var _hoisted_12 = {
    "class": "average-data-axis"
  };
  var _hoisted_13 = {
    "class": "text"
  };

  vue.popScopeId();

  var render$9 = /*#__PURE__*/_withId$7(function (_ctx, _cache, $props, $setup, $data, $options) {
    var _component_VueEcharts = vue.resolveComponent("VueEcharts");

    var _component_count_to = vue.resolveComponent("count-to");

    return vue.openBlock(), vue.createBlock("div", _hoisted_1$6, [vue.createVNode("div", _hoisted_2$5, [vue.createVNode("div", _hoisted_3$4, [vue.createVNode(_component_VueEcharts, {
      options: $setup.options
    }, null, 8
    /* PROPS */
    , ["options"])])]), vue.createVNode("div", _hoisted_4$2, [vue.createVNode("div", _hoisted_5$2, [_hoisted_6$2, vue.createVNode("div", _hoisted_7$2, [vue.createVNode("div", _hoisted_8$2, [vue.createVNode(_component_count_to, {
      startVal: $setup.startNum,
      endVal: $setup.num,
      duration: 1000
    }, null, 8
    /* PROPS */
    , ["startVal", "endVal"]), _hoisted_9$2])])]), vue.createVNode("div", _hoisted_10$2, [(vue.openBlock(true), vue.createBlock(vue.Fragment, null, vue.renderList($setup.refData, function (item, index) {
      return vue.openBlock(), vue.createBlock("div", {
        "class": "average-data",
        key: index
      }, [vue.createVNode("div", _hoisted_11$2, [vue.createVNode(_component_count_to, {
        startVal: item.startValue,
        endVal: item.value,
        duration: 1000
      }, null, 8
      /* PROPS */
      , ["startVal", "endVal"])]), vue.createVNode("div", _hoisted_12, [vue.createVNode("div", {
        "class": "point",
        style: {
          background: item.color
        }
      }, null, 4
      /* STYLE */
      ), vue.createVNode("div", _hoisted_13, vue.toDisplayString(item.name), 1
      /* TEXT */
      )])]);
    }), 128
    /* KEYED_FRAGMENT */
    ))])])]);
  });

  var css_248z$8 = ".total-device[data-v-6ca3fa45] {\n  display: flex;\n  width: 100%;\n  height: 100%;\n  background: #2b2c2e;\n}\n.total-device[data-v-6ca3fa45] .total-device-left {\n  width: 30%;\n  height: 100%;\n}\n.total-device[data-v-6ca3fa45] .total-device-left #total-device-chart {\n  width: 100%;\n  height: 100%;\n}\n.total-device[data-v-6ca3fa45] .total-device-right {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 40px 10px 40px 0;\n}\n.total-device[data-v-6ca3fa45] .total-device-right .title-wrapper {\n  display: flex;\n  align-items: center;\n}\n.total-device[data-v-6ca3fa45] .total-device-right .title-wrapper .total-device-right-left .title {\n  font-size: 32px;\n}\n.total-device[data-v-6ca3fa45] .total-device-right .title-wrapper .total-device-right-left .sub-title {\n  font-size: 16px;\n  margin-top: 10px;\n}\n.total-device[data-v-6ca3fa45] .total-device-right .title-wrapper .total-device-right-right {\n  flex: 1;\n  margin-left: 40px;\n  font-weight: bold;\n}\n.total-device[data-v-6ca3fa45] .total-device-right .title-wrapper .total-device-right-right .age {\n  font-size: 56px;\n  font-family: DIN;\n}\n.total-device[data-v-6ca3fa45] .total-device-right .title-wrapper .total-device-right-right .age .age-unit {\n  font-size: 20px;\n}\n.total-device[data-v-6ca3fa45] .total-device-right .average-data-wrapper {\n  display: flex;\n}\n.total-device[data-v-6ca3fa45] .total-device-right .average-data-wrapper .average-data {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: 30px;\n  font-weight: bolder;\n}\n.total-device[data-v-6ca3fa45] .total-device-right .average-data-wrapper .average-data .average-data-value {\n  width: 100%;\n}\n.total-device[data-v-6ca3fa45] .total-device-right .average-data-wrapper .average-data .average-data-axis {\n  display: flex;\n  align-items: center;\n  width: 100%;\n  margin-top: 5px;\n}\n.total-device[data-v-6ca3fa45] .total-device-right .average-data-wrapper .average-data .average-data-axis .point {\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n}\n.total-device[data-v-6ca3fa45] .total-device-right .average-data-wrapper .average-data .average-data-axis .text {\n  margin-left: 10px;\n  font-size: 16px;\n}";
  styleInject(css_248z$8);

  script$9.render = render$9;
  script$9.__scopeId = "data-v-6ca3fa45";
  script$9.__file = "src/components/TotalDevice/TotalDevice.vue";

  function TotalDevice (Vue) {
    Vue.component(script$9.name, script$9);
  }

  var script$a = {
    name: 'TotalGender',
    props: {
      data: Array
    },
    setup: function setup(props) {
      var startMale = vue.ref(0);
      var endMale = vue.ref(0);
      var startFemale = vue.ref(0);
      var endFemale = vue.ref(0);

      var update = function update(newData) {
        startMale.value = endMale.value;
        endMale.value = newData[0].value;
        startFemale.value = endFemale.value;
        endFemale.value = newData[1].value;
      };

      vue.onMounted(function () {
        update(props.data);
      });
      vue.watch(function () {
        return props.data;
      }, function (newData) {
        update(newData);
      });
      return {
        startFemale: startFemale,
        startMale: startMale,
        endFemale: endFemale,
        endMale: endMale
      };
    }
  };

  var _withId$8 = /*#__PURE__*/vue.withScopeId("data-v-0be980ca");

  vue.pushScopeId("data-v-0be980ca");

  var _hoisted_1$7 = {
    "class": "total-gender"
  };
  var _hoisted_2$6 = {
    "class": "total-gender-wrapper"
  };

  var _hoisted_3$5 = /*#__PURE__*/vue.createVNode("div", {
    "class": "total-gender-left"
  }, [/*#__PURE__*/vue.createVNode("img", {
    src: "https://www.youbaobao.xyz/datav-res/datav/datav_circle.png"
  })], -1
  /* HOISTED */
  );

  var _hoisted_4$3 = {
    "class": "total-gender-right"
  };

  var _hoisted_5$3 = /*#__PURE__*/vue.createVNode("div", {
    "class": "title"
  }, "男性用户人数", -1
  /* HOISTED */
  );

  var _hoisted_6$3 = /*#__PURE__*/vue.createVNode("div", {
    "class": "sub-title"
  }, "Number of male users", -1
  /* HOISTED */
  );

  var _hoisted_7$3 = {
    "class": "age"
  };

  var _hoisted_8$3 = /*#__PURE__*/vue.createVNode("span", {
    "class": "age-unit"
  }, "万人", -1
  /* HOISTED */
  );

  var _hoisted_9$3 = {
    "class": "total-gender-wrapper"
  };

  var _hoisted_10$3 = /*#__PURE__*/vue.createVNode("div", {
    "class": "total-gender-left"
  }, [/*#__PURE__*/vue.createVNode("img", {
    src: "https://www.youbaobao.xyz/datav-res/datav/datav_circle.png"
  })], -1
  /* HOISTED */
  );

  var _hoisted_11$3 = {
    "class": "total-gender-right"
  };

  var _hoisted_12$1 = /*#__PURE__*/vue.createVNode("div", {
    "class": "title"
  }, "女性用户人数", -1
  /* HOISTED */
  );

  var _hoisted_13$1 = /*#__PURE__*/vue.createVNode("div", {
    "class": "sub-title"
  }, "Number of female users", -1
  /* HOISTED */
  );

  var _hoisted_14 = {
    "class": "age"
  };

  var _hoisted_15 = /*#__PURE__*/vue.createVNode("span", {
    "class": "age-unit"
  }, "万人", -1
  /* HOISTED */
  );

  vue.popScopeId();

  var render$a = /*#__PURE__*/_withId$8(function (_ctx, _cache, $props, $setup, $data, $options) {
    var _component_count_to = vue.resolveComponent("count-to");

    return vue.openBlock(), vue.createBlock("div", _hoisted_1$7, [vue.createVNode("div", _hoisted_2$6, [_hoisted_3$5, vue.createVNode("div", _hoisted_4$3, [_hoisted_5$3, _hoisted_6$3, vue.createVNode("div", _hoisted_7$3, [vue.createVNode(_component_count_to, {
      startVal: $setup.startMale,
      endVal: $setup.endMale,
      duration: 1000
    }, null, 8
    /* PROPS */
    , ["startVal", "endVal"]), _hoisted_8$3])])]), vue.createVNode("div", _hoisted_9$3, [_hoisted_10$3, vue.createVNode("div", _hoisted_11$3, [_hoisted_12$1, _hoisted_13$1, vue.createVNode("div", _hoisted_14, [vue.createVNode(_component_count_to, {
      startVal: $setup.startFemale,
      endVal: $setup.endFemale,
      duration: 1000
    }, null, 8
    /* PROPS */
    , ["startVal", "endVal"]), _hoisted_15])])])]);
  });

  var css_248z$9 = ".total-gender[data-v-0be980ca] {\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n  width: 100%;\n  height: 100%;\n  background: #2b2c2e;\n  box-sizing: border-box;\n}\n.total-gender[data-v-0be980ca] .total-gender-wrapper {\n  display: flex;\n}\n.total-gender[data-v-0be980ca] .total-gender-wrapper .total-gender-left img {\n  width: 75px;\n  height: 75px;\n}\n.total-gender[data-v-0be980ca] .total-gender-wrapper .total-gender-right {\n  margin-left: 40px;\n}\n.total-gender[data-v-0be980ca] .total-gender-wrapper .total-gender-right .title {\n  font-size: 32px;\n}\n.total-gender[data-v-0be980ca] .total-gender-wrapper .total-gender-right .sub-title {\n  font-size: 16px;\n  margin-top: 10px;\n}\n.total-gender[data-v-0be980ca] .total-gender-wrapper .total-gender-right .age {\n  font-size: 49px;\n  font-family: DIN;\n  font-weight: bold;\n  margin-top: 10px;\n}\n.total-gender[data-v-0be980ca] .total-gender-wrapper .total-gender-right .age .age-unit {\n  font-size: 20px;\n}";
  styleInject(css_248z$9);

  script$a.render = render$a;
  script$a.__scopeId = "data-v-0be980ca";
  script$a.__file = "src/components/TotalGender/TotalGender.vue";

  function TotalGender (Vue) {
    Vue.component(script$a.name, script$a);
  }

  var colors = ['rgb(209,248,139)', 'rgb(115,201,245)', 'rgb(124,136,146)'];
  var script$b = {
    name: 'TotalRider',
    props: {
      data: Object
    },
    setup: function setup(props) {
      var task;
      var currentChart = 0;
      var options = vue.ref({});

      var update = function update() {
        function createOption() {
          var _props$data = props.data,
              axisX = _props$data.axisX,
              orderData = _props$data.orderData,
              rateData = _props$data.rateData;
          var axisData = axisX;
          var legendData = [];
          var data1 = [];
          var data2 = [];

          if (currentChart === 0) {
            legendData = [orderData.legend1, orderData.legend2];
            data1 = orderData.data1;
            data2 = orderData.data2;
          } else {
            legendData = [rateData.legend1, rateData.legend2];
            data1 = rateData.data1;
            data2 = rateData.data2;
          }

          return {
            color: colors,
            tooltip: {
              trigger: 'none',
              axisPointer: {
                type: 'cross'
              }
            },
            legend: {
              top: 20,
              right: 40,
              icon: 'rect',
              textStyle: {
                fontSize: 16,
                color: colors[2]
              },
              data: legendData
            },
            grid: {
              top: 60,
              bottom: 30,
              left: 80,
              right: 40
            },
            xAxis: [{
              type: 'category',
              axisTick: {
                show: false
              },
              axisLine: {
                onZero: false,
                lineStyle: {
                  color: colors[2]
                }
              },
              axisLabel: {
                fontSize: 16
              },
              data: axisData.value
            }, {
              type: 'category',
              axisTick: {
                show: false
              },
              axisLine: {
                show: false
              }
            }],
            yAxis: [{
              type: 'value',
              axisTick: {
                show: false
              },
              axisLine: {
                onZero: false,
                lineStyle: {
                  color: colors[2]
                }
              },
              axisLabel: {
                fontSize: 16
              },
              splitLine: {
                lineStyle: {
                  type: 'dotted'
                }
              }
            }],
            series: [{
              name: legendData[0],
              type: 'line',
              xAxisIndex: 1,
              smooth: true,
              lineStyle: {
                width: 2
              },
              symbol: 'none',
              // data: [5, 100, 70, 120, 80, 15, 200, 300, 195, 150, 80, 103]
              data: data1
            }, {
              name: legendData[1],
              type: 'line',
              smooth: true,
              lineStyle: {
                width: 2
              },
              symbol: 'none',
              // data: [10, 50, 80, 4, 90, 50, 105, 160, 111, 54, 108, 50]
              data: data2
            }]
          };
        }

        options.value = createOption();

        if (currentChart === 0) {
          currentChart = 1;
        } else {
          currentChart = 0;
        }
      };

      var stop = vue.watch(function () {
        return props.data;
      }, function () {
        update();
        task = setInterval(function () {
          update();
        }, 5000);
        stop();
      });
      vue.onMounted(function () {
        update();
      });
      vue.onUnmounted(function () {
        return task && clearInterval(task);
      });
      return {
        options: options
      };
    }
  };

  var _withId$9 = /*#__PURE__*/vue.withScopeId("data-v-1920104f");

  vue.pushScopeId("data-v-1920104f");

  var _hoisted_1$8 = {
    "class": "line-chart"
  };

  var _hoisted_2$7 = /*#__PURE__*/vue.createVNode("div", {
    "class": "title-wrapper"
  }, [/*#__PURE__*/vue.createVNode("div", {
    "class": "title"
  }, "数据流量使用概况概况"), /*#__PURE__*/vue.createVNode("div", {
    "class": "sub-title"
  }, "Data traffic usage")], -1
  /* HOISTED */
  );

  var _hoisted_3$6 = {
    id: "total-rider-chart"
  };

  vue.popScopeId();

  var render$b = /*#__PURE__*/_withId$9(function (_ctx, _cache, $props, $setup, $data, $options) {
    var _component_VueEcharts = vue.resolveComponent("VueEcharts");

    return vue.openBlock(), vue.createBlock("div", _hoisted_1$8, [_hoisted_2$7, vue.createVNode("div", _hoisted_3$6, [vue.createVNode(_component_VueEcharts, {
      options: $setup.options
    }, null, 8
    /* PROPS */
    , ["options"])])]);
  });

  var css_248z$a = ".line-chart[data-v-1920104f] {\n  width: 100%;\n  height: 100%;\n  background: #2b2c2e;\n}\n.line-chart[data-v-1920104f] .title-wrapper {\n  padding: 20px 40px 0;\n  box-sizing: border-box;\n}\n.line-chart[data-v-1920104f] .title-wrapper .title {\n  font-size: 32px;\n}\n.line-chart[data-v-1920104f] .title-wrapper .sub-title {\n  font-size: 16px;\n  margin-top: 10px;\n}\n.line-chart[data-v-1920104f] #total-rider-chart {\n  width: 100%;\n  height: 250px;\n}";
  styleInject(css_248z$a);

  script$b.render = render$b;
  script$b.__scopeId = "data-v-1920104f";
  script$b.__file = "src/components/TotalRider/TotalRider.vue";

  function TotalRider (Vue) {
    Vue.component(script$b.name, script$b);
  }

  function dateFilter(v) {
    var m = fillZero(v.getMonth() + 1);
    var d = fillZero(v.getDate());
    return "".concat(v.getFullYear(), "-").concat(m, "-").concat(d);
  }

  function timeFilter(v) {
    var h = fillZero(v.getHours());
    var m = fillZero(v.getMinutes());
    var s = fillZero(v.getSeconds());
    return "".concat(h, ":").concat(m, ":").concat(s);
  }

  function fillZero(v) {
    v = v < 10 ? '0' + v : v;
    return v;
  }

  function clock() {
    var now = new Date();
    var date = vue.ref(dateFilter(now));
    var time = vue.ref(timeFilter(now));
    var task;

    var start = function start() {
      task = setInterval(function () {
        var now = new Date();
        date.value = dateFilter(now);
        time.value = timeFilter(now);
      }, 1000);
    };

    vue.onMounted(start);
    vue.onUnmounted(function () {
      task && clearInterval(task);
    });
    return {
      date: date,
      time: time
    };
  }

  var script$c = {
    name: 'HotCategory',
    props: {
      data: Object
    },
    setup: function setup(props) {
      var _useClock = clock(),
          time = _useClock.time,
          date = _useClock.date;

      var currentChart = 0;
      var options = vue.ref({});

      var update = function update() {
        function createOption() {
          var sourceData = [];
          var _props$data = props.data,
              data1 = _props$data.data1,
              data2 = _props$data.data2;

          if (currentChart === 0) {
            data1.axisX.forEach(function (axis, index) {
              sourceData.push([axis, data1.data1[index], data1.data2[index]]);
            });
          } else {
            data2.axisX.forEach(function (axis, index) {
              sourceData.push([axis, data2.data1[index], data2.data2[index]]);
            });
          }

          var source = [['指标', '国内', '海外']].concat(sourceData);
          return {
            tooltip: {
              trigger: 'axis',
              axisPointer: {
                type: 'shadow'
              }
            },
            color: ['rgb(209,248,138)', 'rgba(65,65,65,.5)'],
            grid: {
              left: 20,
              right: 0,
              bottom: 30,
              top: 20
            },
            dataset: {
              source: source
            },
            yAxis: {
              type: 'value',
              splitLine: {
                lineStyle: {
                  type: 'dotted'
                }
              },
              axisLine: {
                onZero: false,
                lineStyle: {
                  color: 'rgb(124,136,146)'
                }
              },
              axisLabel: {
                color: 'rgb(98,105,113)',
                fontSize: 16
              },
              axisTick: {
                show: false
              }
            },
            xAxis: {
              type: 'category',
              splitLine: {
                show: false
              },
              axisTick: {
                show: false
              },
              axisLabel: {
                color: 'rgb(98,105,113)',
                fontSize: 16
              },
              axisLine: {
                onZero: false,
                lineStyle: {
                  color: 'rgb(124,136,146)'
                }
              }
            },
            series: [{
              type: 'bar',
              stack: 'total',
              barWidth: 40
            }, {
              type: 'bar',
              stack: 'total'
            }]
          };
        }

        options.value = createOption();
        currentChart === 0 ? currentChart = 1 : currentChart = 0;
      };

      vue.watch(function () {
        return props.data;
      }, function () {
        update();
      });
      vue.onMounted(function () {
        update();
      });
      return {
        time: time,
        date: date,
        options: options
      };
    }
  };

  var _withId$a = /*#__PURE__*/vue.withScopeId("data-v-48a8b9b2");

  vue.pushScopeId("data-v-48a8b9b2");

  var _hoisted_1$9 = {
    "class": "hot-category"
  };
  var _hoisted_2$8 = {
    "class": "hot-category-wrapper"
  };

  var _hoisted_3$7 = /*#__PURE__*/vue.createVNode("div", {
    "class": "hot-category-left"
  }, [/*#__PURE__*/vue.createVNode("div", {
    "class": "title"
  }, "当前热卖品类"), /*#__PURE__*/vue.createVNode("div", {
    "class": "sub-title"
  }, "Hot Categories")], -1
  /* HOISTED */
  );

  var _hoisted_4$4 = {
    "class": "hot-category-right"
  };
  var _hoisted_5$4 = {
    "class": "sub-title"
  };
  var _hoisted_6$4 = {
    id: "hot-category-chart"
  };

  vue.popScopeId();

  var render$c = /*#__PURE__*/_withId$a(function (_ctx, _cache, $props, $setup, $data, $options) {
    var _component_VueEcharts = vue.resolveComponent("VueEcharts");

    return vue.openBlock(), vue.createBlock("div", _hoisted_1$9, [vue.createVNode("div", _hoisted_2$8, [_hoisted_3$7, vue.createVNode("div", _hoisted_4$4, [vue.createVNode("div", _hoisted_5$4, "最后更新时间：" + vue.toDisplayString($setup.date) + " " + vue.toDisplayString($setup.time), 1
    /* TEXT */
    )])]), vue.createVNode("div", _hoisted_6$4, [vue.createVNode(_component_VueEcharts, {
      options: $setup.options
    }, null, 8
    /* PROPS */
    , ["options"])])]);
  });

  var css_248z$b = ".hot-category[data-v-48a8b9b2] {\n  width: 100%;\n  height: 100%;\n  background: #2b2c2e;\n  padding: 20px 40px;\n  box-sizing: border-box;\n}\n.hot-category[data-v-48a8b9b2] .hot-category-wrapper {\n  display: flex;\n}\n.hot-category[data-v-48a8b9b2] .hot-category-wrapper .hot-category-right {\n  flex: 1;\n  text-align: right;\n}\n.hot-category[data-v-48a8b9b2] .hot-category-wrapper .title {\n  font-size: 32px;\n}\n.hot-category[data-v-48a8b9b2] .hot-category-wrapper .sub-title {\n  font-size: 16px;\n  margin-top: 10px;\n}\n.hot-category[data-v-48a8b9b2] #hot-category-chart {\n  height: 220px;\n}";
  styleInject(css_248z$b);

  script$c.render = render$c;
  script$c.__scopeId = "data-v-48a8b9b2";
  script$c.__file = "src/components/HotCategory/HotCategory.vue";

  function HotCategory (Vue) {
    Vue.component(script$c.name, script$c);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }

  var arrayLikeToArray = _arrayLikeToArray;

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return arrayLikeToArray(arr);
  }

  var arrayWithoutHoles = _arrayWithoutHoles;

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
  }

  var iterableToArray = _iterableToArray;

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
  }

  var unsupportedIterableToArray = _unsupportedIterableToArray;

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var nonIterableSpread = _nonIterableSpread;

  function _toConsumableArray(arr) {
    return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
  }

  var toConsumableArray = _toConsumableArray;

  var script$d = {
    name: 'CenterHeader',
    props: {
      data: Object
    },
    setup: function setup(props) {
      var project = vue.ref([]);
      var headerData = vue.ref([]);
      var startPercent = vue.ref(0);

      var update = function update(newdata) {
        project.value = toConsumableArray(props.data.project.value);
        headerData.value = toConsumableArray(props.data.headerData.value);
      };

      vue.onMounted(function () {
        update();
      });
      vue.watch(function () {
        return props.data;
      }, function (newdata) {
        update();
      });
      vue.watch(function () {
        return props.data.project.value.value;
      }, function (nextValue, prevValue) {
        startPercent.value = prevValue;
      });
      return {
        project: project,
        headerData: headerData,
        startPercent: startPercent
      };
    }
  };

  var _withId$b = /*#__PURE__*/vue.withScopeId("data-v-a66e2ce2");

  vue.pushScopeId("data-v-a66e2ce2");

  var _hoisted_1$a = {
    "class": "center-header"
  };
  var _hoisted_2$9 = {
    "class": "center-header-wrapper"
  };
  var _hoisted_3$8 = {
    "class": "center-header-left"
  };
  var _hoisted_4$5 = {
    "class": "bg"
  };
  var _hoisted_5$5 = {
    "class": "center-header-right"
  };
  var _hoisted_6$5 = {
    "class": "title"
  };
  var _hoisted_7$4 = {
    "class": "sub-title"
  };
  var _hoisted_8$4 = {
    "class": "total"
  };
  var _hoisted_9$4 = {
    "class": "project-wrapper"
  };
  var _hoisted_10$4 = {
    "class": "project-img"
  };
  var _hoisted_11$4 = {
    "class": "project-text"
  };
  var _hoisted_12$2 = {
    "class": "project-value"
  };

  vue.popScopeId();

  var render$d = /*#__PURE__*/_withId$b(function (_ctx, _cache, $props, $setup, $data, $options) {
    var _component_count_to = vue.resolveComponent("count-to");

    return vue.openBlock(), vue.createBlock("div", _hoisted_1$a, [vue.createVNode("div", _hoisted_2$9, [(vue.openBlock(true), vue.createBlock(vue.Fragment, null, vue.renderList($setup.headerData, function (item, index) {
      return vue.openBlock(), vue.createBlock("div", {
        "class": "center-header-item",
        key: index
      }, [vue.createVNode("div", _hoisted_3$8, [vue.createVNode("div", _hoisted_4$5, [vue.createVNode("div", {
        "class": "img",
        style: {
          backgroundImage: "url('".concat(item.img, "')")
        }
      }, null, 4
      /* STYLE */
      )])]), vue.createVNode("div", _hoisted_5$5, [vue.createVNode("div", _hoisted_6$5, vue.toDisplayString(item.title), 1
      /* TEXT */
      ), vue.createVNode("div", _hoisted_7$4, vue.toDisplayString(item.subTitle), 1
      /* TEXT */
      ), vue.createVNode("div", _hoisted_8$4, [vue.createVNode(_component_count_to, {
        "start-val": item.startVal,
        "end-val": item.endVal,
        duration: 1000,
        separator: ",",
        autoplay: ""
      }, null, 8
      /* PROPS */
      , ["start-val", "end-val"])])])]);
    }), 128
    /* KEYED_FRAGMENT */
    ))]), vue.createVNode("div", _hoisted_9$4, [(vue.openBlock(true), vue.createBlock(vue.Fragment, null, vue.renderList($setup.project, function (item, index) {
      return vue.openBlock(), vue.createBlock("div", {
        "class": "project",
        key: index
      }, [vue.createVNode("div", _hoisted_10$4, [vue.createVNode("img", {
        src: item.img
      }, null, 8
      /* PROPS */
      , ["src"])]), vue.createVNode("div", _hoisted_11$4, vue.toDisplayString(item.title), 1
      /* TEXT */
      ), vue.createVNode("div", _hoisted_12$2, [vue.createVNode(_component_count_to, {
        "start-val": $setup.startPercent,
        "end-val": item.value,
        duration: 1000,
        separator: ",",
        autoplay: "",
        suffix: "%",
        decimals: 1
      }, null, 8
      /* PROPS */
      , ["start-val", "end-val"])])]);
    }), 128
    /* KEYED_FRAGMENT */
    ))])]);
  });

  var css_248z$c = ".center-header[data-v-a66e2ce2] {\n  display: flex;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  background: #424446;\n  padding: 0 40px;\n  box-sizing: border-box;\n}\n.center-header[data-v-a66e2ce2] .center-header-wrapper {\n  display: flex;\n}\n.center-header[data-v-a66e2ce2] .center-header-wrapper .center-header-item {\n  flex: 1;\n  display: flex;\n}\n.center-header[data-v-a66e2ce2] .center-header-wrapper .center-header-item .center-header-left .bg {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 185px;\n  height: 185px;\n  background-repeat: no-repeat;\n  background-size: 100% 100%;\n  background-color: #83a748;\n  border-radius: 50%;\n}\n.center-header[data-v-a66e2ce2] .center-header-wrapper .center-header-item .center-header-left .bg .img {\n  width: 60%;\n  height: 60%;\n  border-radius: 50%;\n  background-repeat: no-repeat;\n  background-size: 100% 100%;\n}\n.center-header[data-v-a66e2ce2] .center-header-wrapper .center-header-item .center-header-right {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin-left: 40px;\n  width: 410px;\n}\n.center-header[data-v-a66e2ce2] .center-header-wrapper .center-header-item .center-header-right .title {\n  font-size: 32px;\n}\n.center-header[data-v-a66e2ce2] .center-header-wrapper .center-header-item .center-header-right .sub-title {\n  font-size: 16px;\n  letter-spacing: 1px;\n  margin-top: 10px;\n}\n.center-header[data-v-a66e2ce2] .center-header-wrapper .center-header-item .center-header-right .total {\n  font-family: DIN;\n  font-size: 56px;\n  font-weight: bolder;\n  letter-spacing: 2px;\n  margin-top: 10px;\n}\n.center-header[data-v-a66e2ce2] .project-wrapper {\n  flex: 1;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n.center-header[data-v-a66e2ce2] .project-wrapper .project {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n.center-header[data-v-a66e2ce2] .project-wrapper .project .project-img {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 90px;\n  height: 90px;\n}\n.center-header[data-v-a66e2ce2] .project-wrapper .project img {\n  width: 100%;\n  height: 100%;\n}\n.center-header[data-v-a66e2ce2] .project-wrapper .project .project-text {\n  font-size: 18px;\n  margin-top: 10px;\n}\n.center-header[data-v-a66e2ce2] .project-wrapper .project .project-value {\n  font-size: 28px;\n  font-weight: 700;\n  margin-top: 5px;\n}";
  styleInject(css_248z$c);

  script$d.render = render$d;
  script$d.__scopeId = "data-v-a66e2ce2";
  script$d.__file = "src/components/CenterHeader/CenterHeader.vue";

  function CenterHeader (Vue) {
    Vue.component(script$d.name, script$d);
  }

  var script$e = {
    name: 'TransformCategory',
    props: {
      data: Array,
      color: {
        type: Array,
        "default": function _default() {
          return ['rgb(140, 160, 173)', 'rgb(80, 80, 80)'];
        }
      }
    },
    setup: function setup(props) {
      var selected = vue.ref(0); //当前被选中的元素的编号默认从第0号元素开始切换

      var hover = vue.ref(-1); //创建hover元素

      var task; //点击事件

      var onClick = function onClick(index) {
        //将鼠标点击区域的索引传入，将selected的值修改成鼠标点击的索引值
        selected.value = index;
      };

      var onMouseIn = function onMouseIn(index) {
        hover.value = index;
      };

      var onMouseOut = function onMouseOut() {
        hover.value = -1;
      };

      var update = function update() {
        task && clearInterval(task); //线判断task是否存在，存在则清除定时器

        task = setInterval(function () {
          //首先判断selected的值是否大于传入数组的元素个数
          if (selected.value + 1 > props.data.length - 1) {
            //将selected的值置为0
            selected.value = 0;
          } else {
            selected.value += 1;
          }
        }, 2000);
      };

      vue.onMounted(update);
      vue.onUnmounted(function () {
        return task && clearInterval(task);
      });
      return {
        selected: selected,
        onClick: onClick,
        onMouseIn: onMouseIn,
        hover: hover,
        onMouseOut: onMouseOut
      };
    }
  };

  var _withId$c = /*#__PURE__*/vue.withScopeId("data-v-0ce021a5");

  vue.pushScopeId("data-v-0ce021a5");

  var _hoisted_1$b = {
    "class": "country-category"
  };
  var _hoisted_2$a = {
    key: 2
  };

  vue.popScopeId();

  var render$e = /*#__PURE__*/_withId$c(function (_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createBlock("div", _hoisted_1$b, [(vue.openBlock(true), vue.createBlock(vue.Fragment, null, vue.renderList($props.data, function (item, index) {
      return vue.openBlock(), vue.createBlock("div", {
        "class": "category",
        key: item,
        onClick: function onClick($event) {
          return $setup.onClick(index);
        },
        onMouseenter: function onMouseenter($event) {
          return $setup.onMouseIn(index);
        },
        onMouseleave: function onMouseleave($event) {
          return $setup.onMouseOut(index);
        },
        onMousemove: function onMousemove($event) {
          return $setup.onMouseIn(index);
        }
      }, [index === $setup.selected ? (vue.openBlock(), vue.createBlock("div", {
        key: 0,
        "class": "selected",
        style: {
          background: $props.color[0]
        }
      }, vue.toDisplayString(item), 5
      /* TEXT, STYLE */
      )) : index === $setup.hover ? (vue.openBlock(), vue.createBlock("div", {
        key: 1,
        "class": "hovered",
        style: {
          background: $props.color[1]
        }
      }, vue.toDisplayString(item), 5
      /* TEXT, STYLE */
      )) : (vue.openBlock(), vue.createBlock("div", _hoisted_2$a, vue.toDisplayString(item), 1
      /* TEXT */
      ))], 40
      /* PROPS, HYDRATE_EVENTS */
      , ["onClick", "onMouseenter", "onMouseleave", "onMousemove"]);
    }), 128
    /* KEYED_FRAGMENT */
    ))]);
  });

  var css_248z$d = ".country-category[data-v-0ce021a5] {\n  display: flex;\n  width: 100%;\n  height: 100%;\n}\n.country-category[data-v-0ce021a5] .category {\n  flex: 1;\n  background: #353941;\n  font-size: 24px;\n  color: #90a0ae;\n}\n.country-category[data-v-0ce021a5] .category .hovered {\n  background: #505050;\n}\n.country-category[data-v-0ce021a5] .category .selected {\n  background: #8ca0ad;\n  color: #fff;\n}\n.country-category[data-v-0ce021a5] .category div {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n}";
  styleInject(css_248z$d);

  script$e.render = render$e;
  script$e.__scopeId = "data-v-0ce021a5";
  script$e.__file = "src/components/TransformCategory/TransformCategory.vue";

  function TransformCategory (Vue) {
    Vue.component(script$e.name, script$e);
  }

  function useScreen(id) {
    var width = vue.ref(0);
    var height = vue.ref(0);
    var dom;
    vue.onMounted(function () {
      dom = document.getElementById(id); //从dom去拿宽高

      width.value = dom.clientWidth;
      height.value = dom.clientHeight;
    });
    return {
      width: width,
      height: height
    };
  }

  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }

  var _listCacheClear = listCacheClear;

  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */
  function eq(value, other) {
    return value === other || (value !== value && other !== other);
  }

  var eq_1 = eq;

  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq_1(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }

  var _assocIndexOf = assocIndexOf;

  /** Used for built-in method references. */
  var arrayProto$1 = Array.prototype;

  /** Built-in value references. */
  var splice = arrayProto$1.splice;

  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function listCacheDelete(key) {
    var data = this.__data__,
        index = _assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    --this.size;
    return true;
  }

  var _listCacheDelete = listCacheDelete;

  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function listCacheGet$1(key) {
    var data = this.__data__,
        index = _assocIndexOf(data, key);

    return index < 0 ? undefined : data[index][1];
  }

  var _listCacheGet = listCacheGet$1;

  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function listCacheHas(key) {
    return _assocIndexOf(this.__data__, key) > -1;
  }

  var _listCacheHas = listCacheHas;

  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */
  function listCacheSet$1(key, value) {
    var data = this.__data__,
        index = _assocIndexOf(data, key);

    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }

  var _listCacheSet = listCacheSet$1;

  /**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function ListCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `ListCache`.
  ListCache.prototype.clear = _listCacheClear;
  ListCache.prototype['delete'] = _listCacheDelete;
  ListCache.prototype.get = _listCacheGet;
  ListCache.prototype.has = _listCacheHas;
  ListCache.prototype.set = _listCacheSet;

  var _ListCache = ListCache;

  /**
   * Removes all key-value entries from the stack.
   *
   * @private
   * @name clear
   * @memberOf Stack
   */
  function stackClear() {
    this.__data__ = new _ListCache;
    this.size = 0;
  }

  var _stackClear = stackClear;

  /**
   * Removes `key` and its value from the stack.
   *
   * @private
   * @name delete
   * @memberOf Stack
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function stackDelete(key) {
    var data = this.__data__,
        result = data['delete'](key);

    this.size = data.size;
    return result;
  }

  var _stackDelete = stackDelete;

  /**
   * Gets the stack value for `key`.
   *
   * @private
   * @name get
   * @memberOf Stack
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function stackGet(key) {
    return this.__data__.get(key);
  }

  var _stackGet = stackGet;

  /**
   * Checks if a stack value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Stack
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function stackHas(key) {
    return this.__data__.has(key);
  }

  var _stackHas = stackHas;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  var _freeGlobal = freeGlobal;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = _freeGlobal || freeSelf || Function('return this')();

  var _root = root;

  /** Built-in value references. */
  var Symbol$1 = _root.Symbol;

  var _Symbol = Symbol$1;

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString = objectProto.toString;

  /** Built-in value references. */
  var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */
  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag),
        tag = value[symToStringTag];

    try {
      value[symToStringTag] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  }

  var _getRawTag = getRawTag;

  /** Used for built-in method references. */
  var objectProto$1 = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString$1 = objectProto$1.toString;

  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */
  function objectToString(value) {
    return nativeObjectToString$1.call(value);
  }

  var _objectToString = objectToString;

  /** `Object#toString` result references. */
  var nullTag = '[object Null]',
      undefinedTag = '[object Undefined]';

  /** Built-in value references. */
  var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;

  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }
    return (symToStringTag$1 && symToStringTag$1 in Object(value))
      ? _getRawTag(value)
      : _objectToString(value);
  }

  var _baseGetTag = baseGetTag;

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject$d(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }

  var isObject_1$1 = isObject$d;

  /** `Object#toString` result references. */
  var asyncTag = '[object AsyncFunction]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      proxyTag = '[object Proxy]';

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction$4(value) {
    if (!isObject_1$1(value)) {
      return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = _baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }

  var isFunction_1$1 = isFunction$4;

  /** Used to detect overreaching core-js shims. */
  var coreJsData = _root['__core-js_shared__'];

  var _coreJsData = coreJsData;

  /** Used to detect methods masquerading as native. */
  var maskSrcKey = (function() {
    var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
    return uid ? ('Symbol(src)_1.' + uid) : '';
  }());

  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */
  function isMasked(func) {
    return !!maskSrcKey && (maskSrcKey in func);
  }

  var _isMasked = isMasked;

  /** Used for built-in method references. */
  var funcProto = Function.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString = funcProto.toString;

  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to convert.
   * @returns {string} Returns the source code.
   */
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}
      try {
        return (func + '');
      } catch (e) {}
    }
    return '';
  }

  var _toSource = toSource;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used for built-in method references. */
  var funcProto$1 = Function.prototype,
      objectProto$2 = Object.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString$1 = funcProto$1.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty$1 = objectProto$2.hasOwnProperty;

  /** Used to detect if a method is native. */
  var reIsNative = RegExp('^' +
    funcToString$1.call(hasOwnProperty$1).replace(reRegExpChar, '\\$&')
    .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
  );

  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */
  function baseIsNative(value) {
    if (!isObject_1$1(value) || _isMasked(value)) {
      return false;
    }
    var pattern = isFunction_1$1(value) ? reIsNative : reIsHostCtor;
    return pattern.test(_toSource(value));
  }

  var _baseIsNative = baseIsNative;

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  var _getValue = getValue;

  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */
  function getNative(object, key) {
    var value = _getValue(object, key);
    return _baseIsNative(value) ? value : undefined;
  }

  var _getNative = getNative;

  /* Built-in method references that are verified to be native. */
  var Map = _getNative(_root, 'Map');

  var _Map = Map;

  /* Built-in method references that are verified to be native. */
  var nativeCreate = _getNative(Object, 'create');

  var _nativeCreate = nativeCreate;

  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */
  function hashClear() {
    this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
    this.size = 0;
  }

  var _hashClear = hashClear;

  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }

  var _hashDelete = hashDelete;

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used for built-in method references. */
  var objectProto$3 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$2 = objectProto$3.hasOwnProperty;

  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function hashGet(key) {
    var data = this.__data__;
    if (_nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty$2.call(data, key) ? data[key] : undefined;
  }

  var _hashGet = hashGet;

  /** Used for built-in method references. */
  var objectProto$4 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$3 = objectProto$4.hasOwnProperty;

  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function hashHas(key) {
    var data = this.__data__;
    return _nativeCreate ? (data[key] !== undefined) : hasOwnProperty$3.call(data, key);
  }

  var _hashHas = hashHas;

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */
  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = (_nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
    return this;
  }

  var _hashSet = hashSet;

  /**
   * Creates a hash object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Hash(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `Hash`.
  Hash.prototype.clear = _hashClear;
  Hash.prototype['delete'] = _hashDelete;
  Hash.prototype.get = _hashGet;
  Hash.prototype.has = _hashHas;
  Hash.prototype.set = _hashSet;

  var _Hash = Hash;

  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      'hash': new _Hash,
      'map': new (_Map || _ListCache),
      'string': new _Hash
    };
  }

  var _mapCacheClear = mapCacheClear;

  /**
   * Checks if `value` is suitable for use as unique object key.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
   */
  function isKeyable(value) {
    var type = typeof value;
    return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
      ? (value !== '__proto__')
      : (value === null);
  }

  var _isKeyable = isKeyable;

  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */
  function getMapData(map, key) {
    var data = map.__data__;
    return _isKeyable(key)
      ? data[typeof key == 'string' ? 'string' : 'hash']
      : data.map;
  }

  var _getMapData = getMapData;

  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function mapCacheDelete(key) {
    var result = _getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }

  var _mapCacheDelete = mapCacheDelete;

  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function mapCacheGet(key) {
    return _getMapData(this, key).get(key);
  }

  var _mapCacheGet = mapCacheGet;

  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function mapCacheHas(key) {
    return _getMapData(this, key).has(key);
  }

  var _mapCacheHas = mapCacheHas;

  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */
  function mapCacheSet(key, value) {
    var data = _getMapData(this, key),
        size = data.size;

    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }

  var _mapCacheSet = mapCacheSet;

  /**
   * Creates a map cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function MapCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `MapCache`.
  MapCache.prototype.clear = _mapCacheClear;
  MapCache.prototype['delete'] = _mapCacheDelete;
  MapCache.prototype.get = _mapCacheGet;
  MapCache.prototype.has = _mapCacheHas;
  MapCache.prototype.set = _mapCacheSet;

  var _MapCache = MapCache;

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /**
   * Sets the stack `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Stack
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the stack cache instance.
   */
  function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof _ListCache) {
      var pairs = data.__data__;
      if (!_Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new _MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
  }

  var _stackSet = stackSet;

  /**
   * Creates a stack cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Stack(entries) {
    var data = this.__data__ = new _ListCache(entries);
    this.size = data.size;
  }

  // Add methods to `Stack`.
  Stack.prototype.clear = _stackClear;
  Stack.prototype['delete'] = _stackDelete;
  Stack.prototype.get = _stackGet;
  Stack.prototype.has = _stackHas;
  Stack.prototype.set = _stackSet;

  var _Stack = Stack;

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  var _arrayEach = arrayEach;

  var defineProperty = (function() {
    try {
      var func = _getNative(Object, 'defineProperty');
      func({}, '', {});
      return func;
    } catch (e) {}
  }());

  var _defineProperty = defineProperty;

  /**
   * The base implementation of `assignValue` and `assignMergeValue` without
   * value checks.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function baseAssignValue(object, key, value) {
    if (key == '__proto__' && _defineProperty) {
      _defineProperty(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
      });
    } else {
      object[key] = value;
    }
  }

  var _baseAssignValue = baseAssignValue;

  /** Used for built-in method references. */
  var objectProto$5 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$4 = objectProto$5.hasOwnProperty;

  /**
   * Assigns `value` to `key` of `object` if the existing value is not equivalent
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty$4.call(object, key) && eq_1(objValue, value)) ||
        (value === undefined && !(key in object))) {
      _baseAssignValue(object, key, value);
    }
  }

  var _assignValue = assignValue;

  /**
   * Copies properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy properties from.
   * @param {Array} props The property identifiers to copy.
   * @param {Object} [object={}] The object to copy properties to.
   * @param {Function} [customizer] The function to customize copied values.
   * @returns {Object} Returns `object`.
   */
  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});

    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];

      var newValue = customizer
        ? customizer(object[key], source[key], key, object, source)
        : undefined;

      if (newValue === undefined) {
        newValue = source[key];
      }
      if (isNew) {
        _baseAssignValue(object, key, newValue);
      } else {
        _assignValue(object, key, newValue);
      }
    }
    return object;
  }

  var _copyObject = copyObject;

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  var _baseTimes = baseTimes;

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return value != null && typeof value == 'object';
  }

  var isObjectLike_1 = isObjectLike;

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]';

  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */
  function baseIsArguments(value) {
    return isObjectLike_1(value) && _baseGetTag(value) == argsTag;
  }

  var _baseIsArguments = baseIsArguments;

  /** Used for built-in method references. */
  var objectProto$6 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$5 = objectProto$6.hasOwnProperty;

  /** Built-in value references. */
  var propertyIsEnumerable = objectProto$6.propertyIsEnumerable;

  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  var isArguments = _baseIsArguments(function() { return arguments; }()) ? _baseIsArguments : function(value) {
    return isObjectLike_1(value) && hasOwnProperty$5.call(value, 'callee') &&
      !propertyIsEnumerable.call(value, 'callee');
  };

  var isArguments_1 = isArguments;

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray$7 = Array.isArray;

  var isArray_1$1 = isArray$7;

  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */
  function stubFalse() {
    return false;
  }

  var stubFalse_1 = stubFalse;

  var isBuffer_1 = createCommonjsModule(function (module, exports) {
  /** Detect free variable `exports`. */
  var freeExports =  exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Built-in value references. */
  var Buffer = moduleExports ? _root.Buffer : undefined;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

  /**
   * Checks if `value` is a buffer.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
   * @example
   *
   * _.isBuffer(new Buffer(2));
   * // => true
   *
   * _.isBuffer(new Uint8Array(2));
   * // => false
   */
  var isBuffer = nativeIsBuffer || stubFalse_1;

  module.exports = isBuffer;
  });

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER$1 = 9007199254740991;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER$1 : length;

    return !!length &&
      (type == 'number' ||
        (type != 'symbol' && reIsUint.test(value))) &&
          (value > -1 && value % 1 == 0 && value < length);
  }

  var _isIndex = isIndex;

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER$2 = 9007199254740991;

  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */
  function isLength(value) {
    return typeof value == 'number' &&
      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$2;
  }

  var isLength_1 = isLength;

  /** `Object#toString` result references. */
  var argsTag$1 = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag$1 = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag$1] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /**
   * The base implementation of `_.isTypedArray` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   */
  function baseIsTypedArray(value) {
    return isObjectLike_1(value) &&
      isLength_1(value.length) && !!typedArrayTags[_baseGetTag(value)];
  }

  var _baseIsTypedArray = baseIsTypedArray;

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  var _baseUnary = baseUnary;

  var _nodeUtil = createCommonjsModule(function (module, exports) {
  /** Detect free variable `exports`. */
  var freeExports =  exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && _freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  module.exports = nodeUtil;
  });

  /* Node.js helper references. */
  var nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray;

  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */
  var isTypedArray$3 = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;

  var isTypedArray_1$1 = isTypedArray$3;

  /** Used for built-in method references. */
  var objectProto$7 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$6 = objectProto$7.hasOwnProperty;

  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray_1$1(value),
        isArg = !isArr && isArguments_1(value),
        isBuff = !isArr && !isArg && isBuffer_1(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray_1$1(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? _baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) {
      if ((inherited || hasOwnProperty$6.call(value, key)) &&
          !(skipIndexes && (
             // Safari 9 has enumerable `arguments.length` in strict mode.
             key == 'length' ||
             // Node.js 0.10 has enumerable non-index properties on buffers.
             (isBuff && (key == 'offset' || key == 'parent')) ||
             // PhantomJS 2 has enumerable non-index properties on typed arrays.
             (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
             // Skip index properties.
             _isIndex(key, length)
          ))) {
        result.push(key);
      }
    }
    return result;
  }

  var _arrayLikeKeys = arrayLikeKeys;

  /** Used for built-in method references. */
  var objectProto$8 = Object.prototype;

  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */
  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$8;

    return value === proto;
  }

  var _isPrototype = isPrototype;

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  var _overArg = overArg;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeKeys = _overArg(Object.keys, Object);

  var _nativeKeys = nativeKeys;

  /** Used for built-in method references. */
  var objectProto$9 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$7 = objectProto$9.hasOwnProperty;

  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeys(object) {
    if (!_isPrototype(object)) {
      return _nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty$7.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }
    return result;
  }

  var _baseKeys = baseKeys;

  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */
  function isArrayLike$4(value) {
    return value != null && isLength_1(value.length) && !isFunction_1$1(value);
  }

  var isArrayLike_1$1 = isArrayLike$4;

  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */
  function keys(object) {
    return isArrayLike_1$1(object) ? _arrayLikeKeys(object) : _baseKeys(object);
  }

  var keys_1 = keys;

  /**
   * The base implementation of `_.assign` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */
  function baseAssign(object, source) {
    return object && _copyObject(source, keys_1(source), object);
  }

  var _baseAssign = baseAssign;

  /**
   * This function is like
   * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * except that it includes inherited enumerable properties.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function nativeKeysIn(object) {
    var result = [];
    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }
    return result;
  }

  var _nativeKeysIn = nativeKeysIn;

  /** Used for built-in method references. */
  var objectProto$a = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$8 = objectProto$a.hasOwnProperty;

  /**
   * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeysIn(object) {
    if (!isObject_1$1(object)) {
      return _nativeKeysIn(object);
    }
    var isProto = _isPrototype(object),
        result = [];

    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty$8.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }

  var _baseKeysIn = baseKeysIn;

  /**
   * Creates an array of the own and inherited enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keysIn(new Foo);
   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
   */
  function keysIn$1(object) {
    return isArrayLike_1$1(object) ? _arrayLikeKeys(object, true) : _baseKeysIn(object);
  }

  var keysIn_1 = keysIn$1;

  /**
   * The base implementation of `_.assignIn` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */
  function baseAssignIn(object, source) {
    return object && _copyObject(source, keysIn_1(source), object);
  }

  var _baseAssignIn = baseAssignIn;

  var _cloneBuffer = createCommonjsModule(function (module, exports) {
  /** Detect free variable `exports`. */
  var freeExports =  exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Built-in value references. */
  var Buffer = moduleExports ? _root.Buffer : undefined,
      allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

  /**
   * Creates a clone of  `buffer`.
   *
   * @private
   * @param {Buffer} buffer The buffer to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Buffer} Returns the cloned buffer.
   */
  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var length = buffer.length,
        result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

    buffer.copy(result);
    return result;
  }

  module.exports = cloneBuffer;
  });

  /**
   * Copies the values of `source` to `array`.
   *
   * @private
   * @param {Array} source The array to copy values from.
   * @param {Array} [array=[]] The array to copy values to.
   * @returns {Array} Returns `array`.
   */
  function copyArray(source, array) {
    var index = -1,
        length = source.length;

    array || (array = Array(length));
    while (++index < length) {
      array[index] = source[index];
    }
    return array;
  }

  var _copyArray = copyArray;

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  var _arrayFilter = arrayFilter;

  /**
   * This method returns a new empty array.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {Array} Returns the new empty array.
   * @example
   *
   * var arrays = _.times(2, _.stubArray);
   *
   * console.log(arrays);
   * // => [[], []]
   *
   * console.log(arrays[0] === arrays[1]);
   * // => false
   */
  function stubArray() {
    return [];
  }

  var stubArray_1 = stubArray;

  /** Used for built-in method references. */
  var objectProto$b = Object.prototype;

  /** Built-in value references. */
  var propertyIsEnumerable$1 = objectProto$b.propertyIsEnumerable;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols = Object.getOwnPropertySymbols;

  /**
   * Creates an array of the own enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbols = !nativeGetSymbols ? stubArray_1 : function(object) {
    if (object == null) {
      return [];
    }
    object = Object(object);
    return _arrayFilter(nativeGetSymbols(object), function(symbol) {
      return propertyIsEnumerable$1.call(object, symbol);
    });
  };

  var _getSymbols = getSymbols;

  /**
   * Copies own symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */
  function copySymbols(source, object) {
    return _copyObject(source, _getSymbols(source), object);
  }

  var _copySymbols = copySymbols;

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  var _arrayPush = arrayPush;

  /** Built-in value references. */
  var getPrototype = _overArg(Object.getPrototypeOf, Object);

  var _getPrototype = getPrototype;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

  /**
   * Creates an array of the own and inherited enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbolsIn = !nativeGetSymbols$1 ? stubArray_1 : function(object) {
    var result = [];
    while (object) {
      _arrayPush(result, _getSymbols(object));
      object = _getPrototype(object);
    }
    return result;
  };

  var _getSymbolsIn = getSymbolsIn;

  /**
   * Copies own and inherited symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */
  function copySymbolsIn(source, object) {
    return _copyObject(source, _getSymbolsIn(source), object);
  }

  var _copySymbolsIn = copySymbolsIn;

  /**
   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
   * `keysFunc` and `symbolsFunc` to get the enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @param {Function} symbolsFunc The function to get the symbols of `object`.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray_1$1(object) ? result : _arrayPush(result, symbolsFunc(object));
  }

  var _baseGetAllKeys = baseGetAllKeys;

  /**
   * Creates an array of own enumerable property names and symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeys(object) {
    return _baseGetAllKeys(object, keys_1, _getSymbols);
  }

  var _getAllKeys = getAllKeys;

  /**
   * Creates an array of own and inherited enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeysIn(object) {
    return _baseGetAllKeys(object, keysIn_1, _getSymbolsIn);
  }

  var _getAllKeysIn = getAllKeysIn;

  /* Built-in method references that are verified to be native. */
  var DataView = _getNative(_root, 'DataView');

  var _DataView = DataView;

  /* Built-in method references that are verified to be native. */
  var Promise$1 = _getNative(_root, 'Promise');

  var _Promise = Promise$1;

  /* Built-in method references that are verified to be native. */
  var Set = _getNative(_root, 'Set');

  var _Set = Set;

  /* Built-in method references that are verified to be native. */
  var WeakMap = _getNative(_root, 'WeakMap');

  var _WeakMap = WeakMap;

  /** `Object#toString` result references. */
  var mapTag$1 = '[object Map]',
      objectTag$1 = '[object Object]',
      promiseTag = '[object Promise]',
      setTag$1 = '[object Set]',
      weakMapTag$1 = '[object WeakMap]';

  var dataViewTag$1 = '[object DataView]';

  /** Used to detect maps, sets, and weakmaps. */
  var dataViewCtorString = _toSource(_DataView),
      mapCtorString = _toSource(_Map),
      promiseCtorString = _toSource(_Promise),
      setCtorString = _toSource(_Set),
      weakMapCtorString = _toSource(_WeakMap);

  /**
   * Gets the `toStringTag` of `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  var getTag = _baseGetTag;

  // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
  if ((_DataView && getTag(new _DataView(new ArrayBuffer(1))) != dataViewTag$1) ||
      (_Map && getTag(new _Map) != mapTag$1) ||
      (_Promise && getTag(_Promise.resolve()) != promiseTag) ||
      (_Set && getTag(new _Set) != setTag$1) ||
      (_WeakMap && getTag(new _WeakMap) != weakMapTag$1)) {
    getTag = function(value) {
      var result = _baseGetTag(value),
          Ctor = result == objectTag$1 ? value.constructor : undefined,
          ctorString = Ctor ? _toSource(Ctor) : '';

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString: return dataViewTag$1;
          case mapCtorString: return mapTag$1;
          case promiseCtorString: return promiseTag;
          case setCtorString: return setTag$1;
          case weakMapCtorString: return weakMapTag$1;
        }
      }
      return result;
    };
  }

  var _getTag = getTag;

  /** Used for built-in method references. */
  var objectProto$c = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$9 = objectProto$c.hasOwnProperty;

  /**
   * Initializes an array clone.
   *
   * @private
   * @param {Array} array The array to clone.
   * @returns {Array} Returns the initialized clone.
   */
  function initCloneArray(array) {
    var length = array.length,
        result = new array.constructor(length);

    // Add properties assigned by `RegExp#exec`.
    if (length && typeof array[0] == 'string' && hasOwnProperty$9.call(array, 'index')) {
      result.index = array.index;
      result.input = array.input;
    }
    return result;
  }

  var _initCloneArray = initCloneArray;

  /** Built-in value references. */
  var Uint8Array$1 = _root.Uint8Array;

  var _Uint8Array = Uint8Array$1;

  /**
   * Creates a clone of `arrayBuffer`.
   *
   * @private
   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
   * @returns {ArrayBuffer} Returns the cloned array buffer.
   */
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new _Uint8Array(result).set(new _Uint8Array(arrayBuffer));
    return result;
  }

  var _cloneArrayBuffer = cloneArrayBuffer;

  /**
   * Creates a clone of `dataView`.
   *
   * @private
   * @param {Object} dataView The data view to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned data view.
   */
  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? _cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }

  var _cloneDataView = cloneDataView;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /**
   * Creates a clone of `regexp`.
   *
   * @private
   * @param {Object} regexp The regexp to clone.
   * @returns {Object} Returns the cloned regexp.
   */
  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }

  var _cloneRegExp = cloneRegExp;

  /** Used to convert symbols to primitives and strings. */
  var symbolProto = _Symbol ? _Symbol.prototype : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  /**
   * Creates a clone of the `symbol` object.
   *
   * @private
   * @param {Object} symbol The symbol object to clone.
   * @returns {Object} Returns the cloned symbol object.
   */
  function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
  }

  var _cloneSymbol = cloneSymbol;

  /**
   * Creates a clone of `typedArray`.
   *
   * @private
   * @param {Object} typedArray The typed array to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned typed array.
   */
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? _cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }

  var _cloneTypedArray = cloneTypedArray;

  /** `Object#toString` result references. */
  var boolTag$1 = '[object Boolean]',
      dateTag$1 = '[object Date]',
      mapTag$2 = '[object Map]',
      numberTag$1 = '[object Number]',
      regexpTag$1 = '[object RegExp]',
      setTag$2 = '[object Set]',
      stringTag$1 = '[object String]',
      symbolTag = '[object Symbol]';

  var arrayBufferTag$1 = '[object ArrayBuffer]',
      dataViewTag$2 = '[object DataView]',
      float32Tag$1 = '[object Float32Array]',
      float64Tag$1 = '[object Float64Array]',
      int8Tag$1 = '[object Int8Array]',
      int16Tag$1 = '[object Int16Array]',
      int32Tag$1 = '[object Int32Array]',
      uint8Tag$1 = '[object Uint8Array]',
      uint8ClampedTag$1 = '[object Uint8ClampedArray]',
      uint16Tag$1 = '[object Uint16Array]',
      uint32Tag$1 = '[object Uint32Array]';

  /**
   * Initializes an object clone based on its `toStringTag`.
   *
   * **Note:** This function only supports cloning values with tags of
   * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
   *
   * @private
   * @param {Object} object The object to clone.
   * @param {string} tag The `toStringTag` of the object to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;
    switch (tag) {
      case arrayBufferTag$1:
        return _cloneArrayBuffer(object);

      case boolTag$1:
      case dateTag$1:
        return new Ctor(+object);

      case dataViewTag$2:
        return _cloneDataView(object, isDeep);

      case float32Tag$1: case float64Tag$1:
      case int8Tag$1: case int16Tag$1: case int32Tag$1:
      case uint8Tag$1: case uint8ClampedTag$1: case uint16Tag$1: case uint32Tag$1:
        return _cloneTypedArray(object, isDeep);

      case mapTag$2:
        return new Ctor;

      case numberTag$1:
      case stringTag$1:
        return new Ctor(object);

      case regexpTag$1:
        return _cloneRegExp(object);

      case setTag$2:
        return new Ctor;

      case symbolTag:
        return _cloneSymbol(object);
    }
  }

  var _initCloneByTag = initCloneByTag;

  /** Built-in value references. */
  var objectCreate = Object.create;

  /**
   * The base implementation of `_.create` without support for assigning
   * properties to the created object.
   *
   * @private
   * @param {Object} proto The object to inherit from.
   * @returns {Object} Returns the new object.
   */
  var baseCreate = (function() {
    function object() {}
    return function(proto) {
      if (!isObject_1$1(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object.prototype = proto;
      var result = new object;
      object.prototype = undefined;
      return result;
    };
  }());

  var _baseCreate = baseCreate;

  /**
   * Initializes an object clone.
   *
   * @private
   * @param {Object} object The object to clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneObject(object) {
    return (typeof object.constructor == 'function' && !_isPrototype(object))
      ? _baseCreate(_getPrototype(object))
      : {};
  }

  var _initCloneObject = initCloneObject;

  /** `Object#toString` result references. */
  var mapTag$3 = '[object Map]';

  /**
   * The base implementation of `_.isMap` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   */
  function baseIsMap(value) {
    return isObjectLike_1(value) && _getTag(value) == mapTag$3;
  }

  var _baseIsMap = baseIsMap;

  /* Node.js helper references. */
  var nodeIsMap = _nodeUtil && _nodeUtil.isMap;

  /**
   * Checks if `value` is classified as a `Map` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   * @example
   *
   * _.isMap(new Map);
   * // => true
   *
   * _.isMap(new WeakMap);
   * // => false
   */
  var isMap = nodeIsMap ? _baseUnary(nodeIsMap) : _baseIsMap;

  var isMap_1 = isMap;

  /** `Object#toString` result references. */
  var setTag$3 = '[object Set]';

  /**
   * The base implementation of `_.isSet` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   */
  function baseIsSet(value) {
    return isObjectLike_1(value) && _getTag(value) == setTag$3;
  }

  var _baseIsSet = baseIsSet;

  /* Node.js helper references. */
  var nodeIsSet = _nodeUtil && _nodeUtil.isSet;

  /**
   * Checks if `value` is classified as a `Set` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   * @example
   *
   * _.isSet(new Set);
   * // => true
   *
   * _.isSet(new WeakSet);
   * // => false
   */
  var isSet = nodeIsSet ? _baseUnary(nodeIsSet) : _baseIsSet;

  var isSet_1 = isSet;

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** `Object#toString` result references. */
  var argsTag$2 = '[object Arguments]',
      arrayTag$1 = '[object Array]',
      boolTag$2 = '[object Boolean]',
      dateTag$2 = '[object Date]',
      errorTag$1 = '[object Error]',
      funcTag$2 = '[object Function]',
      genTag$1 = '[object GeneratorFunction]',
      mapTag$4 = '[object Map]',
      numberTag$2 = '[object Number]',
      objectTag$2 = '[object Object]',
      regexpTag$2 = '[object RegExp]',
      setTag$4 = '[object Set]',
      stringTag$2 = '[object String]',
      symbolTag$1 = '[object Symbol]',
      weakMapTag$2 = '[object WeakMap]';

  var arrayBufferTag$2 = '[object ArrayBuffer]',
      dataViewTag$3 = '[object DataView]',
      float32Tag$2 = '[object Float32Array]',
      float64Tag$2 = '[object Float64Array]',
      int8Tag$2 = '[object Int8Array]',
      int16Tag$2 = '[object Int16Array]',
      int32Tag$2 = '[object Int32Array]',
      uint8Tag$2 = '[object Uint8Array]',
      uint8ClampedTag$2 = '[object Uint8ClampedArray]',
      uint16Tag$2 = '[object Uint16Array]',
      uint32Tag$2 = '[object Uint32Array]';

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag$2] = cloneableTags[arrayTag$1] =
  cloneableTags[arrayBufferTag$2] = cloneableTags[dataViewTag$3] =
  cloneableTags[boolTag$2] = cloneableTags[dateTag$2] =
  cloneableTags[float32Tag$2] = cloneableTags[float64Tag$2] =
  cloneableTags[int8Tag$2] = cloneableTags[int16Tag$2] =
  cloneableTags[int32Tag$2] = cloneableTags[mapTag$4] =
  cloneableTags[numberTag$2] = cloneableTags[objectTag$2] =
  cloneableTags[regexpTag$2] = cloneableTags[setTag$4] =
  cloneableTags[stringTag$2] = cloneableTags[symbolTag$1] =
  cloneableTags[uint8Tag$2] = cloneableTags[uint8ClampedTag$2] =
  cloneableTags[uint16Tag$2] = cloneableTags[uint32Tag$2] = true;
  cloneableTags[errorTag$1] = cloneableTags[funcTag$2] =
  cloneableTags[weakMapTag$2] = false;

  /**
   * The base implementation of `_.clone` and `_.cloneDeep` which tracks
   * traversed objects.
   *
   * @private
   * @param {*} value The value to clone.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Deep clone
   *  2 - Flatten inherited properties
   *  4 - Clone symbols
   * @param {Function} [customizer] The function to customize cloning.
   * @param {string} [key] The key of `value`.
   * @param {Object} [object] The parent object of `value`.
   * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
   * @returns {*} Returns the cloned value.
   */
  function baseClone(value, bitmask, customizer, key, object, stack) {
    var result,
        isDeep = bitmask & CLONE_DEEP_FLAG,
        isFlat = bitmask & CLONE_FLAT_FLAG,
        isFull = bitmask & CLONE_SYMBOLS_FLAG;

    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }
    if (result !== undefined) {
      return result;
    }
    if (!isObject_1$1(value)) {
      return value;
    }
    var isArr = isArray_1$1(value);
    if (isArr) {
      result = _initCloneArray(value);
      if (!isDeep) {
        return _copyArray(value, result);
      }
    } else {
      var tag = _getTag(value),
          isFunc = tag == funcTag$2 || tag == genTag$1;

      if (isBuffer_1(value)) {
        return _cloneBuffer(value, isDeep);
      }
      if (tag == objectTag$2 || tag == argsTag$2 || (isFunc && !object)) {
        result = (isFlat || isFunc) ? {} : _initCloneObject(value);
        if (!isDeep) {
          return isFlat
            ? _copySymbolsIn(value, _baseAssignIn(result, value))
            : _copySymbols(value, _baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }
        result = _initCloneByTag(value, tag, isDeep);
      }
    }
    // Check for circular references and return its corresponding clone.
    stack || (stack = new _Stack);
    var stacked = stack.get(value);
    if (stacked) {
      return stacked;
    }
    stack.set(value, result);

    if (isSet_1(value)) {
      value.forEach(function(subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
      });

      return result;
    }

    if (isMap_1(value)) {
      value.forEach(function(subValue, key) {
        result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });

      return result;
    }

    var keysFunc = isFull
      ? (isFlat ? _getAllKeysIn : _getAllKeys)
      : (isFlat ? keysIn : keys_1);

    var props = isArr ? undefined : keysFunc(value);
    _arrayEach(props || value, function(subValue, key) {
      if (props) {
        key = subValue;
        subValue = value[key];
      }
      // Recursively populate clone (susceptible to call stack limits).
      _assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    return result;
  }

  var _baseClone = baseClone;

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG$1 = 1,
      CLONE_SYMBOLS_FLAG$1 = 4;

  /**
   * This method is like `_.clone` except that it recursively clones `value`.
   *
   * @static
   * @memberOf _
   * @since 1.0.0
   * @category Lang
   * @param {*} value The value to recursively clone.
   * @returns {*} Returns the deep cloned value.
   * @see _.clone
   * @example
   *
   * var objects = [{ 'a': 1 }, { 'b': 2 }];
   *
   * var deep = _.cloneDeep(objects);
   * console.log(deep[0] === objects[0]);
   * // => false
   */
  function cloneDeep(value) {
    return _baseClone(value, CLONE_DEEP_FLAG$1 | CLONE_SYMBOLS_FLAG$1);
  }

  var cloneDeep_1 = cloneDeep;

  /**
   * This method returns the first argument it receives.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'a': 1 };
   *
   * console.log(_.identity(object) === object);
   * // => true
   */
  function identity$1(value) {
    return value;
  }

  var identity_1$1 = identity$1;

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  var _apply = apply;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max;

  /**
   * A specialized version of `baseRest` which transforms the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @param {Function} transform The rest array transform.
   * @returns {Function} Returns the new function.
   */
  function overRest(func, start, transform) {
    start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
    return function() {
      var args = arguments,
          index = -1,
          length = nativeMax(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = transform(array);
      return _apply(func, this, otherArgs);
    };
  }

  var _overRest = overRest;

  /**
   * Creates a function that returns `value`.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {*} value The value to return from the new function.
   * @returns {Function} Returns the new constant function.
   * @example
   *
   * var objects = _.times(2, _.constant({ 'a': 1 }));
   *
   * console.log(objects);
   * // => [{ 'a': 1 }, { 'a': 1 }]
   *
   * console.log(objects[0] === objects[1]);
   * // => true
   */
  function constant$1(value) {
    return function() {
      return value;
    };
  }

  var constant_1 = constant$1;

  /**
   * The base implementation of `setToString` without support for hot loop shorting.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var baseSetToString = !_defineProperty ? identity_1$1 : function(func, string) {
    return _defineProperty(func, 'toString', {
      'configurable': true,
      'enumerable': false,
      'value': constant_1(string),
      'writable': true
    });
  };

  var _baseSetToString = baseSetToString;

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeNow = Date.now;

  /**
   * Creates a function that'll short out and invoke `identity` instead
   * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
   * milliseconds.
   *
   * @private
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new shortable function.
   */
  function shortOut(func) {
    var count = 0,
        lastCalled = 0;

    return function() {
      var stamp = nativeNow(),
          remaining = HOT_SPAN - (stamp - lastCalled);

      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func.apply(undefined, arguments);
    };
  }

  var _shortOut = shortOut;

  /**
   * Sets the `toString` method of `func` to return `string`.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var setToString = _shortOut(_baseSetToString);

  var _setToString = setToString;

  /**
   * The base implementation of `_.rest` which doesn't validate or coerce arguments.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @returns {Function} Returns the new function.
   */
  function baseRest(func, start) {
    return _setToString(_overRest(func, start, identity_1$1), func + '');
  }

  var _baseRest = baseRest;

  /**
   * Checks if the given arguments are from an iteratee call.
   *
   * @private
   * @param {*} value The potential iteratee value argument.
   * @param {*} index The potential iteratee index or key argument.
   * @param {*} object The potential iteratee object argument.
   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
   *  else `false`.
   */
  function isIterateeCall(value, index, object) {
    if (!isObject_1$1(object)) {
      return false;
    }
    var type = typeof index;
    if (type == 'number'
          ? (isArrayLike_1$1(object) && _isIndex(index, object.length))
          : (type == 'string' && index in object)
        ) {
      return eq_1(object[index], value);
    }
    return false;
  }

  var _isIterateeCall = isIterateeCall;

  /**
   * Creates a function like `_.assign`.
   *
   * @private
   * @param {Function} assigner The function to assign values.
   * @returns {Function} Returns the new assigner function.
   */
  function createAssigner(assigner) {
    return _baseRest(function(object, sources) {
      var index = -1,
          length = sources.length,
          customizer = length > 1 ? sources[length - 1] : undefined,
          guard = length > 2 ? sources[2] : undefined;

      customizer = (assigner.length > 3 && typeof customizer == 'function')
        ? (length--, customizer)
        : undefined;

      if (guard && _isIterateeCall(sources[0], sources[1], guard)) {
        customizer = length < 3 ? undefined : customizer;
        length = 1;
      }
      object = Object(object);
      while (++index < length) {
        var source = sources[index];
        if (source) {
          assigner(object, source, index, customizer);
        }
      }
      return object;
    });
  }

  var _createAssigner = createAssigner;

  /** Used for built-in method references. */
  var objectProto$d = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$a = objectProto$d.hasOwnProperty;

  /**
   * Assigns own enumerable string keyed properties of source objects to the
   * destination object. Source objects are applied from left to right.
   * Subsequent sources overwrite property assignments of previous sources.
   *
   * **Note:** This method mutates `object` and is loosely based on
   * [`Object.assign`](https://mdn.io/Object/assign).
   *
   * @static
   * @memberOf _
   * @since 0.10.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @see _.assignIn
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * function Bar() {
   *   this.c = 3;
   * }
   *
   * Foo.prototype.b = 2;
   * Bar.prototype.d = 4;
   *
   * _.assign({ 'a': 0 }, new Foo, new Bar);
   * // => { 'a': 1, 'c': 3 }
   */
  var assign = _createAssigner(function(object, source) {
    if (_isPrototype(source) || isArrayLike_1$1(source)) {
      _copyObject(source, keys_1(source), object);
      return;
    }
    for (var key in source) {
      if (hasOwnProperty$a.call(source, key)) {
        _assignValue(object, key, source[key]);
      }
    }
  });

  var assign_1 = assign;

  var defaultConfig = {
    //标题数据,格式:['a','b','c']
    headerData: [],
    //标题文字样式,格式:[{},{},{}]
    headerStyle: [],
    //标题背景颜色
    headerBackground: 'rgb(90,90,90)',
    //标题高度
    headerHeight: 35,
    //标题是否展示序号
    headerIndex: false,
    //显示序号需要展示的内容
    headerIndexContent: '#',
    //显示序号列标题样式
    headerIndexStyle: {
      width: '50px',
      color: ''
    },
    //数据项，二维数组
    data: [],
    rowNum: 10,
    //行样式
    rowStyle: [],
    //序号列内容样式
    rowIndexStyle: {
      width: '50px'
    },
    //行背景颜色
    rowBg: [],
    //居中方式
    aligns: [],
    //批量更改标题的文字大小
    headerFontSize: 28,
    //批量修改每页内容的文字大小
    rowFontSize: 25,
    //标题文字颜色
    headerColor: '',
    //内容文字颜色
    rowColor: '',
    //移动的位置
    moveNum: 1,
    //动画播放延时时间
    duration: 2000,
    //序号列的数据内容    
    headerIndexData: []
  };
  var script$f = {
    name: 'BaseScrollList',
    props: {
      config: {
        type: Object,
        "default": function _default() {
          return {};
        }
      }
    },
    setup: function setup(props) {
      var id = "base-scroll-list".concat(v4());

      var _useScreen = useScreen(id),
          width = _useScreen.width,
          height = _useScreen.height;

      var headerData = vue.ref([]);
      var headerStyle = vue.ref([]); //合并后的对象

      var actualConfig = vue.ref([]); //用于存放每一列的宽度

      var columnWidth = vue.ref([]); //每页的数据

      var rowsData = vue.ref([]); //真正需要渲染的数据

      var currentRowsData = vue.ref([]); //渲染动画指针指向当前展示的动画元素

      var currentIndex = vue.ref(0); //每行的高度

      var rowHeight = vue.ref([]); //展示数据的行数

      var rowNum = vue.ref(defaultConfig.rowNum); //行样式

      var rowStyle = vue.ref([]); //行背景颜色

      var rowBg = vue.ref([]); //居中方式

      var aligns = vue.ref([]); //行高

      var avgHeight; //动画是否播放

      var isAnimationStart = vue.ref(true);

      var handleHeader = function handleHeader(config) {
        var _headerData = cloneDeep_1(config.headerData);

        var _headerStyle = cloneDeep_1(config.headerStyle);

        var _rowsData = cloneDeep_1(config.data);

        var _rowStyle = cloneDeep_1(config.rowStyle);

        var _aligns = cloneDeep_1(config.aligns); //判断header元素大小是否为空


        if (_headerData.length === 0) {
          return;
        }

        if (config.headerIndex) {
          _headerData.unshift(config.headerIndexContent);

          _headerStyle.unshift(config.headerIndexStyle);

          _rowStyle.unshift(config.rowIndexStyle);

          _rowsData.forEach(function (rows, index) {
            //处理序号列的数据
            if (config.headerIndexData && config.headerIndexData.length > 0 && config.headerIndexData[index]) {
              rows.unshift(config.headerIndexData[index]);
            } else {
              rows.unshift(index + 1);
            }
          });

          _aligns.unshift('center'); //默认序号列居中

        } //动态计算header中每一列的宽度 


        var usedWidth = 0; //获取定义过的宽度

        var usedColumnNum = 0; //获取定义过的宽度列数的个数
        //遍历_headerStyle的每个元素把定义过的宽度综合和列数个数记录下来

        _headerStyle.forEach(function (style) {
          if (style.width) {
            usedWidth += +style.width.replace('px', '');
            usedColumnNum++;
          }
        }); //(总宽度-定义过的宽度综合) / (列数总个数-定义过的列数) = 剩余的宽度除以剩余的列数


        var avgWidth = (width.value - usedWidth) / (_headerData.length - usedColumnNum); //动态定义一个数组，数组的长度和_headerData.length相同

        var _columnWidth = new Array(_headerData.length).fill(avgWidth);

        _headerStyle.forEach(function (style, index) {
          if (style.width) {
            var headerWidth = +style.width.replace('px', '');
            _columnWidth[index] = headerWidth;
          }
        });

        columnWidth.value = _columnWidth;
        headerData.value = _headerData;
        headerStyle.value = _headerStyle;
        var rowNum = config.rowNum;

        if (_rowsData.length >= rowNum && _rowsData.length < rowNum * 2) {
          var newRowData = [].concat(toConsumableArray(_rowsData), toConsumableArray(_rowsData));
          rowsData.value = newRowData.map(function (item, index) {
            return {
              data: item,
              rowIndex: index
            };
          });
        } else {
          rowsData.value = _rowsData.map(function (item, index) {
            return {
              data: item,
              rowIndex: index
            };
          });
        }

        rowStyle.value = _rowStyle;
        aligns.value = _aligns;
      }; //动态计算行数据高度


      var handleRows = function handleRows(config) {
        var headerHeight = config.headerHeight;
        rowNum.value = config.rowNum;
        var unusedHeight = height.value - headerHeight; //如果rowNum的值大于实际数据长度则以实际数据长度为准

        if (rowNum.value > rowsData.value.length) {
          rowNum.value = rowsData.value.length;
        }

        avgHeight = unusedHeight / rowNum.value;
        rowHeight.value = new Array(rowNum.value).fill(avgHeight);

        if (config.rowBg) {
          rowBg.value = config.rowBg;
        }
      }; //过度折叠动画


      var startAnimation = /*#__PURE__*/function () {
        var _ref = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          var _rowHeight$value;

          var config, rowNum, moveNum, duration, totalLength, index, _rowsData, rows, waitTime, isLast;

          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (isAnimationStart) {
                    _context.next = 2;
                    break;
                  }

                  return _context.abrupt("return");

                case 2:
                  config = actualConfig.value; //拿到定制的数据

                  rowNum = config.rowNum, moveNum = config.moveNum, duration = config.duration; //取出data和rowNum

                  totalLength = rowsData.value.length; //判断data的长度

                  if (!(totalLength < rowNum)) {
                    _context.next = 7;
                    break;
                  }

                  return _context.abrupt("return");

                case 7:
                  index = currentIndex.value; //拿到当前动画指针

                  _rowsData = cloneDeep_1(rowsData.value); //深拷贝每页数据
                  //将数据头尾连接  

                  rows = _rowsData.slice(index);
                  rows.push.apply(rows, toConsumableArray(_rowsData.slice(0, index)));
                  currentRowsData.value = rows; //先将所有行的高度还原

                  rowHeight.value = new Array(totalLength).fill(avgHeight);
                  waitTime = 500;

                  if (isAnimationStart) {
                    _context.next = 16;
                    break;
                  }

                  return _context.abrupt("return");

                case 16:
                  _context.next = 18;
                  return new Promise(function (resolve) {
                    return setTimeout(resolve, waitTime);
                  });

                case 18:
                  //将moveNum的行高度设为0
                  (_rowHeight$value = rowHeight.value).splice.apply(_rowHeight$value, [0, moveNum].concat(toConsumableArray(new Array(moveNum).fill(0))));

                  currentIndex.value += moveNum; //是否到达最后一组数据

                  isLast = currentIndex.value - totalLength;

                  if (isLast >= 0) {
                    currentIndex.value = isLast;
                  }

                  if (isAnimationStart) {
                    _context.next = 24;
                    break;
                  }

                  return _context.abrupt("return");

                case 24:
                  _context.next = 26;
                  return new Promise(function (resolve) {
                    return setTimeout(resolve, duration - waitTime);
                  });

                case 26:
                  _context.next = 28;
                  return startAnimation();

                case 28:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function startAnimation() {
          return _ref.apply(this, arguments);
        };
      }(); //停止动画


      var stopAnimation = function stopAnimation() {
        isAnimationStart.value = false;
      };

      var update = function update() {
        stopAnimation(); //将传入的值和默认值进行合并

        var _actualConfig = assign_1(defaultConfig, props.config); //赋值rowsData


        rowsData.value = _actualConfig.data || [];
        handleHeader(_actualConfig);
        handleRows(_actualConfig);
        actualConfig.value = _actualConfig; //展示动画效果

        isAnimationStart.value = true;
        startAnimation();
      };

      vue.watch(function () {
        return props.config;
      }, function () {
        update();
      });
      return {
        id: id,
        headerData: headerData,
        headerStyle: headerStyle,
        actualConfig: actualConfig,
        columnWidth: columnWidth,
        rowsData: rowsData,
        rowHeight: rowHeight,
        rowStyle: rowStyle,
        rowBg: rowBg,
        aligns: aligns,
        currentRowsData: currentRowsData,
        height: height
      };
    }
  };

  function _defineProperty$1(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  var defineProperty$1 = _defineProperty$1;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { defineProperty$1(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  var _withId$d = /*#__PURE__*/vue.withScopeId("data-v-69eed30f");

  var render$f = /*#__PURE__*/_withId$d(function (_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createBlock("div", {
      "class": "base-scroll-list",
      id: $setup.id
    }, [vue.createCommentVNode(" 标题容器 "), vue.createVNode("div", {
      "class": "base-scroll-list-header",
      style: {
        backgroundColor: $setup.actualConfig.headerBackground,
        height: "".concat($setup.actualConfig.headerHeight, "px"),
        fontSize: "".concat($setup.actualConfig.headerFontSize, "px"),
        color: "".concat($setup.actualConfig.headerColor)
      }
    }, [vue.createCommentVNode(" 标题每一列 "), (vue.openBlock(true), vue.createBlock(vue.Fragment, null, vue.renderList($setup.headerData, function (headerItem, i) {
      return vue.openBlock(), vue.createBlock("div", {
        "class": "header-item base-scroll-list-text",
        key: headerItem + i,
        style: _objectSpread({
          width: "".concat($setup.columnWidth[i], "px")
        }, $setup.headerStyle[i]),
        innerHTML: headerItem,
        align: $setup.aligns[i]
      }, null, 12
      /* STYLE, PROPS */
      , ["innerHTML", "align"]);
    }), 128
    /* KEYED_FRAGMENT */
    ))], 4
    /* STYLE */
    ), vue.createCommentVNode(" 内容展示容器 "), vue.createVNode("div", {
      "class": "base-scroll-list-rows-wrapper",
      style: {
        height: "".concat($setup.height - $setup.actualConfig.headerHeight, "px")
      }
    }, [vue.createCommentVNode(" 行内容 "), (vue.openBlock(true), vue.createBlock(vue.Fragment, null, vue.renderList($setup.currentRowsData, function (rowData, index) {
      return vue.openBlock(), vue.createBlock("div", {
        "class": "base-scroll-list-rows",
        key: rowData.rowIndex,
        style: {
          height: "".concat($setup.rowHeight[index], "px"),
          lineHeight: "".concat($setup.rowHeight[index], "px"),
          backgroundColor: rowData.rowIndex % 2 === 0 ? $setup.rowBg[1] : $setup.rowBg[0],
          fontSize: "".concat($setup.actualConfig.rowFontSize, "px"),
          color: "".concat($setup.actualConfig.rowColor)
        }
      }, [vue.createCommentVNode(" 列内容 "), (vue.openBlock(true), vue.createBlock(vue.Fragment, null, vue.renderList(rowData.data, function (colData, colIndex) {
        return vue.openBlock(), vue.createBlock("div", {
          "class": "base-scroll-list-columns base-scroll-list-text",
          key: colData + colIndex,
          style: _objectSpread({
            width: "".concat($setup.columnWidth[colIndex], "px")
          }, $setup.rowStyle[colIndex]),
          innerHTML: colData,
          align: $setup.aligns[colIndex]
        }, null, 12
        /* STYLE, PROPS */
        , ["innerHTML", "align"]);
      }), 128
      /* KEYED_FRAGMENT */
      ))], 4
      /* STYLE */
      );
    }), 128
    /* KEYED_FRAGMENT */
    ))], 4
    /* STYLE */
    )], 8
    /* PROPS */
    , ["id"]);
  });

  var css_248z$e = "@charset \"UTF-8\";\n.base-scroll-list[data-v-69eed30f] {\n  /*宽高设为100% 交给父给容器确定*/\n  width: 100%;\n  height: 100%;\n  /*默认文本样式*/\n}\n.base-scroll-list[data-v-69eed30f] .base-scroll-list-text {\n  /*padding: 0 10px;*/\n  white-space: nowrap;\n  /*文本不换行*/\n  overflow: hidden;\n  /*多出部分隐藏*/\n  text-overflow: ellipsis;\n  /*文本超出部分用省略号代替*/\n  box-sizing: border-box;\n}\n.base-scroll-list[data-v-69eed30f] .base-scroll-list-header {\n  display: flex;\n  /*水平布局*/\n  font-size: 15px;\n  /*字体大小*/\n  align-items: center;\n  /*垂直居中*/\n}\n.base-scroll-list[data-v-69eed30f] .base-scroll-list-rows-wrapper {\n  overflow: hidden;\n  /*超出部分隐藏*/\n  margin-top: 10px;\n}\n.base-scroll-list[data-v-69eed30f] .base-scroll-list-rows-wrapper .base-scroll-list-rows {\n  display: flex;\n  align-items: center;\n  transition: all 0.3s linear;\n}\n.base-scroll-list[data-v-69eed30f] .base-scroll-list-rows-wrapper .base-scroll-list-rows .base-scroll-list-columns {\n  height: 100%;\n}";
  styleInject(css_248z$e);

  script$f.render = render$f;
  script$f.__scopeId = "data-v-69eed30f";
  script$f.__file = "src/components/BaseScrollList/BaseScrollList.vue";

  var script$g = {
    name: 'SalesList',
    props: {
      data: Array
    },
    setup: function setup(props) {
      var config = vue.ref({});

      var update = function update() {
        var data = [];
        var aligns = [];
        var headerIndexData = [];

        for (var i = 0; i < props.data.length; i++) {
          data[i] = [];

          if (i % 2 === 0) {
            headerIndexData[i] = "<div\n                                          style=\"width:100%;\n                                          height:100%;\n                                          display:flex;\n                                          align-items:center;\n                                          background:rgb(40,40,40);\n                                          justify-content:center;\"\n                                          >\n                                            <div\n                                              style=\"width:15px;\n                                              height:15px;\n                                              background:rgb(72,122,72);\n                                              border-radius:50%;\n                                              border:1px solid #fff;\"\n                                            />\n                                        </div>";
          } else {
            headerIndexData[i] = "<div\n                                         style=\"width:100%;\n                                         height:100%;\n                                         display:flex;\n                                         align-items:center;\n                                         background:rgb(40,40,40);\n                                         justify-content:center;\"\n                                        >\n                                          <div \n                                            style=\"width:15px;\n                                            height:15px;\n                                            background:rgb(38,88,104);\n                                            border-radius:50%;\n                                            border:1px solid #fff;\"\n                                          />\n                                        </div>";
          }

          for (var j = 0; j < 5; j++) {
            aligns.push('center');
            var text = '';

            switch (j) {
              case 0:
                text = props.data[i].order;
                break;

              case 1:
                text = props.data[i].shop;
                break;

              case 2:
                text = props.data[i].rider;
                break;

              case 3:
                text = props.data[i].newShop;
                break;

              case 4:
                text = props.data[i].avgOrder;
                break;
            }

            if (j % 2 === 0) {
              data[i].push("<div style=\"color:rgb(178,209,126)\">".concat(text, "</div>"));
            } else {
              data[i].push("<div>".concat(text, "</div>"));
            }
          }
        }

        config.value = {
          data: data,
          //rowStyle,
          headerData: ['当前时间', '当前湿度', '当前亮度', '当前温度', '当前氧含量'],
          //表头内容
          headerFontSize: 20,
          //表头字大小
          headerBackground: 'rgb(80,80,80)',
          //表头背景色
          headerIndexContent: '',
          //表头序号列内容定制
          headerColor: '#fff',
          //表头序号列文本颜色
          //headerIndexStyle:{width:'80px',color:'red'},//表头序号列文字样式定制
          //headerStyle : [{color:'red',width:'150px'}] //表头文字样式
          headerHeight: 55,
          //表头高度
          headerIndex: true,
          rowNum: 11,
          //一次展示多少条数据
          rowBg: ['rgb(40,40,40)', 'rgb(55,55,55)'],
          //内容背景颜色
          rowColor: '#fff',
          //批量更改每页内容的文字颜色
          //rowStyle : [{},{color:'red'}] //列内容样式
          rowFontSize: 24,
          //批量修改每页内容的文字大小
          aligns: aligns,
          //居中方式
          headerIndexData: headerIndexData
        };
      };

      vue.onMounted(function () {
        update();
      });
      vue.watch(function () {
        return props.data;
      }, function () {
        update();
      });
      return {
        config: config
      };
    }
  };

  var _withId$e = /*#__PURE__*/vue.withScopeId("data-v-15f22672");

  vue.pushScopeId("data-v-15f22672");

  var _hoisted_1$c = {
    "class": "SalesList"
  };

  vue.popScopeId();

  var render$g = /*#__PURE__*/_withId$e(function (_ctx, _cache, $props, $setup, $data, $options) {
    var _component_BaseScrollList = vue.resolveComponent("BaseScrollList");

    return vue.openBlock(), vue.createBlock("div", _hoisted_1$c, [vue.createVNode(_component_BaseScrollList, {
      config: $setup.config
    }, null, 8
    /* PROPS */
    , ["config"])]);
  });

  var css_248z$f = ".SalesList[data-v-15f22672] {\n  width: 100%;\n  height: 100%;\n}";
  styleInject(css_248z$f);

  script$g.render = render$g;
  script$g.__scopeId = "data-v-15f22672";
  script$g.__file = "src/components/BaseScrollList/SalesList.vue";

  function SalesList (Vue) {
    Vue.component(script$f.name, script$f);
    Vue.component(script$g.name, script$g);
  }

  var script$h = {
    name: 'TimeLine',
    setup: function setup() {
      var options = vue.ref({});

      var update = function update() {
        // options.value = {
        //   baseOption:{
        //       timeline:{
        //         axisType:'category', //时间轴类型
        //         //播放按钮样式
        //         controlStyle:{
        //           position:'left',
        //         },
        //         //动画播放属性
        //         autoPlay:true, //自动播放
        //         playInterval:1000,//自动播放时间间隔
        //         loop:false, //是否循环播放
        //         inverse:false, //是否倒放 
        //         currentIndex:1, //从哪个位置开始播放
        //         realtime:true, //点击节点是否拖动视图
        //          //时间轴每个节点的数据
        //         data:[  
        //            {
        //              value:'2002-01-01', //节点数据
        //              symbol:'diamond',     //节点形状
        //              symbolSize:20        //节点形状大小
        //            },          
        //            {
        //              value:'2003-01-01',
        //              symbol:'diamond'
        //            }, 
        //            {
        //              value:'2004-01-01',
        //              symbol:'diamond'
        //            },     
        //            {
        //              value:'2005-01-01',
        //              symbol:'diamond'
        //            },     
        //            {
        //              value:'2006-01-01',
        //              symbol:'triangle',
        //              symbolSize:20
        //            },         
        //           ],
        //           label:{
        //             formatter(v){
        //               return new Date(v).getFullYear()
        //             }
        //           }  
        //       }
        //   },
        //   options:[]
        // }

        /**********************************************************************************************************/
        var dataMap = {};

        function dataFormatter(obj) {
          var pList = ['北京', '天津', '河北', '山西', '内蒙古', '辽宁', '吉林', '黑龙江', '上海', '江苏', '浙江', '安徽', '福建', '江西', '山东', '河南', '湖北', '湖南', '广东', '广西', '海南', '重庆', '四川', '贵州', '云南', '西藏', '陕西', '甘肃', '青海', '宁夏', '新疆'];
          var temp;

          for (var year = 2002; year <= 2011; year++) {
            var max = 0;
            var sum = 0;
            temp = obj[year];

            for (var i = 0, l = temp.length; i < l; i++) {
              max = Math.max(max, temp[i]);
              sum += temp[i];
              obj[year][i] = {
                name: pList[i],
                value: temp[i]
              };
            }

            obj[year + 'max'] = Math.floor(max / 100) * 100;
            obj[year + 'sum'] = sum;
          }

          return obj;
        }

        dataMap.dataGDP = dataFormatter({
          //max : 60000,
          2011: [16251.93, 11307.28, 24515.76, 11237.55, 14359.88, 22226.7, 10568.83, 12582, 19195.69, 49110.27, 32318.85, 15300.65, 17560.18, 11702.82, 45361.85, 26931.03, 19632.26, 19669.56, 53210.28, 11720.87, 2522.66, 10011.37, 21026.68, 5701.84, 8893.12, 605.83, 12512.3, 5020.37, 1670.44, 2102.21, 6610.05],
          2010: [14113.58, 9224.46, 20394.26, 9200.86, 11672, 18457.27, 8667.58, 10368.6, 17165.98, 41425.48, 27722.31, 12359.33, 14737.12, 9451.26, 39169.92, 23092.36, 15967.61, 16037.96, 46013.06, 9569.85, 2064.5, 7925.58, 17185.48, 4602.16, 7224.18, 507.46, 10123.48, 4120.75, 1350.43, 1689.65, 5437.47],
          2009: [12153.03, 7521.85, 17235.48, 7358.31, 9740.25, 15212.49, 7278.75, 8587, 15046.45, 34457.3, 22990.35, 10062.82, 12236.53, 7655.18, 33896.65, 19480.46, 12961.1, 13059.69, 39482.56, 7759.16, 1654.21, 6530.01, 14151.28, 3912.68, 6169.75, 441.36, 8169.8, 3387.56, 1081.27, 1353.31, 4277.05],
          2008: [11115, 6719.01, 16011.97, 7315.4, 8496.2, 13668.58, 6426.1, 8314.37, 14069.87, 30981.98, 21462.69, 8851.66, 10823.01, 6971.05, 30933.28, 18018.53, 11328.92, 11555, 36796.71, 7021, 1503.06, 5793.66, 12601.23, 3561.56, 5692.12, 394.85, 7314.58, 3166.82, 1018.62, 1203.92, 4183.21],
          2007: [9846.81, 5252.76, 13607.32, 6024.45, 6423.18, 11164.3, 5284.69, 7104, 12494.01, 26018.48, 18753.73, 7360.92, 9248.53, 5800.25, 25776.91, 15012.46, 9333.4, 9439.6, 31777.01, 5823.41, 1254.17, 4676.13, 10562.39, 2884.11, 4772.52, 341.43, 5757.29, 2703.98, 797.35, 919.11, 3523.16],
          2006: [8117.78, 4462.74, 11467.6, 4878.61, 4944.25, 9304.52, 4275.12, 6211.8, 10572.24, 21742.05, 15718.47, 6112.5, 7583.85, 4820.53, 21900.19, 12362.79, 7617.47, 7688.67, 26587.76, 4746.16, 1065.67, 3907.23, 8690.24, 2338.98, 3988.14, 290.76, 4743.61, 2277.35, 648.5, 725.9, 3045.26],
          2005: [6969.52, 3905.64, 10012.11, 4230.53, 3905.03, 8047.26, 3620.27, 5513.7, 9247.66, 18598.69, 13417.68, 5350.17, 6554.69, 4056.76, 18366.87, 10587.42, 6590.19, 6596.1, 22557.37, 3984.1, 918.75, 3467.72, 7385.1, 2005.42, 3462.73, 248.8, 3933.72, 1933.98, 543.32, 612.61, 2604.19],
          2004: [6033.21, 3110.97, 8477.63, 3571.37, 3041.07, 6672, 3122.01, 4750.6, 8072.83, 15003.6, 11648.7, 4759.3, 5763.35, 3456.7, 15021.84, 8553.79, 5633.24, 5641.94, 18864.62, 3433.5, 819.66, 3034.58, 6379.63, 1677.8, 3081.91, 220.34, 3175.58, 1688.49, 466.1, 537.11, 2209.09],
          2003: [5007.21, 2578.03, 6921.29, 2855.23, 2388.38, 6002.54, 2662.08, 4057.4, 6694.23, 12442.87, 9705.02, 3923.11, 4983.67, 2807.41, 12078.15, 6867.7, 4757.45, 4659.99, 15844.64, 2821.11, 713.96, 2555.72, 5333.09, 1426.34, 2556.02, 185.09, 2587.72, 1399.83, 390.2, 445.36, 1886.35],
          2002: [4315, 2150.76, 6018.28, 2324.8, 1940.94, 5458.22, 2348.54, 3637.2, 5741.03, 10606.85, 8003.67, 3519.72, 4467.55, 2450.48, 10275.5, 6035.48, 4212.82, 4151.54, 13502.42, 2523.73, 642.73, 2232.86, 4725.01, 1243.43, 2312.82, 162.04, 2253.39, 1232.03, 340.65, 377.16, 1612.6]
        });
        dataMap.dataPI = dataFormatter({
          //max : 4000,
          2011: [136.27, 159.72, 2905.73, 641.42, 1306.3, 1915.57, 1277.44, 1701.5, 124.94, 3064.78, 1583.04, 2015.31, 1612.24, 1391.07, 3973.85, 3512.24, 2569.3, 2768.03, 2665.2, 2047.23, 659.23, 844.52, 2983.51, 726.22, 1411.01, 74.47, 1220.9, 678.75, 155.08, 184.14, 1139.03],
          2010: [124.36, 145.58, 2562.81, 554.48, 1095.28, 1631.08, 1050.15, 1302.9, 114.15, 2540.1, 1360.56, 1729.02, 1363.67, 1206.98, 3588.28, 3258.09, 2147, 2325.5, 2286.98, 1675.06, 539.83, 685.38, 2482.89, 625.03, 1108.38, 68.72, 988.45, 599.28, 134.92, 159.29, 1078.63],
          2009: [118.29, 128.85, 2207.34, 477.59, 929.6, 1414.9, 980.57, 1154.33, 113.82, 2261.86, 1163.08, 1495.45, 1182.74, 1098.66, 3226.64, 2769.05, 1795.9, 1969.69, 2010.27, 1458.49, 462.19, 606.8, 2240.61, 550.27, 1067.6, 63.88, 789.64, 497.05, 107.4, 127.25, 759.74],
          2008: [112.83, 122.58, 2034.59, 313.58, 907.95, 1302.02, 916.72, 1088.94, 111.8, 2100.11, 1095.96, 1418.09, 1158.17, 1060.38, 3002.65, 2658.78, 1780, 1892.4, 1973.05, 1453.75, 436.04, 575.4, 2216.15, 539.19, 1020.56, 60.62, 753.72, 462.27, 105.57, 118.94, 691.07],
          2007: [101.26, 110.19, 1804.72, 311.97, 762.1, 1133.42, 783.8, 915.38, 101.84, 1816.31, 986.02, 1200.18, 1002.11, 905.77, 2509.14, 2217.66, 1378, 1626.48, 1695.57, 1241.35, 361.07, 482.39, 2032, 446.38, 837.35, 54.89, 592.63, 387.55, 83.41, 97.89, 628.72],
          2006: [88.8, 103.35, 1461.81, 276.77, 634.94, 939.43, 672.76, 750.14, 93.81, 1545.05, 925.1, 1011.03, 865.98, 786.14, 2138.9, 1916.74, 1140.41, 1272.2, 1532.17, 1032.47, 323.48, 386.38, 1595.48, 382.06, 724.4, 50.9, 484.81, 334, 67.55, 79.54, 527.8],
          2005: [88.68, 112.38, 1400, 262.42, 589.56, 882.41, 625.61, 684.6, 90.26, 1461.51, 892.83, 966.5, 827.36, 727.37, 1963.51, 1892.01, 1082.13, 1100.65, 1428.27, 912.5, 300.75, 463.4, 1481.14, 368.94, 661.69, 48.04, 435.77, 308.06, 65.34, 72.07, 509.99],
          2004: [87.36, 105.28, 1370.43, 276.3, 522.8, 798.43, 568.69, 605.79, 83.45, 1367.58, 814.1, 950.5, 786.84, 664.5, 1778.45, 1649.29, 1020.09, 1022.45, 1248.59, 817.88, 278.76, 428.05, 1379.93, 334.5, 607.75, 44.3, 387.88, 286.78, 60.7, 65.33, 461.26],
          2003: [84.11, 89.91, 1064.05, 215.19, 420.1, 615.8, 488.23, 504.8, 81.02, 1162.45, 717.85, 749.4, 692.94, 560, 1480.67, 1198.7, 798.35, 886.47, 1072.91, 658.78, 244.29, 339.06, 1128.61, 298.69, 494.6, 40.7, 302.66, 237.91, 48.47, 55.63, 412.9],
          2002: [82.44, 84.21, 956.84, 197.8, 374.69, 590.2, 446.17, 474.2, 79.68, 1110.44, 685.2, 783.66, 664.78, 535.98, 1390, 1288.36, 707, 847.25, 1015.08, 601.99, 222.89, 317.87, 1047.95, 281.1, 463.44, 39.75, 282.21, 215.51, 47.31, 52.95, 305]
        });
        dataMap.dataSI = dataFormatter({
          //max : 26600,
          2011: [3752.48, 5928.32, 13126.86, 6635.26, 8037.69, 12152.15, 5611.48, 5962.41, 7927.89, 25203.28, 16555.58, 8309.38, 9069.2, 6390.55, 24017.11, 15427.08, 9815.94, 9361.99, 26447.38, 5675.32, 714.5, 5543.04, 11029.13, 2194.33, 3780.32, 208.79, 6935.59, 2377.83, 975.18, 1056.15, 3225.9],
          2010: [3388.38, 4840.23, 10707.68, 5234, 6367.69, 9976.82, 4506.31, 5025.15, 7218.32, 21753.93, 14297.93, 6436.62, 7522.83, 5122.88, 21238.49, 13226.38, 7767.24, 7343.19, 23014.53, 4511.68, 571, 4359.12, 8672.18, 1800.06, 3223.49, 163.92, 5446.1, 1984.97, 744.63, 827.91, 2592.15],
          2009: [2855.55, 3987.84, 8959.83, 3993.8, 5114, 7906.34, 3541.92, 4060.72, 6001.78, 18566.37, 11908.49, 4905.22, 6005.3, 3919.45, 18901.83, 11010.5, 6038.08, 5687.19, 19419.7, 3381.54, 443.43, 3448.77, 6711.87, 1476.62, 2582.53, 136.63, 4236.42, 1527.24, 575.33, 662.32, 1929.59],
          2008: [2626.41, 3709.78, 8701.34, 4242.36, 4376.19, 7158.84, 3097.12, 4319.75, 6085.84, 16993.34, 11567.42, 4198.93, 5318.44, 3554.81, 17571.98, 10259.99, 5082.07, 5028.93, 18502.2, 3037.74, 423.55, 3057.78, 5823.39, 1370.03, 2452.75, 115.56, 3861.12, 1470.34, 557.12, 609.98, 2070.76],
          2007: [2509.4, 2892.53, 7201.88, 3454.49, 3193.67, 5544.14, 2475.45, 3695.58, 5571.06, 14471.26, 10154.25, 3370.96, 4476.42, 2975.53, 14647.53, 8282.83, 4143.06, 3977.72, 16004.61, 2425.29, 364.26, 2368.53, 4648.79, 1124.79, 2038.39, 98.48, 2986.46, 1279.32, 419.03, 455.04, 1647.55],
          2006: [2191.43, 2457.08, 6110.43, 2755.66, 2374.96, 4566.83, 1915.29, 3365.31, 4969.95, 12282.89, 8511.51, 2711.18, 3695.04, 2419.74, 12574.03, 6724.61, 3365.08, 3187.05, 13469.77, 1878.56, 308.62, 1871.65, 3775.14, 967.54, 1705.83, 80.1, 2452.44, 1043.19, 331.91, 351.58, 1459.3],
          2005: [2026.51, 2135.07, 5271.57, 2357.04, 1773.21, 3869.4, 1580.83, 2971.68, 4381.2, 10524.96, 7164.75, 2245.9, 3175.92, 1917.47, 10478.62, 5514.14, 2852.12, 2612.57, 11356.6, 1510.68, 240.83, 1564, 3067.23, 821.16, 1426.42, 63.52, 1951.36, 838.56, 264.61, 281.05, 1164.79],
          2004: [1853.58, 1685.93, 4301.73, 1919.4, 1248.27, 3061.62, 1329.68, 2487.04, 3892.12, 8437.99, 6250.38, 1844.9, 2770.49, 1566.4, 8478.69, 4182.1, 2320.6, 2190.54, 9280.73, 1253.7, 205.6, 1376.91, 2489.4, 681.5, 1281.63, 52.74, 1553.1, 713.3, 211.7, 244.05, 914.47],
          2003: [1487.15, 1337.31, 3417.56, 1463.38, 967.49, 2898.89, 1098.37, 2084.7, 3209.02, 6787.11, 5096.38, 1535.29, 2340.82, 1204.33, 6485.05, 3310.14, 1956.02, 1777.74, 7592.78, 984.08, 175.82, 1135.31, 2014.8, 569.37, 1047.66, 47.64, 1221.17, 572.02, 171.92, 194.27, 719.54],
          2002: [1249.99, 1069.08, 2911.69, 1134.31, 754.78, 2609.85, 943.49, 1843.6, 2622.45, 5604.49, 4090.48, 1337.04, 2036.97, 941.77, 5184.98, 2768.75, 1709.89, 1523.5, 6143.4, 846.89, 148.88, 958.87, 1733.38, 481.96, 934.88, 32.72, 1007.56, 501.69, 144.51, 153.06, 603.15]
        });
        dataMap.dataTI = dataFormatter({
          //max : 25000,
          2011: [12363.18, 5219.24, 8483.17, 3960.87, 5015.89, 8158.98, 3679.91, 4918.09, 11142.86, 20842.21, 14180.23, 4975.96, 6878.74, 3921.2, 17370.89, 7991.72, 7247.02, 7539.54, 24097.7, 3998.33, 1148.93, 3623.81, 7014.04, 2781.29, 3701.79, 322.57, 4355.81, 1963.79, 540.18, 861.92, 2245.12],
          2010: [10600.84, 4238.65, 7123.77, 3412.38, 4209.03, 6849.37, 3111.12, 4040.55, 9833.51, 17131.45, 12063.82, 4193.69, 5850.62, 3121.4, 14343.14, 6607.89, 6053.37, 6369.27, 20711.55, 3383.11, 953.67, 2881.08, 6030.41, 2177.07, 2892.31, 274.82, 3688.93, 1536.5, 470.88, 702.45, 1766.69],
          2009: [9179.19, 3405.16, 6068.31, 2886.92, 3696.65, 5891.25, 2756.26, 3371.95, 8930.85, 13629.07, 9918.78, 3662.15, 5048.49, 2637.07, 11768.18, 5700.91, 5127.12, 5402.81, 18052.59, 2919.13, 748.59, 2474.44, 5198.8, 1885.79, 2519.62, 240.85, 3143.74, 1363.27, 398.54, 563.74, 1587.72],
          2008: [8375.76, 2886.65, 5276.04, 2759.46, 3212.06, 5207.72, 2412.26, 2905.68, 7872.23, 11888.53, 8799.31, 3234.64, 4346.4, 2355.86, 10358.64, 5099.76, 4466.85, 4633.67, 16321.46, 2529.51, 643.47, 2160.48, 4561.69, 1652.34, 2218.81, 218.67, 2699.74, 1234.21, 355.93, 475, 1421.38],
          2007: [7236.15, 2250.04, 4600.72, 2257.99, 2467.41, 4486.74, 2025.44, 2493.04, 6821.11, 9730.91, 7613.46, 2789.78, 3770, 1918.95, 8620.24, 4511.97, 3812.34, 3835.4, 14076.83, 2156.76, 528.84, 1825.21, 3881.6, 1312.94, 1896.78, 188.06, 2178.2, 1037.11, 294.91, 366.18, 1246.89],
          2006: [5837.55, 1902.31, 3895.36, 1846.18, 1934.35, 3798.26, 1687.07, 2096.35, 5508.48, 7914.11, 6281.86, 2390.29, 3022.83, 1614.65, 7187.26, 3721.44, 3111.98, 3229.42, 11585.82, 1835.12, 433.57, 1649.2, 3319.62, 989.38, 1557.91, 159.76, 1806.36, 900.16, 249.04, 294.78, 1058.16],
          2005: [4854.33, 1658.19, 3340.54, 1611.07, 1542.26, 3295.45, 1413.83, 1857.42, 4776.2, 6612.22, 5360.1, 2137.77, 2551.41, 1411.92, 5924.74, 3181.27, 2655.94, 2882.88, 9772.5, 1560.92, 377.17, 1440.32, 2836.73, 815.32, 1374.62, 137.24, 1546.59, 787.36, 213.37, 259.49, 929.41],
          2004: [4092.27, 1319.76, 2805.47, 1375.67, 1270, 2811.95, 1223.64, 1657.77, 4097.26, 5198.03, 4584.22, 1963.9, 2206.02, 1225.8, 4764.7, 2722.4, 2292.55, 2428.95, 8335.3, 1361.92, 335.3, 1229.62, 2510.3, 661.8, 1192.53, 123.3, 1234.6, 688.41, 193.7, 227.73, 833.36],
          2003: [3435.95, 1150.81, 2439.68, 1176.65, 1000.79, 2487.85, 1075.48, 1467.9, 3404.19, 4493.31, 3890.79, 1638.42, 1949.91, 1043.08, 4112.43, 2358.86, 2003.08, 1995.78, 7178.94, 1178.25, 293.85, 1081.35, 2189.68, 558.28, 1013.76, 96.76, 1063.89, 589.91, 169.81, 195.46, 753.91],
          2002: [2982.57, 997.47, 2149.75, 992.69, 811.47, 2258.17, 958.88, 1319.4, 3038.9, 3891.92, 3227.99, 1399.02, 1765.8, 972.73, 3700.52, 1978.37, 1795.93, 1780.79, 6343.94, 1074.85, 270.96, 956.12, 1943.68, 480.37, 914.5, 89.56, 963.62, 514.83, 148.83, 171.14, 704.5]
        });
        dataMap.dataEstate = dataFormatter({
          //max : 3600,
          2011: [1074.93, 411.46, 918.02, 224.91, 384.76, 876.12, 238.61, 492.1, 1019.68, 2747.89, 1677.13, 634.92, 911.16, 402.51, 1838.14, 987, 634.67, 518.04, 3321.31, 465.68, 208.71, 396.28, 620.62, 160.3, 222.31, 17.44, 398.03, 134.25, 29.05, 79.01, 176.22],
          2010: [1006.52, 377.59, 697.79, 192, 309.25, 733.37, 212.32, 391.89, 1002.5, 2600.95, 1618.17, 532.17, 679.03, 340.56, 1622.15, 773.23, 564.41, 464.21, 2813.95, 405.79, 188.33, 266.38, 558.56, 139.64, 223.45, 14.54, 315.95, 110.02, 25.41, 60.53, 143.44],
          2009: [1062.47, 308.73, 612.4, 173.31, 286.65, 605.27, 200.14, 301.18, 1237.56, 2025.39, 1316.84, 497.94, 656.61, 305.9, 1329.59, 622.98, 546.11, 400.11, 2470.63, 348.98, 121.76, 229.09, 548.14, 136.15, 205.14, 13.28, 239.92, 101.37, 23.05, 47.56, 115.23],
          2008: [844.59, 227.88, 513.81, 166.04, 273.3, 500.81, 182.7, 244.47, 939.34, 1626.13, 1052.03, 431.27, 506.98, 281.96, 1104.95, 512.42, 526.88, 340.07, 2057.45, 282.96, 95.6, 191.21, 453.63, 104.81, 195.48, 15.08, 193.27, 93.8, 19.96, 38.85, 89.79],
          2007: [821.5, 183.44, 467.97, 134.12, 191.01, 410.43, 153.03, 225.81, 958.06, 1365.71, 981.42, 366.57, 511.5, 225.96, 953.69, 447.44, 409.65, 301.8, 2029.77, 239.45, 67.19, 196.06, 376.84, 93.19, 193.59, 13.24, 153.98, 83.52, 16.98, 29.49, 91.28],
          2006: [658.3, 156.64, 397.14, 117.01, 136.5, 318.54, 131.01, 194.7, 773.61, 1017.91, 794.41, 281.98, 435.22, 184.67, 786.51, 348.7, 294.73, 254.81, 1722.07, 192.2, 44.45, 158.2, 336.2, 80.24, 165.92, 11.92, 125.2, 73.21, 15.17, 25.53, 68.9],
          2005: [493.73, 122.67, 330.87, 106, 98.75, 256.77, 112.29, 163.34, 715.97, 799.73, 688.86, 231.66, 331.8, 171.88, 664.9, 298.19, 217.17, 215.63, 1430.37, 165.05, 38.2, 143.88, 286.23, 76.38, 148.69, 10.02, 108.62, 63.78, 14.1, 22.97, 55.79],
          2004: [436.11, 106.14, 231.08, 95.1, 73.81, 203.1, 97.93, 137.74, 666.3, 534.17, 587.83, 188.28, 248.44, 167.2, 473.27, 236.44, 204.8, 191.5, 1103.75, 122.52, 30.64, 129.12, 264.3, 68.3, 116.54, 5.8, 95.9, 56.84, 13, 20.78, 53.55],
          2003: [341.88, 92.31, 185.19, 78.73, 61.05, 188.49, 91.99, 127.2, 487.82, 447.47, 473.16, 162.63, 215.84, 138.02, 418.21, 217.58, 176.8, 186.49, 955.66, 100.93, 25.14, 113.69, 231.72, 59.86, 103.79, 4.35, 83.9, 48.09, 11.41, 16.85, 47.84],
          2002: [298.02, 73.04, 140.89, 65.83, 51.48, 130.94, 76.11, 118.7, 384.86, 371.09, 360.63, 139.18, 188.09, 125.27, 371.13, 199.31, 145.17, 165.29, 808.16, 82.83, 21.45, 90.48, 210.82, 53.49, 95.68, 3.42, 77.68, 41.52, 9.74, 13.46, 43.04]
        });
        dataMap.dataFinancial = dataFormatter({
          //max : 3200,
          2011: [2215.41, 756.5, 746.01, 519.32, 447.46, 755.57, 207.65, 370.78, 2277.4, 2600.11, 2730.29, 503.85, 862.41, 357.44, 1640.41, 868.2, 674.57, 501.09, 2916.13, 445.37, 105.24, 704.66, 868.15, 297.27, 456.23, 31.7, 432.11, 145.05, 62.56, 134.18, 288.77],
          2010: [1863.61, 572.99, 615.42, 448.3, 346.44, 639.27, 190.12, 304.59, 1950.96, 2105.92, 2326.58, 396.17, 767.58, 241.49, 1361.45, 697.68, 561.27, 463.16, 2658.76, 384.53, 78.12, 496.56, 654.7, 231.51, 375.08, 27.08, 384.75, 100.54, 54.53, 97.87, 225.2],
          2009: [1603.63, 461.2, 525.67, 361.64, 291.1, 560.2, 180.83, 227.54, 1804.28, 1596.98, 1899.33, 359.6, 612.2, 165.1, 1044.9, 499.92, 479.11, 402.57, 2283.29, 336.82, 65.73, 389.97, 524.63, 194.44, 351.74, 23.17, 336.21, 88.27, 45.63, 75.54, 198.87],
          2008: [1519.19, 368.1, 420.74, 290.91, 219.09, 455.07, 147.24, 177.43, 1414.21, 1298.48, 1653.45, 313.81, 497.65, 130.57, 880.28, 413.83, 393.05, 334.32, 1972.4, 249.01, 47.33, 303.01, 411.14, 151.55, 277.66, 22.42, 287.16, 72.49, 36.54, 64.8, 171.97],
          2007: [1302.77, 288.17, 347.65, 218.73, 148.3, 386.34, 126.03, 155.48, 1209.08, 1054.25, 1251.43, 223.85, 385.84, 101.34, 734.9, 302.31, 337.27, 260.14, 1705.08, 190.73, 34.43, 247.46, 359.11, 122.25, 168.55, 11.51, 231.03, 61.6, 27.67, 51.05, 149.22],
          2006: [982.37, 186.87, 284.04, 169.63, 108.21, 303.41, 100.75, 74.17, 825.2, 653.25, 906.37, 166.01, 243.9, 79.75, 524.94, 219.72, 174.99, 204.72, 899.91, 129.14, 16.37, 213.7, 299.5, 89.43, 143.62, 6.44, 152.25, 50.51, 23.69, 36.99, 99.25],
          2005: [840.2, 147.4, 213.47, 135.07, 72.52, 232.85, 83.63, 35.03, 675.12, 492.4, 686.32, 127.05, 186.12, 69.55, 448.36, 181.74, 127.32, 162.37, 661.81, 91.93, 13.16, 185.18, 262.26, 73.67, 130.5, 7.57, 127.58, 44.73, 20.36, 32.25, 80.34],
          2004: [713.79, 136.97, 209.1, 110.29, 55.89, 188.04, 77.17, 32.2, 612.45, 440.5, 523.49, 94.1, 171, 65.1, 343.37, 170.82, 118.85, 118.64, 602.68, 74, 11.56, 162.38, 236.5, 60.3, 118.4, 5.4, 90.1, 42.99, 19, 27.92, 70.3],
          2003: [635.56, 112.79, 199.87, 118.48, 55.89, 145.38, 73.15, 32.2, 517.97, 392.11, 451.54, 87.45, 150.09, 64.31, 329.71, 165.11, 107.31, 99.35, 534.28, 61.59, 10.68, 147.04, 206.24, 48.01, 105.48, 4.74, 77.87, 42.31, 17.98, 24.8, 64.92],
          2002: [561.91, 76.86, 179.6, 124.1, 48.39, 137.18, 75.45, 31.6, 485.25, 368.86, 347.53, 81.85, 138.28, 76.51, 310.07, 158.77, 96.95, 92.43, 454.65, 35.86, 10.08, 134.52, 183.13, 41.45, 102.39, 2.81, 67.3, 42.08, 16.75, 21.45, 52.18]
        });
        console.log(dataMap);
        options.value = {
          baseOption: {
            timeline: {
              axisType: 'category',
              // realtime: false,
              // loop: false,
              autoPlay: true,
              // currentIndex: 2,
              playInterval: 1000,
              // controlStyle: {
              //     position: 'left'
              // },
              data: ['2002-01-01', '2003-01-01', '2004-01-01', {
                value: '2005-01-01',
                tooltip: {
                  formatter: '{b} GDP达到一个高度'
                },
                symbol: 'diamond',
                symbolSize: 16
              }, '2006-01-01', '2007-01-01', '2008-01-01', '2009-01-01', '2010-01-01', {
                value: '2011-01-01',
                tooltip: {
                  formatter: function formatter(params) {
                    return params.name + 'GDP达到又一个高度';
                  }
                },
                symbol: 'diamond',
                symbolSize: 18
              }],
              label: {
                formatter: function formatter(s) {
                  return new Date(s).getFullYear();
                }
              }
            },
            title: {
              subtext: '数据来自国家统计局'
            },
            tooltip: {},
            legend: {
              left: 'right',
              data: ['第一产业', '第二产业', '第三产业', '金融'],
              selected: {
                GDP: false,
                金融: false,
                房地产: false
              }
            },
            calculable: true,
            grid: {
              top: 80,
              bottom: 100
            },
            xAxis: [{
              type: 'category',
              axisLabel: {
                'interval': 'auto'
              },
              data: ['北京', '\n天津', '河北', '\n山西', '内蒙古', '\n辽宁', '吉林', '\n黑龙江', '上海', '\n江苏', '浙江', '\n安徽', '福建', '\n江西', '山东', '\n河南', '湖北', '\n湖南', '广东', '\n广西', '海南', '\n重庆', '四川', '\n贵州', '云南', '\n西藏', '陕西', '\n甘肃', '青海', '\n宁夏', '新疆'],
              splitLine: {
                show: false
              }
            }],
            yAxis: [{
              type: 'value',
              name: 'GDP（亿元）',
              // max: 53500
              max: 30000
            }],
            series: [{
              name: 'GDP',
              type: 'bar'
            }, {
              name: '金融',
              type: 'bar'
            }, {
              name: '房地产',
              type: 'bar'
            }, {
              name: '第一产业',
              type: 'bar'
            }, {
              name: '第二产业',
              type: 'bar'
            }, {
              name: '第三产业',
              type: 'bar'
            }, {
              name: 'GDP占比',
              type: 'pie',
              center: ['75%', '35%'],
              radius: '28%'
            }]
          },
          options: [{
            title: {
              text: '2002全国宏观经济指标'
            },
            series: [{
              data: dataMap.dataGDP['2002']
            }, {
              data: dataMap.dataFinancial['2002']
            }, {
              data: dataMap.dataEstate['2002']
            }, {
              data: dataMap.dataPI['2002']
            }, {
              data: dataMap.dataSI['2002']
            }, {
              data: dataMap.dataTI['2002']
            }, {
              data: [{
                name: '第一产业',
                value: dataMap.dataPI['2002sum']
              }, {
                name: '第二产业',
                value: dataMap.dataSI['2002sum']
              }, {
                name: '第三产业',
                value: dataMap.dataTI['2002sum']
              }]
            }]
          }, {
            title: {
              text: '2003全国宏观经济指标'
            },
            series: [{
              data: dataMap.dataGDP['2003']
            }, {
              data: dataMap.dataFinancial['2003']
            }, {
              data: dataMap.dataEstate['2003']
            }, {
              data: dataMap.dataPI['2003']
            }, {
              data: dataMap.dataSI['2003']
            }, {
              data: dataMap.dataTI['2003']
            }, {
              data: [{
                name: '第一产业',
                value: dataMap.dataPI['2003sum']
              }, {
                name: '第二产业',
                value: dataMap.dataSI['2003sum']
              }, {
                name: '第三产业',
                value: dataMap.dataTI['2003sum']
              }]
            }]
          }, {
            title: {
              text: '2004全国宏观经济指标'
            },
            series: [{
              data: dataMap.dataGDP['2004']
            }, {
              data: dataMap.dataFinancial['2004']
            }, {
              data: dataMap.dataEstate['2004']
            }, {
              data: dataMap.dataPI['2004']
            }, {
              data: dataMap.dataSI['2004']
            }, {
              data: dataMap.dataTI['2004']
            }, {
              data: [{
                name: '第一产业',
                value: dataMap.dataPI['2004sum']
              }, {
                name: '第二产业',
                value: dataMap.dataSI['2004sum']
              }, {
                name: '第三产业',
                value: dataMap.dataTI['2004sum']
              }]
            }]
          }, {
            title: {
              text: '2005全国宏观经济指标'
            },
            series: [{
              data: dataMap.dataGDP['2005']
            }, {
              data: dataMap.dataFinancial['2005']
            }, {
              data: dataMap.dataEstate['2005']
            }, {
              data: dataMap.dataPI['2005']
            }, {
              data: dataMap.dataSI['2005']
            }, {
              data: dataMap.dataTI['2005']
            }, {
              data: [{
                name: '第一产业',
                value: dataMap.dataPI['2005sum']
              }, {
                name: '第二产业',
                value: dataMap.dataSI['2005sum']
              }, {
                name: '第三产业',
                value: dataMap.dataTI['2005sum']
              }]
            }]
          }, {
            title: {
              text: '2006全国宏观经济指标'
            },
            series: [{
              data: dataMap.dataGDP['2006']
            }, {
              data: dataMap.dataFinancial['2006']
            }, {
              data: dataMap.dataEstate['2006']
            }, {
              data: dataMap.dataPI['2006']
            }, {
              data: dataMap.dataSI['2006']
            }, {
              data: dataMap.dataTI['2006']
            }, {
              data: [{
                name: '第一产业',
                value: dataMap.dataPI['2006sum']
              }, {
                name: '第二产业',
                value: dataMap.dataSI['2006sum']
              }, {
                name: '第三产业',
                value: dataMap.dataTI['2006sum']
              }]
            }]
          }, {
            title: {
              text: '2007全国宏观经济指标'
            },
            series: [{
              data: dataMap.dataGDP['2007']
            }, {
              data: dataMap.dataFinancial['2007']
            }, {
              data: dataMap.dataEstate['2007']
            }, {
              data: dataMap.dataPI['2007']
            }, {
              data: dataMap.dataSI['2007']
            }, {
              data: dataMap.dataTI['2007']
            }, {
              data: [{
                name: '第一产业',
                value: dataMap.dataPI['2007sum']
              }, {
                name: '第二产业',
                value: dataMap.dataSI['2007sum']
              }, {
                name: '第三产业',
                value: dataMap.dataTI['2007sum']
              }]
            }]
          }, {
            title: {
              text: '2008全国宏观经济指标'
            },
            series: [{
              data: dataMap.dataGDP['2008']
            }, {
              data: dataMap.dataFinancial['2008']
            }, {
              data: dataMap.dataEstate['2008']
            }, {
              data: dataMap.dataPI['2008']
            }, {
              data: dataMap.dataSI['2008']
            }, {
              data: dataMap.dataTI['2008']
            }, {
              data: [{
                name: '第一产业',
                value: dataMap.dataPI['2008sum']
              }, {
                name: '第二产业',
                value: dataMap.dataSI['2008sum']
              }, {
                name: '第三产业',
                value: dataMap.dataTI['2008sum']
              }]
            }]
          }, {
            title: {
              text: '2009全国宏观经济指标'
            },
            series: [{
              data: dataMap.dataGDP['2009']
            }, {
              data: dataMap.dataFinancial['2009']
            }, {
              data: dataMap.dataEstate['2009']
            }, {
              data: dataMap.dataPI['2009']
            }, {
              data: dataMap.dataSI['2009']
            }, {
              data: dataMap.dataTI['2009']
            }, {
              data: [{
                name: '第一产业',
                value: dataMap.dataPI['2009sum']
              }, {
                name: '第二产业',
                value: dataMap.dataSI['2009sum']
              }, {
                name: '第三产业',
                value: dataMap.dataTI['2009sum']
              }]
            }]
          }, {
            title: {
              text: '2010全国宏观经济指标'
            },
            series: [{
              data: dataMap.dataGDP['2010']
            }, {
              data: dataMap.dataFinancial['2010']
            }, {
              data: dataMap.dataEstate['2010']
            }, {
              data: dataMap.dataPI['2010']
            }, {
              data: dataMap.dataSI['2010']
            }, {
              data: dataMap.dataTI['2010']
            }, {
              data: [{
                name: '第一产业',
                value: dataMap.dataPI['2010sum']
              }, {
                name: '第二产业',
                value: dataMap.dataSI['2010sum']
              }, {
                name: '第三产业',
                value: dataMap.dataTI['2010sum']
              }]
            }]
          }, {
            title: {
              text: '2011全国宏观经济指标'
            },
            series: [{
              data: dataMap.dataGDP['2011']
            }, {
              data: dataMap.dataFinancial['2011']
            }, {
              data: dataMap.dataEstate['2011']
            }, {
              data: dataMap.dataPI['2011']
            }, {
              data: dataMap.dataSI['2011']
            }, {
              data: dataMap.dataTI['2011']
            }, {
              data: [{
                name: '第一产业',
                value: dataMap.dataPI['2011sum']
              }, {
                name: '第二产业',
                value: dataMap.dataSI['2011sum']
              }, {
                name: '第三产业',
                value: dataMap.dataTI['2011sum']
              }]
            }]
          }]
        };
      };

      vue.onMounted(update);
      return {
        options: options
      };
    }
  };

  var _withId$f = /*#__PURE__*/vue.withScopeId("data-v-aa343a22");

  vue.pushScopeId("data-v-aa343a22");

  var _hoisted_1$d = {
    style: {
      "width": "100%",
      "height": "100%"
    }
  };

  vue.popScopeId();

  var render$h = /*#__PURE__*/_withId$f(function (_ctx, _cache, $props, $setup, $data, $options) {
    var _component_VueEcharts = vue.resolveComponent("VueEcharts");

    return vue.openBlock(), vue.createBlock("div", _hoisted_1$d, [vue.createVNode(_component_VueEcharts, {
      options: $setup.options
    }, null, 8
    /* PROPS */
    , ["options"])]);
  });

  var css_248z$g = "";
  styleInject(css_248z$g);

  script$h.render = render$h;
  script$h.__scopeId = "data-v-aa343a22";
  script$h.__file = "src/components/TimeLine/TimeLine.vue";

  function TimeLine (Vue) {
    Vue.component(script$h.name, script$h);
  }

  var script$i = {
    name: 'CustomMap',
    setup: function setup() {
      var options = vue.ref({});
      var timer = null;

      var update = function update() {
        fetch('http://www.youbaobao.xyz/datav-res/datav/jiangsuMapData.json').then(function (response) {
          return response.json();
        }).then(function (data) {
          Echarts__default['default'].registerMap('js', data); //注册地图

          var center = [];
          data.features.forEach(function (item) {
            if (item.properties) {
              center.push({
                key: item.properties.name,
                value: item.properties.center
              });
            }
          });
          options.value = {
            visualMap: {
              show: true,
              //标识是否展示
              max: 100,
              //表示最大值100
              seriesIndex: [0],
              //使用第几组数据
              inRange: {
                color: ['#a5dcf4', '#006edd']
              }
            },
            geo: [{
              map: 'js',
              //使用自定义地图
              zoom: 1,
              //默认地图放大倍数
              roam: false,
              //启动鼠标滚轮地图缩放
              //zoom放大系数调节
              scaleLimit: {
                min: 0,
                //最小为0
                max: 3 //最大为3

              },
              itemStyle: {
                areaColor: '#013c62',
                //背景颜色
                shadowColor: '#013c62',
                //阴影色
                shadowBlur: 20,
                //阴影长度
                shadowOffsteX: -5,
                //阴影位移X轴
                shadowOffsetY: 15 //阴影Y轴向上偏移10像素

              }
            }],
            series: [{
              type: 'map',
              mapType: 'js',
              zoom: 1,
              roam: false,
              label: {
                show: true,
                color: '#fff',
                emphasis: {
                  color: '#fff',
                  show: false
                }
              },
              itemStyle: {
                //边框默认状态
                normal: {
                  borderColor: '#2980b9',
                  borderWidth: 1,
                  areaColor: '12235c'
                },
                //边框高亮状态
                emphasis: {
                  areaColor: '#fa8c16',
                  borderWidth: 0
                }
              },
              //绑定数据
              data: center.map(function (centerItem) {
                var value = Math.random() * 100;
                return {
                  name: centerItem.key,
                  value: value
                };
              })
            }, //地图报警点绘制
            {
              type: 'effectScatter',
              data: [],
              coordinateSystem: 'geo',
              symbolSize: 16,
              //散点大小
              itemStyle: {
                color: '#feae21'
              },
              label: {
                //默认的展示形式
                normal: {
                  show: true,
                  //是否展示
                  position: 'top',
                  //展示位置
                  formatter: function formatter(params) {
                    console.log(params);
                    return "{titel|".concat(params.data.city, "}\n{content|\u53D1\u751FXXX\u4E8B\u4EF6}");
                  },
                  backgroundColor: 'rgba(254,174,33,.8)',
                  padding: [0, 0],
                  borderRadius: 3,
                  lineHeight: 32,
                  color: '#f7fafb',
                  rich: {
                    title: {
                      padding: [0, 10, 10, 10],
                      color: ''
                    },
                    content: {
                      padding: [10, 10, 0, 10],
                      color: '#fff'
                    }
                  }
                },
                //鼠标选中高亮展示形式
                emphasis: {
                  show: true
                }
              }
            }, {
              type: 'effectScatter',
              data: [],
              coordinateSystem: 'geo',
              symbolSize: 16,
              //散点大小
              itemStyle: {
                color: '#e93f42'
              },
              label: {
                //默认的展示形式
                normal: {
                  show: true,
                  //是否展示
                  position: 'top',
                  //展示位置
                  formatter: function formatter(params) {
                    console.log(params);
                    return "{titel|".concat(params.data.city, "}\n{content|\u53D1\u751FXXX\u4E8B\u4EF6}");
                  },
                  backgroundColor: 'rgba(233,63,66,.9)',
                  padding: [0, 0],
                  borderRadius: 3,
                  lineHeight: 32,
                  color: '#ffffff',
                  rich: {
                    title: {
                      padding: [0, 10, 10, 10],
                      color: '#fff'
                    },
                    content: {
                      padding: [10, 10, 0, 10],
                      color: '#fff'
                    }
                  }
                },
                //鼠标选中高亮展示形式
                emphasis: {
                  show: true
                }
              }
            }, {
              type: 'effectScatter',
              data: [{
                value: center[0].value,
                city: center[0].key
              }],
              coordinateSystem: 'geo',
              symbolSize: 16,
              //散点大小
              itemStyle: {
                color: '#08baec'
              },
              label: {
                //默认的展示形式
                normal: {
                  show: true,
                  //是否展示
                  position: 'top',
                  //展示位置
                  formatter: function formatter(params) {
                    console.log(params);
                    return "{titel|".concat(params.data.city, "}\n{content|\u53D1\u751FXXX\u4E8B\u4EF6}");
                  },
                  backgroundColor: 'rgba(8,186,236,.9)',
                  padding: [0, 0],
                  borderRadius: 3,
                  lineHeight: 32,
                  color: '#ffffff',
                  rich: {
                    title: {
                      padding: [0, 10, 10, 10],
                      color: '#fff'
                    },
                    content: {
                      padding: [10, 10, 0, 10],
                      color: '#fff'
                    }
                  }
                },
                //鼠标选中高亮展示形式
                emphasis: {
                  show: true
                }
              }
            }]
          }; //测试：随机展示事件信息

          timer = setInterval(function () {
            var _options = cloneDeep_1(options.value); //初始化数组


            for (var i = 1; i < 4; i++) {
              _options.series[i].data = [];
            } //生成城市随机数


            var Citylength = center.length;
            var cityIndex = Math.floor(Math.random() * Citylength);
            var eventIndex = Math.floor(Math.random() * 3) + 1;
            _options.series[eventIndex].data = [{
              city: center[cityIndex].key,
              value: center[cityIndex].value
            }];
            options.value = _options;
          }, 2000);
        });
      };

      vue.onMounted(update);
      vue.onUnmounted(function () {
        return timer && clearInterval(timer);
      });
      return {
        options: options
      };
    }
  };

  var _withId$g = /*#__PURE__*/vue.withScopeId("data-v-5e44d4b2");

  vue.pushScopeId("data-v-5e44d4b2");

  var _hoisted_1$e = {
    style: {
      "width": "100%",
      "height": "100%"
    }
  };

  vue.popScopeId();

  var render$i = /*#__PURE__*/_withId$g(function (_ctx, _cache, $props, $setup, $data, $options) {
    var _component_VueEcharts = vue.resolveComponent("VueEcharts");

    return vue.openBlock(), vue.createBlock("div", _hoisted_1$e, [vue.createVNode(_component_VueEcharts, {
      options: $setup.options
    }, null, 8
    /* PROPS */
    , ["options"])]);
  });

  var css_248z$h = "";
  styleInject(css_248z$h);

  script$i.render = render$i;
  script$i.__scopeId = "data-v-5e44d4b2";
  script$i.__file = "src/components/CustomMap/CustomMap.vue";

  function CustomMap (Vue) {
    Vue.component(script$i.name, script$i);
  }

  var echartsGl = createCommonjsModule(function (module, exports) {
  (function webpackUniversalModuleDefinition(root, factory) {
  	module.exports = factory(Echarts__default['default']);
  })(commonjsGlobal, function(__WEBPACK_EXTERNAL_MODULE_0__) {
  return /******/ (function(modules) { // webpackBootstrap
  /******/ 	// The module cache
  /******/ 	var installedModules = {};
  /******/
  /******/ 	// The require function
  /******/ 	function __webpack_require__(moduleId) {
  /******/
  /******/ 		// Check if module is in cache
  /******/ 		if(installedModules[moduleId]) {
  /******/ 			return installedModules[moduleId].exports;
  /******/ 		}
  /******/ 		// Create a new module (and put it into the cache)
  /******/ 		var module = installedModules[moduleId] = {
  /******/ 			i: moduleId,
  /******/ 			l: false,
  /******/ 			exports: {}
  /******/ 		};
  /******/
  /******/ 		// Execute the module function
  /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
  /******/
  /******/ 		// Flag the module as loaded
  /******/ 		module.l = true;
  /******/
  /******/ 		// Return the exports of the module
  /******/ 		return module.exports;
  /******/ 	}
  /******/
  /******/
  /******/ 	// expose the modules object (__webpack_modules__)
  /******/ 	__webpack_require__.m = modules;
  /******/
  /******/ 	// expose the module cache
  /******/ 	__webpack_require__.c = installedModules;
  /******/
  /******/ 	// define getter function for harmony exports
  /******/ 	__webpack_require__.d = function(exports, name, getter) {
  /******/ 		if(!__webpack_require__.o(exports, name)) {
  /******/ 			Object.defineProperty(exports, name, {
  /******/ 				configurable: false,
  /******/ 				enumerable: true,
  /******/ 				get: getter
  /******/ 			});
  /******/ 		}
  /******/ 	};
  /******/
  /******/ 	// getDefaultExport function for compatibility with non-harmony modules
  /******/ 	__webpack_require__.n = function(module) {
  /******/ 		var getter = module && module.__esModule ?
  /******/ 			function getDefault() { return module['default']; } :
  /******/ 			function getModuleExports() { return module; };
  /******/ 		__webpack_require__.d(getter, 'a', getter);
  /******/ 		return getter;
  /******/ 	};
  /******/
  /******/ 	// Object.prototype.hasOwnProperty.call
  /******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
  /******/
  /******/ 	// __webpack_public_path__
  /******/ 	__webpack_require__.p = "";
  /******/
  /******/ 	// Load entry module and return exports
  /******/ 	return __webpack_require__(__webpack_require__.s = 105);
  /******/ })
  /************************************************************************/
  /******/ ([
  /* 0 */
  /***/ (function(module, exports) {

  module.exports = __WEBPACK_EXTERNAL_MODULE_0__;

  /***/ }),
  /* 1 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_claygl_src_Mesh__ = __webpack_require__(41);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_claygl_src_Renderer__ = __webpack_require__(52);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_claygl_src_Texture2D__ = __webpack_require__(5);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_claygl_src_Texture__ = __webpack_require__(4);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_claygl_src_Shader__ = __webpack_require__(9);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_claygl_src_Material__ = __webpack_require__(19);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_claygl_src_Node__ = __webpack_require__(35);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_claygl_src_Geometry__ = __webpack_require__(14);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_claygl_src_Scene__ = __webpack_require__(36);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_zrender_lib_core_LRU__ = __webpack_require__(74);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_zrender_lib_core_LRU___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_zrender_lib_core_LRU__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_claygl_src_util_texture__ = __webpack_require__(60);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__EChartsSurface__ = __webpack_require__(123);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_claygl_src_light_AmbientCubemap__ = __webpack_require__(124);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_claygl_src_light_AmbientSH__ = __webpack_require__(128);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_claygl_src_util_sh__ = __webpack_require__(129);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__retrieve__ = __webpack_require__(2);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_claygl_src_geometry_Sphere__ = __webpack_require__(131);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_claygl_src_geometry_Plane__ = __webpack_require__(43);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_19_claygl_src_geometry_Cube__ = __webpack_require__(76);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_20_claygl_src_light_Ambient__ = __webpack_require__(132);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_21_claygl_src_light_Directional__ = __webpack_require__(133);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_22_claygl_src_light_Point__ = __webpack_require__(134);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_23_claygl_src_light_Spot__ = __webpack_require__(135);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_24_claygl_src_camera_Perspective__ = __webpack_require__(37);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_25_claygl_src_camera_Orthographic__ = __webpack_require__(38);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_26_claygl_src_math_Vector2__ = __webpack_require__(26);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_27_claygl_src_math_Vector3__ = __webpack_require__(3);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_28_claygl_src_math_Vector4__ = __webpack_require__(136);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_29_claygl_src_math_Quaternion__ = __webpack_require__(56);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_30_claygl_src_math_Matrix2__ = __webpack_require__(137);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_31_claygl_src_math_Matrix2d__ = __webpack_require__(138);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_32_claygl_src_math_Matrix3__ = __webpack_require__(139);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_33_claygl_src_math_Matrix4__ = __webpack_require__(7);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_34_claygl_src_math_Plane__ = __webpack_require__(73);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_35_claygl_src_math_Ray__ = __webpack_require__(54);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_36_claygl_src_math_BoundingBox__ = __webpack_require__(18);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_37_claygl_src_math_Frustum__ = __webpack_require__(59);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_38__animatableMixin__ = __webpack_require__(140);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_39_claygl_src_shader_source_util_glsl_js__ = __webpack_require__(145);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_40_claygl_src_shader_source_prez_glsl_js__ = __webpack_require__(70);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_41__shader_common_glsl_js__ = __webpack_require__(146);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_42__shader_color_glsl_js__ = __webpack_require__(147);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_43__shader_lambert_glsl_js__ = __webpack_require__(148);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_44__shader_realistic_glsl_js__ = __webpack_require__(149);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_45__shader_hatching_glsl_js__ = __webpack_require__(150);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_46__shader_shadow_glsl_js__ = __webpack_require__(151);






























  // Math

















  // Some common shaders










  __WEBPACK_IMPORTED_MODULE_8_echarts_lib_echarts___default.a.util.extend(__WEBPACK_IMPORTED_MODULE_6_claygl_src_Node__["a" /* default */].prototype, __WEBPACK_IMPORTED_MODULE_38__animatableMixin__["a" /* default */]);

  __WEBPACK_IMPORTED_MODULE_4_claygl_src_Shader__["a" /* default */].import(__WEBPACK_IMPORTED_MODULE_39_claygl_src_shader_source_util_glsl_js__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_4_claygl_src_Shader__["a" /* default */].import(__WEBPACK_IMPORTED_MODULE_40_claygl_src_shader_source_prez_glsl_js__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_4_claygl_src_Shader__["a" /* default */].import(__WEBPACK_IMPORTED_MODULE_41__shader_common_glsl_js__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_4_claygl_src_Shader__["a" /* default */].import(__WEBPACK_IMPORTED_MODULE_42__shader_color_glsl_js__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_4_claygl_src_Shader__["a" /* default */].import(__WEBPACK_IMPORTED_MODULE_43__shader_lambert_glsl_js__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_4_claygl_src_Shader__["a" /* default */].import(__WEBPACK_IMPORTED_MODULE_44__shader_realistic_glsl_js__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_4_claygl_src_Shader__["a" /* default */].import(__WEBPACK_IMPORTED_MODULE_45__shader_hatching_glsl_js__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_4_claygl_src_Shader__["a" /* default */].import(__WEBPACK_IMPORTED_MODULE_46__shader_shadow_glsl_js__["a" /* default */]);

  function isValueNone(value) {
      return !value || value === 'none';
  }

  function isValueImage(value) {
      return value instanceof HTMLCanvasElement
          || value instanceof HTMLImageElement
          || value instanceof Image;
  }

  function isECharts(value) {
      return value.getZr && value.setOption;
  }

  // Overwrite addToScene and removeFromScene
  var oldAddToScene = __WEBPACK_IMPORTED_MODULE_9_claygl_src_Scene__["a" /* default */].prototype.addToScene;
  var oldRemoveFromScene = __WEBPACK_IMPORTED_MODULE_9_claygl_src_Scene__["a" /* default */].prototype.removeFromScene;

  __WEBPACK_IMPORTED_MODULE_9_claygl_src_Scene__["a" /* default */].prototype.addToScene = function (node) {
      oldAddToScene.call(this, node);

      if (this.__zr) {
          var zr = this.__zr;
          node.traverse(function (child) {
              child.__zr = zr;
              if (child.addAnimatorsToZr) {
                  child.addAnimatorsToZr(zr);
              }
          });
      }
  };

  __WEBPACK_IMPORTED_MODULE_9_claygl_src_Scene__["a" /* default */].prototype.removeFromScene = function (node) {
      oldRemoveFromScene.call(this, node);

      node.traverse(function (child) {
          var zr = child.__zr;
          child.__zr = null;
          if (zr && child.removeAnimatorsFromZr) {
              child.removeAnimatorsFromZr(zr);
          }
      });
  };

  /**
   * @param {string} textureName
   * @param {string|HTMLImageElement|HTMLCanvasElement} imgValue
   * @param {module:echarts/ExtensionAPI} api
   * @param {Object} [textureOpts]
   */
  __WEBPACK_IMPORTED_MODULE_5_claygl_src_Material__["a" /* default */].prototype.setTextureImage = function (textureName, imgValue, api, textureOpts) {
      if (!this.shader) {
          return;
      }

      var zr = api.getZr();
      var material = this;
      var texture;
      material.autoUpdateTextureStatus = false;
      // disableTexture first
      material.disableTexture(textureName);
      if (!isValueNone(imgValue)) {
          texture = graphicGL.loadTexture(imgValue, api, textureOpts, function (texture) {
              material.enableTexture(textureName);
              zr && zr.refresh();
          });
          // Set texture immediately for other code to verify if have this texture.
          material.set(textureName, texture);
      }

      return texture;
  };

  var graphicGL = {};

  graphicGL.Renderer = __WEBPACK_IMPORTED_MODULE_1_claygl_src_Renderer__["a" /* default */];

  graphicGL.Node = __WEBPACK_IMPORTED_MODULE_6_claygl_src_Node__["a" /* default */];

  graphicGL.Mesh = __WEBPACK_IMPORTED_MODULE_0_claygl_src_Mesh__["a" /* default */];

  graphicGL.Shader = __WEBPACK_IMPORTED_MODULE_4_claygl_src_Shader__["a" /* default */];

  graphicGL.Material = __WEBPACK_IMPORTED_MODULE_5_claygl_src_Material__["a" /* default */];

  graphicGL.Texture = __WEBPACK_IMPORTED_MODULE_3_claygl_src_Texture__["a" /* default */];

  graphicGL.Texture2D = __WEBPACK_IMPORTED_MODULE_2_claygl_src_Texture2D__["a" /* default */];

  // Geometries
  graphicGL.Geometry = __WEBPACK_IMPORTED_MODULE_7_claygl_src_Geometry__["a" /* default */];
  graphicGL.SphereGeometry = __WEBPACK_IMPORTED_MODULE_17_claygl_src_geometry_Sphere__["a" /* default */];
  graphicGL.PlaneGeometry = __WEBPACK_IMPORTED_MODULE_18_claygl_src_geometry_Plane__["a" /* default */];
  graphicGL.CubeGeometry = __WEBPACK_IMPORTED_MODULE_19_claygl_src_geometry_Cube__["a" /* default */];

  // Lights
  graphicGL.AmbientLight = __WEBPACK_IMPORTED_MODULE_20_claygl_src_light_Ambient__["a" /* default */];
  graphicGL.DirectionalLight = __WEBPACK_IMPORTED_MODULE_21_claygl_src_light_Directional__["a" /* default */];
  graphicGL.PointLight = __WEBPACK_IMPORTED_MODULE_22_claygl_src_light_Point__["a" /* default */];
  graphicGL.SpotLight = __WEBPACK_IMPORTED_MODULE_23_claygl_src_light_Spot__["a" /* default */];

  // Cameras
  graphicGL.PerspectiveCamera = __WEBPACK_IMPORTED_MODULE_24_claygl_src_camera_Perspective__["a" /* default */];
  graphicGL.OrthographicCamera = __WEBPACK_IMPORTED_MODULE_25_claygl_src_camera_Orthographic__["a" /* default */];

  // Math
  graphicGL.Vector2 = __WEBPACK_IMPORTED_MODULE_26_claygl_src_math_Vector2__["a" /* default */];
  graphicGL.Vector3 = __WEBPACK_IMPORTED_MODULE_27_claygl_src_math_Vector3__["a" /* default */];
  graphicGL.Vector4 = __WEBPACK_IMPORTED_MODULE_28_claygl_src_math_Vector4__["a" /* default */];

  graphicGL.Quaternion = __WEBPACK_IMPORTED_MODULE_29_claygl_src_math_Quaternion__["a" /* default */];

  graphicGL.Matrix2 = __WEBPACK_IMPORTED_MODULE_30_claygl_src_math_Matrix2__["a" /* default */];
  graphicGL.Matrix2d = __WEBPACK_IMPORTED_MODULE_31_claygl_src_math_Matrix2d__["a" /* default */];
  graphicGL.Matrix3 = __WEBPACK_IMPORTED_MODULE_32_claygl_src_math_Matrix3__["a" /* default */];
  graphicGL.Matrix4 = __WEBPACK_IMPORTED_MODULE_33_claygl_src_math_Matrix4__["a" /* default */];

  graphicGL.Plane = __WEBPACK_IMPORTED_MODULE_34_claygl_src_math_Plane__["a" /* default */];
  graphicGL.Ray = __WEBPACK_IMPORTED_MODULE_35_claygl_src_math_Ray__["a" /* default */];
  graphicGL.BoundingBox = __WEBPACK_IMPORTED_MODULE_36_claygl_src_math_BoundingBox__["a" /* default */];
  graphicGL.Frustum = __WEBPACK_IMPORTED_MODULE_37_claygl_src_math_Frustum__["a" /* default */];

  // Texture utilities

  var blankImage = __WEBPACK_IMPORTED_MODULE_11_claygl_src_util_texture__["a" /* default */].createBlank('rgba(255,255,255,0)').image;


  function nearestPowerOfTwo(val) {
      return Math.pow(2, Math.round(Math.log(val) / Math.LN2));
  }
  function convertTextureToPowerOfTwo(texture) {
      if ((texture.wrapS === __WEBPACK_IMPORTED_MODULE_3_claygl_src_Texture__["a" /* default */].REPEAT || texture.wrapT === __WEBPACK_IMPORTED_MODULE_3_claygl_src_Texture__["a" /* default */].REPEAT)
       && texture.image
       ) {
          // var canvas = document.createElement('canvas');
          var width = nearestPowerOfTwo(texture.width);
          var height = nearestPowerOfTwo(texture.height);
          if (width !== texture.width || height !== texture.height) {
              var canvas = document.createElement('canvas');
              canvas.width = width;
              canvas.height = height;
              var ctx = canvas.getContext('2d');
              ctx.drawImage(texture.image, 0, 0, width, height);
              texture.image = canvas;
          }
      }
  }
  /**
   * @param {string|HTMLImageElement|HTMLCanvasElement} imgValue
   * @param {module:echarts/ExtensionAPI} api
   * @param {Object} [textureOpts]
   * @param {Function} cb
   */
  // TODO Promise, test
  graphicGL.loadTexture = function (imgValue, api, textureOpts, cb) {
      if (typeof textureOpts === 'function') {
          cb = textureOpts;
          textureOpts = {};
      }
      textureOpts = textureOpts || {};

      var keys = Object.keys(textureOpts).sort();
      var prefix = '';
      for (var i = 0; i < keys.length; i++) {
          prefix += keys[i] + '_' + textureOpts[keys[i]] + '_';
      }

      var textureCache = api.__textureCache = api.__textureCache || new __WEBPACK_IMPORTED_MODULE_10_zrender_lib_core_LRU___default.a(20);

      if (isECharts(imgValue)) {
          var id = imgValue.__textureid__;
          var textureObj = textureCache.get(prefix + id);
          if (!textureObj) {
              var surface = new __WEBPACK_IMPORTED_MODULE_12__EChartsSurface__["a" /* default */](imgValue);
              surface.onupdate = function () {
                  api.getZr().refresh();
              };
              textureObj = {
                  texture: surface.getTexture()
              };
              for (var i = 0; i < keys.length; i++) {
                  textureObj.texture[keys[i]] = textureOpts[keys[i]];
              }
              id = imgValue.__textureid__ || '__ecgl_ec__' + textureObj.texture.__uid__;
              imgValue.__textureid__ = id;
              textureCache.put(prefix + id, textureObj);
              cb && cb(textureObj.texture);
          }
          else {
              textureObj.texture.surface.setECharts(imgValue);

              cb && cb(textureObj.texture);
          }
          return textureObj.texture;
      }
      else if (isValueImage(imgValue)) {
          var id = imgValue.__textureid__;
          var textureObj = textureCache.get(prefix + id);
          if (!textureObj) {
              textureObj = {
                  texture: new graphicGL.Texture2D({
                      image: imgValue
                  })
              };
              for (var i = 0; i < keys.length; i++) {
                  textureObj.texture[keys[i]] = textureOpts[keys[i]];
              }
              id = imgValue.__textureid__ || '__ecgl_image__' + textureObj.texture.__uid__;
              imgValue.__textureid__ = id;
              textureCache.put(prefix + id, textureObj);

              convertTextureToPowerOfTwo(textureObj.texture);
              // TODO Next tick?
              cb && cb(textureObj.texture);
          }
          return textureObj.texture;
      }
      else {
          var textureObj = textureCache.get(prefix + imgValue);
          if (textureObj) {
              if (textureObj.callbacks) {
                  // Add to pending callbacks
                  textureObj.callbacks.push(cb);
              }
              else {
                  // TODO Next tick?
                  cb && cb(textureObj.texture);
              }
          }
          else {
              // Maybe base64
              if (imgValue.match(/.hdr$|^data:application\/octet-stream/)) {
                  textureObj = {
                      callbacks: [cb]
                  };
                  var texture = __WEBPACK_IMPORTED_MODULE_11_claygl_src_util_texture__["a" /* default */].loadTexture(imgValue, {
                      exposure: textureOpts.exposure,
                      fileType: 'hdr'
                  }, function () {
                      texture.dirty();
                      textureObj.callbacks.forEach(function (cb) {
                          cb && cb(texture);
                      });
                      textureObj.callbacks = null;
                  });
                  textureObj.texture = texture;
                  textureCache.put(prefix + imgValue, textureObj);
              }
              else {
                  var texture = new graphicGL.Texture2D({
                      image: new Image()
                  });
                  for (var i = 0; i < keys.length; i++) {
                      texture[keys[i]] = textureOpts[keys[i]];
                  }

                  textureObj = {
                      texture: texture,
                      callbacks: [cb]
                  };
                  var originalImage = texture.image;
                  originalImage.onload = function () {
                      texture.image = originalImage;
                      convertTextureToPowerOfTwo(texture);

                      texture.dirty();
                      textureObj.callbacks.forEach(function (cb) {
                          cb && cb(texture);
                      });
                      textureObj.callbacks = null;
                  };
                  originalImage.src = imgValue;
                  // Use blank image as place holder.
                  texture.image = blankImage;

                  textureCache.put(prefix + imgValue, textureObj);
              }
          }

          return textureObj.texture;
      }
  };

  /**
   * Create ambientCubemap and ambientSH light. respectively to have specular and diffuse light
   * @return {Object} { specular, diffuse }
   */
  graphicGL.createAmbientCubemap = function (opt, renderer, api, cb) {
      opt = opt || {};
      var textureUrl = opt.texture;
      var exposure = __WEBPACK_IMPORTED_MODULE_16__retrieve__["a" /* default */].firstNotNull(opt.exposure, 1.0);

      var ambientCubemap = new __WEBPACK_IMPORTED_MODULE_13_claygl_src_light_AmbientCubemap__["a" /* default */]({
          intensity: __WEBPACK_IMPORTED_MODULE_16__retrieve__["a" /* default */].firstNotNull(opt.specularIntensity, 1.0)
      });
      var ambientSH = new __WEBPACK_IMPORTED_MODULE_14_claygl_src_light_AmbientSH__["a" /* default */]({
          intensity: __WEBPACK_IMPORTED_MODULE_16__retrieve__["a" /* default */].firstNotNull(opt.diffuseIntensity, 1.0),
          coefficients: [0.844, 0.712, 0.691, -0.037, 0.083, 0.167, 0.343, 0.288, 0.299, -0.041, -0.021, -0.009, -0.003, -0.041, -0.064, -0.011, -0.007, -0.004, -0.031, 0.034, 0.081, -0.060, -0.049, -0.060, 0.046, 0.056, 0.050]
      });


      ambientCubemap.cubemap = graphicGL.loadTexture(textureUrl, api, {
          exposure: exposure
      }, function () {
          // TODO Performance when multiple view
          ambientCubemap.cubemap.flipY = false;
          {
              var time = Date.now();
          }
          ambientCubemap.prefilter(renderer, 32);
          {
              var dTime = Date.now() - time;
              console.log('Prefilter environment map: ' + dTime + 'ms');
          }
          ambientSH.coefficients = __WEBPACK_IMPORTED_MODULE_15_claygl_src_util_sh__["a" /* default */].projectEnvironmentMap(renderer, ambientCubemap.cubemap, {
              lod: 1
          });

          cb && cb();

          // TODO Refresh ?
      });

      return {
          specular: ambientCubemap,
          diffuse: ambientSH
      };
  };

  /**
   * Create a blank texture for placeholder
   */
  graphicGL.createBlankTexture = __WEBPACK_IMPORTED_MODULE_11_claygl_src_util_texture__["a" /* default */].createBlank;

  /**
   * If value is image
   * @param {*}
   * @return {boolean}
   */
  graphicGL.isImage = isValueImage;

  graphicGL.additiveBlend = function (gl) {
      gl.blendEquation(gl.FUNC_ADD);
      gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
  };

  /**
   * @param {string|Array.<number>} colorStr
   * @param {Array.<number>} [rgba]
   * @return {Array.<number>} rgba
   */
  graphicGL.parseColor = function (colorStr, rgba) {
      if (colorStr instanceof Array) {
          if (!rgba) {
              rgba = [];
          }
          // Color has been parsed.
          rgba[0] = colorStr[0];
          rgba[1] = colorStr[1];
          rgba[2] = colorStr[2];
          if (colorStr.length > 3) {
              rgba[3] = colorStr[3];
          }
          else {
              rgba[3] = 1;
          }
          return rgba;
      }

      rgba = __WEBPACK_IMPORTED_MODULE_8_echarts_lib_echarts___default.a.color.parse(colorStr || '#000', rgba) || [0, 0, 0, 0];
      rgba[0] /= 255;
      rgba[1] /= 255;
      rgba[2] /= 255;
      return rgba;
  };

  /**
   * Convert alpha beta rotation to direction.
   * @param {number} alpha
   * @param {number} beta
   * @return {Array.<number>}
   */
  graphicGL.directionFromAlphaBeta = function (alpha, beta) {
      var theta = alpha / 180 * Math.PI + Math.PI / 2;
      var phi = -beta / 180 * Math.PI + Math.PI / 2;

      var dir = [];
      var r = Math.sin(theta);
      dir[0] = r * Math.cos(phi);
      dir[1] = -Math.cos(theta);
      dir[2] = r * Math.sin(phi);

      return dir;
  };
  /**
   * Get shadow resolution from shadowQuality configuration
   */
  graphicGL.getShadowResolution = function (shadowQuality) {
      var shadowResolution = 1024;
      switch (shadowQuality) {
          case 'low':
              shadowResolution = 512;
              break;
          case 'medium':
              break;
          case 'high':
              shadowResolution = 2048;
              break;
          case 'ultra':
              shadowResolution = 4096;
              break;
      }
      return shadowResolution;
  };

  /**
   * Shading utilities
   */
  graphicGL.COMMON_SHADERS = ['lambert', 'color', 'realistic', 'hatching', 'shadow'];

  /**
   * Create shader including vertex and fragment
   * @param {string} prefix.
   */
  graphicGL.createShader = function (prefix) {
      if (prefix === 'ecgl.shadow') {
          prefix = 'ecgl.displayShadow';
      }
      var vertexShaderStr = __WEBPACK_IMPORTED_MODULE_4_claygl_src_Shader__["a" /* default */].source(prefix + '.vertex');
      var fragmentShaderStr = __WEBPACK_IMPORTED_MODULE_4_claygl_src_Shader__["a" /* default */].source(prefix + '.fragment');
      if (!vertexShaderStr) {
          console.error('Vertex shader of \'%s\' not exits', prefix);
      }
      if (!fragmentShaderStr) {
          console.error('Fragment shader of \'%s\' not exits', prefix);
      }
      var shader = new __WEBPACK_IMPORTED_MODULE_4_claygl_src_Shader__["a" /* default */](vertexShaderStr, fragmentShaderStr);
      shader.name = prefix;
      return shader;
  };

  graphicGL.createMaterial = function (prefix, defines) {
      if (!(defines instanceof Array)) {
          defines = [defines];
      }
      var shader = graphicGL.createShader(prefix);
      var material = new __WEBPACK_IMPORTED_MODULE_5_claygl_src_Material__["a" /* default */]({
          shader: shader
      });
      defines.forEach(function (defineName) {
          if (typeof defineName === 'string') {
              material.define(defineName);
          }
      });
      return material;
  };
  /**
   * Set material from model.
   * @param {clay.Material} material
   * @param {module:echarts/model/Model} model
   * @param {module:echarts/ExtensionAPI} api
   */
  graphicGL.setMaterialFromModel = function (shading, material, model, api) {
      material.autoUpdateTextureStatus = false;

      var materialModel = model.getModel(shading + 'Material');
      var detailTexture = materialModel.get('detailTexture');
      var uvRepeat = __WEBPACK_IMPORTED_MODULE_16__retrieve__["a" /* default */].firstNotNull(materialModel.get('textureTiling'), 1.0);
      var uvOffset = __WEBPACK_IMPORTED_MODULE_16__retrieve__["a" /* default */].firstNotNull(materialModel.get('textureOffset'), 0.0);
      if (typeof uvRepeat === 'number') {
          uvRepeat = [uvRepeat, uvRepeat];
      }
      if (typeof uvOffset === 'number') {
          uvOffset = [uvOffset, uvOffset];
      }
      var repeatParam = (uvRepeat[0] > 1 || uvRepeat[1] > 1) ? graphicGL.Texture.REPEAT : graphicGL.Texture.CLAMP_TO_EDGE;
      var textureOpt = {
          anisotropic: 8,
          wrapS: repeatParam,
          wrapT: repeatParam
      };
      if (shading === 'realistic') {
          var roughness = materialModel.get('roughness');
          var metalness = materialModel.get('metalness');
          if (metalness != null) {
              // Try to treat as a texture, TODO More check
              if (isNaN(metalness)) {
                  material.setTextureImage('metalnessMap', metalness, api, textureOpt);
                  metalness = __WEBPACK_IMPORTED_MODULE_16__retrieve__["a" /* default */].firstNotNull(materialModel.get('metalnessAdjust'), 0.5);
              }
          }
          else {
              // Default metalness.
              metalness = 0;
          }
          if (roughness != null) {
              // Try to treat as a texture, TODO More check
              if (isNaN(roughness)) {
                  material.setTextureImage('roughnessMap', roughness, api, textureOpt);
                  roughness = __WEBPACK_IMPORTED_MODULE_16__retrieve__["a" /* default */].firstNotNull(materialModel.get('roughnessAdjust'), 0.5);
              }
          }
          else {
              // Default roughness.
              roughness = 0.5;
          }
          var normalTextureVal = materialModel.get('normalTexture');
          material.setTextureImage('detailMap', detailTexture, api, textureOpt);
          material.setTextureImage('normalMap', normalTextureVal, api, textureOpt);
          material.set({
              roughness: roughness,
              metalness: metalness,
              detailUvRepeat: uvRepeat,
              detailUvOffset: uvOffset
          });
          // var normalTexture = material.get('normalMap');
          // if (normalTexture) {
              // PENDING
              // normalTexture.format = Texture.SRGB;
          // }
      }
      else if (shading === 'lambert') {
          material.setTextureImage('detailMap', detailTexture, api, textureOpt);
          material.set({
              detailUvRepeat: uvRepeat,
              detailUvOffset: uvOffset
          });
      }
      else if (shading === 'color') {
          material.setTextureImage('detailMap', detailTexture, api, textureOpt);
          material.set({
              detailUvRepeat: uvRepeat,
              detailUvOffset: uvOffset
          });
      }
      else if (shading === 'hatching') {
          var tams = materialModel.get('hatchingTextures') || [];
          if (tams.length < 6) {
              {
                  console.error('Invalid hatchingTextures.');
              }
          }
          for (var i = 0; i < 6; i++) {
              material.setTextureImage('hatch' + (i + 1), tams[i], api, {
                  anisotropic: 8,
                  wrapS: graphicGL.Texture.REPEAT,
                  wrapT: graphicGL.Texture.REPEAT
              });
          }
          material.set({
              detailUvRepeat: uvRepeat,
              detailUvOffset: uvOffset
          });
      }
  };

  graphicGL.updateVertexAnimation = function (
      mappingAttributes, previousMesh, currentMesh, seriesModel
  ) {
      var enableAnimation = seriesModel.get('animation');
      var duration = seriesModel.get('animationDurationUpdate');
      var easing = seriesModel.get('animationEasingUpdate');
      var shadowDepthMaterial = currentMesh.shadowDepthMaterial;

      if (enableAnimation && previousMesh && duration > 0
      // Only animate when bar count are not changed
      && previousMesh.geometry.vertexCount === currentMesh.geometry.vertexCount
      ) {
          currentMesh.material.define('vertex', 'VERTEX_ANIMATION');
          currentMesh.ignorePreZ = true;
          if (shadowDepthMaterial) {
              shadowDepthMaterial.define('vertex', 'VERTEX_ANIMATION');
          }
          for (var i = 0; i < mappingAttributes.length; i++) {
              currentMesh.geometry.attributes[mappingAttributes[i][0]].value =
              previousMesh.geometry.attributes[mappingAttributes[i][1]].value;
          }
          currentMesh.geometry.dirty();
          currentMesh.__percent = 0;
          currentMesh.material.set('percent', 0);
          currentMesh.stopAnimation();
          currentMesh.animate()
              .when(duration, {
                  __percent: 1
              })
              .during(function () {
                  currentMesh.material.set('percent', currentMesh.__percent);
                  if (shadowDepthMaterial) {
                      shadowDepthMaterial.set('percent', currentMesh.__percent);
                  }
              })
              .done(function () {
                  currentMesh.ignorePreZ = false;
                  currentMesh.material.undefine('vertex', 'VERTEX_ANIMATION');
                  if (shadowDepthMaterial) {
                      shadowDepthMaterial.undefine('vertex', 'VERTEX_ANIMATION');
                  }
              })
              .start(easing);
      }
      else {
          currentMesh.material.undefine('vertex', 'VERTEX_ANIMATION');
          if (shadowDepthMaterial) {
              shadowDepthMaterial.undefine('vertex', 'VERTEX_ANIMATION');
          }
      }
  };

  /* harmony default export */ __webpack_exports__["a"] = (graphicGL);

  /***/ }),
  /* 2 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);


  var retrieve = {

      firstNotNull: function () {
          for (var i = 0, len = arguments.length; i < len; i++) {
              if (arguments[i] != null) {
                  return arguments[i];
              }
          }
      },

      /**
       * @param {module:echarts/data/List} data
       * @param {Object} payload Contains dataIndex (means rawIndex) / dataIndexInside / name
       *                         each of which can be Array or primary type.
       * @return {number|Array.<number>} dataIndex If not found, return undefined/null.
       */
      queryDataIndex: function (data, payload) {
          if (payload.dataIndexInside != null) {
              return payload.dataIndexInside;
          }
          else if (payload.dataIndex != null) {
              return __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.isArray(payload.dataIndex)
                  ? __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.map(payload.dataIndex, function (value) {
                      return data.indexOfRawIndex(value);
                  })
                  : data.indexOfRawIndex(payload.dataIndex);
          }
          else if (payload.name != null) {
              return __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.isArray(payload.name)
                  ? __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.map(payload.name, function (value) {
                      return data.indexOfName(value);
                  })
                  : data.indexOfName(payload.name);
          }
      }
  };

  /* harmony default export */ __webpack_exports__["a"] = (retrieve);

  /***/ }),
  /* 3 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__ = __webpack_require__(12);


  /**
   * @constructor
   * @alias clay.Vector3
   * @param {number} x
   * @param {number} y
   * @param {number} z
   */
  var Vector3 = function(x, y, z) {

      x = x || 0;
      y = y || 0;
      z = z || 0;

      /**
       * Storage of Vector3, read and write of x, y, z will change the values in array
       * All methods also operate on the array instead of x, y, z components
       * @name array
       * @type {Float32Array}
       * @memberOf clay.Vector3#
       */
      this.array = __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].fromValues(x, y, z);

      /**
       * Dirty flag is used by the Node to determine
       * if the matrix is updated to latest
       * @name _dirty
       * @type {boolean}
       * @memberOf clay.Vector3#
       */
      this._dirty = true;
  };

  Vector3.prototype = {

      constructor: Vector3,

      /**
       * Add b to self
       * @param  {clay.Vector3} b
       * @return {clay.Vector3}
       */
      add: function (b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].add(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Set x, y and z components
       * @param  {number}  x
       * @param  {number}  y
       * @param  {number}  z
       * @return {clay.Vector3}
       */
      set: function (x, y, z) {
          this.array[0] = x;
          this.array[1] = y;
          this.array[2] = z;
          this._dirty = true;
          return this;
      },

      /**
       * Set x, y and z components from array
       * @param  {Float32Array|number[]} arr
       * @return {clay.Vector3}
       */
      setArray: function (arr) {
          this.array[0] = arr[0];
          this.array[1] = arr[1];
          this.array[2] = arr[2];

          this._dirty = true;
          return this;
      },

      /**
       * Clone a new Vector3
       * @return {clay.Vector3}
       */
      clone: function () {
          return new Vector3(this.x, this.y, this.z);
      },

      /**
       * Copy from b
       * @param  {clay.Vector3} b
       * @return {clay.Vector3}
       */
      copy: function (b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].copy(this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Cross product of self and b, written to a Vector3 out
       * @param  {clay.Vector3} a
       * @param  {clay.Vector3} b
       * @return {clay.Vector3}
       */
      cross: function (a, b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].cross(this.array, a.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Alias for distance
       * @param  {clay.Vector3} b
       * @return {number}
       */
      dist: function (b) {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].dist(this.array, b.array);
      },

      /**
       * Distance between self and b
       * @param  {clay.Vector3} b
       * @return {number}
       */
      distance: function (b) {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].distance(this.array, b.array);
      },

      /**
       * Alias for divide
       * @param  {clay.Vector3} b
       * @return {clay.Vector3}
       */
      div: function (b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].div(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Divide self by b
       * @param  {clay.Vector3} b
       * @return {clay.Vector3}
       */
      divide: function (b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].divide(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Dot product of self and b
       * @param  {clay.Vector3} b
       * @return {number}
       */
      dot: function (b) {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].dot(this.array, b.array);
      },

      /**
       * Alias of length
       * @return {number}
       */
      len: function () {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].len(this.array);
      },

      /**
       * Calculate the length
       * @return {number}
       */
      length: function () {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].length(this.array);
      },
      /**
       * Linear interpolation between a and b
       * @param  {clay.Vector3} a
       * @param  {clay.Vector3} b
       * @param  {number}  t
       * @return {clay.Vector3}
       */
      lerp: function (a, b, t) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].lerp(this.array, a.array, b.array, t);
          this._dirty = true;
          return this;
      },

      /**
       * Minimum of self and b
       * @param  {clay.Vector3} b
       * @return {clay.Vector3}
       */
      min: function (b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].min(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Maximum of self and b
       * @param  {clay.Vector3} b
       * @return {clay.Vector3}
       */
      max: function (b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].max(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Alias for multiply
       * @param  {clay.Vector3} b
       * @return {clay.Vector3}
       */
      mul: function (b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].mul(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Mutiply self and b
       * @param  {clay.Vector3} b
       * @return {clay.Vector3}
       */
      multiply: function (b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].multiply(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Negate self
       * @return {clay.Vector3}
       */
      negate: function () {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].negate(this.array, this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Normalize self
       * @return {clay.Vector3}
       */
      normalize: function () {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].normalize(this.array, this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Generate random x, y, z components with a given scale
       * @param  {number} scale
       * @return {clay.Vector3}
       */
      random: function (scale) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].random(this.array, scale);
          this._dirty = true;
          return this;
      },

      /**
       * Scale self
       * @param  {number}  scale
       * @return {clay.Vector3}
       */
      scale: function (s) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].scale(this.array, this.array, s);
          this._dirty = true;
          return this;
      },

      /**
       * Scale b and add to self
       * @param  {clay.Vector3} b
       * @param  {number}  scale
       * @return {clay.Vector3}
       */
      scaleAndAdd: function (b, s) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].scaleAndAdd(this.array, this.array, b.array, s);
          this._dirty = true;
          return this;
      },

      /**
       * Alias for squaredDistance
       * @param  {clay.Vector3} b
       * @return {number}
       */
      sqrDist: function (b) {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].sqrDist(this.array, b.array);
      },

      /**
       * Squared distance between self and b
       * @param  {clay.Vector3} b
       * @return {number}
       */
      squaredDistance: function (b) {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].squaredDistance(this.array, b.array);
      },

      /**
       * Alias for squaredLength
       * @return {number}
       */
      sqrLen: function () {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].sqrLen(this.array);
      },

      /**
       * Squared length of self
       * @return {number}
       */
      squaredLength: function () {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].squaredLength(this.array);
      },

      /**
       * Alias for subtract
       * @param  {clay.Vector3} b
       * @return {clay.Vector3}
       */
      sub: function (b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].sub(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Subtract b from self
       * @param  {clay.Vector3} b
       * @return {clay.Vector3}
       */
      subtract: function (b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].subtract(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Transform self with a Matrix3 m
       * @param  {clay.Matrix3} m
       * @return {clay.Vector3}
       */
      transformMat3: function (m) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].transformMat3(this.array, this.array, m.array);
          this._dirty = true;
          return this;
      },

      /**
       * Transform self with a Matrix4 m
       * @param  {clay.Matrix4} m
       * @return {clay.Vector3}
       */
      transformMat4: function (m) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].transformMat4(this.array, this.array, m.array);
          this._dirty = true;
          return this;
      },
      /**
       * Transform self with a Quaternion q
       * @param  {clay.Quaternion} q
       * @return {clay.Vector3}
       */
      transformQuat: function (q) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].transformQuat(this.array, this.array, q.array);
          this._dirty = true;
          return this;
      },

      /**
       * Trasnform self into projection space with m
       * @param  {clay.Matrix4} m
       * @return {clay.Vector3}
       */
      applyProjection: function (m) {
          var v = this.array;
          m = m.array;

          // Perspective projection
          if (m[15] === 0) {
              var w = -1 / v[2];
              v[0] = m[0] * v[0] * w;
              v[1] = m[5] * v[1] * w;
              v[2] = (m[10] * v[2] + m[14]) * w;
          }
          else {
              v[0] = m[0] * v[0] + m[12];
              v[1] = m[5] * v[1] + m[13];
              v[2] = m[10] * v[2] + m[14];
          }
          this._dirty = true;

          return this;
      },

      eulerFromQuat: function(q, order) {
          Vector3.eulerFromQuat(this, q, order);
      },

      eulerFromMat3: function (m, order) {
          Vector3.eulerFromMat3(this, m, order);
      },

      toString: function() {
          return '[' + Array.prototype.join.call(this.array, ',') + ']';
      },

      toArray: function () {
          return Array.prototype.slice.call(this.array);
      }
  };

  var defineProperty = Object.defineProperty;
  // Getter and Setter
  if (defineProperty) {

      var proto = Vector3.prototype;
      /**
       * @name x
       * @type {number}
       * @memberOf clay.Vector3
       * @instance
       */
      defineProperty(proto, 'x', {
          get: function () {
              return this.array[0];
          },
          set: function (value) {
              this.array[0] = value;
              this._dirty = true;
          }
      });

      /**
       * @name y
       * @type {number}
       * @memberOf clay.Vector3
       * @instance
       */
      defineProperty(proto, 'y', {
          get: function () {
              return this.array[1];
          },
          set: function (value) {
              this.array[1] = value;
              this._dirty = true;
          }
      });

      /**
       * @name z
       * @type {number}
       * @memberOf clay.Vector3
       * @instance
       */
      defineProperty(proto, 'z', {
          get: function () {
              return this.array[2];
          },
          set: function (value) {
              this.array[2] = value;
              this._dirty = true;
          }
      });
  }


  // Supply methods that are not in place

  /**
   * @param  {clay.Vector3} out
   * @param  {clay.Vector3} a
   * @param  {clay.Vector3} b
   * @return {clay.Vector3}
   */
  Vector3.add = function(out, a, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].add(out.array, a.array, b.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Vector3} out
   * @param  {number}  x
   * @param  {number}  y
   * @param  {number}  z
   * @return {clay.Vector3}
   */
  Vector3.set = function(out, x, y, z) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].set(out.array, x, y, z);
      out._dirty = true;
  };

  /**
   * @param  {clay.Vector3} out
   * @param  {clay.Vector3} b
   * @return {clay.Vector3}
   */
  Vector3.copy = function(out, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].copy(out.array, b.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Vector3} out
   * @param  {clay.Vector3} a
   * @param  {clay.Vector3} b
   * @return {clay.Vector3}
   */
  Vector3.cross = function(out, a, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].cross(out.array, a.array, b.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Vector3} a
   * @param  {clay.Vector3} b
   * @return {number}
   */
  Vector3.dist = function(a, b) {
      return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].distance(a.array, b.array);
  };

  /**
   * @function
   * @param  {clay.Vector3} a
   * @param  {clay.Vector3} b
   * @return {number}
   */
  Vector3.distance = Vector3.dist;

  /**
   * @param  {clay.Vector3} out
   * @param  {clay.Vector3} a
   * @param  {clay.Vector3} b
   * @return {clay.Vector3}
   */
  Vector3.div = function(out, a, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].divide(out.array, a.array, b.array);
      out._dirty = true;
      return out;
  };

  /**
   * @function
   * @param  {clay.Vector3} out
   * @param  {clay.Vector3} a
   * @param  {clay.Vector3} b
   * @return {clay.Vector3}
   */
  Vector3.divide = Vector3.div;

  /**
   * @param  {clay.Vector3} a
   * @param  {clay.Vector3} b
   * @return {number}
   */
  Vector3.dot = function(a, b) {
      return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].dot(a.array, b.array);
  };

  /**
   * @param  {clay.Vector3} a
   * @return {number}
   */
  Vector3.len = function(b) {
      return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].length(b.array);
  };

  // Vector3.length = Vector3.len;

  /**
   * @param  {clay.Vector3} out
   * @param  {clay.Vector3} a
   * @param  {clay.Vector3} b
   * @param  {number}  t
   * @return {clay.Vector3}
   */
  Vector3.lerp = function(out, a, b, t) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].lerp(out.array, a.array, b.array, t);
      out._dirty = true;
      return out;
  };
  /**
   * @param  {clay.Vector3} out
   * @param  {clay.Vector3} a
   * @param  {clay.Vector3} b
   * @return {clay.Vector3}
   */
  Vector3.min = function(out, a, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].min(out.array, a.array, b.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Vector3} out
   * @param  {clay.Vector3} a
   * @param  {clay.Vector3} b
   * @return {clay.Vector3}
   */
  Vector3.max = function(out, a, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].max(out.array, a.array, b.array);
      out._dirty = true;
      return out;
  };
  /**
   * @param  {clay.Vector3} out
   * @param  {clay.Vector3} a
   * @param  {clay.Vector3} b
   * @return {clay.Vector3}
   */
  Vector3.mul = function(out, a, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].multiply(out.array, a.array, b.array);
      out._dirty = true;
      return out;
  };
  /**
   * @function
   * @param  {clay.Vector3} out
   * @param  {clay.Vector3} a
   * @param  {clay.Vector3} b
   * @return {clay.Vector3}
   */
  Vector3.multiply = Vector3.mul;
  /**
   * @param  {clay.Vector3} out
   * @param  {clay.Vector3} a
   * @return {clay.Vector3}
   */
  Vector3.negate = function(out, a) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].negate(out.array, a.array);
      out._dirty = true;
      return out;
  };
  /**
   * @param  {clay.Vector3} out
   * @param  {clay.Vector3} a
   * @return {clay.Vector3}
   */
  Vector3.normalize = function(out, a) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].normalize(out.array, a.array);
      out._dirty = true;
      return out;
  };
  /**
   * @param  {clay.Vector3} out
   * @param  {number}  scale
   * @return {clay.Vector3}
   */
  Vector3.random = function(out, scale) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].random(out.array, scale);
      out._dirty = true;
      return out;
  };
  /**
   * @param  {clay.Vector3} out
   * @param  {clay.Vector3} a
   * @param  {number}  scale
   * @return {clay.Vector3}
   */
  Vector3.scale = function(out, a, scale) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].scale(out.array, a.array, scale);
      out._dirty = true;
      return out;
  };
  /**
   * @param  {clay.Vector3} out
   * @param  {clay.Vector3} a
   * @param  {clay.Vector3} b
   * @param  {number}  scale
   * @return {clay.Vector3}
   */
  Vector3.scaleAndAdd = function(out, a, b, scale) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].scaleAndAdd(out.array, a.array, b.array, scale);
      out._dirty = true;
      return out;
  };
  /**
   * @param  {clay.Vector3} a
   * @param  {clay.Vector3} b
   * @return {number}
   */
  Vector3.sqrDist = function(a, b) {
      return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].sqrDist(a.array, b.array);
  };
  /**
   * @function
   * @param  {clay.Vector3} a
   * @param  {clay.Vector3} b
   * @return {number}
   */
  Vector3.squaredDistance = Vector3.sqrDist;
  /**
   * @param  {clay.Vector3} a
   * @return {number}
   */
  Vector3.sqrLen = function(a) {
      return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].sqrLen(a.array);
  };
  /**
   * @function
   * @param  {clay.Vector3} a
   * @return {number}
   */
  Vector3.squaredLength = Vector3.sqrLen;

  /**
   * @param  {clay.Vector3} out
   * @param  {clay.Vector3} a
   * @param  {clay.Vector3} b
   * @return {clay.Vector3}
   */
  Vector3.sub = function(out, a, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].subtract(out.array, a.array, b.array);
      out._dirty = true;
      return out;
  };
  /**
   * @function
   * @param  {clay.Vector3} out
   * @param  {clay.Vector3} a
   * @param  {clay.Vector3} b
   * @return {clay.Vector3}
   */
  Vector3.subtract = Vector3.sub;

  /**
   * @param  {clay.Vector3} out
   * @param  {clay.Vector3} a
   * @param  {Matrix3} m
   * @return {clay.Vector3}
   */
  Vector3.transformMat3 = function(out, a, m) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].transformMat3(out.array, a.array, m.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Vector3} out
   * @param  {clay.Vector3} a
   * @param  {clay.Matrix4} m
   * @return {clay.Vector3}
   */
  Vector3.transformMat4 = function(out, a, m) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].transformMat4(out.array, a.array, m.array);
      out._dirty = true;
      return out;
  };
  /**
   * @param  {clay.Vector3} out
   * @param  {clay.Vector3} a
   * @param  {clay.Quaternion} q
   * @return {clay.Vector3}
   */
  Vector3.transformQuat = function(out, a, q) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec3__["a" /* default */].transformQuat(out.array, a.array, q.array);
      out._dirty = true;
      return out;
  };

  function clamp(val, min, max) {
      return val < min ? min : (val > max ? max : val);
  }
  var atan2 = Math.atan2;
  var asin = Math.asin;
  var abs = Math.abs;
  /**
   * Convert quaternion to euler angle
   * Quaternion must be normalized
   * From three.js
   */
  Vector3.eulerFromQuat = function (out, q, order) {
      out._dirty = true;
      q = q.array;

      var target = out.array;
      var x = q[0], y = q[1], z = q[2], w = q[3];
      var x2 = x * x;
      var y2 = y * y;
      var z2 = z * z;
      var w2 = w * w;

      var order = (order || 'XYZ').toUpperCase();

      switch (order) {
          case 'XYZ':
              target[0] = atan2(2 * (x * w - y * z), (w2 - x2 - y2 + z2));
              target[1] = asin(clamp(2 * (x * z + y * w), - 1, 1));
              target[2] = atan2(2 * (z * w - x * y), (w2 + x2 - y2 - z2));
              break;
          case 'YXZ':
              target[0] = asin(clamp(2 * (x * w - y * z), - 1, 1));
              target[1] = atan2(2 * (x * z + y * w), (w2 - x2 - y2 + z2));
              target[2] = atan2(2 * (x * y + z * w), (w2 - x2 + y2 - z2));
              break;
          case 'ZXY':
              target[0] = asin(clamp(2 * (x * w + y * z), - 1, 1));
              target[1] = atan2(2 * (y * w - z * x), (w2 - x2 - y2 + z2));
              target[2] = atan2(2 * (z * w - x * y), (w2 - x2 + y2 - z2));
              break;
          case 'ZYX':
              target[0] = atan2(2 * (x * w + z * y), (w2 - x2 - y2 + z2));
              target[1] = asin(clamp(2 * (y * w - x * z), - 1, 1));
              target[2] = atan2(2 * (x * y + z * w), (w2 + x2 - y2 - z2));
              break;
          case 'YZX':
              target[0] = atan2(2 * (x * w - z * y), (w2 - x2 + y2 - z2));
              target[1] = atan2(2 * (y * w - x * z), (w2 + x2 - y2 - z2));
              target[2] = asin(clamp(2 * (x * y + z * w), - 1, 1));
              break;
          case 'XZY':
              target[0] = atan2(2 * (x * w + y * z), (w2 - x2 + y2 - z2));
              target[1] = atan2(2 * (x * z + y * w), (w2 + x2 - y2 - z2));
              target[2] = asin(clamp(2 * (z * w - x * y), - 1, 1));
              break;
          default:
              console.warn('Unkown order: ' + order);
      }
      return out;
  };

  /**
   * Convert rotation matrix to euler angle
   * from three.js
   */
  Vector3.eulerFromMat3 = function (out, m, order) {
      // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
      var te = m.array;
      var m11 = te[0], m12 = te[3], m13 = te[6];
      var m21 = te[1], m22 = te[4], m23 = te[7];
      var m31 = te[2], m32 = te[5], m33 = te[8];
      var target = out.array;

      var order = (order || 'XYZ').toUpperCase();

      switch (order) {
          case 'XYZ':
              target[1] = asin(clamp(m13, -1, 1));
              if (abs(m13) < 0.99999) {
                  target[0] = atan2(-m23, m33);
                  target[2] = atan2(-m12, m11);
              }
              else {
                  target[0] = atan2(m32, m22);
                  target[2] = 0;
              }
              break;
          case 'YXZ':
              target[0] = asin(-clamp(m23, -1, 1));
              if (abs(m23) < 0.99999) {
                  target[1] = atan2(m13, m33);
                  target[2] = atan2(m21, m22);
              }
              else {
                  target[1] = atan2(-m31, m11);
                  target[2] = 0;
              }
              break;
          case 'ZXY':
              target[0] = asin(clamp(m32, -1, 1));
              if (abs(m32) < 0.99999) {
                  target[1] = atan2(-m31, m33);
                  target[2] = atan2(-m12, m22);
              }
              else {
                  target[1] = 0;
                  target[2] = atan2(m21, m11);
              }
              break;
          case 'ZYX':
              target[1] = asin(-clamp(m31, -1, 1));
              if (abs(m31) < 0.99999) {
                  target[0] = atan2(m32, m33);
                  target[2] = atan2(m21, m11);
              }
              else {
                  target[0] = 0;
                  target[2] = atan2(-m12, m22);
              }
              break;
          case 'YZX':
              target[2] = asin(clamp(m21, -1, 1));
              if (abs(m21) < 0.99999) {
                  target[0] = atan2(-m23, m22);
                  target[1] = atan2(-m31, m11);
              }
              else {
                  target[0] = 0;
                  target[1] = atan2(m13, m33);
              }
              break;
          case 'XZY':
              target[2] = asin(-clamp(m12, -1, 1));
              if (abs(m12) < 0.99999) {
                  target[0] = atan2(m32, m22);
                  target[1] = atan2(m13, m11);
              }
              else {
                  target[0] = atan2(-m23, m33);
                  target[1] = 0;
              }
              break;
          default:
              console.warn('Unkown order: ' + order);
      }
      out._dirty = true;

      return out;
  };

  Object.defineProperties(Vector3, {
      /**
       * @type {clay.Vector3}
       * @readOnly
       * @memberOf clay.Vector3
       */
      POSITIVE_X: {
          get: function () {
              return new Vector3(1, 0, 0);
          }
      },
      /**
       * @type {clay.Vector3}
       * @readOnly
       * @memberOf clay.Vector3
       */
      NEGATIVE_X: {
          get: function () {
              return new Vector3(-1, 0, 0);
          }
      },
      /**
       * @type {clay.Vector3}
       * @readOnly
       * @memberOf clay.Vector3
       */
      POSITIVE_Y: {
          get: function () {
              return new Vector3(0, 1, 0);
          }
      },
      /**
       * @type {clay.Vector3}
       * @readOnly
       * @memberOf clay.Vector3
       */
      NEGATIVE_Y: {
          get: function () {
              return new Vector3(0, -1, 0);
          }
      },
      /**
       * @type {clay.Vector3}
       * @readOnly
       * @memberOf clay.Vector3
       */
      POSITIVE_Z: {
          get: function () {
              return new Vector3(0, 0, 1);
          }
      },
      /**
       * @type {clay.Vector3}
       * @readOnly
       */
      NEGATIVE_Z: {
          get: function () {
              return new Vector3(0, 0, -1);
          }
      },
      /**
       * @type {clay.Vector3}
       * @readOnly
       * @memberOf clay.Vector3
       */
      UP: {
          get: function () {
              return new Vector3(0, 1, 0);
          }
      },
      /**
       * @type {clay.Vector3}
       * @readOnly
       * @memberOf clay.Vector3
       */
      ZERO: {
          get: function () {
              return new Vector3();
          }
      }
  });

  /* harmony default export */ __webpack_exports__["a"] = (Vector3);


  /***/ }),
  /* 4 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Base__ = __webpack_require__(8);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_glenum__ = __webpack_require__(11);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_Cache__ = __webpack_require__(57);
  /**
   * Base class for all textures like compressed texture, texture2d, texturecube
   * TODO mapping
   */




  /**
   * @constructor
   * @alias clay.Texture
   * @extends clay.core.Base
   */
  var Texture = __WEBPACK_IMPORTED_MODULE_0__core_Base__["a" /* default */].extend( /** @lends clay.Texture# */ {
      /**
       * Texture width, readonly when the texture source is image
       * @type {number}
       */
      width: 512,
      /**
       * Texture height, readonly when the texture source is image
       * @type {number}
       */
      height: 512,
      /**
       * Texel data type.
       * Possible values:
       *  + {@link clay.Texture.UNSIGNED_BYTE}
       *  + {@link clay.Texture.HALF_FLOAT}
       *  + {@link clay.Texture.FLOAT}
       *  + {@link clay.Texture.UNSIGNED_INT_24_8_WEBGL}
       *  + {@link clay.Texture.UNSIGNED_INT}
       * @type {number}
       */
      type: __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].UNSIGNED_BYTE,
      /**
       * Format of texel data
       * Possible values:
       *  + {@link clay.Texture.RGBA}
       *  + {@link clay.Texture.DEPTH_COMPONENT}
       *  + {@link clay.Texture.DEPTH_STENCIL}
       * @type {number}
       */
      format: __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].RGBA,
      /**
       * Texture wrap. Default to be REPEAT.
       * Possible values:
       *  + {@link clay.Texture.CLAMP_TO_EDGE}
       *  + {@link clay.Texture.REPEAT}
       *  + {@link clay.Texture.MIRRORED_REPEAT}
       * @type {number}
       */
      wrapS: __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].REPEAT,
      /**
       * Texture wrap. Default to be REPEAT.
       * Possible values:
       *  + {@link clay.Texture.CLAMP_TO_EDGE}
       *  + {@link clay.Texture.REPEAT}
       *  + {@link clay.Texture.MIRRORED_REPEAT}
       * @type {number}
       */
      wrapT: __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].REPEAT,
      /**
       * Possible values:
       *  + {@link clay.Texture.NEAREST}
       *  + {@link clay.Texture.LINEAR}
       *  + {@link clay.Texture.NEAREST_MIPMAP_NEAREST}
       *  + {@link clay.Texture.LINEAR_MIPMAP_NEAREST}
       *  + {@link clay.Texture.NEAREST_MIPMAP_LINEAR}
       *  + {@link clay.Texture.LINEAR_MIPMAP_LINEAR}
       * @type {number}
       */
      minFilter: __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].LINEAR_MIPMAP_LINEAR,
      /**
       * Possible values:
       *  + {@link clay.Texture.NEAREST}
       *  + {@link clay.Texture.LINEAR}
       * @type {number}
       */
      magFilter: __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].LINEAR,
      /**
       * If enable mimap.
       * @type {boolean}
       */
      useMipmap: true,

      /**
       * Anisotropic filtering, enabled if value is larger than 1
       * @see https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_filter_anisotropic
       * @type {number}
       */
      anisotropic: 1,
      // pixelStorei parameters, not available when texture is used as render target
      // http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml
      /**
       * If flip in y axis for given image source
       * @type {boolean}
       * @default true
       */
      flipY: true,

      /**
       * A flag to indicate if texture source is sRGB
       */
      sRGB: true,
      /**
       * @type {number}
       * @default 4
       */
      unpackAlignment: 4,
      /**
       * @type {boolean}
       * @default false
       */
      premultiplyAlpha: false,

      /**
       * Dynamic option for texture like video
       * @type {boolean}
       */
      dynamic: false,

      NPOT: false,

      // PENDING
      // Init it here to avoid deoptimization when it's assigned in application dynamically
      __used: 0

  }, function () {
      this._cache = new __WEBPACK_IMPORTED_MODULE_2__core_Cache__["a" /* default */]();
  },
  /** @lends clay.Texture.prototype */
  {

      getWebGLTexture: function (renderer) {
          var _gl = renderer.gl;
          var cache = this._cache;
          cache.use(renderer.__uid__);

          if (cache.miss('webgl_texture')) {
              // In a new gl context, create new texture and set dirty true
              cache.put('webgl_texture', _gl.createTexture());
          }
          if (this.dynamic) {
              this.update(renderer);
          }
          else if (cache.isDirty()) {
              this.update(renderer);
              cache.fresh();
          }

          return cache.get('webgl_texture');
      },

      bind: function () {},
      unbind: function () {},

      /**
       * Mark texture is dirty and update in the next frame
       */
      dirty: function () {
          if (this._cache) {
              this._cache.dirtyAll();
          }
      },

      update: function (renderer) {},

      // Update the common parameters of texture
      updateCommon: function (renderer) {
          var _gl = renderer.gl;
          _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, this.flipY);
          _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);
          _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, this.unpackAlignment);

          // Use of none-power of two texture
          // http://www.khronos.org/webgl/wiki/WebGL_and_OpenGL_Differences
          if (this.format === __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].DEPTH_COMPONENT) {
              this.useMipmap = false;
          }

          var sRGBExt = renderer.getGLExtension('EXT_sRGB');
          // Fallback
          if (this.format === Texture.SRGB && !sRGBExt) {
              this.format = Texture.RGB;
          }
          if (this.format === Texture.SRGB_ALPHA && !sRGBExt) {
              this.format = Texture.RGBA;
          }

          this.NPOT = !this.isPowerOfTwo();
      },

      getAvailableWrapS: function () {
          if (this.NPOT) {
              return __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].CLAMP_TO_EDGE;
          }
          return this.wrapS;
      },
      getAvailableWrapT: function () {
          if (this.NPOT) {
              return __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].CLAMP_TO_EDGE;
          }
          return this.wrapT;
      },
      getAvailableMinFilter: function () {
          var minFilter = this.minFilter;
          if (this.NPOT || !this.useMipmap) {
              if (minFilter === __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].NEAREST_MIPMAP_NEAREST ||
                  minFilter === __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].NEAREST_MIPMAP_LINEAR
              ) {
                  return __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].NEAREST;
              }
              else if (minFilter === __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].LINEAR_MIPMAP_LINEAR ||
                  minFilter === __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].LINEAR_MIPMAP_NEAREST
              ) {
                  return __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].LINEAR;
              }
              else {
                  return minFilter;
              }
          }
          else {
              return minFilter;
          }
      },
      getAvailableMagFilter: function () {
          return this.magFilter;
      },

      nextHighestPowerOfTwo: function (x) {
          --x;
          for (var i = 1; i < 32; i <<= 1) {
              x = x | x >> i;
          }
          return x + 1;
      },
      /**
       * @param  {clay.Renderer} renderer
       */
      dispose: function (renderer) {

          var cache = this._cache;

          cache.use(renderer.__uid__);

          var webglTexture = cache.get('webgl_texture');
          if (webglTexture){
              renderer.gl.deleteTexture(webglTexture);
          }
          cache.deleteContext(renderer.__uid__);

      },
      /**
       * Test if image of texture is valid and loaded.
       * @return {boolean}
       */
      isRenderable: function () {},

      /**
       * Test if texture size is power of two
       * @return {boolean}
       */
      isPowerOfTwo: function () {}
  });

  Object.defineProperty(Texture.prototype, 'width', {
      get: function () {
          return this._width;
      },
      set: function (value) {
          this._width = value;
      }
  });
  Object.defineProperty(Texture.prototype, 'height', {
      get: function () {
          return this._height;
      },
      set: function (value) {
          this._height = value;
      }
  });

  /* DataType */

  /**
   * @type {number}
   */
  Texture.BYTE = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].BYTE;
  /**
   * @type {number}
   */
  Texture.UNSIGNED_BYTE = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].UNSIGNED_BYTE;
  /**
   * @type {number}
   */
  Texture.SHORT = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].SHORT;
  /**
   * @type {number}
   */
  Texture.UNSIGNED_SHORT = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].UNSIGNED_SHORT;
  /**
   * @type {number}
   */
  Texture.INT = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].INT;
  /**
   * @type {number}
   */
  Texture.UNSIGNED_INT = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].UNSIGNED_INT;
  /**
   * @type {number}
   */
  Texture.FLOAT = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].FLOAT;
  /**
   * @type {number}
   */
  Texture.HALF_FLOAT = 0x8D61;

  /**
   * UNSIGNED_INT_24_8_WEBGL for WEBGL_depth_texture extension
   * @type {number}
   */
  Texture.UNSIGNED_INT_24_8_WEBGL = 34042;

  /* PixelFormat */
  /**
   * @type {number}
   */
  Texture.DEPTH_COMPONENT = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].DEPTH_COMPONENT;
  /**
   * @type {number}
   */
  Texture.DEPTH_STENCIL = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].DEPTH_STENCIL;
  /**
   * @type {number}
   */
  Texture.ALPHA = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].ALPHA;
  /**
   * @type {number}
   */
  Texture.RGB = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].RGB;
  /**
   * @type {number}
   */
  Texture.RGBA = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].RGBA;
  /**
   * @type {number}
   */
  Texture.LUMINANCE = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].LUMINANCE;
  /**
   * @type {number}
   */
  Texture.LUMINANCE_ALPHA = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].LUMINANCE_ALPHA;

  /**
   * @see https://www.khronos.org/registry/webgl/extensions/EXT_sRGB/
   * @type {number}
   */
  Texture.SRGB = 0x8C40;
  /**
   * @see https://www.khronos.org/registry/webgl/extensions/EXT_sRGB/
   * @type {number}
   */
  Texture.SRGB_ALPHA = 0x8C42;

  /* Compressed Texture */
  // https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API/Constants
  // s3tc
  Texture.COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
  Texture.COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
  Texture.COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
  Texture.COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;

  // etc
  Texture.COMPRESSED_RGB_ETC1_WEBGL = 0x8D64;

  // pvrtc
  Texture.COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00;
  Texture.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02;
  Texture.COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01;
  Texture.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03;

  // atc
  Texture.COMPRESSED_RGB_ATC_WEBGL = 0x8C92;
  Texture.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL = 0x8C93;
  Texture.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL = 0x87EE;

  /* TextureMagFilter */
  /**
   * @type {number}
   */
  Texture.NEAREST = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].NEAREST;
  /**
   * @type {number}
   */
  Texture.LINEAR = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].LINEAR;

  /* TextureMinFilter */
  /**
   * @type {number}
   */
  Texture.NEAREST_MIPMAP_NEAREST = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].NEAREST_MIPMAP_NEAREST;
  /**
   * @type {number}
   */
  Texture.LINEAR_MIPMAP_NEAREST = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].LINEAR_MIPMAP_NEAREST;
  /**
   * @type {number}
   */
  Texture.NEAREST_MIPMAP_LINEAR = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].NEAREST_MIPMAP_LINEAR;
  /**
   * @type {number}
   */
  Texture.LINEAR_MIPMAP_LINEAR = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].LINEAR_MIPMAP_LINEAR;

  /* TextureWrapMode */
  /**
   * @type {number}
   */
  Texture.REPEAT = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].REPEAT;
  /**
   * @type {number}
   */
  Texture.CLAMP_TO_EDGE = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].CLAMP_TO_EDGE;
  /**
   * @type {number}
   */
  Texture.MIRRORED_REPEAT = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].MIRRORED_REPEAT;


  /* harmony default export */ __webpack_exports__["a"] = (Texture);


  /***/ }),
  /* 5 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Texture__ = __webpack_require__(4);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_glenum__ = __webpack_require__(11);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_vendor__ = __webpack_require__(13);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__math_util__ = __webpack_require__(72);




  var isPowerOfTwo = __WEBPACK_IMPORTED_MODULE_3__math_util__["a" /* default */].isPowerOfTwo;

  function nearestPowerOfTwo(val) {
      return Math.pow(2, Math.round(Math.log(val) / Math.LN2));
  }
  function convertTextureToPowerOfTwo(texture, canvas) {
      // var canvas = document.createElement('canvas');
      var width = nearestPowerOfTwo(texture.width);
      var height = nearestPowerOfTwo(texture.height);
      canvas = canvas || document.createElement('canvas');
      canvas.width = width;
      canvas.height = height;
      var ctx = canvas.getContext('2d');
      ctx.drawImage(texture.image, 0, 0, width, height);

      return canvas;
  }

  /**
   * @constructor clay.Texture2D
   * @extends clay.Texture
   *
   * @example
   *     ...
   *     var mat = new clay.Material({
   *         shader: clay.shader.library.get('clay.phong', 'diffuseMap')
   *     });
   *     var diffuseMap = new clay.Texture2D();
   *     diffuseMap.load('assets/textures/diffuse.jpg');
   *     mat.set('diffuseMap', diffuseMap);
   *     ...
   *     diffuseMap.success(function () {
   *         // Wait for the diffuse texture loaded
   *         animation.on('frame', function (frameTime) {
   *             renderer.render(scene, camera);
   *         });
   *     });
   */
  var Texture2D = __WEBPACK_IMPORTED_MODULE_0__Texture__["a" /* default */].extend(function () {
      return /** @lends clay.Texture2D# */ {
          /**
           * @type {?HTMLImageElement|HTMLCanvasElemnet}
           */
          // TODO mark dirty when assigned.
          image: null,
          /**
           * Pixels data. Will be ignored if image is set.
           * @type {?Uint8Array|Float32Array}
           */
          pixels: null,
          /**
           * @type {Array.<Object>}
           * @example
           *     [{
           *         image: mipmap0,
           *         pixels: null
           *     }, {
           *         image: mipmap1,
           *         pixels: null
           *     }, ....]
           */
          mipmaps: [],

          /**
           * If convert texture to power-of-two
           * @type {boolean}
           */
          convertToPOT: false
      };
  }, {

      textureType: 'texture2D',

      update: function (renderer) {

          var _gl = renderer.gl;
          _gl.bindTexture(_gl.TEXTURE_2D, this._cache.get('webgl_texture'));

          this.updateCommon(renderer);

          var glFormat = this.format;
          var glType = this.type;

          // Convert to pot is only available when using image/canvas/video element.
          var convertToPOT = !!(this.convertToPOT
              && !this.mipmaps.length && this.image
              && (this.wrapS === __WEBPACK_IMPORTED_MODULE_0__Texture__["a" /* default */].REPEAT || this.wrapT === __WEBPACK_IMPORTED_MODULE_0__Texture__["a" /* default */].REPEAT)
              && this.NPOT
          );

          _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_WRAP_S, convertToPOT ? this.wrapS : this.getAvailableWrapS());
          _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_WRAP_T, convertToPOT ? this.wrapT : this.getAvailableWrapT());

          _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_MAG_FILTER, convertToPOT ? this.magFilter : this.getAvailableMagFilter());
          _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_MIN_FILTER, convertToPOT ? this.minFilter : this.getAvailableMinFilter());

          var anisotropicExt = renderer.getGLExtension('EXT_texture_filter_anisotropic');
          if (anisotropicExt && this.anisotropic > 1) {
              _gl.texParameterf(_gl.TEXTURE_2D, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, this.anisotropic);
          }

          // Fallback to float type if browser don't have half float extension
          if (glType === 36193) {
              var halfFloatExt = renderer.getGLExtension('OES_texture_half_float');
              if (!halfFloatExt) {
                  glType = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].FLOAT;
              }
          }

          if (this.mipmaps.length) {
              var width = this.width;
              var height = this.height;
              for (var i = 0; i < this.mipmaps.length; i++) {
                  var mipmap = this.mipmaps[i];
                  this._updateTextureData(_gl, mipmap, i, width, height, glFormat, glType, false);
                  width /= 2;
                  height /= 2;
              }
          }
          else {
              this._updateTextureData(_gl, this, 0, this.width, this.height, glFormat, glType, convertToPOT);

              if (this.useMipmap && (!this.NPOT || convertToPOT)) {
                  _gl.generateMipmap(_gl.TEXTURE_2D);
              }
          }

          _gl.bindTexture(_gl.TEXTURE_2D, null);
      },

      _updateTextureData: function (_gl, data, level, width, height, glFormat, glType, convertToPOT) {
          if (data.image) {
              var imgData = data.image;
              if (convertToPOT) {
                  this._potCanvas = convertTextureToPowerOfTwo(this, this._potCanvas);
                  imgData = this._potCanvas;
              }
              _gl.texImage2D(_gl.TEXTURE_2D, level, glFormat, glFormat, glType, imgData);
          }
          else {
              // Can be used as a blank texture when writing render to texture(RTT)
              if (
                  // S3TC
                  (glFormat <= __WEBPACK_IMPORTED_MODULE_0__Texture__["a" /* default */].COMPRESSED_RGBA_S3TC_DXT5_EXT
                      && glFormat >= __WEBPACK_IMPORTED_MODULE_0__Texture__["a" /* default */].COMPRESSED_RGB_S3TC_DXT1_EXT)
                  // ETC
                  || glFormat === __WEBPACK_IMPORTED_MODULE_0__Texture__["a" /* default */].COMPRESSED_RGB_ETC1_WEBGL
                  // PVRTC
                  || (glFormat >= __WEBPACK_IMPORTED_MODULE_0__Texture__["a" /* default */].COMPRESSED_RGB_PVRTC_4BPPV1_IMG
                      && glFormat <= __WEBPACK_IMPORTED_MODULE_0__Texture__["a" /* default */].COMPRESSED_RGBA_PVRTC_2BPPV1_IMG)
                  // ATC
                  || (glFormat === __WEBPACK_IMPORTED_MODULE_0__Texture__["a" /* default */].COMPRESSED_RGB_ATC_WEBGL
                      && glFormat === __WEBPACK_IMPORTED_MODULE_0__Texture__["a" /* default */].COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL
                      && glFormat === __WEBPACK_IMPORTED_MODULE_0__Texture__["a" /* default */].COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL)
              ) {
                  _gl.compressedTexImage2D(_gl.TEXTURE_2D, level, glFormat, width, height, 0, data.pixels);
              }
              else {
                  // Is a render target if pixels is null
                  _gl.texImage2D(_gl.TEXTURE_2D, level, glFormat, width, height, 0, glFormat, glType, data.pixels);
              }
          }
      },

      /**
       * @param  {clay.Renderer} renderer
       * @memberOf clay.Texture2D.prototype
       */
      generateMipmap: function (renderer) {
          var _gl = renderer.gl;
          if (this.useMipmap && !this.NPOT) {
              _gl.bindTexture(_gl.TEXTURE_2D, this._cache.get('webgl_texture'));
              _gl.generateMipmap(_gl.TEXTURE_2D);
          }
      },

      isPowerOfTwo: function () {
          return isPowerOfTwo(this.width) && isPowerOfTwo(this.height);
      },

      isRenderable: function () {
          if (this.image) {
              return this.image.width > 0 && this.image.height > 0;
          }
          else {
              return !!(this.width && this.height);
          }
      },

      bind: function (renderer) {
          renderer.gl.bindTexture(renderer.gl.TEXTURE_2D, this.getWebGLTexture(renderer));
      },

      unbind: function (renderer) {
          renderer.gl.bindTexture(renderer.gl.TEXTURE_2D, null);
      },

      load: function (src, crossOrigin) {
          var image = __WEBPACK_IMPORTED_MODULE_2__core_vendor__["a" /* default */].createImage();
          if (crossOrigin) {
              image.crossOrigin = crossOrigin;
          }
          var self = this;
          image.onload = function () {
              self.dirty();
              self.trigger('success', self);
          };
          image.onerror = function () {
              self.trigger('error', self);
          };

          image.src = src;
          this.image = image;

          return this;
      }
  });

  Object.defineProperty(Texture2D.prototype, 'width', {
      get: function () {
          if (this.image) {
              return this.image.width;
          }
          return this._width;
      },
      set: function (value) {
          if (this.image) {
              console.warn('Texture from image can\'t set width');
          }
          else {
              if (this._width !== value) {
                  this.dirty();
              }
              this._width = value;
          }
      }
  });
  Object.defineProperty(Texture2D.prototype, 'height', {
      get: function () {
          if (this.image) {
              return this.image.height;
          }
          return this._height;
      },
      set: function (value) {
          if (this.image) {
              console.warn('Texture from image can\'t set height');
          }
          else {
              if (this._height !== value) {
                  this.dirty();
              }
              this._height = value;
          }
      }
  });

  /* harmony default export */ __webpack_exports__["a"] = (Texture2D);


  /***/ }),
  /* 6 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__glmatrix__ = __webpack_require__(160);
  // DEPRECATED


  /* harmony default export */ __webpack_exports__["a"] = (__WEBPACK_IMPORTED_MODULE_0__glmatrix__["a" /* default */]);


  /***/ }),
  /* 7 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__ = __webpack_require__(21);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__ = __webpack_require__(12);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__glmatrix_quat__ = __webpack_require__(55);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__glmatrix_mat3__ = __webpack_require__(34);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Vector3__ = __webpack_require__(3);






  /**
   * @constructor
   * @alias clay.Matrix4
   */
  var Matrix4 = function() {

      this._axisX = new __WEBPACK_IMPORTED_MODULE_4__Vector3__["a" /* default */]();
      this._axisY = new __WEBPACK_IMPORTED_MODULE_4__Vector3__["a" /* default */]();
      this._axisZ = new __WEBPACK_IMPORTED_MODULE_4__Vector3__["a" /* default */]();

      /**
       * Storage of Matrix4
       * @name array
       * @type {Float32Array}
       * @memberOf clay.Matrix4#
       */
      this.array = __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].create();

      /**
       * @name _dirty
       * @type {boolean}
       * @memberOf clay.Matrix4#
       */
      this._dirty = true;
  };

  Matrix4.prototype = {

      constructor: Matrix4,

      /**
       * Set components from array
       * @param  {Float32Array|number[]} arr
       */
      setArray: function (arr) {
          for (var i = 0; i < this.array.length; i++) {
              this.array[i] = arr[i];
          }
          this._dirty = true;
          return this;
      },
      /**
       * Calculate the adjugate of self, in-place
       * @return {clay.Matrix4}
       */
      adjoint: function() {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].adjoint(this.array, this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Clone a new Matrix4
       * @return {clay.Matrix4}
       */
      clone: function() {
          return (new Matrix4()).copy(this);
      },

      /**
       * Copy from b
       * @param  {clay.Matrix4} b
       * @return {clay.Matrix4}
       */
      copy: function(a) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].copy(this.array, a.array);
          this._dirty = true;
          return this;
      },

      /**
       * Calculate matrix determinant
       * @return {number}
       */
      determinant: function() {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].determinant(this.array);
      },

      /**
       * Set upper 3x3 part from quaternion
       * @param  {clay.Quaternion} q
       * @return {clay.Matrix4}
       */
      fromQuat: function(q) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].fromQuat(this.array, q.array);
          this._dirty = true;
          return this;
      },

      /**
       * Set from a quaternion rotation and a vector translation
       * @param  {clay.Quaternion} q
       * @param  {clay.Vector3} v
       * @return {clay.Matrix4}
       */
      fromRotationTranslation: function(q, v) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].fromRotationTranslation(this.array, q.array, v.array);
          this._dirty = true;
          return this;
      },

      /**
       * Set from Matrix2d, it is used when converting a 2d shape to 3d space.
       * In 3d space it is equivalent to ranslate on xy plane and rotate about z axis
       * @param  {clay.Matrix2d} m2d
       * @return {clay.Matrix4}
       */
      fromMat2d: function(m2d) {
          Matrix4.fromMat2d(this, m2d);
          return this;
      },

      /**
       * Set from frustum bounds
       * @param  {number} left
       * @param  {number} right
       * @param  {number} bottom
       * @param  {number} top
       * @param  {number} near
       * @param  {number} far
       * @return {clay.Matrix4}
       */
      frustum: function (left, right, bottom, top, near, far) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].frustum(this.array, left, right, bottom, top, near, far);
          this._dirty = true;
          return this;
      },

      /**
       * Set to a identity matrix
       * @return {clay.Matrix4}
       */
      identity: function() {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].identity(this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Invert self
       * @return {clay.Matrix4}
       */
      invert: function() {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].invert(this.array, this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Set as a matrix with the given eye position, focal point, and up axis
       * @param  {clay.Vector3} eye
       * @param  {clay.Vector3} center
       * @param  {clay.Vector3} up
       * @return {clay.Matrix4}
       */
      lookAt: function(eye, center, up) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].lookAt(this.array, eye.array, center.array, up.array);
          this._dirty = true;
          return this;
      },

      /**
       * Alias for mutiply
       * @param  {clay.Matrix4} b
       * @return {clay.Matrix4}
       */
      mul: function(b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].mul(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Alias for multiplyLeft
       * @param  {clay.Matrix4} a
       * @return {clay.Matrix4}
       */
      mulLeft: function(a) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].mul(this.array, a.array, this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Multiply self and b
       * @param  {clay.Matrix4} b
       * @return {clay.Matrix4}
       */
      multiply: function(b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].multiply(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Multiply a and self, a is on the left
       * @param  {clay.Matrix3} a
       * @return {clay.Matrix3}
       */
      multiplyLeft: function(a) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].multiply(this.array, a.array, this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Set as a orthographic projection matrix
       * @param  {number} left
       * @param  {number} right
       * @param  {number} bottom
       * @param  {number} top
       * @param  {number} near
       * @param  {number} far
       * @return {clay.Matrix4}
       */
      ortho: function(left, right, bottom, top, near, far) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].ortho(this.array, left, right, bottom, top, near, far);
          this._dirty = true;
          return this;
      },
      /**
       * Set as a perspective projection matrix
       * @param  {number} fovy
       * @param  {number} aspect
       * @param  {number} near
       * @param  {number} far
       * @return {clay.Matrix4}
       */
      perspective: function(fovy, aspect, near, far) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].perspective(this.array, fovy, aspect, near, far);
          this._dirty = true;
          return this;
      },

      /**
       * Rotate self by rad about axis.
       * Equal to right-multiply a rotaion matrix
       * @param  {number}   rad
       * @param  {clay.Vector3} axis
       * @return {clay.Matrix4}
       */
      rotate: function(rad, axis) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].rotate(this.array, this.array, rad, axis.array);
          this._dirty = true;
          return this;
      },

      /**
       * Rotate self by a given radian about X axis.
       * Equal to right-multiply a rotaion matrix
       * @param {number} rad
       * @return {clay.Matrix4}
       */
      rotateX: function(rad) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].rotateX(this.array, this.array, rad);
          this._dirty = true;
          return this;
      },

      /**
       * Rotate self by a given radian about Y axis.
       * Equal to right-multiply a rotaion matrix
       * @param {number} rad
       * @return {clay.Matrix4}
       */
      rotateY: function(rad) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].rotateY(this.array, this.array, rad);
          this._dirty = true;
          return this;
      },

      /**
       * Rotate self by a given radian about Z axis.
       * Equal to right-multiply a rotaion matrix
       * @param {number} rad
       * @return {clay.Matrix4}
       */
      rotateZ: function(rad) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].rotateZ(this.array, this.array, rad);
          this._dirty = true;
          return this;
      },

      /**
       * Scale self by s
       * Equal to right-multiply a scale matrix
       * @param  {clay.Vector3}  s
       * @return {clay.Matrix4}
       */
      scale: function(v) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].scale(this.array, this.array, v.array);
          this._dirty = true;
          return this;
      },

      /**
       * Translate self by v.
       * Equal to right-multiply a translate matrix
       * @param  {clay.Vector3}  v
       * @return {clay.Matrix4}
       */
      translate: function(v) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].translate(this.array, this.array, v.array);
          this._dirty = true;
          return this;
      },

      /**
       * Transpose self, in-place.
       * @return {clay.Matrix2}
       */
      transpose: function() {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].transpose(this.array, this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Decompose a matrix to SRT
       * @param {clay.Vector3} [scale]
       * @param {clay.Quaternion} rotation
       * @param {clay.Vector} position
       * @see http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.matrix.decompose.aspx
       */
      decomposeMatrix: (function() {

          var x = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].create();
          var y = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].create();
          var z = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].create();

          var m3 = __WEBPACK_IMPORTED_MODULE_3__glmatrix_mat3__["a" /* default */].create();

          return function(scale, rotation, position) {

              var el = this.array;
              __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].set(x, el[0], el[1], el[2]);
              __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].set(y, el[4], el[5], el[6]);
              __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].set(z, el[8], el[9], el[10]);

              var sx = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].length(x);
              var sy = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].length(y);
              var sz = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].length(z);

              // if determine is negative, we need to invert one scale
              var det = this.determinant();
              if (det < 0) {
                  sx = -sx;
              }

              if (scale) {
                  scale.set(sx, sy, sz);
              }

              position.set(el[12], el[13], el[14]);

              __WEBPACK_IMPORTED_MODULE_3__glmatrix_mat3__["a" /* default */].fromMat4(m3, el);
              // Not like mat4, mat3 in glmatrix seems to be row-based
              // Seems fixed in gl-matrix 2.2.2
              // https://github.com/toji/gl-matrix/issues/114
              // mat3.transpose(m3, m3);

              m3[0] /= sx;
              m3[1] /= sx;
              m3[2] /= sx;

              m3[3] /= sy;
              m3[4] /= sy;
              m3[5] /= sy;

              m3[6] /= sz;
              m3[7] /= sz;
              m3[8] /= sz;

              __WEBPACK_IMPORTED_MODULE_2__glmatrix_quat__["a" /* default */].fromMat3(rotation.array, m3);
              __WEBPACK_IMPORTED_MODULE_2__glmatrix_quat__["a" /* default */].normalize(rotation.array, rotation.array);

              rotation._dirty = true;
              position._dirty = true;
          };
      })(),

      toString: function() {
          return '[' + Array.prototype.join.call(this.array, ',') + ']';
      },

      toArray: function () {
          return Array.prototype.slice.call(this.array);
      }
  };

  var defineProperty = Object.defineProperty;

  if (defineProperty) {
      var proto = Matrix4.prototype;
      /**
       * Z Axis of local transform
       * @name z
       * @type {clay.Vector3}
       * @memberOf clay.Matrix4
       * @instance
       */
      defineProperty(proto, 'z', {
          get: function () {
              var el = this.array;
              this._axisZ.set(el[8], el[9], el[10]);
              return this._axisZ;
          },
          set: function (v) {
              // TODO Here has a problem
              // If only set an item of vector will not work
              var el = this.array;
              v = v.array;
              el[8] = v[0];
              el[9] = v[1];
              el[10] = v[2];

              this._dirty = true;
          }
      });

      /**
       * Y Axis of local transform
       * @name y
       * @type {clay.Vector3}
       * @memberOf clay.Matrix4
       * @instance
       */
      defineProperty(proto, 'y', {
          get: function () {
              var el = this.array;
              this._axisY.set(el[4], el[5], el[6]);
              return this._axisY;
          },
          set: function (v) {
              var el = this.array;
              v = v.array;
              el[4] = v[0];
              el[5] = v[1];
              el[6] = v[2];

              this._dirty = true;
          }
      });

      /**
       * X Axis of local transform
       * @name x
       * @type {clay.Vector3}
       * @memberOf clay.Matrix4
       * @instance
       */
      defineProperty(proto, 'x', {
          get: function () {
              var el = this.array;
              this._axisX.set(el[0], el[1], el[2]);
              return this._axisX;
          },
          set: function (v) {
              var el = this.array;
              v = v.array;
              el[0] = v[0];
              el[1] = v[1];
              el[2] = v[2];

              this._dirty = true;
          }
      });
  }

  /**
   * @param  {clay.Matrix4} out
   * @param  {clay.Matrix4} a
   * @return {clay.Matrix4}
   */
  Matrix4.adjoint = function(out, a) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].adjoint(out.array, a.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix4} out
   * @param  {clay.Matrix4} a
   * @return {clay.Matrix4}
   */
  Matrix4.copy = function(out, a) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].copy(out.array, a.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix4} a
   * @return {number}
   */
  Matrix4.determinant = function(a) {
      return __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].determinant(a.array);
  };

  /**
   * @param  {clay.Matrix4} out
   * @return {clay.Matrix4}
   */
  Matrix4.identity = function(out) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].identity(out.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix4} out
   * @param  {number}  left
   * @param  {number}  right
   * @param  {number}  bottom
   * @param  {number}  top
   * @param  {number}  near
   * @param  {number}  far
   * @return {clay.Matrix4}
   */
  Matrix4.ortho = function(out, left, right, bottom, top, near, far) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].ortho(out.array, left, right, bottom, top, near, far);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix4} out
   * @param  {number}  fovy
   * @param  {number}  aspect
   * @param  {number}  near
   * @param  {number}  far
   * @return {clay.Matrix4}
   */
  Matrix4.perspective = function(out, fovy, aspect, near, far) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].perspective(out.array, fovy, aspect, near, far);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix4} out
   * @param  {clay.Vector3} eye
   * @param  {clay.Vector3} center
   * @param  {clay.Vector3} up
   * @return {clay.Matrix4}
   */
  Matrix4.lookAt = function(out, eye, center, up) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].lookAt(out.array, eye.array, center.array, up.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix4} out
   * @param  {clay.Matrix4} a
   * @return {clay.Matrix4}
   */
  Matrix4.invert = function(out, a) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].invert(out.array, a.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix4} out
   * @param  {clay.Matrix4} a
   * @param  {clay.Matrix4} b
   * @return {clay.Matrix4}
   */
  Matrix4.mul = function(out, a, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].mul(out.array, a.array, b.array);
      out._dirty = true;
      return out;
  };

  /**
   * @function
   * @param  {clay.Matrix4} out
   * @param  {clay.Matrix4} a
   * @param  {clay.Matrix4} b
   * @return {clay.Matrix4}
   */
  Matrix4.multiply = Matrix4.mul;

  /**
   * @param  {clay.Matrix4}    out
   * @param  {clay.Quaternion} q
   * @return {clay.Matrix4}
   */
  Matrix4.fromQuat = function(out, q) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].fromQuat(out.array, q.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix4}    out
   * @param  {clay.Quaternion} q
   * @param  {clay.Vector3}    v
   * @return {clay.Matrix4}
   */
  Matrix4.fromRotationTranslation = function(out, q, v) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].fromRotationTranslation(out.array, q.array, v.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix4} m4
   * @param  {clay.Matrix2d} m2d
   * @return {clay.Matrix4}
   */
  Matrix4.fromMat2d = function(m4, m2d) {
      m4._dirty = true;
      var m2d = m2d.array;
      var m4 = m4.array;

      m4[0] = m2d[0];
      m4[4] = m2d[2];
      m4[12] = m2d[4];

      m4[1] = m2d[1];
      m4[5] = m2d[3];
      m4[13] = m2d[5];

      return m4;
  };

  /**
   * @param  {clay.Matrix4} out
   * @param  {clay.Matrix4} a
   * @param  {number}  rad
   * @param  {clay.Vector3} axis
   * @return {clay.Matrix4}
   */
  Matrix4.rotate = function(out, a, rad, axis) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].rotate(out.array, a.array, rad, axis.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix4} out
   * @param  {clay.Matrix4} a
   * @param  {number}  rad
   * @return {clay.Matrix4}
   */
  Matrix4.rotateX = function(out, a, rad) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].rotateX(out.array, a.array, rad);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix4} out
   * @param  {clay.Matrix4} a
   * @param  {number}  rad
   * @return {clay.Matrix4}
   */
  Matrix4.rotateY = function(out, a, rad) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].rotateY(out.array, a.array, rad);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix4} out
   * @param  {clay.Matrix4} a
   * @param  {number}  rad
   * @return {clay.Matrix4}
   */
  Matrix4.rotateZ = function(out, a, rad) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].rotateZ(out.array, a.array, rad);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix4} out
   * @param  {clay.Matrix4} a
   * @param  {clay.Vector3} v
   * @return {clay.Matrix4}
   */
  Matrix4.scale = function(out, a, v) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].scale(out.array, a.array, v.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix4} out
   * @param  {clay.Matrix4} a
   * @return {clay.Matrix4}
   */
  Matrix4.transpose = function(out, a) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].transpose(out.array, a.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix4} out
   * @param  {clay.Matrix4} a
   * @param  {clay.Vector3} v
   * @return {clay.Matrix4}
   */
  Matrix4.translate = function(out, a, v) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat4__["a" /* default */].translate(out.array, a.array, v.array);
      out._dirty = true;
      return out;
  };

  /* harmony default export */ __webpack_exports__["a"] = (Matrix4);


  /***/ }),
  /* 8 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__mixin_extend__ = __webpack_require__(109);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mixin_notifier__ = __webpack_require__(53);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util__ = __webpack_require__(23);




  /**
   * Base class of all objects
   * @constructor
   * @alias clay.core.Base
   * @mixes clay.core.mixin.notifier
   */
  var Base = function () {
      /**
       * @type {number}
       */
      this.__uid__ = __WEBPACK_IMPORTED_MODULE_2__util__["a" /* default */].genGUID();
  };

  Base.__initializers__ = [
      function (opts) {
          __WEBPACK_IMPORTED_MODULE_2__util__["a" /* default */].extend(this, opts);
      }
  ];

  __WEBPACK_IMPORTED_MODULE_2__util__["a" /* default */].extend(Base, __WEBPACK_IMPORTED_MODULE_0__mixin_extend__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_2__util__["a" /* default */].extend(Base.prototype, __WEBPACK_IMPORTED_MODULE_1__mixin_notifier__["a" /* default */]);

  /* harmony default export */ __webpack_exports__["a"] = (Base);


  /***/ }),
  /* 9 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_util__ = __webpack_require__(23);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_vendor__ = __webpack_require__(13);
  /**
   * Mainly do the parse and compile of shader string
   * Support shader code chunk import and export
   * Support shader semantics
   * http://www.nvidia.com/object/using_sas.html
   * https://github.com/KhronosGroup/collada2json/issues/45
   */



  var uniformRegex = /uniform\s+(bool|float|int|vec2|vec3|vec4|ivec2|ivec3|ivec4|mat2|mat3|mat4|sampler2D|samplerCube)\s+([\s\S]*?);/g;
  var attributeRegex = /attribute\s+(float|int|vec2|vec3|vec4)\s+([\s\S]*?);/g;
  // Only parse number define.
  var defineRegex = /#define\s+(\w+)?(\s+[\d-.]+)?\s*;?\s*\n/g;

  var uniformTypeMap = {
      'bool': '1i',
      'int': '1i',
      'sampler2D': 't',
      'samplerCube': 't',
      'float': '1f',
      'vec2': '2f',
      'vec3': '3f',
      'vec4': '4f',
      'ivec2': '2i',
      'ivec3': '3i',
      'ivec4': '4i',
      'mat2': 'm2',
      'mat3': 'm3',
      'mat4': 'm4'
  };

  function createZeroArray(len) {
      var arr = [];
      for (var i = 0; i < len; i++) {
          arr[i] = 0;
      }
      return arr;
  }

  var uniformValueConstructor = {
      'bool': function () { return true; },
      'int': function () { return 0; },
      'float': function () { return 0; },
      'sampler2D': function () { return null; },
      'samplerCube': function () { return null; },

      'vec2': function () { return createZeroArray(2); },
      'vec3': function () { return createZeroArray(3); },
      'vec4': function () { return createZeroArray(4); },

      'ivec2': function () { return createZeroArray(2); },
      'ivec3': function () { return createZeroArray(3); },
      'ivec4': function () { return createZeroArray(4); },

      'mat2': function () { return createZeroArray(4); },
      'mat3': function () { return createZeroArray(9); },
      'mat4': function () { return createZeroArray(16); },

      'array': function () { return []; }
  };

  var attributeSemantics = [
      'POSITION',
      'NORMAL',
      'BINORMAL',
      'TANGENT',
      'TEXCOORD',
      'TEXCOORD_0',
      'TEXCOORD_1',
      'COLOR',
      // Skinning
      // https://github.com/KhronosGroup/glTF/blob/master/specification/README.md#semantics
      'JOINT',
      'WEIGHT'
  ];
  var uniformSemantics = [
      'SKIN_MATRIX',
      // Information about viewport
      'VIEWPORT_SIZE',
      'VIEWPORT',
      'DEVICEPIXELRATIO',
      // Window size for window relative coordinate
      // https://www.opengl.org/sdk/docs/man/html/gl_FragCoord.xhtml
      'WINDOW_SIZE',
      // Infomation about camera
      'NEAR',
      'FAR',
      // Time
      'TIME',
      // Log depth buffer
      'LOG_DEPTH_BUFFER_FC'
  ];
  var matrixSemantics = [
      'WORLD',
      'VIEW',
      'PROJECTION',
      'WORLDVIEW',
      'VIEWPROJECTION',
      'WORLDVIEWPROJECTION',
      'WORLDINVERSE',
      'VIEWINVERSE',
      'PROJECTIONINVERSE',
      'WORLDVIEWINVERSE',
      'VIEWPROJECTIONINVERSE',
      'WORLDVIEWPROJECTIONINVERSE',
      'WORLDTRANSPOSE',
      'VIEWTRANSPOSE',
      'PROJECTIONTRANSPOSE',
      'WORLDVIEWTRANSPOSE',
      'VIEWPROJECTIONTRANSPOSE',
      'WORLDVIEWPROJECTIONTRANSPOSE',
      'WORLDINVERSETRANSPOSE',
      'VIEWINVERSETRANSPOSE',
      'PROJECTIONINVERSETRANSPOSE',
      'WORLDVIEWINVERSETRANSPOSE',
      'VIEWPROJECTIONINVERSETRANSPOSE',
      'WORLDVIEWPROJECTIONINVERSETRANSPOSE'
  ];

  var attributeSizeMap = {
      // WebGL does not support integer attributes
      'vec4': 4,
      'vec3': 3,
      'vec2': 2,
      'float': 1
  };


  var shaderIDCache = {};
  var shaderCodeCache = {};

  function getShaderID(vertex, fragment) {
      var key = 'vertex:' + vertex + 'fragment:' + fragment;
      if (shaderIDCache[key]) {
          return shaderIDCache[key];
      }
      var id = __WEBPACK_IMPORTED_MODULE_0__core_util__["a" /* default */].genGUID();
      shaderIDCache[key] = id;

      shaderCodeCache[id] = {
          vertex: vertex,
          fragment: fragment
      };

      return id;
  }

  function removeComment(code) {
      return code.replace(/[ \t]*\/\/.*\n/g, '' )   // remove //
          .replace(/[ \t]*\/\*[\s\S]*?\*\//g, '' ); // remove /* */
  }

  function logSyntaxError() {
      console.error('Wrong uniform/attributes syntax');
  }

  function parseDeclarations(type, line) {
      var speratorsRegexp = /[,=\(\):]/;
      var tokens = line
          // Convert `symbol: [1,2,3]` to `symbol: vec3(1,2,3)`
          .replace(/:\s*\[\s*(.*)\s*\]/g, '=' + type + '($1)')
          .replace(/\s+/g, '')
          .split(/(?=[,=\(\):])/g);

      var newTokens = [];
      for (var i = 0; i < tokens.length; i++) {
          if (tokens[i].match(speratorsRegexp)) {
              newTokens.push(
                  tokens[i].charAt(0),
                  tokens[i].slice(1)
              );
          }
          else {
              newTokens.push(tokens[i]);
          }
      }
      tokens = newTokens;

      var TYPE_SYMBOL = 0;
      var TYPE_ASSIGN = 1;
      var TYPE_VEC = 2;
      var TYPE_ARR = 3;
      var TYPE_SEMANTIC = 4;
      var TYPE_NORMAL = 5;

      var opType = TYPE_SYMBOL;
      var declarations = {};
      var declarationValue = null;
      var currentDeclaration;

      addSymbol(tokens[0]);

      function addSymbol(symbol) {
          if (!symbol) {
              logSyntaxError();
          }
          var arrResult = symbol.match(/\[(.*?)\]/);
          currentDeclaration = symbol.replace(/\[(.*?)\]/, '');
          declarations[currentDeclaration] = {};
          if (arrResult) {
              declarations[currentDeclaration].isArray = true;
              declarations[currentDeclaration].arraySize = arrResult[1];
          }
      }

      for (var i = 1; i < tokens.length; i++) {
          var token = tokens[i];
          if (!token) {   // Empty token;
              continue;
          }
          if (token === '=') {
              if (opType !== TYPE_SYMBOL
              && opType !== TYPE_ARR) {
                  logSyntaxError();
                  break;
              }
              opType = TYPE_ASSIGN;

              continue;
          }
          else if (token === ':') {
              opType = TYPE_SEMANTIC;

              continue;
          }
          else if (token === ',') {
              if (opType === TYPE_VEC) {
                  if (!(declarationValue instanceof Array)) {
                      logSyntaxError();
                      break;
                  }
                  declarationValue.push(+tokens[++i]);
              }
              else {
                  opType = TYPE_NORMAL;
              }

              continue;
          }
          else if (token === ')') {
              declarations[currentDeclaration].value = new __WEBPACK_IMPORTED_MODULE_1__core_vendor__["a" /* default */].Float32Array(declarationValue);
              declarationValue = null;
              opType = TYPE_NORMAL;
              continue;
          }
          else if (token === '(') {
              if (opType !== TYPE_VEC) {
                  logSyntaxError();
                  break;
              }
              if (!(declarationValue instanceof Array)) {
                  logSyntaxError();
                  break;
              }
              declarationValue.push(+tokens[++i]);
              continue;
          }
          else if (token.indexOf('vec') >= 0) {
              if (opType !== TYPE_ASSIGN
              // Compatitable with old syntax `symbol: [1,2,3]`
              && opType !== TYPE_SEMANTIC) {
                  logSyntaxError();
                  break;
              }
              opType = TYPE_VEC;
              declarationValue = [];
              continue;
          }
          else if (opType === TYPE_ASSIGN) {
              if (type === 'bool') {
                  declarations[currentDeclaration].value = token === 'true';
              }
              else {
                  declarations[currentDeclaration].value = parseFloat(token);
              }
              declarationValue = null;
              continue;
          }
          else if (opType === TYPE_SEMANTIC) {
              var semantic = token;
              if (attributeSemantics.indexOf(semantic) >= 0
                  || uniformSemantics.indexOf(semantic) >= 0
                  || matrixSemantics.indexOf(semantic) >= 0
              ) {
                  declarations[currentDeclaration].semantic = semantic;
              }
              else if (semantic === 'ignore' || semantic === 'unconfigurable') {
                  declarations[currentDeclaration].ignore = true;
              }
              else {
                  // Try to parse as a default tvalue.
                  if (type === 'bool') {
                      declarations[currentDeclaration].value = semantic === 'true';
                  }
                  else {
                      declarations[currentDeclaration].value = parseFloat(semantic);
                  }
              }
              continue;
          }

          // treat as symbol.
          addSymbol(token);
          opType = TYPE_SYMBOL;
      }

      return declarations;
  }


  /**
   * @constructor
   * @extends clay.core.Base
   * @alias clay.Shader
   * @param {string} vertex
   * @param {string} fragment
   * @example
   * // Create a phong shader
   * var shader = new clay.Shader(
   *      clay.Shader.source('clay.standard.vertex'),
   *      clay.Shader.source('clay.standard.fragment')
   * );
   */
  function Shader(vertex, fragment) {
      // First argument can be { vertex, fragment }
      if (typeof vertex === 'object') {
          fragment = vertex.fragment;
          vertex = vertex.vertex;
      }

      vertex = removeComment(vertex);
      fragment = removeComment(fragment);

      this._shaderID = getShaderID(vertex, fragment);

      this._vertexCode = Shader.parseImport(vertex);
      this._fragmentCode = Shader.parseImport(fragment);

      /**
       * @readOnly
       */
      this.attributeSemantics = {};
      /**
       * @readOnly
       */
      this.matrixSemantics = {};
      /**
       * @readOnly
       */
      this.uniformSemantics = {};
      /**
       * @readOnly
       */
      this.matrixSemanticKeys = [];
      /**
       * @readOnly
       */
      this.uniformTemplates = {};
      /**
       * @readOnly
       */
      this.attributes = {};
      /**
       * @readOnly
       */
      this.textures = {};
      /**
       * @readOnly
       */
      this.vertexDefines = {};
      /**
       * @readOnly
       */
      this.fragmentDefines = {};

      this._parseAttributes();
      this._parseUniforms();
      this._parseDefines();
  }

  Shader.prototype = {

      constructor: Shader,

      // Create a new uniform instance for material
      createUniforms: function () {
          var uniforms = {};

          for (var symbol in this.uniformTemplates){
              var uniformTpl = this.uniformTemplates[symbol];
              uniforms[symbol] = {
                  type: uniformTpl.type,
                  value: uniformTpl.value()
              };
          }

          return uniforms;
      },

      _parseImport: function () {
          this._vertexCode = Shader.parseImport(this.vertex);
          this._fragmentCode = Shader.parseImport(this.fragment);
      },

      _addSemanticUniform: function (symbol, uniformType, semantic) {
          // This case is only for SKIN_MATRIX
          // TODO
          if (attributeSemantics.indexOf(semantic) >= 0) {
              this.attributeSemantics[semantic] = {
                  symbol: symbol,
                  type: uniformType
              };
          }
          else if (matrixSemantics.indexOf(semantic) >= 0) {
              var isTranspose = false;
              var semanticNoTranspose = semantic;
              if (semantic.match(/TRANSPOSE$/)) {
                  isTranspose = true;
                  semanticNoTranspose = semantic.slice(0, -9);
              }
              this.matrixSemantics[semantic] = {
                  symbol: symbol,
                  type: uniformType,
                  isTranspose: isTranspose,
                  semanticNoTranspose: semanticNoTranspose
              };
          }
          else if (uniformSemantics.indexOf(semantic) >= 0) {
              this.uniformSemantics[semantic] = {
                  symbol: symbol,
                  type: uniformType
              };
          }
      },

      _addMaterialUniform: function (symbol, type, uniformType, defaultValueFunc, isArray, materialUniforms) {
          materialUniforms[symbol] = {
              type: uniformType,
              value: isArray ? uniformValueConstructor['array'] : (defaultValueFunc || uniformValueConstructor[type]),
              semantic: null
          };
      },

      _parseUniforms: function () {
          var uniforms = {};
          var self = this;
          var shaderType = 'vertex';
          this._uniformList = [];

          this._vertexCode = this._vertexCode.replace(uniformRegex, _uniformParser);
          shaderType = 'fragment';
          this._fragmentCode = this._fragmentCode.replace(uniformRegex, _uniformParser);

          self.matrixSemanticKeys = Object.keys(this.matrixSemantics);

          function makeDefaultValueFunc(value) {
              return value != null ? function () { return value; } : null;
          }

          function _uniformParser(str, type, content) {
              var declaredUniforms = parseDeclarations(type, content);
              var uniformMainStr = [];
              for (var symbol in declaredUniforms) {

                  var uniformInfo = declaredUniforms[symbol];
                  var semantic = uniformInfo.semantic;
                  var tmpStr = symbol;
                  var uniformType = uniformTypeMap[type];
                  var defaultValueFunc = makeDefaultValueFunc(declaredUniforms[symbol].value);
                  if (declaredUniforms[symbol].isArray) {
                      tmpStr += '[' + declaredUniforms[symbol].arraySize + ']';
                      uniformType += 'v';
                  }

                  uniformMainStr.push(tmpStr);

                  self._uniformList.push(symbol);

                  if (!uniformInfo.ignore) {
                      if (type === 'sampler2D' || type === 'samplerCube') {
                          // Texture is default disabled
                          self.textures[symbol] = {
                              shaderType: shaderType,
                              type: type
                          };
                      }

                      if (semantic) {
                          // TODO Should not declare multiple symbols if have semantic.
                          self._addSemanticUniform(symbol, uniformType, semantic);
                      }
                      else {
                          self._addMaterialUniform(
                              symbol, type, uniformType, defaultValueFunc,
                              declaredUniforms[symbol].isArray, uniforms
                          );
                      }
                  }
              }
              return uniformMainStr.length > 0
                  ? 'uniform ' + type + ' ' + uniformMainStr.join(',') + ';\n' : '';
          }

          this.uniformTemplates = uniforms;
      },

      _parseAttributes: function () {
          var attributes = {};
          var self = this;
          this._vertexCode = this._vertexCode.replace(attributeRegex, _attributeParser);

          function _attributeParser(str, type, content) {
              var declaredAttributes = parseDeclarations(type, content);

              var size = attributeSizeMap[type] || 1;
              var attributeMainStr = [];
              for (var symbol in declaredAttributes) {
                  var semantic = declaredAttributes[symbol].semantic;
                  attributes[symbol] = {
                      // TODO Can only be float
                      type: 'float',
                      size: size,
                      semantic: semantic || null
                  };
                  // TODO Should not declare multiple symbols if have semantic.
                  if (semantic) {
                      if (attributeSemantics.indexOf(semantic) < 0) {
                          throw new Error('Unkown semantic "' + semantic + '"');
                      }
                      else {
                          self.attributeSemantics[semantic] = {
                              symbol: symbol,
                              type: type
                          };
                      }
                  }
                  attributeMainStr.push(symbol);
              }

              return 'attribute ' + type + ' ' + attributeMainStr.join(',') + ';\n';
          }

          this.attributes = attributes;
      },

      _parseDefines: function () {
          var self = this;
          var shaderType = 'vertex';
          this._vertexCode = this._vertexCode.replace(defineRegex, _defineParser);
          shaderType = 'fragment';
          this._fragmentCode = this._fragmentCode.replace(defineRegex, _defineParser);

          function _defineParser(str, symbol, value) {
              var defines = shaderType === 'vertex' ? self.vertexDefines : self.fragmentDefines;
              if (!defines[symbol]) { // Haven't been defined by user
                  if (value === 'false') {
                      defines[symbol] = false;
                  }
                  else if (value === 'true') {
                      defines[symbol] = true;
                  }
                  else {
                      defines[symbol] = value
                          // If can parse to float
                          ? (isNaN(parseFloat(value)) ? value.trim() : parseFloat(value))
                          : null;
                  }
              }
              return '';
          }
      },

      /**
       * Clone a new shader
       * @return {clay.Shader}
       */
      clone: function () {
          var code = shaderCodeCache[this._shaderID];
          var shader = new Shader(code.vertex, code.fragment);
          return shader;
      }
  };

  if (Object.defineProperty) {
      Object.defineProperty(Shader.prototype, 'shaderID', {
          get: function () {
              return this._shaderID;
          }
      });
      Object.defineProperty(Shader.prototype, 'vertex', {
          get: function () {
              return this._vertexCode;
          }
      });
      Object.defineProperty(Shader.prototype, 'fragment', {
          get: function () {
              return this._fragmentCode;
          }
      });
      Object.defineProperty(Shader.prototype, 'uniforms', {
          get: function () {
              return this._uniformList;
          }
      });
  }

  var importRegex = /(@import)\s*([0-9a-zA-Z_\-\.]*)/g;
  Shader.parseImport = function (shaderStr) {
      shaderStr = shaderStr.replace(importRegex, function (str, importSymbol, importName) {
          var str = Shader.source(importName);
          if (str) {
              // Recursively parse
              return Shader.parseImport(str);
          }
          else {
              console.error('Shader chunk "' + importName + '" not existed in library');
              return '';
          }
      });
      return shaderStr;
  };

  var exportRegex = /(@export)\s*([0-9a-zA-Z_\-\.]*)\s*\n([\s\S]*?)@end/g;

  /**
   * Import shader source
   * @param  {string} shaderStr
   * @memberOf clay.Shader
   */
  Shader['import'] = function (shaderStr) {
      shaderStr.replace(exportRegex, function (str, exportSymbol, exportName, code) {
          var code = code.replace(/(^[\s\t\xa0\u3000]+)|([\u3000\xa0\s\t]+\x24)/g, '');
          if (code) {
              var parts = exportName.split('.');
              var obj = Shader.codes;
              var i = 0;
              var key;
              while (i < parts.length - 1) {
                  key = parts[i++];
                  if (!obj[key]) {
                      obj[key] = {};
                  }
                  obj = obj[key];
              }
              key = parts[i];
              obj[key] = code;
          }
          return code;
      });
  };

  /**
   * Library to store all the loaded shader codes
   * @type {Object}
   * @readOnly
   * @memberOf clay.Shader
   */
  Shader.codes = {};

  /**
   * Get shader source
   * @param  {string} name
   * @return {string}
   */
  Shader.source = function (name) {
      var parts = name.split('.');
      var obj = Shader.codes;
      var i = 0;
      while (obj && i < parts.length) {
          var key = parts[i++];
          obj = obj[key];
      }
      if (typeof obj !== 'string') {
          // FIXME Use default instead
          console.error('Shader "' + name + '" not existed in library');
          return '';
      }
      return obj;
  };

  /* harmony default export */ __webpack_exports__["a"] = (Shader);


  /***/ }),
  /* 10 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Base__ = __webpack_require__(8);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Texture__ = __webpack_require__(4);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__TextureCube__ = __webpack_require__(27);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_glenum__ = __webpack_require__(11);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_Cache__ = __webpack_require__(57);






  var KEY_FRAMEBUFFER = 'framebuffer';
  var KEY_RENDERBUFFER = 'renderbuffer';
  var KEY_RENDERBUFFER_WIDTH = KEY_RENDERBUFFER + '_width';
  var KEY_RENDERBUFFER_HEIGHT = KEY_RENDERBUFFER + '_height';
  var KEY_RENDERBUFFER_ATTACHED = KEY_RENDERBUFFER + '_attached';
  var KEY_DEPTHTEXTURE_ATTACHED = 'depthtexture_attached';

  var GL_FRAMEBUFFER = __WEBPACK_IMPORTED_MODULE_3__core_glenum__["a" /* default */].FRAMEBUFFER;
  var GL_RENDERBUFFER = __WEBPACK_IMPORTED_MODULE_3__core_glenum__["a" /* default */].RENDERBUFFER;
  var GL_DEPTH_ATTACHMENT = __WEBPACK_IMPORTED_MODULE_3__core_glenum__["a" /* default */].DEPTH_ATTACHMENT;
  var GL_COLOR_ATTACHMENT0 = __WEBPACK_IMPORTED_MODULE_3__core_glenum__["a" /* default */].COLOR_ATTACHMENT0;
  /**
   * @constructor clay.FrameBuffer
   * @extends clay.core.Base
   */
  var FrameBuffer = __WEBPACK_IMPORTED_MODULE_0__core_Base__["a" /* default */].extend(
  /** @lends clay.FrameBuffer# */
  {
      /**
       * If use depth buffer
       * @type {boolean}
       */
      depthBuffer: true,

      /**
       * @type {Object}
       */
      viewport: null,

      _width: 0,
      _height: 0,

      _textures: null,

      _boundRenderer: null,
  }, function () {
      // Use cache
      this._cache = new __WEBPACK_IMPORTED_MODULE_4__core_Cache__["a" /* default */]();

      this._textures = {};
  },

  /**@lends clay.FrameBuffer.prototype. */
  {
      /**
       * Get attached texture width
       * {number}
       */
      // FIXME Can't use before #bind
      getTextureWidth: function () {
          return this._width;
      },

      /**
       * Get attached texture height
       * {number}
       */
      getTextureHeight: function () {
          return this._height;
      },

      /**
       * Bind the framebuffer to given renderer before rendering
       * @param  {clay.Renderer} renderer
       */
      bind: function (renderer) {

          if (renderer.__currentFrameBuffer) {
              // Already bound
              if (renderer.__currentFrameBuffer === this) {
                  return;
              }

              console.warn('Renderer already bound with another framebuffer. Unbind it first');
          }
          renderer.__currentFrameBuffer = this;

          var _gl = renderer.gl;

          _gl.bindFramebuffer(GL_FRAMEBUFFER, this._getFrameBufferGL(renderer));
          this._boundRenderer = renderer;
          var cache = this._cache;

          cache.put('viewport', renderer.viewport);

          var hasTextureAttached = false;
          var width;
          var height;
          for (var attachment in this._textures) {
              hasTextureAttached = true;
              var obj = this._textures[attachment];
              if (obj) {
                  // TODO Do width, height checking, make sure size are same
                  width = obj.texture.width;
                  height = obj.texture.height;
                  // Attach textures
                  this._doAttach(renderer, obj.texture, attachment, obj.target);
              }
          }

          this._width = width;
          this._height = height;

          if (!hasTextureAttached && this.depthBuffer) {
              console.error('Must attach texture before bind, or renderbuffer may have incorrect width and height.');
          }

          if (this.viewport) {
              renderer.setViewport(this.viewport);
          }
          else {
              renderer.setViewport(0, 0, width, height, 1);
          }

          var attachedTextures = cache.get('attached_textures');
          if (attachedTextures) {
              for (var attachment in attachedTextures) {
                  if (!this._textures[attachment]) {
                      var target = attachedTextures[attachment];
                      this._doDetach(_gl, attachment, target);
                  }
              }
          }
          if (!cache.get(KEY_DEPTHTEXTURE_ATTACHED) && this.depthBuffer) {
              // Create a new render buffer
              if (cache.miss(KEY_RENDERBUFFER)) {
                  cache.put(KEY_RENDERBUFFER, _gl.createRenderbuffer());
              }
              var renderbuffer = cache.get(KEY_RENDERBUFFER);

              if (width !== cache.get(KEY_RENDERBUFFER_WIDTH)
                      || height !== cache.get(KEY_RENDERBUFFER_HEIGHT)) {
                  _gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer);
                  _gl.renderbufferStorage(GL_RENDERBUFFER, _gl.DEPTH_COMPONENT16, width, height);
                  cache.put(KEY_RENDERBUFFER_WIDTH, width);
                  cache.put(KEY_RENDERBUFFER_HEIGHT, height);
                  _gl.bindRenderbuffer(GL_RENDERBUFFER, null);
              }
              if (!cache.get(KEY_RENDERBUFFER_ATTACHED)) {
                  _gl.framebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, renderbuffer);
                  cache.put(KEY_RENDERBUFFER_ATTACHED, true);
              }
          }
      },

      /**
       * Unbind the frame buffer after rendering
       * @param  {clay.Renderer} renderer
       */
      unbind: function (renderer) {
          // Remove status record on renderer
          renderer.__currentFrameBuffer = null;

          var _gl = renderer.gl;

          _gl.bindFramebuffer(GL_FRAMEBUFFER, null);
          this._boundRenderer = null;

          this._cache.use(renderer.__uid__);
          var viewport = this._cache.get('viewport');
          // Reset viewport;
          if (viewport) {
              renderer.setViewport(viewport);
          }

          this.updateMipmap(renderer);
      },

      // Because the data of texture is changed over time,
      // Here update the mipmaps of texture each time after rendered;
      updateMipmap: function (renderer) {
          var _gl = renderer.gl;
          for (var attachment in this._textures) {
              var obj = this._textures[attachment];
              if (obj) {
                  var texture = obj.texture;
                  // FIXME some texture format can't generate mipmap
                  if (!texture.NPOT && texture.useMipmap
                      && texture.minFilter === __WEBPACK_IMPORTED_MODULE_1__Texture__["a" /* default */].LINEAR_MIPMAP_LINEAR) {
                      var target = texture.textureType === 'textureCube' ? __WEBPACK_IMPORTED_MODULE_3__core_glenum__["a" /* default */].TEXTURE_CUBE_MAP : __WEBPACK_IMPORTED_MODULE_3__core_glenum__["a" /* default */].TEXTURE_2D;
                      _gl.bindTexture(target, texture.getWebGLTexture(renderer));
                      _gl.generateMipmap(target);
                      _gl.bindTexture(target, null);
                  }
              }
          }
      },


      // 0x8CD5, 36053, FRAMEBUFFER_COMPLETE
      // 0x8CD6, 36054, FRAMEBUFFER_INCOMPLETE_ATTACHMENT
      // 0x8CD7, 36055, FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
      // 0x8CD9, 36057, FRAMEBUFFER_INCOMPLETE_DIMENSIONS
      // 0x8CDD, 36061, FRAMEBUFFER_UNSUPPORTED
      checkStatus: function (_gl) {
          return _gl.checkFramebufferStatus(GL_FRAMEBUFFER);
      },

      _getFrameBufferGL: function (renderer) {
          var cache = this._cache;
          cache.use(renderer.__uid__);

          if (cache.miss(KEY_FRAMEBUFFER)) {
              cache.put(KEY_FRAMEBUFFER, renderer.gl.createFramebuffer());
          }

          return cache.get(KEY_FRAMEBUFFER);
      },

      /**
       * Attach a texture(RTT) to the framebuffer
       * @param  {clay.Texture} texture
       * @param  {number} [attachment=gl.COLOR_ATTACHMENT0]
       * @param  {number} [target=gl.TEXTURE_2D]
       */
      attach: function (texture, attachment, target) {

          if (!texture.width) {
              throw new Error('The texture attached to color buffer is not a valid.');
          }
          // TODO width and height check

          // If the depth_texture extension is enabled, developers
          // Can attach a depth texture to the depth buffer
          // http://blog.tojicode.com/2012/07/using-webgldepthtexture.html
          attachment = attachment || GL_COLOR_ATTACHMENT0;
          target = target || __WEBPACK_IMPORTED_MODULE_3__core_glenum__["a" /* default */].TEXTURE_2D;

          var boundRenderer = this._boundRenderer;
          var _gl = boundRenderer && boundRenderer.gl;
          var attachedTextures;

          if (_gl) {
              var cache = this._cache;
              cache.use(boundRenderer.__uid__);
              attachedTextures = cache.get('attached_textures');
          }

          // Check if texture attached
          var previous = this._textures[attachment];
          if (previous && previous.target === target
              && previous.texture === texture
              && (attachedTextures && attachedTextures[attachment] != null)
          ) {
              return;
          }

          var canAttach = true;
          if (boundRenderer) {
              canAttach = this._doAttach(boundRenderer, texture, attachment, target);
              // Set viewport again incase attached to different size textures.
              if (!this.viewport) {
                  boundRenderer.setViewport(0, 0, texture.width, texture.height, 1);
              }
          }

          if (canAttach) {
              this._textures[attachment] = this._textures[attachment] || {};
              this._textures[attachment].texture = texture;
              this._textures[attachment].target = target;
          }
      },

      _doAttach: function (renderer, texture, attachment, target) {
          var _gl = renderer.gl;
          // Make sure texture is always updated
          // Because texture width or height may be changed and in this we can't be notified
          // FIXME awkward;
          var webglTexture = texture.getWebGLTexture(renderer);
          // Assume cache has been used.
          var attachedTextures = this._cache.get('attached_textures');
          if (attachedTextures && attachedTextures[attachment]) {
              var obj = attachedTextures[attachment];
              // Check if texture and target not changed
              if (obj.texture === texture && obj.target === target) {
                  return;
              }
          }
          attachment = +attachment;

          var canAttach = true;
          if (attachment === GL_DEPTH_ATTACHMENT || attachment === __WEBPACK_IMPORTED_MODULE_3__core_glenum__["a" /* default */].DEPTH_STENCIL_ATTACHMENT) {
              var extension = renderer.getGLExtension('WEBGL_depth_texture');

              if (!extension) {
                  console.error('Depth texture is not supported by the browser');
                  // Still trying to use the depth texture extension.
                  // canAttach = false;
              }
              if (texture.format !== __WEBPACK_IMPORTED_MODULE_3__core_glenum__["a" /* default */].DEPTH_COMPONENT
                  && texture.format !== __WEBPACK_IMPORTED_MODULE_3__core_glenum__["a" /* default */].DEPTH_STENCIL
              ) {
                  console.error('The texture attached to depth buffer is not a valid.');
                  canAttach = false;
              }

              // Dispose render buffer created previous
              if (canAttach) {
                  var renderbuffer = this._cache.get(KEY_RENDERBUFFER);
                  if (renderbuffer) {
                      _gl.framebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, null);
                      _gl.deleteRenderbuffer(renderbuffer);
                      this._cache.put(KEY_RENDERBUFFER, false);
                  }

                  this._cache.put(KEY_RENDERBUFFER_ATTACHED, false);
                  this._cache.put(KEY_DEPTHTEXTURE_ATTACHED, true);
              }
          }

          // Mipmap level can only be 0
          _gl.framebufferTexture2D(GL_FRAMEBUFFER, attachment, target, webglTexture, 0);

          if (!attachedTextures) {
              attachedTextures = {};
              this._cache.put('attached_textures', attachedTextures);
          }
          attachedTextures[attachment] = attachedTextures[attachment] || {};
          attachedTextures[attachment].texture = texture;
          attachedTextures[attachment].target = target;

          return canAttach;
      },

      _doDetach: function (_gl, attachment, target) {
          // Detach a texture from framebuffer
          // https://github.com/KhronosGroup/WebGL/blob/master/conformance-suites/1.0.0/conformance/framebuffer-test.html#L145
          _gl.framebufferTexture2D(GL_FRAMEBUFFER, attachment, target, null, 0);

          // Assume cache has been used.
          var attachedTextures = this._cache.get('attached_textures');
          if (attachedTextures && attachedTextures[attachment]) {
              attachedTextures[attachment] = null;
          }

          if (attachment === GL_DEPTH_ATTACHMENT || attachment === __WEBPACK_IMPORTED_MODULE_3__core_glenum__["a" /* default */].DEPTH_STENCIL_ATTACHMENT) {
              this._cache.put(KEY_DEPTHTEXTURE_ATTACHED, false);
          }
      },

      /**
       * Detach a texture
       * @param  {number} [attachment=gl.COLOR_ATTACHMENT0]
       * @param  {number} [target=gl.TEXTURE_2D]
       */
      detach: function (attachment, target) {
          // TODO depth extension check ?
          this._textures[attachment] = null;
          if (this._boundRenderer) {
              var cache = this._cache;
              cache.use(this._boundRenderer.__uid__);
              this._doDetach(this._boundRenderer.gl, attachment, target);
          }
      },
      /**
       * Dispose
       * @param  {WebGLRenderingContext} _gl
       */
      dispose: function (renderer) {

          var _gl = renderer.gl;
          var cache = this._cache;

          cache.use(renderer.__uid__);

          var renderBuffer = cache.get(KEY_RENDERBUFFER);
          if (renderBuffer) {
              _gl.deleteRenderbuffer(renderBuffer);
          }
          var frameBuffer = cache.get(KEY_FRAMEBUFFER);
          if (frameBuffer) {
              _gl.deleteFramebuffer(frameBuffer);
          }
          cache.deleteContext(renderer.__uid__);

          // Clear cache for reusing
          this._textures = {};

      }
  });

  FrameBuffer.DEPTH_ATTACHMENT = GL_DEPTH_ATTACHMENT;
  FrameBuffer.COLOR_ATTACHMENT0 = GL_COLOR_ATTACHMENT0;
  FrameBuffer.STENCIL_ATTACHMENT = __WEBPACK_IMPORTED_MODULE_3__core_glenum__["a" /* default */].STENCIL_ATTACHMENT;
  FrameBuffer.DEPTH_STENCIL_ATTACHMENT = __WEBPACK_IMPORTED_MODULE_3__core_glenum__["a" /* default */].DEPTH_STENCIL_ATTACHMENT;

  /* harmony default export */ __webpack_exports__["a"] = (FrameBuffer);


  /***/ }),
  /* 11 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /**
   * @namespace clay.core.glenum
   * @see http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14
   */
  /* harmony default export */ __webpack_exports__["a"] = ({
      /* ClearBufferMask */
      DEPTH_BUFFER_BIT               : 0x00000100,
      STENCIL_BUFFER_BIT             : 0x00000400,
      COLOR_BUFFER_BIT               : 0x00004000,

      /* BeginMode */
      POINTS                         : 0x0000,
      LINES                          : 0x0001,
      LINE_LOOP                      : 0x0002,
      LINE_STRIP                     : 0x0003,
      TRIANGLES                      : 0x0004,
      TRIANGLE_STRIP                 : 0x0005,
      TRIANGLE_FAN                   : 0x0006,

      /* AlphaFunction (not supported in ES20) */
      /*      NEVER */
      /*      LESS */
      /*      EQUAL */
      /*      LEQUAL */
      /*      GREATER */
      /*      NOTEQUAL */
      /*      GEQUAL */
      /*      ALWAYS */

      /* BlendingFactorDest */
      ZERO                           : 0,
      ONE                            : 1,
      SRC_COLOR                      : 0x0300,
      ONE_MINUS_SRC_COLOR            : 0x0301,
      SRC_ALPHA                      : 0x0302,
      ONE_MINUS_SRC_ALPHA            : 0x0303,
      DST_ALPHA                      : 0x0304,
      ONE_MINUS_DST_ALPHA            : 0x0305,

      /* BlendingFactorSrc */
      /*      ZERO */
      /*      ONE */
      DST_COLOR                      : 0x0306,
      ONE_MINUS_DST_COLOR            : 0x0307,
      SRC_ALPHA_SATURATE             : 0x0308,
      /*      SRC_ALPHA */
      /*      ONE_MINUS_SRC_ALPHA */
      /*      DST_ALPHA */
      /*      ONE_MINUS_DST_ALPHA */

      /* BlendEquationSeparate */
      FUNC_ADD                       : 0x8006,
      BLEND_EQUATION                 : 0x8009,
      BLEND_EQUATION_RGB             : 0x8009, /* same as BLEND_EQUATION */
      BLEND_EQUATION_ALPHA           : 0x883D,

      /* BlendSubtract */
      FUNC_SUBTRACT                  : 0x800A,
      FUNC_REVERSE_SUBTRACT          : 0x800B,

      /* Separate Blend Functions */
      BLEND_DST_RGB                  : 0x80C8,
      BLEND_SRC_RGB                  : 0x80C9,
      BLEND_DST_ALPHA                : 0x80CA,
      BLEND_SRC_ALPHA                : 0x80CB,
      CONSTANT_COLOR                 : 0x8001,
      ONE_MINUS_CONSTANT_COLOR       : 0x8002,
      CONSTANT_ALPHA                 : 0x8003,
      ONE_MINUS_CONSTANT_ALPHA       : 0x8004,
      BLEND_COLOR                    : 0x8005,

      /* Buffer Objects */
      ARRAY_BUFFER                   : 0x8892,
      ELEMENT_ARRAY_BUFFER           : 0x8893,
      ARRAY_BUFFER_BINDING           : 0x8894,
      ELEMENT_ARRAY_BUFFER_BINDING   : 0x8895,

      STREAM_DRAW                    : 0x88E0,
      STATIC_DRAW                    : 0x88E4,
      DYNAMIC_DRAW                   : 0x88E8,

      BUFFER_SIZE                    : 0x8764,
      BUFFER_USAGE                   : 0x8765,

      CURRENT_VERTEX_ATTRIB          : 0x8626,

      /* CullFaceMode */
      FRONT                          : 0x0404,
      BACK                           : 0x0405,
      FRONT_AND_BACK                 : 0x0408,

      /* DepthFunction */
      /*      NEVER */
      /*      LESS */
      /*      EQUAL */
      /*      LEQUAL */
      /*      GREATER */
      /*      NOTEQUAL */
      /*      GEQUAL */
      /*      ALWAYS */

      /* EnableCap */
      /* TEXTURE_2D */
      CULL_FACE                      : 0x0B44,
      BLEND                          : 0x0BE2,
      DITHER                         : 0x0BD0,
      STENCIL_TEST                   : 0x0B90,
      DEPTH_TEST                     : 0x0B71,
      SCISSOR_TEST                   : 0x0C11,
      POLYGON_OFFSET_FILL            : 0x8037,
      SAMPLE_ALPHA_TO_COVERAGE       : 0x809E,
      SAMPLE_COVERAGE                : 0x80A0,

      /* ErrorCode */
      NO_ERROR                       : 0,
      INVALID_ENUM                   : 0x0500,
      INVALID_VALUE                  : 0x0501,
      INVALID_OPERATION              : 0x0502,
      OUT_OF_MEMORY                  : 0x0505,

      /* FrontFaceDirection */
      CW                             : 0x0900,
      CCW                            : 0x0901,

      /* GetPName */
      LINE_WIDTH                     : 0x0B21,
      ALIASED_POINT_SIZE_RANGE       : 0x846D,
      ALIASED_LINE_WIDTH_RANGE       : 0x846E,
      CULL_FACE_MODE                 : 0x0B45,
      FRONT_FACE                     : 0x0B46,
      DEPTH_RANGE                    : 0x0B70,
      DEPTH_WRITEMASK                : 0x0B72,
      DEPTH_CLEAR_VALUE              : 0x0B73,
      DEPTH_FUNC                     : 0x0B74,
      STENCIL_CLEAR_VALUE            : 0x0B91,
      STENCIL_FUNC                   : 0x0B92,
      STENCIL_FAIL                   : 0x0B94,
      STENCIL_PASS_DEPTH_FAIL        : 0x0B95,
      STENCIL_PASS_DEPTH_PASS        : 0x0B96,
      STENCIL_REF                    : 0x0B97,
      STENCIL_VALUE_MASK             : 0x0B93,
      STENCIL_WRITEMASK              : 0x0B98,
      STENCIL_BACK_FUNC              : 0x8800,
      STENCIL_BACK_FAIL              : 0x8801,
      STENCIL_BACK_PASS_DEPTH_FAIL   : 0x8802,
      STENCIL_BACK_PASS_DEPTH_PASS   : 0x8803,
      STENCIL_BACK_REF               : 0x8CA3,
      STENCIL_BACK_VALUE_MASK        : 0x8CA4,
      STENCIL_BACK_WRITEMASK         : 0x8CA5,
      VIEWPORT                       : 0x0BA2,
      SCISSOR_BOX                    : 0x0C10,
      /*      SCISSOR_TEST */
      COLOR_CLEAR_VALUE              : 0x0C22,
      COLOR_WRITEMASK                : 0x0C23,
      UNPACK_ALIGNMENT               : 0x0CF5,
      PACK_ALIGNMENT                 : 0x0D05,
      MAX_TEXTURE_SIZE               : 0x0D33,
      MAX_VIEWPORT_DIMS              : 0x0D3A,
      SUBPIXEL_BITS                  : 0x0D50,
      RED_BITS                       : 0x0D52,
      GREEN_BITS                     : 0x0D53,
      BLUE_BITS                      : 0x0D54,
      ALPHA_BITS                     : 0x0D55,
      DEPTH_BITS                     : 0x0D56,
      STENCIL_BITS                   : 0x0D57,
      POLYGON_OFFSET_UNITS           : 0x2A00,
      /*      POLYGON_OFFSET_FILL */
      POLYGON_OFFSET_FACTOR          : 0x8038,
      TEXTURE_BINDING_2D             : 0x8069,
      SAMPLE_BUFFERS                 : 0x80A8,
      SAMPLES                        : 0x80A9,
      SAMPLE_COVERAGE_VALUE          : 0x80AA,
      SAMPLE_COVERAGE_INVERT         : 0x80AB,

      /* GetTextureParameter */
      /*      TEXTURE_MAG_FILTER */
      /*      TEXTURE_MIN_FILTER */
      /*      TEXTURE_WRAP_S */
      /*      TEXTURE_WRAP_T */

      COMPRESSED_TEXTURE_FORMATS     : 0x86A3,

      /* HintMode */
      DONT_CARE                      : 0x1100,
      FASTEST                        : 0x1101,
      NICEST                         : 0x1102,

      /* HintTarget */
      GENERATE_MIPMAP_HINT            : 0x8192,

      /* DataType */
      BYTE                           : 0x1400,
      UNSIGNED_BYTE                  : 0x1401,
      SHORT                          : 0x1402,
      UNSIGNED_SHORT                 : 0x1403,
      INT                            : 0x1404,
      UNSIGNED_INT                   : 0x1405,
      FLOAT                          : 0x1406,

      /* PixelFormat */
      DEPTH_COMPONENT                : 0x1902,
      ALPHA                          : 0x1906,
      RGB                            : 0x1907,
      RGBA                           : 0x1908,
      LUMINANCE                      : 0x1909,
      LUMINANCE_ALPHA                : 0x190A,

      /* PixelType */
      /*      UNSIGNED_BYTE */
      UNSIGNED_SHORT_4_4_4_4         : 0x8033,
      UNSIGNED_SHORT_5_5_5_1         : 0x8034,
      UNSIGNED_SHORT_5_6_5           : 0x8363,

      /* Shaders */
      FRAGMENT_SHADER                  : 0x8B30,
      VERTEX_SHADER                    : 0x8B31,
      MAX_VERTEX_ATTRIBS               : 0x8869,
      MAX_VERTEX_UNIFORM_VECTORS       : 0x8DFB,
      MAX_VARYING_VECTORS              : 0x8DFC,
      MAX_COMBINED_TEXTURE_IMAGE_UNITS : 0x8B4D,
      MAX_VERTEX_TEXTURE_IMAGE_UNITS   : 0x8B4C,
      MAX_TEXTURE_IMAGE_UNITS          : 0x8872,
      MAX_FRAGMENT_UNIFORM_VECTORS     : 0x8DFD,
      SHADER_TYPE                      : 0x8B4F,
      DELETE_STATUS                    : 0x8B80,
      LINK_STATUS                      : 0x8B82,
      VALIDATE_STATUS                  : 0x8B83,
      ATTACHED_SHADERS                 : 0x8B85,
      ACTIVE_UNIFORMS                  : 0x8B86,
      ACTIVE_ATTRIBUTES                : 0x8B89,
      SHADING_LANGUAGE_VERSION         : 0x8B8C,
      CURRENT_PROGRAM                  : 0x8B8D,

      /* StencilFunction */
      NEVER                          : 0x0200,
      LESS                           : 0x0201,
      EQUAL                          : 0x0202,
      LEQUAL                         : 0x0203,
      GREATER                        : 0x0204,
      NOTEQUAL                       : 0x0205,
      GEQUAL                         : 0x0206,
      ALWAYS                         : 0x0207,

      /* StencilOp */
      /*      ZERO */
      KEEP                           : 0x1E00,
      REPLACE                        : 0x1E01,
      INCR                           : 0x1E02,
      DECR                           : 0x1E03,
      INVERT                         : 0x150A,
      INCR_WRAP                      : 0x8507,
      DECR_WRAP                      : 0x8508,

      /* StringName */
      VENDOR                         : 0x1F00,
      RENDERER                       : 0x1F01,
      VERSION                        : 0x1F02,

      /* TextureMagFilter */
      NEAREST                        : 0x2600,
      LINEAR                         : 0x2601,

      /* TextureMinFilter */
      /*      NEAREST */
      /*      LINEAR */
      NEAREST_MIPMAP_NEAREST         : 0x2700,
      LINEAR_MIPMAP_NEAREST          : 0x2701,
      NEAREST_MIPMAP_LINEAR          : 0x2702,
      LINEAR_MIPMAP_LINEAR           : 0x2703,

      /* TextureParameterName */
      TEXTURE_MAG_FILTER             : 0x2800,
      TEXTURE_MIN_FILTER             : 0x2801,
      TEXTURE_WRAP_S                 : 0x2802,
      TEXTURE_WRAP_T                 : 0x2803,

      /* TextureTarget */
      TEXTURE_2D                     : 0x0DE1,
      TEXTURE                        : 0x1702,

      TEXTURE_CUBE_MAP               : 0x8513,
      TEXTURE_BINDING_CUBE_MAP       : 0x8514,
      TEXTURE_CUBE_MAP_POSITIVE_X    : 0x8515,
      TEXTURE_CUBE_MAP_NEGATIVE_X    : 0x8516,
      TEXTURE_CUBE_MAP_POSITIVE_Y    : 0x8517,
      TEXTURE_CUBE_MAP_NEGATIVE_Y    : 0x8518,
      TEXTURE_CUBE_MAP_POSITIVE_Z    : 0x8519,
      TEXTURE_CUBE_MAP_NEGATIVE_Z    : 0x851A,
      MAX_CUBE_MAP_TEXTURE_SIZE      : 0x851C,

      /* TextureUnit */
      TEXTURE0                       : 0x84C0,
      TEXTURE1                       : 0x84C1,
      TEXTURE2                       : 0x84C2,
      TEXTURE3                       : 0x84C3,
      TEXTURE4                       : 0x84C4,
      TEXTURE5                       : 0x84C5,
      TEXTURE6                       : 0x84C6,
      TEXTURE7                       : 0x84C7,
      TEXTURE8                       : 0x84C8,
      TEXTURE9                       : 0x84C9,
      TEXTURE10                      : 0x84CA,
      TEXTURE11                      : 0x84CB,
      TEXTURE12                      : 0x84CC,
      TEXTURE13                      : 0x84CD,
      TEXTURE14                      : 0x84CE,
      TEXTURE15                      : 0x84CF,
      TEXTURE16                      : 0x84D0,
      TEXTURE17                      : 0x84D1,
      TEXTURE18                      : 0x84D2,
      TEXTURE19                      : 0x84D3,
      TEXTURE20                      : 0x84D4,
      TEXTURE21                      : 0x84D5,
      TEXTURE22                      : 0x84D6,
      TEXTURE23                      : 0x84D7,
      TEXTURE24                      : 0x84D8,
      TEXTURE25                      : 0x84D9,
      TEXTURE26                      : 0x84DA,
      TEXTURE27                      : 0x84DB,
      TEXTURE28                      : 0x84DC,
      TEXTURE29                      : 0x84DD,
      TEXTURE30                      : 0x84DE,
      TEXTURE31                      : 0x84DF,
      ACTIVE_TEXTURE                 : 0x84E0,

      /* TextureWrapMode */
      REPEAT                         : 0x2901,
      CLAMP_TO_EDGE                  : 0x812F,
      MIRRORED_REPEAT                : 0x8370,

      /* Uniform Types */
      FLOAT_VEC2                     : 0x8B50,
      FLOAT_VEC3                     : 0x8B51,
      FLOAT_VEC4                     : 0x8B52,
      INT_VEC2                       : 0x8B53,
      INT_VEC3                       : 0x8B54,
      INT_VEC4                       : 0x8B55,
      BOOL                           : 0x8B56,
      BOOL_VEC2                      : 0x8B57,
      BOOL_VEC3                      : 0x8B58,
      BOOL_VEC4                      : 0x8B59,
      FLOAT_MAT2                     : 0x8B5A,
      FLOAT_MAT3                     : 0x8B5B,
      FLOAT_MAT4                     : 0x8B5C,
      SAMPLER_2D                     : 0x8B5E,
      SAMPLER_CUBE                   : 0x8B60,

      /* Vertex Arrays */
      VERTEX_ATTRIB_ARRAY_ENABLED        : 0x8622,
      VERTEX_ATTRIB_ARRAY_SIZE           : 0x8623,
      VERTEX_ATTRIB_ARRAY_STRIDE         : 0x8624,
      VERTEX_ATTRIB_ARRAY_TYPE           : 0x8625,
      VERTEX_ATTRIB_ARRAY_NORMALIZED     : 0x886A,
      VERTEX_ATTRIB_ARRAY_POINTER        : 0x8645,
      VERTEX_ATTRIB_ARRAY_BUFFER_BINDING : 0x889F,

      /* Shader Source */
      COMPILE_STATUS                 : 0x8B81,

      /* Shader Precision-Specified Types */
      LOW_FLOAT                      : 0x8DF0,
      MEDIUM_FLOAT                   : 0x8DF1,
      HIGH_FLOAT                     : 0x8DF2,
      LOW_INT                        : 0x8DF3,
      MEDIUM_INT                     : 0x8DF4,
      HIGH_INT                       : 0x8DF5,

      /* Framebuffer Object. */
      FRAMEBUFFER                    : 0x8D40,
      RENDERBUFFER                   : 0x8D41,

      RGBA4                          : 0x8056,
      RGB5_A1                        : 0x8057,
      RGB565                         : 0x8D62,
      DEPTH_COMPONENT16              : 0x81A5,
      STENCIL_INDEX                  : 0x1901,
      STENCIL_INDEX8                 : 0x8D48,
      DEPTH_STENCIL                  : 0x84F9,

      RENDERBUFFER_WIDTH             : 0x8D42,
      RENDERBUFFER_HEIGHT            : 0x8D43,
      RENDERBUFFER_INTERNAL_FORMAT   : 0x8D44,
      RENDERBUFFER_RED_SIZE          : 0x8D50,
      RENDERBUFFER_GREEN_SIZE        : 0x8D51,
      RENDERBUFFER_BLUE_SIZE         : 0x8D52,
      RENDERBUFFER_ALPHA_SIZE        : 0x8D53,
      RENDERBUFFER_DEPTH_SIZE        : 0x8D54,
      RENDERBUFFER_STENCIL_SIZE      : 0x8D55,

      FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE           : 0x8CD0,
      FRAMEBUFFER_ATTACHMENT_OBJECT_NAME           : 0x8CD1,
      FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL         : 0x8CD2,
      FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE : 0x8CD3,

      COLOR_ATTACHMENT0              : 0x8CE0,
      DEPTH_ATTACHMENT               : 0x8D00,
      STENCIL_ATTACHMENT             : 0x8D20,
      DEPTH_STENCIL_ATTACHMENT       : 0x821A,

      NONE                           : 0,

      FRAMEBUFFER_COMPLETE                      : 0x8CD5,
      FRAMEBUFFER_INCOMPLETE_ATTACHMENT         : 0x8CD6,
      FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT : 0x8CD7,
      FRAMEBUFFER_INCOMPLETE_DIMENSIONS         : 0x8CD9,
      FRAMEBUFFER_UNSUPPORTED                   : 0x8CDD,

      FRAMEBUFFER_BINDING            : 0x8CA6,
      RENDERBUFFER_BINDING           : 0x8CA7,
      MAX_RENDERBUFFER_SIZE          : 0x84E8,

      INVALID_FRAMEBUFFER_OPERATION  : 0x0506,

      /* WebGL-specific enums */
      UNPACK_FLIP_Y_WEBGL            : 0x9240,
      UNPACK_PREMULTIPLY_ALPHA_WEBGL : 0x9241,
      CONTEXT_LOST_WEBGL             : 0x9242,
      UNPACK_COLORSPACE_CONVERSION_WEBGL : 0x9243,
      BROWSER_DEFAULT_WEBGL          : 0x9244,
  });


  /***/ }),
  /* 12 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(20);

  /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, this
      list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
      and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */



  /**
   * @class 3 Dimensional Vector
   * @name vec3
   */

  var vec3 = {};

  /**
   * Creates a new, empty vec3
   *
   * @returns {vec3} a new 3D vector
   */
  vec3.create = function() {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* GLMAT_ARRAY_TYPE */](3);
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      return out;
  };

  /**
   * Creates a new vec3 initialized with values from an existing vector
   *
   * @param {vec3} a vector to clone
   * @returns {vec3} a new 3D vector
   */
  vec3.clone = function(a) {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* GLMAT_ARRAY_TYPE */](3);
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      return out;
  };

  /**
   * Creates a new vec3 initialized with the given values
   *
   * @param {Number} x X component
   * @param {Number} y Y component
   * @param {Number} z Z component
   * @returns {vec3} a new 3D vector
   */
  vec3.fromValues = function(x, y, z) {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* GLMAT_ARRAY_TYPE */](3);
      out[0] = x;
      out[1] = y;
      out[2] = z;
      return out;
  };

  /**
   * Copy the values from one vec3 to another
   *
   * @param {vec3} out the receiving vector
   * @param {vec3} a the source vector
   * @returns {vec3} out
   */
  vec3.copy = function(out, a) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      return out;
  };

  /**
   * Set the components of a vec3 to the given values
   *
   * @param {vec3} out the receiving vector
   * @param {Number} x X component
   * @param {Number} y Y component
   * @param {Number} z Z component
   * @returns {vec3} out
   */
  vec3.set = function(out, x, y, z) {
      out[0] = x;
      out[1] = y;
      out[2] = z;
      return out;
  };

  /**
   * Adds two vec3's
   *
   * @param {vec3} out the receiving vector
   * @param {vec3} a the first operand
   * @param {vec3} b the second operand
   * @returns {vec3} out
   */
  vec3.add = function(out, a, b) {
      out[0] = a[0] + b[0];
      out[1] = a[1] + b[1];
      out[2] = a[2] + b[2];
      return out;
  };

  /**
   * Subtracts vector b from vector a
   *
   * @param {vec3} out the receiving vector
   * @param {vec3} a the first operand
   * @param {vec3} b the second operand
   * @returns {vec3} out
   */
  vec3.subtract = function(out, a, b) {
      out[0] = a[0] - b[0];
      out[1] = a[1] - b[1];
      out[2] = a[2] - b[2];
      return out;
  };

  /**
   * Alias for {@link vec3.subtract}
   * @function
   */
  vec3.sub = vec3.subtract;

  /**
   * Multiplies two vec3's
   *
   * @param {vec3} out the receiving vector
   * @param {vec3} a the first operand
   * @param {vec3} b the second operand
   * @returns {vec3} out
   */
  vec3.multiply = function(out, a, b) {
      out[0] = a[0] * b[0];
      out[1] = a[1] * b[1];
      out[2] = a[2] * b[2];
      return out;
  };

  /**
   * Alias for {@link vec3.multiply}
   * @function
   */
  vec3.mul = vec3.multiply;

  /**
   * Divides two vec3's
   *
   * @param {vec3} out the receiving vector
   * @param {vec3} a the first operand
   * @param {vec3} b the second operand
   * @returns {vec3} out
   */
  vec3.divide = function(out, a, b) {
      out[0] = a[0] / b[0];
      out[1] = a[1] / b[1];
      out[2] = a[2] / b[2];
      return out;
  };

  /**
   * Alias for {@link vec3.divide}
   * @function
   */
  vec3.div = vec3.divide;

  /**
   * Returns the minimum of two vec3's
   *
   * @param {vec3} out the receiving vector
   * @param {vec3} a the first operand
   * @param {vec3} b the second operand
   * @returns {vec3} out
   */
  vec3.min = function(out, a, b) {
      out[0] = Math.min(a[0], b[0]);
      out[1] = Math.min(a[1], b[1]);
      out[2] = Math.min(a[2], b[2]);
      return out;
  };

  /**
   * Returns the maximum of two vec3's
   *
   * @param {vec3} out the receiving vector
   * @param {vec3} a the first operand
   * @param {vec3} b the second operand
   * @returns {vec3} out
   */
  vec3.max = function(out, a, b) {
      out[0] = Math.max(a[0], b[0]);
      out[1] = Math.max(a[1], b[1]);
      out[2] = Math.max(a[2], b[2]);
      return out;
  };

  /**
   * Scales a vec3 by a scalar number
   *
   * @param {vec3} out the receiving vector
   * @param {vec3} a the vector to scale
   * @param {Number} b amount to scale the vector by
   * @returns {vec3} out
   */
  vec3.scale = function(out, a, b) {
      out[0] = a[0] * b;
      out[1] = a[1] * b;
      out[2] = a[2] * b;
      return out;
  };

  /**
   * Adds two vec3's after scaling the second operand by a scalar value
   *
   * @param {vec3} out the receiving vector
   * @param {vec3} a the first operand
   * @param {vec3} b the second operand
   * @param {Number} scale the amount to scale b by before adding
   * @returns {vec3} out
   */
  vec3.scaleAndAdd = function(out, a, b, scale) {
      out[0] = a[0] + (b[0] * scale);
      out[1] = a[1] + (b[1] * scale);
      out[2] = a[2] + (b[2] * scale);
      return out;
  };

  /**
   * Calculates the euclidian distance between two vec3's
   *
   * @param {vec3} a the first operand
   * @param {vec3} b the second operand
   * @returns {Number} distance between a and b
   */
  vec3.distance = function(a, b) {
      var x = b[0] - a[0],
          y = b[1] - a[1],
          z = b[2] - a[2];
      return Math.sqrt(x*x + y*y + z*z);
  };

  /**
   * Alias for {@link vec3.distance}
   * @function
   */
  vec3.dist = vec3.distance;

  /**
   * Calculates the squared euclidian distance between two vec3's
   *
   * @param {vec3} a the first operand
   * @param {vec3} b the second operand
   * @returns {Number} squared distance between a and b
   */
  vec3.squaredDistance = function(a, b) {
      var x = b[0] - a[0],
          y = b[1] - a[1],
          z = b[2] - a[2];
      return x*x + y*y + z*z;
  };

  /**
   * Alias for {@link vec3.squaredDistance}
   * @function
   */
  vec3.sqrDist = vec3.squaredDistance;

  /**
   * Calculates the length of a vec3
   *
   * @param {vec3} a vector to calculate length of
   * @returns {Number} length of a
   */
  vec3.length = function (a) {
      var x = a[0],
          y = a[1],
          z = a[2];
      return Math.sqrt(x*x + y*y + z*z);
  };

  /**
   * Alias for {@link vec3.length}
   * @function
   */
  vec3.len = vec3.length;

  /**
   * Calculates the squared length of a vec3
   *
   * @param {vec3} a vector to calculate squared length of
   * @returns {Number} squared length of a
   */
  vec3.squaredLength = function (a) {
      var x = a[0],
          y = a[1],
          z = a[2];
      return x*x + y*y + z*z;
  };

  /**
   * Alias for {@link vec3.squaredLength}
   * @function
   */
  vec3.sqrLen = vec3.squaredLength;

  /**
   * Negates the components of a vec3
   *
   * @param {vec3} out the receiving vector
   * @param {vec3} a vector to negate
   * @returns {vec3} out
   */
  vec3.negate = function(out, a) {
      out[0] = -a[0];
      out[1] = -a[1];
      out[2] = -a[2];
      return out;
  };

  /**
   * Returns the inverse of the components of a vec3
   *
   * @param {vec3} out the receiving vector
   * @param {vec3} a vector to invert
   * @returns {vec3} out
   */
  vec3.inverse = function(out, a) {
    out[0] = 1.0 / a[0];
    out[1] = 1.0 / a[1];
    out[2] = 1.0 / a[2];
    return out;
  };

  /**
   * Normalize a vec3
   *
   * @param {vec3} out the receiving vector
   * @param {vec3} a vector to normalize
   * @returns {vec3} out
   */
  vec3.normalize = function(out, a) {
      var x = a[0],
          y = a[1],
          z = a[2];
      var len = x*x + y*y + z*z;
      if (len > 0) {
          //TODO: evaluate use of glm_invsqrt here?
          len = 1 / Math.sqrt(len);
          out[0] = a[0] * len;
          out[1] = a[1] * len;
          out[2] = a[2] * len;
      }
      return out;
  };

  /**
   * Calculates the dot product of two vec3's
   *
   * @param {vec3} a the first operand
   * @param {vec3} b the second operand
   * @returns {Number} dot product of a and b
   */
  vec3.dot = function (a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  };

  /**
   * Computes the cross product of two vec3's
   *
   * @param {vec3} out the receiving vector
   * @param {vec3} a the first operand
   * @param {vec3} b the second operand
   * @returns {vec3} out
   */
  vec3.cross = function(out, a, b) {
      var ax = a[0], ay = a[1], az = a[2],
          bx = b[0], by = b[1], bz = b[2];

      out[0] = ay * bz - az * by;
      out[1] = az * bx - ax * bz;
      out[2] = ax * by - ay * bx;
      return out;
  };

  /**
   * Performs a linear interpolation between two vec3's
   *
   * @param {vec3} out the receiving vector
   * @param {vec3} a the first operand
   * @param {vec3} b the second operand
   * @param {Number} t interpolation amount between the two inputs
   * @returns {vec3} out
   */
  vec3.lerp = function (out, a, b, t) {
      var ax = a[0],
          ay = a[1],
          az = a[2];
      out[0] = ax + t * (b[0] - ax);
      out[1] = ay + t * (b[1] - ay);
      out[2] = az + t * (b[2] - az);
      return out;
  };

  /**
   * Generates a random vector with the given scale
   *
   * @param {vec3} out the receiving vector
   * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
   * @returns {vec3} out
   */
  vec3.random = function (out, scale) {
      scale = scale || 1.0;

      var r = Object(__WEBPACK_IMPORTED_MODULE_0__common__["c" /* GLMAT_RANDOM */])() * 2.0 * Math.PI;
      var z = (Object(__WEBPACK_IMPORTED_MODULE_0__common__["c" /* GLMAT_RANDOM */])() * 2.0) - 1.0;
      var zScale = Math.sqrt(1.0-z*z) * scale;

      out[0] = Math.cos(r) * zScale;
      out[1] = Math.sin(r) * zScale;
      out[2] = z * scale;
      return out;
  };

  /**
   * Transforms the vec3 with a mat4.
   * 4th vector component is implicitly '1'
   *
   * @param {vec3} out the receiving vector
   * @param {vec3} a the vector to transform
   * @param {mat4} m matrix to transform with
   * @returns {vec3} out
   */
  vec3.transformMat4 = function(out, a, m) {
      var x = a[0], y = a[1], z = a[2],
          w = m[3] * x + m[7] * y + m[11] * z + m[15];
      w = w || 1.0;
      out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
      out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
      out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
      return out;
  };

  /**
   * Transforms the vec3 with a mat3.
   *
   * @param {vec3} out the receiving vector
   * @param {vec3} a the vector to transform
   * @param {mat4} m the 3x3 matrix to transform with
   * @returns {vec3} out
   */
  vec3.transformMat3 = function(out, a, m) {
      var x = a[0], y = a[1], z = a[2];
      out[0] = x * m[0] + y * m[3] + z * m[6];
      out[1] = x * m[1] + y * m[4] + z * m[7];
      out[2] = x * m[2] + y * m[5] + z * m[8];
      return out;
  };

  /**
   * Transforms the vec3 with a quat
   *
   * @param {vec3} out the receiving vector
   * @param {vec3} a the vector to transform
   * @param {quat} q quaternion to transform with
   * @returns {vec3} out
   */
  vec3.transformQuat = function(out, a, q) {
      // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations

      var x = a[0], y = a[1], z = a[2],
          qx = q[0], qy = q[1], qz = q[2], qw = q[3],

          // calculate quat * vec
          ix = qw * x + qy * z - qz * y,
          iy = qw * y + qz * x - qx * z,
          iz = qw * z + qx * y - qy * x,
          iw = -qx * x - qy * y - qz * z;

      // calculate result * inverse quat
      out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
      out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
      out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
      return out;
  };

  /**
   * Rotate a 3D vector around the x-axis
   * @param {vec3} out The receiving vec3
   * @param {vec3} a The vec3 point to rotate
   * @param {vec3} b The origin of the rotation
   * @param {Number} c The angle of rotation
   * @returns {vec3} out
   */
  vec3.rotateX = function(out, a, b, c){
     var p = [], r=[];
        //Translate point to the origin
        p[0] = a[0] - b[0];
        p[1] = a[1] - b[1];
      p[2] = a[2] - b[2];

        //perform rotation
        r[0] = p[0];
        r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);
        r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);

        //translate to correct position
        out[0] = r[0] + b[0];
        out[1] = r[1] + b[1];
        out[2] = r[2] + b[2];

      return out;
  };

  /**
   * Rotate a 3D vector around the y-axis
   * @param {vec3} out The receiving vec3
   * @param {vec3} a The vec3 point to rotate
   * @param {vec3} b The origin of the rotation
   * @param {Number} c The angle of rotation
   * @returns {vec3} out
   */
  vec3.rotateY = function(out, a, b, c){
      var p = [], r=[];
      //Translate point to the origin
      p[0] = a[0] - b[0];
      p[1] = a[1] - b[1];
      p[2] = a[2] - b[2];

      //perform rotation
      r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);
      r[1] = p[1];
      r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);

      //translate to correct position
      out[0] = r[0] + b[0];
      out[1] = r[1] + b[1];
      out[2] = r[2] + b[2];

      return out;
  };

  /**
   * Rotate a 3D vector around the z-axis
   * @param {vec3} out The receiving vec3
   * @param {vec3} a The vec3 point to rotate
   * @param {vec3} b The origin of the rotation
   * @param {Number} c The angle of rotation
   * @returns {vec3} out
   */
  vec3.rotateZ = function(out, a, b, c){
      var p = [], r=[];
      //Translate point to the origin
      p[0] = a[0] - b[0];
      p[1] = a[1] - b[1];
      p[2] = a[2] - b[2];

      //perform rotation
      r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);
      r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);
      r[2] = p[2];

      //translate to correct position
      out[0] = r[0] + b[0];
      out[1] = r[1] + b[1];
      out[2] = r[2] + b[2];

      return out;
  };

  /**
   * Perform some operation over an array of vec3s.
   *
   * @param {Array} a the array of vectors to iterate over
   * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
   * @param {Number} offset Number of elements to skip at the beginning of the array
   * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
   * @param {Function} fn Function to call for each vector in the array
   * @param {Object} [arg] additional argument to pass to fn
   * @returns {Array} a
   * @function
   */
  vec3.forEach = (function() {
      var vec = vec3.create();

      return function(a, stride, offset, count, fn, arg) {
          var i, l;
          if(!stride) {
              stride = 3;
          }

          if(!offset) {
              offset = 0;
          }

          if(count) {
              l = Math.min((count * stride) + offset, a.length);
          } else {
              l = a.length;
          }

          for(i = offset; i < l; i += stride) {
              vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];
              fn(vec, vec, arg);
              a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];
          }

          return a;
      };
  })();

  /**
   * Get the angle between two 3D vectors
   * @param {vec3} a The first operand
   * @param {vec3} b The second operand
   * @returns {Number} The angle in radians
   */
  vec3.angle = function(a, b) {

      var tempA = vec3.fromValues(a[0], a[1], a[2]);
      var tempB = vec3.fromValues(b[0], b[1], b[2]);

      vec3.normalize(tempA, tempA);
      vec3.normalize(tempB, tempB);

      var cosine = vec3.dot(tempA, tempB);

      if(cosine > 1.0){
          return 0;
      } else {
          return Math.acos(cosine);
      }
  };

  /* harmony default export */ __webpack_exports__["a"] = (vec3);

  /***/ }),
  /* 13 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* WEBPACK VAR INJECTION */(function(global) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__request__ = __webpack_require__(111);


  var supportWebGL;

  var vendor = {};

  /**
   * If support WebGL
   * @return {boolean}
   */
  vendor.supportWebGL = function () {
      if (supportWebGL == null) {
          try {
              var canvas = document.createElement('canvas');
              var gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
              if (!gl) {
                  throw new Error();
              }
          }
          catch (e) {
              supportWebGL = false;
          }

      }
      return supportWebGL;
  };

  vendor.Int8Array = typeof Int8Array === 'undefined' ? Array : Int8Array;

  vendor.Uint8Array = typeof Uint8Array === 'undefined' ? Array : Uint8Array;

  vendor.Uint16Array = typeof Uint16Array === 'undefined' ? Array : Uint16Array;

  vendor.Uint32Array = typeof Uint32Array === 'undefined' ? Array : Uint32Array;

  vendor.Int16Array = typeof Int16Array === 'undefined' ? Array : Int16Array;

  vendor.Float32Array = typeof Float32Array === 'undefined' ? Array : Float32Array;

  vendor.Float64Array = typeof Float64Array === 'undefined' ? Array : Float64Array;

  var g = {};
  if (typeof window !== 'undefined') {
      g = window;
  }
  else if (typeof global !== 'undefined') {
      g = global;
  }


  vendor.requestAnimationFrame = g.requestAnimationFrame
      || g.msRequestAnimationFrame
      || g.mozRequestAnimationFrame
      || g.webkitRequestAnimationFrame
      || function (func){ setTimeout(func, 16); };

  vendor.createCanvas = function () {
      return document.createElement('canvas');
  };

  vendor.createImage = function () {
      return new g.Image();
  };

  vendor.request = {
      get: __WEBPACK_IMPORTED_MODULE_0__request__["a" /* default */].get
  };

  vendor.addEventListener = function (dom, type, func, useCapture) {
      dom.addEventListener(type, func, useCapture);
  };

  vendor.removeEventListener = function (dom, type, func) {
      dom.removeEventListener(type, func);
  };

  /* harmony default export */ __webpack_exports__["a"] = (vendor);

  /* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(67)));

  /***/ }),
  /* 14 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_vendor__ = __webpack_require__(13);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__ = __webpack_require__(12);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__glmatrix_mat4__ = __webpack_require__(21);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__math_BoundingBox__ = __webpack_require__(18);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__GeometryBase__ = __webpack_require__(117);






  var vec3Create = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].create;
  var vec3Add = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].add;
  var vec3Set = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].set;

  var Attribute = __WEBPACK_IMPORTED_MODULE_4__GeometryBase__["a" /* default */].Attribute;

  /**
   * Geometry in ClayGL contains vertex attributes of mesh. These vertex attributes will be finally provided to the {@link clay.Shader}.
   * Different {@link clay.Shader} needs different attributes. Here is a list of attributes used in the builtin shaders.
   *
   * + position: `clay.basic`, `clay.lambert`, `clay.standard`
   * + texcoord0: `clay.basic`, `clay.lambert`, `clay.standard`
   * + color: `clay.basic`, `clay.lambert`, `clay.standard`
   * + weight: `clay.basic`, `clay.lambert`, `clay.standard`
   * + joint: `clay.basic`, `clay.lambert`, `clay.standard`
   * + normal: `clay.lambert`, `clay.standard`
   * + tangent: `clay.standard`
   *
   * #### Create a procedural geometry
   *
   * ClayGL provides a couple of builtin procedural geometries. Inlcuding:
   *
   *  + {@link clay.geometry.Cube}
   *  + {@link clay.geometry.Sphere}
   *  + {@link clay.geometry.Plane}
   *  + {@link clay.geometry.Cylinder}
   *  + {@link clay.geometry.Cone}
   *  + {@link clay.geometry.ParametricSurface}
   *
   * It's simple to create a basic geometry with these classes.
   *
  ```js
  var sphere = new clay.geometry.Sphere({
      radius: 2
  });
  ```
   *
   * #### Create the geometry data by yourself
   *
   * Usually the vertex attributes data are created by the {@link clay.loader.GLTF} or procedural geometries like {@link clay.geometry.Sphere}.
   * Besides these, you can create the data manually. Here is a simple example to create a triangle.
  ```js
  var TRIANGLE_POSITIONS = [
      [-0.5, -0.5, 0],
      [0.5, -0.5, 0],
      [0, 0.5, 0]
  ];
  var geometry = new clay.StaticGeometryBase();
  // Add triangle vertices to position attribute.
  geometry.attributes.position.fromArray(TRIANGLE_POSITIONS);
  ```
   * Then you can use the utility methods like `generateVertexNormals`, `generateTangents` to create the remaining necessary attributes.
   *
   *
   * #### Use with custom shaders
   *
   * If you wan't to write custom shaders. Don't forget to add SEMANTICS to these attributes. For example
   *
   ```glsl
  uniform mat4 worldViewProjection : WORLDVIEWPROJECTION;
  uniform mat4 worldInverseTranspose : WORLDINVERSETRANSPOSE;
  uniform mat4 world : WORLD;

  attribute vec3 position : POSITION;
  attribute vec2 texcoord : TEXCOORD_0;
  attribute vec3 normal : NORMAL;
  ```
   * These `POSITION`, `TEXCOORD_0`, `NORMAL` are SEMANTICS which will map the attributes in shader to the attributes in the GeometryBase
   *
   * Available attributes SEMANTICS includes `POSITION`, `TEXCOORD_0`, `TEXCOORD_1` `NORMAL`, `TANGENT`, `COLOR`, `WEIGHT`, `JOINT`.
   *
   *
   * @constructor clay.Geometry
   * @extends clay.GeometryBase
   */
  var Geometry = __WEBPACK_IMPORTED_MODULE_4__GeometryBase__["a" /* default */].extend(function () {
      return /** @lends clay.Geometry# */ {
          /**
           * Attributes of geometry. Including:
           *  + `position`
           *  + `texcoord0`
           *  + `texcoord1`
           *  + `normal`
           *  + `tangent`
           *  + `color`
           *  + `weight`
           *  + `joint`
           *  + `barycentric`
           *
           * @type {Object.<string, clay.Geometry.Attribute>}
           */
          attributes: {
              position: new Attribute('position', 'float', 3, 'POSITION'),
              texcoord0: new Attribute('texcoord0', 'float', 2, 'TEXCOORD_0'),
              texcoord1: new Attribute('texcoord1', 'float', 2, 'TEXCOORD_1'),
              normal: new Attribute('normal', 'float', 3, 'NORMAL'),
              tangent: new Attribute('tangent', 'float', 4, 'TANGENT'),
              color: new Attribute('color', 'float', 4, 'COLOR'),
              // Skinning attributes
              // Each vertex can be bind to 4 bones, because the
              // sum of weights is 1, so the weights is stored in vec3 and the last
              // can be calculated by 1-w.x-w.y-w.z
              weight: new Attribute('weight', 'float', 3, 'WEIGHT'),
              joint: new Attribute('joint', 'float', 4, 'JOINT'),
              // For wireframe display
              // http://codeflow.org/entries/2012/aug/02/easy-wireframe-display-with-barycentric-coordinates/
              barycentric: new Attribute('barycentric', 'float', 3, null),
          },
          /**
           * Calculated bounding box of geometry.
           * @type {clay.BoundingBox}
           */
          boundingBox: null
      };
  },
  /** @lends clay.Geometry.prototype */
  {

      mainAttribute: 'position',

      /**
       * Update boundingBox of Geometry
       */
      updateBoundingBox: function () {
          var bbox = this.boundingBox;
          if (!bbox) {
              bbox = this.boundingBox = new __WEBPACK_IMPORTED_MODULE_3__math_BoundingBox__["a" /* default */]();
          }
          var posArr = this.attributes.position.value;
          if (posArr && posArr.length) {
              var min = bbox.min;
              var max = bbox.max;
              var minArr = min.array;
              var maxArr = max.array;
              __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].set(minArr, posArr[0], posArr[1], posArr[2]);
              __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].set(maxArr, posArr[0], posArr[1], posArr[2]);
              for (var i = 3; i < posArr.length;) {
                  var x = posArr[i++];
                  var y = posArr[i++];
                  var z = posArr[i++];
                  if (x < minArr[0]) { minArr[0] = x; }
                  if (y < minArr[1]) { minArr[1] = y; }
                  if (z < minArr[2]) { minArr[2] = z; }

                  if (x > maxArr[0]) { maxArr[0] = x; }
                  if (y > maxArr[1]) { maxArr[1] = y; }
                  if (z > maxArr[2]) { maxArr[2] = z; }
              }
              min._dirty = true;
              max._dirty = true;
          }
      },

      /**
       * Generate normals per vertex.
       */
      generateVertexNormals: function () {
          if (!this.vertexCount) {
              return;
          }

          var indices = this.indices;
          var attributes = this.attributes;
          var positions = attributes.position.value;
          var normals = attributes.normal.value;

          if (!normals || normals.length !== positions.length) {
              normals = attributes.normal.value = new __WEBPACK_IMPORTED_MODULE_0__core_vendor__["a" /* default */].Float32Array(positions.length);
          }
          else {
              // Reset
              for (var i = 0; i < normals.length; i++) {
                  normals[i] = 0;
              }
          }

          var p1 = vec3Create();
          var p2 = vec3Create();
          var p3 = vec3Create();

          var v21 = vec3Create();
          var v32 = vec3Create();

          var n = vec3Create();

          var len = indices ? indices.length : this.vertexCount;
          var i1, i2, i3;
          for (var f = 0; f < len;) {
              if (indices) {
                  i1 = indices[f++];
                  i2 = indices[f++];
                  i3 = indices[f++];
              }
              else {
                  i1 = f++;
                  i2 = f++;
                  i3 = f++;
              }

              vec3Set(p1, positions[i1*3], positions[i1*3+1], positions[i1*3+2]);
              vec3Set(p2, positions[i2*3], positions[i2*3+1], positions[i2*3+2]);
              vec3Set(p3, positions[i3*3], positions[i3*3+1], positions[i3*3+2]);

              __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].sub(v21, p1, p2);
              __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].sub(v32, p2, p3);
              __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].cross(n, v21, v32);
              // Already be weighted by the triangle area
              for (var i = 0; i < 3; i++) {
                  normals[i1*3+i] = normals[i1*3+i] + n[i];
                  normals[i2*3+i] = normals[i2*3+i] + n[i];
                  normals[i3*3+i] = normals[i3*3+i] + n[i];
              }
          }

          for (var i = 0; i < normals.length;) {
              vec3Set(n, normals[i], normals[i+1], normals[i+2]);
              __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].normalize(n, n);
              normals[i++] = n[0];
              normals[i++] = n[1];
              normals[i++] = n[2];
          }
          this.dirty();
      },

      /**
       * Generate normals per face.
       */
      generateFaceNormals: function () {
          if (!this.vertexCount) {
              return;
          }

          if (!this.isUniqueVertex()) {
              this.generateUniqueVertex();
          }

          var indices = this.indices;
          var attributes = this.attributes;
          var positions = attributes.position.value;
          var normals = attributes.normal.value;

          var p1 = vec3Create();
          var p2 = vec3Create();
          var p3 = vec3Create();

          var v21 = vec3Create();
          var v32 = vec3Create();
          var n = vec3Create();

          if (!normals) {
              normals = attributes.normal.value = new Float32Array(positions.length);
          }
          var len = indices ? indices.length : this.vertexCount;
          var i1, i2, i3;
          for (var f = 0; f < len;) {
              if (indices) {
                  i1 = indices[f++];
                  i2 = indices[f++];
                  i3 = indices[f++];
              }
              else {
                  i1 = f++;
                  i2 = f++;
                  i3 = f++;
              }

              vec3Set(p1, positions[i1*3], positions[i1*3+1], positions[i1*3+2]);
              vec3Set(p2, positions[i2*3], positions[i2*3+1], positions[i2*3+2]);
              vec3Set(p3, positions[i3*3], positions[i3*3+1], positions[i3*3+2]);

              __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].sub(v21, p1, p2);
              __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].sub(v32, p2, p3);
              __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].cross(n, v21, v32);

              __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].normalize(n, n);

              for (var i = 0; i < 3; i++) {
                  normals[i1*3 + i] = n[i];
                  normals[i2*3 + i] = n[i];
                  normals[i3*3 + i] = n[i];
              }
          }
          this.dirty();
      },

      /**
       * Generate tangents attributes.
       */
      generateTangents: function () {
          if (!this.vertexCount) {
              return;
          }

          var nVertex = this.vertexCount;
          var attributes = this.attributes;
          if (!attributes.tangent.value) {
              attributes.tangent.value = new Float32Array(nVertex * 4);
          }
          var texcoords = attributes.texcoord0.value;
          var positions = attributes.position.value;
          var tangents = attributes.tangent.value;
          var normals = attributes.normal.value;

          if (!texcoords) {
              console.warn('Geometry without texcoords can\'t generate tangents.');
              return;
          }

          var tan1 = [];
          var tan2 = [];
          for (var i = 0; i < nVertex; i++) {
              tan1[i] = [0.0, 0.0, 0.0];
              tan2[i] = [0.0, 0.0, 0.0];
          }

          var sdir = [0.0, 0.0, 0.0];
          var tdir = [0.0, 0.0, 0.0];
          var indices = this.indices;

          var len = indices ? indices.length : this.vertexCount;
          var i1, i2, i3;
          for (var i = 0; i < len;) {
              if (indices) {
                  i1 = indices[i++];
                  i2 = indices[i++];
                  i3 = indices[i++];
              }
              else {
                  i1 = i++;
                  i2 = i++;
                  i3 = i++;
              }

              var st1s = texcoords[i1 * 2],
                  st2s = texcoords[i2 * 2],
                  st3s = texcoords[i3 * 2],
                  st1t = texcoords[i1 * 2 + 1],
                  st2t = texcoords[i2 * 2 + 1],
                  st3t = texcoords[i3 * 2 + 1],

                  p1x = positions[i1 * 3],
                  p2x = positions[i2 * 3],
                  p3x = positions[i3 * 3],
                  p1y = positions[i1 * 3 + 1],
                  p2y = positions[i2 * 3 + 1],
                  p3y = positions[i3 * 3 + 1],
                  p1z = positions[i1 * 3 + 2],
                  p2z = positions[i2 * 3 + 2],
                  p3z = positions[i3 * 3 + 2];

              var x1 = p2x - p1x,
                  x2 = p3x - p1x,
                  y1 = p2y - p1y,
                  y2 = p3y - p1y,
                  z1 = p2z - p1z,
                  z2 = p3z - p1z;

              var s1 = st2s - st1s,
                  s2 = st3s - st1s,
                  t1 = st2t - st1t,
                  t2 = st3t - st1t;

              var r = 1.0 / (s1 * t2 - t1 * s2);
              sdir[0] = (t2 * x1 - t1 * x2) * r;
              sdir[1] = (t2 * y1 - t1 * y2) * r;
              sdir[2] = (t2 * z1 - t1 * z2) * r;

              tdir[0] = (s1 * x2 - s2 * x1) * r;
              tdir[1] = (s1 * y2 - s2 * y1) * r;
              tdir[2] = (s1 * z2 - s2 * z1) * r;

              vec3Add(tan1[i1], tan1[i1], sdir);
              vec3Add(tan1[i2], tan1[i2], sdir);
              vec3Add(tan1[i3], tan1[i3], sdir);
              vec3Add(tan2[i1], tan2[i1], tdir);
              vec3Add(tan2[i2], tan2[i2], tdir);
              vec3Add(tan2[i3], tan2[i3], tdir);
          }
          var tmp = vec3Create();
          var nCrossT = vec3Create();
          var n = vec3Create();
          for (var i = 0; i < nVertex; i++) {
              n[0] = normals[i * 3];
              n[1] = normals[i * 3 + 1];
              n[2] = normals[i * 3 + 2];
              var t = tan1[i];

              // Gram-Schmidt orthogonalize
              __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].scale(tmp, n, __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].dot(n, t));
              __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].sub(tmp, t, tmp);
              __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].normalize(tmp, tmp);
              // Calculate handedness.
              __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].cross(nCrossT, n, t);
              tangents[i * 4] = tmp[0];
              tangents[i * 4 + 1] = tmp[1];
              tangents[i * 4 + 2] = tmp[2];
              // PENDING can config ?
              tangents[i * 4 + 3] = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].dot(nCrossT, tan2[i]) < 0.0 ? -1.0 : 1.0;
          }
          this.dirty();
      },

      /**
       * If vertices are not shared by different indices.
       */
      isUniqueVertex: function () {
          if (this.isUseIndices()) {
              return this.vertexCount === this.indices.length;
          }
          else {
              return true;
          }
      },
      /**
       * Create a unique vertex for each index.
       */
      generateUniqueVertex: function () {
          if (!this.vertexCount || !this.indices) {
              return;
          }

          if (this.indices.length > 0xffff) {
              this.indices = new __WEBPACK_IMPORTED_MODULE_0__core_vendor__["a" /* default */].Uint32Array(this.indices);
          }

          var attributes = this.attributes;
          var indices = this.indices;

          var attributeNameList = this.getEnabledAttributes();

          var oldAttrValues = {};
          for (var a = 0; a < attributeNameList.length; a++) {
              var name = attributeNameList[a];
              oldAttrValues[name] = attributes[name].value;
              attributes[name].init(this.indices.length);
          }

          var cursor = 0;
          for (var i = 0; i < indices.length; i++) {
              var ii = indices[i];
              for (var a = 0; a < attributeNameList.length; a++) {
                  var name = attributeNameList[a];
                  var array = attributes[name].value;
                  var size = attributes[name].size;

                  for (var k = 0; k < size; k++) {
                      array[cursor * size + k] = oldAttrValues[name][ii * size + k];
                  }
              }
              indices[i] = cursor;
              cursor++;
          }

          this.dirty();
      },

      /**
       * Generate barycentric coordinates for wireframe draw.
       */
      generateBarycentric: function () {
          if (!this.vertexCount) {
              return;
          }

          if (!this.isUniqueVertex()) {
              this.generateUniqueVertex();
          }

          var attributes = this.attributes;
          var array = attributes.barycentric.value;
          var indices = this.indices;
          // Already existed;
          if (array && array.length === indices.length * 3) {
              return;
          }
          array = attributes.barycentric.value = new Float32Array(indices.length * 3);

          for (var i = 0; i < (indices ? indices.length : this.vertexCount / 3);) {
              for (var j = 0; j < 3; j++) {
                  var ii = indices ? indices[i++] : (i * 3 + j);
                  array[ii * 3 + j] = 1;
              }
          }
          this.dirty();
      },

      /**
       * Apply transform to geometry attributes.
       * @param {clay.Matrix4} matrix
       */
      applyTransform: function (matrix) {

          var attributes = this.attributes;
          var positions = attributes.position.value;
          var normals = attributes.normal.value;
          var tangents = attributes.tangent.value;

          matrix = matrix.array;
          // Normal Matrix
          var inverseTransposeMatrix = __WEBPACK_IMPORTED_MODULE_2__glmatrix_mat4__["a" /* default */].create();
          __WEBPACK_IMPORTED_MODULE_2__glmatrix_mat4__["a" /* default */].invert(inverseTransposeMatrix, matrix);
          __WEBPACK_IMPORTED_MODULE_2__glmatrix_mat4__["a" /* default */].transpose(inverseTransposeMatrix, inverseTransposeMatrix);

          var vec3TransformMat4 = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].transformMat4;
          var vec3ForEach = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].forEach;
          vec3ForEach(positions, 3, 0, null, vec3TransformMat4, matrix);
          if (normals) {
              vec3ForEach(normals, 3, 0, null, vec3TransformMat4, inverseTransposeMatrix);
          }
          if (tangents) {
              vec3ForEach(tangents, 4, 0, null, vec3TransformMat4, inverseTransposeMatrix);
          }

          if (this.boundingBox) {
              this.updateBoundingBox();
          }
      },
      /**
       * Dispose geometry data in GL context.
       * @param {clay.Renderer} renderer
       */
      dispose: function (renderer) {

          var cache = this._cache;

          cache.use(renderer.__uid__);
          var chunks = cache.get('chunks');
          if (chunks) {
              for (var c = 0; c < chunks.length; c++) {
                  var chunk = chunks[c];

                  for (var k = 0; k < chunk.attributeBuffers.length; k++) {
                      var attribs = chunk.attributeBuffers[k];
                      renderer.gl.deleteBuffer(attribs.buffer);
                  }

                  if (chunk.indicesBuffer) {
                      renderer.gl.deleteBuffer(chunk.indicesBuffer.buffer);
                  }
              }
          }
          if (this.__vaoCache) {
              var vaoExt = renderer.getGLExtension('OES_vertex_array_object');
              for (var id in this.__vaoCache) {
                  var vao = this.__vaoCache[id].vao;
                  if (vao) {
                      vaoExt.deleteVertexArrayOES(vao);
                  }
              }
          }
          this.__vaoCache = {};
          cache.deleteContext(renderer.__uid__);
      }

  });

  Geometry.STATIC_DRAW = __WEBPACK_IMPORTED_MODULE_4__GeometryBase__["a" /* default */].STATIC_DRAW;
  Geometry.DYNAMIC_DRAW = __WEBPACK_IMPORTED_MODULE_4__GeometryBase__["a" /* default */].DYNAMIC_DRAW;
  Geometry.STREAM_DRAW = __WEBPACK_IMPORTED_MODULE_4__GeometryBase__["a" /* default */].STREAM_DRAW;

  Geometry.AttributeBuffer = __WEBPACK_IMPORTED_MODULE_4__GeometryBase__["a" /* default */].AttributeBuffer;
  Geometry.IndicesBuffer = __WEBPACK_IMPORTED_MODULE_4__GeometryBase__["a" /* default */].IndicesBuffer;

  Geometry.Attribute = Attribute;

  /* harmony default export */ __webpack_exports__["a"] = (Geometry);


  /***/ }),
  /* 15 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Base__ = __webpack_require__(8);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__camera_Orthographic__ = __webpack_require__(38);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__geometry_Plane__ = __webpack_require__(43);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Shader__ = __webpack_require__(9);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Material__ = __webpack_require__(19);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Mesh__ = __webpack_require__(41);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_glenum__ = __webpack_require__(11);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__shader_source_compositor_vertex_glsl_js__ = __webpack_require__(125);









  __WEBPACK_IMPORTED_MODULE_3__Shader__["a" /* default */]['import'](__WEBPACK_IMPORTED_MODULE_7__shader_source_compositor_vertex_glsl_js__["a" /* default */]);

  var planeGeo = new __WEBPACK_IMPORTED_MODULE_2__geometry_Plane__["a" /* default */]();
  var mesh = new __WEBPACK_IMPORTED_MODULE_5__Mesh__["a" /* default */]({
      geometry: planeGeo,
      frustumCulling: false
  });
  var camera = new __WEBPACK_IMPORTED_MODULE_1__camera_Orthographic__["a" /* default */]();

  /**
   * @constructor clay.compositor.Pass
   * @extends clay.core.Base
   */
  var Pass = __WEBPACK_IMPORTED_MODULE_0__core_Base__["a" /* default */].extend(function () {
      return /** @lends clay.compositor.Pass# */ {
          /**
           * Fragment shader string
           * @type {string}
           */
          // PENDING shader or fragment ?
          fragment: '',

          /**
           * @type {Object}
           */
          outputs: null,

          /**
           * @type {clay.Material}
           */
          material: null,

          /**
           * @type {Boolean}
           */
          blendWithPrevious: false,

          /**
           * @type {Boolean}
           */
          clearColor: false,

          /**
           * @type {Boolean}
           */
          clearDepth: true
      };
  }, function() {

      var shader = new __WEBPACK_IMPORTED_MODULE_3__Shader__["a" /* default */](__WEBPACK_IMPORTED_MODULE_3__Shader__["a" /* default */].source('clay.compositor.vertex'), this.fragment);
      var material = new __WEBPACK_IMPORTED_MODULE_4__Material__["a" /* default */]({
          shader: shader
      });
      material.enableTexturesAll();

      this.material = material;

  },
  /** @lends clay.compositor.Pass.prototype */
  {
      /**
       * @param {string} name
       * @param {} value
       */
      setUniform: function(name, value) {
          this.material.setUniform(name, value);
      },
      /**
       * @param  {string} name
       * @return {}
       */
      getUniform: function(name) {
          var uniform = this.material.uniforms[name];
          if (uniform) {
              return uniform.value;
          }
      },
      /**
       * @param  {clay.Texture} texture
       * @param  {number} attachment
       */
      attachOutput: function(texture, attachment) {
          if (!this.outputs) {
              this.outputs = {};
          }
          attachment = attachment || __WEBPACK_IMPORTED_MODULE_6__core_glenum__["a" /* default */].COLOR_ATTACHMENT0;
          this.outputs[attachment] = texture;
      },
      /**
       * @param  {clay.Texture} texture
       */
      detachOutput: function(texture) {
          for (var attachment in this.outputs) {
              if (this.outputs[attachment] === texture) {
                  this.outputs[attachment] = null;
              }
          }
      },

      bind: function(renderer, frameBuffer) {

          if (this.outputs) {
              for (var attachment in this.outputs) {
                  var texture = this.outputs[attachment];
                  if (texture) {
                      frameBuffer.attach(texture, attachment);
                  }
              }
          }

          if (frameBuffer) {
              frameBuffer.bind(renderer);
          }
      },

      unbind: function(renderer, frameBuffer) {
          frameBuffer.unbind(renderer);
      },
      /**
       * @param  {clay.Renderer} renderer
       * @param  {clay.FrameBuffer} [frameBuffer]
       */
      render: function(renderer, frameBuffer) {

          var _gl = renderer.gl;

          if (frameBuffer) {
              this.bind(renderer, frameBuffer);
              // MRT Support in chrome
              // https://www.khronos.org/registry/webgl/sdk/tests/conformance/extensions/ext-draw-buffers.html
              var ext = renderer.getGLExtension('EXT_draw_buffers');
              if (ext && this.outputs) {
                  var bufs = [];
                  for (var attachment in this.outputs) {
                      attachment = +attachment;
                      if (attachment >= _gl.COLOR_ATTACHMENT0 && attachment <= _gl.COLOR_ATTACHMENT0 + 8) {
                          bufs.push(attachment);
                      }
                  }
                  ext.drawBuffersEXT(bufs);
              }
          }

          this.trigger('beforerender', this, renderer);

          // FIXME Don't clear in each pass in default, let the color overwrite the buffer
          // FIXME pixels may be discard
          var clearBit = this.clearDepth ? _gl.DEPTH_BUFFER_BIT : 0;
          _gl.depthMask(true);
          if (this.clearColor) {
              clearBit = clearBit | _gl.COLOR_BUFFER_BIT;
              _gl.colorMask(true, true, true, true);
              var cc = this.clearColor;
              if (Array.isArray(cc)) {
                  _gl.clearColor(cc[0], cc[1], cc[2], cc[3]);
              }
          }
          _gl.clear(clearBit);

          if (this.blendWithPrevious) {
              // Blend with previous rendered scene in the final output
              // FIXME Configure blend.
              // FIXME It will cause screen blink？
              _gl.enable(_gl.BLEND);
              this.material.transparent = true;
          }
          else {
              _gl.disable(_gl.BLEND);
              this.material.transparent = false;
          }

          this.renderQuad(renderer);

          this.trigger('afterrender', this, renderer);

          if (frameBuffer) {
              this.unbind(renderer, frameBuffer);
          }
      },

      /**
       * Simply do quad rendering
       */
      renderQuad: function (renderer) {
          mesh.material = this.material;
          renderer.renderPass([mesh], camera);
      },

      /**
       * @param  {clay.Renderer} renderer
       */
      dispose: function (renderer) {}
  });

  /* harmony default export */ __webpack_exports__["a"] = (Pass);


  /***/ }),
  /* 16 */
  /***/ (function(module, exports) {

  /**
   * @module zrender/core/util
   */
  // 用于处理merge时无法遍历Date等对象的问题
  var BUILTIN_OBJECT = {
    '[object Function]': 1,
    '[object RegExp]': 1,
    '[object Date]': 1,
    '[object Error]': 1,
    '[object CanvasGradient]': 1,
    '[object CanvasPattern]': 1,
    // For node-canvas
    '[object Image]': 1,
    '[object Canvas]': 1
  };
  var TYPED_ARRAY = {
    '[object Int8Array]': 1,
    '[object Uint8Array]': 1,
    '[object Uint8ClampedArray]': 1,
    '[object Int16Array]': 1,
    '[object Uint16Array]': 1,
    '[object Int32Array]': 1,
    '[object Uint32Array]': 1,
    '[object Float32Array]': 1,
    '[object Float64Array]': 1
  };
  var objToString = Object.prototype.toString;
  var arrayProto = Array.prototype;
  var nativeForEach = arrayProto.forEach;
  var nativeFilter = arrayProto.filter;
  var nativeSlice = arrayProto.slice;
  var nativeMap = arrayProto.map;
  var nativeReduce = arrayProto.reduce; // Avoid assign to an exported variable, for transforming to cjs.

  var methods = {};

  function $override(name, fn) {
    // Clear ctx instance for different environment
    if (name === 'createCanvas') {
      _ctx = null;
    }

    methods[name] = fn;
  }
  /**
   * Those data types can be cloned:
   *     Plain object, Array, TypedArray, number, string, null, undefined.
   * Those data types will be assgined using the orginal data:
   *     BUILTIN_OBJECT
   * Instance of user defined class will be cloned to a plain object, without
   * properties in prototype.
   * Other data types is not supported (not sure what will happen).
   *
   * Caution: do not support clone Date, for performance consideration.
   * (There might be a large number of date in `series.data`).
   * So date should not be modified in and out of echarts.
   *
   * @param {*} source
   * @return {*} new
   */


  function clone(source) {
    if (source == null || typeof source !== 'object') {
      return source;
    }

    var result = source;
    var typeStr = objToString.call(source);

    if (typeStr === '[object Array]') {
      if (!isPrimitive(source)) {
        result = [];

        for (var i = 0, len = source.length; i < len; i++) {
          result[i] = clone(source[i]);
        }
      }
    } else if (TYPED_ARRAY[typeStr]) {
      if (!isPrimitive(source)) {
        var Ctor = source.constructor;

        if (source.constructor.from) {
          result = Ctor.from(source);
        } else {
          result = new Ctor(source.length);

          for (var i = 0, len = source.length; i < len; i++) {
            result[i] = clone(source[i]);
          }
        }
      }
    } else if (!BUILTIN_OBJECT[typeStr] && !isPrimitive(source) && !isDom(source)) {
      result = {};

      for (var key in source) {
        if (source.hasOwnProperty(key)) {
          result[key] = clone(source[key]);
        }
      }
    }

    return result;
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {*} target
   * @param {*} source
   * @param {boolean} [overwrite=false]
   */


  function merge(target, source, overwrite) {
    // We should escapse that source is string
    // and enter for ... in ...
    if (!isObject(source) || !isObject(target)) {
      return overwrite ? clone(source) : target;
    }

    for (var key in source) {
      if (source.hasOwnProperty(key)) {
        var targetProp = target[key];
        var sourceProp = source[key];

        if (isObject(sourceProp) && isObject(targetProp) && !isArray(sourceProp) && !isArray(targetProp) && !isDom(sourceProp) && !isDom(targetProp) && !isBuiltInObject(sourceProp) && !isBuiltInObject(targetProp) && !isPrimitive(sourceProp) && !isPrimitive(targetProp)) {
          // 如果需要递归覆盖，就递归调用merge
          merge(targetProp, sourceProp, overwrite);
        } else if (overwrite || !(key in target)) {
          // 否则只处理overwrite为true，或者在目标对象中没有此属性的情况
          // NOTE，在 target[key] 不存在的时候也是直接覆盖
          target[key] = clone(source[key]);
        }
      }
    }

    return target;
  }
  /**
   * @param {Array} targetAndSources The first item is target, and the rests are source.
   * @param {boolean} [overwrite=false]
   * @return {*} target
   */


  function mergeAll(targetAndSources, overwrite) {
    var result = targetAndSources[0];

    for (var i = 1, len = targetAndSources.length; i < len; i++) {
      result = merge(result, targetAndSources[i], overwrite);
    }

    return result;
  }
  /**
   * @param {*} target
   * @param {*} source
   * @memberOf module:zrender/core/util
   */


  function extend(target, source) {
    for (var key in source) {
      if (source.hasOwnProperty(key)) {
        target[key] = source[key];
      }
    }

    return target;
  }
  /**
   * @param {*} target
   * @param {*} source
   * @param {boolean} [overlay=false]
   * @memberOf module:zrender/core/util
   */


  function defaults(target, source, overlay) {
    for (var key in source) {
      if (source.hasOwnProperty(key) && (overlay ? source[key] != null : target[key] == null)) {
        target[key] = source[key];
      }
    }

    return target;
  }

  var createCanvas = function () {
    return methods.createCanvas();
  };

  methods.createCanvas = function () {
    return document.createElement('canvas');
  }; // FIXME


  var _ctx;

  function getContext() {
    if (!_ctx) {
      // Use util.createCanvas instead of createCanvas
      // because createCanvas may be overwritten in different environment
      _ctx = createCanvas().getContext('2d');
    }

    return _ctx;
  }
  /**
   * 查询数组中元素的index
   * @memberOf module:zrender/core/util
   */


  function indexOf(array, value) {
    if (array) {
      if (array.indexOf) {
        return array.indexOf(value);
      }

      for (var i = 0, len = array.length; i < len; i++) {
        if (array[i] === value) {
          return i;
        }
      }
    }

    return -1;
  }
  /**
   * 构造类继承关系
   *
   * @memberOf module:zrender/core/util
   * @param {Function} clazz 源类
   * @param {Function} baseClazz 基类
   */


  function inherits(clazz, baseClazz) {
    var clazzPrototype = clazz.prototype;

    function F() {}

    F.prototype = baseClazz.prototype;
    clazz.prototype = new F();

    for (var prop in clazzPrototype) {
      if (clazzPrototype.hasOwnProperty(prop)) {
        clazz.prototype[prop] = clazzPrototype[prop];
      }
    }

    clazz.prototype.constructor = clazz;
    clazz.superClass = baseClazz;
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {Object|Function} target
   * @param {Object|Function} sorce
   * @param {boolean} overlay
   */


  function mixin(target, source, overlay) {
    target = 'prototype' in target ? target.prototype : target;
    source = 'prototype' in source ? source.prototype : source;
    defaults(target, source, overlay);
  }
  /**
   * Consider typed array.
   * @param {Array|TypedArray} data
   */


  function isArrayLike(data) {
    if (!data) {
      return;
    }

    if (typeof data === 'string') {
      return false;
    }

    return typeof data.length === 'number';
  }
  /**
   * 数组或对象遍历
   * @memberOf module:zrender/core/util
   * @param {Object|Array} obj
   * @param {Function} cb
   * @param {*} [context]
   */


  function each(obj, cb, context) {
    if (!(obj && cb)) {
      return;
    }

    if (obj.forEach && obj.forEach === nativeForEach) {
      obj.forEach(cb, context);
    } else if (obj.length === +obj.length) {
      for (var i = 0, len = obj.length; i < len; i++) {
        cb.call(context, obj[i], i, obj);
      }
    } else {
      for (var key in obj) {
        if (obj.hasOwnProperty(key)) {
          cb.call(context, obj[key], key, obj);
        }
      }
    }
  }
  /**
   * 数组映射
   * @memberOf module:zrender/core/util
   * @param {Array} obj
   * @param {Function} cb
   * @param {*} [context]
   * @return {Array}
   */


  function map(obj, cb, context) {
    if (!(obj && cb)) {
      return;
    }

    if (obj.map && obj.map === nativeMap) {
      return obj.map(cb, context);
    } else {
      var result = [];

      for (var i = 0, len = obj.length; i < len; i++) {
        result.push(cb.call(context, obj[i], i, obj));
      }

      return result;
    }
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {Array} obj
   * @param {Function} cb
   * @param {Object} [memo]
   * @param {*} [context]
   * @return {Array}
   */


  function reduce(obj, cb, memo, context) {
    if (!(obj && cb)) {
      return;
    }

    if (obj.reduce && obj.reduce === nativeReduce) {
      return obj.reduce(cb, memo, context);
    } else {
      for (var i = 0, len = obj.length; i < len; i++) {
        memo = cb.call(context, memo, obj[i], i, obj);
      }

      return memo;
    }
  }
  /**
   * 数组过滤
   * @memberOf module:zrender/core/util
   * @param {Array} obj
   * @param {Function} cb
   * @param {*} [context]
   * @return {Array}
   */


  function filter(obj, cb, context) {
    if (!(obj && cb)) {
      return;
    }

    if (obj.filter && obj.filter === nativeFilter) {
      return obj.filter(cb, context);
    } else {
      var result = [];

      for (var i = 0, len = obj.length; i < len; i++) {
        if (cb.call(context, obj[i], i, obj)) {
          result.push(obj[i]);
        }
      }

      return result;
    }
  }
  /**
   * 数组项查找
   * @memberOf module:zrender/core/util
   * @param {Array} obj
   * @param {Function} cb
   * @param {*} [context]
   * @return {*}
   */


  function find(obj, cb, context) {
    if (!(obj && cb)) {
      return;
    }

    for (var i = 0, len = obj.length; i < len; i++) {
      if (cb.call(context, obj[i], i, obj)) {
        return obj[i];
      }
    }
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {Function} func
   * @param {*} context
   * @return {Function}
   */


  function bind(func, context) {
    var args = nativeSlice.call(arguments, 2);
    return function () {
      return func.apply(context, args.concat(nativeSlice.call(arguments)));
    };
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {Function} func
   * @return {Function}
   */


  function curry(func) {
    var args = nativeSlice.call(arguments, 1);
    return function () {
      return func.apply(this, args.concat(nativeSlice.call(arguments)));
    };
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {*} value
   * @return {boolean}
   */


  function isArray(value) {
    return objToString.call(value) === '[object Array]';
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {*} value
   * @return {boolean}
   */


  function isFunction(value) {
    return typeof value === 'function';
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {*} value
   * @return {boolean}
   */


  function isString(value) {
    return objToString.call(value) === '[object String]';
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {*} value
   * @return {boolean}
   */


  function isObject(value) {
    // Avoid a V8 JIT bug in Chrome 19-20.
    // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
    var type = typeof value;
    return type === 'function' || !!value && type === 'object';
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {*} value
   * @return {boolean}
   */


  function isBuiltInObject(value) {
    return !!BUILTIN_OBJECT[objToString.call(value)];
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {*} value
   * @return {boolean}
   */


  function isTypedArray(value) {
    return !!TYPED_ARRAY[objToString.call(value)];
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {*} value
   * @return {boolean}
   */


  function isDom(value) {
    return typeof value === 'object' && typeof value.nodeType === 'number' && typeof value.ownerDocument === 'object';
  }
  /**
   * Whether is exactly NaN. Notice isNaN('a') returns true.
   * @param {*} value
   * @return {boolean}
   */


  function eqNaN(value) {
    /* eslint-disable-next-line no-self-compare */
    return value !== value;
  }
  /**
   * If value1 is not null, then return value1, otherwise judget rest of values.
   * Low performance.
   * @memberOf module:zrender/core/util
   * @return {*} Final value
   */


  function retrieve(values) {
    for (var i = 0, len = arguments.length; i < len; i++) {
      if (arguments[i] != null) {
        return arguments[i];
      }
    }
  }

  function retrieve2(value0, value1) {
    return value0 != null ? value0 : value1;
  }

  function retrieve3(value0, value1, value2) {
    return value0 != null ? value0 : value1 != null ? value1 : value2;
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {Array} arr
   * @param {number} startIndex
   * @param {number} endIndex
   * @return {Array}
   */


  function slice() {
    return Function.call.apply(nativeSlice, arguments);
  }
  /**
   * Normalize css liked array configuration
   * e.g.
   *  3 => [3, 3, 3, 3]
   *  [4, 2] => [4, 2, 4, 2]
   *  [4, 3, 2] => [4, 3, 2, 3]
   * @param {number|Array.<number>} val
   * @return {Array.<number>}
   */


  function normalizeCssArray(val) {
    if (typeof val === 'number') {
      return [val, val, val, val];
    }

    var len = val.length;

    if (len === 2) {
      // vertical | horizontal
      return [val[0], val[1], val[0], val[1]];
    } else if (len === 3) {
      // top | horizontal | bottom
      return [val[0], val[1], val[2], val[1]];
    }

    return val;
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {boolean} condition
   * @param {string} message
   */


  function assert(condition, message) {
    if (!condition) {
      throw new Error(message);
    }
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {string} str string to be trimed
   * @return {string} trimed string
   */


  function trim(str) {
    if (str == null) {
      return null;
    } else if (typeof str.trim === 'function') {
      return str.trim();
    } else {
      return str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
    }
  }

  var primitiveKey = '__ec_primitive__';
  /**
   * Set an object as primitive to be ignored traversing children in clone or merge
   */

  function setAsPrimitive(obj) {
    obj[primitiveKey] = true;
  }

  function isPrimitive(obj) {
    return obj[primitiveKey];
  }
  /**
   * @constructor
   * @param {Object} obj Only apply `ownProperty`.
   */


  function HashMap(obj) {
    var isArr = isArray(obj); // Key should not be set on this, otherwise
    // methods get/set/... may be overrided.

    this.data = {};
    var thisMap = this;
    obj instanceof HashMap ? obj.each(visit) : obj && each(obj, visit);

    function visit(value, key) {
      isArr ? thisMap.set(value, key) : thisMap.set(key, value);
    }
  }

  HashMap.prototype = {
    constructor: HashMap,
    // Do not provide `has` method to avoid defining what is `has`.
    // (We usually treat `null` and `undefined` as the same, different
    // from ES6 Map).
    get: function (key) {
      return this.data.hasOwnProperty(key) ? this.data[key] : null;
    },
    set: function (key, value) {
      // Comparing with invocation chaining, `return value` is more commonly
      // used in this case: `var someVal = map.set('a', genVal());`
      return this.data[key] = value;
    },
    // Although util.each can be performed on this hashMap directly, user
    // should not use the exposed keys, who are prefixed.
    each: function (cb, context) {
      context !== void 0 && (cb = bind(cb, context));
      /* eslint-disable guard-for-in */

      for (var key in this.data) {
        this.data.hasOwnProperty(key) && cb(this.data[key], key);
      }
      /* eslint-enable guard-for-in */

    },
    // Do not use this method if performance sensitive.
    removeKey: function (key) {
      delete this.data[key];
    }
  };

  function createHashMap(obj) {
    return new HashMap(obj);
  }

  function concatArray(a, b) {
    var newArray = new a.constructor(a.length + b.length);

    for (var i = 0; i < a.length; i++) {
      newArray[i] = a[i];
    }

    var offset = a.length;

    for (i = 0; i < b.length; i++) {
      newArray[i + offset] = b[i];
    }

    return newArray;
  }

  function noop() {}

  exports.$override = $override;
  exports.clone = clone;
  exports.merge = merge;
  exports.mergeAll = mergeAll;
  exports.extend = extend;
  exports.defaults = defaults;
  exports.createCanvas = createCanvas;
  exports.getContext = getContext;
  exports.indexOf = indexOf;
  exports.inherits = inherits;
  exports.mixin = mixin;
  exports.isArrayLike = isArrayLike;
  exports.each = each;
  exports.map = map;
  exports.reduce = reduce;
  exports.filter = filter;
  exports.find = find;
  exports.bind = bind;
  exports.curry = curry;
  exports.isArray = isArray;
  exports.isFunction = isFunction;
  exports.isString = isString;
  exports.isObject = isObject;
  exports.isBuiltInObject = isBuiltInObject;
  exports.isTypedArray = isTypedArray;
  exports.isDom = isDom;
  exports.eqNaN = eqNaN;
  exports.retrieve = retrieve;
  exports.retrieve2 = retrieve2;
  exports.retrieve3 = retrieve3;
  exports.slice = slice;
  exports.normalizeCssArray = normalizeCssArray;
  exports.assert = assert;
  exports.trim = trim;
  exports.setAsPrimitive = setAsPrimitive;
  exports.isPrimitive = isPrimitive;
  exports.createHashMap = createHashMap;
  exports.concatArray = concatArray;
  exports.noop = noop;

  /***/ }),
  /* 17 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = (function (seriesType, ecModel, api) {
      return {
          seriesType: seriesType,
          reset: function (seriesModel, ecModel) {
              var data = seriesModel.getData();
              var opacityAccessPath = seriesModel.visualColorAccessPath.split('.');
              opacityAccessPath[opacityAccessPath.length - 1] ='opacity';

              var opacity = seriesModel.get(opacityAccessPath);

              data.setVisual('opacity', opacity == null ? 1 : opacity);

              function dataEach(data, idx) {
                  var itemModel = data.getItemModel(idx);
                  var opacity = itemModel.get(opacityAccessPath, true);
                  if (opacity != null) {
                      data.setItemVisual(idx, 'opacity', opacity);
                  }
              }

              return {
                  dataEach: data.hasItemOption ? dataEach : null
              };
          }
      };
  });

  /***/ }),
  /* 18 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Vector3__ = __webpack_require__(3);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__ = __webpack_require__(12);



  var vec3Set = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].set;
  var vec3Copy = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].copy;

  /**
   * Axis aligned bounding box
   * @constructor
   * @alias clay.BoundingBox
   * @param {clay.Vector3} [min]
   * @param {clay.Vector3} [max]
   */
  var BoundingBox = function (min, max) {

      /**
       * Minimum coords of bounding box
       * @type {clay.Vector3}
       */
      this.min = min || new __WEBPACK_IMPORTED_MODULE_0__Vector3__["a" /* default */](Infinity, Infinity, Infinity);

      /**
       * Maximum coords of bounding box
       * @type {clay.Vector3}
       */
      this.max = max || new __WEBPACK_IMPORTED_MODULE_0__Vector3__["a" /* default */](-Infinity, -Infinity, -Infinity);

      this.vertices = null;
  };

  BoundingBox.prototype = {

      constructor: BoundingBox,
      /**
       * Update min and max coords from a vertices array
       * @param  {array} vertices
       */
      updateFromVertices: function (vertices) {
          if (vertices.length > 0) {
              var min = this.min;
              var max = this.max;
              var minArr = min.array;
              var maxArr = max.array;
              vec3Copy(minArr, vertices[0]);
              vec3Copy(maxArr, vertices[0]);
              for (var i = 1; i < vertices.length; i++) {
                  var vertex = vertices[i];

                  if (vertex[0] < minArr[0]) { minArr[0] = vertex[0]; }
                  if (vertex[1] < minArr[1]) { minArr[1] = vertex[1]; }
                  if (vertex[2] < minArr[2]) { minArr[2] = vertex[2]; }

                  if (vertex[0] > maxArr[0]) { maxArr[0] = vertex[0]; }
                  if (vertex[1] > maxArr[1]) { maxArr[1] = vertex[1]; }
                  if (vertex[2] > maxArr[2]) { maxArr[2] = vertex[2]; }
              }
              min._dirty = true;
              max._dirty = true;
          }
      },

      /**
       * Union operation with another bounding box
       * @param  {clay.BoundingBox} bbox
       */
      union: function (bbox) {
          var min = this.min;
          var max = this.max;
          __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].min(min.array, min.array, bbox.min.array);
          __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].max(max.array, max.array, bbox.max.array);
          min._dirty = true;
          max._dirty = true;
          return this;
      },

      /**
       * Intersection operation with another bounding box
       * @param  {clay.BoundingBox} bbox
       */
      intersection: function (bbox) {
          var min = this.min;
          var max = this.max;
          __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].max(min.array, min.array, bbox.min.array);
          __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].min(max.array, max.array, bbox.max.array);
          min._dirty = true;
          max._dirty = true;
          return this;
      },

      /**
       * If intersect with another bounding box
       * @param  {clay.BoundingBox} bbox
       * @return {boolean}
       */
      intersectBoundingBox: function (bbox) {
          var _min = this.min.array;
          var _max = this.max.array;

          var _min2 = bbox.min.array;
          var _max2 = bbox.max.array;

          return ! (_min[0] > _max2[0] || _min[1] > _max2[1] || _min[2] > _max2[2]
              || _max[0] < _min2[0] || _max[1] < _min2[1] || _max[2] < _min2[2]);
      },

      /**
       * If contain another bounding box entirely
       * @param  {clay.BoundingBox} bbox
       * @return {boolean}
       */
      containBoundingBox: function (bbox) {

          var _min = this.min.array;
          var _max = this.max.array;

          var _min2 = bbox.min.array;
          var _max2 = bbox.max.array;

          return _min[0] <= _min2[0] && _min[1] <= _min2[1] && _min[2] <= _min2[2]
              && _max[0] >= _max2[0] && _max[1] >= _max2[1] && _max[2] >= _max2[2];
      },

      /**
       * If contain point entirely
       * @param  {clay.Vector3} point
       * @return {boolean}
       */
      containPoint: function (p) {
          var _min = this.min.array;
          var _max = this.max.array;

          var _p = p.array;

          return _min[0] <= _p[0] && _min[1] <= _p[1] && _min[2] <= _p[2]
              && _max[0] >= _p[0] && _max[1] >= _p[1] && _max[2] >= _p[2];
      },

      /**
       * If bounding box is finite
       */
      isFinite: function () {
          var _min = this.min.array;
          var _max = this.max.array;
          return isFinite(_min[0]) && isFinite(_min[1]) && isFinite(_min[2])
              && isFinite(_max[0]) && isFinite(_max[1]) && isFinite(_max[2]);
      },

      /**
       * Apply an affine transform matrix to the bounding box
       * @param  {clay.Matrix4} matrix
       */
      applyTransform: function (matrix) {
          this.transformFrom(this, matrix);
      },

      /**
       * Get from another bounding box and an affine transform matrix.
       * @param {clay.BoundingBox} source
       * @param {clay.Matrix4} matrix
       */
      transformFrom: (function () {
          // http://dev.theomader.com/transform-bounding-boxes/
          var xa = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].create();
          var xb = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].create();
          var ya = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].create();
          var yb = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].create();
          var za = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].create();
          var zb = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].create();

          return function (source, matrix) {
              var min = source.min.array;
              var max = source.max.array;

              var m = matrix.array;

              xa[0] = m[0] * min[0]; xa[1] = m[1] * min[0]; xa[2] = m[2] * min[0];
              xb[0] = m[0] * max[0]; xb[1] = m[1] * max[0]; xb[2] = m[2] * max[0];

              ya[0] = m[4] * min[1]; ya[1] = m[5] * min[1]; ya[2] = m[6] * min[1];
              yb[0] = m[4] * max[1]; yb[1] = m[5] * max[1]; yb[2] = m[6] * max[1];

              za[0] = m[8] * min[2]; za[1] = m[9] * min[2]; za[2] = m[10] * min[2];
              zb[0] = m[8] * max[2]; zb[1] = m[9] * max[2]; zb[2] = m[10] * max[2];

              min = this.min.array;
              max = this.max.array;
              min[0] = Math.min(xa[0], xb[0]) + Math.min(ya[0], yb[0]) + Math.min(za[0], zb[0]) + m[12];
              min[1] = Math.min(xa[1], xb[1]) + Math.min(ya[1], yb[1]) + Math.min(za[1], zb[1]) + m[13];
              min[2] = Math.min(xa[2], xb[2]) + Math.min(ya[2], yb[2]) + Math.min(za[2], zb[2]) + m[14];

              max[0] = Math.max(xa[0], xb[0]) + Math.max(ya[0], yb[0]) + Math.max(za[0], zb[0]) + m[12];
              max[1] = Math.max(xa[1], xb[1]) + Math.max(ya[1], yb[1]) + Math.max(za[1], zb[1]) + m[13];
              max[2] = Math.max(xa[2], xb[2]) + Math.max(ya[2], yb[2]) + Math.max(za[2], zb[2]) + m[14];

              this.min._dirty = true;
              this.max._dirty = true;

              return this;
          };
      })(),

      /**
       * Apply a projection matrix to the bounding box
       * @param  {clay.Matrix4} matrix
       */
      applyProjection: function (matrix) {
          var min = this.min.array;
          var max = this.max.array;

          var m = matrix.array;
          // min in min z
          var v10 = min[0];
          var v11 = min[1];
          var v12 = min[2];
          // max in min z
          var v20 = max[0];
          var v21 = max[1];
          var v22 = min[2];
          // max in max z
          var v30 = max[0];
          var v31 = max[1];
          var v32 = max[2];

          if (m[15] === 1) {  // Orthographic projection
              min[0] = m[0] * v10 + m[12];
              min[1] = m[5] * v11 + m[13];
              max[2] = m[10] * v12 + m[14];

              max[0] = m[0] * v30 + m[12];
              max[1] = m[5] * v31 + m[13];
              min[2] = m[10] * v32 + m[14];
          }
          else {
              var w = -1 / v12;
              min[0] = m[0] * v10 * w;
              min[1] = m[5] * v11 * w;
              max[2] = (m[10] * v12 + m[14]) * w;

              w = -1 / v22;
              max[0] = m[0] * v20 * w;
              max[1] = m[5] * v21 * w;

              w = -1 / v32;
              min[2] = (m[10] * v32 + m[14]) * w;
          }
          this.min._dirty = true;
          this.max._dirty = true;

          return this;
      },

      updateVertices: function () {
          var vertices = this.vertices;
          if (!vertices) {
              // Cube vertices
              vertices = [];
              for (var i = 0; i < 8; i++) {
                  vertices[i] = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].fromValues(0, 0, 0);
              }

              /**
               * Eight coords of bounding box
               * @type {Float32Array[]}
               */
              this.vertices = vertices;
          }
          var min = this.min.array;
          var max = this.max.array;
          //--- min z
          // min x
          vec3Set(vertices[0], min[0], min[1], min[2]);
          vec3Set(vertices[1], min[0], max[1], min[2]);
          // max x
          vec3Set(vertices[2], max[0], min[1], min[2]);
          vec3Set(vertices[3], max[0], max[1], min[2]);

          //-- max z
          vec3Set(vertices[4], min[0], min[1], max[2]);
          vec3Set(vertices[5], min[0], max[1], max[2]);
          vec3Set(vertices[6], max[0], min[1], max[2]);
          vec3Set(vertices[7], max[0], max[1], max[2]);

          return this;
      },
      /**
       * Copy values from another bounding box
       * @param  {clay.BoundingBox} bbox
       */
      copy: function (bbox) {
          var min = this.min;
          var max = this.max;
          vec3Copy(min.array, bbox.min.array);
          vec3Copy(max.array, bbox.max.array);
          min._dirty = true;
          max._dirty = true;
          return this;
      },

      /**
       * Clone a new bounding box
       * @return {clay.BoundingBox}
       */
      clone: function () {
          var boundingBox = new BoundingBox();
          boundingBox.copy(this);
          return boundingBox;
      }
  };

  /* harmony default export */ __webpack_exports__["a"] = (BoundingBox);


  /***/ }),
  /* 19 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Base__ = __webpack_require__(8);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_util__ = __webpack_require__(23);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_color__ = __webpack_require__(112);



  var parseColor = __WEBPACK_IMPORTED_MODULE_2__core_color__["a" /* default */].parseToFloat;

  var programKeyCache = {};

  function getDefineCode(defines) {
      var defineKeys = Object.keys(defines);
      defineKeys.sort();
      var defineStr = [];
      // Custom Defines
      for (var i = 0; i < defineKeys.length; i++) {
          var key = defineKeys[i];
          var value = defines[key];
          if (value === null) {
              defineStr.push(key);
          }
          else {
              defineStr.push(key + ' ' + value.toString());
          }
      }
      return defineStr.join('\n');
  }

  function getProgramKey(vertexDefines, fragmentDefines, enabledTextures) {
      enabledTextures.sort();
      var defineStr = [];
      for (var i = 0; i < enabledTextures.length; i++) {
          var symbol = enabledTextures[i];
          defineStr.push(symbol);
      }
      var key = getDefineCode(vertexDefines) + '\n'
          + getDefineCode(fragmentDefines) + '\n'
          + defineStr.join('\n');

      if (programKeyCache[key]) {
          return programKeyCache[key];
      }

      var id = __WEBPACK_IMPORTED_MODULE_1__core_util__["a" /* default */].genGUID();
      programKeyCache[key] = id;
      return id;
  }

  /**
   * Material defines the appearance of mesh surface, like `color`, `roughness`, `metalness`, etc.
   * It contains a {@link clay.Shader} and corresponding uniforms.
   *
   * Here is a basic example to create a standard material
  ```js
  var material = new clay.Material({
      shader: new clay.Shader(
          clay.Shader.source('clay.vertex'),
          clay.Shader.source('clay.fragment')
      )
  });
  ```
   * @constructor clay.Material
   * @extends clay.core.Base
   */
  var Material = __WEBPACK_IMPORTED_MODULE_0__core_Base__["a" /* default */].extend(function () {
      return /** @lends clay.Material# */ {
          /**
           * @type {string}
           */
          name: '',

          /**
           * @type {Object}
           */
          // uniforms: null,

          /**
           * @type {clay.Shader}
           */
          // shader: null,

          /**
           * @type {boolean}
           */
          depthTest: true,

          /**
           * @type {boolean}
           */
          depthMask: true,

          /**
           * @type {boolean}
           */
          transparent: false,
          /**
           * Blend func is a callback function when the material
           * have custom blending
           * The gl context will be the only argument passed in tho the
           * blend function
           * Detail of blend function in WebGL:
           * http://www.khronos.org/registry/gles/specs/2.0/es_full_spec_2.0.25.pdf
           *
           * Example :
           * function(_gl) {
           *  _gl.blendEquation(_gl.FUNC_ADD);
           *  _gl.blendFunc(_gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA);
           * }
           */
          blend: null,

          /**
           * If update texture status automatically.
           */
          autoUpdateTextureStatus: true,

          uniforms: {},
          vertexDefines: {},
          fragmentDefines: {},
          _textureStatus: {},

          // shadowTransparentMap : null

          // PENDING enable the uniform that only used in shader.
          _enabledUniforms: null,
      };
  }, function () {
      if (!this.name) {
          this.name = 'MATERIAL_' + this.__uid__;
      }

      if (this.shader) {
          // Keep status, mainly preset uniforms, vertexDefines and fragmentDefines
          this.attachShader(this.shader, true);
      }
  },
  /** @lends clay.Material.prototype */
  {
      precision: 'highp',

      /**
       * Set material uniform
       * @example
       *  mat.setUniform('color', [1, 1, 1, 1]);
       * @param {string} symbol
       * @param {number|array|clay.Texture|ArrayBufferView} value
       */
      setUniform: function (symbol, value) {
          if (value === undefined) {
              console.warn('Uniform value "' + symbol + '" is undefined');
          }
          var uniform = this.uniforms[symbol];
          if (uniform) {

              if (typeof value === 'string') {
                  // Try to parse as a color. Invalid color string will return null.
                  value = parseColor(value) || value;
              }

              uniform.value = value;

              if (this.autoUpdateTextureStatus && uniform.type === 't') {
                  if (value) {
                      this.enableTexture(symbol);
                  }
                  else {
                      this.disableTexture(symbol);
                  }
              }
          }
      },

      /**
       * @param {Object} obj
       */
      setUniforms: function(obj) {
          for (var key in obj) {
              var val = obj[key];
              this.setUniform(key, val);
          }
      },

      /**
       * @param  {string}  symbol
       * @return {boolean}
       */
      isUniformEnabled: function (symbol) {
          return this._enabledUniforms.indexOf(symbol) >= 0;
      },

      getEnabledUniforms: function () {
          return this._enabledUniforms;
      },
      getTextureUniforms: function () {
          return this._textureUniforms;
      },

      /**
       * Alias of setUniform and setUniforms
       * @param {object|string} symbol
       * @param {number|array|clay.Texture|ArrayBufferView} [value]
       */
      set: function (symbol, value) {
          if (typeof(symbol) === 'object') {
              for (var key in symbol) {
                  var val = symbol[key];
                  this.setUniform(key, val);
              }
          }
          else {
              this.setUniform(symbol, value);
          }
      },
      /**
       * Get uniform value
       * @param  {string} symbol
       * @return {number|array|clay.Texture|ArrayBufferView}
       */
      get: function (symbol) {
          var uniform = this.uniforms[symbol];
          if (uniform) {
              return uniform.value;
          }
      },
      /**
       * Attach a shader instance
       * @param  {clay.Shader} shader
       * @param  {boolean} keepStatus If try to keep uniform and texture
       */
      attachShader: function(shader, keepStatus) {
          var originalUniforms = this.uniforms;

          // Ignore if uniform can use in shader.
          this.uniforms = shader.createUniforms();
          this.shader = shader;

          var uniforms = this.uniforms;
          this._enabledUniforms = Object.keys(uniforms);
          // Make sure uniforms are set in same order to avoid texture slot wrong
          this._enabledUniforms.sort();
          this._textureUniforms = this._enabledUniforms.filter(function (uniformName) {
              var type = this.uniforms[uniformName].type;
              return type === 't' || type === 'tv';
          }, this);

          var originalVertexDefines = this.vertexDefines;
          var originalFragmentDefines = this.fragmentDefines;

          this.vertexDefines = __WEBPACK_IMPORTED_MODULE_1__core_util__["a" /* default */].clone(shader.vertexDefines);
          this.fragmentDefines = __WEBPACK_IMPORTED_MODULE_1__core_util__["a" /* default */].clone(shader.fragmentDefines);

          if (keepStatus) {
              for (var symbol in originalUniforms) {
                  if (uniforms[symbol]) {
                      uniforms[symbol].value = originalUniforms[symbol].value;
                  }
              }

              __WEBPACK_IMPORTED_MODULE_1__core_util__["a" /* default */].defaults(this.vertexDefines, originalVertexDefines);
              __WEBPACK_IMPORTED_MODULE_1__core_util__["a" /* default */].defaults(this.fragmentDefines, originalFragmentDefines);
          }

          var textureStatus = {};
          for (var key in shader.textures) {
              textureStatus[key] = {
                  shaderType: shader.textures[key].shaderType,
                  type: shader.textures[key].type,
                  enabled: (keepStatus && this._textureStatus[key]) ? this._textureStatus[key].enabled : false
              };
          }

          this._textureStatus = textureStatus;

          this._programKey = '';
      },

      /**
       * Clone a new material and keep uniforms, shader will not be cloned
       * @return {clay.Material}
       */
      clone: function () {
          var material = new this.constructor({
              name: this.name,
              shader: this.shader
          });
          for (var symbol in this.uniforms) {
              material.uniforms[symbol].value = this.uniforms[symbol].value;
          }
          material.depthTest = this.depthTest;
          material.depthMask = this.depthMask;
          material.transparent = this.transparent;
          material.blend = this.blend;

          material.vertexDefines = __WEBPACK_IMPORTED_MODULE_1__core_util__["a" /* default */].clone(this.vertexDefines);
          material.fragmentDefines = __WEBPACK_IMPORTED_MODULE_1__core_util__["a" /* default */].clone(this.fragmentDefines);
          material.enableTexture(this.getEnabledTextures());
          material.precision = this.precision;

          return material;
      },

      /**
       * Add a #define macro in shader code
       * @param  {string} shaderType Can be vertex, fragment or both
       * @param  {string} symbol
       * @param  {number} [val]
       */
      define: function (shaderType, symbol, val) {
          var vertexDefines = this.vertexDefines;
          var fragmentDefines = this.fragmentDefines;
          if (shaderType !== 'vertex' && shaderType !== 'fragment' && shaderType !== 'both'
              && arguments.length < 3
          ) {
              // shaderType default to be 'both'
              val = symbol;
              symbol = shaderType;
              shaderType = 'both';
          }
          val = val != null ? val : null;
          if (shaderType === 'vertex' || shaderType === 'both') {
              if (vertexDefines[symbol] !== val) {
                  vertexDefines[symbol] = val;
                  // Mark as dirty
                  this._programKey = '';
              }
          }
          if (shaderType === 'fragment' || shaderType === 'both') {
              if (fragmentDefines[symbol] !== val) {
                  fragmentDefines[symbol] = val;
                  if (shaderType !== 'both') {
                      this._programKey = '';
                  }
              }
          }
      },

      /**
       * Remove a #define macro in shader code
       * @param  {string} shaderType Can be vertex, fragment or both
       * @param  {string} symbol
       */
      undefine: function (shaderType, symbol) {
          if (shaderType !== 'vertex' && shaderType !== 'fragment' && shaderType !== 'both'
              && arguments.length < 2
          ) {
              // shaderType default to be 'both'
              symbol = shaderType;
              shaderType = 'both';
          }
          if (shaderType === 'vertex' || shaderType === 'both') {
              if (this.isDefined('vertex', symbol)) {
                  delete this.vertexDefines[symbol];
                  // Mark as dirty
                  this._programKey = '';
              }
          }
          if (shaderType === 'fragment' || shaderType === 'both') {
              if (this.isDefined('fragment', symbol)) {
                  delete this.fragmentDefines[symbol];
                  if (shaderType !== 'both') {
                      this._programKey = '';
                  }
              }
          }
      },

      /**
       * If macro is defined in shader.
       * @param  {string} shaderType Can be vertex, fragment or both
       * @param  {string} symbol
       */
      isDefined: function (shaderType, symbol) {
          // PENDING hasOwnProperty ?
          switch (shaderType) {
              case 'vertex':
                  return this.vertexDefines[symbol] !== undefined;
              case 'fragment':
                  return this.fragmentDefines[symbol] !== undefined;
          }
      },
      /**
       * Get macro value defined in shader.
       * @param  {string} shaderType Can be vertex, fragment or both
       * @param  {string} symbol
       */
      getDefine: function (shaderType, symbol) {
          switch(shaderType) {
              case 'vertex':
                  return this.vertexDefines[symbol];
              case 'fragment':
                  return this.fragmentDefines[symbol];
          }
      },
      /**
       * Enable a texture, actually it will add a #define macro in the shader code
       * For example, if texture symbol is diffuseMap, it will add a line `#define DIFFUSEMAP_ENABLED` in the shader code
       * @param  {string} symbol
       */
      enableTexture: function (symbol) {
          if (Array.isArray(symbol)) {
              for (var i = 0; i < symbol.length; i++) {
                  this.enableTexture(symbol[i]);
              }
              return;
          }

          var status = this._textureStatus[symbol];
          if (status) {
              var isEnabled = status.enabled;
              if (!isEnabled) {
                  status.enabled = true;
                  this._programKey = '';
              }
          }
      },
      /**
       * Enable all textures used in the shader
       */
      enableTexturesAll: function () {
          var textureStatus = this._textureStatus;
          for (var symbol in textureStatus) {
              textureStatus[symbol].enabled = true;
          }

          this._programKey = '';
      },
      /**
       * Disable a texture, it remove a #define macro in the shader
       * @param  {string} symbol
       */
      disableTexture: function (symbol) {
          if (Array.isArray(symbol)) {
              for (var i = 0; i < symbol.length; i++) {
                  this.disableTexture(symbol[i]);
              }
              return;
          }

          var status = this._textureStatus[symbol];
          if (status) {
              var isDisabled = ! status.enabled;
              if (!isDisabled) {
                  status.enabled = false;
                  this._programKey = '';
              }
          }
      },
      /**
       * Disable all textures used in the shader
       */
      disableTexturesAll: function () {
          var textureStatus = this._textureStatus;
          for (var symbol in textureStatus) {
              textureStatus[symbol].enabled = false;
          }

          this._programKey = '';
      },
      /**
       * If texture of given type is enabled.
       * @param  {string}  symbol
       * @return {boolean}
       */
      isTextureEnabled: function (symbol) {
          var textureStatus = this._textureStatus;
          return !!textureStatus[symbol]
              && textureStatus[symbol].enabled;
      },

      /**
       * Get all enabled textures
       * @return {string[]}
       */
      getEnabledTextures: function () {
          var enabledTextures = [];
          var textureStatus = this._textureStatus;
          for (var symbol in textureStatus) {
              if (textureStatus[symbol].enabled) {
                  enabledTextures.push(symbol);
              }
          }
          return enabledTextures;
      },

      /**
       * Mark defines are updated.
       */
      dirtyDefines: function () {
          this._programKey = '';
      },

      getProgramKey: function () {
          if (!this._programKey) {
              this._programKey = getProgramKey(
                  this.vertexDefines, this.fragmentDefines, this.getEnabledTextures()
              );
          }
          return this._programKey;
      }
  });

  /* harmony default export */ __webpack_exports__["a"] = (Material);


  /***/ }),
  /* 20 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return GLMAT_EPSILON; });
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return GLMAT_ARRAY_TYPE; });
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return GLMAT_RANDOM; });

  var GLMAT_EPSILON = 0.000001;

  // Use Array instead of Float32Array. It seems to be much faster and higher precision.
  var GLMAT_ARRAY_TYPE = Array;
  // if(!GLMAT_ARRAY_TYPE) {
  //     GLMAT_ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;
  // }

  var GLMAT_RANDOM = Math.random;


  /***/ }),
  /* 21 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(20);

  /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, this
      list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
      and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */



  /**
   * @class 4x4 Matrix
   * @name mat4
   */

  var mat4 = {};

  /**
   * Creates a new identity mat4
   *
   * @returns {mat4} a new 4x4 matrix
   */
  mat4.create = function() {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* GLMAT_ARRAY_TYPE */](16);
      out[0] = 1;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[5] = 1;
      out[6] = 0;
      out[7] = 0;
      out[8] = 0;
      out[9] = 0;
      out[10] = 1;
      out[11] = 0;
      out[12] = 0;
      out[13] = 0;
      out[14] = 0;
      out[15] = 1;
      return out;
  };

  /**
   * Creates a new mat4 initialized with values from an existing matrix
   *
   * @param {mat4} a matrix to clone
   * @returns {mat4} a new 4x4 matrix
   */
  mat4.clone = function(a) {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* GLMAT_ARRAY_TYPE */](16);
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      out[4] = a[4];
      out[5] = a[5];
      out[6] = a[6];
      out[7] = a[7];
      out[8] = a[8];
      out[9] = a[9];
      out[10] = a[10];
      out[11] = a[11];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
      return out;
  };

  /**
   * Copy the values from one mat4 to another
   *
   * @param {mat4} out the receiving matrix
   * @param {mat4} a the source matrix
   * @returns {mat4} out
   */
  mat4.copy = function(out, a) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      out[4] = a[4];
      out[5] = a[5];
      out[6] = a[6];
      out[7] = a[7];
      out[8] = a[8];
      out[9] = a[9];
      out[10] = a[10];
      out[11] = a[11];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
      return out;
  };

  /**
   * Set a mat4 to the identity matrix
   *
   * @param {mat4} out the receiving matrix
   * @returns {mat4} out
   */
  mat4.identity = function(out) {
      out[0] = 1;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[5] = 1;
      out[6] = 0;
      out[7] = 0;
      out[8] = 0;
      out[9] = 0;
      out[10] = 1;
      out[11] = 0;
      out[12] = 0;
      out[13] = 0;
      out[14] = 0;
      out[15] = 1;
      return out;
  };

  /**
   * Transpose the values of a mat4
   *
   * @param {mat4} out the receiving matrix
   * @param {mat4} a the source matrix
   * @returns {mat4} out
   */
  mat4.transpose = function(out, a) {
      // If we are transposing ourselves we can skip a few steps but have to cache some values
      if (out === a) {
          var a01 = a[1], a02 = a[2], a03 = a[3],
              a12 = a[6], a13 = a[7],
              a23 = a[11];

          out[1] = a[4];
          out[2] = a[8];
          out[3] = a[12];
          out[4] = a01;
          out[6] = a[9];
          out[7] = a[13];
          out[8] = a02;
          out[9] = a12;
          out[11] = a[14];
          out[12] = a03;
          out[13] = a13;
          out[14] = a23;
      } else {
          out[0] = a[0];
          out[1] = a[4];
          out[2] = a[8];
          out[3] = a[12];
          out[4] = a[1];
          out[5] = a[5];
          out[6] = a[9];
          out[7] = a[13];
          out[8] = a[2];
          out[9] = a[6];
          out[10] = a[10];
          out[11] = a[14];
          out[12] = a[3];
          out[13] = a[7];
          out[14] = a[11];
          out[15] = a[15];
      }

      return out;
  };

  /**
   * Inverts a mat4
   *
   * @param {mat4} out the receiving matrix
   * @param {mat4} a the source matrix
   * @returns {mat4} out
   */
  mat4.invert = function(out, a) {
      var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
          a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
          a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
          a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

          b00 = a00 * a11 - a01 * a10,
          b01 = a00 * a12 - a02 * a10,
          b02 = a00 * a13 - a03 * a10,
          b03 = a01 * a12 - a02 * a11,
          b04 = a01 * a13 - a03 * a11,
          b05 = a02 * a13 - a03 * a12,
          b06 = a20 * a31 - a21 * a30,
          b07 = a20 * a32 - a22 * a30,
          b08 = a20 * a33 - a23 * a30,
          b09 = a21 * a32 - a22 * a31,
          b10 = a21 * a33 - a23 * a31,
          b11 = a22 * a33 - a23 * a32,

          // Calculate the determinant
          det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

      if (!det) {
          return null;
      }
      det = 1.0 / det;

      out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
      out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
      out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
      out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
      out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
      out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
      out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
      out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
      out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
      out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
      out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
      out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
      out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
      out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
      out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
      out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;

      return out;
  };

  /**
   * Calculates the adjugate of a mat4
   *
   * @param {mat4} out the receiving matrix
   * @param {mat4} a the source matrix
   * @returns {mat4} out
   */
  mat4.adjoint = function(out, a) {
      var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
          a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
          a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
          a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

      out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));
      out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
      out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));
      out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
      out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
      out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));
      out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
      out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));
      out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));
      out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
      out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));
      out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
      out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
      out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));
      out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
      out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));
      return out;
  };

  /**
   * Calculates the determinant of a mat4
   *
   * @param {mat4} a the source matrix
   * @returns {Number} determinant of a
   */
  mat4.determinant = function (a) {
      var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
          a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
          a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
          a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

          b00 = a00 * a11 - a01 * a10,
          b01 = a00 * a12 - a02 * a10,
          b02 = a00 * a13 - a03 * a10,
          b03 = a01 * a12 - a02 * a11,
          b04 = a01 * a13 - a03 * a11,
          b05 = a02 * a13 - a03 * a12,
          b06 = a20 * a31 - a21 * a30,
          b07 = a20 * a32 - a22 * a30,
          b08 = a20 * a33 - a23 * a30,
          b09 = a21 * a32 - a22 * a31,
          b10 = a21 * a33 - a23 * a31,
          b11 = a22 * a33 - a23 * a32;

      // Calculate the determinant
      return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
  };

  /**
   * Multiplies two mat4's
   *
   * @param {mat4} out the receiving matrix
   * @param {mat4} a the first operand
   * @param {mat4} b the second operand
   * @returns {mat4} out
   */
  mat4.multiply = function (out, a, b) {
      var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
          a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
          a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
          a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

      // Cache only the current line of the second matrix
      var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
      out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
      out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
      out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
      out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

      b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];
      out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
      out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
      out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
      out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

      b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];
      out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
      out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
      out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
      out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

      b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];
      out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
      out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
      out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
      out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
      return out;
  };

  /**
   * Multiplies two affine mat4's
   * Add by https://github.com/pissang
   * @param {mat4} out the receiving matrix
   * @param {mat4} a the first operand
   * @param {mat4} b the second operand
   * @returns {mat4} out
   */
  mat4.multiplyAffine = function (out, a, b) {
      var a00 = a[0], a01 = a[1], a02 = a[2],
          a10 = a[4], a11 = a[5], a12 = a[6],
          a20 = a[8], a21 = a[9], a22 = a[10],
          a30 = a[12], a31 = a[13], a32 = a[14];

      // Cache only the current line of the second matrix
      var b0  = b[0], b1 = b[1], b2 = b[2];
      out[0] = b0*a00 + b1*a10 + b2*a20;
      out[1] = b0*a01 + b1*a11 + b2*a21;
      out[2] = b0*a02 + b1*a12 + b2*a22;
      // out[3] = 0;

      b0 = b[4]; b1 = b[5]; b2 = b[6];
      out[4] = b0*a00 + b1*a10 + b2*a20;
      out[5] = b0*a01 + b1*a11 + b2*a21;
      out[6] = b0*a02 + b1*a12 + b2*a22;
      // out[7] = 0;

      b0 = b[8]; b1 = b[9]; b2 = b[10];
      out[8] = b0*a00 + b1*a10 + b2*a20;
      out[9] = b0*a01 + b1*a11 + b2*a21;
      out[10] = b0*a02 + b1*a12 + b2*a22;
      // out[11] = 0;

      b0 = b[12]; b1 = b[13]; b2 = b[14];
      out[12] = b0*a00 + b1*a10 + b2*a20 + a30;
      out[13] = b0*a01 + b1*a11 + b2*a21 + a31;
      out[14] = b0*a02 + b1*a12 + b2*a22 + a32;
      // out[15] = 1;
      return out;
  };

  /**
   * Alias for {@link mat4.multiply}
   * @function
   */
  mat4.mul = mat4.multiply;

  /**
   * Alias for {@link mat4.multiplyAffine}
   * @function
   */
  mat4.mulAffine = mat4.multiplyAffine;
  /**
   * Translate a mat4 by the given vector
   *
   * @param {mat4} out the receiving matrix
   * @param {mat4} a the matrix to translate
   * @param {vec3} v vector to translate by
   * @returns {mat4} out
   */
  mat4.translate = function (out, a, v) {
      var x = v[0], y = v[1], z = v[2],
          a00, a01, a02, a03,
          a10, a11, a12, a13,
          a20, a21, a22, a23;

      if (a === out) {
          out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
          out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
          out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
          out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
      } else {
          a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
          a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
          a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

          out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;
          out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;
          out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;

          out[12] = a00 * x + a10 * y + a20 * z + a[12];
          out[13] = a01 * x + a11 * y + a21 * z + a[13];
          out[14] = a02 * x + a12 * y + a22 * z + a[14];
          out[15] = a03 * x + a13 * y + a23 * z + a[15];
      }

      return out;
  };

  /**
   * Scales the mat4 by the dimensions in the given vec3
   *
   * @param {mat4} out the receiving matrix
   * @param {mat4} a the matrix to scale
   * @param {vec3} v the vec3 to scale the matrix by
   * @returns {mat4} out
   **/
  mat4.scale = function(out, a, v) {
      var x = v[0], y = v[1], z = v[2];

      out[0] = a[0] * x;
      out[1] = a[1] * x;
      out[2] = a[2] * x;
      out[3] = a[3] * x;
      out[4] = a[4] * y;
      out[5] = a[5] * y;
      out[6] = a[6] * y;
      out[7] = a[7] * y;
      out[8] = a[8] * z;
      out[9] = a[9] * z;
      out[10] = a[10] * z;
      out[11] = a[11] * z;
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
      return out;
  };

  /**
   * Rotates a mat4 by the given angle
   *
   * @param {mat4} out the receiving matrix
   * @param {mat4} a the matrix to rotate
   * @param {Number} rad the angle to rotate the matrix by
   * @param {vec3} axis the axis to rotate around
   * @returns {mat4} out
   */
  mat4.rotate = function (out, a, rad, axis) {
      var x = axis[0], y = axis[1], z = axis[2],
          len = Math.sqrt(x * x + y * y + z * z),
          s, c, t,
          a00, a01, a02, a03,
          a10, a11, a12, a13,
          a20, a21, a22, a23,
          b00, b01, b02,
          b10, b11, b12,
          b20, b21, b22;

      if (Math.abs(len) < __WEBPACK_IMPORTED_MODULE_0__common__["b" /* GLMAT_EPSILON */]) { return null; }

      len = 1 / len;
      x *= len;
      y *= len;
      z *= len;

      s = Math.sin(rad);
      c = Math.cos(rad);
      t = 1 - c;

      a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
      a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
      a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

      // Construct the elements of the rotation matrix
      b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
      b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
      b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;

      // Perform rotation-specific matrix multiplication
      out[0] = a00 * b00 + a10 * b01 + a20 * b02;
      out[1] = a01 * b00 + a11 * b01 + a21 * b02;
      out[2] = a02 * b00 + a12 * b01 + a22 * b02;
      out[3] = a03 * b00 + a13 * b01 + a23 * b02;
      out[4] = a00 * b10 + a10 * b11 + a20 * b12;
      out[5] = a01 * b10 + a11 * b11 + a21 * b12;
      out[6] = a02 * b10 + a12 * b11 + a22 * b12;
      out[7] = a03 * b10 + a13 * b11 + a23 * b12;
      out[8] = a00 * b20 + a10 * b21 + a20 * b22;
      out[9] = a01 * b20 + a11 * b21 + a21 * b22;
      out[10] = a02 * b20 + a12 * b21 + a22 * b22;
      out[11] = a03 * b20 + a13 * b21 + a23 * b22;

      if (a !== out) { // If the source and destination differ, copy the unchanged last row
          out[12] = a[12];
          out[13] = a[13];
          out[14] = a[14];
          out[15] = a[15];
      }
      return out;
  };

  /**
   * Rotates a matrix by the given angle around the X axis
   *
   * @param {mat4} out the receiving matrix
   * @param {mat4} a the matrix to rotate
   * @param {Number} rad the angle to rotate the matrix by
   * @returns {mat4} out
   */
  mat4.rotateX = function (out, a, rad) {
      var s = Math.sin(rad),
          c = Math.cos(rad),
          a10 = a[4],
          a11 = a[5],
          a12 = a[6],
          a13 = a[7],
          a20 = a[8],
          a21 = a[9],
          a22 = a[10],
          a23 = a[11];

      if (a !== out) { // If the source and destination differ, copy the unchanged rows
          out[0]  = a[0];
          out[1]  = a[1];
          out[2]  = a[2];
          out[3]  = a[3];
          out[12] = a[12];
          out[13] = a[13];
          out[14] = a[14];
          out[15] = a[15];
      }

      // Perform axis-specific matrix multiplication
      out[4] = a10 * c + a20 * s;
      out[5] = a11 * c + a21 * s;
      out[6] = a12 * c + a22 * s;
      out[7] = a13 * c + a23 * s;
      out[8] = a20 * c - a10 * s;
      out[9] = a21 * c - a11 * s;
      out[10] = a22 * c - a12 * s;
      out[11] = a23 * c - a13 * s;
      return out;
  };

  /**
   * Rotates a matrix by the given angle around the Y axis
   *
   * @param {mat4} out the receiving matrix
   * @param {mat4} a the matrix to rotate
   * @param {Number} rad the angle to rotate the matrix by
   * @returns {mat4} out
   */
  mat4.rotateY = function (out, a, rad) {
      var s = Math.sin(rad),
          c = Math.cos(rad),
          a00 = a[0],
          a01 = a[1],
          a02 = a[2],
          a03 = a[3],
          a20 = a[8],
          a21 = a[9],
          a22 = a[10],
          a23 = a[11];

      if (a !== out) { // If the source and destination differ, copy the unchanged rows
          out[4]  = a[4];
          out[5]  = a[5];
          out[6]  = a[6];
          out[7]  = a[7];
          out[12] = a[12];
          out[13] = a[13];
          out[14] = a[14];
          out[15] = a[15];
      }

      // Perform axis-specific matrix multiplication
      out[0] = a00 * c - a20 * s;
      out[1] = a01 * c - a21 * s;
      out[2] = a02 * c - a22 * s;
      out[3] = a03 * c - a23 * s;
      out[8] = a00 * s + a20 * c;
      out[9] = a01 * s + a21 * c;
      out[10] = a02 * s + a22 * c;
      out[11] = a03 * s + a23 * c;
      return out;
  };

  /**
   * Rotates a matrix by the given angle around the Z axis
   *
   * @param {mat4} out the receiving matrix
   * @param {mat4} a the matrix to rotate
   * @param {Number} rad the angle to rotate the matrix by
   * @returns {mat4} out
   */
  mat4.rotateZ = function (out, a, rad) {
      var s = Math.sin(rad),
          c = Math.cos(rad),
          a00 = a[0],
          a01 = a[1],
          a02 = a[2],
          a03 = a[3],
          a10 = a[4],
          a11 = a[5],
          a12 = a[6],
          a13 = a[7];

      if (a !== out) { // If the source and destination differ, copy the unchanged last row
          out[8]  = a[8];
          out[9]  = a[9];
          out[10] = a[10];
          out[11] = a[11];
          out[12] = a[12];
          out[13] = a[13];
          out[14] = a[14];
          out[15] = a[15];
      }

      // Perform axis-specific matrix multiplication
      out[0] = a00 * c + a10 * s;
      out[1] = a01 * c + a11 * s;
      out[2] = a02 * c + a12 * s;
      out[3] = a03 * c + a13 * s;
      out[4] = a10 * c - a00 * s;
      out[5] = a11 * c - a01 * s;
      out[6] = a12 * c - a02 * s;
      out[7] = a13 * c - a03 * s;
      return out;
  };

  /**
   * Creates a matrix from a quaternion rotation and vector translation
   * This is equivalent to (but much faster than):
   *
   *     mat4.identity(dest);
   *     mat4.translate(dest, vec);
   *     var quatMat = mat4.create();
   *     quat4.toMat4(quat, quatMat);
   *     mat4.multiply(dest, quatMat);
   *
   * @param {mat4} out mat4 receiving operation result
   * @param {quat4} q Rotation quaternion
   * @param {vec3} v Translation vector
   * @returns {mat4} out
   */
  mat4.fromRotationTranslation = function (out, q, v) {
      // Quaternion math
      var x = q[0], y = q[1], z = q[2], w = q[3],
          x2 = x + x,
          y2 = y + y,
          z2 = z + z,

          xx = x * x2,
          xy = x * y2,
          xz = x * z2,
          yy = y * y2,
          yz = y * z2,
          zz = z * z2,
          wx = w * x2,
          wy = w * y2,
          wz = w * z2;

      out[0] = 1 - (yy + zz);
      out[1] = xy + wz;
      out[2] = xz - wy;
      out[3] = 0;
      out[4] = xy - wz;
      out[5] = 1 - (xx + zz);
      out[6] = yz + wx;
      out[7] = 0;
      out[8] = xz + wy;
      out[9] = yz - wx;
      out[10] = 1 - (xx + yy);
      out[11] = 0;
      out[12] = v[0];
      out[13] = v[1];
      out[14] = v[2];
      out[15] = 1;

      return out;
  };

  mat4.fromQuat = function (out, q) {
      var x = q[0], y = q[1], z = q[2], w = q[3],
          x2 = x + x,
          y2 = y + y,
          z2 = z + z,

          xx = x * x2,
          yx = y * x2,
          yy = y * y2,
          zx = z * x2,
          zy = z * y2,
          zz = z * z2,
          wx = w * x2,
          wy = w * y2,
          wz = w * z2;

      out[0] = 1 - yy - zz;
      out[1] = yx + wz;
      out[2] = zx - wy;
      out[3] = 0;

      out[4] = yx - wz;
      out[5] = 1 - xx - zz;
      out[6] = zy + wx;
      out[7] = 0;

      out[8] = zx + wy;
      out[9] = zy - wx;
      out[10] = 1 - xx - yy;
      out[11] = 0;

      out[12] = 0;
      out[13] = 0;
      out[14] = 0;
      out[15] = 1;

      return out;
  };

  /**
   * Generates a frustum matrix with the given bounds
   *
   * @param {mat4} out mat4 frustum matrix will be written into
   * @param {Number} left Left bound of the frustum
   * @param {Number} right Right bound of the frustum
   * @param {Number} bottom Bottom bound of the frustum
   * @param {Number} top Top bound of the frustum
   * @param {Number} near Near bound of the frustum
   * @param {Number} far Far bound of the frustum
   * @returns {mat4} out
   */
  mat4.frustum = function (out, left, right, bottom, top, near, far) {
      var rl = 1 / (right - left),
          tb = 1 / (top - bottom),
          nf = 1 / (near - far);
      out[0] = (near * 2) * rl;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[5] = (near * 2) * tb;
      out[6] = 0;
      out[7] = 0;
      out[8] = (right + left) * rl;
      out[9] = (top + bottom) * tb;
      out[10] = (far + near) * nf;
      out[11] = -1;
      out[12] = 0;
      out[13] = 0;
      out[14] = (far * near * 2) * nf;
      out[15] = 0;
      return out;
  };

  /**
   * Generates a perspective projection matrix with the given bounds
   *
   * @param {mat4} out mat4 frustum matrix will be written into
   * @param {number} fovy Vertical field of view in radians
   * @param {number} aspect Aspect ratio. typically viewport width/height
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @returns {mat4} out
   */
  mat4.perspective = function (out, fovy, aspect, near, far) {
      var f = 1.0 / Math.tan(fovy / 2),
          nf = 1 / (near - far);
      out[0] = f / aspect;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[5] = f;
      out[6] = 0;
      out[7] = 0;
      out[8] = 0;
      out[9] = 0;
      out[10] = (far + near) * nf;
      out[11] = -1;
      out[12] = 0;
      out[13] = 0;
      out[14] = (2 * far * near) * nf;
      out[15] = 0;
      return out;
  };

  /**
   * Generates a orthogonal projection matrix with the given bounds
   *
   * @param {mat4} out mat4 frustum matrix will be written into
   * @param {number} left Left bound of the frustum
   * @param {number} right Right bound of the frustum
   * @param {number} bottom Bottom bound of the frustum
   * @param {number} top Top bound of the frustum
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @returns {mat4} out
   */
  mat4.ortho = function (out, left, right, bottom, top, near, far) {
      var lr = 1 / (left - right),
          bt = 1 / (bottom - top),
          nf = 1 / (near - far);
      out[0] = -2 * lr;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[5] = -2 * bt;
      out[6] = 0;
      out[7] = 0;
      out[8] = 0;
      out[9] = 0;
      out[10] = 2 * nf;
      out[11] = 0;
      out[12] = (left + right) * lr;
      out[13] = (top + bottom) * bt;
      out[14] = (far + near) * nf;
      out[15] = 1;
      return out;
  };

  /**
   * Generates a look-at matrix with the given eye position, focal point, and up axis
   *
   * @param {mat4} out mat4 frustum matrix will be written into
   * @param {vec3} eye Position of the viewer
   * @param {vec3} center Point the viewer is looking at
   * @param {vec3} up vec3 pointing up
   * @returns {mat4} out
   */
  mat4.lookAt = function (out, eye, center, up) {
      var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
          eyex = eye[0],
          eyey = eye[1],
          eyez = eye[2],
          upx = up[0],
          upy = up[1],
          upz = up[2],
          centerx = center[0],
          centery = center[1],
          centerz = center[2];

      if (Math.abs(eyex - centerx) < __WEBPACK_IMPORTED_MODULE_0__common__["b" /* GLMAT_EPSILON */] &&
          Math.abs(eyey - centery) < __WEBPACK_IMPORTED_MODULE_0__common__["b" /* GLMAT_EPSILON */] &&
          Math.abs(eyez - centerz) < __WEBPACK_IMPORTED_MODULE_0__common__["b" /* GLMAT_EPSILON */]) {
          return mat4.identity(out);
      }

      z0 = eyex - centerx;
      z1 = eyey - centery;
      z2 = eyez - centerz;

      len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
      z0 *= len;
      z1 *= len;
      z2 *= len;

      x0 = upy * z2 - upz * z1;
      x1 = upz * z0 - upx * z2;
      x2 = upx * z1 - upy * z0;
      len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
      if (!len) {
          x0 = 0;
          x1 = 0;
          x2 = 0;
      } else {
          len = 1 / len;
          x0 *= len;
          x1 *= len;
          x2 *= len;
      }

      y0 = z1 * x2 - z2 * x1;
      y1 = z2 * x0 - z0 * x2;
      y2 = z0 * x1 - z1 * x0;

      len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
      if (!len) {
          y0 = 0;
          y1 = 0;
          y2 = 0;
      } else {
          len = 1 / len;
          y0 *= len;
          y1 *= len;
          y2 *= len;
      }

      out[0] = x0;
      out[1] = y0;
      out[2] = z0;
      out[3] = 0;
      out[4] = x1;
      out[5] = y1;
      out[6] = z1;
      out[7] = 0;
      out[8] = x2;
      out[9] = y2;
      out[10] = z2;
      out[11] = 0;
      out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
      out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
      out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
      out[15] = 1;

      return out;
  };

  /**
   * Returns Frobenius norm of a mat4
   *
   * @param {mat4} a the matrix to calculate Frobenius norm of
   * @returns {Number} Frobenius norm
   */
  mat4.frob = function (a) {
      return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))
  };

  /* harmony default export */ __webpack_exports__["a"] = (mat4);

  /***/ }),
  /* 22 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_claygl_src_Scene__ = __webpack_require__(36);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_claygl_src_prePass_ShadowMap__ = __webpack_require__(176);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_claygl_src_camera_Perspective__ = __webpack_require__(37);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_claygl_src_camera_Orthographic__ = __webpack_require__(38);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_claygl_src_math_Matrix4__ = __webpack_require__(7);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_claygl_src_math_Vector3__ = __webpack_require__(3);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_claygl_src_math_Vector2__ = __webpack_require__(26);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_claygl_src_core_mixin_notifier__ = __webpack_require__(53);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__effect_EffectCompositor__ = __webpack_require__(178);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__effect_TemporalSuperSampling__ = __webpack_require__(202);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__effect_halton__ = __webpack_require__(49);
  /*
   * @module echarts-gl/core/ViewGL
   * @author Yi Shen(http://github.com/pissang)
   */

















  /**
   * @constructor
   * @alias module:echarts-gl/core/ViewGL
   * @param {string} [projection='perspective']
   */
  function ViewGL(projection) {

      projection = projection || 'perspective';

      /**
       * @type {module:echarts-gl/core/LayerGL}
       */
      this.layer = null;
      /**
       * @type {clay.Scene}
       */
      this.scene = new __WEBPACK_IMPORTED_MODULE_1_claygl_src_Scene__["a" /* default */]();

      /**
       * @type {clay.Node}
       */
      this.rootNode = this.scene;

      this.viewport = {
          x: 0, y: 0, width: 0, height: 0
      };

      this.setProjection(projection);

      this._compositor = new __WEBPACK_IMPORTED_MODULE_9__effect_EffectCompositor__["a" /* default */]();

      this._temporalSS = new __WEBPACK_IMPORTED_MODULE_10__effect_TemporalSuperSampling__["a" /* default */]();

      this._shadowMapPass = new __WEBPACK_IMPORTED_MODULE_2_claygl_src_prePass_ShadowMap__["a" /* default */]();

      var pcfKernels = [];
      var off = 0;
      for (var i = 0; i < 30; i++) {
          var pcfKernel = [];
          for (var k = 0; k < 6; k++) {
              pcfKernel.push(Object(__WEBPACK_IMPORTED_MODULE_11__effect_halton__["a" /* default */])(off, 2) * 4.0 - 2.0);
              pcfKernel.push(Object(__WEBPACK_IMPORTED_MODULE_11__effect_halton__["a" /* default */])(off, 3) * 4.0 - 2.0);
              off++;
          }
          pcfKernels.push(pcfKernel);
      }
      this._pcfKernels = pcfKernels;

      this.scene.on('beforerender', function (renderer, scene, camera) {
          if (this.needsTemporalSS()) {
              this._temporalSS.jitterProjection(renderer, camera);
          }
      }, this);
  }

  /**
   * Set camera type of group
   * @param {string} cameraType 'perspective' | 'orthographic'
   */
  ViewGL.prototype.setProjection = function (projection) {
      var oldCamera = this.camera;
      oldCamera && oldCamera.update();
      if (projection === 'perspective') {
          if (!(this.camera instanceof __WEBPACK_IMPORTED_MODULE_3_claygl_src_camera_Perspective__["a" /* default */])) {
              this.camera = new __WEBPACK_IMPORTED_MODULE_3_claygl_src_camera_Perspective__["a" /* default */]();
              if (oldCamera) {
                  this.camera.setLocalTransform(oldCamera.localTransform);
              }
          }
      }
      else {
          if (!(this.camera instanceof __WEBPACK_IMPORTED_MODULE_4_claygl_src_camera_Orthographic__["a" /* default */])) {
              this.camera = new __WEBPACK_IMPORTED_MODULE_4_claygl_src_camera_Orthographic__["a" /* default */]();
              if (oldCamera) {
                  this.camera.setLocalTransform(oldCamera.localTransform);
              }
          }
      }
      // PENDING
      this.camera.near = 0.1;
      this.camera.far = 2000;
  };

  /**
   * Set viewport of group
   * @param {number} x Viewport left bottom x
   * @param {number} y Viewport left bottom y
   * @param {number} width Viewport height
   * @param {number} height Viewport height
   * @param {number} [dpr=1]
   */
  ViewGL.prototype.setViewport = function (x, y, width, height, dpr) {
      if (this.camera instanceof __WEBPACK_IMPORTED_MODULE_3_claygl_src_camera_Perspective__["a" /* default */]) {
          this.camera.aspect = width / height;
      }
      dpr = dpr || 1;

      this.viewport.x = x;
      this.viewport.y = y;
      this.viewport.width = width;
      this.viewport.height = height;
      this.viewport.devicePixelRatio = dpr;

      // Source and output of compositor use high dpr texture.
      // But the intermediate texture of bloom, dof effects use fixed 1.0 dpr
      this._compositor.resize(width * dpr, height * dpr);
      this._temporalSS.resize(width * dpr, height * dpr);
  };

  /**
   * If contain screen point x, y
   * @param {number} x offsetX
   * @param {number} y offsetY
   * @return {boolean}
   */
  ViewGL.prototype.containPoint = function (x, y) {
      var viewport = this.viewport;
      var height = this.layer.renderer.getHeight();
      // Flip y;
      y = height - y;
      return x >= viewport.x && y >= viewport.y
          && x <= viewport.x + viewport.width && y <= viewport.y + viewport.height;
  };

  /**
   * Cast a ray
   * @param {number} x offsetX
   * @param {number} y offsetY
   * @param {clay.math.Ray} out
   * @return {clay.math.Ray}
   */
  var ndc = new __WEBPACK_IMPORTED_MODULE_7_claygl_src_math_Vector2__["a" /* default */]();
  ViewGL.prototype.castRay = function (x, y, out) {
      var renderer = this.layer.renderer;

      var oldViewport = renderer.viewport;
      renderer.viewport = this.viewport;
      renderer.screenToNDC(x, y, ndc);
      this.camera.castRay(ndc, out);
      renderer.viewport = oldViewport;

      return out;
  };

  /**
   * Prepare and update scene before render
   */
  ViewGL.prototype.prepareRender = function () {
      this.scene.update();
      this.camera.update();
      this.scene.updateLights();
      var renderList = this.scene.updateRenderList(this.camera);

      this._needsSortProgressively = false;
      // If has any transparent mesh needs sort triangles progressively.
      for (var i = 0; i < renderList.transparent.length; i++) {
          var renderable = renderList.transparent[i];
          var geometry = renderable.geometry;
          if (geometry.needsSortVerticesProgressively && geometry.needsSortVerticesProgressively()) {
              this._needsSortProgressively = true;
          }
          if (geometry.needsSortTrianglesProgressively && geometry.needsSortTrianglesProgressively()) {
              this._needsSortProgressively = true;
          }
      }

      this._frame = 0;
      this._temporalSS.resetFrame();

      // var lights = this.scene.getLights();
      // for (var i = 0; i < lights.length; i++) {
      //     if (lights[i].cubemap) {
      //         if (this._compositor && this._compositor.isSSREnabled()) {
      //             lights[i].invisible = true;
      //         }
      //         else {
      //             lights[i].invisible = false;
      //         }
      //     }
      // }
  };

  ViewGL.prototype.render = function (renderer, accumulating) {
      this._doRender(renderer, accumulating, this._frame);
      this._frame++;
  };

  ViewGL.prototype.needsAccumulate = function () {
      return this.needsTemporalSS() || this._needsSortProgressively;
  };

  ViewGL.prototype.needsTemporalSS = function () {
      var enableTemporalSS = this._enableTemporalSS;
      if (enableTemporalSS === 'auto') {
          enableTemporalSS = this._enablePostEffect;
      }
      return enableTemporalSS;
  };

  ViewGL.prototype.hasDOF = function () {
      return this._enableDOF;
  };

  ViewGL.prototype.isAccumulateFinished = function () {
      return this.needsTemporalSS() ? this._temporalSS.isFinished()
          : (this._frame > 30);
  };

  ViewGL.prototype._doRender = function (renderer, accumulating, accumFrame) {

      var scene = this.scene;
      var camera = this.camera;

      accumFrame = accumFrame || 0;

      this._updateTransparent(renderer, scene, camera, accumFrame);

      if (!accumulating) {
          this._shadowMapPass.kernelPCF = this._pcfKernels[0];
          // Not render shadowmap pass in accumulating frame.
          this._shadowMapPass.render(renderer, scene, camera, true);
      }

      this._updateShadowPCFKernel(accumFrame);

      // Shadowmap will set clear color.
      var bgColor = renderer.clearColor;
      renderer.gl.clearColor(bgColor[0], bgColor[1], bgColor[2], bgColor[3]);

      if (this._enablePostEffect) {
          // normal render also needs to be jittered when have edge pass.
          if (this.needsTemporalSS()) {
              this._temporalSS.jitterProjection(renderer, camera);
          }
          this._compositor.updateNormal(renderer, scene, camera, this._temporalSS.getFrame());
      }

      // Always update SSAO to make sure have correct ssaoMap status
      this._updateSSAO(renderer, scene, camera, this._temporalSS.getFrame());

      if (this._enablePostEffect) {

          var frameBuffer = this._compositor.getSourceFrameBuffer();
          frameBuffer.bind(renderer);
          renderer.gl.clear(renderer.gl.DEPTH_BUFFER_BIT | renderer.gl.COLOR_BUFFER_BIT);
          renderer.render(scene, camera, true, true);
          frameBuffer.unbind(renderer);

          if (this.needsTemporalSS() && accumulating) {
              this._compositor.composite(renderer, scene, camera, this._temporalSS.getSourceFrameBuffer(), this._temporalSS.getFrame());
              renderer.setViewport(this.viewport);
              this._temporalSS.render(renderer);
          }
          else {
              renderer.setViewport(this.viewport);
              this._compositor.composite(renderer, scene, camera, null, 0);
          }
      }
      else {
          if (this.needsTemporalSS() && accumulating) {
              var frameBuffer = this._temporalSS.getSourceFrameBuffer();
              frameBuffer.bind(renderer);
              renderer.saveClear();
              renderer.clearBit = renderer.gl.DEPTH_BUFFER_BIT | renderer.gl.COLOR_BUFFER_BIT;
              renderer.render(scene, camera, true, true);
              renderer.restoreClear();
              frameBuffer.unbind(renderer);

              renderer.setViewport(this.viewport);
              this._temporalSS.render(renderer);
          }
          else {
              renderer.setViewport(this.viewport);
              renderer.render(scene, camera, true, true);
          }
      }

      // this._shadowMapPass.renderDebug(renderer);
      // this._compositor._normalPass.renderDebug(renderer);
  };

  ViewGL.prototype._updateTransparent = function (renderer, scene, camera, frame) {

      var v3 = new __WEBPACK_IMPORTED_MODULE_6_claygl_src_math_Vector3__["a" /* default */]();
      var invWorldTransform = new __WEBPACK_IMPORTED_MODULE_5_claygl_src_math_Matrix4__["a" /* default */]();
      var cameraWorldPosition = camera.getWorldPosition();
      var transparentList = scene.getRenderList(camera).transparent;

      // Sort transparent object.
      for (var i = 0; i < transparentList.length; i++) {
          var renderable = transparentList[i];
          var geometry = renderable.geometry;
          __WEBPACK_IMPORTED_MODULE_5_claygl_src_math_Matrix4__["a" /* default */].invert(invWorldTransform, renderable.worldTransform);
          __WEBPACK_IMPORTED_MODULE_6_claygl_src_math_Vector3__["a" /* default */].transformMat4(v3, cameraWorldPosition, invWorldTransform);
          if (geometry.needsSortTriangles && geometry.needsSortTriangles()) {
              geometry.doSortTriangles(v3, frame);
          }
          if (geometry.needsSortVertices && geometry.needsSortVertices()) {
              geometry.doSortVertices(v3, frame);
          }
      }
  };

  ViewGL.prototype._updateSSAO = function (renderer, scene, camera) {
      var ifEnableSSAO = this._enableSSAO && this._enablePostEffect;
      if (ifEnableSSAO) {
          this._compositor.updateSSAO(renderer, scene, camera, this._temporalSS.getFrame());
      }
      var renderList = scene.getRenderList(camera);

      for (var i = 0; i < renderList.opaque.length; i++) {
          var renderable = renderList.opaque[i];
          // PENDING
          if (renderable.renderNormal) {
              renderable.material[ifEnableSSAO ? 'enableTexture' : 'disableTexture']('ssaoMap');
          }
          if (ifEnableSSAO) {
              renderable.material.set('ssaoMap', this._compositor.getSSAOTexture());
          }
      }
  };

  ViewGL.prototype._updateShadowPCFKernel = function (frame) {
      var pcfKernel = this._pcfKernels[frame % this._pcfKernels.length];
      var renderList = this.scene.getRenderList(this.camera);
      var opaqueList = renderList.opaque;
      for (var i = 0; i < opaqueList.length; i++) {
          if (opaqueList[i].receiveShadow) {
              opaqueList[i].material.set('pcfKernel', pcfKernel);
              opaqueList[i].material.define('fragment', 'PCF_KERNEL_SIZE', pcfKernel.length / 2);
          }
      }
  };

  ViewGL.prototype.dispose = function (renderer) {
      this._compositor.dispose(renderer.gl);
      this._temporalSS.dispose(renderer.gl);
      this._shadowMapPass.dispose(renderer);
  };
  /**
   * @param {module:echarts/Model} Post effect model
   */
  ViewGL.prototype.setPostEffect = function (postEffectModel, api) {
      var compositor = this._compositor;
      this._enablePostEffect = postEffectModel.get('enable');
      var bloomModel = postEffectModel.getModel('bloom');
      var edgeModel = postEffectModel.getModel('edge');
      var dofModel = postEffectModel.getModel('DOF', postEffectModel.getModel('depthOfField'));
      var ssaoModel = postEffectModel.getModel('SSAO', postEffectModel.getModel('screenSpaceAmbientOcclusion'));
      var ssrModel = postEffectModel.getModel('SSR', postEffectModel.getModel('screenSpaceReflection'));
      var fxaaModel = postEffectModel.getModel('FXAA');
      var colorCorrModel = postEffectModel.getModel('colorCorrection');
      bloomModel.get('enable') ? compositor.enableBloom() : compositor.disableBloom();
      dofModel.get('enable') ? compositor.enableDOF() : compositor.disableDOF();
      ssrModel.get('enable') ? compositor.enableSSR() : compositor.disableSSR();
      colorCorrModel.get('enable') ? compositor.enableColorCorrection() : compositor.disableColorCorrection();
      edgeModel.get('enable') ? compositor.enableEdge() : compositor.disableEdge();
      fxaaModel.get('enable') ? compositor.enableFXAA() : compositor.disableFXAA();

      this._enableDOF = dofModel.get('enable');
      this._enableSSAO = ssaoModel.get('enable');

      this._enableSSAO ? compositor.enableSSAO() : compositor.disableSSAO();

      compositor.setBloomIntensity(bloomModel.get('intensity'));
      compositor.setEdgeColor(edgeModel.get('color'));
      compositor.setColorLookupTexture(colorCorrModel.get('lookupTexture'), api);
      compositor.setExposure(colorCorrModel.get('exposure'));

      ['radius', 'quality', 'intensity'].forEach(function (name) {
          compositor.setSSAOParameter(name, ssaoModel.get(name));
      });
      ['quality', 'maxRoughness', 'physical'].forEach(function (name) {
          compositor.setSSRParameter(name, ssrModel.get(name));
      });
      ['quality', 'focalDistance', 'focalRange', 'blurRadius', 'fstop'].forEach(function (name) {
          compositor.setDOFParameter(name, dofModel.get(name));
      });
      ['brightness', 'contrast', 'saturation'].forEach(function (name) {
          compositor.setColorCorrection(name, colorCorrModel.get(name));
      });

  };

  ViewGL.prototype.setDOFFocusOnPoint = function (depth) {
      if (this._enablePostEffect) {

          if (depth > this.camera.far || depth < this.camera.near) {
              return;
          }

          this._compositor.setDOFParameter('focalDistance', depth);
          return true;
      }
  };

  ViewGL.prototype.setTemporalSuperSampling = function (temporalSuperSamplingModel) {
      this._enableTemporalSS = temporalSuperSamplingModel.get('enable');
  };

  ViewGL.prototype.isLinearSpace = function () {
      return this._enablePostEffect;
  };

  ViewGL.prototype.setRootNode = function (rootNode) {
      if (this.rootNode === rootNode) {
          return;
      }
      var children = this.rootNode.children();
      for (var i = 0; i < children.length; i++) {
          rootNode.add(children[i]);
      }
      if (rootNode !== this.scene) {
          this.scene.add(rootNode);
      }

      this.rootNode = rootNode;
  };
  // Proxies
  ViewGL.prototype.add = function (node3D) {
      this.rootNode.add(node3D);
  };
  ViewGL.prototype.remove = function (node3D) {
      this.rootNode.remove(node3D);
  };
  ViewGL.prototype.removeAll = function (node3D) {
      this.rootNode.removeAll(node3D);
  };

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.extend(ViewGL.prototype, __WEBPACK_IMPORTED_MODULE_8_claygl_src_core_mixin_notifier__["a" /* default */]);

  /* harmony default export */ __webpack_exports__["a"] = (ViewGL);

  /***/ }),
  /* 23 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  var guid = 0;

  var ArrayProto = Array.prototype;
  var nativeForEach = ArrayProto.forEach;

  /**
   * Util functions
   * @namespace clay.core.util
   */
  var util = {

      /**
       * Generate GUID
       * @return {number}
       * @memberOf clay.core.util
       */
      genGUID: function () {
          return ++guid;
      },
      /**
       * Relative path to absolute path
       * @param  {string} path
       * @param  {string} basePath
       * @return {string}
       * @memberOf clay.core.util
       */
      relative2absolute: function (path, basePath) {
          if (!basePath || path.match(/^\//)) {
              return path;
          }
          var pathParts = path.split('/');
          var basePathParts = basePath.split('/');

          var item = pathParts[0];
          while(item === '.' || item === '..') {
              if (item === '..') {
                  basePathParts.pop();
              }
              pathParts.shift();
              item = pathParts[0];
          }
          return basePathParts.join('/') + '/' + pathParts.join('/');
      },

      /**
       * Extend target with source
       * @param  {Object} target
       * @param  {Object} source
       * @return {Object}
       * @memberOf clay.core.util
       */
      extend: function (target, source) {
          if (source) {
              for (var name in source) {
                  if (source.hasOwnProperty(name)) {
                      target[name] = source[name];
                  }
              }
          }
          return target;
      },

      /**
       * Extend properties to target if not exist.
       * @param  {Object} target
       * @param  {Object} source
       * @return {Object}
       * @memberOf clay.core.util
       */
      defaults: function (target, source) {
          if (source) {
              for (var propName in source) {
                  if (target[propName] === undefined) {
                      target[propName] = source[propName];
                  }
              }
          }
          return target;
      },
      /**
       * Extend properties with a given property list to avoid for..in.. iteration.
       * @param  {Object} target
       * @param  {Object} source
       * @param  {Array.<string>} propList
       * @return {Object}
       * @memberOf clay.core.util
       */
      extendWithPropList: function (target, source, propList) {
          if (source) {
              for (var i = 0; i < propList.length; i++) {
                  var propName = propList[i];
                  target[propName] = source[propName];
              }
          }
          return target;
      },
      /**
       * Extend properties to target if not exist. With a given property list avoid for..in.. iteration.
       * @param  {Object} target
       * @param  {Object} source
       * @param  {Array.<string>} propList
       * @return {Object}
       * @memberOf clay.core.util
       */
      defaultsWithPropList: function (target, source, propList) {
          if (source) {
              for (var i = 0; i < propList.length; i++) {
                  var propName = propList[i];
                  if (target[propName] == null) {
                      target[propName] = source[propName];
                  }
              }
          }
          return target;
      },
      /**
       * @param  {Object|Array} obj
       * @param  {Function} iterator
       * @param  {Object} [context]
       * @memberOf clay.core.util
       */
      each: function (obj, iterator, context) {
          if (!(obj && iterator)) {
              return;
          }
          if (obj.forEach && obj.forEach === nativeForEach) {
              obj.forEach(iterator, context);
          }
          else if (obj.length === + obj.length) {
              for (var i = 0, len = obj.length; i < len; i++) {
                  iterator.call(context, obj[i], i, obj);
              }
          }
          else {
              for (var key in obj) {
                  if (obj.hasOwnProperty(key)) {
                      iterator.call(context, obj[key], key, obj);
                  }
              }
          }
      },

      /**
       * Is object
       * @param  {}  obj
       * @return {boolean}
       * @memberOf clay.core.util
       */
      isObject: function (obj) {
          return obj === Object(obj);
      },

      /**
       * Is array ?
       * @param  {}  obj
       * @return {boolean}
       * @memberOf clay.core.util
       */
      isArray: function (obj) {
          return Array.isArray(obj);
      },

      /**
       * Is array like, which have a length property
       * @param  {}  obj
       * @return {boolean}
       * @memberOf clay.core.util
       */
      isArrayLike: function (obj) {
          if (!obj) {
              return false;
          }
          else {
              return obj.length === + obj.length;
          }
      },

      /**
       * @param  {} obj
       * @return {}
       * @memberOf clay.core.util
       */
      clone: function (obj) {
          if (!util.isObject(obj)) {
              return obj;
          }
          else if (util.isArray(obj)) {
              return obj.slice();
          }
          else if (util.isArrayLike(obj)) { // is typed array
              var ret = new obj.constructor(obj.length);
              for (var i = 0; i < obj.length; i++) {
                  ret[i] = obj[i];
              }
              return ret;
          }
          else {
              return util.extend({}, obj);
          }
      }
  };

  /* harmony default export */ __webpack_exports__["a"] = (util);


  /***/ }),
  /* 24 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Node__ = __webpack_require__(35);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Shader__ = __webpack_require__(9);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shader_source_header_light__ = __webpack_require__(118);




  __WEBPACK_IMPORTED_MODULE_1__Shader__["a" /* default */]['import'](__WEBPACK_IMPORTED_MODULE_2__shader_source_header_light__["a" /* default */]);

  /**
   * @constructor clay.Light
   * @extends clay.Node
   */
  var Light = __WEBPACK_IMPORTED_MODULE_0__Node__["a" /* default */].extend(function(){
      return /** @lends clay.Light# */ {
          /**
           * Light RGB color
           * @type {number[]}
           */
          color: [1, 1, 1],

          /**
           * Light intensity
           * @type {number}
           */
          intensity: 1.0,

          // Config for shadow map
          /**
           * If light cast shadow
           * @type {boolean}
           */
          castShadow: true,

          /**
           * Shadow map size
           * @type {number}
           */
          shadowResolution: 512,

          /**
           * Light group, shader with same `lightGroup` will be affected
           *
           * Only useful in forward rendering
           * @type {number}
           */
          group: 0
      };
  },
  /** @lends clay.Light.prototype. */
  {
      /**
       * Light type
       * @type {string}
       * @memberOf clay.Light#
       */
      type: '',

      /**
       * @return {clay.Light}
       * @memberOf clay.Light.prototype
       */
      clone: function() {
          var light = __WEBPACK_IMPORTED_MODULE_0__Node__["a" /* default */].prototype.clone.call(this);
          light.color = Array.prototype.slice.call(this.color);
          light.intensity = this.intensity;
          light.castShadow = this.castShadow;
          light.shadowResolution = this.shadowResolution;

          return light;
      }
  });

  /* harmony default export */ __webpack_exports__["a"] = (Light);


  /***/ }),
  /* 25 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_claygl_src_Geometry__ = __webpack_require__(14);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__dynamicConvertMixin__ = __webpack_require__(39);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_claygl_src_dep_glmatrix__ = __webpack_require__(6);
  /**
   * Lines geometry
   * Use screen space projected lines lineWidth > MAX_LINE_WIDTH
   * https://mattdesl.svbtle.com/drawing-lines-is-hard
   * @module echarts-gl/util/geometry/LinesGeometry
   * @author Yi Shen(http://github.com/pissang)
   */





  var vec3 = __WEBPACK_IMPORTED_MODULE_3_claygl_src_dep_glmatrix__["a" /* default */].vec3;

  // var CURVE_RECURSION_LIMIT = 8;
  // var CURVE_COLLINEAR_EPSILON = 40;

  var sampleLinePoints = [[0, 0], [1, 1]];
  /**
   * @constructor
   * @alias module:echarts-gl/util/geometry/LinesGeometry
   * @extends clay.Geometry
   */

  var LinesGeometry = __WEBPACK_IMPORTED_MODULE_0_claygl_src_Geometry__["a" /* default */].extend(function () {
      return {

          segmentScale: 1,

          dynamic: true,
          /**
           * Need to use mesh to expand lines if lineWidth > MAX_LINE_WIDTH
           */
          useNativeLine: true,

          attributes: {
              position: new __WEBPACK_IMPORTED_MODULE_0_claygl_src_Geometry__["a" /* default */].Attribute('position', 'float', 3, 'POSITION'),
              positionPrev: new __WEBPACK_IMPORTED_MODULE_0_claygl_src_Geometry__["a" /* default */].Attribute('positionPrev', 'float', 3),
              positionNext: new __WEBPACK_IMPORTED_MODULE_0_claygl_src_Geometry__["a" /* default */].Attribute('positionNext', 'float', 3),
              prevPositionPrev: new __WEBPACK_IMPORTED_MODULE_0_claygl_src_Geometry__["a" /* default */].Attribute('prevPositionPrev', 'float', 3),
              prevPosition: new __WEBPACK_IMPORTED_MODULE_0_claygl_src_Geometry__["a" /* default */].Attribute('prevPosition', 'float', 3),
              prevPositionNext: new __WEBPACK_IMPORTED_MODULE_0_claygl_src_Geometry__["a" /* default */].Attribute('prevPositionNext', 'float', 3),
              offset: new __WEBPACK_IMPORTED_MODULE_0_claygl_src_Geometry__["a" /* default */].Attribute('offset', 'float', 1),
              color: new __WEBPACK_IMPORTED_MODULE_0_claygl_src_Geometry__["a" /* default */].Attribute('color', 'float', 4, 'COLOR')
          }
      };
  },
  /** @lends module: echarts-gl/util/geometry/LinesGeometry.prototype */
  {

      /**
       * Reset offset
       */
      resetOffset: function () {
          this._vertexOffset = 0;
          this._triangleOffset = 0;

          this._itemVertexOffsets = [];
      },

      /**
       * @param {number} nVertex
       */
      setVertexCount: function (nVertex) {
          var attributes = this.attributes;
          if (this.vertexCount !== nVertex) {
              attributes.position.init(nVertex);
              attributes.color.init(nVertex);

              if (!this.useNativeLine) {
                  attributes.positionPrev.init(nVertex);
                  attributes.positionNext.init(nVertex);
                  attributes.offset.init(nVertex);
              }

              if (nVertex > 0xffff) {
                  if (this.indices instanceof Uint16Array) {
                      this.indices = new Uint32Array(this.indices);
                  }
              }
              else {
                  if (this.indices instanceof Uint32Array) {
                      this.indices = new Uint16Array(this.indices);
                  }
              }
          }
      },

      /**
       * @param {number} nTriangle
       */
      setTriangleCount: function (nTriangle) {
          if (this.triangleCount !== nTriangle) {
              if (nTriangle === 0) {
                  this.indices = null;
              }
              else {
                  this.indices = this.vertexCount > 0xffff ? new Uint32Array(nTriangle * 3) : new Uint16Array(nTriangle * 3);
              }
          }
      },

      _getCubicCurveApproxStep: function (p0, p1, p2, p3) {
          var len = vec3.dist(p0, p1) + vec3.dist(p2, p1) + vec3.dist(p3, p2);
          var step = 1 / (len + 1) * this.segmentScale;
          return step;
      },

      /**
       * Get vertex count of cubic curve
       * @param {Array.<number>} p0
       * @param {Array.<number>} p1
       * @param {Array.<number>} p2
       * @param {Array.<number>} p3
       * @return number
       */
      getCubicCurveVertexCount: function (p0, p1, p2, p3) {
          var step = this._getCubicCurveApproxStep(p0, p1, p2, p3);
          var segCount = Math.ceil(1 / step);
          if (!this.useNativeLine) {
              return segCount * 2 + 2;
          }
          else {
              return segCount * 2;
          }
      },

      /**
       * Get face count of cubic curve
       * @param {Array.<number>} p0
       * @param {Array.<number>} p1
       * @param {Array.<number>} p2
       * @param {Array.<number>} p3
       * @return number
       */
      getCubicCurveTriangleCount: function (p0, p1, p2, p3) {
          var step = this._getCubicCurveApproxStep(p0, p1, p2, p3);
          var segCount = Math.ceil(1 / step);
          if (!this.useNativeLine) {
              return segCount * 2;
          }
          else {
              return 0;
          }
      },

      /**
       * Get vertex count of line
       * @return {number}
       */
      getLineVertexCount: function () {
          return this.getPolylineVertexCount(sampleLinePoints);
      },

      /**
       * Get face count of line
       * @return {number}
       */
      getLineTriangleCount: function () {
          return this.getPolylineTriangleCount(sampleLinePoints);
      },

      /**
       * Get how many vertices will polyline take.
       * @type {number|Array} points Can be a 1d/2d list of points, or a number of points amount.
       * @return {number}
       */
      getPolylineVertexCount: function (points) {
          var pointsLen;
          if (typeof points === 'number') {
              pointsLen = points;
          }
          else {
              var is2DArray = typeof points[0] !== 'number';
              pointsLen = is2DArray ? points.length : (points.length / 3);
          }
          return !this.useNativeLine ? ((pointsLen - 1) * 2 + 2) : (pointsLen - 1) * 2;
      },

      /**
       * Get how many triangles will polyline take.
       * @type {number|Array} points Can be a 1d/2d list of points, or a number of points amount.
       * @return {number}
       */
      getPolylineTriangleCount: function (points) {
          var pointsLen;
          if (typeof points === 'number') {
              pointsLen = points;
          }
          else {
              var is2DArray = typeof points[0] !== 'number';
              pointsLen = is2DArray ? points.length : (points.length / 3);
          }
          return !this.useNativeLine ? Math.max(pointsLen - 1, 0) * 2 : 0;
      },

      /**
       * Add a cubic curve
       * @param {Array.<number>} p0
       * @param {Array.<number>} p1
       * @param {Array.<number>} p2
       * @param {Array.<number>} p3
       * @param {Array.<number>} color
       * @param {number} [lineWidth=1]
       */
      addCubicCurve: function (p0, p1, p2, p3, color, lineWidth) {
          if (lineWidth == null) {
              lineWidth = 1;
          }
          // incremental interpolation
          // http://antigrain.com/research/bezier_interpolation/index.html#PAGE_BEZIER_INTERPOLATION
          var x0 = p0[0], y0 = p0[1], z0 = p0[2];
          var x1 = p1[0], y1 = p1[1], z1 = p1[2];
          var x2 = p2[0], y2 = p2[1], z2 = p2[2];
          var x3 = p3[0], y3 = p3[1], z3 = p3[2];

          var step = this._getCubicCurveApproxStep(p0, p1, p2, p3);

          var step2 = step * step;
          var step3 = step2 * step;

          var pre1 = 3.0 * step;
          var pre2 = 3.0 * step2;
          var pre4 = 6.0 * step2;
          var pre5 = 6.0 * step3;

          var tmp1x = x0 - x1 * 2.0 + x2;
          var tmp1y = y0 - y1 * 2.0 + y2;
          var tmp1z = z0 - z1 * 2.0 + z2;

          var tmp2x = (x1 - x2) * 3.0 - x0 + x3;
          var tmp2y = (y1 - y2) * 3.0 - y0 + y3;
          var tmp2z = (z1 - z2) * 3.0 - z0 + z3;

          var fx = x0;
          var fy = y0;
          var fz = z0;

          var dfx = (x1 - x0) * pre1 + tmp1x * pre2 + tmp2x * step3;
          var dfy = (y1 - y0) * pre1 + tmp1y * pre2 + tmp2y * step3;
          var dfz = (z1 - z0) * pre1 + tmp1z * pre2 + tmp2z * step3;

          var ddfx = tmp1x * pre4 + tmp2x * pre5;
          var ddfy = tmp1y * pre4 + tmp2y * pre5;
          var ddfz = tmp1z * pre4 + tmp2z * pre5;

          var dddfx = tmp2x * pre5;
          var dddfy = tmp2y * pre5;
          var dddfz = tmp2z * pre5;

          var t = 0;

          var k = 0;
          var segCount = Math.ceil(1 / step);

          var points = new Float32Array((segCount + 1) * 3);
          var points = [];
          var offset = 0;
          for (var k = 0; k < segCount + 1; k++) {
              points[offset++] = fx;
              points[offset++] = fy;
              points[offset++] = fz;

              fx += dfx; fy += dfy; fz += dfz;
              dfx += ddfx; dfy += ddfy; dfz += ddfz;
              ddfx += dddfx; ddfy += dddfy; ddfz += dddfz;
              t += step;

              if (t > 1) {
                  fx = dfx > 0 ? Math.min(fx, x3) : Math.max(fx, x3);
                  fy = dfy > 0 ? Math.min(fy, y3) : Math.max(fy, y3);
                  fz = dfz > 0 ? Math.min(fz, z3) : Math.max(fz, z3);
              }
          }

          return this.addPolyline(points, color, lineWidth);
      },

      /**
       * Add a straight line
       * @param {Array.<number>} p0
       * @param {Array.<number>} p1
       * @param {Array.<number>} color
       * @param {number} [lineWidth=1]
       */
      addLine: function (p0, p1, color, lineWidth) {
          return this.addPolyline([p0, p1], color, lineWidth);
      },

      /**
       * Add a straight line
       * @param {Array.<Array> | Array.<number>} points
       * @param {Array.<number> | Array.<Array>} color
       * @param {number} [lineWidth=1]
       * @param {number} [startOffset=0]
       * @param {number} [pointsCount] Default to be amount of points in the first argument
       */
      addPolyline: function (points, color, lineWidth, startOffset, pointsCount) {
          if (!points.length) {
              return;
          }
          var is2DArray = typeof points[0] !== 'number';
          if (pointsCount == null) {
              pointsCount = is2DArray ? points.length : points.length / 3;
          }
          if (pointsCount < 2) {
              return;
          }
          if (startOffset == null) {
              startOffset = 0;
          }
          if (lineWidth == null) {
              lineWidth = 1;
          }

          this._itemVertexOffsets.push(this._vertexOffset);

          var is2DArray = typeof points[0] !== 'number';
          var notSharingColor = is2DArray
              ? typeof color[0] !== 'number'
              : color.length / 4 === pointsCount;

          var positionAttr = this.attributes.position;
          var positionPrevAttr = this.attributes.positionPrev;
          var positionNextAttr = this.attributes.positionNext;
          var colorAttr = this.attributes.color;
          var offsetAttr = this.attributes.offset;
          var indices = this.indices;

          var vertexOffset = this._vertexOffset;
          var point;
          var pointColor;

          lineWidth = Math.max(lineWidth, 0.01);

          for (var k = startOffset; k < pointsCount; k++) {
              if (is2DArray) {
                  point = points[k];
                  if (notSharingColor) {
                      pointColor = color[k];
                  }
                  else {
                      pointColor = color;
                  }
              }
              else {
                  var k3 = k * 3;
                  point = point || [];
                  point[0] = points[k3];
                  point[1] = points[k3 + 1];
                  point[2] = points[k3 + 2];

                  if (notSharingColor) {
                      var k4 = k * 4;
                      pointColor = pointColor || [];
                      pointColor[0] = color[k4];
                      pointColor[1] = color[k4 + 1];
                      pointColor[2] = color[k4 + 2];
                      pointColor[3] = color[k4 + 3];
                  }
                  else {
                      pointColor = color;
                  }
              }
              if (!this.useNativeLine) {
                  if (k < pointsCount - 1) {
                      // Set to next two points
                      positionPrevAttr.set(vertexOffset + 2, point);
                      positionPrevAttr.set(vertexOffset + 3, point);
                  }
                  if (k > 0) {
                      // Set to previous two points
                      positionNextAttr.set(vertexOffset - 2, point);
                      positionNextAttr.set(vertexOffset - 1, point);
                  }

                  positionAttr.set(vertexOffset, point);
                  positionAttr.set(vertexOffset + 1, point);

                  colorAttr.set(vertexOffset, pointColor);
                  colorAttr.set(vertexOffset + 1, pointColor);

                  offsetAttr.set(vertexOffset, lineWidth / 2);
                  offsetAttr.set(vertexOffset + 1, -lineWidth / 2);

                  vertexOffset += 2;
              }
              else {
                  if (k > 1) {
                      positionAttr.copy(vertexOffset, vertexOffset - 1);
                      colorAttr.copy(vertexOffset, vertexOffset - 1);
                      vertexOffset++;
                  }
              }

              if (!this.useNativeLine) {
                  if (k > 0) {
                      var idx3 = this._triangleOffset * 3;
                      var indices = this.indices;
                      // 0-----2
                      // 1-----3
                      // 0->1->2, 1->3->2
                      indices[idx3] = vertexOffset - 4;
                      indices[idx3 + 1] = vertexOffset - 3;
                      indices[idx3 + 2] = vertexOffset - 2;

                      indices[idx3 + 3] = vertexOffset - 3;
                      indices[idx3 + 4] = vertexOffset - 1;
                      indices[idx3 + 5] = vertexOffset - 2;

                      this._triangleOffset += 2;
                  }
              }
              else {
                  colorAttr.set(vertexOffset, pointColor);
                  positionAttr.set(vertexOffset, point);
                  vertexOffset++;
              }
          }
          if (!this.useNativeLine) {
              var start = this._vertexOffset;
              var end = this._vertexOffset + pointsCount * 2;
              positionPrevAttr.copy(start, start + 2);
              positionPrevAttr.copy(start + 1, start + 3);
              positionNextAttr.copy(end - 1, end - 3);
              positionNextAttr.copy(end - 2, end - 4);
          }

          this._vertexOffset = vertexOffset;

          return this._vertexOffset;
      },

      /**
       * Set color of single line.
       */
      setItemColor: function (idx, color) {
          var startOffset = this._itemVertexOffsets[idx];
          var endOffset = idx < this._itemVertexOffsets.length - 1 ? this._itemVertexOffsets[idx + 1] : this._vertexOffset;

          for (var i = startOffset; i < endOffset; i++) {
              this.attributes.color.set(i, color);
          }
          this.dirty('color');
      },

      /**
       * @return {number}
       */
      currentTriangleOffset: function () {
          return this._triangleOffset;
      },

      /**
       * @return {number}
       */
      currentVertexOffset: function () {
          return this._vertexOffset;
      }
  });

  __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts___default.a.util.defaults(LinesGeometry.prototype, __WEBPACK_IMPORTED_MODULE_2__dynamicConvertMixin__["a" /* default */]);

  /* harmony default export */ __webpack_exports__["a"] = (LinesGeometry);

  /***/ }),
  /* 26 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__ = __webpack_require__(69);


  /**
   * @constructor
   * @alias clay.Vector2
   * @param {number} x
   * @param {number} y
   */
  var Vector2 = function(x, y) {

      x = x || 0;
      y = y || 0;

      /**
       * Storage of Vector2, read and write of x, y will change the values in array
       * All methods also operate on the array instead of x, y components
       * @name array
       * @type {Float32Array}
       * @memberOf clay.Vector2#
       */
      this.array = __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].fromValues(x, y);

      /**
       * Dirty flag is used by the Node to determine
       * if the matrix is updated to latest
       * @name _dirty
       * @type {boolean}
       * @memberOf clay.Vector2#
       */
      this._dirty = true;
  };

  Vector2.prototype = {

      constructor: Vector2,

      /**
       * Add b to self
       * @param  {clay.Vector2} b
       * @return {clay.Vector2}
       */
      add: function(b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].add(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Set x and y components
       * @param  {number}  x
       * @param  {number}  y
       * @return {clay.Vector2}
       */
      set: function(x, y) {
          this.array[0] = x;
          this.array[1] = y;
          this._dirty = true;
          return this;
      },

      /**
       * Set x and y components from array
       * @param  {Float32Array|number[]} arr
       * @return {clay.Vector2}
       */
      setArray: function(arr) {
          this.array[0] = arr[0];
          this.array[1] = arr[1];

          this._dirty = true;
          return this;
      },

      /**
       * Clone a new Vector2
       * @return {clay.Vector2}
       */
      clone: function() {
          return new Vector2(this.x, this.y);
      },

      /**
       * Copy x, y from b
       * @param  {clay.Vector2} b
       * @return {clay.Vector2}
       */
      copy: function(b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].copy(this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Cross product of self and b, written to a Vector3 out
       * @param  {clay.Vector3} out
       * @param  {clay.Vector2} b
       * @return {clay.Vector2}
       */
      cross: function(out, b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].cross(out.array, this.array, b.array);
          out._dirty = true;
          return this;
      },

      /**
       * Alias for distance
       * @param  {clay.Vector2} b
       * @return {number}
       */
      dist: function(b) {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].dist(this.array, b.array);
      },

      /**
       * Distance between self and b
       * @param  {clay.Vector2} b
       * @return {number}
       */
      distance: function(b) {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].distance(this.array, b.array);
      },

      /**
       * Alias for divide
       * @param  {clay.Vector2} b
       * @return {clay.Vector2}
       */
      div: function(b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].div(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Divide self by b
       * @param  {clay.Vector2} b
       * @return {clay.Vector2}
       */
      divide: function(b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].divide(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Dot product of self and b
       * @param  {clay.Vector2} b
       * @return {number}
       */
      dot: function(b) {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].dot(this.array, b.array);
      },

      /**
       * Alias of length
       * @return {number}
       */
      len: function() {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].len(this.array);
      },

      /**
       * Calculate the length
       * @return {number}
       */
      length: function() {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].length(this.array);
      },

      /**
       * Linear interpolation between a and b
       * @param  {clay.Vector2} a
       * @param  {clay.Vector2} b
       * @param  {number}  t
       * @return {clay.Vector2}
       */
      lerp: function(a, b, t) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].lerp(this.array, a.array, b.array, t);
          this._dirty = true;
          return this;
      },

      /**
       * Minimum of self and b
       * @param  {clay.Vector2} b
       * @return {clay.Vector2}
       */
      min: function(b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].min(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Maximum of self and b
       * @param  {clay.Vector2} b
       * @return {clay.Vector2}
       */
      max: function(b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].max(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Alias for multiply
       * @param  {clay.Vector2} b
       * @return {clay.Vector2}
       */
      mul: function(b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].mul(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Mutiply self and b
       * @param  {clay.Vector2} b
       * @return {clay.Vector2}
       */
      multiply: function(b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].multiply(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Negate self
       * @return {clay.Vector2}
       */
      negate: function() {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].negate(this.array, this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Normalize self
       * @return {clay.Vector2}
       */
      normalize: function() {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].normalize(this.array, this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Generate random x, y components with a given scale
       * @param  {number} scale
       * @return {clay.Vector2}
       */
      random: function(scale) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].random(this.array, scale);
          this._dirty = true;
          return this;
      },

      /**
       * Scale self
       * @param  {number}  scale
       * @return {clay.Vector2}
       */
      scale: function(s) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].scale(this.array, this.array, s);
          this._dirty = true;
          return this;
      },

      /**
       * Scale b and add to self
       * @param  {clay.Vector2} b
       * @param  {number}  scale
       * @return {clay.Vector2}
       */
      scaleAndAdd: function(b, s) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].scaleAndAdd(this.array, this.array, b.array, s);
          this._dirty = true;
          return this;
      },

      /**
       * Alias for squaredDistance
       * @param  {clay.Vector2} b
       * @return {number}
       */
      sqrDist: function(b) {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].sqrDist(this.array, b.array);
      },

      /**
       * Squared distance between self and b
       * @param  {clay.Vector2} b
       * @return {number}
       */
      squaredDistance: function(b) {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].squaredDistance(this.array, b.array);
      },

      /**
       * Alias for squaredLength
       * @return {number}
       */
      sqrLen: function() {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].sqrLen(this.array);
      },

      /**
       * Squared length of self
       * @return {number}
       */
      squaredLength: function() {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].squaredLength(this.array);
      },

      /**
       * Alias for subtract
       * @param  {clay.Vector2} b
       * @return {clay.Vector2}
       */
      sub: function(b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].sub(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Subtract b from self
       * @param  {clay.Vector2} b
       * @return {clay.Vector2}
       */
      subtract: function(b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].subtract(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Transform self with a Matrix2 m
       * @param  {clay.Matrix2} m
       * @return {clay.Vector2}
       */
      transformMat2: function(m) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].transformMat2(this.array, this.array, m.array);
          this._dirty = true;
          return this;
      },

      /**
       * Transform self with a Matrix2d m
       * @param  {clay.Matrix2d} m
       * @return {clay.Vector2}
       */
      transformMat2d: function(m) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].transformMat2d(this.array, this.array, m.array);
          this._dirty = true;
          return this;
      },

      /**
       * Transform self with a Matrix3 m
       * @param  {clay.Matrix3} m
       * @return {clay.Vector2}
       */
      transformMat3: function(m) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].transformMat3(this.array, this.array, m.array);
          this._dirty = true;
          return this;
      },

      /**
       * Transform self with a Matrix4 m
       * @param  {clay.Matrix4} m
       * @return {clay.Vector2}
       */
      transformMat4: function(m) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].transformMat4(this.array, this.array, m.array);
          this._dirty = true;
          return this;
      },

      toString: function() {
          return '[' + Array.prototype.join.call(this.array, ',') + ']';
      },

      toArray: function () {
          return Array.prototype.slice.call(this.array);
      }
  };

  // Getter and Setter
  if (Object.defineProperty) {

      var proto = Vector2.prototype;
      /**
       * @name x
       * @type {number}
       * @memberOf clay.Vector2
       * @instance
       */
      Object.defineProperty(proto, 'x', {
          get: function () {
              return this.array[0];
          },
          set: function (value) {
              this.array[0] = value;
              this._dirty = true;
          }
      });

      /**
       * @name y
       * @type {number}
       * @memberOf clay.Vector2
       * @instance
       */
      Object.defineProperty(proto, 'y', {
          get: function () {
              return this.array[1];
          },
          set: function (value) {
              this.array[1] = value;
              this._dirty = true;
          }
      });
  }

  // Supply methods that are not in place

  /**
   * @param  {clay.Vector2} out
   * @param  {clay.Vector2} a
   * @param  {clay.Vector2} b
   * @return {clay.Vector2}
   */
  Vector2.add = function(out, a, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].add(out.array, a.array, b.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Vector2} out
   * @param  {number}  x
   * @param  {number}  y
   * @return {clay.Vector2}
   */
  Vector2.set = function(out, x, y) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].set(out.array, x, y);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Vector2} out
   * @param  {clay.Vector2} b
   * @return {clay.Vector2}
   */
  Vector2.copy = function(out, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].copy(out.array, b.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Vector3} out
   * @param  {clay.Vector2} a
   * @param  {clay.Vector2} b
   * @return {clay.Vector2}
   */
  Vector2.cross = function(out, a, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].cross(out.array, a.array, b.array);
      out._dirty = true;
      return out;
  };
  /**
   * @param  {clay.Vector2} a
   * @param  {clay.Vector2} b
   * @return {number}
   */
  Vector2.dist = function(a, b) {
      return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].distance(a.array, b.array);
  };
  /**
   * @function
   * @param  {clay.Vector2} a
   * @param  {clay.Vector2} b
   * @return {number}
   */
  Vector2.distance = Vector2.dist;
  /**
   * @param  {clay.Vector2} out
   * @param  {clay.Vector2} a
   * @param  {clay.Vector2} b
   * @return {clay.Vector2}
   */
  Vector2.div = function(out, a, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].divide(out.array, a.array, b.array);
      out._dirty = true;
      return out;
  };
  /**
   * @function
   * @param  {clay.Vector2} out
   * @param  {clay.Vector2} a
   * @param  {clay.Vector2} b
   * @return {clay.Vector2}
   */
  Vector2.divide = Vector2.div;
  /**
   * @param  {clay.Vector2} a
   * @param  {clay.Vector2} b
   * @return {number}
   */
  Vector2.dot = function(a, b) {
      return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].dot(a.array, b.array);
  };

  /**
   * @param  {clay.Vector2} a
   * @return {number}
   */
  Vector2.len = function(b) {
      return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].length(b.array);
  };

  // Vector2.length = Vector2.len;

  /**
   * @param  {clay.Vector2} out
   * @param  {clay.Vector2} a
   * @param  {clay.Vector2} b
   * @param  {number}  t
   * @return {clay.Vector2}
   */
  Vector2.lerp = function(out, a, b, t) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].lerp(out.array, a.array, b.array, t);
      out._dirty = true;
      return out;
  };
  /**
   * @param  {clay.Vector2} out
   * @param  {clay.Vector2} a
   * @param  {clay.Vector2} b
   * @return {clay.Vector2}
   */
  Vector2.min = function(out, a, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].min(out.array, a.array, b.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Vector2} out
   * @param  {clay.Vector2} a
   * @param  {clay.Vector2} b
   * @return {clay.Vector2}
   */
  Vector2.max = function(out, a, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].max(out.array, a.array, b.array);
      out._dirty = true;
      return out;
  };
  /**
   * @param  {clay.Vector2} out
   * @param  {clay.Vector2} a
   * @param  {clay.Vector2} b
   * @return {clay.Vector2}
   */
  Vector2.mul = function(out, a, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].multiply(out.array, a.array, b.array);
      out._dirty = true;
      return out;
  };
  /**
   * @function
   * @param  {clay.Vector2} out
   * @param  {clay.Vector2} a
   * @param  {clay.Vector2} b
   * @return {clay.Vector2}
   */
  Vector2.multiply = Vector2.mul;
  /**
   * @param  {clay.Vector2} out
   * @param  {clay.Vector2} a
   * @return {clay.Vector2}
   */
  Vector2.negate = function(out, a) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].negate(out.array, a.array);
      out._dirty = true;
      return out;
  };
  /**
   * @param  {clay.Vector2} out
   * @param  {clay.Vector2} a
   * @return {clay.Vector2}
   */
  Vector2.normalize = function(out, a) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].normalize(out.array, a.array);
      out._dirty = true;
      return out;
  };
  /**
   * @param  {clay.Vector2} out
   * @param  {number}  scale
   * @return {clay.Vector2}
   */
  Vector2.random = function(out, scale) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].random(out.array, scale);
      out._dirty = true;
      return out;
  };
  /**
   * @param  {clay.Vector2} out
   * @param  {clay.Vector2} a
   * @param  {number}  scale
   * @return {clay.Vector2}
   */
  Vector2.scale = function(out, a, scale) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].scale(out.array, a.array, scale);
      out._dirty = true;
      return out;
  };
  /**
   * @param  {clay.Vector2} out
   * @param  {clay.Vector2} a
   * @param  {clay.Vector2} b
   * @param  {number}  scale
   * @return {clay.Vector2}
   */
  Vector2.scaleAndAdd = function(out, a, b, scale) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].scaleAndAdd(out.array, a.array, b.array, scale);
      out._dirty = true;
      return out;
  };
  /**
   * @param  {clay.Vector2} a
   * @param  {clay.Vector2} b
   * @return {number}
   */
  Vector2.sqrDist = function(a, b) {
      return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].sqrDist(a.array, b.array);
  };
  /**
   * @function
   * @param  {clay.Vector2} a
   * @param  {clay.Vector2} b
   * @return {number}
   */
  Vector2.squaredDistance = Vector2.sqrDist;

  /**
   * @param  {clay.Vector2} a
   * @return {number}
   */
  Vector2.sqrLen = function(a) {
      return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].sqrLen(a.array);
  };
  /**
   * @function
   * @param  {clay.Vector2} a
   * @return {number}
   */
  Vector2.squaredLength = Vector2.sqrLen;

  /**
   * @param  {clay.Vector2} out
   * @param  {clay.Vector2} a
   * @param  {clay.Vector2} b
   * @return {clay.Vector2}
   */
  Vector2.sub = function(out, a, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].subtract(out.array, a.array, b.array);
      out._dirty = true;
      return out;
  };
  /**
   * @function
   * @param  {clay.Vector2} out
   * @param  {clay.Vector2} a
   * @param  {clay.Vector2} b
   * @return {clay.Vector2}
   */
  Vector2.subtract = Vector2.sub;
  /**
   * @param  {clay.Vector2} out
   * @param  {clay.Vector2} a
   * @param  {clay.Matrix2} m
   * @return {clay.Vector2}
   */
  Vector2.transformMat2 = function(out, a, m) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].transformMat2(out.array, a.array, m.array);
      out._dirty = true;
      return out;
  };
  /**
   * @param  {clay.Vector2}  out
   * @param  {clay.Vector2}  a
   * @param  {clay.Matrix2d} m
   * @return {clay.Vector2}
   */
  Vector2.transformMat2d = function(out, a, m) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].transformMat2d(out.array, a.array, m.array);
      out._dirty = true;
      return out;
  };
  /**
   * @param  {clay.Vector2} out
   * @param  {clay.Vector2} a
   * @param  {Matrix3} m
   * @return {clay.Vector2}
   */
  Vector2.transformMat3 = function(out, a, m) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].transformMat3(out.array, a.array, m.array);
      out._dirty = true;
      return out;
  };
  /**
   * @param  {clay.Vector2} out
   * @param  {clay.Vector2} a
   * @param  {clay.Matrix4} m
   * @return {clay.Vector2}
   */
  Vector2.transformMat4 = function(out, a, m) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec2__["a" /* default */].transformMat4(out.array, a.array, m.array);
      out._dirty = true;
      return out;
  };

  /* harmony default export */ __webpack_exports__["a"] = (Vector2);


  /***/ }),
  /* 27 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Texture__ = __webpack_require__(4);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_glenum__ = __webpack_require__(11);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_util__ = __webpack_require__(23);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__math_util__ = __webpack_require__(72);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_vendor__ = __webpack_require__(13);





  var isPowerOfTwo = __WEBPACK_IMPORTED_MODULE_3__math_util__["a" /* default */].isPowerOfTwo;

  var targetList = ['px', 'nx', 'py', 'ny', 'pz', 'nz'];

  /**
   * @constructor clay.TextureCube
   * @extends clay.Texture
   *
   * @example
   *     ...
   *     var mat = new clay.Material({
   *         shader: clay.shader.library.get('clay.phong', 'environmentMap')
   *     });
   *     var envMap = new clay.TextureCube();
   *     envMap.load({
   *         'px': 'assets/textures/sky/px.jpg',
   *         'nx': 'assets/textures/sky/nx.jpg'
   *         'py': 'assets/textures/sky/py.jpg'
   *         'ny': 'assets/textures/sky/ny.jpg'
   *         'pz': 'assets/textures/sky/pz.jpg'
   *         'nz': 'assets/textures/sky/nz.jpg'
   *     });
   *     mat.set('environmentMap', envMap);
   *     ...
   *     envMap.success(function () {
   *         // Wait for the sky texture loaded
   *         animation.on('frame', function (frameTime) {
   *             renderer.render(scene, camera);
   *         });
   *     });
   */
  var TextureCube = __WEBPACK_IMPORTED_MODULE_0__Texture__["a" /* default */].extend(function () {
      return /** @lends clay.TextureCube# */{

          /**
           * @type {boolean}
           * @default false
           */
          // PENDING cubemap should not flipY in default.
          // flipY: false,

          /**
           * @type {Object}
           * @property {?HTMLImageElement|HTMLCanvasElemnet} px
           * @property {?HTMLImageElement|HTMLCanvasElemnet} nx
           * @property {?HTMLImageElement|HTMLCanvasElemnet} py
           * @property {?HTMLImageElement|HTMLCanvasElemnet} ny
           * @property {?HTMLImageElement|HTMLCanvasElemnet} pz
           * @property {?HTMLImageElement|HTMLCanvasElemnet} nz
           */
          image: {
              px: null,
              nx: null,
              py: null,
              ny: null,
              pz: null,
              nz: null
          },
          /**
           * Pixels data of each side. Will be ignored if images are set.
           * @type {Object}
           * @property {?Uint8Array} px
           * @property {?Uint8Array} nx
           * @property {?Uint8Array} py
           * @property {?Uint8Array} ny
           * @property {?Uint8Array} pz
           * @property {?Uint8Array} nz
           */
          pixels: {
              px: null,
              nx: null,
              py: null,
              ny: null,
              pz: null,
              nz: null
          },

          /**
           * @type {Array.<Object>}
           */
          mipmaps: []
      };
  }, {

      textureType: 'textureCube',

      update: function (renderer) {
          var _gl = renderer.gl;
          _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, this._cache.get('webgl_texture'));

          this.updateCommon(renderer);

          var glFormat = this.format;
          var glType = this.type;

          _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_WRAP_S, this.getAvailableWrapS());
          _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_WRAP_T, this.getAvailableWrapT());

          _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_MAG_FILTER, this.getAvailableMagFilter());
          _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_MIN_FILTER, this.getAvailableMinFilter());

          var anisotropicExt = renderer.getGLExtension('EXT_texture_filter_anisotropic');
          if (anisotropicExt && this.anisotropic > 1) {
              _gl.texParameterf(_gl.TEXTURE_CUBE_MAP, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, this.anisotropic);
          }

          // Fallback to float type if browser don't have half float extension
          if (glType === 36193) {
              var halfFloatExt = renderer.getGLExtension('OES_texture_half_float');
              if (!halfFloatExt) {
                  glType = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].FLOAT;
              }
          }

          if (this.mipmaps.length) {
              var width = this.width;
              var height = this.height;
              for (var i = 0; i < this.mipmaps.length; i++) {
                  var mipmap = this.mipmaps[i];
                  this._updateTextureData(_gl, mipmap, i, width, height, glFormat, glType);
                  width /= 2;
                  height /= 2;
              }
          }
          else {
              this._updateTextureData(_gl, this, 0, this.width, this.height, glFormat, glType);

              if (!this.NPOT && this.useMipmap) {
                  _gl.generateMipmap(_gl.TEXTURE_CUBE_MAP);
              }
          }

          _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, null);
      },

      _updateTextureData: function (_gl, data, level, width, height, glFormat, glType) {
          for (var i = 0; i < 6; i++) {
              var target = targetList[i];
              var img = data.image && data.image[target];
              if (img) {
                  _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level, glFormat, glFormat, glType, img);
              }
              else {
                  _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level, glFormat, width, height, 0, glFormat, glType, data.pixels && data.pixels[target]);
              }
          }
      },

      /**
       * @param  {clay.Renderer} renderer
       * @memberOf clay.TextureCube.prototype
       */
      generateMipmap: function (renderer) {
          var _gl = renderer.gl;
          if (this.useMipmap && !this.NPOT) {
              _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, this._cache.get('webgl_texture'));
              _gl.generateMipmap(_gl.TEXTURE_CUBE_MAP);
          }
      },

      bind: function (renderer) {
          renderer.gl.bindTexture(renderer.gl.TEXTURE_CUBE_MAP, this.getWebGLTexture(renderer));
      },

      unbind: function (renderer) {
          renderer.gl.bindTexture(renderer.gl.TEXTURE_CUBE_MAP, null);
      },

      // Overwrite the isPowerOfTwo method
      isPowerOfTwo: function () {
          if (this.image.px) {
              return isPowerOfTwo(this.image.px.width)
                  && isPowerOfTwo(this.image.px.height);
          }
          else {
              return isPowerOfTwo(this.width)
                  && isPowerOfTwo(this.height);
          }
      },

      isRenderable: function () {
          if (this.image.px) {
              return isImageRenderable(this.image.px)
                  && isImageRenderable(this.image.nx)
                  && isImageRenderable(this.image.py)
                  && isImageRenderable(this.image.ny)
                  && isImageRenderable(this.image.pz)
                  && isImageRenderable(this.image.nz);
          }
          else {
              return !!(this.width && this.height);
          }
      },

      load: function (imageList, crossOrigin) {
          var loading = 0;
          var self = this;
          __WEBPACK_IMPORTED_MODULE_2__core_util__["a" /* default */].each(imageList, function (src, target){
              var image = __WEBPACK_IMPORTED_MODULE_4__core_vendor__["a" /* default */].createImage();
              if (crossOrigin) {
                  image.crossOrigin = crossOrigin;
              }
              image.onload = function () {
                  loading --;
                  if (loading === 0){
                      self.dirty();
                      self.trigger('success', self);
                  }
              };
              image.onerror = function () {
                  loading --;
              };

              loading++;
              image.src = src;
              self.image[target] = image;
          });

          return this;
      }
  });

  Object.defineProperty(TextureCube.prototype, 'width', {
      get: function () {
          if (this.image && this.image.px) {
              return this.image.px.width;
          }
          return this._width;
      },
      set: function (value) {
          if (this.image && this.image.px) {
              console.warn('Texture from image can\'t set width');
          }
          else {
              if (this._width !== value) {
                  this.dirty();
              }
              this._width = value;
          }
      }
  });
  Object.defineProperty(TextureCube.prototype, 'height', {
      get: function () {
          if (this.image && this.image.px) {
              return this.image.px.height;
          }
          return this._height;
      },
      set: function (value) {
          if (this.image && this.image.px) {
              console.warn('Texture from image can\'t set height');
          }
          else {
              if (this._height !== value) {
                  this.dirty();
              }
              this._height = value;
          }
      }
  });
  function isImageRenderable(image) {
      return image.width > 0 && image.height > 0;
  }

  /* harmony default export */ __webpack_exports__["a"] = (TextureCube);


  /***/ }),
  /* 28 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ({
      defaultOption: {
          // Post effect
          postEffect: {
              enable: false,

              bloom: {
                  enable: true,
                  intensity: 0.1
              },
              depthOfField: {
                  enable: false,
                  focalRange: 20,
                  focalDistance: 50,
                  blurRadius: 10,
                  fstop: 2.8,
                  quality: 'medium'
              },

              screenSpaceAmbientOcclusion: {
                  enable: false,
                  radius: 2,
                  // low, medium, high, ultra
                  quality: 'medium',
                  intensity: 1
              },

              screenSpaceReflection: {
                  enable: false,
                  quality: 'medium',
                  maxRoughness: 0.8
              },

              colorCorrection: {
                  enable: true,

                  exposure: 0,

                  brightness: 0,

                  contrast: 1,

                  saturation: 1,

                  lookupTexture: ''
              },

              edge: {
                  enable: false
              },

              FXAA: {
                  enable: false
              }
          },

          // Temporal super sampling when the picture is still.
          temporalSuperSampling: {
              // Only enabled when postEffect is enabled
              enable: 'auto'
          }
      }
  });

  /***/ }),
  /* 29 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ({
      defaultOption: {
          // Light is available when material.shading is not color
          light: {
              // Main light
              main: {
                  shadow: false,
                  // low, medium, high, ultra
                  shadowQuality: 'high',

                  color: '#fff',
                  intensity: 1,

                  alpha: 0,
                  beta: 0
              },
              ambient: {
                  color: '#fff',
                  intensity: 0.2
              },
              ambientCubemap: {
                  // Panorama environment texture,
                  // Support .hdr and commmon web formats.
                  texture: null,
                  // Available when texture is hdr.
                  exposure: 1,
                  // Intensity for diffuse term
                  diffuseIntensity: 0.5,
                  // Intensity for specular term, only available when shading is realastic
                  specularIntensity: 0.5
              }
          }
      }
  });

  /***/ }),
  /* 30 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_graphicGL__ = __webpack_require__(1);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_claygl_src_plugin_Skybox__ = __webpack_require__(42);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_echarts_lib_echarts__);




  function SceneHelper() {
  }

  SceneHelper.prototype = {
      constructor: SceneHelper,

      setScene: function (scene) {
          this._scene = scene;

          if (this._skybox) {
              this._skybox.attachScene(this._scene);
          }
      },

      initLight: function (rootNode) {
          this._lightRoot = rootNode;
          /**
           * @type {clay.light.Directional}
           */
          this.mainLight = new __WEBPACK_IMPORTED_MODULE_0__util_graphicGL__["a" /* default */].DirectionalLight({
              shadowBias: 0.005
          });

          /**
           * @type {clay.light.Ambient}
           */
          this.ambientLight = new __WEBPACK_IMPORTED_MODULE_0__util_graphicGL__["a" /* default */].AmbientLight();

          rootNode.add(this.mainLight);
          rootNode.add(this.ambientLight);
      },

      dispose: function () {
          if (this._lightRoot) {
              this._lightRoot.remove(this.mainLight);
              this._lightRoot.remove(this.ambientLight);
          }
      },

      updateLight: function (componentModel) {

          var mainLight = this.mainLight;
          var ambientLight = this.ambientLight;

          var lightModel = componentModel.getModel('light');
          var mainLightModel = lightModel.getModel('main');
          var ambientLightModel = lightModel.getModel('ambient');

          mainLight.intensity = mainLightModel.get('intensity');
          ambientLight.intensity = ambientLightModel.get('intensity');
          mainLight.color = __WEBPACK_IMPORTED_MODULE_0__util_graphicGL__["a" /* default */].parseColor(mainLightModel.get('color')).slice(0, 3);
          ambientLight.color = __WEBPACK_IMPORTED_MODULE_0__util_graphicGL__["a" /* default */].parseColor(ambientLightModel.get('color')).slice(0, 3);

          var alpha = mainLightModel.get('alpha') || 0;
          var beta = mainLightModel.get('beta') || 0;
          mainLight.position.setArray(__WEBPACK_IMPORTED_MODULE_0__util_graphicGL__["a" /* default */].directionFromAlphaBeta(alpha, beta));
          mainLight.lookAt(__WEBPACK_IMPORTED_MODULE_0__util_graphicGL__["a" /* default */].Vector3.ZERO);

          mainLight.castShadow = mainLightModel.get('shadow');
          mainLight.shadowResolution = __WEBPACK_IMPORTED_MODULE_0__util_graphicGL__["a" /* default */].getShadowResolution(mainLightModel.get('shadowQuality'));
      },

      updateAmbientCubemap: function (renderer, componentModel, api) {
          var ambientCubemapModel = componentModel.getModel('light.ambientCubemap');

          var textureUrl = ambientCubemapModel.get('texture');
          if (textureUrl) {
              this._cubemapLightsCache = this._cubemapLightsCache || {};
              var lights = this._cubemapLightsCache[textureUrl];
              if (!lights) {
                  var self = this;
                  lights = this._cubemapLightsCache[textureUrl]
                      = __WEBPACK_IMPORTED_MODULE_0__util_graphicGL__["a" /* default */].createAmbientCubemap(ambientCubemapModel.option, renderer, api, function () {
                          // Use prefitered cubemap
                          if (self._isSkyboxFromAmbientCubemap) {
                              self._skybox.setEnvironmentMap(lights.specular.cubemap);
                          }

                          api.getZr().refresh();
                      });
              }
              this._lightRoot.add(lights.diffuse);
              this._lightRoot.add(lights.specular);

              this._currentCubemapLights = lights;
          }
          else if (this._currentCubemapLights) {
              this._lightRoot.remove(this._currentCubemapLights.diffuse);
              this._lightRoot.remove(this._currentCubemapLights.specular);
              this._currentCubemapLights = null;
          }
      },

      updateSkybox: function (renderer, componentModel, api) {
          var environmentUrl = componentModel.get('environment');

          var self = this;
          function getSkybox() {
              self._skybox = self._skybox || new __WEBPACK_IMPORTED_MODULE_1_claygl_src_plugin_Skybox__["a" /* default */]();
              return self._skybox;
          }

          var skybox = getSkybox();
          if (environmentUrl && environmentUrl !== 'none') {
              if (environmentUrl === 'auto') {
                  this._isSkyboxFromAmbientCubemap = true;
                  // Use environment in ambient cubemap
                  if (this._currentCubemapLights) {
                      var cubemap = this._currentCubemapLights.specular.cubemap;
                      skybox.setEnvironmentMap(cubemap);
                      if (this._scene) {
                          skybox.attachScene(this._scene);
                      }
                      skybox.material.set('lod', 3);
                  }
                  else if (this._skybox) {
                      this._skybox.detachScene();
                  }
              }
              // Is gradient or color string
              else if ((typeof environmentUrl === 'object' && environmentUrl.colorStops)
                  || (typeof environmentUrl === 'string' && __WEBPACK_IMPORTED_MODULE_2_echarts_lib_echarts___default.a.color.parse(environmentUrl))
              ) {
                  this._isSkyboxFromAmbientCubemap = false;
                  var texture = new __WEBPACK_IMPORTED_MODULE_0__util_graphicGL__["a" /* default */].Texture2D({
                      anisotropic: 8,
                      flipY: false
                  });
                  skybox.setEnvironmentMap(texture);
                  var canvas = texture.image = document.createElement('canvas');
                  canvas.width = canvas.height = 16;
                  var ctx = canvas.getContext('2d');
                  var rect = new __WEBPACK_IMPORTED_MODULE_2_echarts_lib_echarts___default.a.graphic.Rect({
                      shape: { x: 0, y: 0, width: 16, height: 16 },
                      style: { fill: environmentUrl }
                  });
                  rect.brush(ctx);

                  skybox.attachScene(this._scene);
              }
              else {
                  this._isSkyboxFromAmbientCubemap = false;
                  // Panorama
                  var texture = __WEBPACK_IMPORTED_MODULE_0__util_graphicGL__["a" /* default */].loadTexture(environmentUrl, api, {
                      anisotropic: 8,
                      flipY: false
                  });
                  skybox.setEnvironmentMap(texture);

                  skybox.attachScene(this._scene);
              }
          }
          else {
              if (this._skybox) {
                  this._skybox.detachScene(this._scene);
              }
              this._skybox = null;
          }

          var coordSys = componentModel.coordinateSystem;
          if (this._skybox) {
              if (coordSys && coordSys.viewGL
                  && environmentUrl !== 'auto'
                  && !(environmentUrl.match && environmentUrl.match(/.hdr$/))
              ) {
                  var srgbDefineMethod = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';
                  this._skybox.material[srgbDefineMethod]('fragment', 'SRGB_DECODE');
              }
              else {
                  this._skybox.material.undefine('fragment', 'SRGB_DECODE');
              }
              // var ambientCubemapUrl = environmentUrl === 'auto'
              //     ? componentModel.get('light.ambientCubemap.texture')
              //     : environmentUrl;
          }
      }
  };

  /* harmony default export */ __webpack_exports__["a"] = (SceneHelper);

  /***/ }),
  /* 31 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ({
      defaultOption: {
          shading: null,

          realisticMaterial: {
              textureTiling: 1,
              textureOffset: 0,

              detailTexture: null
          },

          lambertMaterial: {
              textureTiling: 1,
              textureOffset: 0,

              detailTexture: null
          },

          colorMaterial: {
              textureTiling: 1,
              textureOffset: 0,

              detailTexture: null
          },

          hatchingMaterial: {
              textureTiling: 1,
              textureOffset: 0,

              paperColor: '#fff'
          }
      }
  });

  /***/ }),
  /* 32 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);


  var formatUtil = {};
  formatUtil.getFormattedLabel = function (seriesModel, dataIndex, status, dataType, dimIndex) {
      status = status || 'normal';
      var data = seriesModel.getData(dataType);
      var itemModel = data.getItemModel(dataIndex);

      var params = seriesModel.getDataParams(dataIndex, dataType);
      if (dimIndex != null && (params.value instanceof Array)) {
          params.value = params.value[dimIndex];
      }

      var formatter = itemModel.get(status === 'normal' ? ['label', 'formatter'] : ['emphasis', 'label', 'formatter']);
      if (formatter == null) {
          formatter = itemModel.get(['label', 'formatter']);
      }
      var text;
      if (typeof formatter === 'function') {
          params.status = status;
          text = formatter(params);
      }
      else if (typeof formatter === 'string') {
          text = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.format.formatTpl(formatter, params);
      }
      return text;
  };

  /**
   * If value is not array, then convert it to array.
   * @param  {*} value
   * @return {Array} [value] or value
   */
  formatUtil.normalizeToArray = function (value) {
      return value instanceof Array
          ? value
          : value == null
          ? []
          : [value];
  };

  /* harmony default export */ __webpack_exports__["a"] = (formatUtil);

  /***/ }),
  /* 33 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* unused harmony export vec4 */
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(20);

  /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, this
      list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
      and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */



  /**
   * @class 4 Dimensional Vector
   * @name vec4
   */

  var vec4 = {};

  /**
   * Creates a new, empty vec4
   *
   * @returns {vec4} a new 4D vector
   */
  vec4.create = function() {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* GLMAT_ARRAY_TYPE */](4);
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      return out;
  };

  /**
   * Creates a new vec4 initialized with values from an existing vector
   *
   * @param {vec4} a vector to clone
   * @returns {vec4} a new 4D vector
   */
  vec4.clone = function(a) {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* GLMAT_ARRAY_TYPE */](4);
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      return out;
  };

  /**
   * Creates a new vec4 initialized with the given values
   *
   * @param {Number} x X component
   * @param {Number} y Y component
   * @param {Number} z Z component
   * @param {Number} w W component
   * @returns {vec4} a new 4D vector
   */
  vec4.fromValues = function(x, y, z, w) {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* GLMAT_ARRAY_TYPE */](4);
      out[0] = x;
      out[1] = y;
      out[2] = z;
      out[3] = w;
      return out;
  };

  /**
   * Copy the values from one vec4 to another
   *
   * @param {vec4} out the receiving vector
   * @param {vec4} a the source vector
   * @returns {vec4} out
   */
  vec4.copy = function(out, a) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      return out;
  };

  /**
   * Set the components of a vec4 to the given values
   *
   * @param {vec4} out the receiving vector
   * @param {Number} x X component
   * @param {Number} y Y component
   * @param {Number} z Z component
   * @param {Number} w W component
   * @returns {vec4} out
   */
  vec4.set = function(out, x, y, z, w) {
      out[0] = x;
      out[1] = y;
      out[2] = z;
      out[3] = w;
      return out;
  };

  /**
   * Adds two vec4's
   *
   * @param {vec4} out the receiving vector
   * @param {vec4} a the first operand
   * @param {vec4} b the second operand
   * @returns {vec4} out
   */
  vec4.add = function(out, a, b) {
      out[0] = a[0] + b[0];
      out[1] = a[1] + b[1];
      out[2] = a[2] + b[2];
      out[3] = a[3] + b[3];
      return out;
  };

  /**
   * Subtracts vector b from vector a
   *
   * @param {vec4} out the receiving vector
   * @param {vec4} a the first operand
   * @param {vec4} b the second operand
   * @returns {vec4} out
   */
  vec4.subtract = function(out, a, b) {
      out[0] = a[0] - b[0];
      out[1] = a[1] - b[1];
      out[2] = a[2] - b[2];
      out[3] = a[3] - b[3];
      return out;
  };

  /**
   * Alias for {@link vec4.subtract}
   * @function
   */
  vec4.sub = vec4.subtract;

  /**
   * Multiplies two vec4's
   *
   * @param {vec4} out the receiving vector
   * @param {vec4} a the first operand
   * @param {vec4} b the second operand
   * @returns {vec4} out
   */
  vec4.multiply = function(out, a, b) {
      out[0] = a[0] * b[0];
      out[1] = a[1] * b[1];
      out[2] = a[2] * b[2];
      out[3] = a[3] * b[3];
      return out;
  };

  /**
   * Alias for {@link vec4.multiply}
   * @function
   */
  vec4.mul = vec4.multiply;

  /**
   * Divides two vec4's
   *
   * @param {vec4} out the receiving vector
   * @param {vec4} a the first operand
   * @param {vec4} b the second operand
   * @returns {vec4} out
   */
  vec4.divide = function(out, a, b) {
      out[0] = a[0] / b[0];
      out[1] = a[1] / b[1];
      out[2] = a[2] / b[2];
      out[3] = a[3] / b[3];
      return out;
  };

  /**
   * Alias for {@link vec4.divide}
   * @function
   */
  vec4.div = vec4.divide;

  /**
   * Returns the minimum of two vec4's
   *
   * @param {vec4} out the receiving vector
   * @param {vec4} a the first operand
   * @param {vec4} b the second operand
   * @returns {vec4} out
   */
  vec4.min = function(out, a, b) {
      out[0] = Math.min(a[0], b[0]);
      out[1] = Math.min(a[1], b[1]);
      out[2] = Math.min(a[2], b[2]);
      out[3] = Math.min(a[3], b[3]);
      return out;
  };

  /**
   * Returns the maximum of two vec4's
   *
   * @param {vec4} out the receiving vector
   * @param {vec4} a the first operand
   * @param {vec4} b the second operand
   * @returns {vec4} out
   */
  vec4.max = function(out, a, b) {
      out[0] = Math.max(a[0], b[0]);
      out[1] = Math.max(a[1], b[1]);
      out[2] = Math.max(a[2], b[2]);
      out[3] = Math.max(a[3], b[3]);
      return out;
  };

  /**
   * Scales a vec4 by a scalar number
   *
   * @param {vec4} out the receiving vector
   * @param {vec4} a the vector to scale
   * @param {Number} b amount to scale the vector by
   * @returns {vec4} out
   */
  vec4.scale = function(out, a, b) {
      out[0] = a[0] * b;
      out[1] = a[1] * b;
      out[2] = a[2] * b;
      out[3] = a[3] * b;
      return out;
  };

  /**
   * Adds two vec4's after scaling the second operand by a scalar value
   *
   * @param {vec4} out the receiving vector
   * @param {vec4} a the first operand
   * @param {vec4} b the second operand
   * @param {Number} scale the amount to scale b by before adding
   * @returns {vec4} out
   */
  vec4.scaleAndAdd = function(out, a, b, scale) {
      out[0] = a[0] + (b[0] * scale);
      out[1] = a[1] + (b[1] * scale);
      out[2] = a[2] + (b[2] * scale);
      out[3] = a[3] + (b[3] * scale);
      return out;
  };

  /**
   * Calculates the euclidian distance between two vec4's
   *
   * @param {vec4} a the first operand
   * @param {vec4} b the second operand
   * @returns {Number} distance between a and b
   */
  vec4.distance = function(a, b) {
      var x = b[0] - a[0],
          y = b[1] - a[1],
          z = b[2] - a[2],
          w = b[3] - a[3];
      return Math.sqrt(x*x + y*y + z*z + w*w);
  };

  /**
   * Alias for {@link vec4.distance}
   * @function
   */
  vec4.dist = vec4.distance;

  /**
   * Calculates the squared euclidian distance between two vec4's
   *
   * @param {vec4} a the first operand
   * @param {vec4} b the second operand
   * @returns {Number} squared distance between a and b
   */
  vec4.squaredDistance = function(a, b) {
      var x = b[0] - a[0],
          y = b[1] - a[1],
          z = b[2] - a[2],
          w = b[3] - a[3];
      return x*x + y*y + z*z + w*w;
  };

  /**
   * Alias for {@link vec4.squaredDistance}
   * @function
   */
  vec4.sqrDist = vec4.squaredDistance;

  /**
   * Calculates the length of a vec4
   *
   * @param {vec4} a vector to calculate length of
   * @returns {Number} length of a
   */
  vec4.length = function (a) {
      var x = a[0],
          y = a[1],
          z = a[2],
          w = a[3];
      return Math.sqrt(x*x + y*y + z*z + w*w);
  };

  /**
   * Alias for {@link vec4.length}
   * @function
   */
  vec4.len = vec4.length;

  /**
   * Calculates the squared length of a vec4
   *
   * @param {vec4} a vector to calculate squared length of
   * @returns {Number} squared length of a
   */
  vec4.squaredLength = function (a) {
      var x = a[0],
          y = a[1],
          z = a[2],
          w = a[3];
      return x*x + y*y + z*z + w*w;
  };

  /**
   * Alias for {@link vec4.squaredLength}
   * @function
   */
  vec4.sqrLen = vec4.squaredLength;

  /**
   * Negates the components of a vec4
   *
   * @param {vec4} out the receiving vector
   * @param {vec4} a vector to negate
   * @returns {vec4} out
   */
  vec4.negate = function(out, a) {
      out[0] = -a[0];
      out[1] = -a[1];
      out[2] = -a[2];
      out[3] = -a[3];
      return out;
  };

  /**
   * Returns the inverse of the components of a vec4
   *
   * @param {vec4} out the receiving vector
   * @param {vec4} a vector to invert
   * @returns {vec4} out
   */
  vec4.inverse = function(out, a) {
    out[0] = 1.0 / a[0];
    out[1] = 1.0 / a[1];
    out[2] = 1.0 / a[2];
    out[3] = 1.0 / a[3];
    return out;
  };

  /**
   * Normalize a vec4
   *
   * @param {vec4} out the receiving vector
   * @param {vec4} a vector to normalize
   * @returns {vec4} out
   */
  vec4.normalize = function(out, a) {
      var x = a[0],
          y = a[1],
          z = a[2],
          w = a[3];
      var len = x*x + y*y + z*z + w*w;
      if (len > 0) {
          len = 1 / Math.sqrt(len);
          out[0] = a[0] * len;
          out[1] = a[1] * len;
          out[2] = a[2] * len;
          out[3] = a[3] * len;
      }
      return out;
  };

  /**
   * Calculates the dot product of two vec4's
   *
   * @param {vec4} a the first operand
   * @param {vec4} b the second operand
   * @returns {Number} dot product of a and b
   */
  vec4.dot = function (a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
  };

  /**
   * Performs a linear interpolation between two vec4's
   *
   * @param {vec4} out the receiving vector
   * @param {vec4} a the first operand
   * @param {vec4} b the second operand
   * @param {Number} t interpolation amount between the two inputs
   * @returns {vec4} out
   */
  vec4.lerp = function (out, a, b, t) {
      var ax = a[0],
          ay = a[1],
          az = a[2],
          aw = a[3];
      out[0] = ax + t * (b[0] - ax);
      out[1] = ay + t * (b[1] - ay);
      out[2] = az + t * (b[2] - az);
      out[3] = aw + t * (b[3] - aw);
      return out;
  };

  /**
   * Generates a random vector with the given scale
   *
   * @param {vec4} out the receiving vector
   * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
   * @returns {vec4} out
   */
  vec4.random = function (out, scale) {
      scale = scale || 1.0;

      //TODO: This is a pretty awful way of doing this. Find something better.
      out[0] = Object(__WEBPACK_IMPORTED_MODULE_0__common__["c" /* GLMAT_RANDOM */])();
      out[1] = Object(__WEBPACK_IMPORTED_MODULE_0__common__["c" /* GLMAT_RANDOM */])();
      out[2] = Object(__WEBPACK_IMPORTED_MODULE_0__common__["c" /* GLMAT_RANDOM */])();
      out[3] = Object(__WEBPACK_IMPORTED_MODULE_0__common__["c" /* GLMAT_RANDOM */])();
      vec4.normalize(out, out);
      vec4.scale(out, out, scale);
      return out;
  };

  /**
   * Transforms the vec4 with a mat4.
   *
   * @param {vec4} out the receiving vector
   * @param {vec4} a the vector to transform
   * @param {mat4} m matrix to transform with
   * @returns {vec4} out
   */
  vec4.transformMat4 = function(out, a, m) {
      var x = a[0], y = a[1], z = a[2], w = a[3];
      out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
      out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
      out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
      out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
      return out;
  };

  /**
   * Transforms the vec4 with a quat
   *
   * @param {vec4} out the receiving vector
   * @param {vec4} a the vector to transform
   * @param {quat} q quaternion to transform with
   * @returns {vec4} out
   */
  vec4.transformQuat = function(out, a, q) {
      var x = a[0], y = a[1], z = a[2],
          qx = q[0], qy = q[1], qz = q[2], qw = q[3],

          // calculate quat * vec
          ix = qw * x + qy * z - qz * y,
          iy = qw * y + qz * x - qx * z,
          iz = qw * z + qx * y - qy * x,
          iw = -qx * x - qy * y - qz * z;

      // calculate result * inverse quat
      out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
      out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
      out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
      return out;
  };

  /**
   * Perform some operation over an array of vec4s.
   *
   * @param {Array} a the array of vectors to iterate over
   * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
   * @param {Number} offset Number of elements to skip at the beginning of the array
   * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
   * @param {Function} fn Function to call for each vector in the array
   * @param {Object} [arg] additional argument to pass to fn
   * @returns {Array} a
   * @function
   */
  vec4.forEach = (function() {
      var vec = vec4.create();

      return function(a, stride, offset, count, fn, arg) {
          var i, l;
          if(!stride) {
              stride = 4;
          }

          if(!offset) {
              offset = 0;
          }

          if(count) {
              l = Math.min((count * stride) + offset, a.length);
          } else {
              l = a.length;
          }

          for(i = offset; i < l; i += stride) {
              vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];
              fn(vec, vec, arg);
              a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];
          }

          return a;
      };
  })();

  /* harmony default export */ __webpack_exports__["a"] = (vec4);

  /***/ }),
  /* 34 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(20);

  /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, this
      list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
      and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */



  /**
   * @class 3x3 Matrix
   * @name mat3
   */

  var mat3 = {};

  /**
   * Creates a new identity mat3
   *
   * @returns {mat3} a new 3x3 matrix
   */
  mat3.create = function() {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* GLMAT_ARRAY_TYPE */](9);
      out[0] = 1;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 1;
      out[5] = 0;
      out[6] = 0;
      out[7] = 0;
      out[8] = 1;
      return out;
  };

  /**
   * Copies the upper-left 3x3 values into the given mat3.
   *
   * @param {mat3} out the receiving 3x3 matrix
   * @param {mat4} a   the source 4x4 matrix
   * @returns {mat3} out
   */
  mat3.fromMat4 = function(out, a) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[4];
      out[4] = a[5];
      out[5] = a[6];
      out[6] = a[8];
      out[7] = a[9];
      out[8] = a[10];
      return out;
  };

  /**
   * Creates a new mat3 initialized with values from an existing matrix
   *
   * @param {mat3} a matrix to clone
   * @returns {mat3} a new 3x3 matrix
   */
  mat3.clone = function(a) {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* GLMAT_ARRAY_TYPE */](9);
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      out[4] = a[4];
      out[5] = a[5];
      out[6] = a[6];
      out[7] = a[7];
      out[8] = a[8];
      return out;
  };

  /**
   * Copy the values from one mat3 to another
   *
   * @param {mat3} out the receiving matrix
   * @param {mat3} a the source matrix
   * @returns {mat3} out
   */
  mat3.copy = function(out, a) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      out[4] = a[4];
      out[5] = a[5];
      out[6] = a[6];
      out[7] = a[7];
      out[8] = a[8];
      return out;
  };

  /**
   * Set a mat3 to the identity matrix
   *
   * @param {mat3} out the receiving matrix
   * @returns {mat3} out
   */
  mat3.identity = function(out) {
      out[0] = 1;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 1;
      out[5] = 0;
      out[6] = 0;
      out[7] = 0;
      out[8] = 1;
      return out;
  };

  /**
   * Transpose the values of a mat3
   *
   * @param {mat3} out the receiving matrix
   * @param {mat3} a the source matrix
   * @returns {mat3} out
   */
  mat3.transpose = function(out, a) {
      // If we are transposing ourselves we can skip a few steps but have to cache some values
      if (out === a) {
          var a01 = a[1], a02 = a[2], a12 = a[5];
          out[1] = a[3];
          out[2] = a[6];
          out[3] = a01;
          out[5] = a[7];
          out[6] = a02;
          out[7] = a12;
      } else {
          out[0] = a[0];
          out[1] = a[3];
          out[2] = a[6];
          out[3] = a[1];
          out[4] = a[4];
          out[5] = a[7];
          out[6] = a[2];
          out[7] = a[5];
          out[8] = a[8];
      }

      return out;
  };

  /**
   * Inverts a mat3
   *
   * @param {mat3} out the receiving matrix
   * @param {mat3} a the source matrix
   * @returns {mat3} out
   */
  mat3.invert = function(out, a) {
      var a00 = a[0], a01 = a[1], a02 = a[2],
          a10 = a[3], a11 = a[4], a12 = a[5],
          a20 = a[6], a21 = a[7], a22 = a[8],

          b01 = a22 * a11 - a12 * a21,
          b11 = -a22 * a10 + a12 * a20,
          b21 = a21 * a10 - a11 * a20,

          // Calculate the determinant
          det = a00 * b01 + a01 * b11 + a02 * b21;

      if (!det) {
          return null;
      }
      det = 1.0 / det;

      out[0] = b01 * det;
      out[1] = (-a22 * a01 + a02 * a21) * det;
      out[2] = (a12 * a01 - a02 * a11) * det;
      out[3] = b11 * det;
      out[4] = (a22 * a00 - a02 * a20) * det;
      out[5] = (-a12 * a00 + a02 * a10) * det;
      out[6] = b21 * det;
      out[7] = (-a21 * a00 + a01 * a20) * det;
      out[8] = (a11 * a00 - a01 * a10) * det;
      return out;
  };

  /**
   * Calculates the adjugate of a mat3
   *
   * @param {mat3} out the receiving matrix
   * @param {mat3} a the source matrix
   * @returns {mat3} out
   */
  mat3.adjoint = function(out, a) {
      var a00 = a[0], a01 = a[1], a02 = a[2],
          a10 = a[3], a11 = a[4], a12 = a[5],
          a20 = a[6], a21 = a[7], a22 = a[8];

      out[0] = (a11 * a22 - a12 * a21);
      out[1] = (a02 * a21 - a01 * a22);
      out[2] = (a01 * a12 - a02 * a11);
      out[3] = (a12 * a20 - a10 * a22);
      out[4] = (a00 * a22 - a02 * a20);
      out[5] = (a02 * a10 - a00 * a12);
      out[6] = (a10 * a21 - a11 * a20);
      out[7] = (a01 * a20 - a00 * a21);
      out[8] = (a00 * a11 - a01 * a10);
      return out;
  };

  /**
   * Calculates the determinant of a mat3
   *
   * @param {mat3} a the source matrix
   * @returns {Number} determinant of a
   */
  mat3.determinant = function (a) {
      var a00 = a[0], a01 = a[1], a02 = a[2],
          a10 = a[3], a11 = a[4], a12 = a[5],
          a20 = a[6], a21 = a[7], a22 = a[8];

      return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
  };

  /**
   * Multiplies two mat3's
   *
   * @param {mat3} out the receiving matrix
   * @param {mat3} a the first operand
   * @param {mat3} b the second operand
   * @returns {mat3} out
   */
  mat3.multiply = function (out, a, b) {
      var a00 = a[0], a01 = a[1], a02 = a[2],
          a10 = a[3], a11 = a[4], a12 = a[5],
          a20 = a[6], a21 = a[7], a22 = a[8],

          b00 = b[0], b01 = b[1], b02 = b[2],
          b10 = b[3], b11 = b[4], b12 = b[5],
          b20 = b[6], b21 = b[7], b22 = b[8];

      out[0] = b00 * a00 + b01 * a10 + b02 * a20;
      out[1] = b00 * a01 + b01 * a11 + b02 * a21;
      out[2] = b00 * a02 + b01 * a12 + b02 * a22;

      out[3] = b10 * a00 + b11 * a10 + b12 * a20;
      out[4] = b10 * a01 + b11 * a11 + b12 * a21;
      out[5] = b10 * a02 + b11 * a12 + b12 * a22;

      out[6] = b20 * a00 + b21 * a10 + b22 * a20;
      out[7] = b20 * a01 + b21 * a11 + b22 * a21;
      out[8] = b20 * a02 + b21 * a12 + b22 * a22;
      return out;
  };

  /**
   * Alias for {@link mat3.multiply}
   * @function
   */
  mat3.mul = mat3.multiply;

  /**
   * Translate a mat3 by the given vector
   *
   * @param {mat3} out the receiving matrix
   * @param {mat3} a the matrix to translate
   * @param {vec2} v vector to translate by
   * @returns {mat3} out
   */
  mat3.translate = function(out, a, v) {
      var a00 = a[0], a01 = a[1], a02 = a[2],
          a10 = a[3], a11 = a[4], a12 = a[5],
          a20 = a[6], a21 = a[7], a22 = a[8],
          x = v[0], y = v[1];

      out[0] = a00;
      out[1] = a01;
      out[2] = a02;

      out[3] = a10;
      out[4] = a11;
      out[5] = a12;

      out[6] = x * a00 + y * a10 + a20;
      out[7] = x * a01 + y * a11 + a21;
      out[8] = x * a02 + y * a12 + a22;
      return out;
  };

  /**
   * Rotates a mat3 by the given angle
   *
   * @param {mat3} out the receiving matrix
   * @param {mat3} a the matrix to rotate
   * @param {Number} rad the angle to rotate the matrix by
   * @returns {mat3} out
   */
  mat3.rotate = function (out, a, rad) {
      var a00 = a[0], a01 = a[1], a02 = a[2],
          a10 = a[3], a11 = a[4], a12 = a[5],
          a20 = a[6], a21 = a[7], a22 = a[8],

          s = Math.sin(rad),
          c = Math.cos(rad);

      out[0] = c * a00 + s * a10;
      out[1] = c * a01 + s * a11;
      out[2] = c * a02 + s * a12;

      out[3] = c * a10 - s * a00;
      out[4] = c * a11 - s * a01;
      out[5] = c * a12 - s * a02;

      out[6] = a20;
      out[7] = a21;
      out[8] = a22;
      return out;
  };

  /**
   * Scales the mat3 by the dimensions in the given vec2
   *
   * @param {mat3} out the receiving matrix
   * @param {mat3} a the matrix to rotate
   * @param {vec2} v the vec2 to scale the matrix by
   * @returns {mat3} out
   **/
  mat3.scale = function(out, a, v) {
      var x = v[0], y = v[1];

      out[0] = x * a[0];
      out[1] = x * a[1];
      out[2] = x * a[2];

      out[3] = y * a[3];
      out[4] = y * a[4];
      out[5] = y * a[5];

      out[6] = a[6];
      out[7] = a[7];
      out[8] = a[8];
      return out;
  };

  /**
   * Copies the values from a mat2d into a mat3
   *
   * @param {mat3} out the receiving matrix
   * @param {mat2d} a the matrix to copy
   * @returns {mat3} out
   **/
  mat3.fromMat2d = function(out, a) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = 0;

      out[3] = a[2];
      out[4] = a[3];
      out[5] = 0;

      out[6] = a[4];
      out[7] = a[5];
      out[8] = 1;
      return out;
  };

  /**
  * Calculates a 3x3 matrix from the given quaternion
  *
  * @param {mat3} out mat3 receiving operation result
  * @param {quat} q Quaternion to create matrix from
  *
  * @returns {mat3} out
  */
  mat3.fromQuat = function (out, q) {
      var x = q[0], y = q[1], z = q[2], w = q[3],
          x2 = x + x,
          y2 = y + y,
          z2 = z + z,

          xx = x * x2,
          yx = y * x2,
          yy = y * y2,
          zx = z * x2,
          zy = z * y2,
          zz = z * z2,
          wx = w * x2,
          wy = w * y2,
          wz = w * z2;

      out[0] = 1 - yy - zz;
      out[3] = yx - wz;
      out[6] = zx + wy;

      out[1] = yx + wz;
      out[4] = 1 - xx - zz;
      out[7] = zy - wx;

      out[2] = zx - wy;
      out[5] = zy + wx;
      out[8] = 1 - xx - yy;

      return out;
  };

  /**
  * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
  *
  * @param {mat3} out mat3 receiving operation result
  * @param {mat4} a Mat4 to derive the normal matrix from
  *
  * @returns {mat3} out
  */
  mat3.normalFromMat4 = function (out, a) {
      var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
          a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
          a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
          a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

          b00 = a00 * a11 - a01 * a10,
          b01 = a00 * a12 - a02 * a10,
          b02 = a00 * a13 - a03 * a10,
          b03 = a01 * a12 - a02 * a11,
          b04 = a01 * a13 - a03 * a11,
          b05 = a02 * a13 - a03 * a12,
          b06 = a20 * a31 - a21 * a30,
          b07 = a20 * a32 - a22 * a30,
          b08 = a20 * a33 - a23 * a30,
          b09 = a21 * a32 - a22 * a31,
          b10 = a21 * a33 - a23 * a31,
          b11 = a22 * a33 - a23 * a32,

          // Calculate the determinant
          det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

      if (!det) {
          return null;
      }
      det = 1.0 / det;

      out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
      out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
      out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;

      out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
      out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
      out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;

      out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
      out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
      out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;

      return out;
  };

  /**
   * Returns Frobenius norm of a mat3
   *
   * @param {mat3} a the matrix to calculate Frobenius norm of
   * @returns {Number} Frobenius norm
   */
  mat3.frob = function (a) {
      return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))
  };


  /* harmony default export */ __webpack_exports__["a"] = (mat3);

  /***/ }),
  /* 35 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Base__ = __webpack_require__(8);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__math_Vector3__ = __webpack_require__(3);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math_Quaternion__ = __webpack_require__(56);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__math_Matrix4__ = __webpack_require__(7);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__glmatrix_mat4__ = __webpack_require__(21);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__math_BoundingBox__ = __webpack_require__(18);







  var nameId = 0;

  /**
   * @constructor clay.Node
   * @extends clay.core.Base
   */
  var Node = __WEBPACK_IMPORTED_MODULE_0__core_Base__["a" /* default */].extend(/** @lends clay.Node# */{
      /**
       * Scene node name
       * @type {string}
       */
      name: '',

      /**
       * Position relative to its parent node. aka translation.
       * @type {clay.Vector3}
       */
      position: null,

      /**
       * Rotation relative to its parent node. Represented by a quaternion
       * @type {clay.Quaternion}
       */
      rotation: null,

      /**
       * Scale relative to its parent node
       * @type {clay.Vector3}
       */
      scale: null,

      /**
       * Affine transform matrix relative to its root scene.
       * @type {clay.Matrix4}
       */
      worldTransform: null,

      /**
       * Affine transform matrix relative to its parent node.
       * Composited with position, rotation and scale.
       * @type {clay.Matrix4}
       */
      localTransform: null,

      /**
       * If the local transform is update from SRT(scale, rotation, translation, which is position here) each frame
       * @type {boolean}
       */
      autoUpdateLocalTransform: true,

      /**
       * Parent of current scene node
       * @type {?clay.Node}
       * @private
       */
      _parent: null,
      /**
       * The root scene mounted. Null if it is a isolated node
       * @type {?clay.Scene}
       * @private
       */
      _scene: null,
      /**
       * @type {boolean}
       * @private
       */
      _needsUpdateWorldTransform: true,
      /**
       * @type {boolean}
       * @private
       */
      _inIterating: false,

      // Depth for transparent list sorting
      __depth: 0

  }, function () {

      if (!this.name) {
          this.name = (this.type || 'NODE') + '_' + (nameId++);
      }

      if (!this.position) {
          this.position = new __WEBPACK_IMPORTED_MODULE_1__math_Vector3__["a" /* default */]();
      }
      if (!this.rotation) {
          this.rotation = new __WEBPACK_IMPORTED_MODULE_2__math_Quaternion__["a" /* default */]();
      }
      if (!this.scale) {
          this.scale = new __WEBPACK_IMPORTED_MODULE_1__math_Vector3__["a" /* default */](1, 1, 1);
      }

      this.worldTransform = new __WEBPACK_IMPORTED_MODULE_3__math_Matrix4__["a" /* default */]();
      this.localTransform = new __WEBPACK_IMPORTED_MODULE_3__math_Matrix4__["a" /* default */]();

      this._children = [];

  },
  /**@lends clay.Node.prototype. */
  {

      /**
       * @type {?clay.Vector3}
       * @instance
       */
      target: null,
      /**
       * If node and its chilren invisible
       * @type {boolean}
       * @instance
       */
      invisible: false,

      /**
       * If Node is a skinned mesh
       * @return {boolean}
       */
      isSkinnedMesh: function () {
          return false;
      },
      /**
       * Return true if it is a renderable scene node, like Mesh and ParticleSystem
       * @return {boolean}
       */
      isRenderable: function () {
          return false;
      },

      /**
       * Set the name of the scene node
       * @param {string} name
       */
      setName: function (name) {
          var scene = this._scene;
          if (scene) {
              var nodeRepository = scene._nodeRepository;
              delete nodeRepository[this.name];
              nodeRepository[name] = this;
          }
          this.name = name;
      },

      /**
       * Add a child node
       * @param {clay.Node} node
       */
      add: function (node) {
          var originalParent = node._parent;
          if (originalParent === this) {
              return;
          }
          if (originalParent) {
              originalParent.remove(node);
          }
          node._parent = this;
          this._children.push(node);

          var scene = this._scene;
          if (scene && scene !== node.scene) {
              node.traverse(this._addSelfToScene, this);
          }
          // Mark children needs update transform
          // In case child are remove and added again after parent moved
          node._needsUpdateWorldTransform = true;
      },

      /**
       * Remove the given child scene node
       * @param {clay.Node} node
       */
      remove: function (node) {
          var children = this._children;
          var idx = children.indexOf(node);
          if (idx < 0) {
              return;
          }

          children.splice(idx, 1);
          node._parent = null;

          if (this._scene) {
              node.traverse(this._removeSelfFromScene, this);
          }
      },

      /**
       * Remove all children
       */
      removeAll: function () {
          var children = this._children;

          for (var idx = 0; idx < children.length; idx++) {
              children[idx]._parent = null;

              if (this._scene) {
                  children[idx].traverse(this._removeSelfFromScene, this);
              }
          }

          this._children = [];
      },

      /**
       * Get the scene mounted
       * @return {clay.Scene}
       */
      getScene: function () {
          return this._scene;
      },

      /**
       * Get parent node
       * @return {clay.Scene}
       */
      getParent: function () {
          return this._parent;
      },

      _removeSelfFromScene: function (descendant) {
          descendant._scene.removeFromScene(descendant);
          descendant._scene = null;
      },

      _addSelfToScene: function (descendant) {
          this._scene.addToScene(descendant);
          descendant._scene = this._scene;
      },

      /**
       * Return true if it is ancestor of the given scene node
       * @param {clay.Node} node
       */
      isAncestor: function (node) {
          var parent = node._parent;
          while(parent) {
              if (parent === this) {
                  return true;
              }
              parent = parent._parent;
          }
          return false;
      },

      /**
       * Get a new created array of all children nodes
       * @return {clay.Node[]}
       */
      children: function () {
          return this._children.slice();
      },

      /**
       * Get child scene node at given index.
       * @param {number} idx
       * @return {clay.Node}
       */
      childAt: function (idx) {
          return this._children[idx];
      },

      /**
       * Get first child with the given name
       * @param {string} name
       * @return {clay.Node}
       */
      getChildByName: function (name) {
          var children = this._children;
          for (var i = 0; i < children.length; i++) {
              if (children[i].name === name) {
                  return children[i];
              }
          }
      },

      /**
       * Get first descendant have the given name
       * @param {string} name
       * @return {clay.Node}
       */
      getDescendantByName: function (name) {
          var children = this._children;
          for (var i = 0; i < children.length; i++) {
              var child = children[i];
              if (child.name === name) {
                  return child;
              } else {
                  var res = child.getDescendantByName(name);
                  if (res) {
                      return res;
                  }
              }
          }
      },

      /**
       * Query descendant node by path
       * @param {string} path
       * @return {clay.Node}
       * @example
       *  node.queryNode('root/parent/child');
       */
      queryNode: function (path) {
          if (!path) {
              return;
          }
          // TODO Name have slash ?
          var pathArr = path.split('/');
          var current = this;
          for (var i = 0; i < pathArr.length; i++) {
              var name = pathArr[i];
              // Skip empty
              if (!name) {
                  continue;
              }
              var found = false;
              var children = current._children;
              for (var j = 0; j < children.length; j++) {
                  var child = children[j];
                  if (child.name === name) {
                      current = child;
                      found = true;
                      break;
                  }
              }
              // Early return if not found
              if (!found) {
                  return;
              }
          }

          return current;
      },

      /**
       * Get query path, relative to rootNode(default is scene)
       * @param {clay.Node} [rootNode]
       * @return {string}
       */
      getPath: function (rootNode) {
          if (!this._parent) {
              return '/';
          }

          var current = this._parent;
          var path = this.name;
          while (current._parent) {
              path = current.name + '/' + path;
              if (current._parent == rootNode) {
                  break;
              }
              current = current._parent;
          }
          if (!current._parent && rootNode) {
              return null;
          }
          return path;
      },

      /**
       * Depth first traverse all its descendant scene nodes.
       *
       * **WARN** Don't do `add`, `remove` operation in the callback during traverse.
       * @param {Function} callback
       * @param {Node} [context]
       */
      traverse: function (callback, context) {
          callback.call(context, this);
          var _children = this._children;
          for(var i = 0, len = _children.length; i < len; i++) {
              _children[i].traverse(callback, context);
          }
      },

      /**
       * Traverse all children nodes.
       *
       * **WARN** DON'T do `add`, `remove` operation in the callback during iteration.
       *
       * @param {Function} callback
       * @param {Node} [context]
       */
      eachChild: function (callback, context) {
          var _children = this._children;
          for(var i = 0, len = _children.length; i < len; i++) {
              var child = _children[i];
              callback.call(context, child, i);
          }
      },

      /**
       * Set the local transform and decompose to SRT
       * @param {clay.Matrix4} matrix
       */
      setLocalTransform: function (matrix) {
          __WEBPACK_IMPORTED_MODULE_4__glmatrix_mat4__["a" /* default */].copy(this.localTransform.array, matrix.array);
          this.decomposeLocalTransform();
      },

      /**
       * Decompose the local transform to SRT
       */
      decomposeLocalTransform: function (keepScale) {
          var scale = !keepScale ? this.scale: null;
          this.localTransform.decomposeMatrix(scale, this.rotation, this.position);
      },

      /**
       * Set the world transform and decompose to SRT
       * @param {clay.Matrix4} matrix
       */
      setWorldTransform: function (matrix) {
          __WEBPACK_IMPORTED_MODULE_4__glmatrix_mat4__["a" /* default */].copy(this.worldTransform.array, matrix.array);
          this.decomposeWorldTransform();
      },

      /**
       * Decompose the world transform to SRT
       * @function
       */
      decomposeWorldTransform: (function () {

          var tmp = __WEBPACK_IMPORTED_MODULE_4__glmatrix_mat4__["a" /* default */].create();

          return function (keepScale) {
              var localTransform = this.localTransform;
              var worldTransform = this.worldTransform;
              // Assume world transform is updated
              if (this._parent) {
                  __WEBPACK_IMPORTED_MODULE_4__glmatrix_mat4__["a" /* default */].invert(tmp, this._parent.worldTransform.array);
                  __WEBPACK_IMPORTED_MODULE_4__glmatrix_mat4__["a" /* default */].multiply(localTransform.array, tmp, worldTransform.array);
              } else {
                  __WEBPACK_IMPORTED_MODULE_4__glmatrix_mat4__["a" /* default */].copy(localTransform.array, worldTransform.array);
              }
              var scale = !keepScale ? this.scale: null;
              localTransform.decomposeMatrix(scale, this.rotation, this.position);
          };
      })(),

      transformNeedsUpdate: function () {
          return this.position._dirty
              || this.rotation._dirty
              || this.scale._dirty;
      },

      /**
       * Update local transform from SRT
       * Notice that local transform will not be updated if _dirty mark of position, rotation, scale is all false
       */
      updateLocalTransform: function () {
          var position = this.position;
          var rotation = this.rotation;
          var scale = this.scale;

          if (this.transformNeedsUpdate()) {
              var m = this.localTransform.array;

              // Transform order, scale->rotation->position
              __WEBPACK_IMPORTED_MODULE_4__glmatrix_mat4__["a" /* default */].fromRotationTranslation(m, rotation.array, position.array);

              __WEBPACK_IMPORTED_MODULE_4__glmatrix_mat4__["a" /* default */].scale(m, m, scale.array);

              rotation._dirty = false;
              scale._dirty = false;
              position._dirty = false;

              this._needsUpdateWorldTransform = true;
          }
      },

      /**
       * Update world transform, assume its parent world transform have been updated
       * @private
       */
      _updateWorldTransformTopDown: function () {
          var localTransform = this.localTransform.array;
          var worldTransform = this.worldTransform.array;
          if (this._parent) {
              __WEBPACK_IMPORTED_MODULE_4__glmatrix_mat4__["a" /* default */].multiplyAffine(
                  worldTransform,
                  this._parent.worldTransform.array,
                  localTransform
              );
          }
          else {
              __WEBPACK_IMPORTED_MODULE_4__glmatrix_mat4__["a" /* default */].copy(worldTransform, localTransform);
          }
      },

      /**
       * Update world transform before whole scene is updated.
       */
      updateWorldTransform: function () {
          // Find the root node which transform needs update;
          var rootNodeIsDirty = this;
          while (rootNodeIsDirty && rootNodeIsDirty.getParent()
              && rootNodeIsDirty.getParent().transformNeedsUpdate()
          ) {
              rootNodeIsDirty = rootNodeIsDirty.getParent();
          }
          rootNodeIsDirty.update();
      },

      /**
       * Update local transform and world transform recursively
       * @param {boolean} forceUpdateWorld
       */
      update: function (forceUpdateWorld) {
          if (this.autoUpdateLocalTransform) {
              this.updateLocalTransform();
          }
          else {
              // Transform is manually setted
              forceUpdateWorld = true;
          }

          if (forceUpdateWorld || this._needsUpdateWorldTransform) {
              this._updateWorldTransformTopDown();
              forceUpdateWorld = true;
              this._needsUpdateWorldTransform = false;
          }

          var children = this._children;
          for(var i = 0, len = children.length; i < len; i++) {
              children[i].update(forceUpdateWorld);
          }
      },

      /**
       * Get bounding box of node
       * @param  {Function} [filter]
       * @param  {clay.BoundingBox} [out]
       * @return {clay.BoundingBox}
       */
      // TODO Skinning
      getBoundingBox: (function () {
          function defaultFilter (el) {
              return !el.invisible && el.geometry;
          }
          var tmpBBox = new __WEBPACK_IMPORTED_MODULE_5__math_BoundingBox__["a" /* default */]();
          var tmpMat4 = new __WEBPACK_IMPORTED_MODULE_3__math_Matrix4__["a" /* default */]();
          var invWorldTransform = new __WEBPACK_IMPORTED_MODULE_3__math_Matrix4__["a" /* default */]();
          return function (filter, out) {
              out = out || new __WEBPACK_IMPORTED_MODULE_5__math_BoundingBox__["a" /* default */]();

              if (this._parent) {
                  __WEBPACK_IMPORTED_MODULE_3__math_Matrix4__["a" /* default */].invert(invWorldTransform, this._parent.worldTransform);
              }
              else {
                  __WEBPACK_IMPORTED_MODULE_3__math_Matrix4__["a" /* default */].identity(invWorldTransform);
              }

              this.traverse(function (mesh) {
                  if (mesh.geometry && mesh.geometry.boundingBox) {
                      tmpBBox.copy(mesh.geometry.boundingBox);
                      __WEBPACK_IMPORTED_MODULE_3__math_Matrix4__["a" /* default */].multiply(tmpMat4, invWorldTransform, mesh.worldTransform);
                      tmpBBox.applyTransform(tmpMat4);
                      out.union(tmpBBox);
                  }
              }, this, defaultFilter);

              return out;
          };
      })(),

      /**
       * Get world position, extracted from world transform
       * @param  {clay.Vector3} [out]
       * @return {clay.Vector3}
       */
      getWorldPosition: function (out) {
          // PENDING
          if (this.transformNeedsUpdate()) {
              this.updateWorldTransform();
          }
          var m = this.worldTransform.array;
          if (out) {
              var arr = out.array;
              arr[0] = m[12];
              arr[1] = m[13];
              arr[2] = m[14];
              return out;
          }
          else {
              return new __WEBPACK_IMPORTED_MODULE_1__math_Vector3__["a" /* default */](m[12], m[13], m[14]);
          }
      },

      /**
       * Clone a new node
       * @return {Node}
       */
      clone: function () {
          var node = new this.constructor();

          var children = this._children;

          node.setName(this.name);
          node.position.copy(this.position);
          node.rotation.copy(this.rotation);
          node.scale.copy(this.scale);

          for (var i = 0; i < children.length; i++) {
              node.add(children[i].clone());
          }

          return node;
      },

      /**
       * Rotate the node around a axis by angle degrees, axis passes through point
       * @param {clay.Vector3} point Center point
       * @param {clay.Vector3} axis  Center axis
       * @param {number}       angle Rotation angle
       * @see http://docs.unity3d.com/Documentation/ScriptReference/Transform.RotateAround.html
       * @function
       */
      rotateAround: (function () {
          var v = new __WEBPACK_IMPORTED_MODULE_1__math_Vector3__["a" /* default */]();
          var RTMatrix = new __WEBPACK_IMPORTED_MODULE_3__math_Matrix4__["a" /* default */]();

          // TODO improve performance
          return function (point, axis, angle) {

              v.copy(this.position).subtract(point);

              var localTransform = this.localTransform;
              localTransform.identity();
              // parent node
              localTransform.translate(point);
              localTransform.rotate(angle, axis);

              RTMatrix.fromRotationTranslation(this.rotation, v);
              localTransform.multiply(RTMatrix);
              localTransform.scale(this.scale);

              this.decomposeLocalTransform();
              this._needsUpdateWorldTransform = true;
          };
      })(),

      /**
       * @param {clay.Vector3} target
       * @param {clay.Vector3} [up]
       * @see http://www.opengl.org/sdk/docs/man2/xhtml/gluLookAt.xml
       * @function
       */
      lookAt: (function () {
          var m = new __WEBPACK_IMPORTED_MODULE_3__math_Matrix4__["a" /* default */]();
          return function (target, up) {
              m.lookAt(this.position, target, up || this.localTransform.y).invert();
              this.setLocalTransform(m);

              this.target = target;
          };
      })()
  });

  /* harmony default export */ __webpack_exports__["a"] = (Node);


  /***/ }),
  /* 36 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Node__ = __webpack_require__(35);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Light__ = __webpack_require__(24);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Camera__ = __webpack_require__(58);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__math_BoundingBox__ = __webpack_require__(18);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_util__ = __webpack_require__(23);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__glmatrix_mat4__ = __webpack_require__(21);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_LRU__ = __webpack_require__(68);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__math_Matrix4__ = __webpack_require__(7);









  var IDENTITY = __WEBPACK_IMPORTED_MODULE_5__glmatrix_mat4__["a" /* default */].create();
  var WORLDVIEW = __WEBPACK_IMPORTED_MODULE_5__glmatrix_mat4__["a" /* default */].create();

  var programKeyCache = {};

  function getProgramKey(lightNumbers) {
      var defineStr = [];
      var lightTypes = Object.keys(lightNumbers);
      lightTypes.sort();
      for (var i = 0; i < lightTypes.length; i++) {
          var lightType = lightTypes[i];
          defineStr.push(lightType + ' ' + lightNumbers[lightType]);
      }
      var key = defineStr.join('\n');

      if (programKeyCache[key]) {
          return programKeyCache[key];
      }

      var id = __WEBPACK_IMPORTED_MODULE_4__core_util__["a" /* default */].genGUID();
      programKeyCache[key] = id;
      return id;
  }

  function RenderList() {

      this.opaque = [];
      this.transparent = [];

      this._opaqueCount = 0;
      this._transparentCount = 0;
  }

  RenderList.prototype.startCount = function () {
      this._opaqueCount = 0;
      this._transparentCount = 0;
  };

  RenderList.prototype.add = function (object, isTransparent) {
      if (isTransparent) {
          this.transparent[this._transparentCount++] = object;
      }
      else {
          this.opaque[this._opaqueCount++] = object;
      }
  };

  RenderList.prototype.endCount = function () {
      this.transparent.length = this._transparentCount;
      this.opaque.length = this._opaqueCount;
  };

  /**
   * @typedef {Object} clay.Scene.RenderList
   * @property {Array.<clay.Renderable>} opaque
   * @property {Array.<clay.Renderable>} transparent
   */

  /**
   * @constructor clay.Scene
   * @extends clay.Node
   */
  var Scene = __WEBPACK_IMPORTED_MODULE_0__Node__["a" /* default */].extend(function () {
      return /** @lends clay.Scene# */ {
          /**
           * Global material of scene
           * @type {clay.Material}
           */
          material: null,

          lights: [],

          /**
           * Scene bounding box in view space.
           * Used when camera needs to adujst the near and far plane automatically
           * so that the view frustum contains the visible objects as tightly as possible.
           * Notice:
           *  It is updated after rendering (in the step of frustum culling passingly). So may be not so accurate, but saves a lot of calculation
           *
           * @type {clay.BoundingBox}
           */
          viewBoundingBoxLastFrame: new __WEBPACK_IMPORTED_MODULE_3__math_BoundingBox__["a" /* default */](),

          // Uniforms for shadow map.
          shadowUniforms: {},

          _cameraList: [],

          // Properties to save the light information in the scene
          // Will be set in the render function
          _lightUniforms: {},

          _previousLightNumber: {},

          _lightNumber: {
              // groupId: {
                  // POINT_LIGHT: 0,
                  // DIRECTIONAL_LIGHT: 0,
                  // SPOT_LIGHT: 0,
                  // AMBIENT_LIGHT: 0,
                  // AMBIENT_SH_LIGHT: 0
              // }
          },

          _lightProgramKeys: {},

          _nodeRepository: {},

          _renderLists: new __WEBPACK_IMPORTED_MODULE_6__core_LRU__["a" /* default */](20)

      };
  }, function () {
      this._scene = this;
  },
  /** @lends clay.Scene.prototype. */
  {

      // Add node to scene
      addToScene: function (node) {
          if (node instanceof __WEBPACK_IMPORTED_MODULE_2__Camera__["a" /* default */]) {
              if (this._cameraList.length > 0) {
                  console.warn('Found multiple camera in one scene. Use the fist one.');
              }
              this._cameraList.push(node);
          }
          else if (node instanceof __WEBPACK_IMPORTED_MODULE_1__Light__["a" /* default */]) {
              this.lights.push(node);
          }
          if (node.name) {
              this._nodeRepository[node.name] = node;
          }
      },

      // Remove node from scene
      removeFromScene: function (node) {
          var idx;
          if (node instanceof __WEBPACK_IMPORTED_MODULE_2__Camera__["a" /* default */]) {
              idx = this._cameraList.indexOf(node);
              if (idx >= 0) {
                  this._cameraList.splice(idx, 1);
              }
          }
          else if (node instanceof __WEBPACK_IMPORTED_MODULE_1__Light__["a" /* default */]) {
              idx = this.lights.indexOf(node);
              if (idx >= 0) {
                  this.lights.splice(idx, 1);
              }
          }
          if (node.name) {
              delete this._nodeRepository[node.name];
          }
      },

      /**
       * Get node by name
       * @param  {string} name
       * @return {Node}
       * @DEPRECATED
       */
      getNode: function (name) {
          return this._nodeRepository[name];
      },

      /**
       * Set main camera of the scene.
       * @param {claygl.Camera} camera
       */
      setMainCamera: function (camera) {
          var idx = this._cameraList.indexOf(camera);
          if (idx >= 0) {
              this._cameraList.splice(idx, 1);
          }
          this._cameraList.unshift(camera);
      },
      /**
       * Get main camera of the scene.
       */
      getMainCamera: function () {
          return this._cameraList[0];
      },

      getLights: function () {
          return this.lights;
      },

      updateLights: function () {
          var lights = this.lights;
          this._previousLightNumber = this._lightNumber;

          var lightNumber = {};
          for (var i = 0; i < lights.length; i++) {
              var light = lights[i];
              if (light.invisible) {
                  continue;
              }
              var group = light.group;
              if (!lightNumber[group]) {
                  lightNumber[group] = {};
              }
              // User can use any type of light
              lightNumber[group][light.type] = lightNumber[group][light.type] || 0;
              lightNumber[group][light.type]++;
          }
          this._lightNumber = lightNumber;

          for (var groupId in lightNumber) {
              this._lightProgramKeys[groupId] = getProgramKey(lightNumber[groupId]);
          }

          this._updateLightUniforms();
      },

      /**
       * Clone a node and it's children, including mesh, camera, light, etc.
       * Unlike using `Node#clone`. It will clone skeleton and remap the joints. Material will also be cloned.
       *
       * @param {clay.Node} node
       * @return {clay.Node}
       */
      cloneNode: function (node) {
          var newNode = node.clone();
          var clonedNodesMap = {};
          function buildNodesMap(sNode, tNode) {
              clonedNodesMap[sNode.__uid__] = tNode;

              for (var i = 0; i < sNode._children.length; i++) {
                  var sChild = sNode._children[i];
                  var tChild = tNode._children[i];
                  buildNodesMap(sChild, tChild);
              }
          }
          buildNodesMap(node, newNode);

          newNode.traverse(function (newChild) {
              if (newChild.skeleton) {
                  newChild.skeleton = newChild.skeleton.clone(clonedNodesMap);
              }
              if (newChild.material) {
                  newChild.material = newChild.material.clone();
              }
          });

          return newNode;
      },

      /**
       * Traverse the scene and add the renderable object to the render list.
       * It needs camera for the frustum culling.
       *
       * @param {clay.Camera} camera
       * @param {boolean} updateSceneBoundingBox
       * @return {clay.Scene.RenderList}
       */
      updateRenderList: function (camera, updateSceneBoundingBox) {
          var id = camera.__uid__;
          var renderList = this._renderLists.get(id);
          if (!renderList) {
              renderList = new RenderList();
              this._renderLists.put(id, renderList);
          }
          renderList.startCount();

          if (updateSceneBoundingBox) {
              this.viewBoundingBoxLastFrame.min.set(Infinity, Infinity, Infinity);
              this.viewBoundingBoxLastFrame.max.set(-Infinity, -Infinity, -Infinity);
          }

          var sceneMaterialTransparent = this.material && this.material.transparent || false;
          this._doUpdateRenderList(this, camera, sceneMaterialTransparent, renderList, updateSceneBoundingBox);

          renderList.endCount();

          return renderList;
      },

      /**
       * Get render list. Used after {@link clay.Scene#updateRenderList}
       * @param {clay.Camera} camera
       * @return {clay.Scene.RenderList}
       */
      getRenderList: function (camera) {
          return this._renderLists.get(camera.__uid__);
      },

      _doUpdateRenderList: function (parent, camera, sceneMaterialTransparent, renderList, updateSceneBoundingBox) {
          if (parent.invisible) {
              return;
          }
          // TODO Optimize
          for (var i = 0; i < parent._children.length; i++) {
              var child = parent._children[i];

              if (child.isRenderable()) {
                  // Frustum culling
                  var worldM = child.isSkinnedMesh() ? IDENTITY : child.worldTransform.array;
                  var geometry = child.geometry;

                  __WEBPACK_IMPORTED_MODULE_5__glmatrix_mat4__["a" /* default */].multiplyAffine(WORLDVIEW, camera.viewMatrix.array, worldM);
                  if (updateSceneBoundingBox && !geometry.boundingBox || !this.isFrustumCulled(child, camera, WORLDVIEW)) {
                      renderList.add(child, child.material.transparent || sceneMaterialTransparent);
                  }
              }
              if (child._children.length > 0) {
                  this._doUpdateRenderList(child, camera, sceneMaterialTransparent, renderList, updateSceneBoundingBox);
              }
          }
      },

      /**
       * If an scene object is culled by camera frustum
       *
       * Object can be a renderable or a light
       *
       * @param {clay.Node} object
       * @param {clay.Camera} camera
       * @param {Array.<number>} worldViewMat represented with array
       * @param {Array.<number>} projectionMat represented with array
       */
      isFrustumCulled: (function () {
          // Frustum culling
          // http://www.cse.chalmers.se/~uffe/vfc_bbox.pdf
          var cullingBoundingBox = new __WEBPACK_IMPORTED_MODULE_3__math_BoundingBox__["a" /* default */]();
          var cullingMatrix = new __WEBPACK_IMPORTED_MODULE_7__math_Matrix4__["a" /* default */]();
          return function(object, camera, worldViewMat) {
              // Bounding box can be a property of object(like light) or renderable.geometry
              // PENDING
              var geoBBox = object.boundingBox;
              if (!geoBBox) {
                  if (object.skeleton && object.skeleton.boundingBox) {
                      geoBBox = object.skeleton.boundingBox;
                  }
                  else {
                      geoBBox = object.geometry.boundingBox;
                  }
              }

              if (!geoBBox) {
                  return false;
              }

              cullingMatrix.array = worldViewMat;
              cullingBoundingBox.transformFrom(geoBBox, cullingMatrix);

              // Passingly update the scene bounding box
              // FIXME exclude very large mesh like ground plane or terrain ?
              // FIXME Only rendererable which cast shadow ?

              // FIXME boundingBox becomes much larger after transformd.
              if (object.castShadow) {
                  this.viewBoundingBoxLastFrame.union(cullingBoundingBox);
              }
              // Ignore frustum culling if object is skinned mesh.
              if (object.frustumCulling)  {
                  if (!cullingBoundingBox.intersectBoundingBox(camera.frustum.boundingBox)) {
                      return true;
                  }

                  cullingMatrix.array = camera.projectionMatrix.array;
                  if (
                      cullingBoundingBox.max.array[2] > 0 &&
                      cullingBoundingBox.min.array[2] < 0
                  ) {
                      // Clip in the near plane
                      cullingBoundingBox.max.array[2] = -1e-20;
                  }

                  cullingBoundingBox.applyProjection(cullingMatrix);

                  var min = cullingBoundingBox.min.array;
                  var max = cullingBoundingBox.max.array;

                  if (
                      max[0] < -1 || min[0] > 1
                      || max[1] < -1 || min[1] > 1
                      || max[2] < -1 || min[2] > 1
                  ) {
                      return true;
                  }
              }

              return false;
          };
      })(),

      _updateLightUniforms: function () {
          var lights = this.lights;
          // Put the light cast shadow before the light not cast shadow
          lights.sort(lightSortFunc);

          var lightUniforms = this._lightUniforms;
          for (var group in lightUniforms) {
              for (var symbol in lightUniforms[group]) {
                  lightUniforms[group][symbol].value.length = 0;
              }
          }
          for (var i = 0; i < lights.length; i++) {

              var light = lights[i];

              if (light.invisible) {
                  continue;
              }

              var group = light.group;

              for (var symbol in light.uniformTemplates) {
                  var uniformTpl = light.uniformTemplates[symbol];
                  var value = uniformTpl.value(light);
                  if (value == null) {
                      continue;
                  }
                  if (!lightUniforms[group]) {
                      lightUniforms[group] = {};
                  }
                  if (!lightUniforms[group][symbol]) {
                      lightUniforms[group][symbol] = {
                          type: '',
                          value: []
                      };
                  }
                  var lu = lightUniforms[group][symbol];
                  lu.type = uniformTpl.type + 'v';
                  switch (uniformTpl.type) {
                      case '1i':
                      case '1f':
                      case 't':
                          lu.value.push(value);
                          break;
                      case '2f':
                      case '3f':
                      case '4f':
                          for (var j = 0; j < value.length; j++) {
                              lu.value.push(value[j]);
                          }
                          break;
                      default:
                          console.error('Unkown light uniform type ' + uniformTpl.type);
                  }
              }
          }
      },

      getLightGroups: function () {
          var lightGroups = [];
          for (var groupId in this._lightNumber) {
              lightGroups.push(groupId);
          }
          return lightGroups;
      },

      getNumberChangedLightGroups: function () {
          var lightGroups = [];
          for (var groupId in this._lightNumber) {
              if (this.isLightNumberChanged(groupId)) {
                  lightGroups.push(groupId);
              }
          }
          return lightGroups;
      },

      // Determine if light group is different with since last frame
      // Used to determine whether to update shader and scene's uniforms in Renderer.render
      isLightNumberChanged: function (lightGroup) {
          var prevLightNumber = this._previousLightNumber;
          var currentLightNumber = this._lightNumber;
          // PENDING Performance
          for (var type in currentLightNumber[lightGroup]) {
              if (!prevLightNumber[lightGroup]) {
                  return true;
              }
              if (currentLightNumber[lightGroup][type] !== prevLightNumber[lightGroup][type]) {
                  return true;
              }
          }
          for (var type in prevLightNumber[lightGroup]) {
              if (!currentLightNumber[lightGroup]) {
                  return true;
              }
              if (currentLightNumber[lightGroup][type] !== prevLightNumber[lightGroup][type]) {
                  return true;
              }
          }
          return false;
      },

      getLightsNumbers: function (lightGroup) {
          return this._lightNumber[lightGroup];
      },

      getProgramKey: function (lightGroup) {
          return this._lightProgramKeys[lightGroup];
      },

      setLightUniforms: (function () {
          function setUniforms(uniforms, program, renderer) {
              for (var symbol in uniforms) {
                  var lu = uniforms[symbol];
                  if (lu.type === 'tv') {
                      if (!program.hasUniform(symbol)) {
                          continue;
                      }
                      var texSlots = [];
                      for (var i = 0; i < lu.value.length; i++) {
                          var texture = lu.value[i];
                          var slot = program.takeCurrentTextureSlot(renderer, texture);
                          texSlots.push(slot);
                      }
                      program.setUniform(renderer.gl, '1iv', symbol, texSlots);
                  }
                  else {
                      program.setUniform(renderer.gl, lu.type, symbol, lu.value);
                  }
              }
          }

          return function (program, lightGroup, renderer) {
              setUniforms(this._lightUniforms[lightGroup], program, renderer);
              // Set shadows
              setUniforms(this.shadowUniforms, program, renderer);
          };
      })(),

      /**
       * Dispose self, clear all the scene objects
       * But resources of gl like texuture, shader will not be disposed.
       * Mostly you should use disposeScene method in Renderer to do dispose.
       */
      dispose: function () {
          this.material = null;
          this._opaqueList = [];
          this._transparentList = [];

          this.lights = [];

          this._lightUniforms = {};

          this._lightNumber = {};
          this._nodeRepository = {};
      }
  });

  function lightSortFunc(a, b) {
      if (b.castShadow && !a.castShadow) {
          return true;
      }
  }

  /* harmony default export */ __webpack_exports__["a"] = (Scene);


  /***/ }),
  /* 37 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Camera__ = __webpack_require__(58);


  /**
   * @constructor clay.camera.Perspective
   * @extends clay.Camera
   */
  var Perspective = __WEBPACK_IMPORTED_MODULE_0__Camera__["a" /* default */].extend(/** @lends clay.camera.Perspective# */{
      /**
       * Vertical field of view in degrees
       * @type {number}
       */
      fov: 50,
      /**
       * Aspect ratio, typically viewport width / height
       * @type {number}
       */
      aspect: 1,
      /**
       * Near bound of the frustum
       * @type {number}
       */
      near: 0.1,
      /**
       * Far bound of the frustum
       * @type {number}
       */
      far: 2000
  },
  /** @lends clay.camera.Perspective.prototype */
  {

      updateProjectionMatrix: function() {
          var rad = this.fov / 180 * Math.PI;
          this.projectionMatrix.perspective(rad, this.aspect, this.near, this.far);
      },
      decomposeProjectionMatrix: function () {
          var m = this.projectionMatrix.array;
          var rad = Math.atan(1 / m[5]) * 2;
          this.fov = rad / Math.PI * 180;
          this.aspect = m[5] / m[0];
          this.near = m[14] / (m[10] - 1);
          this.far = m[14] / (m[10] + 1);
      },
      /**
       * @return {clay.camera.Perspective}
       */
      clone: function() {
          var camera = __WEBPACK_IMPORTED_MODULE_0__Camera__["a" /* default */].prototype.clone.call(this);
          camera.fov = this.fov;
          camera.aspect = this.aspect;
          camera.near = this.near;
          camera.far = this.far;

          return camera;
      }
  });

  /* harmony default export */ __webpack_exports__["a"] = (Perspective);


  /***/ }),
  /* 38 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Camera__ = __webpack_require__(58);

  /**
   * @constructor clay.camera.Orthographic
   * @extends clay.Camera
   */
  var Orthographic = __WEBPACK_IMPORTED_MODULE_0__Camera__["a" /* default */].extend(
  /** @lends clay.camera.Orthographic# */
  {
      /**
       * @type {number}
       */
      left: -1,
      /**
       * @type {number}
       */
      right: 1,
      /**
       * @type {number}
       */
      near: -1,
      /**
       * @type {number}
       */
      far: 1,
      /**
       * @type {number}
       */
      top: 1,
      /**
       * @type {number}
       */
      bottom: -1
  },
  /** @lends clay.camera.Orthographic.prototype */
  {

      updateProjectionMatrix: function() {
          this.projectionMatrix.ortho(this.left, this.right, this.bottom, this.top, this.near, this.far);
      },

      decomposeProjectionMatrix: function () {
          var m = this.projectionMatrix.array;
          this.left = (-1 - m[12]) / m[0];
          this.right = (1 - m[12]) / m[0];
          this.top = (1 - m[13]) / m[5];
          this.bottom = (-1 - m[13]) / m[5];
          this.near = -(-1 - m[14]) / m[10];
          this.far = -(1 - m[14]) / m[10];
      },
      /**
       * @return {clay.camera.Orthographic}
       */
      clone: function() {
          var camera = __WEBPACK_IMPORTED_MODULE_0__Camera__["a" /* default */].prototype.clone.call(this);
          camera.left = this.left;
          camera.right = this.right;
          camera.near = this.near;
          camera.far = this.far;
          camera.top = this.top;
          camera.bottom = this.bottom;

          return camera;
      }
  });

  /* harmony default export */ __webpack_exports__["a"] = (Orthographic);


  /***/ }),
  /* 39 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ({
      convertToDynamicArray: function (clear) {
          if (clear) {
              this.resetOffset();
          }
          var attributes = this.attributes;
          for (var name in attributes) {
              if (clear || !attributes[name].value) {
                  attributes[name].value = [];
              }
              else {
                  attributes[name].value = Array.prototype.slice.call(attributes[name].value);
              }
          }
          if (clear || !this.indices) {
              this.indices = [];
          }
          else {
              this.indices = Array.prototype.slice.call(this.indices);
          }
      },

      convertToTypedArray: function () {
          var attributes = this.attributes;
          for (var name in attributes) {
              if (attributes[name].value && attributes[name].value.length > 0) {
                  attributes[name].value = new Float32Array(attributes[name].value);
              }
              else {
                  attributes[name].value = null;
              }
          }
          if (this.indices && this.indices.length > 0) {
              this.indices = this.vertexCount > 0xffff ? new Uint32Array(this.indices) : new Uint16Array(this.indices);
          }

          this.dirty();
      }
  });

  /***/ }),
  /* 40 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);


  function otherDimToDataDim (data, otherDim) {
      var dataDim = [];
      __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.each(data.dimensions, function (dimName) {
          var dimItem = data.getDimensionInfo(dimName);
          var otherDims = dimItem.otherDims;
          var dimIndex = otherDims[otherDim];
          if (dimIndex != null && dimIndex !== false) {
              dataDim[dimIndex] = dimItem.name;
          }
      });
      return dataDim;
  }

  /* harmony default export */ __webpack_exports__["a"] = (function (seriesModel, dataIndex, multipleSeries) {
      function formatArrayValue(value) {

          var result = [];
          var tooltipDims = otherDimToDataDim(data, 'tooltip');

          tooltipDims.length
              ? __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.each(tooltipDims, function (dimIdx) {
                  setEachItem(data.get(dimIdx, dataIndex), dimIdx);
              })
              // By default, all dims is used on tooltip.
              : __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.each(value, setEachItem);

          function setEachItem(val, dimIdx) {
              var dimInfo = data.getDimensionInfo(dimIdx);
              // If `dimInfo.tooltip` is not set, show tooltip.
              if (!dimInfo || dimInfo.otherDims.tooltip === false) {
                  return;
              }
              var dimType = dimInfo.type;
              var valStr = ( '- ' + (dimInfo.tooltipName || dimInfo.name) + ': ' )
                  + (dimType === 'ordinal'
                      ? val + ''
                      : dimType === 'time'
                      ? (multipleSeries ? '' : __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.format.formatTime('yyyy/MM/dd hh:mm:ss', val))
                      : __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.format.addCommas(val)
                  );
              valStr && result.push(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.format.encodeHTML(valStr));
          }

          return ( '<br/>' ) + result.join( '<br/>' );
      }

      var data = seriesModel.getData();

      var value = seriesModel.getRawValue(dataIndex);
      var formattedValue = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.isArray(value)
          ? formatArrayValue(value) : __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.format.encodeHTML(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.format.addCommas(value));
      var name = data.getName(dataIndex);

      var color = data.getItemVisual(dataIndex, 'color');
      if (__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.isObject(color) && color.colorStops) {
          color = (color.colorStops[0] || {}).color;
      }
      color = color || 'transparent';

      var colorEl = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.format.getTooltipMarker(color);

      var seriesName = seriesModel.name;
      // FIXME
      if (seriesName === '\0-') {
          // Not show '-'
          seriesName = '';
      }
      seriesName = seriesName
          ? __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.format.encodeHTML(seriesName) + (!multipleSeries ? '<br/>' : ': ')
          : '';
      return !multipleSeries
          ? seriesName + colorEl
              + (name
                  ? __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.format.encodeHTML(name) + ': ' + formattedValue
                  : formattedValue
              )
          : colorEl + seriesName + formattedValue;
  });
  /***/ }),
  /* 41 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Renderable__ = __webpack_require__(71);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_glenum__ = __webpack_require__(11);



  /**
   * @constructor clay.Mesh
   * @extends clay.Renderable
   */
  var Mesh = __WEBPACK_IMPORTED_MODULE_0__Renderable__["a" /* default */].extend(/** @lends clay.Mesh# */ {
      /**
       * Used when it is a skinned mesh
       * @type {clay.Skeleton}
       */
      skeleton: null,
      /**
       * Joints indices Meshes can share the one skeleton instance and each mesh can use one part of joints. Joints indices indicate the index of joint in the skeleton instance
       * @type {number[]}
       */
      joints: null

  }, function () {
      if (!this.joints) {
          this.joints = [];
      }
  }, {

      /**
       * Offset matrix used for multiple skinned mesh clone sharing one skeleton
       * @type {clay.Matrix4}
       */
      offsetMatrix: null,

      isInstancedMesh: function () { return false; },

      isSkinnedMesh: function () {
          return !!(this.skeleton && this.joints && this.joints.length > 0);
      },

      clone: function () {
          var mesh = __WEBPACK_IMPORTED_MODULE_0__Renderable__["a" /* default */].prototype.clone.call(this);
          mesh.skeleton = this.skeleton;
          if (this.joints) {
              mesh.joints = this.joints.slice();
          }
          return mesh;
      }
  });

  // Enums
  Mesh.POINTS = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].POINTS;
  Mesh.LINES = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].LINES;
  Mesh.LINE_LOOP = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].LINE_LOOP;
  Mesh.LINE_STRIP = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].LINE_STRIP;
  Mesh.TRIANGLES = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].TRIANGLES;
  Mesh.TRIANGLE_STRIP = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].TRIANGLE_STRIP;
  Mesh.TRIANGLE_FAN = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].TRIANGLE_FAN;

  Mesh.BACK = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].BACK;
  Mesh.FRONT = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].FRONT;
  Mesh.FRONT_AND_BACK = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].FRONT_AND_BACK;
  Mesh.CW = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].CW;
  Mesh.CCW = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].CCW;

  /* harmony default export */ __webpack_exports__["a"] = (Mesh);


  /***/ }),
  /* 42 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Mesh__ = __webpack_require__(41);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__geometry_Cube__ = __webpack_require__(76);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Shader__ = __webpack_require__(9);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Material__ = __webpack_require__(19);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Texture__ = __webpack_require__(4);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__camera_Perspective__ = __webpack_require__(37);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__math_Matrix4__ = __webpack_require__(7);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__shader_source_skybox_glsl_js__ = __webpack_require__(120);
  // TODO Should not derived from mesh?









  __WEBPACK_IMPORTED_MODULE_2__Shader__["a" /* default */].import(__WEBPACK_IMPORTED_MODULE_7__shader_source_skybox_glsl_js__["a" /* default */]);
  /**
   * @constructor clay.plugin.Skybox
   *
   * @example
   *     var skyTex = new clay.TextureCube();
   *     skyTex.load({
   *         'px': 'assets/textures/sky/px.jpg',
   *         'nx': 'assets/textures/sky/nx.jpg'
   *         'py': 'assets/textures/sky/py.jpg'
   *         'ny': 'assets/textures/sky/ny.jpg'
   *         'pz': 'assets/textures/sky/pz.jpg'
   *         'nz': 'assets/textures/sky/nz.jpg'
   *     });
   *     var skybox = new clay.plugin.Skybox({
   *         scene: scene
   *     });
   *     skybox.material.set('environmentMap', skyTex);
   */
  var Skybox = __WEBPACK_IMPORTED_MODULE_0__Mesh__["a" /* default */].extend(function () {

      var skyboxShader = new __WEBPACK_IMPORTED_MODULE_2__Shader__["a" /* default */]({
          vertex: __WEBPACK_IMPORTED_MODULE_2__Shader__["a" /* default */].source('clay.skybox.vertex'),
          fragment: __WEBPACK_IMPORTED_MODULE_2__Shader__["a" /* default */].source('clay.skybox.fragment')
      });
      var material = new __WEBPACK_IMPORTED_MODULE_3__Material__["a" /* default */]({
          shader: skyboxShader,
          depthMask: false
      });

      return {
          /**
           * @type {clay.Scene}
           * @memberOf clay.plugin.Skybox.prototype
           */
          scene: null,

          geometry: new __WEBPACK_IMPORTED_MODULE_1__geometry_Cube__["a" /* default */](),

          material: material,

          environmentMap: null,

          culling: false,

          _dummyCamera: new __WEBPACK_IMPORTED_MODULE_5__camera_Perspective__["a" /* default */]()
      };
  }, function () {
      var scene = this.scene;
      if (scene) {
          this.attachScene(scene);
      }
      if (this.environmentMap) {
          this.setEnvironmentMap(this.environmentMap);
      }
  }, /** @lends clay.plugin.Skybox# */ {
      /**
       * Attach the skybox to the scene
       * @param  {clay.Scene} scene
       */
      attachScene: function (scene) {
          if (this.scene) {
              this.detachScene();
          }
          scene.skybox = this;

          this.scene = scene;
          scene.on('beforerender', this._beforeRenderScene, this);
      },
      /**
       * Detach from scene
       */
      detachScene: function () {
          if (this.scene) {
              this.scene.off('beforerender', this._beforeRenderScene);
              this.scene.skybox = null;
          }
          this.scene = null;
      },

      /**
       * Dispose skybox
       * @param  {clay.Renderer} renderer
       */
      dispose: function (renderer) {
          this.detachScene();
          this.geometry.dispose(renderer);
      },
      /**
       * Set environment map
       * @param {clay.TextureCube} envMap
       */
      setEnvironmentMap: function (envMap) {
          if (envMap.textureType === 'texture2D') {
              this.material.define('EQUIRECTANGULAR');
              // LINEAR filter can remove the artifacts in pole
              envMap.minFilter = __WEBPACK_IMPORTED_MODULE_4__Texture__["a" /* default */].LINEAR;
          }
          else {
              this.material.undefine('EQUIRECTANGULAR');
          }
          this.material.set('environmentMap', envMap);
      },
      /**
       * Get environment map
       * @return {clay.TextureCube}
       */
      getEnvironmentMap: function () {
          return this.material.get('environmentMap');
      },

      _beforeRenderScene: function(renderer, scene, camera) {
          this.renderSkybox(renderer, camera);
      },

      renderSkybox: function (renderer, camera) {
          var dummyCamera = this._dummyCamera;
          dummyCamera.aspect = renderer.getViewportAspect();
          dummyCamera.fov = camera.fov || 50;
          dummyCamera.updateProjectionMatrix();
          __WEBPACK_IMPORTED_MODULE_6__math_Matrix4__["a" /* default */].invert(dummyCamera.invProjectionMatrix, dummyCamera.projectionMatrix);
          dummyCamera.worldTransform.copy(camera.worldTransform);
          dummyCamera.viewMatrix.copy(camera.viewMatrix);

          this.position.copy(camera.getWorldPosition());
          this.update();

          // Don't remember to disable blend
          renderer.gl.disable(renderer.gl.BLEND);
          if (this.material.get('lod') > 0) {
              this.material.define('fragment', 'LOD');
          }
          else {
              this.material.undefine('fragment', 'LOD');
          }
          renderer.renderPass([this], dummyCamera);
      }
  });

  /* harmony default export */ __webpack_exports__["a"] = (Skybox);


  /***/ }),
  /* 43 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Geometry__ = __webpack_require__(14);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__math_BoundingBox__ = __webpack_require__(18);



  /**
   * @constructor clay.geometry.Plane
   * @extends clay.Geometry
   * @param {Object} [opt]
   * @param {number} [opt.widthSegments]
   * @param {number} [opt.heightSegments]
   */
  var Plane = __WEBPACK_IMPORTED_MODULE_0__Geometry__["a" /* default */].extend(
  /** @lends clay.geometry.Plane# */
  {
      dynamic: false,
      /**
       * @type {number}
       */
      widthSegments: 1,
      /**
       * @type {number}
       */
      heightSegments: 1
  }, function() {
      this.build();
  },
  /** @lends clay.geometry.Plane.prototype */
  {
      /**
       * Build plane geometry
       */
      build: function() {
          var heightSegments = this.heightSegments;
          var widthSegments = this.widthSegments;
          var attributes = this.attributes;
          var positions = [];
          var texcoords = [];
          var normals = [];
          var faces = [];

          for (var y = 0; y <= heightSegments; y++) {
              var t = y / heightSegments;
              for (var x = 0; x <= widthSegments; x++) {
                  var s = x / widthSegments;

                  positions.push([2 * s - 1, 2 * t - 1, 0]);
                  if (texcoords) {
                      texcoords.push([s, t]);
                  }
                  if (normals) {
                      normals.push([0, 0, 1]);
                  }
                  if (x < widthSegments && y < heightSegments) {
                      var i = x + y * (widthSegments + 1);
                      faces.push([i, i + 1, i + widthSegments + 1]);
                      faces.push([i + widthSegments + 1, i + 1, i + widthSegments + 2]);
                  }
              }
          }

          attributes.position.fromArray(positions);
          attributes.texcoord0.fromArray(texcoords);
          attributes.normal.fromArray(normals);

          this.initIndicesFromArray(faces);

          this.boundingBox = new __WEBPACK_IMPORTED_MODULE_1__math_BoundingBox__["a" /* default */]();
          this.boundingBox.min.set(-1, -1, 0);
          this.boundingBox.max.set(1, 1, 0);
      }
  });

  /* harmony default export */ __webpack_exports__["a"] = (Plane);


  /***/ }),
  /* 44 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ({
      defaultOption: {

          viewControl: {
              // perspective, orthographic.
              // TODO Isometric
              projection: 'perspective',
              // If rotate on on init
              autoRotate: false,
              // cw or ccw
              autoRotateDirection: 'cw',
              // Degree per second
              autoRotateSpeed: 10,

              // Start rotating after still for a given time
              // default is 3 seconds
              autoRotateAfterStill: 3,

              // Rotate, zoom damping.
              damping: 0.8,
              // Sensitivities for operations.
              // Can be array to set x,y respectively
              rotateSensitivity: 1,
              zoomSensitivity: 1,
              // Can be array to set x,y respectively
              panSensitivity: 1,
              // Which mouse button do rotate or pan
              panMouseButton: 'middle',
              rotateMouseButton: 'left',

              // Distance to the target
              // Only available when camera is perspective.
              distance: 150,
              // Min distance mouse can zoom in
              minDistance: 40,
              // Max distance mouse can zoom out
              maxDistance: 400,

              // Size of viewing volume.
              // Only available when camera is orthographic
              orthographicSize: 150,
              maxOrthographicSize: 400,
              minOrthographicSize: 20,

              // Center view point
              center: [0, 0, 0],
              // Alpha angle for top-down rotation
              // Positive to rotate to top.
              alpha: 0,
              // beta angle for left-right rotation
              // Positive to rotate to right.
              beta: 0,

              minAlpha: -90,
              maxAlpha: 90

              // minBeta: -Infinity
              // maxBeta: -Infinity
          }
      },

      setView: function (opts) {
          opts = opts || {};
          this.option.viewControl = this.option.viewControl || {};
          if (opts.alpha != null) {
              this.option.viewControl.alpha = opts.alpha;
          }
          if (opts.beta != null) {
              this.option.viewControl.beta = opts.beta;
          }
          if (opts.distance != null) {
              this.option.viewControl.distance = opts.distance;
          }
          if (opts.center != null) {
              this.option.viewControl.center = opts.center;
          }
      }
  });

  /***/ }),
  /* 45 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_claygl_src_core_Base__ = __webpack_require__(8);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_claygl_src_math_Vector2__ = __webpack_require__(26);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_claygl_src_math_Vector3__ = __webpack_require__(3);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_claygl_src_math_Quaternion__ = __webpack_require__(56);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__retrieve__ = __webpack_require__(2);
  /**
   * Provide orbit control for 3D objects
   *
   * @module echarts-gl/util/OrbitControl
   * @author Yi Shen(http://github.com/pissang)
   */

  // TODO Remove magic numbers on sensitivity





  var firstNotNull = __WEBPACK_IMPORTED_MODULE_4__retrieve__["a" /* default */].firstNotNull;


  var MOUSE_BUTTON_KEY_MAP = {
      left: 0,
      middle: 1,
      right: 2
  };

  function convertToArray(val) {
      if (!(val instanceof Array)) {
          val = [val, val];
      }
      return val;
  }

  /**
   * @alias module:echarts-x/util/OrbitControl
   */
  var OrbitControl = __WEBPACK_IMPORTED_MODULE_0_claygl_src_core_Base__["a" /* default */].extend(function () {

      return {
          /**
           * @type {module:zrender~ZRender}
           */
          zr: null,

          /**
           * @type {module:echarts-gl/core/ViewGL}
           */
          viewGL: null,

          /**
           * @type {clay.math.Vector3}
           */
          _center: new __WEBPACK_IMPORTED_MODULE_2_claygl_src_math_Vector3__["a" /* default */](),

          /**
           * Minimum distance to the center
           * Only available when camera is perspective.
           * @type {number}
           * @default 0.5
           */
          minDistance: 0.5,

          /**
           * Maximum distance to the center
           * Only available when camera is perspective.
           * @type {number}
           * @default 2
           */
          maxDistance: 1.5,

          /**
           * Only available when camera is orthographic
           */
          maxOrthographicSize: 300,

          /**
           * Only available when camera is orthographic
           */
          minOrthographicSize: 30,

          /**
           * Minimum alpha rotation
           */
          minAlpha: -90,

          /**
           * Maximum alpha rotation
           */
          maxAlpha: 90,

          /**
           * Minimum beta rotation
           */
          minBeta: -Infinity,
          /**
           * Maximum beta rotation
           */
          maxBeta: Infinity,

          /**
           * Start auto rotating after still for the given time
           */
          autoRotateAfterStill: 0,

          /**
           * Direction of autoRotate. cw or ccw when looking top down.
           */
          autoRotateDirection: 'cw',

          /**
           * Degree per second
           */
          autoRotateSpeed: 60,

          /**
           * @param {number}
           */
          damping: 0.8,

          /**
           * @param {number}
           */
          rotateSensitivity: 1,

          /**
           * @param {number}
           */
          zoomSensitivity: 1,

          /**
           * @param {number}
           */
          panSensitivity: 1,

          panMouseButton: 'middle',
          rotateMouseButton: 'left',

          /**
           * Pan or rotate
           * @private
           * @type {String}
           */
          _mode: 'rotate',

          /**
           * @private
           * @type {clay.Camera}
           */
          _camera: null,

          _needsUpdate: false,

          _rotating: false,

          // Rotation around yAxis in radian
          _phi: 0,
          // Rotation around xAxis in radian
          _theta: 0,

          _mouseX: 0,
          _mouseY: 0,

          _rotateVelocity: new __WEBPACK_IMPORTED_MODULE_1_claygl_src_math_Vector2__["a" /* default */](),

          _panVelocity: new __WEBPACK_IMPORTED_MODULE_1_claygl_src_math_Vector2__["a" /* default */](),

          _distance: 500,

          _zoomSpeed: 0,

          _stillTimeout: 0,

          _animators: []
      };
  }, function () {
      // Each OrbitControl has it's own handler
      ['_mouseDownHandler', '_mouseWheelHandler', '_mouseMoveHandler', '_mouseUpHandler',
      '_pinchHandler', '_contextMenuHandler', '_update'].forEach(function (hdlName) {
          this[hdlName] = this[hdlName].bind(this);
      }, this);
  }, {
      /**
       * Initialize.
       * Mouse event binding
       */
      init: function () {
          var zr = this.zr;

          if (zr) {
              zr.on('mousedown', this._mouseDownHandler);
              zr.on('globalout', this._mouseUpHandler);
              zr.on('mousewheel', this._mouseWheelHandler);
              zr.on('pinch', this._pinchHandler);

              zr.animation.on('frame', this._update);

              zr.dom.addEventListener('contextmenu', this._contextMenuHandler);
          }
      },

      /**
       * Dispose.
       * Mouse event unbinding
       */
      dispose: function () {
          var zr = this.zr;

          if (zr) {
              zr.off('mousedown', this._mouseDownHandler);
              zr.off('mousemove', this._mouseMoveHandler);
              zr.off('mouseup', this._mouseUpHandler);
              zr.off('mousewheel', this._mouseWheelHandler);
              zr.off('pinch', this._pinchHandler);
              zr.off('globalout', this._mouseUpHandler);
              zr.dom.removeEventListener('contextmenu', this._contextMenuHandler);

              zr.animation.off('frame', this._update);
          }
          this.stopAllAnimation();
      },

      /**
       * Get distance
       * @return {number}
       */
      getDistance: function () {
          return this._distance;
      },

      /**
       * Set distance
       * @param {number} distance
       */
      setDistance: function (distance) {
          this._distance = distance;
          this._needsUpdate = true;
      },

      /**
       * Get size of orthographic viewing volume
       * @return {number}
       */
      getOrthographicSize: function () {
          return this._orthoSize;
      },

      /**
       * Set size of orthographic viewing volume
       * @param {number} size
       */
      setOrthographicSize: function (size) {
          this._orthoSize = size;
          this._needsUpdate = true;
      },

      /**
       * Get alpha rotation
       * Alpha angle for top-down rotation. Positive to rotate to top.
       *
       * Which means camera rotation around x axis.
       */
      getAlpha: function () {
          return this._theta / Math.PI * 180;
      },

      /**
       * Get beta rotation
       * Beta angle for left-right rotation. Positive to rotate to right.
       *
       * Which means camera rotation around y axis.
       */
      getBeta: function () {
          return -this._phi / Math.PI * 180;
      },

      /**
       * Get control center
       * @return {Array.<number>}
       */
      getCenter: function () {
          return this._center.toArray();
      },

      /**
       * Set alpha rotation angle
       * @param {number} alpha
       */
      setAlpha: function (alpha) {
          alpha = Math.max(Math.min(this.maxAlpha, alpha), this.minAlpha);

          this._theta = alpha / 180 * Math.PI;
          this._needsUpdate = true;
      },

      /**
       * Set beta rotation angle
       * @param {number} beta
       */
      setBeta: function (beta) {
          beta = Math.max(Math.min(this.maxBeta, beta), this.minBeta);

          this._phi = -beta / 180 * Math.PI;
          this._needsUpdate = true;
      },

      /**
       * Set control center
       * @param {Array.<number>} center
       */
      setCenter: function (centerArr) {
          this._center.setArray(centerArr);
      },

      /**
       * @param {module:echarts-gl/core/ViewGL} viewGL
       */
      setViewGL: function (viewGL) {
          this.viewGL = viewGL;
      },

      /**
       * @return {clay.Camera}
       */
      getCamera: function () {
          return this.viewGL.camera;
      },

      setFromViewControlModel: function (viewControlModel, extraOpts) {
          extraOpts = extraOpts || {};
          var baseDistance = extraOpts.baseDistance || 0;
          var baseOrthoSize = extraOpts.baseOrthoSize || 1;

          var projection = viewControlModel.get('projection');
          if (projection !== 'perspective' && projection !== 'orthographic' && projection !== 'isometric') {
              {
                  console.error('Unkown projection type %s, use perspective projection instead.', projection);
              }
              projection = 'perspective';
          }
          this._projection = projection;
          this.viewGL.setProjection(projection);

          var targetDistance = viewControlModel.get('distance') + baseDistance;
          var targetOrthographicSize = viewControlModel.get('orthographicSize') + baseOrthoSize;

          [
              ['damping', 0.8],
              ['autoRotate', false],
              ['autoRotateAfterStill', 3],
              ['autoRotateDirection', 'cw'],
              ['autoRotateSpeed', 10],
              ['minDistance', 30],
              ['maxDistance', 400],
              ['minOrthographicSize', 30],
              ['maxOrthographicSize', 300],
              ['minAlpha', -90],
              ['maxAlpha', 90],
              ['minBeta', -Infinity],
              ['maxBeta', Infinity],
              ['rotateSensitivity', 1],
              ['zoomSensitivity', 1],
              ['panSensitivity', 1],
              ['panMouseButton', 'left'],
              ['rotateMouseButton', 'middle'],
          ].forEach(function (prop) {
              this[prop[0]] = firstNotNull(viewControlModel.get(prop[0]), prop[1]);
          }, this);

          this.minDistance += baseDistance;
          this.maxDistance += baseDistance;
          this.minOrthographicSize += baseOrthoSize,
          this.maxOrthographicSize += baseOrthoSize;

          var ecModel = viewControlModel.ecModel;

          var animationOpts = {};
          ['animation', 'animationDurationUpdate', 'animationEasingUpdate'].forEach(function (key) {
              animationOpts[key] = firstNotNull(
                  viewControlModel.get(key), ecModel && ecModel.get(key)
              );
          });

          var alpha = firstNotNull(extraOpts.alpha, viewControlModel.get('alpha')) || 0;
          var beta = firstNotNull(extraOpts.beta, viewControlModel.get('beta')) || 0;
          var center = firstNotNull(extraOpts.center, viewControlModel.get('center')) || [0, 0, 0];
          if (animationOpts.animation && animationOpts.animationDurationUpdate > 0 && this._notFirst) {
              this.animateTo({
                  alpha: alpha,
                  beta: beta,
                  center: center,
                  distance: targetDistance,
                  orthographicSize: targetOrthographicSize,
                  easing: animationOpts.animationEasingUpdate,
                  duration: animationOpts.animationDurationUpdate
              });
          }
          else {
              this.setDistance(targetDistance);
              this.setAlpha(alpha);
              this.setBeta(beta);
              this.setCenter(center);
              this.setOrthographicSize(targetOrthographicSize);
          }

          this._notFirst = true;

          this._validateProperties();
      },

      _validateProperties: function () {
          {
              if (MOUSE_BUTTON_KEY_MAP[this.panMouseButton] == null) {
                  console.error('Unkown panMouseButton %s. It should be left|middle|right', this.panMouseButton);
              }
              if (MOUSE_BUTTON_KEY_MAP[this.rotateMouseButton] == null) {
                  console.error('Unkown rotateMouseButton %s. It should be left|middle|right', this.rotateMouseButton);
              }
              if (this.autoRotateDirection !== 'cw' && this.autoRotateDirection !== 'ccw') {
                  console.error('Unkown autoRotateDirection %s. It should be cw|ccw', this.autoRotateDirection);
              }
          }
      },

      /**
       * @param {Object} opts
       * @param {number} opts.distance
       * @param {number} opts.alpha
       * @param {number} opts.beta
       * @param {number} opts.orthographicSize
       * @param {number} [opts.duration=1000]
       * @param {number} [opts.easing='linear']
       */
      animateTo: function (opts) {
          var zr = this.zr;
          var self = this;

          var obj = {};
          var target = {};

          if (opts.distance != null) {
              obj.distance = this.getDistance();
              target.distance = opts.distance;
          }
          if (opts.orthographicSize != null) {
              obj.orthographicSize = this.getOrthographicSize();
              target.orthographicSize = opts.orthographicSize;
          }
          if (opts.alpha != null) {
              obj.alpha = this.getAlpha();
              target.alpha = opts.alpha;
          }
          if (opts.beta != null) {
              obj.beta = this.getBeta();
              target.beta = opts.beta;
          }
          if (opts.center != null) {
              obj.center = this.getCenter();
              target.center = opts.center;
          }

          return this._addAnimator(
              zr.animation.animate(obj)
                  .when(opts.duration || 1000, target)
                  .during(function () {
                      if (obj.alpha != null) {
                          self.setAlpha(obj.alpha);
                      }
                      if (obj.beta != null) {
                          self.setBeta(obj.beta);
                      }
                      if (obj.distance != null) {
                          self.setDistance(obj.distance);
                      }
                      if (obj.center != null) {
                          self.setCenter(obj.center);
                      }
                      if (obj.orthographicSize != null) {
                          self.setOrthographicSize(obj.orthographicSize);
                      }
                      self._needsUpdate = true;
                  })
          ).start(opts.easing || 'linear');
      },

      /**
       * Stop all animation
       */
      stopAllAnimation: function () {
          for (var i = 0; i < this._animators.length; i++) {
              this._animators[i].stop();
          }
          this._animators.length = 0;
      },

      update: function () {
          this._needsUpdate = true;
          this._update(20);
      },

      _isAnimating: function () {
          return this._animators.length > 0;
      },
      /**
       * Call update each frame
       * @param  {number} deltaTime Frame time
       */
      _update: function (deltaTime) {

          if (this._rotating) {
              var radian = (this.autoRotateDirection === 'cw' ? 1 : -1)
                   * this.autoRotateSpeed / 180 * Math.PI;
              this._phi -= radian * deltaTime / 1000;
              this._needsUpdate = true;
          }
          else if (this._rotateVelocity.len() > 0) {
              this._needsUpdate = true;
          }

          if (Math.abs(this._zoomSpeed) > 0.1 || this._panVelocity.len() > 0) {
              this._needsUpdate = true;
          }

          if (!this._needsUpdate) {
              return;
          }

          deltaTime = Math.min(deltaTime, 50);

          this._updateDistanceOrSize(deltaTime);

          this._updatePan(deltaTime);

          this._updateRotate(deltaTime);

          this._updateTransform();

          this.getCamera().update();

          this.zr && this.zr.refresh();

          this.trigger('update');

          this._needsUpdate = false;
      },

      _updateRotate: function (deltaTime) {
          var velocity = this._rotateVelocity;
          this._phi = velocity.y * deltaTime / 20 + this._phi;
          this._theta = velocity.x * deltaTime / 20 + this._theta;

          this.setAlpha(this.getAlpha());
          this.setBeta(this.getBeta());

          this._vectorDamping(velocity, Math.pow(this.damping, deltaTime / 16));
      },

      _updateDistanceOrSize: function (deltaTime) {
          if (this._projection === 'perspective') {
              this._setDistance(this._distance + this._zoomSpeed * deltaTime / 20);
          }
          else {
              this._setOrthoSize(this._orthoSize + this._zoomSpeed * deltaTime / 20);
          }

          this._zoomSpeed *= Math.pow(this.damping, deltaTime / 16);
      },


      _setDistance: function (distance) {
          this._distance = Math.max(Math.min(distance, this.maxDistance), this.minDistance);
      },

      _setOrthoSize: function (size) {
          this._orthoSize = Math.max(Math.min(size, this.maxOrthographicSize), this.minOrthographicSize);
          var camera = this.getCamera();
          var cameraHeight = this._orthoSize;
          var cameraWidth = cameraHeight / this.viewGL.viewport.height * this.viewGL.viewport.width;
          camera.left = -cameraWidth / 2;
          camera.right = cameraWidth / 2;
          camera.top = cameraHeight / 2;
          camera.bottom = -cameraHeight / 2;
      },

      _updatePan: function (deltaTime) {

          var velocity = this._panVelocity;
          var len = this._distance;

          var target = this.getCamera();
          var yAxis = target.worldTransform.y;
          var xAxis = target.worldTransform.x;

          // PENDING
          this._center
              .scaleAndAdd(xAxis, -velocity.x * len / 200)
              .scaleAndAdd(yAxis, -velocity.y * len / 200);

          this._vectorDamping(velocity, 0);
      },

      _updateTransform: function () {
          var camera = this.getCamera();

          var dir = new __WEBPACK_IMPORTED_MODULE_2_claygl_src_math_Vector3__["a" /* default */]();
          var theta = this._theta + Math.PI / 2;
          var phi = this._phi + Math.PI / 2;
          var r = Math.sin(theta);

          dir.x = r * Math.cos(phi);
          dir.y = -Math.cos(theta);
          dir.z = r * Math.sin(phi);

          camera.position.copy(this._center).scaleAndAdd(dir, this._distance);
          camera.rotation.identity()
              // First around y, then around x
              .rotateY(-this._phi)
              .rotateX(-this._theta);
      },

      _startCountingStill: function () {
          clearTimeout(this._stillTimeout);

          var time = this.autoRotateAfterStill;
          var self = this;
          if (!isNaN(time) && time > 0) {
              this._stillTimeout = setTimeout(function () {
                  self._rotating = true;
              }, time * 1000);
          }
      },

      _vectorDamping: function (v, damping) {
          var speed = v.len();
          speed = speed * damping;
          if (speed < 1e-4) {
              speed = 0;
          }
          v.normalize().scale(speed);
      },

      _decomposeTransform: function () {
          if (!this.getCamera()) {
              return;
          }

          this.getCamera().updateWorldTransform();

          var forward = this.getCamera().worldTransform.z;
          var alpha = Math.asin(forward.y);
          var beta = Math.atan2(forward.x, forward.z);

          this._theta = alpha;
          this._phi = -beta;

          this.setBeta(this.getBeta());
          this.setAlpha(this.getAlpha());

          // Is perspective
          if (this.getCamera().aspect) {
              this._setDistance(this.getCamera().position.dist(this._center));
          }
          else {
              this._setOrthoSize(this.getCamera().top - this.getCamera().bottom);
          }
      },

      _mouseDownHandler: function (e) {
          if (e.target) {
              // If mouseon some zrender element.
              return;
          }
          if (this._isAnimating()) {
              return;
          }

          var x = e.offsetX;
          var y = e.offsetY;
          if (this.viewGL && !this.viewGL.containPoint(x, y)) {
              return;
          }

          this.zr.on('mousemove', this._mouseMoveHandler);
          this.zr.on('mouseup', this._mouseUpHandler);

          if (e.event.targetTouches) {
              if (e.event.targetTouches.length === 1) {
                  this._mode = 'rotate';
              }
          }
          else {
              if (e.event.button === MOUSE_BUTTON_KEY_MAP[this.rotateMouseButton]) {
                  this._mode = 'rotate';
              }
              else if (e.event.button === MOUSE_BUTTON_KEY_MAP[this.panMouseButton]) {
                  this._mode = 'pan';
              }
              else {
                  this._mode = '';
              }
          }

          // Reset rotate velocity
          this._rotateVelocity.set(0, 0);
          this._rotating = false;
          if (this.autoRotate) {
              this._startCountingStill();
          }

          this._mouseX = e.offsetX;
          this._mouseY = e.offsetY;
      },

      _mouseMoveHandler: function (e) {
          if (e.target && e.target.__isGLToZRProxy) {
              return;
          }

          if (this._isAnimating()) {
              return;
          }

          var panSensitivity = convertToArray(this.panSensitivity);
          var rotateSensitivity = convertToArray(this.rotateSensitivity);

          if (this._mode === 'rotate') {
              this._rotateVelocity.y = (e.offsetX - this._mouseX) / this.zr.getHeight() * 2 * rotateSensitivity[0];
              this._rotateVelocity.x = (e.offsetY - this._mouseY) / this.zr.getWidth() * 2 * rotateSensitivity[1];
          }
          else if (this._mode === 'pan') {
              this._panVelocity.x = (e.offsetX - this._mouseX) / this.zr.getWidth() * panSensitivity[0] * 400;
              this._panVelocity.y = (-e.offsetY + this._mouseY) / this.zr.getHeight() * panSensitivity[1] * 400;
          }


          this._mouseX = e.offsetX;
          this._mouseY = e.offsetY;

          e.event.preventDefault();
      },

      _mouseWheelHandler: function (e) {
          if (this._isAnimating()) {
              return;
          }
          var delta = e.event.wheelDelta // Webkit
                  || -e.event.detail; // Firefox
          this._zoomHandler(e, delta);
      },

      _pinchHandler: function (e) {
          if (this._isAnimating()) {
              return;
          }
          this._zoomHandler(e, e.pinchScale > 1 ? 1 : -1);
          // Not rotate when pinch
          this._mode = '';
      },

      _zoomHandler: function (e, delta) {
          if (delta === 0) {
              return;
          }

          var x = e.offsetX;
          var y = e.offsetY;
          if (this.viewGL && !this.viewGL.containPoint(x, y)) {
              return;
          }

          var speed;
          if (this._projection === 'perspective') {
              speed = Math.max(Math.max(Math.min(
                  this._distance - this.minDistance,
                  this.maxDistance - this._distance
              )) / 20, 0.5);
          }
          else {
              speed = Math.max(Math.max(Math.min(
                  this._orthoSize - this.minOrthographicSize,
                  this.maxOrthographicSize - this._orthoSize
              )) / 20, 0.5);
          }
          this._zoomSpeed = (delta > 0 ? -1 : 1) * speed * this.zoomSensitivity;

          this._rotating = false;

          if (this.autoRotate && this._mode === 'rotate') {
              this._startCountingStill();
          }

          e.event.preventDefault();
      },

      _mouseUpHandler: function () {
          this.zr.off('mousemove', this._mouseMoveHandler);
          this.zr.off('mouseup', this._mouseUpHandler);
      },

      _isRightMouseButtonUsed: function () {
          return this.rotateMouseButton === 'right'
              || this.panMouseButton === 'right';
      },

      _contextMenuHandler: function (e) {
          if (this._isRightMouseButtonUsed()) {
              e.preventDefault();
          }
      },

      _addAnimator: function (animator) {
          var animators = this._animators;
          animators.push(animator);
          animator.done(function () {
              var idx = animators.indexOf(animator);
              if (idx >= 0) {
                  animators.splice(idx, 1);
              }
          });
          return animator;
      }
  });

  /**
   * If auto rotate the target
   * @type {boolean}
   * @default false
   */
  Object.defineProperty(OrbitControl.prototype, 'autoRotate', {
      get: function (val) {
          return this._autoRotate;
      },
      set: function (val) {
          this._autoRotate = val;
          this._rotating = val;
      }
  });


  /* harmony default export */ __webpack_exports__["a"] = (OrbitControl);

  /***/ }),
  /* 46 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("@export ecgl.lines3D.vertex\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\n\nattribute vec3 position: POSITION;\nattribute vec4 a_Color : COLOR;\nvarying vec4 v_Color;\n\nvoid main()\n{\n gl_Position = worldViewProjection * vec4(position, 1.0);\n v_Color = a_Color;\n}\n\n@end\n\n@export ecgl.lines3D.fragment\n\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\n\nvarying vec4 v_Color;\n\n@import clay.util.srgb\n\nvoid main()\n{\n#ifdef SRGB_DECODE\n gl_FragColor = sRGBToLinear(color * v_Color);\n#else\n gl_FragColor = color * v_Color;\n#endif\n}\n@end\n\n\n\n@export ecgl.lines3D.clipNear\n\nvec4 clipNear(vec4 p1, vec4 p2) {\n float n = (p1.w - near) / (p1.w - p2.w);\n return vec4(mix(p1.xy, p2.xy, n), -near, near);\n}\n\n@end\n\n@export ecgl.lines3D.expandLine\n#ifdef VERTEX_ANIMATION\n vec4 prevProj = worldViewProjection * vec4(mix(prevPositionPrev, positionPrev, percent), 1.0);\n vec4 currProj = worldViewProjection * vec4(mix(prevPosition, position, percent), 1.0);\n vec4 nextProj = worldViewProjection * vec4(mix(prevPositionNext, positionNext, percent), 1.0);\n#else\n vec4 prevProj = worldViewProjection * vec4(positionPrev, 1.0);\n vec4 currProj = worldViewProjection * vec4(position, 1.0);\n vec4 nextProj = worldViewProjection * vec4(positionNext, 1.0);\n#endif\n\n if (currProj.w < 0.0) {\n if (nextProj.w > 0.0) {\n currProj = clipNear(currProj, nextProj);\n }\n else if (prevProj.w > 0.0) {\n currProj = clipNear(currProj, prevProj);\n }\n }\n\n vec2 prevScreen = (prevProj.xy / abs(prevProj.w) + 1.0) * 0.5 * viewport.zw;\n vec2 currScreen = (currProj.xy / abs(currProj.w) + 1.0) * 0.5 * viewport.zw;\n vec2 nextScreen = (nextProj.xy / abs(nextProj.w) + 1.0) * 0.5 * viewport.zw;\n\n vec2 dir;\n float len = offset;\n if (position == positionPrev) {\n dir = normalize(nextScreen - currScreen);\n }\n else if (position == positionNext) {\n dir = normalize(currScreen - prevScreen);\n }\n else {\n vec2 dirA = normalize(currScreen - prevScreen);\n vec2 dirB = normalize(nextScreen - currScreen);\n\n vec2 tanget = normalize(dirA + dirB);\n\n float miter = 1.0 / max(dot(tanget, dirA), 0.5);\n len *= miter;\n dir = tanget;\n }\n\n dir = vec2(-dir.y, dir.x) * len;\n currScreen += dir;\n\n currProj.xy = (currScreen / viewport.zw - 0.5) * 2.0 * abs(currProj.w);\n@end\n\n\n@export ecgl.meshLines3D.vertex\n\nattribute vec3 position: POSITION;\nattribute vec3 positionPrev;\nattribute vec3 positionNext;\nattribute float offset;\nattribute vec4 a_Color : COLOR;\n\n#ifdef VERTEX_ANIMATION\nattribute vec3 prevPosition;\nattribute vec3 prevPositionPrev;\nattribute vec3 prevPositionNext;\nuniform float percent : 1.0;\n#endif\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nuniform vec4 viewport : VIEWPORT;\nuniform float near : NEAR;\n\nvarying vec4 v_Color;\n\n@import ecgl.common.wireframe.vertexHeader\n\n@import ecgl.lines3D.clipNear\n\nvoid main()\n{\n @import ecgl.lines3D.expandLine\n\n gl_Position = currProj;\n\n v_Color = a_Color;\n\n @import ecgl.common.wireframe.vertexMain\n}\n@end\n\n\n@export ecgl.meshLines3D.fragment\n\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\n\nvarying vec4 v_Color;\n\n@import ecgl.common.wireframe.fragmentHeader\n\n@import clay.util.srgb\n\nvoid main()\n{\n#ifdef SRGB_DECODE\n gl_FragColor = sRGBToLinear(color * v_Color);\n#else\n gl_FragColor = color * v_Color;\n#endif\n\n @import ecgl.common.wireframe.fragmentMain\n}\n\n@end");


  /***/ }),
  /* 47 */
  /***/ (function(module, exports, __webpack_require__) {


  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  var zrUtil = __webpack_require__(16);

  var BoundingRect = __webpack_require__(83);

  var _number = __webpack_require__(84);

  var parsePercent = _number.parsePercent;

  var formatUtil = __webpack_require__(172);

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  // Layout helpers for each component positioning
  var each = zrUtil.each;
  /**
   * @public
   */

  var LOCATION_PARAMS = ['left', 'right', 'top', 'bottom', 'width', 'height'];
  /**
   * @public
   */

  var HV_NAMES = [['width', 'left', 'right'], ['height', 'top', 'bottom']];

  function boxLayout(orient, group, gap, maxWidth, maxHeight) {
    var x = 0;
    var y = 0;

    if (maxWidth == null) {
      maxWidth = Infinity;
    }

    if (maxHeight == null) {
      maxHeight = Infinity;
    }

    var currentLineMaxSize = 0;
    group.eachChild(function (child, idx) {
      var position = child.position;
      var rect = child.getBoundingRect();
      var nextChild = group.childAt(idx + 1);
      var nextChildRect = nextChild && nextChild.getBoundingRect();
      var nextX;
      var nextY;

      if (orient === 'horizontal') {
        var moveX = rect.width + (nextChildRect ? -nextChildRect.x + rect.x : 0);
        nextX = x + moveX; // Wrap when width exceeds maxWidth or meet a `newline` group
        // FIXME compare before adding gap?

        if (nextX > maxWidth || child.newline) {
          x = 0;
          nextX = moveX;
          y += currentLineMaxSize + gap;
          currentLineMaxSize = rect.height;
        } else {
          // FIXME: consider rect.y is not `0`?
          currentLineMaxSize = Math.max(currentLineMaxSize, rect.height);
        }
      } else {
        var moveY = rect.height + (nextChildRect ? -nextChildRect.y + rect.y : 0);
        nextY = y + moveY; // Wrap when width exceeds maxHeight or meet a `newline` group

        if (nextY > maxHeight || child.newline) {
          x += currentLineMaxSize + gap;
          y = 0;
          nextY = moveY;
          currentLineMaxSize = rect.width;
        } else {
          currentLineMaxSize = Math.max(currentLineMaxSize, rect.width);
        }
      }

      if (child.newline) {
        return;
      }

      position[0] = x;
      position[1] = y;
      orient === 'horizontal' ? x = nextX + gap : y = nextY + gap;
    });
  }
  /**
   * VBox or HBox layouting
   * @param {string} orient
   * @param {module:zrender/container/Group} group
   * @param {number} gap
   * @param {number} [width=Infinity]
   * @param {number} [height=Infinity]
   */


  var box = boxLayout;
  /**
   * VBox layouting
   * @param {module:zrender/container/Group} group
   * @param {number} gap
   * @param {number} [width=Infinity]
   * @param {number} [height=Infinity]
   */

  var vbox = zrUtil.curry(boxLayout, 'vertical');
  /**
   * HBox layouting
   * @param {module:zrender/container/Group} group
   * @param {number} gap
   * @param {number} [width=Infinity]
   * @param {number} [height=Infinity]
   */

  var hbox = zrUtil.curry(boxLayout, 'horizontal');
  /**
   * If x or x2 is not specified or 'center' 'left' 'right',
   * the width would be as long as possible.
   * If y or y2 is not specified or 'middle' 'top' 'bottom',
   * the height would be as long as possible.
   *
   * @param {Object} positionInfo
   * @param {number|string} [positionInfo.x]
   * @param {number|string} [positionInfo.y]
   * @param {number|string} [positionInfo.x2]
   * @param {number|string} [positionInfo.y2]
   * @param {Object} containerRect {width, height}
   * @param {string|number} margin
   * @return {Object} {width, height}
   */

  function getAvailableSize(positionInfo, containerRect, margin) {
    var containerWidth = containerRect.width;
    var containerHeight = containerRect.height;
    var x = parsePercent(positionInfo.x, containerWidth);
    var y = parsePercent(positionInfo.y, containerHeight);
    var x2 = parsePercent(positionInfo.x2, containerWidth);
    var y2 = parsePercent(positionInfo.y2, containerHeight);
    (isNaN(x) || isNaN(parseFloat(positionInfo.x))) && (x = 0);
    (isNaN(x2) || isNaN(parseFloat(positionInfo.x2))) && (x2 = containerWidth);
    (isNaN(y) || isNaN(parseFloat(positionInfo.y))) && (y = 0);
    (isNaN(y2) || isNaN(parseFloat(positionInfo.y2))) && (y2 = containerHeight);
    margin = formatUtil.normalizeCssArray(margin || 0);
    return {
      width: Math.max(x2 - x - margin[1] - margin[3], 0),
      height: Math.max(y2 - y - margin[0] - margin[2], 0)
    };
  }
  /**
   * Parse position info.
   *
   * @param {Object} positionInfo
   * @param {number|string} [positionInfo.left]
   * @param {number|string} [positionInfo.top]
   * @param {number|string} [positionInfo.right]
   * @param {number|string} [positionInfo.bottom]
   * @param {number|string} [positionInfo.width]
   * @param {number|string} [positionInfo.height]
   * @param {number|string} [positionInfo.aspect] Aspect is width / height
   * @param {Object} containerRect
   * @param {string|number} [margin]
   *
   * @return {module:zrender/core/BoundingRect}
   */


  function getLayoutRect(positionInfo, containerRect, margin) {
    margin = formatUtil.normalizeCssArray(margin || 0);
    var containerWidth = containerRect.width;
    var containerHeight = containerRect.height;
    var left = parsePercent(positionInfo.left, containerWidth);
    var top = parsePercent(positionInfo.top, containerHeight);
    var right = parsePercent(positionInfo.right, containerWidth);
    var bottom = parsePercent(positionInfo.bottom, containerHeight);
    var width = parsePercent(positionInfo.width, containerWidth);
    var height = parsePercent(positionInfo.height, containerHeight);
    var verticalMargin = margin[2] + margin[0];
    var horizontalMargin = margin[1] + margin[3];
    var aspect = positionInfo.aspect; // If width is not specified, calculate width from left and right

    if (isNaN(width)) {
      width = containerWidth - right - horizontalMargin - left;
    }

    if (isNaN(height)) {
      height = containerHeight - bottom - verticalMargin - top;
    }

    if (aspect != null) {
      // If width and height are not given
      // 1. Graph should not exceeds the container
      // 2. Aspect must be keeped
      // 3. Graph should take the space as more as possible
      // FIXME
      // Margin is not considered, because there is no case that both
      // using margin and aspect so far.
      if (isNaN(width) && isNaN(height)) {
        if (aspect > containerWidth / containerHeight) {
          width = containerWidth * 0.8;
        } else {
          height = containerHeight * 0.8;
        }
      } // Calculate width or height with given aspect


      if (isNaN(width)) {
        width = aspect * height;
      }

      if (isNaN(height)) {
        height = width / aspect;
      }
    } // If left is not specified, calculate left from right and width


    if (isNaN(left)) {
      left = containerWidth - right - width - horizontalMargin;
    }

    if (isNaN(top)) {
      top = containerHeight - bottom - height - verticalMargin;
    } // Align left and top


    switch (positionInfo.left || positionInfo.right) {
      case 'center':
        left = containerWidth / 2 - width / 2 - margin[3];
        break;

      case 'right':
        left = containerWidth - width - horizontalMargin;
        break;
    }

    switch (positionInfo.top || positionInfo.bottom) {
      case 'middle':
      case 'center':
        top = containerHeight / 2 - height / 2 - margin[0];
        break;

      case 'bottom':
        top = containerHeight - height - verticalMargin;
        break;
    } // If something is wrong and left, top, width, height are calculated as NaN


    left = left || 0;
    top = top || 0;

    if (isNaN(width)) {
      // Width may be NaN if only one value is given except width
      width = containerWidth - horizontalMargin - left - (right || 0);
    }

    if (isNaN(height)) {
      // Height may be NaN if only one value is given except height
      height = containerHeight - verticalMargin - top - (bottom || 0);
    }

    var rect = new BoundingRect(left + margin[3], top + margin[0], width, height);
    rect.margin = margin;
    return rect;
  }
  /**
   * Position a zr element in viewport
   *  Group position is specified by either
   *  {left, top}, {right, bottom}
   *  If all properties exists, right and bottom will be igonred.
   *
   * Logic:
   *     1. Scale (against origin point in parent coord)
   *     2. Rotate (against origin point in parent coord)
   *     3. Traslate (with el.position by this method)
   * So this method only fixes the last step 'Traslate', which does not affect
   * scaling and rotating.
   *
   * If be called repeatly with the same input el, the same result will be gotten.
   *
   * @param {module:zrender/Element} el Should have `getBoundingRect` method.
   * @param {Object} positionInfo
   * @param {number|string} [positionInfo.left]
   * @param {number|string} [positionInfo.top]
   * @param {number|string} [positionInfo.right]
   * @param {number|string} [positionInfo.bottom]
   * @param {number|string} [positionInfo.width] Only for opt.boundingModel: 'raw'
   * @param {number|string} [positionInfo.height] Only for opt.boundingModel: 'raw'
   * @param {Object} containerRect
   * @param {string|number} margin
   * @param {Object} [opt]
   * @param {Array.<number>} [opt.hv=[1,1]] Only horizontal or only vertical.
   * @param {Array.<number>} [opt.boundingMode='all']
   *        Specify how to calculate boundingRect when locating.
   *        'all': Position the boundingRect that is transformed and uioned
   *               both itself and its descendants.
   *               This mode simplies confine the elements in the bounding
   *               of their container (e.g., using 'right: 0').
   *        'raw': Position the boundingRect that is not transformed and only itself.
   *               This mode is useful when you want a element can overflow its
   *               container. (Consider a rotated circle needs to be located in a corner.)
   *               In this mode positionInfo.width/height can only be number.
   */


  function positionElement(el, positionInfo, containerRect, margin, opt) {
    var h = !opt || !opt.hv || opt.hv[0];
    var v = !opt || !opt.hv || opt.hv[1];
    var boundingMode = opt && opt.boundingMode || 'all';

    if (!h && !v) {
      return;
    }

    var rect;

    if (boundingMode === 'raw') {
      rect = el.type === 'group' ? new BoundingRect(0, 0, +positionInfo.width || 0, +positionInfo.height || 0) : el.getBoundingRect();
    } else {
      rect = el.getBoundingRect();

      if (el.needLocalTransform()) {
        var transform = el.getLocalTransform(); // Notice: raw rect may be inner object of el,
        // which should not be modified.

        rect = rect.clone();
        rect.applyTransform(transform);
      }
    } // The real width and height can not be specified but calculated by the given el.


    positionInfo = getLayoutRect(zrUtil.defaults({
      width: rect.width,
      height: rect.height
    }, positionInfo), containerRect, margin); // Because 'tranlate' is the last step in transform
    // (see zrender/core/Transformable#getLocalTransform),
    // we can just only modify el.position to get final result.

    var elPos = el.position;
    var dx = h ? positionInfo.x - rect.x : 0;
    var dy = v ? positionInfo.y - rect.y : 0;
    el.attr('position', boundingMode === 'raw' ? [dx, dy] : [elPos[0] + dx, elPos[1] + dy]);
  }
  /**
   * @param {Object} option Contains some of the properties in HV_NAMES.
   * @param {number} hvIdx 0: horizontal; 1: vertical.
   */


  function sizeCalculable(option, hvIdx) {
    return option[HV_NAMES[hvIdx][0]] != null || option[HV_NAMES[hvIdx][1]] != null && option[HV_NAMES[hvIdx][2]] != null;
  }
  /**
   * Consider Case:
   * When defulat option has {left: 0, width: 100}, and we set {right: 0}
   * through setOption or media query, using normal zrUtil.merge will cause
   * {right: 0} does not take effect.
   *
   * @example
   * ComponentModel.extend({
   *     init: function () {
   *         ...
   *         var inputPositionParams = layout.getLayoutParams(option);
   *         this.mergeOption(inputPositionParams);
   *     },
   *     mergeOption: function (newOption) {
   *         newOption && zrUtil.merge(thisOption, newOption, true);
   *         layout.mergeLayoutParam(thisOption, newOption);
   *     }
   * });
   *
   * @param {Object} targetOption
   * @param {Object} newOption
   * @param {Object|string} [opt]
   * @param {boolean|Array.<boolean>} [opt.ignoreSize=false] Used for the components
   *  that width (or height) should not be calculated by left and right (or top and bottom).
   */


  function mergeLayoutParam(targetOption, newOption, opt) {
    !zrUtil.isObject(opt) && (opt = {});
    var ignoreSize = opt.ignoreSize;
    !zrUtil.isArray(ignoreSize) && (ignoreSize = [ignoreSize, ignoreSize]);
    var hResult = merge(HV_NAMES[0], 0);
    var vResult = merge(HV_NAMES[1], 1);
    copy(HV_NAMES[0], targetOption, hResult);
    copy(HV_NAMES[1], targetOption, vResult);

    function merge(names, hvIdx) {
      var newParams = {};
      var newValueCount = 0;
      var merged = {};
      var mergedValueCount = 0;
      var enoughParamNumber = 2;
      each(names, function (name) {
        merged[name] = targetOption[name];
      });
      each(names, function (name) {
        // Consider case: newOption.width is null, which is
        // set by user for removing width setting.
        hasProp(newOption, name) && (newParams[name] = merged[name] = newOption[name]);
        hasValue(newParams, name) && newValueCount++;
        hasValue(merged, name) && mergedValueCount++;
      });

      if (ignoreSize[hvIdx]) {
        // Only one of left/right is premitted to exist.
        if (hasValue(newOption, names[1])) {
          merged[names[2]] = null;
        } else if (hasValue(newOption, names[2])) {
          merged[names[1]] = null;
        }

        return merged;
      } // Case: newOption: {width: ..., right: ...},
      // or targetOption: {right: ...} and newOption: {width: ...},
      // There is no conflict when merged only has params count
      // little than enoughParamNumber.


      if (mergedValueCount === enoughParamNumber || !newValueCount) {
        return merged;
      } // Case: newOption: {width: ..., right: ...},
      // Than we can make sure user only want those two, and ignore
      // all origin params in targetOption.
      else if (newValueCount >= enoughParamNumber) {
          return newParams;
        } else {
          // Chose another param from targetOption by priority.
          for (var i = 0; i < names.length; i++) {
            var name = names[i];

            if (!hasProp(newParams, name) && hasProp(targetOption, name)) {
              newParams[name] = targetOption[name];
              break;
            }
          }

          return newParams;
        }
    }

    function hasProp(obj, name) {
      return obj.hasOwnProperty(name);
    }

    function hasValue(obj, name) {
      return obj[name] != null && obj[name] !== 'auto';
    }

    function copy(names, target, source) {
      each(names, function (name) {
        target[name] = source[name];
      });
    }
  }
  /**
   * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.
   * @param {Object} source
   * @return {Object} Result contains those props.
   */


  function getLayoutParams(source) {
    return copyLayoutParams({}, source);
  }
  /**
   * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.
   * @param {Object} source
   * @return {Object} Result contains those props.
   */


  function copyLayoutParams(target, source) {
    source && target && each(LOCATION_PARAMS, function (name) {
      source.hasOwnProperty(name) && (target[name] = source[name]);
    });
    return target;
  }

  exports.LOCATION_PARAMS = LOCATION_PARAMS;
  exports.HV_NAMES = HV_NAMES;
  exports.box = box;
  exports.vbox = vbox;
  exports.hbox = hbox;
  exports.getAvailableSize = getAvailableSize;
  exports.getLayoutRect = getLayoutRect;
  exports.positionElement = positionElement;
  exports.sizeCalculable = sizeCalculable;
  exports.mergeLayoutParam = mergeLayoutParam;
  exports.getLayoutParams = getLayoutParams;
  exports.copyLayoutParams = copyLayoutParams;

  /***/ }),
  /* 48 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Base__ = __webpack_require__(8);


  // PENDING
  // Use topological sort ?

  /**
   * Node of graph based post processing.
   *
   * @constructor clay.compositor.CompositorNode
   * @extends clay.core.Base
   *
   */
  var CompositorNode = __WEBPACK_IMPORTED_MODULE_0__core_Base__["a" /* default */].extend(function () {
      return /** @lends clay.compositor.CompositorNode# */ {
          /**
           * @type {string}
           */
          name: '',

          /**
           * Input links, will be updated by the graph
           * @example:
           *     inputName: {
           *         node: someNode,
           *         pin: 'xxxx'
           *     }
           * @type {Object}
           */
          inputLinks: {},

          /**
           * Output links, will be updated by the graph
           * @example:
           *     outputName: {
           *         node: someNode,
           *         pin: 'xxxx'
           *     }
           * @type {Object}
           */
          outputLinks: {},

          // Save the output texture of previous frame
          // Will be used when there exist a circular reference
          _prevOutputTextures: {},
          _outputTextures: {},

          // Example: { name: 2 }
          _outputReferences: {},

          _rendering: false,
          // If rendered in this frame
          _rendered: false,

          _compositor: null
      };
  },
  /** @lends clay.compositor.CompositorNode.prototype */
  {

      // TODO Remove parameter function callback
      updateParameter: function (outputName, renderer) {
          var outputInfo = this.outputs[outputName];
          var parameters = outputInfo.parameters;
          var parametersCopy = outputInfo._parametersCopy;
          if (!parametersCopy) {
              parametersCopy = outputInfo._parametersCopy = {};
          }
          if (parameters) {
              for (var key in parameters) {
                  if (key !== 'width' && key !== 'height') {
                      parametersCopy[key] = parameters[key];
                  }
              }
          }
          var width, height;
          if (parameters.width instanceof Function) {
              width = parameters.width.call(this, renderer);
          }
          else {
              width = parameters.width;
          }
          if (parameters.height instanceof Function) {
              height = parameters.height.call(this, renderer);
          }
          else {
              height = parameters.height;
          }
          if (
              parametersCopy.width !== width
              || parametersCopy.height !== height
          ) {
              if (this._outputTextures[outputName]) {
                  this._outputTextures[outputName].dispose(renderer.gl);
              }
          }
          parametersCopy.width = width;
          parametersCopy.height = height;

          return parametersCopy;
      },

      /**
       * Set parameter
       * @param {string} name
       * @param {} value
       */
      setParameter: function (name, value) {},
      /**
       * Get parameter value
       * @param  {string} name
       * @return {}
       */
      getParameter: function (name) {},
      /**
       * Set parameters
       * @param {Object} obj
       */
      setParameters: function (obj) {
          for (var name in obj) {
              this.setParameter(name, obj[name]);
          }
      },

      render: function () {},

      getOutput: function (renderer /*optional*/, name) {
          if (name == null) {
              // Return the output texture without rendering
              name = renderer;
              return this._outputTextures[name];
          }
          var outputInfo = this.outputs[name];
          if (!outputInfo) {
              return ;
          }

          // Already been rendered in this frame
          if (this._rendered) {
              // Force return texture in last frame
              if (outputInfo.outputLastFrame) {
                  return this._prevOutputTextures[name];
              }
              else {
                  return this._outputTextures[name];
              }
          }
          else if (
              // TODO
              this._rendering   // Solve Circular Reference
          ) {
              if (!this._prevOutputTextures[name]) {
                  // Create a blank texture at first pass
                  this._prevOutputTextures[name] = this._compositor.allocateTexture(outputInfo.parameters || {});
              }
              return this._prevOutputTextures[name];
          }

          this.render(renderer);

          return this._outputTextures[name];
      },

      removeReference: function (outputName) {
          this._outputReferences[outputName]--;
          if (this._outputReferences[outputName] === 0) {
              var outputInfo = this.outputs[outputName];
              if (outputInfo.keepLastFrame) {
                  if (this._prevOutputTextures[outputName]) {
                      this._compositor.releaseTexture(this._prevOutputTextures[outputName]);
                  }
                  this._prevOutputTextures[outputName] = this._outputTextures[outputName];
              }
              else {
                  // Output of this node have alreay been used by all other nodes
                  // Put the texture back to the pool.
                  this._compositor.releaseTexture(this._outputTextures[outputName]);
              }
          }
      },

      link: function (inputPinName, fromNode, fromPinName) {

          // The relationship from output pin to input pin is one-on-multiple
          this.inputLinks[inputPinName] = {
              node: fromNode,
              pin: fromPinName
          };
          if (!fromNode.outputLinks[fromPinName]) {
              fromNode.outputLinks[fromPinName] = [];
          }
          fromNode.outputLinks[fromPinName].push({
              node: this,
              pin: inputPinName
          });

          // Enabled the pin texture in shader
          this.pass.material.enableTexture(inputPinName);
      },

      clear: function () {
          this.inputLinks = {};
          this.outputLinks = {};
      },

      updateReference: function (outputName) {
          if (!this._rendering) {
              this._rendering = true;
              for (var inputName in this.inputLinks) {
                  var link = this.inputLinks[inputName];
                  link.node.updateReference(link.pin);
              }
              this._rendering = false;
          }
          if (outputName) {
              this._outputReferences[outputName] ++;
          }
      },

      beforeFrame: function () {
          this._rendered = false;

          for (var name in this.outputLinks) {
              this._outputReferences[name] = 0;
          }
      },

      afterFrame: function () {
          // Put back all the textures to pool
          for (var name in this.outputLinks) {
              if (this._outputReferences[name] > 0) {
                  var outputInfo = this.outputs[name];
                  if (outputInfo.keepLastFrame) {
                      if (this._prevOutputTextures[name]) {
                          this._compositor.releaseTexture(this._prevOutputTextures[name]);
                      }
                      this._prevOutputTextures[name] = this._outputTextures[name];
                  }
                  else {
                      this._compositor.releaseTexture(this._outputTextures[name]);
                  }
              }
          }
      }
  });

  /* harmony default export */ __webpack_exports__["a"] = (CompositorNode);


  /***/ }),
  /* 49 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {

  // Generate halton sequence
  // https://en.wikipedia.org/wiki/Halton_sequence
  function halton(index, base) {

      var result = 0;
      var f = 1 / base;
      var i = index;
      while (i > 0) {
          result = result + f * (i % base);
          i = Math.floor(i / base);
          f = f / base;
      }
      return result;
  }


  /* harmony default export */ __webpack_exports__["a"] = (halton);

  /***/ }),
  /* 50 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);


  /* harmony default export */ __webpack_exports__["a"] = (function (seriesModel, dims, source) {
      source = source || seriesModel.getSource();

      var coordSysDimensions = dims || __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.getCoordinateSystemDimensions(seriesModel.get('coordinateSystem')) || ['x', 'y', 'z'];

      var dimensions = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.helper.createDimensions(source, {
          dimensionsDefine: source.dimensionsDefine || seriesModel.get('dimensions'),
          encodeDefine: source.encodeDefine || seriesModel.get('encode'),
          coordDimensions: coordSysDimensions.map(function (dim) {
              var axis3DModel = seriesModel.getReferringComponents(dim + 'Axis3D')[0];
              return {
                  type: (axis3DModel && axis3DModel.get('type') === 'category') ? 'ordinal' : 'float',
                  name: dim
                  // Find stackable dimension. Which will represent value.
                  // stackable: dim === 'z'
              };
          })
      });
      if (seriesModel.get('coordinateSystem') === 'cartesian3D') {
          dimensions.forEach(function (dimInfo) {
              if (coordSysDimensions.indexOf(dimInfo.coordDim) >= 0) {
                  var axis3DModel = seriesModel.getReferringComponents(dimInfo.coordDim + 'Axis3D')[0];
                  if (axis3DModel && axis3DModel.get('type') === 'category') {
                      dimInfo.ordinalMeta = axis3DModel.getOrdinalMeta();
                  }
              }
          });
      }

      var stackCalculationInfo = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.helper.dataStack.enableDataStack(
          // Only support 'z' and `byIndex` now.
          seriesModel, dimensions, {byIndex: true, stackedCoordDimension: 'z'}
      );

      var data = new __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.List(dimensions, seriesModel);

      data.setCalculationInfo(stackCalculationInfo);

      data.initData(source);

      return data;
  });

  /***/ }),
  /* 51 */
  /***/ (function(module, exports, __webpack_require__) {


  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  var _util = __webpack_require__(16);

  var isFunction = _util.isFunction;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  function _default(seriesType, defaultSymbolType, legendSymbol) {
    // Encoding visual for all series include which is filtered for legend drawing
    return {
      seriesType: seriesType,
      // For legend.
      performRawSeries: true,
      reset: function (seriesModel, ecModel, api) {
        var data = seriesModel.getData();
        var symbolType = seriesModel.get('symbol');
        var symbolSize = seriesModel.get('symbolSize');
        var keepAspect = seriesModel.get('symbolKeepAspect');
        var hasSymbolTypeCallback = isFunction(symbolType);
        var hasSymbolSizeCallback = isFunction(symbolSize);
        var hasCallback = hasSymbolTypeCallback || hasSymbolSizeCallback;
        var seriesSymbol = !hasSymbolTypeCallback && symbolType ? symbolType : defaultSymbolType;
        var seriesSymbolSize = !hasSymbolSizeCallback ? symbolSize : null;
        data.setVisual({
          legendSymbol: legendSymbol || seriesSymbol,
          // If seting callback functions on `symbol` or `symbolSize`, for simplicity and avoiding
          // to bring trouble, we do not pick a reuslt from one of its calling on data item here,
          // but just use the default value. Callback on `symbol` or `symbolSize` is convenient in
          // some cases but generally it is not recommanded.
          symbol: seriesSymbol,
          symbolSize: seriesSymbolSize,
          symbolKeepAspect: keepAspect
        }); // Only visible series has each data be visual encoded

        if (ecModel.isSeriesFiltered(seriesModel)) {
          return;
        }

        function dataEach(data, idx) {
          if (hasCallback) {
            var rawValue = seriesModel.getRawValue(idx);
            var params = seriesModel.getDataParams(idx);
            hasSymbolTypeCallback && data.setItemVisual(idx, 'symbol', symbolType(rawValue, params));
            hasSymbolSizeCallback && data.setItemVisual(idx, 'symbolSize', symbolSize(rawValue, params));
          }

          if (data.hasItemOption) {
            var itemModel = data.getItemModel(idx);
            var itemSymbolType = itemModel.getShallow('symbol', true);
            var itemSymbolSize = itemModel.getShallow('symbolSize', true);
            var itemSymbolKeepAspect = itemModel.getShallow('symbolKeepAspect', true); // If has item symbol

            if (itemSymbolType != null) {
              data.setItemVisual(idx, 'symbol', itemSymbolType);
            }

            if (itemSymbolSize != null) {
              // PENDING Transform symbolSize ?
              data.setItemVisual(idx, 'symbolSize', itemSymbolSize);
            }

            if (itemSymbolKeepAspect != null) {
              data.setItemVisual(idx, 'symbolKeepAspect', itemSymbolKeepAspect);
            }
          }
        }

        return {
          dataEach: data.hasItemOption || hasCallback ? dataEach : null
        };
      }
    };
  }

  module.exports = _default;

  /***/ }),
  /* 52 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Base__ = __webpack_require__(8);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_GLInfo__ = __webpack_require__(110);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_glenum__ = __webpack_require__(11);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_vendor__ = __webpack_require__(13);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Material__ = __webpack_require__(19);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__math_Vector2__ = __webpack_require__(26);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__gpu_ProgramManager__ = __webpack_require__(114);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__Shader__ = __webpack_require__(9);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__shader_source_prez_glsl_js__ = __webpack_require__(70);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__glmatrix_mat4__ = __webpack_require__(21);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__glmatrix_vec3__ = __webpack_require__(12);
  // TODO Resources like shader, texture, geometry reference management
  // Trace and find out which shader, texture, geometry can be destroyed









  // Light header



  __WEBPACK_IMPORTED_MODULE_7__Shader__["a" /* default */]['import'](__WEBPACK_IMPORTED_MODULE_8__shader_source_prez_glsl_js__["a" /* default */]);




  var mat4Create = __WEBPACK_IMPORTED_MODULE_9__glmatrix_mat4__["a" /* default */].create;

  var errorShader = {};

  function defaultGetMaterial(renderable) {
      return renderable.material;
  }
  function defaultGetUniform(renderable, material, symbol) {
      return material.uniforms[symbol].value;
  }
  function defaultIsMaterialChanged(renderabled, prevRenderable, material, prevMaterial) {
      return material !== prevMaterial;
  }
  function defaultIfRender(renderable) {
      return true;
  }

  function noop() {}

  var attributeBufferTypeMap = {
      float: __WEBPACK_IMPORTED_MODULE_2__core_glenum__["a" /* default */].FLOAT,
      byte: __WEBPACK_IMPORTED_MODULE_2__core_glenum__["a" /* default */].BYTE,
      ubyte: __WEBPACK_IMPORTED_MODULE_2__core_glenum__["a" /* default */].UNSIGNED_BYTE,
      short: __WEBPACK_IMPORTED_MODULE_2__core_glenum__["a" /* default */].SHORT,
      ushort: __WEBPACK_IMPORTED_MODULE_2__core_glenum__["a" /* default */].UNSIGNED_SHORT
  };

  function VertexArrayObject(availableAttributes, availableAttributeSymbols, indicesBuffer) {
      this.availableAttributes = availableAttributes;
      this.availableAttributeSymbols = availableAttributeSymbols;
      this.indicesBuffer = indicesBuffer;

      this.vao = null;
  }

  function PlaceHolderTexture(renderer) {
      var blankCanvas;
      var webglTexture;
      this.bind = function (renderer) {
          if (!blankCanvas) {
              // TODO Environment not support createCanvas.
              blankCanvas = __WEBPACK_IMPORTED_MODULE_3__core_vendor__["a" /* default */].createCanvas();
              blankCanvas.width = blankCanvas.height = 1;
              blankCanvas.getContext('2d');
          }

          var gl = renderer.gl;
          var firstBind = !webglTexture;
          if (firstBind) {
              webglTexture = gl.createTexture();
          }
          gl.bindTexture(gl.TEXTURE_2D, webglTexture);
          if (firstBind) {
              gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, blankCanvas);
          }
      };
      this.unbind = function (renderer) {
          renderer.gl.bindTexture(renderer.gl.TEXTURE_2D, null);
      };
      this.isRenderable = function () {
          return true;
      };
  }

  /**
   * @constructor clay.Renderer
   * @extends clay.core.Base
   */
  var Renderer = __WEBPACK_IMPORTED_MODULE_0__core_Base__["a" /* default */].extend(function () {
      return /** @lends clay.Renderer# */ {

          /**
           * @type {HTMLCanvasElement}
           * @readonly
           */
          canvas: null,

          /**
           * Canvas width, set by resize method
           * @type {number}
           * @private
           */
          _width: 100,

          /**
           * Canvas width, set by resize method
           * @type {number}
           * @private
           */
          _height: 100,

          /**
           * Device pixel ratio, set by setDevicePixelRatio method
           * Specially for high defination display
           * @see http://www.khronos.org/webgl/wiki/HandlingHighDPI
           * @type {number}
           * @private
           */
          devicePixelRatio: (typeof window !== 'undefined' && window.devicePixelRatio) || 1.0,

          /**
           * Clear color
           * @type {number[]}
           */
          clearColor: [0.0, 0.0, 0.0, 0.0],

          /**
           * Default:
           *     _gl.COLOR_BUFFER_BIT | _gl.DEPTH_BUFFER_BIT | _gl.STENCIL_BUFFER_BIT
           * @type {number}
           */
          clearBit: 17664,

          // Settings when getting context
          // http://www.khronos.org/registry/webgl/specs/latest/#2.4

          /**
           * If enable log depth buffer
           * @type {boolean}
           */
          logDepthBuffer: false,
          /**
           * If enable alpha, default true
           * @type {boolean}
           */
          alpha: true,
          /**
           * If enable depth buffer, default true
           * @type {boolean}
           */
          depth: true,
          /**
           * If enable stencil buffer, default false
           * @type {boolean}
           */
          stencil: false,
          /**
           * If enable antialias, default true
           * @type {boolean}
           */
          antialias: true,
          /**
           * If enable premultiplied alpha, default true
           * @type {boolean}
           */
          premultipliedAlpha: true,
          /**
           * If preserve drawing buffer, default false
           * @type {boolean}
           */
          preserveDrawingBuffer: false,
          /**
           * If throw context error, usually turned on in debug mode
           * @type {boolean}
           */
          throwError: true,
          /**
           * WebGL Context created from given canvas
           * @type {WebGLRenderingContext}
           */
          gl: null,
          /**
           * Renderer viewport, read-only, can be set by setViewport method
           * @type {Object}
           */
          viewport: {},

          /**
           * Max joint number
           * @type {number}
           */
          maxJointNumber: 20,

          // Set by FrameBuffer#bind
          __currentFrameBuffer: null,

          _viewportStack: [],
          _clearStack: [],

          _sceneRendering: null
      };
  }, function () {

      if (!this.canvas) {
          this.canvas = __WEBPACK_IMPORTED_MODULE_3__core_vendor__["a" /* default */].createCanvas();
      }
      var canvas = this.canvas;
      try {
          var opts = {
              alpha: this.alpha,
              depth: this.depth,
              stencil: this.stencil,
              antialias: this.antialias,
              premultipliedAlpha: this.premultipliedAlpha,
              preserveDrawingBuffer: this.preserveDrawingBuffer
          };

          this.gl = canvas.getContext('webgl', opts)
              || canvas.getContext('experimental-webgl', opts);

          if (!this.gl) {
              throw new Error();
          }

          this._glinfo = new __WEBPACK_IMPORTED_MODULE_1__core_GLInfo__["a" /* default */](this.gl);

          if (this.gl.targetRenderer) {
              console.error('Already created a renderer');
          }
          this.gl.targetRenderer = this;

          this.resize();
      }
      catch (e) {
          throw 'Error creating WebGL Context ' + e;
      }

      // Init managers
      this._programMgr = new __WEBPACK_IMPORTED_MODULE_6__gpu_ProgramManager__["a" /* default */](this);

      this._placeholderTexture = new PlaceHolderTexture(this);
  },
  /** @lends clay.Renderer.prototype. **/
  {
      /**
       * Resize the canvas
       * @param {number} width
       * @param {number} height
       */
      resize: function(width, height) {
          var canvas = this.canvas;
          // http://www.khronos.org/webgl/wiki/HandlingHighDPI
          // set the display size of the canvas.
          var dpr = this.devicePixelRatio;
          if (width != null) {
              if (canvas.style) {
                  canvas.style.width = width + 'px';
                  canvas.style.height = height + 'px';
              }
              // set the size of the drawingBuffer
              canvas.width = width * dpr;
              canvas.height = height * dpr;

              this._width = width;
              this._height = height;
          }
          else {
              this._width = canvas.width / dpr;
              this._height = canvas.height / dpr;
          }

          this.setViewport(0, 0, this._width, this._height);
      },

      /**
       * Get renderer width
       * @return {number}
       */
      getWidth: function () {
          return this._width;
      },

      /**
       * Get renderer height
       * @return {number}
       */
      getHeight: function () {
          return this._height;
      },

      /**
       * Get viewport aspect,
       * @return {number}
       */
      getViewportAspect: function () {
          var viewport = this.viewport;
          return viewport.width / viewport.height;
      },

      /**
       * Set devicePixelRatio
       * @param {number} devicePixelRatio
       */
      setDevicePixelRatio: function(devicePixelRatio) {
          this.devicePixelRatio = devicePixelRatio;
          this.resize(this._width, this._height);
      },

      /**
       * Get devicePixelRatio
       * @param {number} devicePixelRatio
       */
      getDevicePixelRatio: function () {
          return this.devicePixelRatio;
      },

      /**
       * Get WebGL extension
       * @param {string} name
       * @return {object}
       */
      getGLExtension: function (name) {
          return this._glinfo.getExtension(name);
      },

      /**
       * Get WebGL parameter
       * @param {string} name
       * @return {*}
       */
      getGLParameter: function (name) {
          return this._glinfo.getParameter(name);
      },

      /**
       * Set rendering viewport
       * @param {number|Object} x
       * @param {number} [y]
       * @param {number} [width]
       * @param {number} [height]
       * @param {number} [devicePixelRatio]
       *        Defaultly use the renderere devicePixelRatio
       *        It needs to be 1 when setViewport is called by frameBuffer
       *
       * @example
       *  setViewport(0,0,width,height,1)
       *  setViewport({
       *      x: 0,
       *      y: 0,
       *      width: width,
       *      height: height,
       *      devicePixelRatio: 1
       *  })
       */
      setViewport: function (x, y, width, height, dpr) {

          if (typeof x === 'object') {
              var obj = x;

              x = obj.x;
              y = obj.y;
              width = obj.width;
              height = obj.height;
              dpr = obj.devicePixelRatio;
          }
          dpr = dpr || this.devicePixelRatio;

          this.gl.viewport(
              x * dpr, y * dpr, width * dpr, height * dpr
          );
          // Use a fresh new object, not write property.
          this.viewport = {
              x: x,
              y: y,
              width: width,
              height: height,
              devicePixelRatio: dpr
          };
      },

      /**
       * Push current viewport into a stack
       */
      saveViewport: function () {
          this._viewportStack.push(this.viewport);
      },

      /**
       * Pop viewport from stack, restore in the renderer
       */
      restoreViewport: function () {
          if (this._viewportStack.length > 0) {
              this.setViewport(this._viewportStack.pop());
          }
      },

      /**
       * Push current clear into a stack
       */
      saveClear: function () {
          this._clearStack.push({
              clearBit: this.clearBit,
              clearColor: this.clearColor
          });
      },

      /**
       * Pop clear from stack, restore in the renderer
       */
      restoreClear: function () {
          if (this._clearStack.length > 0) {
              var opt = this._clearStack.pop();
              this.clearColor = opt.clearColor;
              this.clearBit = opt.clearBit;
          }
      },

      bindSceneRendering: function (scene) {
          this._sceneRendering = scene;
      },

      /**
       * Render the scene in camera to the screen or binded offline framebuffer
       * @param  {clay.Scene}       scene
       * @param  {clay.Camera}      camera
       * @param  {boolean}     [notUpdateScene] If not call the scene.update methods in the rendering, default true
       * @param  {boolean}     [preZ]           If use preZ optimization, default false
       * @return {IRenderInfo}
       */
      render: function(scene, camera, notUpdateScene, preZ) {
          var _gl = this.gl;

          var clearColor = this.clearColor;

          if (this.clearBit) {

              // Must set depth and color mask true before clear
              _gl.colorMask(true, true, true, true);
              _gl.depthMask(true);
              var viewport = this.viewport;
              var needsScissor = false;
              var viewportDpr = viewport.devicePixelRatio;
              if (viewport.width !== this._width || viewport.height !== this._height
                  || (viewportDpr && viewportDpr !== this.devicePixelRatio)
                  || viewport.x || viewport.y
              ) {
                  needsScissor = true;
                  // http://stackoverflow.com/questions/11544608/how-to-clear-a-rectangle-area-in-webgl
                  // Only clear the viewport
                  _gl.enable(_gl.SCISSOR_TEST);
                  _gl.scissor(viewport.x * viewportDpr, viewport.y * viewportDpr, viewport.width * viewportDpr, viewport.height * viewportDpr);
              }
              _gl.clearColor(clearColor[0], clearColor[1], clearColor[2], clearColor[3]);
              _gl.clear(this.clearBit);
              if (needsScissor) {
                  _gl.disable(_gl.SCISSOR_TEST);
              }
          }

          // If the scene have been updated in the prepass like shadow map
          // There is no need to update it again
          if (!notUpdateScene) {
              scene.update(false);
          }
          scene.updateLights();

          camera = camera || scene.getMainCamera();
          if (!camera) {
              console.error('Can\'t find camera in the scene.');
              return;
          }
          camera.update();
          var renderList = scene.updateRenderList(camera, true);

          this._sceneRendering = scene;

          var opaqueList = renderList.opaque;
          var transparentList = renderList.transparent;
          var sceneMaterial = scene.material;

          scene.trigger('beforerender', this, scene, camera, renderList);

          // Render pre z
          if (preZ) {
              this.renderPreZ(opaqueList, scene, camera);
              _gl.depthFunc(_gl.LEQUAL);
          }
          else {
              _gl.depthFunc(_gl.LESS);
          }

          // Update the depth of transparent list.
          var worldViewMat = mat4Create();
          var posViewSpace = __WEBPACK_IMPORTED_MODULE_10__glmatrix_vec3__["a" /* default */].create();
          for (var i = 0; i < transparentList.length; i++) {
              var renderable = transparentList[i];
              __WEBPACK_IMPORTED_MODULE_9__glmatrix_mat4__["a" /* default */].multiplyAffine(worldViewMat, camera.viewMatrix.array, renderable.worldTransform.array);
              __WEBPACK_IMPORTED_MODULE_10__glmatrix_vec3__["a" /* default */].transformMat4(posViewSpace, renderable.position.array, worldViewMat);
              renderable.__depth = posViewSpace[2];
          }

          // Render opaque list
          this.renderPass(opaqueList, camera, {
              getMaterial: function (renderable) {
                  return sceneMaterial || renderable.material;
              },
              sortCompare: this.opaqueSortCompare
          });

          this.renderPass(transparentList, camera, {
              getMaterial: function (renderable) {
                  return sceneMaterial || renderable.material;
              },
              sortCompare: this.transparentSortCompare
          });

          scene.trigger('afterrender', this, scene, camera, renderList);

          // Cleanup
          this._sceneRendering = null;
      },

      getProgram: function (renderable, renderMaterial, scene) {
          renderMaterial = renderMaterial || renderable.material;
          return this._programMgr.getProgram(renderable, renderMaterial, scene, this);
      },

      validateProgram: function (program) {
          if (program.__error) {
              var errorMsg = program.__error;
              if (errorShader[program.__uid__]) {
                  return;
              }
              errorShader[program.__uid__] = true;

              if (this.throwError) {
                  throw new Error(errorMsg);
              }
              else {
                  this.trigger('error', errorMsg);
              }

          }
      },

      updatePrograms: function (list, scene, passConfig) {
          var getMaterial = (passConfig && passConfig.getMaterial) || defaultGetMaterial;
          scene = scene || null;
          for (var i = 0; i < list.length; i++) {
              var renderable = list[i];
              var renderMaterial = getMaterial.call(this, renderable);
              if (i > 0) {
                  var prevRenderable = list[i - 1];
                  var prevJointsLen = prevRenderable.joints ? prevRenderable.joints.length : 0;
                  var jointsLen = renderable.joints ? renderable.joints.length : 0;
                  // Keep program not change if joints, material, lightGroup are same of two renderables.
                  if (jointsLen === prevJointsLen
                      && renderable.material === prevRenderable.material
                      && renderable.lightGroup === prevRenderable.lightGroup
                  ) {
                      renderable.__program = prevRenderable.__program;
                      continue;
                  }
              }

              var program = this._programMgr.getProgram(renderable, renderMaterial, scene, this);

              this.validateProgram(program);

              renderable.__program = program;
          }
      },

      /**
       * Render a single renderable list in camera in sequence
       * @param {clay.Renderable[]} list List of all renderables.
       * @param {clay.Camera} [camera] Camera provide view matrix and porjection matrix. It can be null.
       * @param {Object} [passConfig]
       * @param {Function} [passConfig.getMaterial] Get renderable material.
       * @param {Function} [passConfig.getUniform] Get material uniform value.
       * @param {Function} [passConfig.isMaterialChanged] If material changed.
       * @param {Function} [passConfig.beforeRender] Before render each renderable.
       * @param {Function} [passConfig.afterRender] After render each renderable
       * @param {Function} [passConfig.ifRender] If render the renderable.
       * @param {Function} [passConfig.sortCompare] Sort compare function.
       * @return {IRenderInfo}
       */
      renderPass: function(list, camera, passConfig) {
          this.trigger('beforerenderpass', this, list, camera, passConfig);

          passConfig = passConfig || {};
          passConfig.getMaterial = passConfig.getMaterial || defaultGetMaterial;
          passConfig.getUniform = passConfig.getUniform || defaultGetUniform;
          // PENDING Better solution?
          passConfig.isMaterialChanged = passConfig.isMaterialChanged || defaultIsMaterialChanged;
          passConfig.beforeRender = passConfig.beforeRender || noop;
          passConfig.afterRender = passConfig.afterRender || noop;

          var ifRenderObject = passConfig.ifRender || defaultIfRender;

          this.updatePrograms(list, this._sceneRendering, passConfig);
          if (passConfig.sortCompare) {
              list.sort(passConfig.sortCompare);
          }

          // Some common builtin uniforms
          var viewport = this.viewport;
          var vDpr = viewport.devicePixelRatio;
          var viewportUniform = [
              viewport.x * vDpr, viewport.y * vDpr,
              viewport.width * vDpr, viewport.height * vDpr
          ];
          var windowDpr = this.devicePixelRatio;
          var windowSizeUniform = this.__currentFrameBuffer
              ? [this.__currentFrameBuffer.getTextureWidth(), this.__currentFrameBuffer.getTextureHeight()]
              : [this._width * windowDpr, this._height * windowDpr];
          // DEPRECATED
          var viewportSizeUniform = [
              viewportUniform[2], viewportUniform[3]
          ];
          var time = Date.now();

          // Calculate view and projection matrix
          if (camera) {
              __WEBPACK_IMPORTED_MODULE_9__glmatrix_mat4__["a" /* default */].copy(matrices.VIEW, camera.viewMatrix.array);
              __WEBPACK_IMPORTED_MODULE_9__glmatrix_mat4__["a" /* default */].copy(matrices.PROJECTION, camera.projectionMatrix.array);
              __WEBPACK_IMPORTED_MODULE_9__glmatrix_mat4__["a" /* default */].copy(matrices.VIEWINVERSE, camera.worldTransform.array);
          }
          else {
              __WEBPACK_IMPORTED_MODULE_9__glmatrix_mat4__["a" /* default */].identity(matrices.VIEW);
              __WEBPACK_IMPORTED_MODULE_9__glmatrix_mat4__["a" /* default */].identity(matrices.PROJECTION);
              __WEBPACK_IMPORTED_MODULE_9__glmatrix_mat4__["a" /* default */].identity(matrices.VIEWINVERSE);
          }
          __WEBPACK_IMPORTED_MODULE_9__glmatrix_mat4__["a" /* default */].multiply(matrices.VIEWPROJECTION, matrices.PROJECTION, matrices.VIEW);
          __WEBPACK_IMPORTED_MODULE_9__glmatrix_mat4__["a" /* default */].invert(matrices.PROJECTIONINVERSE, matrices.PROJECTION);
          __WEBPACK_IMPORTED_MODULE_9__glmatrix_mat4__["a" /* default */].invert(matrices.VIEWPROJECTIONINVERSE, matrices.VIEWPROJECTION);

          var _gl = this.gl;
          var scene = this._sceneRendering;

          var prevMaterial;
          var prevProgram;
          var prevRenderable;

          // Status
          var depthTest, depthMask;
          var culling, cullFace, frontFace;
          var transparent;
          var drawID;
          var currentVAO;
          var materialTakesTextureSlot;

          // var vaoExt = this.getGLExtension('OES_vertex_array_object');
          // not use vaoExt, some platforms may mess it up.
          var vaoExt = null;

          for (var i = 0; i < list.length; i++) {
              var renderable = list[i];
              var isSceneNode = renderable.worldTransform != null;
              var worldM;

              if (!ifRenderObject(renderable)) {
                  continue;
              }

              // Skinned mesh will transformed to joint space. Ignore the mesh transform
              if (isSceneNode) {
                  worldM = (renderable.isSkinnedMesh && renderable.isSkinnedMesh())
                      // TODO
                      ? (renderable.offsetMatrix ? renderable.offsetMatrix.array :matrices.IDENTITY)
                      : renderable.worldTransform.array;
              }
              var geometry = renderable.geometry;
              var material = passConfig.getMaterial.call(this, renderable);

              var program = renderable.__program;
              var shader = material.shader;

              var currentDrawID = geometry.__uid__ + '-' + program.__uid__;
              var drawIDChanged = currentDrawID !== drawID;
              drawID = currentDrawID;
              if (drawIDChanged && vaoExt) {
                  // TODO Seems need to be bound to null immediately (or before bind another program?) if vao is changed
                  vaoExt.bindVertexArrayOES(null);
              }
              if (isSceneNode) {
                  __WEBPACK_IMPORTED_MODULE_9__glmatrix_mat4__["a" /* default */].copy(matrices.WORLD, worldM);
                  __WEBPACK_IMPORTED_MODULE_9__glmatrix_mat4__["a" /* default */].multiply(matrices.WORLDVIEWPROJECTION, matrices.VIEWPROJECTION, worldM);
                  __WEBPACK_IMPORTED_MODULE_9__glmatrix_mat4__["a" /* default */].multiplyAffine(matrices.WORLDVIEW, matrices.VIEW, worldM);
                  if (shader.matrixSemantics.WORLDINVERSE ||
                      shader.matrixSemantics.WORLDINVERSETRANSPOSE) {
                      __WEBPACK_IMPORTED_MODULE_9__glmatrix_mat4__["a" /* default */].invert(matrices.WORLDINVERSE, worldM);
                  }
                  if (shader.matrixSemantics.WORLDVIEWINVERSE ||
                      shader.matrixSemantics.WORLDVIEWINVERSETRANSPOSE) {
                      __WEBPACK_IMPORTED_MODULE_9__glmatrix_mat4__["a" /* default */].invert(matrices.WORLDVIEWINVERSE, matrices.WORLDVIEW);
                  }
                  if (shader.matrixSemantics.WORLDVIEWPROJECTIONINVERSE ||
                      shader.matrixSemantics.WORLDVIEWPROJECTIONINVERSETRANSPOSE) {
                      __WEBPACK_IMPORTED_MODULE_9__glmatrix_mat4__["a" /* default */].invert(matrices.WORLDVIEWPROJECTIONINVERSE, matrices.WORLDVIEWPROJECTION);
                  }
              }

              // Before render hook
              renderable.beforeRender && renderable.beforeRender(this);
              passConfig.beforeRender.call(this, renderable, material, prevMaterial);

              var programChanged = program !== prevProgram;
              if (programChanged) {
                  // Set lights number
                  program.bind(this);
                  // Set some common uniforms
                  program.setUniformOfSemantic(_gl, 'VIEWPORT', viewportUniform);
                  program.setUniformOfSemantic(_gl, 'WINDOW_SIZE', windowSizeUniform);
                  if (camera) {
                      program.setUniformOfSemantic(_gl, 'NEAR', camera.near);
                      program.setUniformOfSemantic(_gl, 'FAR', camera.far);

                      if (this.logDepthBuffer) {
                          // TODO Semantic?
                          program.setUniformOfSemantic(_gl, 'LOG_DEPTH_BUFFER_FC', 2.0 / (Math.log(camera.far + 1.0 ) / Math.LN2));
                      }
                  }
                  program.setUniformOfSemantic(_gl, 'DEVICEPIXELRATIO', vDpr);
                  program.setUniformOfSemantic(_gl, 'TIME', time);
                  // DEPRECATED
                  program.setUniformOfSemantic(_gl, 'VIEWPORT_SIZE', viewportSizeUniform);

                  // Set lights uniforms
                  // TODO needs optimized
                  if (scene) {
                      scene.setLightUniforms(program, renderable.lightGroup, this);
                  }
              }
              else {
                  program = prevProgram;
              }

              // Program changes also needs reset the materials.
              if (programChanged || passConfig.isMaterialChanged(
                  renderable, prevRenderable, material, prevMaterial
              )) {
                  if (material.depthTest !== depthTest) {
                      material.depthTest ? _gl.enable(_gl.DEPTH_TEST) : _gl.disable(_gl.DEPTH_TEST);
                      depthTest = material.depthTest;
                  }
                  if (material.depthMask !== depthMask) {
                      _gl.depthMask(material.depthMask);
                      depthMask = material.depthMask;
                  }
                  if (material.transparent !== transparent) {
                      material.transparent ? _gl.enable(_gl.BLEND) : _gl.disable(_gl.BLEND);
                      transparent = material.transparent;
                  }
                  // TODO cache blending
                  if (material.transparent) {
                      if (material.blend) {
                          material.blend(_gl);
                      }
                      else {
                          // Default blend function
                          _gl.blendEquationSeparate(_gl.FUNC_ADD, _gl.FUNC_ADD);
                          _gl.blendFuncSeparate(_gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA, _gl.ONE, _gl.ONE_MINUS_SRC_ALPHA);
                      }
                  }

                  materialTakesTextureSlot = this._bindMaterial(
                      renderable, material, program,
                      prevRenderable || null, prevMaterial || null, prevProgram || null,
                      passConfig.getUniform
                  );
                  prevMaterial = material;
              }

              var matrixSemanticKeys = shader.matrixSemanticKeys;

              if (isSceneNode) {
                  for (var k = 0; k < matrixSemanticKeys.length; k++) {
                      var semantic = matrixSemanticKeys[k];
                      var semanticInfo = shader.matrixSemantics[semantic];
                      var matrix = matrices[semantic];
                      if (semanticInfo.isTranspose) {
                          var matrixNoTranspose = matrices[semanticInfo.semanticNoTranspose];
                          __WEBPACK_IMPORTED_MODULE_9__glmatrix_mat4__["a" /* default */].transpose(matrix, matrixNoTranspose);
                      }
                      program.setUniform(_gl, semanticInfo.type, semanticInfo.symbol, matrix);
                  }
              }

              if (renderable.cullFace !== cullFace) {
                  cullFace = renderable.cullFace;
                  _gl.cullFace(cullFace);
              }
              if (renderable.frontFace !== frontFace) {
                  frontFace = renderable.frontFace;
                  _gl.frontFace(frontFace);
              }
              if (renderable.culling !== culling) {
                  culling = renderable.culling;
                  culling ? _gl.enable(_gl.CULL_FACE) : _gl.disable(_gl.CULL_FACE);
              }
              // TODO Not update skeleton in each renderable.
              this._updateSkeleton(renderable, program, materialTakesTextureSlot);
              if (drawIDChanged) {
                  currentVAO = this._bindVAO(vaoExt, shader, geometry, program);
              }
              this._renderObject(renderable, currentVAO, program);

              // After render hook
              passConfig.afterRender(this, renderable);
              renderable.afterRender && renderable.afterRender(this);

              prevProgram = program;
              prevRenderable = renderable;
          }

          this.trigger('afterrenderpass', this, list, camera, passConfig);
      },

      getMaxJointNumber: function () {
          return this.maxJointNumber;
      },

      _updateSkeleton: function (object, program, slot) {
          var _gl = this.gl;
          var skeleton = object.skeleton;
          // Set pose matrices of skinned mesh
          if (skeleton) {
              // TODO Update before culling.
              skeleton.update();
              if (object.joints.length > this.getMaxJointNumber()) {
                  var skinMatricesTexture = skeleton.getSubSkinMatricesTexture(object.__uid__, object.joints);
                  program.useTextureSlot(this, skinMatricesTexture, slot);
                  program.setUniform(_gl, '1i', 'skinMatricesTexture', slot);
                  program.setUniform(_gl, '1f', 'skinMatricesTextureSize', skinMatricesTexture.width);
              }
              else {
                  var skinMatricesArray = skeleton.getSubSkinMatrices(object.__uid__, object.joints);
                  program.setUniformOfSemantic(_gl, 'SKIN_MATRIX', skinMatricesArray);
              }
          }
      },

      _renderObject: function (renderable, vao, program) {
          var _gl = this.gl;
          var geometry = renderable.geometry;

          var glDrawMode = renderable.mode;
          if (glDrawMode == null) {
              glDrawMode = 0x0004;
          }

          var ext = null;
          var isInstanced = renderable.isInstancedMesh && renderable.isInstancedMesh();
          if (isInstanced) {
              ext = this.getGLExtension('ANGLE_instanced_arrays');
              if (!ext) {
                  console.warn('Device not support ANGLE_instanced_arrays extension');
                  return;
              }
          }

          var instancedAttrLocations;
          if (isInstanced) {
              instancedAttrLocations = this._bindInstancedAttributes(renderable, program, ext);
          }

          if (vao.indicesBuffer) {
              var uintExt = this.getGLExtension('OES_element_index_uint');
              var useUintExt = uintExt && (geometry.indices instanceof Uint32Array);
              var indicesType = useUintExt ? _gl.UNSIGNED_INT : _gl.UNSIGNED_SHORT;

              if (isInstanced) {
                  ext.drawElementsInstancedANGLE(
                      glDrawMode, vao.indicesBuffer.count, indicesType, 0, renderable.getInstanceCount()
                  );
              }
              else {
                  _gl.drawElements(glDrawMode, vao.indicesBuffer.count, indicesType, 0);
              }
          }
          else {
              if (isInstanced) {
                  ext.drawArraysInstancedANGLE(glDrawMode, 0, geometry.vertexCount, renderable.getInstanceCount());
              }
              else {
                  // FIXME Use vertex number in buffer
                  // vertexCount may get the wrong value when geometry forget to mark dirty after update
                  _gl.drawArrays(glDrawMode, 0, geometry.vertexCount);
              }
          }

          if (isInstanced) {
              for (var i = 0; i < instancedAttrLocations.length; i++) {
                  if (!instancedAttrLocations[i].enabled) {
                      _gl.disableVertexAttribArray(instancedAttrLocations[i].location);
                  }
                  ext.vertexAttribDivisorANGLE(instancedAttrLocations[i].location, 0);
              }
          }
      },

      _bindInstancedAttributes: function (renderable, program, ext) {
          var _gl = this.gl;
          var instancedBuffers = renderable.getInstancedAttributesBuffers(this);
          var locations = [];

          for (var i = 0; i < instancedBuffers.length; i++) {
              var bufferObj = instancedBuffers[i];
              var location = program.getAttribLocation(_gl, bufferObj.symbol);
              if (location < 0) {
                  continue;
              }

              var glType = attributeBufferTypeMap[bufferObj.type] || _gl.FLOAT;            var isEnabled = program.isAttribEnabled(this, location);
              if (!program.isAttribEnabled(this, location)) {
                  _gl.enableVertexAttribArray(location);
              }
              locations.push({
                  location: location,
                  enabled: isEnabled
              });
              _gl.bindBuffer(_gl.ARRAY_BUFFER, bufferObj.buffer);
              _gl.vertexAttribPointer(location, bufferObj.size, glType, false, 0, 0);
              ext.vertexAttribDivisorANGLE(location, bufferObj.divisor);
          }

          return locations;
      },

      _bindMaterial: function (renderable, material, program, prevRenderable, prevMaterial, prevProgram, getUniformValue) {
          var _gl = this.gl;
          // PENDING Same texture in different material take different slot?

          // May use shader of other material if shader code are same
          var sameProgram = prevProgram === program;

          var currentTextureSlot = program.currentTextureSlot();
          var enabledUniforms = material.getEnabledUniforms();
          var textureUniforms = material.getTextureUniforms();
          var placeholderTexture = this._placeholderTexture;

          for (var u = 0; u < textureUniforms.length; u++) {
              var symbol = textureUniforms[u];
              var uniformValue = getUniformValue(renderable, material, symbol);
              var uniformType = material.uniforms[symbol].type;
              // Not use `instanceof` to determine if a value is texture in Material#bind.
              // Use type instead, in some case texture may be in different namespaces.
              // TODO Duck type validate.
              if (uniformType === 't' && uniformValue) {
                  // Reset slot
                  uniformValue.__slot = -1;
              }
              else if (uniformType === 'tv') {
                  for (var i = 0; i < uniformValue.length; i++) {
                      if (uniformValue[i]) {
                          uniformValue[i].__slot = -1;
                      }
                  }
              }
          }

          placeholderTexture.__slot = -1;

          // Set uniforms
          for (var u = 0; u < enabledUniforms.length; u++) {
              var symbol = enabledUniforms[u];
              var uniform = material.uniforms[symbol];
              var uniformValue = getUniformValue(renderable, material, symbol);
              var uniformType = uniform.type;
              var isTexture = uniformType === 't';

              if (isTexture) {
                  if (!uniformValue || !uniformValue.isRenderable()) {
                      uniformValue = placeholderTexture;
                  }
              }
              // PENDING
              // When binding two materials with the same shader
              // Many uniforms will be be set twice even if they have the same value
              // So add a evaluation to see if the uniform is really needed to be set
              if (prevMaterial && sameProgram) {
                  var prevUniformValue = getUniformValue(prevRenderable, prevMaterial, symbol);
                  if (isTexture) {
                      if (!prevUniformValue || !prevUniformValue.isRenderable()) {
                          prevUniformValue = placeholderTexture;
                      }
                  }

                  if (prevUniformValue === uniformValue) {
                      if (isTexture) {
                          // Still take the slot to make sure same texture in different materials have same slot.
                          program.takeCurrentTextureSlot(this, null);
                      }
                      else if (uniformType === 'tv' && uniformValue) {
                          for (var i = 0; i < uniformValue.length; i++) {
                              program.takeCurrentTextureSlot(this, null);
                          }
                      }
                      continue;
                  }
              }

              if (uniformValue == null) {
                  continue;
              }
              else if (isTexture) {
                  if (uniformValue.__slot < 0) {
                      var slot = program.currentTextureSlot();
                      var res = program.setUniform(_gl, '1i', symbol, slot);
                      if (res) { // Texture uniform is enabled
                          program.takeCurrentTextureSlot(this, uniformValue);
                          uniformValue.__slot = slot;
                      }
                  }
                  // Multiple uniform use same texture..
                  else {
                      program.setUniform(_gl, '1i', symbol, uniformValue.__slot);
                  }
              }
              else if (Array.isArray(uniformValue)) {
                  if (uniformValue.length === 0) {
                      continue;
                  }
                  // Texture Array
                  if (uniformType === 'tv') {
                      if (!program.hasUniform(symbol)) {
                          continue;
                      }

                      var arr = [];
                      for (var i = 0; i < uniformValue.length; i++) {
                          var texture = uniformValue[i];

                          if (texture.__slot < 0) {
                              var slot = program.currentTextureSlot();
                              arr.push(slot);
                              program.takeCurrentTextureSlot(this, texture);
                              texture.__slot = slot;
                          }
                          else {
                              arr.push(texture.__slot);
                          }
                      }

                      program.setUniform(_gl, '1iv', symbol, arr);
                  }
                  else {
                      program.setUniform(_gl, uniform.type, symbol, uniformValue);
                  }
              }
              else {
                  program.setUniform(_gl, uniform.type, symbol, uniformValue);
              }
          }
          var newSlot = program.currentTextureSlot();
          // Texture slot maybe used out of material.
          program.resetTextureSlot(currentTextureSlot);
          return newSlot;
      },

      _bindVAO: function (vaoExt, shader, geometry, program) {
          var isStatic = !geometry.dynamic;
          var _gl = this.gl;

          var vaoId = this.__uid__ + '-' + program.__uid__;
          var vao = geometry.__vaoCache[vaoId];
          if (!vao) {
              var chunks = geometry.getBufferChunks(this);
              if (!chunks || !chunks.length) {  // Empty mesh
                  return;
              }
              var chunk = chunks[0];
              var attributeBuffers = chunk.attributeBuffers;
              var indicesBuffer = chunk.indicesBuffer;

              var availableAttributes = [];
              var availableAttributeSymbols = [];
              for (var a = 0; a < attributeBuffers.length; a++) {
                  var attributeBufferInfo = attributeBuffers[a];
                  var name = attributeBufferInfo.name;
                  var semantic = attributeBufferInfo.semantic;
                  var symbol;
                  if (semantic) {
                      var semanticInfo = shader.attributeSemantics[semantic];
                      symbol = semanticInfo && semanticInfo.symbol;
                  }
                  else {
                      symbol = name;
                  }
                  if (symbol && program.attributes[symbol]) {
                      availableAttributes.push(attributeBufferInfo);
                      availableAttributeSymbols.push(symbol);
                  }
              }

              vao = new VertexArrayObject(
                  availableAttributes,
                  availableAttributeSymbols,
                  indicesBuffer
              );

              if (isStatic) {
                  geometry.__vaoCache[vaoId] = vao;
              }
          }

          var needsBindAttributes = true;

          // Create vertex object array cost a lot
          // So we don't use it on the dynamic object
          if (vaoExt && isStatic) {
              // Use vertex array object
              // http://blog.tojicode.com/2012/10/oesvertexarrayobject-extension.html
              if (vao.vao == null) {
                  vao.vao = vaoExt.createVertexArrayOES();
              }
              else {
                  needsBindAttributes = false;
              }
              vaoExt.bindVertexArrayOES(vao.vao);
          }

          var availableAttributes = vao.availableAttributes;
          var indicesBuffer = vao.indicesBuffer;

          if (needsBindAttributes) {
              var locationList = program.enableAttributes(this, vao.availableAttributeSymbols, (vaoExt && isStatic && vao));
              // Setting attributes;
              for (var a = 0; a < availableAttributes.length; a++) {
                  var location = locationList[a];
                  if (location === -1) {
                      continue;
                  }
                  var attributeBufferInfo = availableAttributes[a];
                  var buffer = attributeBufferInfo.buffer;
                  var size = attributeBufferInfo.size;
                  var glType = attributeBufferTypeMap[attributeBufferInfo.type] || _gl.FLOAT;

                  _gl.bindBuffer(_gl.ARRAY_BUFFER, buffer);
                  _gl.vertexAttribPointer(location, size, glType, false, 0, 0);
              }

              if (geometry.isUseIndices()) {
                  _gl.bindBuffer(_gl.ELEMENT_ARRAY_BUFFER, indicesBuffer.buffer);
              }
          }

          return vao;
      },

      renderPreZ: function (list, scene, camera) {
          var _gl = this.gl;
          var preZPassMaterial = this._prezMaterial || new __WEBPACK_IMPORTED_MODULE_4__Material__["a" /* default */]({
              shader: new __WEBPACK_IMPORTED_MODULE_7__Shader__["a" /* default */](__WEBPACK_IMPORTED_MODULE_7__Shader__["a" /* default */].source('clay.prez.vertex'), __WEBPACK_IMPORTED_MODULE_7__Shader__["a" /* default */].source('clay.prez.fragment'))
          });
          this._prezMaterial = preZPassMaterial;
          if (this.logDepthBuffer) {
              this._prezMaterial.setUniform('logDepthBufFC', 2.0 / (Math.log(camera.far + 1.0 ) / Math.LN2));
          }

          _gl.colorMask(false, false, false, false);
          _gl.depthMask(true);

          // Status
          this.renderPass(list, camera, {
              ifRender: function (renderable) {
                  return !renderable.ignorePreZ;
              },
              isMaterialChanged: function (renderable, prevRenderable) {
                  var matA = renderable.material;
                  var matB = prevRenderable.material;
                  return matA.get('diffuseMap') !== matB.get('diffuseMap')
                      || (matA.get('alphaCutoff') || 0) !== (matB.get('alphaCutoff') || 0);
              },
              getUniform: function (renderable, depthMaterial, symbol) {
                  if (symbol === 'alphaMap') {
                      return renderable.material.get('diffuseMap');
                  }
                  else if (symbol === 'alphaCutoff') {
                      if (renderable.material.isDefined('fragment', 'ALPHA_TEST')
                          && renderable.material.get('diffuseMap')
                      ) {
                          var alphaCutoff = renderable.material.get('alphaCutoff');
                          return alphaCutoff || 0;
                      }
                      return 0;
                  }
                  else if (symbol === 'uvRepeat') {
                      return renderable.material.get('uvRepeat');
                  }
                  else if (symbol === 'uvOffset') {
                      return renderable.material.get('uvOffset');
                  }
                  else {
                      return depthMaterial.get(symbol);
                  }
              },
              getMaterial: function () {
                  return preZPassMaterial;
              },
              sort: this.opaqueSortCompare
          });

          _gl.colorMask(true, true, true, true);
          _gl.depthMask(true);
      },

      /**
       * Dispose given scene, including all geometris, textures and shaders in the scene
       * @param {clay.Scene} scene
       */
      disposeScene: function(scene) {
          this.disposeNode(scene, true, true);
          scene.dispose();
      },

      /**
       * Dispose given node, including all geometries, textures and shaders attached on it or its descendant
       * @param {clay.Node} node
       * @param {boolean} [disposeGeometry=false] If dispose the geometries used in the descendant mesh
       * @param {boolean} [disposeTexture=false] If dispose the textures used in the descendant mesh
       */
      disposeNode: function(root, disposeGeometry, disposeTexture) {
          // Dettached from parent
          if (root.getParent()) {
              root.getParent().remove(root);
          }
          var disposedMap = {};
          root.traverse(function(node) {
              var material = node.material;
              if (node.geometry && disposeGeometry) {
                  node.geometry.dispose(this);
              }
              if (disposeTexture && material && !disposedMap[material.__uid__]) {
                  var textureUniforms = material.getTextureUniforms();
                  for (var u = 0; u < textureUniforms.length; u++) {
                      var uniformName = textureUniforms[u];
                      var val = material.uniforms[uniformName].value;
                      var uniformType = material.uniforms[uniformName].type;
                      if (!val) {
                          continue;
                      }
                      if (uniformType === 't') {
                          val.dispose && val.dispose(this);
                      }
                      else if (uniformType === 'tv') {
                          for (var k = 0; k < val.length; k++) {
                              if (val[k]) {
                                  val[k].dispose && val[k].dispose(this);
                              }
                          }
                      }
                  }
                  disposedMap[material.__uid__] = true;
              }
              // Particle system and AmbientCubemap light need to dispose
              if (node.dispose) {
                  node.dispose(this);
              }
          }, this);
      },

      /**
       * Dispose given geometry
       * @param {clay.Geometry} geometry
       */
      disposeGeometry: function(geometry) {
          geometry.dispose(this);
      },

      /**
       * Dispose given texture
       * @param {clay.Texture} texture
       */
      disposeTexture: function(texture) {
          texture.dispose(this);
      },

      /**
       * Dispose given frame buffer
       * @param {clay.FrameBuffer} frameBuffer
       */
      disposeFrameBuffer: function(frameBuffer) {
          frameBuffer.dispose(this);
      },

      /**
       * Dispose renderer
       */
      dispose: function () {},

      /**
       * Convert screen coords to normalized device coordinates(NDC)
       * Screen coords can get from mouse event, it is positioned relative to canvas element
       * NDC can be used in ray casting with Camera.prototype.castRay methods
       *
       * @param  {number}       x
       * @param  {number}       y
       * @param  {clay.Vector2} [out]
       * @return {clay.Vector2}
       */
      screenToNDC: function(x, y, out) {
          if (!out) {
              out = new __WEBPACK_IMPORTED_MODULE_5__math_Vector2__["a" /* default */]();
          }
          // Invert y;
          y = this._height - y;

          var viewport = this.viewport;
          var arr = out.array;
          arr[0] = (x - viewport.x) / viewport.width;
          arr[0] = arr[0] * 2 - 1;
          arr[1] = (y - viewport.y) / viewport.height;
          arr[1] = arr[1] * 2 - 1;

          return out;
      }
  });

  /**
   * Opaque renderables compare function
   * @param  {clay.Renderable} x
   * @param  {clay.Renderable} y
   * @return {boolean}
   * @static
   */
  Renderer.opaqueSortCompare = Renderer.prototype.opaqueSortCompare = function(x, y) {
      // Priority renderOrder -> program -> material -> geometry
      if (x.renderOrder === y.renderOrder) {
          if (x.__program === y.__program) {
              if (x.material === y.material) {
                  return x.geometry.__uid__ - y.geometry.__uid__;
              }
              return x.material.__uid__ - y.material.__uid__;
          }
          if (x.__program && y.__program) {
              return x.__program.__uid__ - y.__program.__uid__;
          }
          return 0;
      }
      return x.renderOrder - y.renderOrder;
  };

  /**
   * Transparent renderables compare function
   * @param  {clay.Renderable} a
   * @param  {clay.Renderable} b
   * @return {boolean}
   * @static
   */
  Renderer.transparentSortCompare = Renderer.prototype.transparentSortCompare = function(x, y) {
      // Priority renderOrder -> depth -> program -> material -> geometry

      if (x.renderOrder === y.renderOrder) {
          if (x.__depth === y.__depth) {
              if (x.__program === y.__program) {
                  if (x.material === y.material) {
                      return x.geometry.__uid__ - y.geometry.__uid__;
                  }
                  return x.material.__uid__ - y.material.__uid__;
              }
              if (x.__program  && y.__program) {
                  return x.__program.__uid__ - y.__program.__uid__;
              }
              return 0;
          }
          // Depth is negative
          // So farther object has smaller depth value
          return x.__depth - y.__depth;
      }
      return x.renderOrder - y.renderOrder;
  };

  // Temporary variables
  var matrices = {
      IDENTITY: mat4Create(),

      WORLD: mat4Create(),
      VIEW: mat4Create(),
      PROJECTION: mat4Create(),
      WORLDVIEW: mat4Create(),
      VIEWPROJECTION: mat4Create(),
      WORLDVIEWPROJECTION: mat4Create(),

      WORLDINVERSE: mat4Create(),
      VIEWINVERSE: mat4Create(),
      PROJECTIONINVERSE: mat4Create(),
      WORLDVIEWINVERSE: mat4Create(),
      VIEWPROJECTIONINVERSE: mat4Create(),
      WORLDVIEWPROJECTIONINVERSE: mat4Create(),

      WORLDTRANSPOSE: mat4Create(),
      VIEWTRANSPOSE: mat4Create(),
      PROJECTIONTRANSPOSE: mat4Create(),
      WORLDVIEWTRANSPOSE: mat4Create(),
      VIEWPROJECTIONTRANSPOSE: mat4Create(),
      WORLDVIEWPROJECTIONTRANSPOSE: mat4Create(),
      WORLDINVERSETRANSPOSE: mat4Create(),
      VIEWINVERSETRANSPOSE: mat4Create(),
      PROJECTIONINVERSETRANSPOSE: mat4Create(),
      WORLDVIEWINVERSETRANSPOSE: mat4Create(),
      VIEWPROJECTIONINVERSETRANSPOSE: mat4Create(),
      WORLDVIEWPROJECTIONINVERSETRANSPOSE: mat4Create()
  };

  /**
   * @name clay.Renderer.COLOR_BUFFER_BIT
   * @type {number}
   */
  Renderer.COLOR_BUFFER_BIT = __WEBPACK_IMPORTED_MODULE_2__core_glenum__["a" /* default */].COLOR_BUFFER_BIT;
  /**
   * @name clay.Renderer.DEPTH_BUFFER_BIT
   * @type {number}
   */
  Renderer.DEPTH_BUFFER_BIT = __WEBPACK_IMPORTED_MODULE_2__core_glenum__["a" /* default */].DEPTH_BUFFER_BIT;
  /**
   * @name clay.Renderer.STENCIL_BUFFER_BIT
   * @type {number}
   */
  Renderer.STENCIL_BUFFER_BIT = __WEBPACK_IMPORTED_MODULE_2__core_glenum__["a" /* default */].STENCIL_BUFFER_BIT;

  /* harmony default export */ __webpack_exports__["a"] = (Renderer);


  /***/ }),
  /* 53 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  function Handler(action, context) {
      this.action = action;
      this.context = context;
  }
  /**
   * @mixin
   * @alias clay.core.mixin.notifier
   */
  var notifier = {
      /**
       * Trigger event
       * @param  {string} name
       */
      trigger: function(name) {
          if (!this.hasOwnProperty('__handlers__')) {
              return;
          }
          if (!this.__handlers__.hasOwnProperty(name)) {
              return;
          }

          var hdls = this.__handlers__[name];
          var l = hdls.length, i = -1, args = arguments;
          // Optimize advise from backbone
          switch (args.length) {
              case 1:
                  while (++i < l) {
                      hdls[i].action.call(hdls[i].context);
                  }
                  return;
              case 2:
                  while (++i < l) {
                      hdls[i].action.call(hdls[i].context, args[1]);
                  }
                  return;
              case 3:
                  while (++i < l) {
                      hdls[i].action.call(hdls[i].context, args[1], args[2]);
                  }
                  return;
              case 4:
                  while (++i < l) {
                      hdls[i].action.call(hdls[i].context, args[1], args[2], args[3]);
                  }
                  return;
              case 5:
                  while (++i < l) {
                      hdls[i].action.call(hdls[i].context, args[1], args[2], args[3], args[4]);
                  }
                  return;
              default:
                  while (++i < l) {
                      hdls[i].action.apply(hdls[i].context, Array.prototype.slice.call(args, 1));
                  }
                  return;
          }
      },
      /**
       * Register event handler
       * @param  {string} name
       * @param  {Function} action
       * @param  {Object} [context]
       * @chainable
       */
      on: function(name, action, context) {
          if (!name || !action) {
              return;
          }
          var handlers = this.__handlers__ || (this.__handlers__={});
          if (!handlers[name]) {
              handlers[name] = [];
          }
          else {
              if (this.has(name, action)) {
                  return;
              }
          }
          var handler = new Handler(action, context || this);
          handlers[name].push(handler);

          return this;
      },

      /**
       * Register event, event will only be triggered once and then removed
       * @param  {string} name
       * @param  {Function} action
       * @param  {Object} [context]
       * @chainable
       */
      once: function(name, action, context) {
          if (!name || !action) {
              return;
          }
          var self = this;
          function wrapper() {
              self.off(name, wrapper);
              action.apply(this, arguments);
          }
          return this.on(name, wrapper, context);
      },

      /**
       * Alias of once('before' + name)
       * @param  {string} name
       * @param  {Function} action
       * @param  {Object} [context]
       * @chainable
       */
      before: function(name, action, context) {
          if (!name || !action) {
              return;
          }
          name = 'before' + name;
          return this.on(name, action, context);
      },

      /**
       * Alias of once('after' + name)
       * @param  {string} name
       * @param  {Function} action
       * @param  {Object} [context]
       * @chainable
       */
      after: function(name, action, context) {
          if (!name || !action) {
              return;
          }
          name = 'after' + name;
          return this.on(name, action, context);
      },

      /**
       * Alias of on('success')
       * @param  {Function} action
       * @param  {Object} [context]
       * @chainable
       */
      success: function(action, context) {
          return this.once('success', action, context);
      },

      /**
       * Alias of on('error')
       * @param  {Function} action
       * @param  {Object} [context]
       * @chainable
       */
      error: function(action, context) {
          return this.once('error', action, context);
      },

      /**
       * Remove event listener
       * @param  {Function} action
       * @param  {Object} [context]
       * @chainable
       */
      off: function(name, action) {

          var handlers = this.__handlers__ || (this.__handlers__={});

          if (!action) {
              handlers[name] = [];
              return;
          }
          if (handlers[name]) {
              var hdls = handlers[name];
              var retains = [];
              for (var i = 0; i < hdls.length; i++) {
                  if (action && hdls[i].action !== action) {
                      retains.push(hdls[i]);
                  }
              }
              handlers[name] = retains;
          }

          return this;
      },

      /**
       * If registered the event handler
       * @param  {string}  name
       * @param  {Function}  action
       * @return {boolean}
       */
      has: function(name, action) {
          var handlers = this.__handlers__;

          if (! handlers ||
              ! handlers[name]) {
              return false;
          }
          var hdls = handlers[name];
          for (var i = 0; i < hdls.length; i++) {
              if (hdls[i].action === action) {
                  return true;
              }
          }
      }
  };

  /* harmony default export */ __webpack_exports__["a"] = (notifier);

  /***/ }),
  /* 54 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Vector3__ = __webpack_require__(3);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__ = __webpack_require__(12);



  var EPSILON = 1e-5;

  /**
   * @constructor
   * @alias clay.Ray
   * @param {clay.Vector3} [origin]
   * @param {clay.Vector3} [direction]
   */
  var Ray = function (origin, direction) {
      /**
       * @type {clay.Vector3}
       */
      this.origin = origin || new __WEBPACK_IMPORTED_MODULE_0__Vector3__["a" /* default */]();
      /**
       * @type {clay.Vector3}
       */
      this.direction = direction || new __WEBPACK_IMPORTED_MODULE_0__Vector3__["a" /* default */]();
  };

  Ray.prototype = {

      constructor: Ray,

      // http://www.siggraph.org/education/materials/HyperGraph/raytrace/rayplane_intersection.htm
      /**
       * Calculate intersection point between ray and a give plane
       * @param  {clay.Plane} plane
       * @param  {clay.Vector3} [out]
       * @return {clay.Vector3}
       */
      intersectPlane: function (plane, out) {
          var pn = plane.normal.array;
          var d = plane.distance;
          var ro = this.origin.array;
          var rd = this.direction.array;

          var divider = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].dot(pn, rd);
          // ray is parallel to the plane
          if (divider === 0) {
              return null;
          }
          if (!out) {
              out = new __WEBPACK_IMPORTED_MODULE_0__Vector3__["a" /* default */]();
          }
          var t = (__WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].dot(pn, ro) - d) / divider;
          __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].scaleAndAdd(out.array, ro, rd, -t);
          out._dirty = true;
          return out;
      },

      /**
       * Mirror the ray against plane
       * @param  {clay.Plane} plane
       */
      mirrorAgainstPlane: function (plane) {
          // Distance to plane
          var d = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].dot(plane.normal.array, this.direction.array);
          __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].scaleAndAdd(this.direction.array, this.direction.array, plane.normal.array, -d * 2);
          this.direction._dirty = true;
      },

      distanceToPoint: (function () {
          var v = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].create();
          return function (point) {
              __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].sub(v, point, this.origin.array);
              // Distance from projection point to origin
              var b = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].dot(v, this.direction.array);
              if (b < 0) {
                  return __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].distance(this.origin.array, point);
              }
              // Squared distance from center to origin
              var c2 = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].lenSquared(v);
              // Squared distance from center to projection point
              return Math.sqrt(c2 - b * b);
          };
      })(),

      /**
       * Calculate intersection point between ray and sphere
       * @param  {clay.Vector3} center
       * @param  {number} radius
       * @param  {clay.Vector3} out
       * @return {clay.Vector3}
       */
      intersectSphere: (function () {
          var v = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].create();
          return function (center, radius, out) {
              var origin = this.origin.array;
              var direction = this.direction.array;
              center = center.array;
              __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].sub(v, center, origin);
              // Distance from projection point to origin
              var b = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].dot(v, direction);
              // Squared distance from center to origin
              var c2 = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].squaredLength(v);
              // Squared distance from center to projection point
              var d2 = c2 - b * b;

              var r2 = radius * radius;
              // No intersection
              if (d2 > r2) {
                  return;
              }

              var a = Math.sqrt(r2 - d2);
              // First intersect point
              var t0 = b - a;
              // Second intersect point
              var t1 = b + a;

              if (!out) {
                  out = new __WEBPACK_IMPORTED_MODULE_0__Vector3__["a" /* default */]();
              }
              if (t0 < 0) {
                  if (t1 < 0) {
                      return null;
                  }
                  else {
                      __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].scaleAndAdd(out.array, origin, direction, t1);
                      return out;
                  }
              }
              else {
                  __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].scaleAndAdd(out.array, origin, direction, t0);
                  return out;
              }
          };
      })(),

      // http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-7-intersecting-simple-shapes/ray-box-intersection/
      /**
       * Calculate intersection point between ray and bounding box
       * @param {clay.BoundingBox} bbox
       * @param {clay.Vector3}
       * @return {clay.Vector3}
       */
      intersectBoundingBox: function (bbox, out) {
          var dir = this.direction.array;
          var origin = this.origin.array;
          var min = bbox.min.array;
          var max = bbox.max.array;

          var invdirx = 1 / dir[0];
          var invdiry = 1 / dir[1];
          var invdirz = 1 / dir[2];

          var tmin, tmax, tymin, tymax, tzmin, tzmax;
          if (invdirx >= 0) {
              tmin = (min[0] - origin[0]) * invdirx;
              tmax = (max[0] - origin[0]) * invdirx;
          }
          else {
              tmax = (min[0] - origin[0]) * invdirx;
              tmin = (max[0] - origin[0]) * invdirx;
          }
          if (invdiry >= 0) {
              tymin = (min[1] - origin[1]) * invdiry;
              tymax = (max[1] - origin[1]) * invdiry;
          }
          else {
              tymax = (min[1] - origin[1]) * invdiry;
              tymin = (max[1] - origin[1]) * invdiry;
          }

          if ((tmin > tymax) || (tymin > tmax)) {
              return null;
          }

          if (tymin > tmin || tmin !== tmin) {
              tmin = tymin;
          }
          if (tymax < tmax || tmax !== tmax) {
              tmax = tymax;
          }

          if (invdirz >= 0) {
              tzmin = (min[2] - origin[2]) * invdirz;
              tzmax = (max[2] - origin[2]) * invdirz;
          }
          else {
              tzmax = (min[2] - origin[2]) * invdirz;
              tzmin = (max[2] - origin[2]) * invdirz;
          }

          if ((tmin > tzmax) || (tzmin > tmax)) {
              return null;
          }

          if (tzmin > tmin || tmin !== tmin) {
              tmin = tzmin;
          }
          if (tzmax < tmax || tmax !== tmax) {
              tmax = tzmax;
          }
          if (tmax < 0) {
              return null;
          }

          var t = tmin >= 0 ? tmin : tmax;

          if (!out) {
              out = new __WEBPACK_IMPORTED_MODULE_0__Vector3__["a" /* default */]();
          }
          __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].scaleAndAdd(out.array, origin, dir, t);
          return out;
      },

      // http://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm
      /**
       * Calculate intersection point between ray and three triangle vertices
       * @param {clay.Vector3} a
       * @param {clay.Vector3} b
       * @param {clay.Vector3} c
       * @param {boolean}           singleSided, CW triangle will be ignored
       * @param {clay.Vector3} [out]
       * @param {clay.Vector3} [barycenteric] barycentric coords
       * @return {clay.Vector3}
       */
      intersectTriangle: (function () {

          var eBA = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].create();
          var eCA = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].create();
          var AO = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].create();
          var vCross = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].create();

          return function (a, b, c, singleSided, out, barycenteric) {
              var dir = this.direction.array;
              var origin = this.origin.array;
              a = a.array;
              b = b.array;
              c = c.array;

              __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].sub(eBA, b, a);
              __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].sub(eCA, c, a);

              __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].cross(vCross, eCA, dir);

              var det = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].dot(eBA, vCross);

              if (singleSided) {
                  if (det > -EPSILON) {
                      return null;
                  }
              }
              else {
                  if (det > -EPSILON && det < EPSILON) {
                      return null;
                  }
              }

              __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].sub(AO, origin, a);
              var u = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].dot(vCross, AO) / det;
              if (u < 0 || u > 1) {
                  return null;
              }

              __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].cross(vCross, eBA, AO);
              var v = __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].dot(dir, vCross) / det;

              if (v < 0 || v > 1 || (u + v > 1)) {
                  return null;
              }

              __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].cross(vCross, eBA, eCA);
              var t = -__WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].dot(AO, vCross) / det;

              if (t < 0) {
                  return null;
              }

              if (!out) {
                  out = new __WEBPACK_IMPORTED_MODULE_0__Vector3__["a" /* default */]();
              }
              if (barycenteric) {
                  __WEBPACK_IMPORTED_MODULE_0__Vector3__["a" /* default */].set(barycenteric, (1 - u - v), u, v);
              }
              __WEBPACK_IMPORTED_MODULE_1__glmatrix_vec3__["a" /* default */].scaleAndAdd(out.array, origin, dir, t);

              return out;
          };
      })(),

      /**
       * Apply an affine transform matrix to the ray
       * @return {clay.Matrix4} matrix
       */
      applyTransform: function (matrix) {
          __WEBPACK_IMPORTED_MODULE_0__Vector3__["a" /* default */].add(this.direction, this.direction, this.origin);
          __WEBPACK_IMPORTED_MODULE_0__Vector3__["a" /* default */].transformMat4(this.origin, this.origin, matrix);
          __WEBPACK_IMPORTED_MODULE_0__Vector3__["a" /* default */].transformMat4(this.direction, this.direction, matrix);

          __WEBPACK_IMPORTED_MODULE_0__Vector3__["a" /* default */].sub(this.direction, this.direction, this.origin);
          __WEBPACK_IMPORTED_MODULE_0__Vector3__["a" /* default */].normalize(this.direction, this.direction);
      },

      /**
       * Copy values from another ray
       * @param {clay.Ray} ray
       */
      copy: function (ray) {
          __WEBPACK_IMPORTED_MODULE_0__Vector3__["a" /* default */].copy(this.origin, ray.origin);
          __WEBPACK_IMPORTED_MODULE_0__Vector3__["a" /* default */].copy(this.direction, ray.direction);
      },

      /**
       * Clone a new ray
       * @return {clay.Ray}
       */
      clone: function () {
          var ray = new Ray();
          ray.copy(this);
          return ray;
      }
  };

  /* harmony default export */ __webpack_exports__["a"] = (Ray);


  /***/ }),
  /* 55 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(20);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__vec3__ = __webpack_require__(12);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__vec4__ = __webpack_require__(33);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__mat3__ = __webpack_require__(34);


  /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, this
      list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
      and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */







  /**
   * @class Quaternion
   * @name quat
   */

  var quat = {};

  /**
   * Creates a new identity quat
   *
   * @returns {quat} a new quaternion
   */
  quat.create = function() {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* GLMAT_ARRAY_TYPE */](4);
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      return out;
  };

  /**
   * Sets a quaternion to represent the shortest rotation from one
   * vector to another.
   *
   * Both vectors are assumed to be unit length.
   *
   * @param {quat} out the receiving quaternion.
   * @param {vec3} a the initial vector
   * @param {vec3} b the destination vector
   * @returns {quat} out
   */
  quat.rotationTo = (function() {
      var tmpvec3 = __WEBPACK_IMPORTED_MODULE_1__vec3__["a" /* default */].create();
      var xUnitVec3 = __WEBPACK_IMPORTED_MODULE_1__vec3__["a" /* default */].fromValues(1,0,0);
      var yUnitVec3 = __WEBPACK_IMPORTED_MODULE_1__vec3__["a" /* default */].fromValues(0,1,0);

      return function(out, a, b) {
          var dot = __WEBPACK_IMPORTED_MODULE_1__vec3__["a" /* default */].dot(a, b);
          if (dot < -0.999999) {
              __WEBPACK_IMPORTED_MODULE_1__vec3__["a" /* default */].cross(tmpvec3, xUnitVec3, a);
              if (__WEBPACK_IMPORTED_MODULE_1__vec3__["a" /* default */].length(tmpvec3) < 0.000001)
                  __WEBPACK_IMPORTED_MODULE_1__vec3__["a" /* default */].cross(tmpvec3, yUnitVec3, a);
              __WEBPACK_IMPORTED_MODULE_1__vec3__["a" /* default */].normalize(tmpvec3, tmpvec3);
              quat.setAxisAngle(out, tmpvec3, Math.PI);
              return out;
          } else if (dot > 0.999999) {
              out[0] = 0;
              out[1] = 0;
              out[2] = 0;
              out[3] = 1;
              return out;
          } else {
              __WEBPACK_IMPORTED_MODULE_1__vec3__["a" /* default */].cross(tmpvec3, a, b);
              out[0] = tmpvec3[0];
              out[1] = tmpvec3[1];
              out[2] = tmpvec3[2];
              out[3] = 1 + dot;
              return quat.normalize(out, out);
          }
      };
  })();

  /**
   * Sets the specified quaternion with values corresponding to the given
   * axes. Each axis is a vec3 and is expected to be unit length and
   * perpendicular to all other specified axes.
   *
   * @param {vec3} view  the vector representing the viewing direction
   * @param {vec3} right the vector representing the local "right" direction
   * @param {vec3} up    the vector representing the local "up" direction
   * @returns {quat} out
   */
  quat.setAxes = (function() {
      var matr = __WEBPACK_IMPORTED_MODULE_3__mat3__["a" /* default */].create();

      return function(out, view, right, up) {
          matr[0] = right[0];
          matr[3] = right[1];
          matr[6] = right[2];

          matr[1] = up[0];
          matr[4] = up[1];
          matr[7] = up[2];

          matr[2] = -view[0];
          matr[5] = -view[1];
          matr[8] = -view[2];

          return quat.normalize(out, quat.fromMat3(out, matr));
      };
  })();

  /**
   * Creates a new quat initialized with values from an existing quaternion
   *
   * @param {quat} a quaternion to clone
   * @returns {quat} a new quaternion
   * @function
   */
  quat.clone = __WEBPACK_IMPORTED_MODULE_2__vec4__["a" /* default */].clone;

  /**
   * Creates a new quat initialized with the given values
   *
   * @param {Number} x X component
   * @param {Number} y Y component
   * @param {Number} z Z component
   * @param {Number} w W component
   * @returns {quat} a new quaternion
   * @function
   */
  quat.fromValues = __WEBPACK_IMPORTED_MODULE_2__vec4__["a" /* default */].fromValues;

  /**
   * Copy the values from one quat to another
   *
   * @param {quat} out the receiving quaternion
   * @param {quat} a the source quaternion
   * @returns {quat} out
   * @function
   */
  quat.copy = __WEBPACK_IMPORTED_MODULE_2__vec4__["a" /* default */].copy;

  /**
   * Set the components of a quat to the given values
   *
   * @param {quat} out the receiving quaternion
   * @param {Number} x X component
   * @param {Number} y Y component
   * @param {Number} z Z component
   * @param {Number} w W component
   * @returns {quat} out
   * @function
   */
  quat.set = __WEBPACK_IMPORTED_MODULE_2__vec4__["a" /* default */].set;

  /**
   * Set a quat to the identity quaternion
   *
   * @param {quat} out the receiving quaternion
   * @returns {quat} out
   */
  quat.identity = function(out) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      return out;
  };

  /**
   * Sets a quat from the given angle and rotation axis,
   * then returns it.
   *
   * @param {quat} out the receiving quaternion
   * @param {vec3} axis the axis around which to rotate
   * @param {Number} rad the angle in radians
   * @returns {quat} out
   **/
  quat.setAxisAngle = function(out, axis, rad) {
      rad = rad * 0.5;
      var s = Math.sin(rad);
      out[0] = s * axis[0];
      out[1] = s * axis[1];
      out[2] = s * axis[2];
      out[3] = Math.cos(rad);
      return out;
  };

  /**
   * Adds two quat's
   *
   * @param {quat} out the receiving quaternion
   * @param {quat} a the first operand
   * @param {quat} b the second operand
   * @returns {quat} out
   * @function
   */
  quat.add = __WEBPACK_IMPORTED_MODULE_2__vec4__["a" /* default */].add;

  /**
   * Multiplies two quat's
   *
   * @param {quat} out the receiving quaternion
   * @param {quat} a the first operand
   * @param {quat} b the second operand
   * @returns {quat} out
   */
  quat.multiply = function(out, a, b) {
      var ax = a[0], ay = a[1], az = a[2], aw = a[3],
          bx = b[0], by = b[1], bz = b[2], bw = b[3];

      out[0] = ax * bw + aw * bx + ay * bz - az * by;
      out[1] = ay * bw + aw * by + az * bx - ax * bz;
      out[2] = az * bw + aw * bz + ax * by - ay * bx;
      out[3] = aw * bw - ax * bx - ay * by - az * bz;
      return out;
  };

  /**
   * Alias for {@link quat.multiply}
   * @function
   */
  quat.mul = quat.multiply;

  /**
   * Scales a quat by a scalar number
   *
   * @param {quat} out the receiving vector
   * @param {quat} a the vector to scale
   * @param {Number} b amount to scale the vector by
   * @returns {quat} out
   * @function
   */
  quat.scale = __WEBPACK_IMPORTED_MODULE_2__vec4__["a" /* default */].scale;

  /**
   * Rotates a quaternion by the given angle about the X axis
   *
   * @param {quat} out quat receiving operation result
   * @param {quat} a quat to rotate
   * @param {number} rad angle (in radians) to rotate
   * @returns {quat} out
   */
  quat.rotateX = function (out, a, rad) {
      rad *= 0.5;

      var ax = a[0], ay = a[1], az = a[2], aw = a[3],
          bx = Math.sin(rad), bw = Math.cos(rad);

      out[0] = ax * bw + aw * bx;
      out[1] = ay * bw + az * bx;
      out[2] = az * bw - ay * bx;
      out[3] = aw * bw - ax * bx;
      return out;
  };

  /**
   * Rotates a quaternion by the given angle about the Y axis
   *
   * @param {quat} out quat receiving operation result
   * @param {quat} a quat to rotate
   * @param {number} rad angle (in radians) to rotate
   * @returns {quat} out
   */
  quat.rotateY = function (out, a, rad) {
      rad *= 0.5;

      var ax = a[0], ay = a[1], az = a[2], aw = a[3],
          by = Math.sin(rad), bw = Math.cos(rad);

      out[0] = ax * bw - az * by;
      out[1] = ay * bw + aw * by;
      out[2] = az * bw + ax * by;
      out[3] = aw * bw - ay * by;
      return out;
  };

  /**
   * Rotates a quaternion by the given angle about the Z axis
   *
   * @param {quat} out quat receiving operation result
   * @param {quat} a quat to rotate
   * @param {number} rad angle (in radians) to rotate
   * @returns {quat} out
   */
  quat.rotateZ = function (out, a, rad) {
      rad *= 0.5;

      var ax = a[0], ay = a[1], az = a[2], aw = a[3],
          bz = Math.sin(rad), bw = Math.cos(rad);

      out[0] = ax * bw + ay * bz;
      out[1] = ay * bw - ax * bz;
      out[2] = az * bw + aw * bz;
      out[3] = aw * bw - az * bz;
      return out;
  };

  /**
   * Calculates the W component of a quat from the X, Y, and Z components.
   * Assumes that quaternion is 1 unit in length.
   * Any existing W component will be ignored.
   *
   * @param {quat} out the receiving quaternion
   * @param {quat} a quat to calculate W component of
   * @returns {quat} out
   */
  quat.calculateW = function (out, a) {
      var x = a[0], y = a[1], z = a[2];

      out[0] = x;
      out[1] = y;
      out[2] = z;
      out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
      return out;
  };

  /**
   * Calculates the dot product of two quat's
   *
   * @param {quat} a the first operand
   * @param {quat} b the second operand
   * @returns {Number} dot product of a and b
   * @function
   */
  quat.dot = __WEBPACK_IMPORTED_MODULE_2__vec4__["a" /* default */].dot;

  /**
   * Performs a linear interpolation between two quat's
   *
   * @param {quat} out the receiving quaternion
   * @param {quat} a the first operand
   * @param {quat} b the second operand
   * @param {Number} t interpolation amount between the two inputs
   * @returns {quat} out
   * @function
   */
  quat.lerp = __WEBPACK_IMPORTED_MODULE_2__vec4__["a" /* default */].lerp;

  /**
   * Performs a spherical linear interpolation between two quat
   *
   * @param {quat} out the receiving quaternion
   * @param {quat} a the first operand
   * @param {quat} b the second operand
   * @param {Number} t interpolation amount between the two inputs
   * @returns {quat} out
   */
  quat.slerp = function (out, a, b, t) {
      // benchmarks:
      //    http://jsperf.com/quaternion-slerp-implementations

      var ax = a[0], ay = a[1], az = a[2], aw = a[3],
          bx = b[0], by = b[1], bz = b[2], bw = b[3];

      var        omega, cosom, sinom, scale0, scale1;

      // calc cosine
      cosom = ax * bx + ay * by + az * bz + aw * bw;
      // adjust signs (if necessary)
      if ( cosom < 0.0 ) {
          cosom = -cosom;
          bx = - bx;
          by = - by;
          bz = - bz;
          bw = - bw;
      }
      // calculate coefficients
      if ( (1.0 - cosom) > 0.000001 ) {
          // standard case (slerp)
          omega  = Math.acos(cosom);
          sinom  = Math.sin(omega);
          scale0 = Math.sin((1.0 - t) * omega) / sinom;
          scale1 = Math.sin(t * omega) / sinom;
      } else {
          // "from" and "to" quaternions are very close
          //  ... so we can do a linear interpolation
          scale0 = 1.0 - t;
          scale1 = t;
      }
      // calculate final values
      out[0] = scale0 * ax + scale1 * bx;
      out[1] = scale0 * ay + scale1 * by;
      out[2] = scale0 * az + scale1 * bz;
      out[3] = scale0 * aw + scale1 * bw;

      return out;
  };

  /**
   * Calculates the inverse of a quat
   *
   * @param {quat} out the receiving quaternion
   * @param {quat} a quat to calculate inverse of
   * @returns {quat} out
   */
  quat.invert = function(out, a) {
      var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
          dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,
          invDot = dot ? 1.0/dot : 0;

      // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

      out[0] = -a0*invDot;
      out[1] = -a1*invDot;
      out[2] = -a2*invDot;
      out[3] = a3*invDot;
      return out;
  };

  /**
   * Calculates the conjugate of a quat
   * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
   *
   * @param {quat} out the receiving quaternion
   * @param {quat} a quat to calculate conjugate of
   * @returns {quat} out
   */
  quat.conjugate = function (out, a) {
      out[0] = -a[0];
      out[1] = -a[1];
      out[2] = -a[2];
      out[3] = a[3];
      return out;
  };

  /**
   * Calculates the length of a quat
   *
   * @param {quat} a vector to calculate length of
   * @returns {Number} length of a
   * @function
   */
  quat.length = __WEBPACK_IMPORTED_MODULE_2__vec4__["a" /* default */].length;

  /**
   * Alias for {@link quat.length}
   * @function
   */
  quat.len = quat.length;

  /**
   * Calculates the squared length of a quat
   *
   * @param {quat} a vector to calculate squared length of
   * @returns {Number} squared length of a
   * @function
   */
  quat.squaredLength = __WEBPACK_IMPORTED_MODULE_2__vec4__["a" /* default */].squaredLength;

  /**
   * Alias for {@link quat.squaredLength}
   * @function
   */
  quat.sqrLen = quat.squaredLength;

  /**
   * Normalize a quat
   *
   * @param {quat} out the receiving quaternion
   * @param {quat} a quaternion to normalize
   * @returns {quat} out
   * @function
   */
  quat.normalize = __WEBPACK_IMPORTED_MODULE_2__vec4__["a" /* default */].normalize;

  /**
   * Creates a quaternion from the given 3x3 rotation matrix.
   *
   * NOTE: The resultant quaternion is not normalized, so you should be sure
   * to renormalize the quaternion yourself where necessary.
   *
   * @param {quat} out the receiving quaternion
   * @param {mat3} m rotation matrix
   * @returns {quat} out
   * @function
   */
  quat.fromMat3 = function(out, m) {
      // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
      // article "Quaternion Calculus and Fast Animation".
      var fTrace = m[0] + m[4] + m[8];
      var fRoot;

      if ( fTrace > 0.0 ) {
          // |w| > 1/2, may as well choose w > 1/2
          fRoot = Math.sqrt(fTrace + 1.0);  // 2w
          out[3] = 0.5 * fRoot;
          fRoot = 0.5/fRoot;  // 1/(4w)
          out[0] = (m[5]-m[7])*fRoot;
          out[1] = (m[6]-m[2])*fRoot;
          out[2] = (m[1]-m[3])*fRoot;
      } else {
          // |w| <= 1/2
          var i = 0;
          if ( m[4] > m[0] )
            i = 1;
          if ( m[8] > m[i*3+i] )
            i = 2;
          var j = (i+1)%3;
          var k = (i+2)%3;

          fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);
          out[i] = 0.5 * fRoot;
          fRoot = 0.5 / fRoot;
          out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;
          out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;
          out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;
      }

      return out;
  };

  /* harmony default export */ __webpack_exports__["a"] = (quat);

  /***/ }),
  /* 56 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__ = __webpack_require__(55);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__glmatrix_mat3__ = __webpack_require__(34);



  /**
   * @constructor
   * @alias clay.Quaternion
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} w
   */
  var Quaternion = function (x, y, z, w) {

      x = x || 0;
      y = y || 0;
      z = z || 0;
      w = w === undefined ? 1 : w;

      /**
       * Storage of Quaternion, read and write of x, y, z, w will change the values in array
       * All methods also operate on the array instead of x, y, z, w components
       * @name array
       * @type {Float32Array}
       * @memberOf clay.Quaternion#
       */
      this.array = __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].fromValues(x, y, z, w);

      /**
       * Dirty flag is used by the Node to determine
       * if the matrix is updated to latest
       * @name _dirty
       * @type {boolean}
       * @memberOf clay.Quaternion#
       */
      this._dirty = true;
  };

  Quaternion.prototype = {

      constructor: Quaternion,

      /**
       * Add b to self
       * @param  {clay.Quaternion} b
       * @return {clay.Quaternion}
       */
      add: function (b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].add(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Calculate the w component from x, y, z component
       * @return {clay.Quaternion}
       */
      calculateW: function () {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].calculateW(this.array, this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Set x, y and z components
       * @param  {number}  x
       * @param  {number}  y
       * @param  {number}  z
       * @param  {number}  w
       * @return {clay.Quaternion}
       */
      set: function (x, y, z, w) {
          this.array[0] = x;
          this.array[1] = y;
          this.array[2] = z;
          this.array[3] = w;
          this._dirty = true;
          return this;
      },

      /**
       * Set x, y, z and w components from array
       * @param  {Float32Array|number[]} arr
       * @return {clay.Quaternion}
       */
      setArray: function (arr) {
          this.array[0] = arr[0];
          this.array[1] = arr[1];
          this.array[2] = arr[2];
          this.array[3] = arr[3];

          this._dirty = true;
          return this;
      },

      /**
       * Clone a new Quaternion
       * @return {clay.Quaternion}
       */
      clone: function () {
          return new Quaternion(this.x, this.y, this.z, this.w);
      },

      /**
       * Calculates the conjugate of self If the quaternion is normalized,
       * this function is faster than invert and produces the same result.
       *
       * @return {clay.Quaternion}
       */
      conjugate: function () {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].conjugate(this.array, this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Copy from b
       * @param  {clay.Quaternion} b
       * @return {clay.Quaternion}
       */
      copy: function (b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].copy(this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Dot product of self and b
       * @param  {clay.Quaternion} b
       * @return {number}
       */
      dot: function (b) {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].dot(this.array, b.array);
      },

      /**
       * Set from the given 3x3 rotation matrix
       * @param  {clay.Matrix3} m
       * @return {clay.Quaternion}
       */
      fromMat3: function (m) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].fromMat3(this.array, m.array);
          this._dirty = true;
          return this;
      },

      /**
       * Set from the given 4x4 rotation matrix
       * The 4th column and 4th row will be droped
       * @param  {clay.Matrix4} m
       * @return {clay.Quaternion}
       */
      fromMat4: (function () {
          var m3 = __WEBPACK_IMPORTED_MODULE_1__glmatrix_mat3__["a" /* default */].create();
          return function (m) {
              __WEBPACK_IMPORTED_MODULE_1__glmatrix_mat3__["a" /* default */].fromMat4(m3, m.array);
              // TODO Not like mat4, mat3 in glmatrix seems to be row-based
              __WEBPACK_IMPORTED_MODULE_1__glmatrix_mat3__["a" /* default */].transpose(m3, m3);
              __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].fromMat3(this.array, m3);
              this._dirty = true;
              return this;
          };
      })(),

      /**
       * Set to identity quaternion
       * @return {clay.Quaternion}
       */
      identity: function () {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].identity(this.array);
          this._dirty = true;
          return this;
      },
      /**
       * Invert self
       * @return {clay.Quaternion}
       */
      invert: function () {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].invert(this.array, this.array);
          this._dirty = true;
          return this;
      },
      /**
       * Alias of length
       * @return {number}
       */
      len: function () {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].len(this.array);
      },

      /**
       * Calculate the length
       * @return {number}
       */
      length: function () {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].length(this.array);
      },

      /**
       * Linear interpolation between a and b
       * @param  {clay.Quaternion} a
       * @param  {clay.Quaternion} b
       * @param  {number}  t
       * @return {clay.Quaternion}
       */
      lerp: function (a, b, t) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].lerp(this.array, a.array, b.array, t);
          this._dirty = true;
          return this;
      },

      /**
       * Alias for multiply
       * @param  {clay.Quaternion} b
       * @return {clay.Quaternion}
       */
      mul: function (b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].mul(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Alias for multiplyLeft
       * @param  {clay.Quaternion} a
       * @return {clay.Quaternion}
       */
      mulLeft: function (a) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].multiply(this.array, a.array, this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Mutiply self and b
       * @param  {clay.Quaternion} b
       * @return {clay.Quaternion}
       */
      multiply: function (b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].multiply(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Mutiply a and self
       * Quaternion mutiply is not commutative, so the result of mutiplyLeft is different with multiply.
       * @param  {clay.Quaternion} a
       * @return {clay.Quaternion}
       */
      multiplyLeft: function (a) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].multiply(this.array, a.array, this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Normalize self
       * @return {clay.Quaternion}
       */
      normalize: function () {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].normalize(this.array, this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Rotate self by a given radian about X axis
       * @param {number} rad
       * @return {clay.Quaternion}
       */
      rotateX: function (rad) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].rotateX(this.array, this.array, rad);
          this._dirty = true;
          return this;
      },

      /**
       * Rotate self by a given radian about Y axis
       * @param {number} rad
       * @return {clay.Quaternion}
       */
      rotateY: function (rad) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].rotateY(this.array, this.array, rad);
          this._dirty = true;
          return this;
      },

      /**
       * Rotate self by a given radian about Z axis
       * @param {number} rad
       * @return {clay.Quaternion}
       */
      rotateZ: function (rad) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].rotateZ(this.array, this.array, rad);
          this._dirty = true;
          return this;
      },

      /**
       * Sets self to represent the shortest rotation from Vector3 a to Vector3 b.
       * a and b needs to be normalized
       * @param  {clay.Vector3} a
       * @param  {clay.Vector3} b
       * @return {clay.Quaternion}
       */
      rotationTo: function (a, b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].rotationTo(this.array, a.array, b.array);
          this._dirty = true;
          return this;
      },
      /**
       * Sets self with values corresponding to the given axes
       * @param {clay.Vector3} view
       * @param {clay.Vector3} right
       * @param {clay.Vector3} up
       * @return {clay.Quaternion}
       */
      setAxes: function (view, right, up) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].setAxes(this.array, view.array, right.array, up.array);
          this._dirty = true;
          return this;
      },

      /**
       * Sets self with a rotation axis and rotation angle
       * @param {clay.Vector3} axis
       * @param {number} rad
       * @return {clay.Quaternion}
       */
      setAxisAngle: function (axis, rad) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].setAxisAngle(this.array, axis.array, rad);
          this._dirty = true;
          return this;
      },
      /**
       * Perform spherical linear interpolation between a and b
       * @param  {clay.Quaternion} a
       * @param  {clay.Quaternion} b
       * @param  {number} t
       * @return {clay.Quaternion}
       */
      slerp: function (a, b, t) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].slerp(this.array, a.array, b.array, t);
          this._dirty = true;
          return this;
      },

      /**
       * Alias for squaredLength
       * @return {number}
       */
      sqrLen: function () {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].sqrLen(this.array);
      },

      /**
       * Squared length of self
       * @return {number}
       */
      squaredLength: function () {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].squaredLength(this.array);
      },

      /**
       * Set from euler
       * @param {clay.Vector3} v
       * @param {String} order
       */
      fromEuler: function (v, order) {
          return Quaternion.fromEuler(this, v, order);
      },

      toString: function () {
          return '[' + Array.prototype.join.call(this.array, ',') + ']';
      },

      toArray: function () {
          return Array.prototype.slice.call(this.array);
      }
  };

  var defineProperty = Object.defineProperty;
  // Getter and Setter
  if (defineProperty) {

      var proto = Quaternion.prototype;
      /**
       * @name x
       * @type {number}
       * @memberOf clay.Quaternion
       * @instance
       */
      defineProperty(proto, 'x', {
          get: function () {
              return this.array[0];
          },
          set: function (value) {
              this.array[0] = value;
              this._dirty = true;
          }
      });

      /**
       * @name y
       * @type {number}
       * @memberOf clay.Quaternion
       * @instance
       */
      defineProperty(proto, 'y', {
          get: function () {
              return this.array[1];
          },
          set: function (value) {
              this.array[1] = value;
              this._dirty = true;
          }
      });

      /**
       * @name z
       * @type {number}
       * @memberOf clay.Quaternion
       * @instance
       */
      defineProperty(proto, 'z', {
          get: function () {
              return this.array[2];
          },
          set: function (value) {
              this.array[2] = value;
              this._dirty = true;
          }
      });

      /**
       * @name w
       * @type {number}
       * @memberOf clay.Quaternion
       * @instance
       */
      defineProperty(proto, 'w', {
          get: function () {
              return this.array[3];
          },
          set: function (value) {
              this.array[3] = value;
              this._dirty = true;
          }
      });
  }

  // Supply methods that are not in place

  /**
   * @param  {clay.Quaternion} out
   * @param  {clay.Quaternion} a
   * @param  {clay.Quaternion} b
   * @return {clay.Quaternion}
   */
  Quaternion.add = function (out, a, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].add(out.array, a.array, b.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Quaternion} out
   * @param  {number}     x
   * @param  {number}     y
   * @param  {number}     z
   * @param  {number}     w
   * @return {clay.Quaternion}
   */
  Quaternion.set = function (out, x, y, z, w) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].set(out.array, x, y, z, w);
      out._dirty = true;
  };

  /**
   * @param  {clay.Quaternion} out
   * @param  {clay.Quaternion} b
   * @return {clay.Quaternion}
   */
  Quaternion.copy = function (out, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].copy(out.array, b.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Quaternion} out
   * @param  {clay.Quaternion} a
   * @return {clay.Quaternion}
   */
  Quaternion.calculateW = function (out, a) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].calculateW(out.array, a.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Quaternion} out
   * @param  {clay.Quaternion} a
   * @return {clay.Quaternion}
   */
  Quaternion.conjugate = function (out, a) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].conjugate(out.array, a.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Quaternion} out
   * @return {clay.Quaternion}
   */
  Quaternion.identity = function (out) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].identity(out.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Quaternion} out
   * @param  {clay.Quaternion} a
   * @return {clay.Quaternion}
   */
  Quaternion.invert = function (out, a) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].invert(out.array, a.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Quaternion} a
   * @param  {clay.Quaternion} b
   * @return {number}
   */
  Quaternion.dot = function (a, b) {
      return __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].dot(a.array, b.array);
  };

  /**
   * @param  {clay.Quaternion} a
   * @return {number}
   */
  Quaternion.len = function (a) {
      return __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].length(a.array);
  };

  // Quaternion.length = Quaternion.len;

  /**
   * @param  {clay.Quaternion} out
   * @param  {clay.Quaternion} a
   * @param  {clay.Quaternion} b
   * @param  {number}     t
   * @return {clay.Quaternion}
   */
  Quaternion.lerp = function (out, a, b, t) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].lerp(out.array, a.array, b.array, t);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Quaternion} out
   * @param  {clay.Quaternion} a
   * @param  {clay.Quaternion} b
   * @param  {number}     t
   * @return {clay.Quaternion}
   */
  Quaternion.slerp = function (out, a, b, t) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].slerp(out.array, a.array, b.array, t);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Quaternion} out
   * @param  {clay.Quaternion} a
   * @param  {clay.Quaternion} b
   * @return {clay.Quaternion}
   */
  Quaternion.mul = function (out, a, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].multiply(out.array, a.array, b.array);
      out._dirty = true;
      return out;
  };

  /**
   * @function
   * @param  {clay.Quaternion} out
   * @param  {clay.Quaternion} a
   * @param  {clay.Quaternion} b
   * @return {clay.Quaternion}
   */
  Quaternion.multiply = Quaternion.mul;

  /**
   * @param  {clay.Quaternion} out
   * @param  {clay.Quaternion} a
   * @param  {number}     rad
   * @return {clay.Quaternion}
   */
  Quaternion.rotateX = function (out, a, rad) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].rotateX(out.array, a.array, rad);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Quaternion} out
   * @param  {clay.Quaternion} a
   * @param  {number}     rad
   * @return {clay.Quaternion}
   */
  Quaternion.rotateY = function (out, a, rad) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].rotateY(out.array, a.array, rad);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Quaternion} out
   * @param  {clay.Quaternion} a
   * @param  {number}     rad
   * @return {clay.Quaternion}
   */
  Quaternion.rotateZ = function (out, a, rad) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].rotateZ(out.array, a.array, rad);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Quaternion} out
   * @param  {clay.Vector3}    axis
   * @param  {number}     rad
   * @return {clay.Quaternion}
   */
  Quaternion.setAxisAngle = function (out, axis, rad) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].setAxisAngle(out.array, axis.array, rad);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Quaternion} out
   * @param  {clay.Quaternion} a
   * @return {clay.Quaternion}
   */
  Quaternion.normalize = function (out, a) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].normalize(out.array, a.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Quaternion} a
   * @return {number}
   */
  Quaternion.sqrLen = function (a) {
      return __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].sqrLen(a.array);
  };

  /**
   * @function
   * @param  {clay.Quaternion} a
   * @return {number}
   */
  Quaternion.squaredLength = Quaternion.sqrLen;

  /**
   * @param  {clay.Quaternion} out
   * @param  {clay.Matrix3}    m
   * @return {clay.Quaternion}
   */
  Quaternion.fromMat3 = function (out, m) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].fromMat3(out.array, m.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Quaternion} out
   * @param  {clay.Vector3}    view
   * @param  {clay.Vector3}    right
   * @param  {clay.Vector3}    up
   * @return {clay.Quaternion}
   */
  Quaternion.setAxes = function (out, view, right, up) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].setAxes(out.array, view.array, right.array, up.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Quaternion} out
   * @param  {clay.Vector3}    a
   * @param  {clay.Vector3}    b
   * @return {clay.Quaternion}
   */
  Quaternion.rotationTo = function (out, a, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_quat__["a" /* default */].rotationTo(out.array, a.array, b.array);
      out._dirty = true;
      return out;
  };

  /**
   * Set quaternion from euler
   * @param {clay.Quaternion} out
   * @param {clay.Vector3} v
   * @param {String} order
   */
  Quaternion.fromEuler = function (out, v, order) {

      out._dirty = true;

      v = v.array;
      var target = out.array;
      var c1 = Math.cos(v[0] / 2);
      var c2 = Math.cos(v[1] / 2);
      var c3 = Math.cos(v[2] / 2);
      var s1 = Math.sin(v[0] / 2);
      var s2 = Math.sin(v[1] / 2);
      var s3 = Math.sin(v[2] / 2);

      var order = (order || 'XYZ').toUpperCase();

      // http://www.mathworks.com/matlabcentral/fileexchange/
      //  20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
      //  content/SpinCalc.m

      switch (order) {
          case 'XYZ':
              target[0] = s1 * c2 * c3 + c1 * s2 * s3;
              target[1] = c1 * s2 * c3 - s1 * c2 * s3;
              target[2] = c1 * c2 * s3 + s1 * s2 * c3;
              target[3] = c1 * c2 * c3 - s1 * s2 * s3;
              break;
          case 'YXZ':
              target[0] = s1 * c2 * c3 + c1 * s2 * s3;
              target[1] = c1 * s2 * c3 - s1 * c2 * s3;
              target[2] = c1 * c2 * s3 - s1 * s2 * c3;
              target[3] = c1 * c2 * c3 + s1 * s2 * s3;
              break;
          case 'ZXY':
              target[0] = s1 * c2 * c3 - c1 * s2 * s3;
              target[1] = c1 * s2 * c3 + s1 * c2 * s3;
              target[2] = c1 * c2 * s3 + s1 * s2 * c3;
              target[3] = c1 * c2 * c3 - s1 * s2 * s3;
              break;
          case 'ZYX':
              target[0] = s1 * c2 * c3 - c1 * s2 * s3;
              target[1] = c1 * s2 * c3 + s1 * c2 * s3;
              target[2] = c1 * c2 * s3 - s1 * s2 * c3;
              target[3] = c1 * c2 * c3 + s1 * s2 * s3;
              break;
          case 'YZX':
              target[0] = s1 * c2 * c3 + c1 * s2 * s3;
              target[1] = c1 * s2 * c3 + s1 * c2 * s3;
              target[2] = c1 * c2 * s3 - s1 * s2 * c3;
              target[3] = c1 * c2 * c3 - s1 * s2 * s3;
              break;
          case 'XZY':
              target[0] = s1 * c2 * c3 - c1 * s2 * s3;
              target[1] = c1 * s2 * c3 - s1 * c2 * s3;
              target[2] = c1 * c2 * s3 + s1 * s2 * c3;
              target[3] = c1 * c2 * c3 + s1 * s2 * s3;
              break;
      }
  };

  /* harmony default export */ __webpack_exports__["a"] = (Quaternion);


  /***/ }),
  /* 57 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  var DIRTY_PREFIX = '__dt__';

  var Cache = function () {

      this._contextId = 0;

      this._caches = [];

      this._context = {};
  };

  Cache.prototype = {

      use: function (contextId, documentSchema) {
          var caches = this._caches;
          if (!caches[contextId]) {
              caches[contextId] = {};

              if (documentSchema) {
                  caches[contextId] = documentSchema();
              }
          }
          this._contextId = contextId;

          this._context = caches[contextId];
      },

      put: function (key, value) {
          this._context[key] = value;
      },

      get: function (key) {
          return this._context[key];
      },

      dirty: function (field) {
          field = field || '';
          var key = DIRTY_PREFIX + field;
          this.put(key, true);
      },

      dirtyAll: function (field) {
          field = field || '';
          var key = DIRTY_PREFIX + field;
          var caches = this._caches;
          for (var i = 0; i < caches.length; i++) {
              if (caches[i]) {
                  caches[i][key] = true;
              }
          }
      },

      fresh: function (field) {
          field = field || '';
          var key = DIRTY_PREFIX + field;
          this.put(key, false);
      },

      freshAll: function (field) {
          field = field || '';
          var key = DIRTY_PREFIX + field;
          var caches = this._caches;
          for (var i = 0; i < caches.length; i++) {
              if (caches[i]) {
                  caches[i][key] = false;
              }
          }
      },

      isDirty: function (field) {
          field = field || '';
          var key = DIRTY_PREFIX + field;
          var context = this._context;
          return  !context.hasOwnProperty(key)
              || context[key] === true;
      },

      deleteContext: function (contextId) {
          delete this._caches[contextId];
          this._context = {};
      },

      delete: function (key) {
          delete this._context[key];
      },

      clearAll: function () {
          this._caches = {};
      },

      getContext: function () {
          return this._context;
      },

      eachContext : function (cb, context) {
          var keys = Object.keys(this._caches);
          keys.forEach(function (key) {
              cb && cb.call(context, key);
          });
      },

      miss: function (key) {
          return ! this._context.hasOwnProperty(key);
      }
  };

  Cache.prototype.constructor = Cache;

  /* harmony default export */ __webpack_exports__["a"] = (Cache);


  /***/ }),
  /* 58 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Node__ = __webpack_require__(35);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__math_Matrix4__ = __webpack_require__(7);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math_Frustum__ = __webpack_require__(59);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__math_Ray__ = __webpack_require__(54);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__glmatrix_vec4__ = __webpack_require__(33);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__glmatrix_vec3__ = __webpack_require__(12);









  /**
   * @constructor clay.Camera
   * @extends clay.Node
   */
  var Camera = __WEBPACK_IMPORTED_MODULE_0__Node__["a" /* default */].extend(function () {
      return /** @lends clay.Camera# */ {
          /**
           * Camera projection matrix
           * @type {clay.Matrix4}
           */
          projectionMatrix: new __WEBPACK_IMPORTED_MODULE_1__math_Matrix4__["a" /* default */](),

          /**
           * Inverse of camera projection matrix
           * @type {clay.Matrix4}
           */
          invProjectionMatrix: new __WEBPACK_IMPORTED_MODULE_1__math_Matrix4__["a" /* default */](),

          /**
           * View matrix, equal to inverse of camera's world matrix
           * @type {clay.Matrix4}
           */
          viewMatrix: new __WEBPACK_IMPORTED_MODULE_1__math_Matrix4__["a" /* default */](),

          /**
           * Camera frustum in view space
           * @type {clay.Frustum}
           */
          frustum: new __WEBPACK_IMPORTED_MODULE_2__math_Frustum__["a" /* default */]()
      };
  }, function () {
      this.update(true);
  },
  /** @lends clay.Camera.prototype */
  {

      update: function (force) {
          __WEBPACK_IMPORTED_MODULE_0__Node__["a" /* default */].prototype.update.call(this, force);
          __WEBPACK_IMPORTED_MODULE_1__math_Matrix4__["a" /* default */].invert(this.viewMatrix, this.worldTransform);

          this.updateProjectionMatrix();
          __WEBPACK_IMPORTED_MODULE_1__math_Matrix4__["a" /* default */].invert(this.invProjectionMatrix, this.projectionMatrix);

          this.frustum.setFromProjection(this.projectionMatrix);
      },

      /**
       * Set camera view matrix
       */
      setViewMatrix: function (viewMatrix) {
          __WEBPACK_IMPORTED_MODULE_1__math_Matrix4__["a" /* default */].copy(this.viewMatrix, viewMatrix);
          __WEBPACK_IMPORTED_MODULE_1__math_Matrix4__["a" /* default */].invert(this.worldTransform, viewMatrix);
          this.decomposeWorldTransform();
      },

      /**
       * Decompose camera projection matrix
       */
      decomposeProjectionMatrix: function () {},

      /**
       * Set camera projection matrix
       * @param {clay.Matrix4} projectionMatrix
       */
      setProjectionMatrix: function (projectionMatrix) {
          __WEBPACK_IMPORTED_MODULE_1__math_Matrix4__["a" /* default */].copy(this.projectionMatrix, projectionMatrix);
          __WEBPACK_IMPORTED_MODULE_1__math_Matrix4__["a" /* default */].invert(this.invProjectionMatrix, projectionMatrix);
          this.decomposeProjectionMatrix();
      },
      /**
       * Update projection matrix, called after update
       */
      updateProjectionMatrix: function () {},

      /**
       * Cast a picking ray from camera near plane to far plane
       * @function
       * @param {clay.Vector2} ndc
       * @param {clay.Ray} [out]
       * @return {clay.Ray}
       */
      castRay: (function () {
          var v4 = __WEBPACK_IMPORTED_MODULE_4__glmatrix_vec4__["a" /* default */].create();
          return function (ndc, out) {
              var ray = out !== undefined ? out : new __WEBPACK_IMPORTED_MODULE_3__math_Ray__["a" /* default */]();
              var x = ndc.array[0];
              var y = ndc.array[1];
              __WEBPACK_IMPORTED_MODULE_4__glmatrix_vec4__["a" /* default */].set(v4, x, y, -1, 1);
              __WEBPACK_IMPORTED_MODULE_4__glmatrix_vec4__["a" /* default */].transformMat4(v4, v4, this.invProjectionMatrix.array);
              __WEBPACK_IMPORTED_MODULE_4__glmatrix_vec4__["a" /* default */].transformMat4(v4, v4, this.worldTransform.array);
              __WEBPACK_IMPORTED_MODULE_5__glmatrix_vec3__["a" /* default */].scale(ray.origin.array, v4, 1 / v4[3]);

              __WEBPACK_IMPORTED_MODULE_4__glmatrix_vec4__["a" /* default */].set(v4, x, y, 1, 1);
              __WEBPACK_IMPORTED_MODULE_4__glmatrix_vec4__["a" /* default */].transformMat4(v4, v4, this.invProjectionMatrix.array);
              __WEBPACK_IMPORTED_MODULE_4__glmatrix_vec4__["a" /* default */].transformMat4(v4, v4, this.worldTransform.array);
              __WEBPACK_IMPORTED_MODULE_5__glmatrix_vec3__["a" /* default */].scale(v4, v4, 1 / v4[3]);
              __WEBPACK_IMPORTED_MODULE_5__glmatrix_vec3__["a" /* default */].sub(ray.direction.array, v4, ray.origin.array);

              __WEBPACK_IMPORTED_MODULE_5__glmatrix_vec3__["a" /* default */].normalize(ray.direction.array, ray.direction.array);
              ray.direction._dirty = true;
              ray.origin._dirty = true;

              return ray;
          };
      })(),

      /**
       * @function
       * @name clone
       * @return {clay.Camera}
       * @memberOf clay.Camera.prototype
       */
  });

  /* harmony default export */ __webpack_exports__["a"] = (Camera);


  /***/ }),
  /* 59 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__BoundingBox__ = __webpack_require__(18);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Plane__ = __webpack_require__(73);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__glmatrix_vec3__ = __webpack_require__(12);





  var vec3Set = __WEBPACK_IMPORTED_MODULE_2__glmatrix_vec3__["a" /* default */].set;
  var vec3Copy = __WEBPACK_IMPORTED_MODULE_2__glmatrix_vec3__["a" /* default */].copy;
  var vec3TranformMat4 = __WEBPACK_IMPORTED_MODULE_2__glmatrix_vec3__["a" /* default */].transformMat4;
  var mathMin = Math.min;
  var mathMax = Math.max;
  /**
   * @constructor
   * @alias clay.Frustum
   */
  var Frustum = function() {

      /**
       * Eight planes to enclose the frustum
       * @type {clay.Plane[]}
       */
      this.planes = [];

      for (var i = 0; i < 6; i++) {
          this.planes.push(new __WEBPACK_IMPORTED_MODULE_1__Plane__["a" /* default */]());
      }

      /**
       * Bounding box of frustum
       * @type {clay.BoundingBox}
       */
      this.boundingBox = new __WEBPACK_IMPORTED_MODULE_0__BoundingBox__["a" /* default */]();

      /**
       * Eight vertices of frustum
       * @type {Float32Array[]}
       */
      this.vertices = [];
      for (var i = 0; i < 8; i++) {
          this.vertices[i] = __WEBPACK_IMPORTED_MODULE_2__glmatrix_vec3__["a" /* default */].fromValues(0, 0, 0);
      }
  };

  Frustum.prototype = {

      // http://web.archive.org/web/20120531231005/http://crazyjoke.free.fr/doc/3D/plane%20extraction.pdf
      /**
       * Set frustum from a projection matrix
       * @param {clay.Matrix4} projectionMatrix
       */
      setFromProjection: function(projectionMatrix) {

          var planes = this.planes;
          var m = projectionMatrix.array;
          var m0 = m[0], m1 = m[1], m2 = m[2], m3 = m[3];
          var m4 = m[4], m5 = m[5], m6 = m[6], m7 = m[7];
          var m8 = m[8], m9 = m[9], m10 = m[10], m11 = m[11];
          var m12 = m[12], m13 = m[13], m14 = m[14], m15 = m[15];

          // Update planes
          vec3Set(planes[0].normal.array, m3 - m0, m7 - m4, m11 - m8);
          planes[0].distance = -(m15 - m12);
          planes[0].normalize();

          vec3Set(planes[1].normal.array, m3 + m0, m7 + m4, m11 + m8);
          planes[1].distance = -(m15 + m12);
          planes[1].normalize();

          vec3Set(planes[2].normal.array, m3 + m1, m7 + m5, m11 + m9);
          planes[2].distance = -(m15 + m13);
          planes[2].normalize();

          vec3Set(planes[3].normal.array, m3 - m1, m7 - m5, m11 - m9);
          planes[3].distance = -(m15 - m13);
          planes[3].normalize();

          vec3Set(planes[4].normal.array, m3 - m2, m7 - m6, m11 - m10);
          planes[4].distance = -(m15 - m14);
          planes[4].normalize();

          vec3Set(planes[5].normal.array, m3 + m2, m7 + m6, m11 + m10);
          planes[5].distance = -(m15 + m14);
          planes[5].normalize();

          // Perspective projection
          var boundingBox = this.boundingBox;
          var vertices = this.vertices;
          if (m15 === 0)  {
              var aspect = m5 / m0;
              var zNear = -m14 / (m10 - 1);
              var zFar = -m14 / (m10 + 1);
              var farY = -zFar / m5;
              var nearY = -zNear / m5;
              // Update bounding box
              boundingBox.min.set(-farY * aspect, -farY, zFar);
              boundingBox.max.set(farY * aspect, farY, zNear);
              // update vertices
              //--- min z
              // min x
              vec3Set(vertices[0], -farY * aspect, -farY, zFar);
              vec3Set(vertices[1], -farY * aspect, farY, zFar);
              // max x
              vec3Set(vertices[2], farY * aspect, -farY, zFar);
              vec3Set(vertices[3], farY * aspect, farY, zFar);
              //-- max z
              vec3Set(vertices[4], -nearY * aspect, -nearY, zNear);
              vec3Set(vertices[5], -nearY * aspect, nearY, zNear);
              vec3Set(vertices[6], nearY * aspect, -nearY, zNear);
              vec3Set(vertices[7], nearY * aspect, nearY, zNear);
          }
          else { // Orthographic projection
              var left = (-1 - m12) / m0;
              var right = (1 - m12) / m0;
              var top = (1 - m13) / m5;
              var bottom = (-1 - m13) / m5;
              var near = (-1 - m14) / m10;
              var far = (1 - m14) / m10;


              boundingBox.min.set(Math.min(left, right), Math.min(bottom, top), Math.min(far, near));
              boundingBox.max.set(Math.max(right, left), Math.max(top, bottom), Math.max(near, far));

              var min = boundingBox.min.array;
              var max = boundingBox.max.array;
              //--- min z
              // min x
              vec3Set(vertices[0], min[0], min[1], min[2]);
              vec3Set(vertices[1], min[0], max[1], min[2]);
              // max x
              vec3Set(vertices[2], max[0], min[1], min[2]);
              vec3Set(vertices[3], max[0], max[1], min[2]);
              //-- max z
              vec3Set(vertices[4], min[0], min[1], max[2]);
              vec3Set(vertices[5], min[0], max[1], max[2]);
              vec3Set(vertices[6], max[0], min[1], max[2]);
              vec3Set(vertices[7], max[0], max[1], max[2]);
          }
      },

      /**
       * Apply a affine transform matrix and set to the given bounding box
       * @function
       * @param {clay.BoundingBox}
       * @param {clay.Matrix4}
       * @return {clay.BoundingBox}
       */
      getTransformedBoundingBox: (function() {

          var tmpVec3 = __WEBPACK_IMPORTED_MODULE_2__glmatrix_vec3__["a" /* default */].create();

          return function(bbox, matrix) {
              var vertices = this.vertices;

              var m4 = matrix.array;
              var min = bbox.min;
              var max = bbox.max;
              var minArr = min.array;
              var maxArr = max.array;
              var v = vertices[0];
              vec3TranformMat4(tmpVec3, v, m4);
              vec3Copy(minArr, tmpVec3);
              vec3Copy(maxArr, tmpVec3);

              for (var i = 1; i < 8; i++) {
                  v = vertices[i];
                  vec3TranformMat4(tmpVec3, v, m4);

                  minArr[0] = mathMin(tmpVec3[0], minArr[0]);
                  minArr[1] = mathMin(tmpVec3[1], minArr[1]);
                  minArr[2] = mathMin(tmpVec3[2], minArr[2]);

                  maxArr[0] = mathMax(tmpVec3[0], maxArr[0]);
                  maxArr[1] = mathMax(tmpVec3[1], maxArr[1]);
                  maxArr[2] = mathMax(tmpVec3[2], maxArr[2]);
              }

              min._dirty = true;
              max._dirty = true;

              return bbox;
          };
      }) ()
  };
  /* harmony default export */ __webpack_exports__["a"] = (Frustum);


  /***/ }),
  /* 60 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Texture2D__ = __webpack_require__(5);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__TextureCube__ = __webpack_require__(27);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_vendor__ = __webpack_require__(13);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__prePass_EnvironmentMap__ = __webpack_require__(61);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__plugin_Skydome__ = __webpack_require__(75);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Scene__ = __webpack_require__(36);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__dds__ = __webpack_require__(121);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__hdr__ = __webpack_require__(122);










  /**
   * @alias clay.util.texture
   */
  var textureUtil = {
      /**
       * @param  {string|object} path
       * @param  {object} [option]
       * @param  {Function} [onsuccess]
       * @param  {Function} [onerror]
       * @return {clay.Texture}
       */
      loadTexture: function (path, option, onsuccess, onerror) {
          var texture;
          if (typeof(option) === 'function') {
              onsuccess = option;
              onerror = onsuccess;
              option = {};
          }
          else {
              option = option || {};
          }
          if (typeof(path) === 'string') {
              if (path.match(/.hdr$/) || option.fileType === 'hdr') {
                  texture = new __WEBPACK_IMPORTED_MODULE_0__Texture2D__["a" /* default */]({
                      width: 0,
                      height: 0,
                      sRGB: false
                  });
                  textureUtil._fetchTexture(
                      path,
                      function (data) {
                          __WEBPACK_IMPORTED_MODULE_7__hdr__["a" /* default */].parseRGBE(data, texture, option.exposure);
                          texture.dirty();
                          onsuccess && onsuccess(texture);
                      },
                      onerror
                  );
                  return texture;
              }
              else if (path.match(/.dds$/) || option.fileType === 'dds') {
                  texture = new __WEBPACK_IMPORTED_MODULE_0__Texture2D__["a" /* default */]({
                      width: 0,
                      height: 0
                  });
                  textureUtil._fetchTexture(
                      path,
                      function (data) {
                          __WEBPACK_IMPORTED_MODULE_6__dds__["a" /* default */].parse(data, texture);
                          texture.dirty();
                          onsuccess && onsuccess(texture);
                      },
                      onerror
                  );
              }
              else {
                  texture = new __WEBPACK_IMPORTED_MODULE_0__Texture2D__["a" /* default */]();
                  texture.load(path);
                  texture.success(onsuccess);
                  texture.error(onerror);
              }
          }
          else if (typeof path === 'object' && typeof(path.px) !== 'undefined') {
              texture = new __WEBPACK_IMPORTED_MODULE_1__TextureCube__["a" /* default */]();
              texture.load(path);
              texture.success(onsuccess);
              texture.error(onerror);
          }
          return texture;
      },

      /**
       * Load a panorama texture and render it to a cube map
       * @param  {clay.Renderer} renderer
       * @param  {string} path
       * @param  {clay.TextureCube} cubeMap
       * @param  {object} [option]
       * @param  {boolean} [option.encodeRGBM]
       * @param  {number} [option.exposure]
       * @param  {Function} [onsuccess]
       * @param  {Function} [onerror]
       */
      loadPanorama: function (renderer, path, cubeMap, option, onsuccess, onerror) {
          var self = this;

          if (typeof(option) === 'function') {
              onsuccess = option;
              onerror = onsuccess;
              option = {};
          }
          else {
              option = option || {};
          }

          textureUtil.loadTexture(path, option, function (texture) {
              // PENDING
              texture.flipY = option.flipY || false;
              self.panoramaToCubeMap(renderer, texture, cubeMap, option);
              texture.dispose(renderer);
              onsuccess && onsuccess(cubeMap);
          }, onerror);
      },

      /**
       * Render a panorama texture to a cube map
       * @param  {clay.Renderer} renderer
       * @param  {clay.Texture2D} panoramaMap
       * @param  {clay.TextureCube} cubeMap
       * @param  {Object} option
       * @param  {boolean} [option.encodeRGBM]
       */
      panoramaToCubeMap: function (renderer, panoramaMap, cubeMap, option) {
          var environmentMapPass = new __WEBPACK_IMPORTED_MODULE_3__prePass_EnvironmentMap__["a" /* default */]();
          var skydome = new __WEBPACK_IMPORTED_MODULE_4__plugin_Skydome__["a" /* default */]({
              scene: new __WEBPACK_IMPORTED_MODULE_5__Scene__["a" /* default */]()
          });
          skydome.setEnvironmentMap(panoramaMap);

          option = option || {};
          if (option.encodeRGBM) {
              skydome.material.define('fragment', 'RGBM_ENCODE');
          }

          // Share sRGB
          cubeMap.sRGB = panoramaMap.sRGB;

          environmentMapPass.texture = cubeMap;
          environmentMapPass.render(renderer, skydome.scene);
          environmentMapPass.texture = null;
          environmentMapPass.dispose(renderer);
          return cubeMap;
      },

      /**
       * Convert height map to normal map
       * @param {HTMLImageElement|HTMLCanvasElement} image
       * @param {boolean} [checkBump=false]
       * @return {HTMLCanvasElement}
       */
      heightToNormal: function (image, checkBump) {
          var canvas = document.createElement('canvas');
          var width = canvas.width = image.width;
          var height = canvas.height = image.height;
          var ctx = canvas.getContext('2d');
          ctx.drawImage(image, 0, 0, width, height);
          checkBump = checkBump || false;
          var srcData = ctx.getImageData(0, 0, width, height);
          var dstData = ctx.createImageData(width, height);
          for (var i = 0; i < srcData.data.length; i += 4) {
              if (checkBump) {
                  var r = srcData.data[i];
                  var g = srcData.data[i + 1];
                  var b = srcData.data[i + 2];
                  var diff = Math.abs(r - g) + Math.abs(g - b);
                  if (diff > 20) {
                      console.warn('Given image is not a height map');
                      return image;
                  }
              }
              // Modified from http://mrdoob.com/lab/javascript/height2normal/
              var x1, y1, x2, y2;
              if (i % (width * 4) === 0) {
                  // left edge
                  x1 = srcData.data[i];
                  x2 = srcData.data[i + 4];
              }
              else if (i % (width * 4) === (width - 1) * 4) {
                  // right edge
                  x1 = srcData.data[i - 4];
                  x2 = srcData.data[i];
              }
              else {
                  x1 = srcData.data[i - 4];
                  x2 = srcData.data[i + 4];
              }

              if (i < width * 4) {
                  // top edge
                  y1 = srcData.data[i];
                  y2 = srcData.data[i + width * 4];
              }
              else if (i > width * (height - 1) * 4) {
                  // bottom edge
                  y1 = srcData.data[i - width * 4];
                  y2 = srcData.data[i];
              }
              else {
                  y1 = srcData.data[i - width * 4];
                  y2 = srcData.data[i + width * 4];
              }

              dstData.data[i] = (x1 - x2) + 127;
              dstData.data[i + 1] = (y1 - y2) + 127;
              dstData.data[i + 2] = 255;
              dstData.data[i + 3] = 255;
          }
          ctx.putImageData(dstData, 0, 0);
          return canvas;
      },

      /**
       * Convert height map to normal map
       * @param {HTMLImageElement|HTMLCanvasElement} image
       * @param {boolean} [checkBump=false]
       * @param {number} [threshold=20]
       * @return {HTMLCanvasElement}
       */
      isHeightImage: function (img, downScaleSize, threshold) {
          if (!img || !img.width || !img.height) {
              return false;
          }

          var canvas = document.createElement('canvas');
          var ctx = canvas.getContext('2d');
          var size = downScaleSize || 32;
          threshold = threshold || 20;
          canvas.width = canvas.height = size;
          ctx.drawImage(img, 0, 0, size, size);
          var srcData = ctx.getImageData(0, 0, size, size);
          for (var i = 0; i < srcData.data.length; i += 4) {
              var r = srcData.data[i];
              var g = srcData.data[i + 1];
              var b = srcData.data[i + 2];
              var diff = Math.abs(r - g) + Math.abs(g - b);
              if (diff > threshold) {
                  return false;
              }
          }
          return true;
      },

      _fetchTexture: function (path, onsuccess, onerror) {
          __WEBPACK_IMPORTED_MODULE_2__core_vendor__["a" /* default */].request.get({
              url: path,
              responseType: 'arraybuffer',
              onload: onsuccess,
              onerror: onerror
          });
      },

      /**
       * Create a chessboard texture
       * @param  {number} [size]
       * @param  {number} [unitSize]
       * @param  {string} [color1]
       * @param  {string} [color2]
       * @return {clay.Texture2D}
       */
      createChessboard: function (size, unitSize, color1, color2) {
          size = size || 512;
          unitSize = unitSize || 64;
          color1 = color1 || 'black';
          color2 = color2 || 'white';

          var repeat = Math.ceil(size / unitSize);

          var canvas = document.createElement('canvas');
          canvas.width = size;
          canvas.height = size;
          var ctx = canvas.getContext('2d');
          ctx.fillStyle = color2;
          ctx.fillRect(0, 0, size, size);

          ctx.fillStyle = color1;
          for (var i = 0; i < repeat; i++) {
              for (var j = 0; j < repeat; j++) {
                  var isFill = j % 2 ? (i % 2) : (i % 2 - 1);
                  if (isFill) {
                      ctx.fillRect(i * unitSize, j * unitSize, unitSize, unitSize);
                  }
              }
          }

          var texture = new __WEBPACK_IMPORTED_MODULE_0__Texture2D__["a" /* default */]({
              image: canvas,
              anisotropic: 8
          });

          return texture;
      },

      /**
       * Create a blank pure color 1x1 texture
       * @param  {string} color
       * @return {clay.Texture2D}
       */
      createBlank: function (color) {
          var canvas = document.createElement('canvas');
          canvas.width = 1;
          canvas.height = 1;
          var ctx = canvas.getContext('2d');
          ctx.fillStyle = color;
          ctx.fillRect(0, 0, 1, 1);

          var texture = new __WEBPACK_IMPORTED_MODULE_0__Texture2D__["a" /* default */]({
              image: canvas
          });

          return texture;
      }
  };

  /* harmony default export */ __webpack_exports__["a"] = (textureUtil);


  /***/ }),
  /* 61 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Base__ = __webpack_require__(8);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__math_Vector3__ = __webpack_require__(3);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__camera_Perspective__ = __webpack_require__(37);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__FrameBuffer__ = __webpack_require__(10);





  var targets = ['px', 'nx', 'py', 'ny', 'pz', 'nz'];

  /**
   * Pass rendering scene to a environment cube map
   *
   * @constructor clay.prePass.EnvironmentMap
   * @extends clay.core.Base
   * @example
   *     // Example of car reflection
   *     var envMap = new clay.TextureCube({
   *         width: 256,
   *         height: 256
   *     });
   *     var envPass = new clay.prePass.EnvironmentMap({
   *         position: car.position,
   *         texture: envMap
   *     });
   *     var carBody = car.getChildByName('body');
   *     carBody.material.enableTexture('environmentMap');
   *     carBody.material.set('environmentMap', envMap);
   *     ...
   *     animation.on('frame', function(frameTime) {
   *         envPass.render(renderer, scene);
   *         renderer.render(scene, camera);
   *     });
   */
  var EnvironmentMapPass = __WEBPACK_IMPORTED_MODULE_0__core_Base__["a" /* default */].extend(function() {
      var ret = /** @lends clay.prePass.EnvironmentMap# */ {
          /**
           * Camera position
           * @type {clay.Vector3}
           * @memberOf clay.prePass.EnvironmentMap#
           */
          position: new __WEBPACK_IMPORTED_MODULE_1__math_Vector3__["a" /* default */](),
          /**
           * Camera far plane
           * @type {number}
           * @memberOf clay.prePass.EnvironmentMap#
           */
          far: 1000,
          /**
           * Camera near plane
           * @type {number}
           * @memberOf clay.prePass.EnvironmentMap#
           */
          near: 0.1,
          /**
           * Environment cube map
           * @type {clay.TextureCube}
           * @memberOf clay.prePass.EnvironmentMap#
           */
          texture: null,

          /**
           * Used if you wan't have shadow in environment map
           * @type {clay.prePass.ShadowMap}
           */
          shadowMapPass: null,
      };
      var cameras = ret._cameras = {
          px: new __WEBPACK_IMPORTED_MODULE_2__camera_Perspective__["a" /* default */]({ fov: 90 }),
          nx: new __WEBPACK_IMPORTED_MODULE_2__camera_Perspective__["a" /* default */]({ fov: 90 }),
          py: new __WEBPACK_IMPORTED_MODULE_2__camera_Perspective__["a" /* default */]({ fov: 90 }),
          ny: new __WEBPACK_IMPORTED_MODULE_2__camera_Perspective__["a" /* default */]({ fov: 90 }),
          pz: new __WEBPACK_IMPORTED_MODULE_2__camera_Perspective__["a" /* default */]({ fov: 90 }),
          nz: new __WEBPACK_IMPORTED_MODULE_2__camera_Perspective__["a" /* default */]({ fov: 90 })
      };
      cameras.px.lookAt(__WEBPACK_IMPORTED_MODULE_1__math_Vector3__["a" /* default */].POSITIVE_X, __WEBPACK_IMPORTED_MODULE_1__math_Vector3__["a" /* default */].NEGATIVE_Y);
      cameras.nx.lookAt(__WEBPACK_IMPORTED_MODULE_1__math_Vector3__["a" /* default */].NEGATIVE_X, __WEBPACK_IMPORTED_MODULE_1__math_Vector3__["a" /* default */].NEGATIVE_Y);
      cameras.py.lookAt(__WEBPACK_IMPORTED_MODULE_1__math_Vector3__["a" /* default */].POSITIVE_Y, __WEBPACK_IMPORTED_MODULE_1__math_Vector3__["a" /* default */].POSITIVE_Z);
      cameras.ny.lookAt(__WEBPACK_IMPORTED_MODULE_1__math_Vector3__["a" /* default */].NEGATIVE_Y, __WEBPACK_IMPORTED_MODULE_1__math_Vector3__["a" /* default */].NEGATIVE_Z);
      cameras.pz.lookAt(__WEBPACK_IMPORTED_MODULE_1__math_Vector3__["a" /* default */].POSITIVE_Z, __WEBPACK_IMPORTED_MODULE_1__math_Vector3__["a" /* default */].NEGATIVE_Y);
      cameras.nz.lookAt(__WEBPACK_IMPORTED_MODULE_1__math_Vector3__["a" /* default */].NEGATIVE_Z, __WEBPACK_IMPORTED_MODULE_1__math_Vector3__["a" /* default */].NEGATIVE_Y);

      // FIXME In windows, use one framebuffer only renders one side of cubemap
      ret._frameBuffer = new __WEBPACK_IMPORTED_MODULE_3__FrameBuffer__["a" /* default */]();

      return ret;
  },  /** @lends clay.prePass.EnvironmentMap# */ {
      /**
       * @param  {string} target
       * @return  {clay.Camera}
       */
      getCamera: function (target) {
          return this._cameras[target];
      },
      /**
       * @param  {clay.Renderer} renderer
       * @param  {clay.Scene} scene
       * @param  {boolean} [notUpdateScene=false]
       */
      render: function(renderer, scene, notUpdateScene) {
          var _gl = renderer.gl;
          if (!notUpdateScene) {
              scene.update();
          }
          // Tweak fov
          // http://the-witness.net/news/2012/02/seamless-cube-map-filtering/
          var n = this.texture.width;
          var fov = 2 * Math.atan(n / (n - 0.5)) / Math.PI * 180;

          for (var i = 0; i < 6; i++) {
              var target = targets[i];
              var camera = this._cameras[target];
              __WEBPACK_IMPORTED_MODULE_1__math_Vector3__["a" /* default */].copy(camera.position, this.position);

              camera.far = this.far;
              camera.near = this.near;
              camera.fov = fov;

              if (this.shadowMapPass) {
                  camera.update();

                  // update boundingBoxLastFrame
                  var bbox = scene.getBoundingBox();
                  bbox.applyTransform(camera.viewMatrix);
                  scene.viewBoundingBoxLastFrame.copy(bbox);

                  this.shadowMapPass.render(renderer, scene, camera, true);
              }
              this._frameBuffer.attach(
                  this.texture, _gl.COLOR_ATTACHMENT0,
                  _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i
              );
              this._frameBuffer.bind(renderer);
              renderer.render(scene, camera, true);
              this._frameBuffer.unbind(renderer);
          }
      },
      /**
       * @param {clay.Renderer} renderer
       */
      dispose: function (renderer) {
          this._frameBuffer.dispose(renderer);
      }
  });

  /* harmony default export */ __webpack_exports__["a"] = (EnvironmentMapPass);


  /***/ }),
  /* 62 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__graphicGL__ = __webpack_require__(1);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__geometry_Sprites__ = __webpack_require__(164);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shader_labels_glsl_js__ = __webpack_require__(165);




  __WEBPACK_IMPORTED_MODULE_0__graphicGL__["a" /* default */].Shader.import(__WEBPACK_IMPORTED_MODULE_2__shader_labels_glsl_js__["a" /* default */]);

  /* harmony default export */ __webpack_exports__["a"] = (__WEBPACK_IMPORTED_MODULE_0__graphicGL__["a" /* default */].Mesh.extend(function () {
      var geometry = new __WEBPACK_IMPORTED_MODULE_1__geometry_Sprites__["a" /* default */]({
          dynamic: true
      });
      var material = new __WEBPACK_IMPORTED_MODULE_0__graphicGL__["a" /* default */].Material({
          shader: __WEBPACK_IMPORTED_MODULE_0__graphicGL__["a" /* default */].createShader('ecgl.labels'),
          transparent: true,
          depthMask: false
      });

      return {
          geometry: geometry,
          material: material,
          culling: false,
          castShadow: false,
          ignorePicking: true
      };
  }));

  /***/ }),
  /* 63 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__ = __webpack_require__(1);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_earcut__ = __webpack_require__(206);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_geometry_Lines3D__ = __webpack_require__(25);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_retrieve__ = __webpack_require__(2);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_claygl_src_dep_glmatrix__ = __webpack_require__(6);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__util_geometry_trianglesSortMixin__ = __webpack_require__(64);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__LabelsBuilder__ = __webpack_require__(65);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__util_shader_lines3D_glsl_js__ = __webpack_require__(46);










  var vec3 = __WEBPACK_IMPORTED_MODULE_5_claygl_src_dep_glmatrix__["a" /* default */].vec3;

  __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Shader.import(__WEBPACK_IMPORTED_MODULE_8__util_shader_lines3D_glsl_js__["a" /* default */]);

  function Geo3DBuilder(api) {

      this.rootNode = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Node();

      // Cache triangulation result
      this._triangulationResults = {};

      this._shadersMap = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].COMMON_SHADERS.reduce(function (obj, shaderName) {
          obj[shaderName] = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].createShader('ecgl.' + shaderName);
          return obj;
      }, {});

      this._linesShader = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].createShader('ecgl.meshLines3D');

      var groundMaterials = {};
      __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].COMMON_SHADERS.forEach(function (shading) {
          groundMaterials[shading] = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Material({
              shader: __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].createShader('ecgl.' + shading)
          });
      });
      this._groundMaterials = groundMaterials;

      this._groundMesh = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Mesh({
          geometry: new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].PlaneGeometry({ dynamic: true }),
          castShadow: false,
          renderNormal: true,
          $ignorePicking: true
      });
      this._groundMesh.rotation.rotateX(-Math.PI / 2);

      this._labelsBuilder = new __WEBPACK_IMPORTED_MODULE_7__LabelsBuilder__["a" /* default */](512, 512, api);

      // Give a large render order.
      this._labelsBuilder.getMesh().renderOrder = 100;
      this._labelsBuilder.getMesh().material.depthTest = false;

      this.rootNode.add(this._labelsBuilder.getMesh());

      this._initMeshes();

      this._api = api;
  }

  Geo3DBuilder.prototype = {

      constructor: Geo3DBuilder,

      // Which dimension to extrude. Y or Z
      extrudeY: true,

      update: function (componentModel, ecModel, api, start, end) {

          var data = componentModel.getData();

          if (start == null) {
              start = 0;
          }
          if (end == null) {
              end = data.count();
          }

          this._startIndex = start;
          this._endIndex = end - 1;

          this._triangulation(componentModel, start, end);

          var shader = this._getShader(componentModel.get('shading'));

          this._prepareMesh(componentModel, shader, api, start, end);

          this.rootNode.updateWorldTransform();

          this._updateRegionMesh(componentModel, api, start, end);

          var coordSys = componentModel.coordinateSystem;
          // PENDING
          if (coordSys.type === 'geo3D') {
              this._updateGroundPlane(componentModel, coordSys, api);
          }

          var self = this;
          this._labelsBuilder.updateData(data, start, end);
          this._labelsBuilder.getLabelPosition = function (dataIndex, positionDesc, distance) {
              var name = data.getName(dataIndex);

              var center;
              var height = distance;
              if (coordSys.type === 'geo3D') {
                  var region = coordSys.getRegion(name);
                  if (!region) {
                      return [NaN, NaN, NaN];
                  }
                  center = region.center;
                  var pos = coordSys.dataToPoint([center[0], center[1], height]);
                  return pos;
              }
              else {
                  var tmp = self._triangulationResults[dataIndex - self._startIndex];
                  var center = self.extrudeY ? [
                      (tmp.max[0] + tmp.min[0]) / 2,
                      tmp.max[1] + height,
                      (tmp.max[2] + tmp.min[2]) / 2
                  ] : [
                      (tmp.max[0] + tmp.min[0]) / 2,
                      (tmp.max[1] + tmp.min[1]) / 2,
                      tmp.max[2] + height
                  ];
              }
          };

          this._data = data;

          this._labelsBuilder.updateLabels();

          this._updateDebugWireframe(componentModel);

          // Reset some state.
          this._lastHoverDataIndex = 0;
      },

      _initMeshes: function () {
          var self = this;
          function createPolygonMesh() {
              var mesh = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Mesh({
                  name: 'Polygon',
                  material: new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Material({
                      shader: self._shadersMap.lambert
                  }),
                  geometry: new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Geometry({
                      sortTriangles: true,
                      dynamic: true
                  }),
                  // TODO Disable culling
                  culling: false,
                  ignorePicking: true,
                  // Render normal in normal pass
                  renderNormal: true
              });
              __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.extend(mesh.geometry, __WEBPACK_IMPORTED_MODULE_6__util_geometry_trianglesSortMixin__["a" /* default */]);
              return mesh;
          }

          var polygonMesh = createPolygonMesh();

          var linesMesh = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Mesh({
              material: new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Material({
                  shader: this._linesShader
              }),
              castShadow: false,
              ignorePicking: true,
              $ignorePicking: true,
              geometry: new __WEBPACK_IMPORTED_MODULE_3__util_geometry_Lines3D__["a" /* default */]({
                  useNativeLine: false
              })
          });

          this.rootNode.add(polygonMesh);
          this.rootNode.add(linesMesh);

          polygonMesh.material.define('both', 'VERTEX_COLOR');
          polygonMesh.material.define('fragment', 'DOUBLE_SIDED');

          this._polygonMesh = polygonMesh;
          this._linesMesh = linesMesh;

          this.rootNode.add(this._groundMesh);
      },

      _getShader: function (shading) {
          var shader = this._shadersMap[shading];
          if (!shader) {
              {
                  console.warn('Unkown shading ' + shading);
              }
              // Default use lambert shader.
              shader = this._shadersMap.lambert;
          }
          shader.__shading = shading;
          return shader;
      },

      _prepareMesh: function (componentModel, shader, api, start, end) {
          var polygonVertexCount = 0;
          var polygonTriangleCount = 0;
          var linesVertexCount = 0;
          var linesTriangleCount = 0;
          // TODO Lines
          for (var idx = start; idx < end; idx++) {
              var polyInfo = this._getRegionPolygonInfo(idx);
              var lineInfo = this._getRegionLinesInfo(idx, componentModel, this._linesMesh.geometry);
              polygonVertexCount += polyInfo.vertexCount;
              polygonTriangleCount += polyInfo.triangleCount;
              linesVertexCount += lineInfo.vertexCount;
              linesTriangleCount += lineInfo.triangleCount;
          }

          var polygonMesh = this._polygonMesh;
          var polygonGeo = polygonMesh.geometry;
          ['position', 'normal', 'texcoord0', 'color'].forEach(function (attrName) {
              polygonGeo.attributes[attrName].init(polygonVertexCount);
          });
          polygonGeo.indices = polygonVertexCount > 0xffff ? new Uint32Array(polygonTriangleCount * 3) : new Uint16Array(polygonTriangleCount * 3);

          if (polygonMesh.material.shader !== shader) {
              polygonMesh.material.attachShader(shader, true);
          }
          __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].setMaterialFromModel(shader.__shading, polygonMesh.material, componentModel, api);

          if (linesVertexCount > 0) {
              this._linesMesh.geometry.resetOffset();
              this._linesMesh.geometry.setVertexCount(linesVertexCount);
              this._linesMesh.geometry.setTriangleCount(linesTriangleCount);
          }

          // Indexing data index from vertex index.
          this._dataIndexOfVertex = new Uint32Array(polygonVertexCount);
          // Indexing vertex index range from data index
          this._vertexRangeOfDataIndex = new Uint32Array((end - start) * 2);
      },

      _updateRegionMesh: function (componentModel, api, start, end) {

          var data = componentModel.getData();

          var vertexOffset = 0;
          var triangleOffset = 0;

          // Materials configurations.
          var hasTranparentRegion = false;

          var polygonMesh = this._polygonMesh;
          var linesMesh = this._linesMesh;

          for (var dataIndex = start; dataIndex < end; dataIndex++) {
              // Get bunch of visual properties.
              var regionModel = componentModel.getRegionModel(dataIndex);
              var itemStyleModel = regionModel.getModel('itemStyle');
              var color = itemStyleModel.get('color');
              var opacity = __WEBPACK_IMPORTED_MODULE_4__util_retrieve__["a" /* default */].firstNotNull(itemStyleModel.get('opacity'), 1.0);

              // Use visual color if it is encoded by visualMap component
              var visualColor = data.getItemVisual(dataIndex, 'color', true);
              if (visualColor != null && data.hasValue(dataIndex)) {
                  color = visualColor;
              }
              // Set color, opacity to visual for label usage.
              data.setItemVisual(dataIndex, 'color', color);
              data.setItemVisual(dataIndex, 'opacity', opacity);

              color = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].parseColor(color);
              var borderColor = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].parseColor(itemStyleModel.get('borderColor'));

              color[3] *= opacity;
              borderColor[3] *= opacity;

              var isTransparent = color[3] < 0.99;

              polygonMesh.material.set('color', [1,1,1,1]);
              hasTranparentRegion = hasTranparentRegion || isTransparent;

              var regionHeight = __WEBPACK_IMPORTED_MODULE_4__util_retrieve__["a" /* default */].firstNotNull(regionModel.get('height', true), componentModel.get('regionHeight'));

              var newOffsets = this._updatePolygonGeometry(
                  componentModel, polygonMesh.geometry, dataIndex, regionHeight,
                  vertexOffset, triangleOffset, color
              );

              for (var i = vertexOffset; i < newOffsets.vertexOffset; i++) {
                  this._dataIndexOfVertex[i] = dataIndex;
              }
              this._vertexRangeOfDataIndex[(dataIndex - start) * 2] = vertexOffset;
              this._vertexRangeOfDataIndex[(dataIndex - start) * 2 + 1] = newOffsets.vertexOffset;

              vertexOffset = newOffsets.vertexOffset;
              triangleOffset = newOffsets.triangleOffset;

              // Update lines.
              var lineWidth = itemStyleModel.get('borderWidth');
              var hasLine = lineWidth > 0;
              if (hasLine) {
                  lineWidth *= api.getDevicePixelRatio();
                  this._updateLinesGeometry(
                      linesMesh.geometry, componentModel, dataIndex, regionHeight, lineWidth,
                      componentModel.coordinateSystem.transform
                  );
              }
              linesMesh.invisible = !hasLine;
              linesMesh.material.set({
                  color: borderColor
              });
          }

          var polygonMesh = this._polygonMesh;
          polygonMesh.material.transparent = hasTranparentRegion;
          polygonMesh.material.depthMask = !hasTranparentRegion;
          polygonMesh.geometry.updateBoundingBox();

          polygonMesh.frontFace = this.extrudeY ? __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Mesh.CCW : __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Mesh.CW;

          // Update tangents
          if (polygonMesh.material.get('normalMap')) {
              polygonMesh.geometry.generateTangents();
          }

          polygonMesh.seriesIndex = componentModel.seriesIndex;

          polygonMesh.on('mousemove', this._onmousemove, this);
          polygonMesh.on('mouseout', this._onmouseout, this);
      },

      _updateDebugWireframe: function (componentModel) {
          var debugWireframeModel = componentModel.getModel('debug.wireframe');

          // TODO Unshow
          if (debugWireframeModel.get('show')) {
              var color = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].parseColor(
                  debugWireframeModel.get('lineStyle.color') || 'rgba(0,0,0,0.5)'
              );
              var width = __WEBPACK_IMPORTED_MODULE_4__util_retrieve__["a" /* default */].firstNotNull(
                  debugWireframeModel.get('lineStyle.width'), 1
              );

              // TODO  Will cause highlight wrong
              var mesh = this._polygonMesh;
              mesh.geometry.generateBarycentric();
              mesh.material.define('both', 'WIREFRAME_TRIANGLE');
              mesh.material.set('wireframeLineColor', color);
              mesh.material.set('wireframeLineWidth', width);
          }
      },

      _onmousemove: function (e) {
          var dataIndex = this._dataIndexOfVertex[e.triangle[0]];
          if (dataIndex == null) {
              dataIndex = -1;
          }
          if (dataIndex !== this._lastHoverDataIndex) {
              this.downplay(this._lastHoverDataIndex);
              this.highlight(dataIndex);
              this._labelsBuilder.updateLabels([dataIndex]);
          }
          this._lastHoverDataIndex = dataIndex;
          this._polygonMesh.dataIndex = dataIndex;
      },

      _onmouseout: function (e) {
          if (e.target) {
              this.downplay(this._lastHoverDataIndex);
              this._lastHoverDataIndex = -1;
              this._polygonMesh.dataIndex = -1;
          }

          this._labelsBuilder.updateLabels([]);
      },

      _updateGroundPlane: function (componentModel, geo3D, api) {
          var groundModel = componentModel.getModel('groundPlane', componentModel);
          this._groundMesh.invisible = !groundModel.get('show', true);
          if (this._groundMesh.invisible) {
              return;
          }

          var shading = componentModel.get('shading');
          var material = this._groundMaterials[shading];
          if (!material) {
              {
                  console.warn('Unkown shading ' + shading);
              }
              material = this._groundMaterials.lambert;
          }

          __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].setMaterialFromModel(shading, material, groundModel, api);
          if (material.get('normalMap')) {
              this._groundMesh.geometry.generateTangents();
          }

          this._groundMesh.material = material;
          this._groundMesh.material.set('color', __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].parseColor(groundModel.get('color')));

          this._groundMesh.scale.set(geo3D.size[0], geo3D.size[2], 1);
      },

      _triangulation: function (componentModel, start, end) {
          this._triangulationResults = [];

          var minAll = [Infinity, Infinity, Infinity];
          var maxAll = [-Infinity, -Infinity, -Infinity];

          var coordSys = componentModel.coordinateSystem;

          for (var idx = start; idx < end; idx++) {
              var polygons = [];
              var polygonCoords = componentModel.getRegionPolygonCoords(idx);
              for (var i = 0; i < polygonCoords.length; i++) {
                  var exterior = polygonCoords[i].exterior;
                  var interiors = polygonCoords[i].interiors;
                  var points = [];
                  var holes = [];
                  if (exterior.length < 3) {
                      continue;
                  }
                  var offset = 0;
                  for (var j = 0; j < exterior.length; j++) {
                      var p = exterior[j];
                      points[offset++] = p[0];
                      points[offset++] = p[1];
                  }

                  for (var j = 0; j < interiors.length; j++) {
                      if (interiors[j].length < 3) {
                          continue;
                      }
                      var startIdx = points.length / 2;
                      for (var k = 0; k < interiors[j].length; k++) {
                          var p = interiors[j][k];
                          points.push(p[0]);
                          points.push(p[1]);
                      }

                      holes.push(startIdx);
                  }
                  var triangles = Object(__WEBPACK_IMPORTED_MODULE_2__util_earcut__["a" /* default */])(points, holes);

                  var points3 = new Float64Array(points.length / 2 * 3);
                  var pos = [];
                  var min = [Infinity, Infinity, Infinity];
                  var max = [-Infinity, -Infinity, -Infinity];
                  var off3 = 0;
                  for (var j = 0; j < points.length;) {
                      vec3.set(pos, points[j++], 0, points[j++]);
                      if (coordSys && coordSys.transform) {
                          vec3.transformMat4(pos, pos, coordSys.transform);
                      }
                      vec3.min(min, min, pos);
                      vec3.max(max, max, pos);
                      points3[off3++] = pos[0];
                      points3[off3++] = pos[1];
                      points3[off3++] = pos[2];
                  }
                  vec3.min(minAll, minAll, min);
                  vec3.max(maxAll, maxAll, max);
                  polygons.push({
                      points: points3,
                      indices: triangles,
                      min: min,
                      max: max
                  });
              }
              this._triangulationResults.push(polygons);
          }

          this._geoBoundingBox = [minAll, maxAll];
      },

      /**
       * Get region vertex and triangle count
       */
      _getRegionPolygonInfo: function (idx) {

          var polygons = this._triangulationResults[idx - this._startIndex];

          var sideVertexCount = 0;
          var sideTriangleCount = 0;

          for (var i = 0; i < polygons.length; i++) {
              sideVertexCount += polygons[i].points.length / 3;
              sideTriangleCount += polygons[i].indices.length / 3;
          }

          var vertexCount = sideVertexCount * 2 + sideVertexCount * 4;
          var triangleCount = sideTriangleCount * 2 + sideVertexCount * 2;

          return {
              vertexCount: vertexCount,
              triangleCount: triangleCount
          };
      },

      _updatePolygonGeometry: function (
          componentModel, geometry, dataIndex, regionHeight,
          vertexOffset, triangleOffset, color
      ) {
          // FIXME
          var projectUVOnGround = componentModel.get('projectUVOnGround');

          var positionAttr = geometry.attributes.position;
          var normalAttr = geometry.attributes.normal;
          var texcoordAttr = geometry.attributes.texcoord0;
          var colorAttr = geometry.attributes.color;
          var polygons = this._triangulationResults[dataIndex - this._startIndex];

          var hasColor = colorAttr.value && color;

          var indices = geometry.indices;

          var extrudeCoordIndex = this.extrudeY ? 1 : 2;
          var sideCoordIndex = this.extrudeY ? 2 : 1;

          var scale = [
              this.rootNode.worldTransform.x.len(),
              this.rootNode.worldTransform.y.len(),
              this.rootNode.worldTransform.z.len()
          ];

          var min = vec3.mul([], this._geoBoundingBox[0], scale);
          var max = vec3.mul([], this._geoBoundingBox[1], scale);
          var maxDimSize = Math.max(max[0] - min[0], max[2] - min[2]);

          function addVertices(polygon, y, insideOffset) {
              var points = polygon.points;

              var pointsLen = points.length;
              var currentPosition = [];
              var uv = [];

              for (var k = 0; k < pointsLen; k += 3) {
                  currentPosition[0] = points[k];
                  currentPosition[extrudeCoordIndex] = y;
                  currentPosition[sideCoordIndex] = points[k + 2];

                  uv[0] = (points[k] * scale[0] - min[0]) / maxDimSize;
                  uv[1] = (points[k + 2] * scale[sideCoordIndex] - min[2]) / maxDimSize;

                  positionAttr.set(vertexOffset, currentPosition);
                  if (hasColor) {
                      colorAttr.set(vertexOffset, color);
                  }
                  texcoordAttr.set(vertexOffset++, uv);
              }
          }

          function buildTopBottom(polygon, y, insideOffset) {

              var startVertexOffset = vertexOffset;

              addVertices(polygon, y);

              var len = polygon.indices.length;
              for (var k = 0; k < len; k++) {
                  indices[triangleOffset * 3 + k] = polygon.indices[k] + startVertexOffset;
              }
              triangleOffset += polygon.indices.length / 3;
          }

          var normalTop = this.extrudeY ? [0, 1, 0] : [0, 0, 1];
          var normalBottom = vec3.negate([], normalTop);
          for (var p = 0; p < polygons.length; p++) {
              var startVertexOffset = vertexOffset;
              var polygon = polygons[p];
              // BOTTOM
              buildTopBottom(polygon, 0);
              // TOP
              buildTopBottom(polygon, regionHeight);

              var ringVertexCount = polygon.points.length / 3;
              for (var v = 0; v < ringVertexCount; v++) {
                  normalAttr.set(startVertexOffset + v, normalBottom);
                  normalAttr.set(startVertexOffset + v + ringVertexCount, normalTop);
              }

              var quadToTriangle = [0, 3, 1, 1, 3, 2];

              var quadPos = [[], [], [], []];
              var a = [];
              var b = [];
              var normal = [];
              var uv = [];
              var len = 0;
              for (var v = 0; v < ringVertexCount; v++) {
                  var next = (v + 1) % ringVertexCount;

                  var dx = (polygon.points[next * 3] - polygon.points[v * 3]) * scale[0];
                  var dy = (polygon.points[next * 3 + 2] - polygon.points[v * 3 + 2]) * scale[sideCoordIndex];
                  var sideLen = Math.sqrt(dx * dx + dy * dy);

                  // 0----1
                  // 3----2
                  for (var k = 0; k < 4; k++) {
                      var isCurrent = (k === 0 || k === 3);
                      var idx3 = (isCurrent ? v : next) * 3;
                      quadPos[k][0] = polygon.points[idx3];
                      quadPos[k][extrudeCoordIndex] = k > 1 ? regionHeight : 0;
                      quadPos[k][sideCoordIndex] = polygon.points[idx3 + 2];

                      positionAttr.set(vertexOffset + k, quadPos[k]);

                      if (projectUVOnGround) {
                          uv[0] = (polygon.points[idx3] * scale[0] - min[0]) / maxDimSize;
                          uv[1] = (polygon.points[idx3 + 2] * scale[sideCoordIndex] - min[sideCoordIndex]) / maxDimSize;
                      }
                      else {
                          uv[0] = (isCurrent ? len : (len + sideLen)) / maxDimSize;
                          uv[1] = (quadPos[k][extrudeCoordIndex] * scale[extrudeCoordIndex] - min[extrudeCoordIndex])  / maxDimSize;
                      }
                      texcoordAttr.set(vertexOffset + k, uv);
                  }
                  vec3.sub(a, quadPos[1], quadPos[0]);
                  vec3.sub(b, quadPos[3], quadPos[0]);
                  vec3.cross(normal, a, b);
                  vec3.normalize(normal, normal);

                  for (var k = 0; k < 4; k++) {
                      normalAttr.set(vertexOffset + k, normal);
                      if (hasColor) {
                          colorAttr.set(vertexOffset + k, color);
                      }
                  }

                  for (var k = 0; k < 6; k++) {
                      indices[triangleOffset * 3 + k] = quadToTriangle[k] + vertexOffset;
                  }

                  vertexOffset += 4;
                  triangleOffset += 2;

                  len += sideLen;
              }
          }

          geometry.dirty();

          return {
              vertexOffset: vertexOffset,
              triangleOffset: triangleOffset
          };
      },

      _getRegionLinesInfo: function (idx, componentModel, geometry) {
          var vertexCount = 0;
          var triangleCount = 0;

          var regionModel = componentModel.getRegionModel(idx);
          var itemStyleModel = regionModel.getModel('itemStyle');

          var lineWidth = itemStyleModel.get('borderWidth');
          if (lineWidth > 0) {
              var polygonCoords = componentModel.getRegionPolygonCoords(idx);
              polygonCoords.forEach(function (coords) {
                  var exterior = coords.exterior;
                  var interiors = coords.interiors;
                  vertexCount += geometry.getPolylineVertexCount(exterior);
                  triangleCount += geometry.getPolylineTriangleCount(exterior);
                  for (var i = 0; i < interiors.length; i++) {
                      vertexCount += geometry.getPolylineVertexCount(interiors[i]);
                      triangleCount += geometry.getPolylineTriangleCount(interiors[i]);
                  }
              }, this);
          }

          return {
              vertexCount: vertexCount,
              triangleCount: triangleCount
          };

      },

      _updateLinesGeometry: function (geometry, componentModel, dataIndex, regionHeight, lineWidth, transform) {
          function convertToPoints3(polygon) {
              var points = new Float64Array(polygon.length * 3);
              var offset = 0;
              var pos = [];
              for (var i = 0; i < polygon.length; i++) {
                  pos[0] = polygon[i][0];
                  // Add a offset to avoid z-fighting
                  pos[1] = regionHeight + 0.1;
                  pos[2] = polygon[i][1];

                  if (transform) {
                      vec3.transformMat4(pos, pos, transform);
                  }

                  points[offset++] = pos[0];
                  points[offset++] = pos[1];
                  points[offset++] = pos[2];
              }
              return points;
          }

          var whiteColor = [1, 1, 1, 1];
          var coords = componentModel.getRegionPolygonCoords(dataIndex);
          coords.forEach(function (geo) {
              var exterior = geo.exterior;
              var interiors = geo.interiors;

              geometry.addPolyline(convertToPoints3(exterior), whiteColor, lineWidth);

              for (var i = 0; i < interiors.length; i++) {
                  geometry.addPolyline(convertToPoints3(interiors[i]), whiteColor, lineWidth);
              }
          });
      },

      highlight: function (dataIndex) {
          var data = this._data;
          if (!data) {
              return;
          }

          var itemModel = data.getItemModel(dataIndex);
          var emphasisItemStyleModel = itemModel.getModel('emphasis.itemStyle');
          var emphasisColor = emphasisItemStyleModel.get('color');
          var emphasisOpacity = __WEBPACK_IMPORTED_MODULE_4__util_retrieve__["a" /* default */].firstNotNull(
              emphasisItemStyleModel.get('opacity'),
              data.getItemVisual(dataIndex, 'opacity'),
              1
          );
          if (emphasisColor == null) {
              var color = data.getItemVisual(dataIndex, 'color');
              emphasisColor = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.color.lift(color, -0.4);
          }
          if (emphasisOpacity == null) {
              emphasisOpacity = data.getItemVisual(dataIndex, 'opacity');
          }
          var colorArr = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].parseColor(emphasisColor);
          colorArr[3] *= emphasisOpacity;

          this._setColorOfDataIndex(data, dataIndex, colorArr);
      },

      downplay: function (dataIndex) {

          var data = this._data;
          if (!data) {
              return;
          }

          var color = data.getItemVisual(dataIndex, 'color');
          var opacity = __WEBPACK_IMPORTED_MODULE_4__util_retrieve__["a" /* default */].firstNotNull(data.getItemVisual(dataIndex, 'opacity'), 1);

          var colorArr = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].parseColor(color);
          colorArr[3] *= opacity;

          this._setColorOfDataIndex(data, dataIndex, colorArr);
      },

      _setColorOfDataIndex: function (data, dataIndex, colorArr) {
          if (dataIndex < this._startIndex && dataIndex > this._endIndex) {
              return;
          }
          dataIndex -= this._startIndex;
          for (var i = this._vertexRangeOfDataIndex[dataIndex * 2]; i < this._vertexRangeOfDataIndex[dataIndex * 2 + 1]; i++) {
              this._polygonMesh.geometry.attributes.color.set(i, colorArr);
          }
          this._polygonMesh.geometry.dirty();
          this._api.getZr().refresh();
      }
  };

  /* harmony default export */ __webpack_exports__["a"] = (Geo3DBuilder);

  /***/ }),
  /* 64 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ProgressiveQuickSort__ = __webpack_require__(96);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_claygl_src_dep_glmatrix__ = __webpack_require__(6);


  var vec3 = __WEBPACK_IMPORTED_MODULE_1_claygl_src_dep_glmatrix__["a" /* default */].vec3;

  var p0 = vec3.create();
  var p1 = vec3.create();
  var p2 = vec3.create();
  // var cp = vec3.create();

  /* harmony default export */ __webpack_exports__["a"] = ({

      needsSortTriangles: function () {
          return this.indices && this.sortTriangles;
      },

      needsSortTrianglesProgressively: function () {
          return this.needsSortTriangles() && this.triangleCount >= 2e4;
      },

      doSortTriangles: function (cameraPos, frame) {
          var indices = this.indices;
          // Do progressive quick sort.
          if (frame === 0) {
              var posAttr = this.attributes.position;
              var cameraPos = cameraPos.array;

              if (!this._triangleZList || this._triangleZList.length !== this.triangleCount) {
                  this._triangleZList = new Float32Array(this.triangleCount);
                  this._sortedTriangleIndices = new Uint32Array(this.triangleCount);

                  this._indicesTmp = new indices.constructor(indices.length);
                  this._triangleZListTmp = new Float32Array(this.triangleCount);
              }

              var cursor = 0;
              var firstZ;
              for (var i = 0; i < indices.length;) {
                  posAttr.get(indices[i++], p0);
                  posAttr.get(indices[i++], p1);
                  posAttr.get(indices[i++], p2);

                  // FIXME If use center ?
                  // cp[0] = (p0[0] + p1[0] + p2[0]) / 3;
                  // cp[1] = (p0[1] + p1[1] + p2[1]) / 3;
                  // cp[2] = (p0[2] + p1[2] + p2[2]) / 3;
                  // Camera position is in object space

                  // Use max of three points, PENDING
                  var z0 = vec3.sqrDist(p0, cameraPos);
                  var z1 = vec3.sqrDist(p1, cameraPos);
                  var z2 = vec3.sqrDist(p2, cameraPos);
                  var zMax = Math.min(z0, z1);
                  zMax = Math.min(zMax, z2);
                  if (i === 3) {
                      firstZ = zMax;
                      zMax = 0;
                  }
                  else {
                      // Only store the difference to avoid the precision issue.
                      zMax = zMax - firstZ;
                  }
                  this._triangleZList[cursor++] = zMax;
              }
          }


          var sortedTriangleIndices = this._sortedTriangleIndices;
          for (var i = 0; i < sortedTriangleIndices.length; i++) {
              sortedTriangleIndices[i] = i;
          }

          if (this.triangleCount < 2e4) {
              // Use simple timsort for simple geometries.
              if (frame === 0) {
                  // Use native sort temporary.
                  this._simpleSort(true);
              }
          }
          else {
              for (var i = 0; i < 3; i++) {
                  this._progressiveQuickSort(frame * 3 + i);
              }
          }

          var targetIndices = this._indicesTmp;
          var targetTriangleZList = this._triangleZListTmp;
          var faceZList = this._triangleZList;
          for (var i = 0; i < this.triangleCount; i++) {
              var fromIdx3 = sortedTriangleIndices[i] * 3;
              var toIdx3 = i * 3;
              targetIndices[toIdx3++] = indices[fromIdx3++];
              targetIndices[toIdx3++] = indices[fromIdx3++];
              targetIndices[toIdx3] = indices[fromIdx3];

              targetTriangleZList[i] = faceZList[sortedTriangleIndices[i]];
          }

          // Swap indices.
          var tmp = this._indicesTmp;
          this._indicesTmp = this.indices;
          this.indices = tmp;
          var tmp = this._triangleZListTmp;
          this._triangleZListTmp = this._triangleZList;
          this._triangleZList = tmp;

          this.dirtyIndices();
      },

      _simpleSort: function (useNativeQuickSort) {
          var faceZList = this._triangleZList;
          var sortedTriangleIndices = this._sortedTriangleIndices;

          function compare(a, b) {
              // Sort from far to near. which is descending order
              return faceZList[b] - faceZList[a];
          }
          if (useNativeQuickSort) {
              Array.prototype.sort.call(sortedTriangleIndices, compare);
          }
          else {
              __WEBPACK_IMPORTED_MODULE_0__ProgressiveQuickSort__["a" /* default */].sort(sortedTriangleIndices, compare, 0, sortedTriangleIndices.length - 1);
          }
      },

      _progressiveQuickSort: function (frame) {
          var faceZList = this._triangleZList;
          var sortedTriangleIndices = this._sortedTriangleIndices;

          this._quickSort = this._quickSort || new __WEBPACK_IMPORTED_MODULE_0__ProgressiveQuickSort__["a" /* default */]();

          this._quickSort.step(sortedTriangleIndices, function (a, b) {
              return faceZList[b] - faceZList[a];
          }, frame);
      }
  });

  /***/ }),
  /* 65 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_ZRTextureAtlasSurface__ = __webpack_require__(82);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_mesh_LabelsMesh__ = __webpack_require__(62);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_retrieve__ = __webpack_require__(2);





  var LABEL_NORMAL_SHOW_BIT = 1;
  var LABEL_EMPHASIS_SHOW_BIT = 2;

  function LabelsBuilder(width, height, api) {

      this._labelsMesh = new __WEBPACK_IMPORTED_MODULE_2__util_mesh_LabelsMesh__["a" /* default */]();

      this._labelTextureSurface = new __WEBPACK_IMPORTED_MODULE_1__util_ZRTextureAtlasSurface__["a" /* default */]({
          width: 512,
          height: 512,
          devicePixelRatio: api.getDevicePixelRatio(),
          onupdate: function () {
              api.getZr().refresh();
          }
      });
      this._api = api;

      this._labelsMesh.material.set('textureAtlas', this._labelTextureSurface.getTexture());
  }

  LabelsBuilder.prototype.getLabelPosition = function (dataIndex, positionDesc, distance) {
      return [0, 0, 0];
  };

  LabelsBuilder.prototype.getLabelDistance = function (dataIndex, positionDesc, distance) {
      return 0;
  };

  LabelsBuilder.prototype.getMesh = function () {
      return this._labelsMesh;
  };

  LabelsBuilder.prototype.updateData = function (data, start, end) {
      if (start == null) {
          start = 0;
      }
      if (end == null) {
          end = data.count();
      }

      if (!this._labelsVisibilitiesBits || this._labelsVisibilitiesBits.length !== (end - start)) {
          this._labelsVisibilitiesBits = new Uint8Array(end - start);
      }
      var normalLabelVisibilityQuery = ['label', 'show'];
      var emphasisLabelVisibilityQuery = ['emphasis', 'label', 'show'];

      for (var idx = start; idx < end; idx++) {
          var itemModel = data.getItemModel(idx);
          var normalVisibility = itemModel.get(normalLabelVisibilityQuery);
          var emphasisVisibility = itemModel.get(emphasisLabelVisibilityQuery);
          if (emphasisVisibility == null) {
              emphasisVisibility = normalVisibility;
          }
          var bit = (normalVisibility ? LABEL_NORMAL_SHOW_BIT : 0)
              | (emphasisVisibility ? LABEL_EMPHASIS_SHOW_BIT : 0);
          this._labelsVisibilitiesBits[idx - start] = bit;
      }

      this._start = start;
      this._end = end;

      this._data = data;
  };

  LabelsBuilder.prototype.updateLabels = function (highlightDataIndices) {

      if (!this._data) {
          return;
      }

      highlightDataIndices = highlightDataIndices || [];

      var hasHighlightData = highlightDataIndices.length > 0;
      var highlightDataIndicesMap = {};
      for (var i = 0; i < highlightDataIndices.length; i++) {
          highlightDataIndicesMap[highlightDataIndices[i]] = true;
      }

      this._labelsMesh.geometry.convertToDynamicArray(true);
      this._labelTextureSurface.clear();

      var normalLabelQuery = ['label'];
      var emphasisLabelQuery = ['emphasis', 'label'];
      var seriesModel = this._data.hostModel;
      var data = this._data;

      var seriesLabelModel = seriesModel.getModel(normalLabelQuery);
      var seriesLabelEmphasisModel = seriesModel.getModel(emphasisLabelQuery, seriesLabelModel);

      var textAlignMap = {
          left: 'right',
          right: 'left',
          top: 'center',
          bottom: 'center'
      };
      var textVerticalAlignMap = {
          left: 'middle',
          right: 'middle',
          top: 'bottom',
          bottom: 'top'
      };

      for (var dataIndex = this._start; dataIndex < this._end; dataIndex++) {
          var isEmphasis = false;
          if (hasHighlightData && highlightDataIndicesMap[dataIndex]) {
              isEmphasis = true;
          }
          var ifShow = this._labelsVisibilitiesBits[dataIndex - this._start]
              & (isEmphasis ? LABEL_EMPHASIS_SHOW_BIT : LABEL_NORMAL_SHOW_BIT);
          if (!ifShow) {
              continue;
          }

          var itemModel = data.getItemModel(dataIndex);
          var labelModel = itemModel.getModel(
              isEmphasis ? emphasisLabelQuery : normalLabelQuery,
              isEmphasis ? seriesLabelEmphasisModel : seriesLabelModel
          );
          var distance = labelModel.get('distance') || 0;
          var position = labelModel.get('position');
          var textStyleModel = labelModel.getModel('textStyle');

          var dpr = this._api.getDevicePixelRatio();
          var text = seriesModel.getFormattedLabel(dataIndex, isEmphasis ? 'emphasis' : 'normal');
          if (text == null || text === '') {
              return;
          }

          // TODO Background.
          var textEl = new __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.graphic.Text();
          __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.graphic.setTextStyle(textEl.style, textStyleModel, {
              text: text,
              textFill: textStyleModel.get('color') || data.getItemVisual(dataIndex, 'color') || '#000',
              textAlign: 'left',
              textVerticalAlign: 'top',
              opacity: __WEBPACK_IMPORTED_MODULE_3__util_retrieve__["a" /* default */].firstNotNull(textStyleModel.get('opacity'), data.getItemVisual(dataIndex, 'opacity'), 1)
          });
          var rect = textEl.getBoundingRect();
          var lineHeight = 1.2;
          rect.height *= lineHeight;

          var coords = this._labelTextureSurface.add(textEl);

          var textAlign = textAlignMap[position] || 'center';
          var textVerticalAlign = textVerticalAlignMap[position] || 'bottom';

          this._labelsMesh.geometry.addSprite(
              this.getLabelPosition(dataIndex, position, distance),
              [rect.width * dpr, rect.height * dpr], coords,
              textAlign, textVerticalAlign,
              this.getLabelDistance(dataIndex, position, distance) * dpr
          );
      }

      this._labelsMesh.material.set('uvScale', this._labelTextureSurface.getCoordsScale());

      // var canvas = this._labelTextureSurface.getTexture().image;
      // document.body.appendChild(canvas);
      // canvas.style.cssText = 'position:absolute;z-index: 1000';

      // Update image.
      this._labelTextureSurface.getZr().refreshImmediately();
      this._labelsMesh.geometry.convertToTypedArray();
      this._labelsMesh.geometry.dirty();
  };

  /* harmony default export */ __webpack_exports__["a"] = (LabelsBuilder);

  /***/ }),
  /* 66 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__ = __webpack_require__(1);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_sprite__ = __webpack_require__(241);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__PointsMesh__ = __webpack_require__(242);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__component_common_LabelsBuilder__ = __webpack_require__(65);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_claygl_src_math_Matrix4__ = __webpack_require__(7);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__util_retrieve__ = __webpack_require__(2);








  var SDF_RANGE = 20;

  var Z_2D = -10;

  function isSymbolSizeSame(a, b) {
      return a && b && a[0] === b[0] && a[1] === b[1];
  }
  // TODO gl_PointSize has max value.
  function PointsBuilder(is2D, api) {
      this.rootNode = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Node();

      /**
       * @type {boolean}
       */
      this.is2D = is2D;

      this._labelsBuilder = new __WEBPACK_IMPORTED_MODULE_4__component_common_LabelsBuilder__["a" /* default */](256, 256, api);

      // Give a large render order.
      this._labelsBuilder.getMesh().renderOrder = 100;
      this.rootNode.add(this._labelsBuilder.getMesh());

      this._api = api;

      this._spriteImageCanvas = document.createElement('canvas');

      this._startDataIndex = 0;
      this._endDataIndex = 0;

      this._sizeScale = 1;
  }

  PointsBuilder.prototype = {

      constructor: PointsBuilder,

      /**
       * If highlight on over
       */
      highlightOnMouseover: true,

      update: function (seriesModel, ecModel, api, start, end) {
          // Swap barMesh
          var tmp = this._prevMesh;
          this._prevMesh = this._mesh;
          this._mesh = tmp;

          var data = seriesModel.getData();

          if (start == null) {
              start = 0;
          }
          if (end == null) {
              end = data.count();
          }
          this._startDataIndex = start;
          this._endDataIndex = end - 1;

          if (!this._mesh) {
              var material = this._prevMesh && this._prevMesh.material;
              this._mesh = new __WEBPACK_IMPORTED_MODULE_3__PointsMesh__["a" /* default */]({
                  // Render after axes
                  renderOrder: 10,
                  // FIXME
                  frustumCulling: false
              });
              if (material) {
                  this._mesh.material = material;
              }
          }
          var material = this._mesh.material;
          var geometry = this._mesh.geometry;
          var attributes = geometry.attributes;

          this.rootNode.remove(this._prevMesh);
          this.rootNode.add(this._mesh);

          this._setPositionTextureToMesh(this._mesh, this._positionTexture);

          var symbolInfo = this._getSymbolInfo(seriesModel, start, end);
          var dpr = api.getDevicePixelRatio();

          // TODO image symbol
          var itemStyle = seriesModel.getModel('itemStyle').getItemStyle();
          var largeMode = seriesModel.get('large');

          var pointSizeScale = 1;
          if (symbolInfo.maxSize > 2) {
              pointSizeScale = this._updateSymbolSprite(seriesModel, itemStyle, symbolInfo, dpr);
              material.enableTexture('sprite');
          }
          else {
              material.disableTexture('sprite');
          }

          attributes.position.init(end - start);
          var rgbaArr = [];
          if (largeMode) {
              material.undefine('VERTEX_SIZE');
              material.undefine('VERTEX_COLOR');

              var color = data.getVisual('color');
              var opacity = data.getVisual('opacity');
              __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].parseColor(color, rgbaArr);
              rgbaArr[3] *= opacity;

              material.set({
                  color: rgbaArr,
                  'u_Size': symbolInfo.maxSize * this._sizeScale
              });
          }
          else {
              material.set({
                  color: [1, 1, 1, 1]
              });
              material.define('VERTEX_SIZE');
              material.define('VERTEX_COLOR');
              attributes.size.init(end - start);
              attributes.color.init(end - start);
              this._originalOpacity = new Float32Array(end - start);
          }

          var points = data.getLayout('points');

          var positionArr = attributes.position.value;

          for (var i = 0; i < end - start; i++) {
              var i3 = i * 3;
              var i2 = i * 2;
              if (this.is2D) {
                  positionArr[i3] = points[i2];
                  positionArr[i3 + 1] = points[i2 + 1];
                  positionArr[i3 + 2] = Z_2D;
              }
              else {
                  positionArr[i3] = points[i3];
                  positionArr[i3 + 1] = points[i3 + 1];
                  positionArr[i3 + 2] = points[i3 + 2];
              }

              if (!largeMode) {
                  var color = data.getItemVisual(i, 'color');
                  var opacity = data.getItemVisual(i, 'opacity');
                  __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].parseColor(color, rgbaArr);
                  rgbaArr[3] *= opacity;
                  attributes.color.set(i, rgbaArr);
                  var symbolSize = data.getItemVisual(i, 'symbolSize');
                  symbolSize = (symbolSize instanceof Array
                      ? Math.max(symbolSize[0], symbolSize[1]) : symbolSize);

                  // NaN pointSize may have strange result.
                  if (isNaN(symbolSize)) {
                      symbolSize = 0;
                  }
                  // Scale point size because canvas has margin.
                  attributes.size.value[i] = symbolSize * pointSizeScale * this._sizeScale;

                  // Save the original opacity for recover from fadeIn.
                  this._originalOpacity[i] = rgbaArr[3];
              }

          }

          this._mesh.sizeScale = pointSizeScale;

          geometry.updateBoundingBox();
          geometry.dirty();

          // Update material.
          this._updateMaterial(seriesModel, itemStyle);

          var coordSys = seriesModel.coordinateSystem;
          if (coordSys && coordSys.viewGL) {
              var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';
              material[methodName]('fragment', 'SRGB_DECODE');
          }

          if (!largeMode) {
              this._updateLabelBuilder(seriesModel, start, end);
          }

          this._updateHandler(seriesModel, ecModel, api);

          this._updateAnimation(seriesModel);

          this._api = api;
      },

      getPointsMesh: function () {
          return this._mesh;
      },

      updateLabels: function (highlightDataIndices) {
          this._labelsBuilder.updateLabels(highlightDataIndices);
      },

      hideLabels: function () {
          this.rootNode.remove(this._labelsBuilder.getMesh());
      },

      showLabels: function () {
          this.rootNode.add(this._labelsBuilder.getMesh());
      },

      _updateSymbolSprite: function (seriesModel, itemStyle, symbolInfo, dpr) {
          symbolInfo.maxSize = Math.min(symbolInfo.maxSize * 2, 200);
          var symbolSize = [];
          if (symbolInfo.aspect > 1) {
              symbolSize[0] = symbolInfo.maxSize;
              symbolSize[1] = symbolInfo.maxSize / symbolInfo.aspect;
          }
          else {
              symbolSize[1] = symbolInfo.maxSize;
              symbolSize[0] = symbolInfo.maxSize * symbolInfo.aspect;
          }

          // In case invalid data.
          symbolSize[0] = symbolSize[0] || 1;
          symbolSize[1] = symbolSize[1] || 1;

          if (this._symbolType !== symbolInfo.type
              || !isSymbolSizeSame(this._symbolSize, symbolSize)
              || this._lineWidth !== itemStyle.lineWidth
          ) {
              __WEBPACK_IMPORTED_MODULE_2__util_sprite__["a" /* default */].createSymbolSprite(symbolInfo.type, symbolSize, {
                  fill: '#fff',
                  lineWidth: itemStyle.lineWidth,
                  stroke: 'transparent',
                  shadowColor: 'transparent',
                  minMargin: Math.min(symbolSize[0] / 2, 10)
              }, this._spriteImageCanvas);

              __WEBPACK_IMPORTED_MODULE_2__util_sprite__["a" /* default */].createSDFFromCanvas(
                  this._spriteImageCanvas, Math.min(this._spriteImageCanvas.width, 32), SDF_RANGE,
                  this._mesh.material.get('sprite').image
              );

              this._symbolType = symbolInfo.type;
              this._symbolSize = symbolSize;
              this._lineWidth = itemStyle.lineWidth;
          }
          return this._spriteImageCanvas.width / symbolInfo.maxSize * dpr;

      },

      _updateMaterial: function (seriesModel, itemStyle) {
          var blendFunc = seriesModel.get('blendMode') === 'lighter'
              ? __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].additiveBlend : null;
          var material = this._mesh.material;
          material.blend = blendFunc;

          material.set('lineWidth', itemStyle.lineWidth / SDF_RANGE);

          var strokeColor = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].parseColor(itemStyle.stroke);
          material.set('strokeColor', strokeColor);

          // Because of symbol texture, we always needs it be transparent.
          material.transparent = true;
          material.depthMask = false;
          material.depthTest = !this.is2D;
          material.sortVertices = !this.is2D;
      },

      _updateLabelBuilder: function (seriesModel, start, end) {
          var data =seriesModel.getData();
          var geometry = this._mesh.geometry;
          var positionArr = geometry.attributes.position.value;
          var start = this._startDataIndex;
          var pointSizeScale = this._mesh.sizeScale;
          this._labelsBuilder.updateData(data, start, end);

          this._labelsBuilder.getLabelPosition = function (dataIndex, positionDesc, distance) {
              var idx3 = (dataIndex - start) * 3;
              return [positionArr[idx3], positionArr[idx3 + 1], positionArr[idx3 + 2]];
          };

          this._labelsBuilder.getLabelDistance = function (dataIndex, positionDesc, distance) {
              var size = geometry.attributes.size.get(dataIndex - start) / pointSizeScale;
              return size / 2 + distance;
          };
          this._labelsBuilder.updateLabels();

      },

      _updateAnimation: function (seriesModel) {
          __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].updateVertexAnimation(
              [['prevPosition', 'position'],
              ['prevSize', 'size']],
              this._prevMesh,
              this._mesh,
              seriesModel
          );
      },

      _updateHandler: function (seriesModel, ecModel, api) {
          var data = seriesModel.getData();
          var pointsMesh = this._mesh;
          var self = this;

          var lastDataIndex = -1;
          var isCartesian3D = seriesModel.coordinateSystem
              && seriesModel.coordinateSystem.type === 'cartesian3D';

          var grid3DModel;
          if (isCartesian3D) {
              grid3DModel = seriesModel.coordinateSystem.model;
          }

          pointsMesh.seriesIndex = seriesModel.seriesIndex;

          pointsMesh.off('mousemove');
          pointsMesh.off('mouseout');

          pointsMesh.on('mousemove', function (e) {
              var dataIndex = e.vertexIndex + self._startDataIndex;
              if (dataIndex !== lastDataIndex) {
                  if (this.highlightOnMouseover) {
                      this.downplay(data, lastDataIndex);
                      this.highlight(data, dataIndex);
                      this._labelsBuilder.updateLabels([dataIndex]);
                  }

                  if (isCartesian3D) {
                      api.dispatchAction({
                          type: 'grid3DShowAxisPointer',
                          value: [
                              data.get(seriesModel.coordDimToDataDim('x')[0], dataIndex),
                              data.get(seriesModel.coordDimToDataDim('y')[0], dataIndex),
                              data.get(seriesModel.coordDimToDataDim('z')[0], dataIndex)
                          ],
                          grid3DIndex: grid3DModel.componentIndex
                      });
                  }
              }

              pointsMesh.dataIndex = dataIndex;
              lastDataIndex = dataIndex;
          }, this);
          pointsMesh.on('mouseout', function (e) {
              var dataIndex = e.vertexIndex + self._startDataIndex;
              if (this.highlightOnMouseover) {
                  this.downplay(data, dataIndex);
                  this._labelsBuilder.updateLabels();
              }
              lastDataIndex = -1;
              pointsMesh.dataIndex = -1;

              if (isCartesian3D) {
                  api.dispatchAction({
                      type: 'grid3DHideAxisPointer',
                      grid3DIndex: grid3DModel.componentIndex
                  });
              }
          }, this);
      },

      updateLayout: function (seriesModel, ecModel, api) {
          var data = seriesModel.getData();
          if (!this._mesh) {
              return;
          }

          var positionArr = this._mesh.geometry.attributes.position.value;
          var points = data.getLayout('points');
          if (this.is2D) {
              for (var i = 0; i < points.length / 2; i++) {
                  var i3 = i * 3;
                  var i2 = i * 2;
                  positionArr[i3] = points[i2];
                  positionArr[i3 + 1] = points[i2 + 1];
                  positionArr[i3 + 2] = Z_2D;
              }
          }
          else {
              for (var i = 0; i < points.length; i++) {
                  positionArr[i] = points[i];
              }
          }
          this._mesh.geometry.dirty();

          api.getZr().refresh();
      },

      updateView: function (camera) {
          if (!this._mesh) {
              return;
          }

          var worldViewProjection = new __WEBPACK_IMPORTED_MODULE_5_claygl_src_math_Matrix4__["a" /* default */]();
          __WEBPACK_IMPORTED_MODULE_5_claygl_src_math_Matrix4__["a" /* default */].mul(worldViewProjection, camera.viewMatrix, this._mesh.worldTransform);
          __WEBPACK_IMPORTED_MODULE_5_claygl_src_math_Matrix4__["a" /* default */].mul(worldViewProjection, camera.projectionMatrix, worldViewProjection);

          this._mesh.updateNDCPosition(worldViewProjection, this.is2D, this._api);
      },

      highlight: function (data, dataIndex) {
          if (dataIndex > this._endDataIndex || dataIndex < this._startDataIndex) {
              return;
          }
          var itemModel = data.getItemModel(dataIndex);
          var emphasisItemStyleModel = itemModel.getModel('emphasis.itemStyle');
          var emphasisColor = emphasisItemStyleModel.get('color');
          var emphasisOpacity = emphasisItemStyleModel.get('opacity');
          if (emphasisColor == null) {
              var color = data.getItemVisual(dataIndex, 'color');
              emphasisColor = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.color.lift(color, -0.4);
          }
          if (emphasisOpacity == null) {
              emphasisOpacity = data.getItemVisual(dataIndex, 'opacity');
          }
          var colorArr = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].parseColor(emphasisColor);
          colorArr[3] *= emphasisOpacity;

          this._mesh.geometry.attributes.color.set(dataIndex - this._startDataIndex, colorArr);
          this._mesh.geometry.dirtyAttribute('color');

          this._api.getZr().refresh();
      },

      downplay: function (data, dataIndex) {
          if (dataIndex > this._endDataIndex || dataIndex < this._startDataIndex) {
              return;
          }
          var color = data.getItemVisual(dataIndex, 'color');
          var opacity = data.getItemVisual(dataIndex, 'opacity');

          var colorArr = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].parseColor(color);
          colorArr[3] *= opacity;

          this._mesh.geometry.attributes.color.set(dataIndex - this._startDataIndex, colorArr);
          this._mesh.geometry.dirtyAttribute('color');

          this._api.getZr().refresh();
      },

      fadeOutAll: function (fadeOutPercent) {
          if (this._originalOpacity) {
              var geo = this._mesh.geometry;
              for (var i = 0; i < geo.vertexCount; i++) {
                  var fadeOutOpacity = this._originalOpacity[i] * fadeOutPercent;
                  geo.attributes.color.value[i * 4 + 3] = fadeOutOpacity;
              }
              geo.dirtyAttribute('color');

              this._api.getZr().refresh();
          }
      },

      fadeInAll: function () {
          this.fadeOutAll(1);
      },

      setPositionTexture: function (texture) {
          if (this._mesh) {
              this._setPositionTextureToMesh(this._mesh, texture);
          }

          this._positionTexture = texture;
      },

      removePositionTexture: function () {
          this._positionTexture = null;
          if (this._mesh) {
              this._setPositionTextureToMesh(this._mesh, null);
          }
      },

      setSizeScale: function (sizeScale) {
          if (sizeScale !== this._sizeScale) {
              if (this._mesh) {
                  var originalSize = this._mesh.material.get('u_Size');
                  this._mesh.material.set('u_Size', originalSize / this._sizeScale * sizeScale);

                  var attributes = this._mesh.geometry.attributes;
                  if (attributes.size.value) {
                      for (var i = 0; i < attributes.size.value.length; i++) {
                          attributes.size.value[i] = attributes.size.value[i] / this._sizeScale * sizeScale;
                      }
                  }
              }
              this._sizeScale = sizeScale;
          }
      },

      _setPositionTextureToMesh: function (mesh, texture) {
          if (texture) {
              mesh.material.set('positionTexture', texture);
          }
          mesh.material[
              texture ? 'enableTexture' : 'disableTexture'
          ]('positionTexture');
      },

      _getSymbolInfo: function (seriesModel, start, end) {
          if (seriesModel.get('large')) {
              var symbolSize = __WEBPACK_IMPORTED_MODULE_6__util_retrieve__["a" /* default */].firstNotNull(seriesModel.get('symbolSize'), 1);
              var maxSymbolSize;
              var symbolAspect;
              if (symbolSize instanceof Array) {
                  maxSymbolSize = Math.max(symbolSize[0], symbolSize[1]);
                  symbolAspect = symbolSize[0] / symbolSize[1];
              }
              else {
                  maxSymbolSize = symbolSize;
                  symbolAspect = 1;
              }
              return {
                  maxSize: symbolSize,
                  type: seriesModel.get('symbol'),
                  aspect: symbolAspect
              }
          }
          var data = seriesModel.getData();
          var symbolAspect;
          var differentSymbolAspect = false;
          var symbolType = data.getItemVisual(0, 'symbol') || 'circle';
          var differentSymbolType = false;
          var maxSymbolSize = 0;

          for (var idx = start; idx < end; idx++) {
              var symbolSize = data.getItemVisual(idx, 'symbolSize');
              var currentSymbolType = data.getItemVisual(idx, 'symbol');
              var currentSymbolAspect;
              if (!(symbolSize instanceof Array)) {
                  // Ignore NaN value.
                  if (isNaN(symbolSize)) {
                      return;
                  }

                  currentSymbolAspect = 1;
                  maxSymbolSize = Math.max(symbolSize, maxSymbolSize);
              }
              else {
                  currentSymbolAspect = symbolSize[0] / symbolSize[1];
                  maxSymbolSize = Math.max(Math.max(symbolSize[0], symbolSize[1]), maxSymbolSize);
              }
              {
                  if (symbolAspect != null && Math.abs(currentSymbolAspect - symbolAspect) > 0.05) {
                      differentSymbolAspect = true;
                  }
                  if (currentSymbolType !== symbolType) {
                      differentSymbolType = true;
                  }
              }
              symbolType = currentSymbolType;
              symbolAspect = currentSymbolAspect;
          }

          {
              if (differentSymbolAspect) {
                  console.warn('Different symbol width / height ratio will be ignored.');
              }
              if (differentSymbolType) {
                  console.warn('Different symbol type will be ignored.');
              }
          }

          return {
              maxSize: maxSymbolSize,
              type: symbolType,
              aspect: symbolAspect
          };
      }
  };

  /* harmony default export */ __webpack_exports__["a"] = (PointsBuilder);


  /***/ }),
  /* 67 */
  /***/ (function(module, exports) {

  var g;

  // This works in non-strict mode
  g = (function() {
  	return this;
  })();

  try {
  	// This works if eval is allowed (see CSP)
  	g = g || Function("return this")() || (1,eval)("this");
  } catch(e) {
  	// This works if the window reference is available
  	if(typeof window === "object")
  		g = window;
  }

  // g can still be undefined, but nothing to do about it...
  // We return undefined, instead of nothing here, so it's
  // easier to handle this case. if(!global) { ...}

  module.exports = g;


  /***/ }),
  /* 68 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__LinkedList__ = __webpack_require__(113);


  /**
   * LRU Cache
   * @constructor
   * @alias clay.core.LRU
   */
  var LRU = function (maxSize) {

      this._list = new __WEBPACK_IMPORTED_MODULE_0__LinkedList__["a" /* default */]();

      this._map = {};

      this._maxSize = maxSize || 10;
  };

  /**
   * Set cache max size
   * @param {number} size
   */
  LRU.prototype.setMaxSize = function (size) {
      this._maxSize = size;
  };

  /**
   * @param  {string} key
   * @param  {} value
   */
  LRU.prototype.put = function (key, value) {
      if (!this._map.hasOwnProperty(key)) {
          var len = this._list.length();
          if (len >= this._maxSize && len > 0) {
              // Remove the least recently used
              var leastUsedEntry = this._list.head;
              this._list.remove(leastUsedEntry);
              delete this._map[leastUsedEntry.key];
          }

          var entry = this._list.insert(value);
          entry.key = key;
          this._map[key] = entry;
      }
  };

  /**
   * @param  {string} key
   * @return {}
   */
  LRU.prototype.get = function (key) {
      var entry = this._map[key];
      if (this._map.hasOwnProperty(key)) {
          // Put the latest used entry in the tail
          if (entry !== this._list.tail) {
              this._list.remove(entry);
              this._list.insertEntry(entry);
          }

          return entry.value;
      }
  };

  /**
   * @param {string} key
   */
  LRU.prototype.remove = function (key) {
      var entry = this._map[key];
      if (typeof(entry) !== 'undefined') {
          delete this._map[key];
          this._list.remove(entry);
      }
  };

  /**
   * Clear the cache
   */
  LRU.prototype.clear = function () {
      this._list.clear();
      this._map = {};
  };

  /* harmony default export */ __webpack_exports__["a"] = (LRU);


  /***/ }),
  /* 69 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(20);

  /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, this
      list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
      and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */



  /**
   * @class 2 Dimensional Vector
   * @name vec2
   */

  var vec2 = {};

  /**
   * Creates a new, empty vec2
   *
   * @returns {vec2} a new 2D vector
   */
  vec2.create = function() {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* GLMAT_ARRAY_TYPE */](2);
      out[0] = 0;
      out[1] = 0;
      return out;
  };

  /**
   * Creates a new vec2 initialized with values from an existing vector
   *
   * @param {vec2} a vector to clone
   * @returns {vec2} a new 2D vector
   */
  vec2.clone = function(a) {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* GLMAT_ARRAY_TYPE */](2);
      out[0] = a[0];
      out[1] = a[1];
      return out;
  };

  /**
   * Creates a new vec2 initialized with the given values
   *
   * @param {Number} x X component
   * @param {Number} y Y component
   * @returns {vec2} a new 2D vector
   */
  vec2.fromValues = function(x, y) {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* GLMAT_ARRAY_TYPE */](2);
      out[0] = x;
      out[1] = y;
      return out;
  };

  /**
   * Copy the values from one vec2 to another
   *
   * @param {vec2} out the receiving vector
   * @param {vec2} a the source vector
   * @returns {vec2} out
   */
  vec2.copy = function(out, a) {
      out[0] = a[0];
      out[1] = a[1];
      return out;
  };

  /**
   * Set the components of a vec2 to the given values
   *
   * @param {vec2} out the receiving vector
   * @param {Number} x X component
   * @param {Number} y Y component
   * @returns {vec2} out
   */
  vec2.set = function(out, x, y) {
      out[0] = x;
      out[1] = y;
      return out;
  };

  /**
   * Adds two vec2's
   *
   * @param {vec2} out the receiving vector
   * @param {vec2} a the first operand
   * @param {vec2} b the second operand
   * @returns {vec2} out
   */
  vec2.add = function(out, a, b) {
      out[0] = a[0] + b[0];
      out[1] = a[1] + b[1];
      return out;
  };

  /**
   * Subtracts vector b from vector a
   *
   * @param {vec2} out the receiving vector
   * @param {vec2} a the first operand
   * @param {vec2} b the second operand
   * @returns {vec2} out
   */
  vec2.subtract = function(out, a, b) {
      out[0] = a[0] - b[0];
      out[1] = a[1] - b[1];
      return out;
  };

  /**
   * Alias for {@link vec2.subtract}
   * @function
   */
  vec2.sub = vec2.subtract;

  /**
   * Multiplies two vec2's
   *
   * @param {vec2} out the receiving vector
   * @param {vec2} a the first operand
   * @param {vec2} b the second operand
   * @returns {vec2} out
   */
  vec2.multiply = function(out, a, b) {
      out[0] = a[0] * b[0];
      out[1] = a[1] * b[1];
      return out;
  };

  /**
   * Alias for {@link vec2.multiply}
   * @function
   */
  vec2.mul = vec2.multiply;

  /**
   * Divides two vec2's
   *
   * @param {vec2} out the receiving vector
   * @param {vec2} a the first operand
   * @param {vec2} b the second operand
   * @returns {vec2} out
   */
  vec2.divide = function(out, a, b) {
      out[0] = a[0] / b[0];
      out[1] = a[1] / b[1];
      return out;
  };

  /**
   * Alias for {@link vec2.divide}
   * @function
   */
  vec2.div = vec2.divide;

  /**
   * Returns the minimum of two vec2's
   *
   * @param {vec2} out the receiving vector
   * @param {vec2} a the first operand
   * @param {vec2} b the second operand
   * @returns {vec2} out
   */
  vec2.min = function(out, a, b) {
      out[0] = Math.min(a[0], b[0]);
      out[1] = Math.min(a[1], b[1]);
      return out;
  };

  /**
   * Returns the maximum of two vec2's
   *
   * @param {vec2} out the receiving vector
   * @param {vec2} a the first operand
   * @param {vec2} b the second operand
   * @returns {vec2} out
   */
  vec2.max = function(out, a, b) {
      out[0] = Math.max(a[0], b[0]);
      out[1] = Math.max(a[1], b[1]);
      return out;
  };

  /**
   * Scales a vec2 by a scalar number
   *
   * @param {vec2} out the receiving vector
   * @param {vec2} a the vector to scale
   * @param {Number} b amount to scale the vector by
   * @returns {vec2} out
   */
  vec2.scale = function(out, a, b) {
      out[0] = a[0] * b;
      out[1] = a[1] * b;
      return out;
  };

  /**
   * Adds two vec2's after scaling the second operand by a scalar value
   *
   * @param {vec2} out the receiving vector
   * @param {vec2} a the first operand
   * @param {vec2} b the second operand
   * @param {Number} scale the amount to scale b by before adding
   * @returns {vec2} out
   */
  vec2.scaleAndAdd = function(out, a, b, scale) {
      out[0] = a[0] + (b[0] * scale);
      out[1] = a[1] + (b[1] * scale);
      return out;
  };

  /**
   * Calculates the euclidian distance between two vec2's
   *
   * @param {vec2} a the first operand
   * @param {vec2} b the second operand
   * @returns {Number} distance between a and b
   */
  vec2.distance = function(a, b) {
      var x = b[0] - a[0],
          y = b[1] - a[1];
      return Math.sqrt(x*x + y*y);
  };

  /**
   * Alias for {@link vec2.distance}
   * @function
   */
  vec2.dist = vec2.distance;

  /**
   * Calculates the squared euclidian distance between two vec2's
   *
   * @param {vec2} a the first operand
   * @param {vec2} b the second operand
   * @returns {Number} squared distance between a and b
   */
  vec2.squaredDistance = function(a, b) {
      var x = b[0] - a[0],
          y = b[1] - a[1];
      return x*x + y*y;
  };

  /**
   * Alias for {@link vec2.squaredDistance}
   * @function
   */
  vec2.sqrDist = vec2.squaredDistance;

  /**
   * Calculates the length of a vec2
   *
   * @param {vec2} a vector to calculate length of
   * @returns {Number} length of a
   */
  vec2.length = function (a) {
      var x = a[0],
          y = a[1];
      return Math.sqrt(x*x + y*y);
  };

  /**
   * Alias for {@link vec2.length}
   * @function
   */
  vec2.len = vec2.length;

  /**
   * Calculates the squared length of a vec2
   *
   * @param {vec2} a vector to calculate squared length of
   * @returns {Number} squared length of a
   */
  vec2.squaredLength = function (a) {
      var x = a[0],
          y = a[1];
      return x*x + y*y;
  };

  /**
   * Alias for {@link vec2.squaredLength}
   * @function
   */
  vec2.sqrLen = vec2.squaredLength;

  /**
   * Negates the components of a vec2
   *
   * @param {vec2} out the receiving vector
   * @param {vec2} a vector to negate
   * @returns {vec2} out
   */
  vec2.negate = function(out, a) {
      out[0] = -a[0];
      out[1] = -a[1];
      return out;
  };

  /**
   * Returns the inverse of the components of a vec2
   *
   * @param {vec2} out the receiving vector
   * @param {vec2} a vector to invert
   * @returns {vec2} out
   */
  vec2.inverse = function(out, a) {
    out[0] = 1.0 / a[0];
    out[1] = 1.0 / a[1];
    return out;
  };

  /**
   * Normalize a vec2
   *
   * @param {vec2} out the receiving vector
   * @param {vec2} a vector to normalize
   * @returns {vec2} out
   */
  vec2.normalize = function(out, a) {
      var x = a[0],
          y = a[1];
      var len = x*x + y*y;
      if (len > 0) {
          //TODO: evaluate use of glm_invsqrt here?
          len = 1 / Math.sqrt(len);
          out[0] = a[0] * len;
          out[1] = a[1] * len;
      }
      return out;
  };

  /**
   * Calculates the dot product of two vec2's
   *
   * @param {vec2} a the first operand
   * @param {vec2} b the second operand
   * @returns {Number} dot product of a and b
   */
  vec2.dot = function (a, b) {
      return a[0] * b[0] + a[1] * b[1];
  };

  /**
   * Computes the cross product of two vec2's
   * Note that the cross product must by definition produce a 3D vector
   *
   * @param {vec3} out the receiving vector
   * @param {vec2} a the first operand
   * @param {vec2} b the second operand
   * @returns {vec3} out
   */
  vec2.cross = function(out, a, b) {
      var z = a[0] * b[1] - a[1] * b[0];
      out[0] = out[1] = 0;
      out[2] = z;
      return out;
  };

  /**
   * Performs a linear interpolation between two vec2's
   *
   * @param {vec2} out the receiving vector
   * @param {vec2} a the first operand
   * @param {vec2} b the second operand
   * @param {Number} t interpolation amount between the two inputs
   * @returns {vec2} out
   */
  vec2.lerp = function (out, a, b, t) {
      var ax = a[0],
          ay = a[1];
      out[0] = ax + t * (b[0] - ax);
      out[1] = ay + t * (b[1] - ay);
      return out;
  };

  /**
   * Generates a random vector with the given scale
   *
   * @param {vec2} out the receiving vector
   * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
   * @returns {vec2} out
   */
  vec2.random = function (out, scale) {
      scale = scale || 1.0;
      var r = GLMAT_RANDOM() * 2.0 * Math.PI;
      out[0] = Math.cos(r) * scale;
      out[1] = Math.sin(r) * scale;
      return out;
  };

  /**
   * Transforms the vec2 with a mat2
   *
   * @param {vec2} out the receiving vector
   * @param {vec2} a the vector to transform
   * @param {mat2} m matrix to transform with
   * @returns {vec2} out
   */
  vec2.transformMat2 = function(out, a, m) {
      var x = a[0],
          y = a[1];
      out[0] = m[0] * x + m[2] * y;
      out[1] = m[1] * x + m[3] * y;
      return out;
  };

  /**
   * Transforms the vec2 with a mat2d
   *
   * @param {vec2} out the receiving vector
   * @param {vec2} a the vector to transform
   * @param {mat2d} m matrix to transform with
   * @returns {vec2} out
   */
  vec2.transformMat2d = function(out, a, m) {
      var x = a[0],
          y = a[1];
      out[0] = m[0] * x + m[2] * y + m[4];
      out[1] = m[1] * x + m[3] * y + m[5];
      return out;
  };

  /**
   * Transforms the vec2 with a mat3
   * 3rd vector component is implicitly '1'
   *
   * @param {vec2} out the receiving vector
   * @param {vec2} a the vector to transform
   * @param {mat3} m matrix to transform with
   * @returns {vec2} out
   */
  vec2.transformMat3 = function(out, a, m) {
      var x = a[0],
          y = a[1];
      out[0] = m[0] * x + m[3] * y + m[6];
      out[1] = m[1] * x + m[4] * y + m[7];
      return out;
  };

  /**
   * Transforms the vec2 with a mat4
   * 3rd vector component is implicitly '0'
   * 4th vector component is implicitly '1'
   *
   * @param {vec2} out the receiving vector
   * @param {vec2} a the vector to transform
   * @param {mat4} m matrix to transform with
   * @returns {vec2} out
   */
  vec2.transformMat4 = function(out, a, m) {
      var x = a[0],
          y = a[1];
      out[0] = m[0] * x + m[4] * y + m[12];
      out[1] = m[1] * x + m[5] * y + m[13];
      return out;
  };

  /**
   * Perform some operation over an array of vec2s.
   *
   * @param {Array} a the array of vectors to iterate over
   * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
   * @param {Number} offset Number of elements to skip at the beginning of the array
   * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
   * @param {Function} fn Function to call for each vector in the array
   * @param {Object} [arg] additional argument to pass to fn
   * @returns {Array} a
   * @function
   */
  vec2.forEach = (function() {
      var vec = vec2.create();

      return function(a, stride, offset, count, fn, arg) {
          var i, l;
          if(!stride) {
              stride = 2;
          }

          if(!offset) {
              offset = 0;
          }

          if(count) {
              l = Math.min((count * stride) + offset, a.length);
          } else {
              l = a.length;
          }

          for(i = offset; i < l; i += stride) {
              vec[0] = a[i]; vec[1] = a[i+1];
              fn(vec, vec, arg);
              a[i] = vec[0]; a[i+1] = vec[1];
          }

          return a;
      };
  })();

  /* harmony default export */ __webpack_exports__["a"] = (vec2);

  /***/ }),
  /* 70 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("@export clay.prez.vertex\n#define SHADER_NAME prez\nuniform mat4 WVP : WORLDVIEWPROJECTION;\nattribute vec3 pos : POSITION;\nattribute vec2 uv : TEXCOORD_0;\nuniform vec2 uvRepeat : [1.0, 1.0];\nuniform vec2 uvOffset : [0.0, 0.0];\n@import clay.chunk.skinning_header\n@import clay.chunk.instancing_header\n@import clay.util.logdepth_vertex_header\nvarying vec2 v_Texcoord;\nvoid main()\n{\n vec4 P = vec4(pos, 1.0);\n#ifdef SKINNING\n @import clay.chunk.skin_matrix\n P = skinMatrixWS * P;\n#endif\n#ifdef INSTANCING\n @import clay.chunk.instancing_matrix\n P = instanceMat * P;\n#endif\n gl_Position = WVP * P;\n v_Texcoord = uv * uvRepeat + uvOffset;\n @import clay.util.logdepth_vertex_main\n}\n@end\n@export clay.prez.fragment\nuniform sampler2D alphaMap;\nuniform float alphaCutoff: 0.0;\n@import clay.util.logdepth_fragment_header\nvarying vec2 v_Texcoord;\nvoid main()\n{\n if (alphaCutoff > 0.0) {\n if (texture2D(alphaMap, v_Texcoord).a <= alphaCutoff) {\n discard;\n }\n }\n gl_FragColor = vec4(0.0,0.0,0.0,1.0);\n @import clay.util.logdepth_fragment_main\n}\n@end");


  /***/ }),
  /* 71 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Node__ = __webpack_require__(35);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_glenum__ = __webpack_require__(11);



  /**
   * @constructor
   * @alias clay.Renderable
   * @extends clay.Node
   */
  var Renderable = __WEBPACK_IMPORTED_MODULE_0__Node__["a" /* default */].extend(/** @lends clay.Renderable# */ {
      /**
       * @type {clay.Material}
       */
      material: null,

      /**
       * @type {clay.Geometry}
       */
      geometry: null,

      /**
       * @type {number}
       */
      mode: __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].TRIANGLES,

      _renderInfo: null
  },
  /** @lends clay.Renderable.prototype */
  {

      __program: null,

      /**
       * Group of received light.
       */
      lightGroup: 0,
      /**
       * Render order, Nodes with smaller value renders before nodes with larger values.
       * @type {Number}
       */
      renderOrder: 0,

      /**
       * Used when mode is LINES, LINE_STRIP or LINE_LOOP
       * @type {number}
       */
      // lineWidth: 1,

      /**
       * If enable culling
       * @type {boolean}
       */
      culling: true,
      /**
       * Specify which side of polygon will be culled.
       * Possible values:
       *  + {@link clay.Renderable.BACK}
       *  + {@link clay.Renderable.FRONT}
       *  + {@link clay.Renderable.FRONT_AND_BACK}
       * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/cullFace
       * @type {number}
       */
      cullFace: __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].BACK,
      /**
       * Specify which side is front face.
       * Possible values:
       *  + {@link clay.Renderable.CW}
       *  + {@link clay.Renderable.CCW}
       * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/frontFace
       * @type {number}
       */
      frontFace: __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].CCW,

      /**
       * If enable software frustum culling
       * @type {boolean}
       */
      frustumCulling: true,
      /**
       * @type {boolean}
       */
      receiveShadow: true,
      /**
       * @type {boolean}
       */
      castShadow: true,
      /**
       * @type {boolean}
       */
      ignorePicking: false,
      /**
       * @type {boolean}
       */
      ignorePreZ: false,

      /**
       * @type {boolean}
       */
      ignoreGBuffer: false,

      /**
       * @return {boolean}
       */
      isRenderable: function() {
          // TODO Shader ?
          return this.geometry && this.material && this.material.shader && !this.invisible
              && this.geometry.vertexCount > 0;
      },

      /**
       * Before render hook
       * @type {Function}
       */
      beforeRender: function (_gl) {},

      /**
       * Before render hook
       * @type {Function}
       */
      afterRender: function (_gl, renderStat) {},

      getBoundingBox: function (filter, out) {
          out = __WEBPACK_IMPORTED_MODULE_0__Node__["a" /* default */].prototype.getBoundingBox.call(this, filter, out);
          if (this.geometry && this.geometry.boundingBox) {
              out.union(this.geometry.boundingBox);
          }

          return out;
      },

      /**
       * Clone a new renderable
       * @function
       * @return {clay.Renderable}
       */
      clone: (function() {
          var properties = [
              'castShadow', 'receiveShadow',
              'mode', 'culling', 'cullFace', 'frontFace',
              'frustumCulling',
              'renderOrder', 'lineWidth',
              'ignorePicking', 'ignorePreZ', 'ignoreGBuffer'
          ];
          return function() {
              var renderable = __WEBPACK_IMPORTED_MODULE_0__Node__["a" /* default */].prototype.clone.call(this);

              renderable.geometry = this.geometry;
              renderable.material = this.material;

              for (var i = 0; i < properties.length; i++) {
                  var name = properties[i];
                  // Try not to overwrite the prototype property
                  if (renderable[name] !== this[name]) {
                      renderable[name] = this[name];
                  }
              }

              return renderable;
          };
      })()
  });

  /**
   * @type {number}
   */
  Renderable.POINTS = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].POINTS;
  /**
   * @type {number}
   */
  Renderable.LINES = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].LINES;
  /**
   * @type {number}
   */
  Renderable.LINE_LOOP = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].LINE_LOOP;
  /**
   * @type {number}
   */
  Renderable.LINE_STRIP = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].LINE_STRIP;
  /**
   * @type {number}
   */
  Renderable.TRIANGLES = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].TRIANGLES;
  /**
   * @type {number}
   */
  Renderable.TRIANGLE_STRIP = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].TRIANGLE_STRIP;
  /**
   * @type {number}
   */
  Renderable.TRIANGLE_FAN = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].TRIANGLE_FAN;
  /**
   * @type {number}
   */
  Renderable.BACK = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].BACK;
  /**
   * @type {number}
   */
  Renderable.FRONT = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].FRONT;
  /**
   * @type {number}
   */
  Renderable.FRONT_AND_BACK = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].FRONT_AND_BACK;
  /**
   * @type {number}
   */
  Renderable.CW = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].CW;
  /**
   * @type {number}
   */
  Renderable.CCW = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].CCW;

  /* harmony default export */ __webpack_exports__["a"] = (Renderable);


  /***/ }),
  /* 72 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  var mathUtil = {};

  mathUtil.isPowerOfTwo = function (value) {
      return (value & (value - 1)) === 0;
  };

  mathUtil.nextPowerOfTwo = function (value) {
      value --;
      value |= value >> 1;
      value |= value >> 2;
      value |= value >> 4;
      value |= value >> 8;
      value |= value >> 16;
      value ++;

      return value;
  };

  mathUtil.nearestPowerOfTwo = function (value) {
      return Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );
  };

  /* harmony default export */ __webpack_exports__["a"] = (mathUtil);


  /***/ }),
  /* 73 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Vector3__ = __webpack_require__(3);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__glmatrix_mat4__ = __webpack_require__(21);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__glmatrix_vec3__ = __webpack_require__(12);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__glmatrix_vec4__ = __webpack_require__(33);





  /**
   * @constructor
   * @alias clay.Plane
   * @param {clay.Vector3} [normal]
   * @param {number} [distance]
   */
  var Plane = function(normal, distance) {
      /**
       * Normal of the plane
       * @type {clay.Vector3}
       */
      this.normal = normal || new __WEBPACK_IMPORTED_MODULE_0__Vector3__["a" /* default */](0, 1, 0);

      /**
       * Constant of the plane equation, used as distance to the origin
       * @type {number}
       */
      this.distance = distance || 0;
  };

  Plane.prototype = {

      constructor: Plane,

      /**
       * Distance from a given point to the plane
       * @param  {clay.Vector3} point
       * @return {number}
       */
      distanceToPoint: function(point) {
          return __WEBPACK_IMPORTED_MODULE_2__glmatrix_vec3__["a" /* default */].dot(point.array, this.normal.array) - this.distance;
      },

      /**
       * Calculate the projection point on the plane
       * @param  {clay.Vector3} point
       * @param  {clay.Vector3} out
       * @return {clay.Vector3}
       */
      projectPoint: function(point, out) {
          if (!out) {
              out = new __WEBPACK_IMPORTED_MODULE_0__Vector3__["a" /* default */]();
          }
          var d = this.distanceToPoint(point);
          __WEBPACK_IMPORTED_MODULE_2__glmatrix_vec3__["a" /* default */].scaleAndAdd(out.array, point.array, this.normal.array, -d);
          out._dirty = true;
          return out;
      },

      /**
       * Normalize the plane's normal and calculate the distance
       */
      normalize: function() {
          var invLen = 1 / __WEBPACK_IMPORTED_MODULE_2__glmatrix_vec3__["a" /* default */].len(this.normal.array);
          __WEBPACK_IMPORTED_MODULE_2__glmatrix_vec3__["a" /* default */].scale(this.normal.array, invLen);
          this.distance *= invLen;
      },

      /**
       * If the plane intersect a frustum
       * @param  {clay.Frustum} Frustum
       * @return {boolean}
       */
      intersectFrustum: function(frustum) {
          // Check if all coords of frustum is on plane all under plane
          var coords = frustum.vertices;
          var normal = this.normal.array;
          var onPlane = __WEBPACK_IMPORTED_MODULE_2__glmatrix_vec3__["a" /* default */].dot(coords[0].array, normal) > this.distance;
          for (var i = 1; i < 8; i++) {
              if ((__WEBPACK_IMPORTED_MODULE_2__glmatrix_vec3__["a" /* default */].dot(coords[i].array, normal) > this.distance) != onPlane) {
                  return true;
              }
          }
      },

      /**
       * Calculate the intersection point between plane and a given line
       * @function
       * @param {clay.Vector3} start start point of line
       * @param {clay.Vector3} end end point of line
       * @param {clay.Vector3} [out]
       * @return {clay.Vector3}
       */
      intersectLine: (function() {
          var rd = __WEBPACK_IMPORTED_MODULE_2__glmatrix_vec3__["a" /* default */].create();
          return function(start, end, out) {
              var d0 = this.distanceToPoint(start);
              var d1 = this.distanceToPoint(end);
              if ((d0 > 0 && d1 > 0) || (d0 < 0 && d1 < 0)) {
                  return null;
              }
              // Ray intersection
              var pn = this.normal.array;
              var d = this.distance;
              var ro = start.array;
              // direction
              __WEBPACK_IMPORTED_MODULE_2__glmatrix_vec3__["a" /* default */].sub(rd, end.array, start.array);
              __WEBPACK_IMPORTED_MODULE_2__glmatrix_vec3__["a" /* default */].normalize(rd, rd);

              var divider = __WEBPACK_IMPORTED_MODULE_2__glmatrix_vec3__["a" /* default */].dot(pn, rd);
              // ray is parallel to the plane
              if (divider === 0) {
                  return null;
              }
              if (!out) {
                  out = new __WEBPACK_IMPORTED_MODULE_0__Vector3__["a" /* default */]();
              }
              var t = (__WEBPACK_IMPORTED_MODULE_2__glmatrix_vec3__["a" /* default */].dot(pn, ro) - d) / divider;
              __WEBPACK_IMPORTED_MODULE_2__glmatrix_vec3__["a" /* default */].scaleAndAdd(out.array, ro, rd, -t);
              out._dirty = true;
              return out;
          };
      })(),

      /**
       * Apply an affine transform matrix to plane
       * @function
       * @return {clay.Matrix4}
       */
      applyTransform: (function() {
          var inverseTranspose = __WEBPACK_IMPORTED_MODULE_1__glmatrix_mat4__["a" /* default */].create();
          var normalv4 = __WEBPACK_IMPORTED_MODULE_3__glmatrix_vec4__["a" /* default */].create();
          var pointv4 = __WEBPACK_IMPORTED_MODULE_3__glmatrix_vec4__["a" /* default */].create();
          pointv4[3] = 1;
          return function(m4) {
              m4 = m4.array;
              // Transform point on plane
              __WEBPACK_IMPORTED_MODULE_2__glmatrix_vec3__["a" /* default */].scale(pointv4, this.normal.array, this.distance);
              __WEBPACK_IMPORTED_MODULE_3__glmatrix_vec4__["a" /* default */].transformMat4(pointv4, pointv4, m4);
              this.distance = __WEBPACK_IMPORTED_MODULE_2__glmatrix_vec3__["a" /* default */].dot(pointv4, this.normal.array);
              // Transform plane normal
              __WEBPACK_IMPORTED_MODULE_1__glmatrix_mat4__["a" /* default */].invert(inverseTranspose, m4);
              __WEBPACK_IMPORTED_MODULE_1__glmatrix_mat4__["a" /* default */].transpose(inverseTranspose, inverseTranspose);
              normalv4[3] = 0;
              __WEBPACK_IMPORTED_MODULE_2__glmatrix_vec3__["a" /* default */].copy(normalv4, this.normal.array);
              __WEBPACK_IMPORTED_MODULE_3__glmatrix_vec4__["a" /* default */].transformMat4(normalv4, normalv4, inverseTranspose);
              __WEBPACK_IMPORTED_MODULE_2__glmatrix_vec3__["a" /* default */].copy(this.normal.array, normalv4);
          };
      })(),

      /**
       * Copy from another plane
       * @param  {clay.Vector3} plane
       */
      copy: function(plane) {
          __WEBPACK_IMPORTED_MODULE_2__glmatrix_vec3__["a" /* default */].copy(this.normal.array, plane.normal.array);
          this.normal._dirty = true;
          this.distance = plane.distance;
      },

      /**
       * Clone a new plane
       * @return {clay.Plane}
       */
      clone: function() {
          var plane = new Plane();
          plane.copy(this);
          return plane;
      }
  };

  /* harmony default export */ __webpack_exports__["a"] = (Plane);


  /***/ }),
  /* 74 */
  /***/ (function(module, exports) {

  // Simple LRU cache use doubly linked list
  // @module zrender/core/LRU

  /**
   * Simple double linked list. Compared with array, it has O(1) remove operation.
   * @constructor
   */
  var LinkedList = function () {
    /**
     * @type {module:zrender/core/LRU~Entry}
     */
    this.head = null;
    /**
     * @type {module:zrender/core/LRU~Entry}
     */

    this.tail = null;
    this._len = 0;
  };

  var linkedListProto = LinkedList.prototype;
  /**
   * Insert a new value at the tail
   * @param  {} val
   * @return {module:zrender/core/LRU~Entry}
   */

  linkedListProto.insert = function (val) {
    var entry = new Entry(val);
    this.insertEntry(entry);
    return entry;
  };
  /**
   * Insert an entry at the tail
   * @param  {module:zrender/core/LRU~Entry} entry
   */


  linkedListProto.insertEntry = function (entry) {
    if (!this.head) {
      this.head = this.tail = entry;
    } else {
      this.tail.next = entry;
      entry.prev = this.tail;
      entry.next = null;
      this.tail = entry;
    }

    this._len++;
  };
  /**
   * Remove entry.
   * @param  {module:zrender/core/LRU~Entry} entry
   */


  linkedListProto.remove = function (entry) {
    var prev = entry.prev;
    var next = entry.next;

    if (prev) {
      prev.next = next;
    } else {
      // Is head
      this.head = next;
    }

    if (next) {
      next.prev = prev;
    } else {
      // Is tail
      this.tail = prev;
    }

    entry.next = entry.prev = null;
    this._len--;
  };
  /**
   * @return {number}
   */


  linkedListProto.len = function () {
    return this._len;
  };
  /**
   * Clear list
   */


  linkedListProto.clear = function () {
    this.head = this.tail = null;
    this._len = 0;
  };
  /**
   * @constructor
   * @param {} val
   */


  var Entry = function (val) {
    /**
     * @type {}
     */
    this.value = val;
    /**
     * @type {module:zrender/core/LRU~Entry}
     */

    this.next;
    /**
     * @type {module:zrender/core/LRU~Entry}
     */

    this.prev;
  };
  /**
   * LRU Cache
   * @constructor
   * @alias module:zrender/core/LRU
   */


  var LRU = function (maxSize) {
    this._list = new LinkedList();
    this._map = {};
    this._maxSize = maxSize || 10;
    this._lastRemovedEntry = null;
  };

  var LRUProto = LRU.prototype;
  /**
   * @param  {string} key
   * @param  {} value
   * @return {} Removed value
   */

  LRUProto.put = function (key, value) {
    var list = this._list;
    var map = this._map;
    var removed = null;

    if (map[key] == null) {
      var len = list.len(); // Reuse last removed entry

      var entry = this._lastRemovedEntry;

      if (len >= this._maxSize && len > 0) {
        // Remove the least recently used
        var leastUsedEntry = list.head;
        list.remove(leastUsedEntry);
        delete map[leastUsedEntry.key];
        removed = leastUsedEntry.value;
        this._lastRemovedEntry = leastUsedEntry;
      }

      if (entry) {
        entry.value = value;
      } else {
        entry = new Entry(value);
      }

      entry.key = key;
      list.insertEntry(entry);
      map[key] = entry;
    }

    return removed;
  };
  /**
   * @param  {string} key
   * @return {}
   */


  LRUProto.get = function (key) {
    var entry = this._map[key];
    var list = this._list;

    if (entry != null) {
      // Put the latest used entry in the tail
      if (entry !== list.tail) {
        list.remove(entry);
        list.insertEntry(entry);
      }

      return entry.value;
    }
  };
  /**
   * Clear the cache
   */


  LRUProto.clear = function () {
    this._list.clear();

    this._map = {};
  };

  var _default = LRU;
  module.exports = _default;

  /***/ }),
  /* 75 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Skybox__ = __webpack_require__(42);


  /* harmony default export */ __webpack_exports__["a"] = (__WEBPACK_IMPORTED_MODULE_0__Skybox__["a" /* default */]);

  /***/ }),
  /* 76 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Geometry__ = __webpack_require__(14);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Plane__ = __webpack_require__(43);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math_Matrix4__ = __webpack_require__(7);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__math_Vector3__ = __webpack_require__(3);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__math_BoundingBox__ = __webpack_require__(18);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_vendor__ = __webpack_require__(13);







  var planeMatrix = new __WEBPACK_IMPORTED_MODULE_2__math_Matrix4__["a" /* default */]();

  /**
   * @constructor clay.geometry.Cube
   * @extends clay.Geometry
   * @param {Object} [opt]
   * @param {number} [opt.widthSegments]
   * @param {number} [opt.heightSegments]
   * @param {number} [opt.depthSegments]
   * @param {boolean} [opt.inside]
   */
  var Cube = __WEBPACK_IMPORTED_MODULE_0__Geometry__["a" /* default */].extend(
  /**@lends clay.geometry.Cube# */
  {
      dynamic: false,
      /**
       * @type {number}
       */
      widthSegments: 1,
      /**
       * @type {number}
       */
      heightSegments: 1,
      /**
       * @type {number}
       */
      depthSegments: 1,
      /**
       * @type {boolean}
       */
      inside: false
  }, function() {
      this.build();
  },
  /** @lends clay.geometry.Cube.prototype */
  {
      /**
       * Build cube geometry
       */
      build: function() {

          var planes = {
              'px': createPlane('px', this.depthSegments, this.heightSegments),
              'nx': createPlane('nx', this.depthSegments, this.heightSegments),
              'py': createPlane('py', this.widthSegments, this.depthSegments),
              'ny': createPlane('ny', this.widthSegments, this.depthSegments),
              'pz': createPlane('pz', this.widthSegments, this.heightSegments),
              'nz': createPlane('nz', this.widthSegments, this.heightSegments),
          };

          var attrList = ['position', 'texcoord0', 'normal'];
          var vertexNumber = 0;
          var faceNumber = 0;
          for (var pos in planes) {
              vertexNumber += planes[pos].vertexCount;
              faceNumber += planes[pos].indices.length;
          }
          for (var k = 0; k < attrList.length; k++) {
              this.attributes[attrList[k]].init(vertexNumber);
          }
          this.indices = new __WEBPACK_IMPORTED_MODULE_5__core_vendor__["a" /* default */].Uint16Array(faceNumber);
          var faceOffset = 0;
          var vertexOffset = 0;
          for (var pos in planes) {
              var plane = planes[pos];
              for (var k = 0; k < attrList.length; k++) {
                  var attrName = attrList[k];
                  var attrArray = plane.attributes[attrName].value;
                  var attrSize = plane.attributes[attrName].size;
                  var isNormal = attrName === 'normal';
                  for (var i = 0; i < attrArray.length; i++) {
                      var value = attrArray[i];
                      if (this.inside && isNormal) {
                          value = -value;
                      }
                      this.attributes[attrName].value[i + attrSize * vertexOffset] = value;
                  }
              }
              var len = plane.indices.length;
              for (var i = 0; i < plane.indices.length; i++) {
                  this.indices[i + faceOffset] = vertexOffset + plane.indices[this.inside ? (len - i - 1) : i];
              }
              faceOffset += plane.indices.length;
              vertexOffset += plane.vertexCount;
          }

          this.boundingBox = new __WEBPACK_IMPORTED_MODULE_4__math_BoundingBox__["a" /* default */]();
          this.boundingBox.max.set(1, 1, 1);
          this.boundingBox.min.set(-1, -1, -1);
      }
  });

  function createPlane(pos, widthSegments, heightSegments) {

      planeMatrix.identity();

      var plane = new __WEBPACK_IMPORTED_MODULE_1__Plane__["a" /* default */]({
          widthSegments: widthSegments,
          heightSegments: heightSegments
      });

      switch(pos) {
          case 'px':
              __WEBPACK_IMPORTED_MODULE_2__math_Matrix4__["a" /* default */].translate(planeMatrix, planeMatrix, __WEBPACK_IMPORTED_MODULE_3__math_Vector3__["a" /* default */].POSITIVE_X);
              __WEBPACK_IMPORTED_MODULE_2__math_Matrix4__["a" /* default */].rotateY(planeMatrix, planeMatrix, Math.PI / 2);
              break;
          case 'nx':
              __WEBPACK_IMPORTED_MODULE_2__math_Matrix4__["a" /* default */].translate(planeMatrix, planeMatrix, __WEBPACK_IMPORTED_MODULE_3__math_Vector3__["a" /* default */].NEGATIVE_X);
              __WEBPACK_IMPORTED_MODULE_2__math_Matrix4__["a" /* default */].rotateY(planeMatrix, planeMatrix, -Math.PI / 2);
              break;
          case 'py':
              __WEBPACK_IMPORTED_MODULE_2__math_Matrix4__["a" /* default */].translate(planeMatrix, planeMatrix, __WEBPACK_IMPORTED_MODULE_3__math_Vector3__["a" /* default */].POSITIVE_Y);
              __WEBPACK_IMPORTED_MODULE_2__math_Matrix4__["a" /* default */].rotateX(planeMatrix, planeMatrix, -Math.PI / 2);
              break;
          case 'ny':
              __WEBPACK_IMPORTED_MODULE_2__math_Matrix4__["a" /* default */].translate(planeMatrix, planeMatrix, __WEBPACK_IMPORTED_MODULE_3__math_Vector3__["a" /* default */].NEGATIVE_Y);
              __WEBPACK_IMPORTED_MODULE_2__math_Matrix4__["a" /* default */].rotateX(planeMatrix, planeMatrix, Math.PI / 2);
              break;
          case 'pz':
              __WEBPACK_IMPORTED_MODULE_2__math_Matrix4__["a" /* default */].translate(planeMatrix, planeMatrix, __WEBPACK_IMPORTED_MODULE_3__math_Vector3__["a" /* default */].POSITIVE_Z);
              break;
          case 'nz':
              __WEBPACK_IMPORTED_MODULE_2__math_Matrix4__["a" /* default */].translate(planeMatrix, planeMatrix, __WEBPACK_IMPORTED_MODULE_3__math_Vector3__["a" /* default */].NEGATIVE_Z);
              __WEBPACK_IMPORTED_MODULE_2__math_Matrix4__["a" /* default */].rotateY(planeMatrix, planeMatrix, Math.PI);
              break;
      }
      plane.applyTransform(planeMatrix);
      return plane;
  }

  /* harmony default export */ __webpack_exports__["a"] = (Cube);


  /***/ }),
  /* 77 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Texture2D__ = __webpack_require__(5);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__TextureCube__ = __webpack_require__(27);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Texture__ = __webpack_require__(4);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__FrameBuffer__ = __webpack_require__(10);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__compositor_Pass__ = __webpack_require__(15);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Material__ = __webpack_require__(19);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Shader__ = __webpack_require__(9);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__plugin_Skybox__ = __webpack_require__(42);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__Scene__ = __webpack_require__(36);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__prePass_EnvironmentMap__ = __webpack_require__(61);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__core_vendor__ = __webpack_require__(13);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__texture__ = __webpack_require__(60);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__shader_integrateBRDF_glsl_js__ = __webpack_require__(126);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__shader_prefilter_glsl_js__ = __webpack_require__(127);
  // Cubemap prefilter utility
  // http://www.unrealengine.com/files/downloads/2013SiggraphPresentationsNotes.pdf
  // http://http.developer.nvidia.com/GPUGems3/gpugems3_ch20.html
















  var cubemapUtil = {};

  var targets = ['px', 'nx', 'py', 'ny', 'pz', 'nz'];

  // TODO Downsample
  /**
   * @name clay.util.cubemap.prefilterEnvironmentMap
   * @param  {clay.Renderer} renderer
   * @param  {clay.Texture} envMap
   * @param  {Object} [textureOpts]
   * @param  {number} [textureOpts.width=64]
   * @param  {number} [textureOpts.height=64]
   * @param  {number} [textureOpts.type]
   * @param  {boolean} [textureOpts.encodeRGBM=false]
   * @param  {boolean} [textureOpts.decodeRGBM=false]
   * @param  {clay.Texture2D} [normalDistribution]
   * @param  {clay.Texture2D} [brdfLookup]
   */
  cubemapUtil.prefilterEnvironmentMap = function (
      renderer, envMap, textureOpts, normalDistribution, brdfLookup
  ) {
      // Not create other renderer, it is easy having issue of cross reference of resources like framebuffer
      // PENDING preserveDrawingBuffer?
      if (!brdfLookup || !normalDistribution) {
          normalDistribution = cubemapUtil.generateNormalDistribution();
          brdfLookup = cubemapUtil.integrateBRDF(renderer, normalDistribution);
      }
      textureOpts = textureOpts || {};

      var width = textureOpts.width || 64;
      var height = textureOpts.height || 64;

      var textureType = textureOpts.type || envMap.type;

      // Use same type with given envMap
      var prefilteredCubeMap = new __WEBPACK_IMPORTED_MODULE_1__TextureCube__["a" /* default */]({
          width: width,
          height: height,
          type: textureType,
          flipY: false,
          mipmaps: []
      });

      if (!prefilteredCubeMap.isPowerOfTwo()) {
          console.warn('Width and height must be power of two to enable mipmap.');
      }

      var size = Math.min(width, height);
      var mipmapNum = Math.log(size) / Math.log(2) + 1;

      var prefilterMaterial = new __WEBPACK_IMPORTED_MODULE_5__Material__["a" /* default */]({
          shader: new __WEBPACK_IMPORTED_MODULE_6__Shader__["a" /* default */]({
              vertex: __WEBPACK_IMPORTED_MODULE_6__Shader__["a" /* default */].source('clay.skybox.vertex'),
              fragment: __WEBPACK_IMPORTED_MODULE_13__shader_prefilter_glsl_js__["a" /* default */]
          })
      });
      prefilterMaterial.set('normalDistribution', normalDistribution);

      textureOpts.encodeRGBM && prefilterMaterial.define('fragment', 'RGBM_ENCODE');
      textureOpts.decodeRGBM && prefilterMaterial.define('fragment', 'RGBM_DECODE');

      var dummyScene = new __WEBPACK_IMPORTED_MODULE_8__Scene__["a" /* default */]();
      var skyEnv;

      if (envMap.textureType === 'texture2D') {
          // Convert panorama to cubemap
          var envCubemap = new __WEBPACK_IMPORTED_MODULE_1__TextureCube__["a" /* default */]({
              width: width,
              height: height,
              // FIXME FLOAT type will cause GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT error on iOS
              type: textureType === __WEBPACK_IMPORTED_MODULE_2__Texture__["a" /* default */].FLOAT ?
                  __WEBPACK_IMPORTED_MODULE_2__Texture__["a" /* default */].HALF_FLOAT : textureType
          });
          __WEBPACK_IMPORTED_MODULE_11__texture__["a" /* default */].panoramaToCubeMap(renderer, envMap, envCubemap, {
              // PENDING encodeRGBM so it can be decoded as RGBM
              encodeRGBM: textureOpts.decodeRGBM
          });
          envMap = envCubemap;
      }
      skyEnv = new __WEBPACK_IMPORTED_MODULE_7__plugin_Skybox__["a" /* default */]({
          scene: dummyScene,
          material: prefilterMaterial
      });
      skyEnv.material.set('environmentMap', envMap);

      var envMapPass = new __WEBPACK_IMPORTED_MODULE_9__prePass_EnvironmentMap__["a" /* default */]({
          texture: prefilteredCubeMap
      });

      // Force to be UNSIGNED_BYTE
      if (textureOpts.encodeRGBM) {
          textureType = prefilteredCubeMap.type = __WEBPACK_IMPORTED_MODULE_2__Texture__["a" /* default */].UNSIGNED_BYTE;
      }

      var renderTargetTmp = new __WEBPACK_IMPORTED_MODULE_0__Texture2D__["a" /* default */]({
          width: width,
          height: height,
          type: textureType
      });
      var frameBuffer = new __WEBPACK_IMPORTED_MODULE_3__FrameBuffer__["a" /* default */]({
          depthBuffer: false
      });
      var ArrayCtor = __WEBPACK_IMPORTED_MODULE_10__core_vendor__["a" /* default */][textureType === __WEBPACK_IMPORTED_MODULE_2__Texture__["a" /* default */].UNSIGNED_BYTE ? 'Uint8Array' : 'Float32Array'];
      for (var i = 0; i < mipmapNum; i++) {
          // console.time('prefilter');
          prefilteredCubeMap.mipmaps[i] = {
              pixels: {}
          };
          skyEnv.material.set('roughness', i / (mipmapNum - 1));

          // Tweak fov
          // http://the-witness.net/news/2012/02/seamless-cube-map-filtering/
          var n = renderTargetTmp.width;
          var fov = 2 * Math.atan(n / (n - 0.5)) / Math.PI * 180;

          for (var j = 0; j < targets.length; j++) {
              var pixels = new ArrayCtor(renderTargetTmp.width * renderTargetTmp.height * 4);
              frameBuffer.attach(renderTargetTmp);
              frameBuffer.bind(renderer);

              var camera = envMapPass.getCamera(targets[j]);
              camera.fov = fov;
              renderer.render(dummyScene, camera);
              renderer.gl.readPixels(
                  0, 0, renderTargetTmp.width, renderTargetTmp.height,
                  __WEBPACK_IMPORTED_MODULE_2__Texture__["a" /* default */].RGBA, textureType, pixels
              );

              // var canvas = document.createElement('canvas');
              // var ctx = canvas.getContext('2d');
              // canvas.width = renderTargetTmp.width;
              // canvas.height = renderTargetTmp.height;
              // var imageData = ctx.createImageData(renderTargetTmp.width, renderTargetTmp.height);
              // for (var k = 0; k < pixels.length; k++) {
              //     imageData.data[k] = pixels[k];
              // }
              // ctx.putImageData(imageData, 0, 0);
              // document.body.appendChild(canvas);

              frameBuffer.unbind(renderer);
              prefilteredCubeMap.mipmaps[i].pixels[targets[j]] = pixels;
          }

          renderTargetTmp.width /= 2;
          renderTargetTmp.height /= 2;
          renderTargetTmp.dirty();
          // console.timeEnd('prefilter');
      }

      frameBuffer.dispose(renderer);
      renderTargetTmp.dispose(renderer);
      skyEnv.dispose(renderer);
      // Remove gpu resource allucated in renderer
      normalDistribution.dispose(renderer);

      // renderer.dispose();

      return {
          environmentMap: prefilteredCubeMap,
          brdfLookup: brdfLookup,
          normalDistribution: normalDistribution,
          maxMipmapLevel: mipmapNum
      };
  };

  cubemapUtil.integrateBRDF = function (renderer, normalDistribution) {
      normalDistribution = normalDistribution || cubemapUtil.generateNormalDistribution();
      var framebuffer = new __WEBPACK_IMPORTED_MODULE_3__FrameBuffer__["a" /* default */]({
          depthBuffer: false
      });
      var pass = new __WEBPACK_IMPORTED_MODULE_4__compositor_Pass__["a" /* default */]({
          fragment: __WEBPACK_IMPORTED_MODULE_12__shader_integrateBRDF_glsl_js__["a" /* default */]
      });

      var texture = new __WEBPACK_IMPORTED_MODULE_0__Texture2D__["a" /* default */]({
          width: 512,
          height: 256,
          type: __WEBPACK_IMPORTED_MODULE_2__Texture__["a" /* default */].HALF_FLOAT,
          wrapS: __WEBPACK_IMPORTED_MODULE_2__Texture__["a" /* default */].CLAMP_TO_EDGE,
          wrapT: __WEBPACK_IMPORTED_MODULE_2__Texture__["a" /* default */].CLAMP_TO_EDGE,
          minFilter: __WEBPACK_IMPORTED_MODULE_2__Texture__["a" /* default */].NEAREST,
          magFilter: __WEBPACK_IMPORTED_MODULE_2__Texture__["a" /* default */].NEAREST,
          useMipmap: false
      });
      pass.setUniform('normalDistribution', normalDistribution);
      pass.setUniform('viewportSize', [512, 256]);
      pass.attachOutput(texture);
      pass.render(renderer, framebuffer);

      // FIXME Only chrome and firefox can readPixels with float type.
      // framebuffer.bind(renderer);
      // var pixels = new Float32Array(512 * 256 * 4);
      // renderer.gl.readPixels(
      //     0, 0, texture.width, texture.height,
      //     Texture.RGBA, Texture.FLOAT, pixels
      // );
      // texture.pixels = pixels;
      // texture.flipY = false;
      // texture.dirty();
      // framebuffer.unbind(renderer);

      framebuffer.dispose(renderer);

      return texture;
  };

  cubemapUtil.generateNormalDistribution = function (roughnessLevels, sampleSize) {

      // http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
      // GLSL not support bit operation, use lookup instead
      // V -> i / N, U -> roughness
      var roughnessLevels = roughnessLevels || 256;
      var sampleSize = sampleSize || 1024;

      var normalDistribution = new __WEBPACK_IMPORTED_MODULE_0__Texture2D__["a" /* default */]({
          width: roughnessLevels,
          height: sampleSize,
          type: __WEBPACK_IMPORTED_MODULE_2__Texture__["a" /* default */].FLOAT,
          minFilter: __WEBPACK_IMPORTED_MODULE_2__Texture__["a" /* default */].NEAREST,
          magFilter: __WEBPACK_IMPORTED_MODULE_2__Texture__["a" /* default */].NEAREST,
          wrapS: __WEBPACK_IMPORTED_MODULE_2__Texture__["a" /* default */].CLAMP_TO_EDGE,
          wrapT: __WEBPACK_IMPORTED_MODULE_2__Texture__["a" /* default */].CLAMP_TO_EDGE,
          useMipmap: false
      });
      var pixels = new Float32Array(sampleSize * roughnessLevels * 4);
      var tmp = [];

      // function sortFunc(a, b) {
      //     return Math.abs(b) - Math.abs(a);
      // }
      for (var j = 0; j < roughnessLevels; j++) {
          var roughness = j / roughnessLevels;
          var a = roughness * roughness;

          for (var i = 0; i < sampleSize; i++) {
              // http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
              // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators
              // http://stackoverflow.com/questions/1908492/unsigned-integer-in-javascript
              // http://stackoverflow.com/questions/1822350/what-is-the-javascript-operator-and-how-do-you-use-it
              var y = (i << 16 | i >>> 16) >>> 0;
              y = ((y & 1431655765) << 1 | (y & 2863311530) >>> 1) >>> 0;
              y = ((y & 858993459) << 2 | (y & 3435973836) >>> 2) >>> 0;
              y = ((y & 252645135) << 4 | (y & 4042322160) >>> 4) >>> 0;
              y = (((y & 16711935) << 8 | (y & 4278255360) >>> 8) >>> 0) / 4294967296;

              // CDF
              var cosTheta = Math.sqrt((1 - y) / (1 + (a * a - 1.0) * y));
              tmp[i] = cosTheta;
          }

          for (var i = 0; i < sampleSize; i++) {
              var offset = (i * roughnessLevels + j) * 4;
              var cosTheta = tmp[i];
              var sinTheta = Math.sqrt(1.0 - cosTheta * cosTheta);
              var x = i / sampleSize;
              var phi = 2.0 * Math.PI * x;
              pixels[offset] = sinTheta * Math.cos(phi);
              pixels[offset + 1] = cosTheta;
              pixels[offset + 2] = sinTheta * Math.sin(phi);
              pixels[offset + 3] = 1.0;
          }
      }
      normalDistribution.pixels = pixels;

      return normalDistribution;
  };

  /* harmony default export */ __webpack_exports__["a"] = (cubemapUtil);


  /***/ }),
  /* 78 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(20);


  /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, this
      list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
      and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */



  /**
   * @class 2x2 Matrix
   * @name mat2
   */

  var mat2 = {};

  /**
   * Creates a new identity mat2
   *
   * @returns {mat2} a new 2x2 matrix
   */
  mat2.create = function() {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* GLMAT_ARRAY_TYPE */](4);
      out[0] = 1;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      return out;
  };

  /**
   * Creates a new mat2 initialized with values from an existing matrix
   *
   * @param {mat2} a matrix to clone
   * @returns {mat2} a new 2x2 matrix
   */
  mat2.clone = function(a) {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* GLMAT_ARRAY_TYPE */](4);
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      return out;
  };

  /**
   * Copy the values from one mat2 to another
   *
   * @param {mat2} out the receiving matrix
   * @param {mat2} a the source matrix
   * @returns {mat2} out
   */
  mat2.copy = function(out, a) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      return out;
  };

  /**
   * Set a mat2 to the identity matrix
   *
   * @param {mat2} out the receiving matrix
   * @returns {mat2} out
   */
  mat2.identity = function(out) {
      out[0] = 1;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      return out;
  };

  /**
   * Transpose the values of a mat2
   *
   * @param {mat2} out the receiving matrix
   * @param {mat2} a the source matrix
   * @returns {mat2} out
   */
  mat2.transpose = function(out, a) {
      // If we are transposing ourselves we can skip a few steps but have to cache some values
      if (out === a) {
          var a1 = a[1];
          out[1] = a[2];
          out[2] = a1;
      } else {
          out[0] = a[0];
          out[1] = a[2];
          out[2] = a[1];
          out[3] = a[3];
      }

      return out;
  };

  /**
   * Inverts a mat2
   *
   * @param {mat2} out the receiving matrix
   * @param {mat2} a the source matrix
   * @returns {mat2} out
   */
  mat2.invert = function(out, a) {
      var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],

          // Calculate the determinant
          det = a0 * a3 - a2 * a1;

      if (!det) {
          return null;
      }
      det = 1.0 / det;

      out[0] =  a3 * det;
      out[1] = -a1 * det;
      out[2] = -a2 * det;
      out[3] =  a0 * det;

      return out;
  };

  /**
   * Calculates the adjugate of a mat2
   *
   * @param {mat2} out the receiving matrix
   * @param {mat2} a the source matrix
   * @returns {mat2} out
   */
  mat2.adjoint = function(out, a) {
      // Caching this value is nessecary if out == a
      var a0 = a[0];
      out[0] =  a[3];
      out[1] = -a[1];
      out[2] = -a[2];
      out[3] =  a0;

      return out;
  };

  /**
   * Calculates the determinant of a mat2
   *
   * @param {mat2} a the source matrix
   * @returns {Number} determinant of a
   */
  mat2.determinant = function (a) {
      return a[0] * a[3] - a[2] * a[1];
  };

  /**
   * Multiplies two mat2's
   *
   * @param {mat2} out the receiving matrix
   * @param {mat2} a the first operand
   * @param {mat2} b the second operand
   * @returns {mat2} out
   */
  mat2.multiply = function (out, a, b) {
      var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
      var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
      out[0] = a0 * b0 + a2 * b1;
      out[1] = a1 * b0 + a3 * b1;
      out[2] = a0 * b2 + a2 * b3;
      out[3] = a1 * b2 + a3 * b3;
      return out;
  };

  /**
   * Alias for {@link mat2.multiply}
   * @function
   */
  mat2.mul = mat2.multiply;

  /**
   * Rotates a mat2 by the given angle
   *
   * @param {mat2} out the receiving matrix
   * @param {mat2} a the matrix to rotate
   * @param {Number} rad the angle to rotate the matrix by
   * @returns {mat2} out
   */
  mat2.rotate = function (out, a, rad) {
      var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
          s = Math.sin(rad),
          c = Math.cos(rad);
      out[0] = a0 *  c + a2 * s;
      out[1] = a1 *  c + a3 * s;
      out[2] = a0 * -s + a2 * c;
      out[3] = a1 * -s + a3 * c;
      return out;
  };

  /**
   * Scales the mat2 by the dimensions in the given vec2
   *
   * @param {mat2} out the receiving matrix
   * @param {mat2} a the matrix to rotate
   * @param {vec2} v the vec2 to scale the matrix by
   * @returns {mat2} out
   **/
  mat2.scale = function(out, a, v) {
      var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
          v0 = v[0], v1 = v[1];
      out[0] = a0 * v0;
      out[1] = a1 * v0;
      out[2] = a2 * v1;
      out[3] = a3 * v1;
      return out;
  };

  /**
   * Returns Frobenius norm of a mat2
   *
   * @param {mat2} a the matrix to calculate Frobenius norm of
   * @returns {Number} Frobenius norm
   */
  mat2.frob = function (a) {
      return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))
  };

  /**
   * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
   * @param {mat2} L the lower triangular matrix
   * @param {mat2} D the diagonal matrix
   * @param {mat2} U the upper triangular matrix
   * @param {mat2} a the input matrix to factorize
   */

  mat2.LDU = function (L, D, U, a) {
      L[2] = a[2]/a[0];
      U[0] = a[0];
      U[1] = a[1];
      U[3] = a[3] - L[2] * U[1];
      return [L, D, U];
  };


  /* harmony default export */ __webpack_exports__["a"] = (mat2);

  /***/ }),
  /* 79 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(20);

  /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, this
      list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
      and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */



  /**
   * @class 2x3 Matrix
   * @name mat2d
   *
   * @description
   * A mat2d contains six elements defined as:
   * <pre>
   * [a, c, tx,
   *  b, d, ty]
   * </pre>
   * This is a short form for the 3x3 matrix:
   * <pre>
   * [a, c, tx,
   *  b, d, ty,
   *  0, 0, 1]
   * </pre>
   * The last row is ignored so the array is shorter and operations are faster.
   */

  var mat2d = {};

  /**
   * Creates a new identity mat2d
   *
   * @returns {mat2d} a new 2x3 matrix
   */
  mat2d.create = function() {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* GLMAT_ARRAY_TYPE */](6);
      out[0] = 1;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      out[4] = 0;
      out[5] = 0;
      return out;
  };

  /**
   * Creates a new mat2d initialized with values from an existing matrix
   *
   * @param {mat2d} a matrix to clone
   * @returns {mat2d} a new 2x3 matrix
   */
  mat2d.clone = function(a) {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* GLMAT_ARRAY_TYPE */](6);
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      out[4] = a[4];
      out[5] = a[5];
      return out;
  };

  /**
   * Copy the values from one mat2d to another
   *
   * @param {mat2d} out the receiving matrix
   * @param {mat2d} a the source matrix
   * @returns {mat2d} out
   */
  mat2d.copy = function(out, a) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      out[4] = a[4];
      out[5] = a[5];
      return out;
  };

  /**
   * Set a mat2d to the identity matrix
   *
   * @param {mat2d} out the receiving matrix
   * @returns {mat2d} out
   */
  mat2d.identity = function(out) {
      out[0] = 1;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      out[4] = 0;
      out[5] = 0;
      return out;
  };

  /**
   * Inverts a mat2d
   *
   * @param {mat2d} out the receiving matrix
   * @param {mat2d} a the source matrix
   * @returns {mat2d} out
   */
  mat2d.invert = function(out, a) {
      var aa = a[0], ab = a[1], ac = a[2], ad = a[3],
          atx = a[4], aty = a[5];

      var det = aa * ad - ab * ac;
      if(!det){
          return null;
      }
      det = 1.0 / det;

      out[0] = ad * det;
      out[1] = -ab * det;
      out[2] = -ac * det;
      out[3] = aa * det;
      out[4] = (ac * aty - ad * atx) * det;
      out[5] = (ab * atx - aa * aty) * det;
      return out;
  };

  /**
   * Calculates the determinant of a mat2d
   *
   * @param {mat2d} a the source matrix
   * @returns {Number} determinant of a
   */
  mat2d.determinant = function (a) {
      return a[0] * a[3] - a[1] * a[2];
  };

  /**
   * Multiplies two mat2d's
   *
   * @param {mat2d} out the receiving matrix
   * @param {mat2d} a the first operand
   * @param {mat2d} b the second operand
   * @returns {mat2d} out
   */
  mat2d.multiply = function (out, a, b) {
      var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
          b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
      out[0] = a0 * b0 + a2 * b1;
      out[1] = a1 * b0 + a3 * b1;
      out[2] = a0 * b2 + a2 * b3;
      out[3] = a1 * b2 + a3 * b3;
      out[4] = a0 * b4 + a2 * b5 + a4;
      out[5] = a1 * b4 + a3 * b5 + a5;
      return out;
  };

  /**
   * Alias for {@link mat2d.multiply}
   * @function
   */
  mat2d.mul = mat2d.multiply;


  /**
   * Rotates a mat2d by the given angle
   *
   * @param {mat2d} out the receiving matrix
   * @param {mat2d} a the matrix to rotate
   * @param {Number} rad the angle to rotate the matrix by
   * @returns {mat2d} out
   */
  mat2d.rotate = function (out, a, rad) {
      var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
          s = Math.sin(rad),
          c = Math.cos(rad);
      out[0] = a0 *  c + a2 * s;
      out[1] = a1 *  c + a3 * s;
      out[2] = a0 * -s + a2 * c;
      out[3] = a1 * -s + a3 * c;
      out[4] = a4;
      out[5] = a5;
      return out;
  };

  /**
   * Scales the mat2d by the dimensions in the given vec2
   *
   * @param {mat2d} out the receiving matrix
   * @param {mat2d} a the matrix to translate
   * @param {vec2} v the vec2 to scale the matrix by
   * @returns {mat2d} out
   **/
  mat2d.scale = function(out, a, v) {
      var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
          v0 = v[0], v1 = v[1];
      out[0] = a0 * v0;
      out[1] = a1 * v0;
      out[2] = a2 * v1;
      out[3] = a3 * v1;
      out[4] = a4;
      out[5] = a5;
      return out;
  };

  /**
   * Translates the mat2d by the dimensions in the given vec2
   *
   * @param {mat2d} out the receiving matrix
   * @param {mat2d} a the matrix to translate
   * @param {vec2} v the vec2 to translate the matrix by
   * @returns {mat2d} out
   **/
  mat2d.translate = function(out, a, v) {
      var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
          v0 = v[0], v1 = v[1];
      out[0] = a0;
      out[1] = a1;
      out[2] = a2;
      out[3] = a3;
      out[4] = a0 * v0 + a2 * v1 + a4;
      out[5] = a1 * v0 + a3 * v1 + a5;
      return out;
  };

  /**
   * Returns Frobenius norm of a mat2d
   *
   * @param {mat2d} a the matrix to calculate Frobenius norm of
   * @returns {Number} Frobenius norm
   */
  mat2d.frob = function (a) {
      return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))
  };


  /* harmony default export */ __webpack_exports__["a"] = (mat2d);

  /***/ }),
  /* 80 */
  /***/ (function(module, exports) {

  /**
   * @module zrender/core/util
   */
  // 用于处理merge时无法遍历Date等对象的问题
  var BUILTIN_OBJECT = {
    '[object Function]': 1,
    '[object RegExp]': 1,
    '[object Date]': 1,
    '[object Error]': 1,
    '[object CanvasGradient]': 1,
    '[object CanvasPattern]': 1,
    // For node-canvas
    '[object Image]': 1,
    '[object Canvas]': 1
  };
  var TYPED_ARRAY = {
    '[object Int8Array]': 1,
    '[object Uint8Array]': 1,
    '[object Uint8ClampedArray]': 1,
    '[object Int16Array]': 1,
    '[object Uint16Array]': 1,
    '[object Int32Array]': 1,
    '[object Uint32Array]': 1,
    '[object Float32Array]': 1,
    '[object Float64Array]': 1
  };
  var objToString = Object.prototype.toString;
  var arrayProto = Array.prototype;
  var nativeForEach = arrayProto.forEach;
  var nativeFilter = arrayProto.filter;
  var nativeSlice = arrayProto.slice;
  var nativeMap = arrayProto.map;
  var nativeReduce = arrayProto.reduce; // Avoid assign to an exported variable, for transforming to cjs.

  var methods = {};

  function $override(name, fn) {
    // Clear ctx instance for different environment
    if (name === 'createCanvas') {
      _ctx = null;
    }

    methods[name] = fn;
  }
  /**
   * Those data types can be cloned:
   *     Plain object, Array, TypedArray, number, string, null, undefined.
   * Those data types will be assgined using the orginal data:
   *     BUILTIN_OBJECT
   * Instance of user defined class will be cloned to a plain object, without
   * properties in prototype.
   * Other data types is not supported (not sure what will happen).
   *
   * Caution: do not support clone Date, for performance consideration.
   * (There might be a large number of date in `series.data`).
   * So date should not be modified in and out of echarts.
   *
   * @param {*} source
   * @return {*} new
   */


  function clone(source) {
    if (source == null || typeof source != 'object') {
      return source;
    }

    var result = source;
    var typeStr = objToString.call(source);

    if (typeStr === '[object Array]') {
      if (!isPrimitive(source)) {
        result = [];

        for (var i = 0, len = source.length; i < len; i++) {
          result[i] = clone(source[i]);
        }
      }
    } else if (TYPED_ARRAY[typeStr]) {
      if (!isPrimitive(source)) {
        var Ctor = source.constructor;

        if (source.constructor.from) {
          result = Ctor.from(source);
        } else {
          result = new Ctor(source.length);

          for (var i = 0, len = source.length; i < len; i++) {
            result[i] = clone(source[i]);
          }
        }
      }
    } else if (!BUILTIN_OBJECT[typeStr] && !isPrimitive(source) && !isDom(source)) {
      result = {};

      for (var key in source) {
        if (source.hasOwnProperty(key)) {
          result[key] = clone(source[key]);
        }
      }
    }

    return result;
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {*} target
   * @param {*} source
   * @param {boolean} [overwrite=false]
   */


  function merge(target, source, overwrite) {
    // We should escapse that source is string
    // and enter for ... in ...
    if (!isObject(source) || !isObject(target)) {
      return overwrite ? clone(source) : target;
    }

    for (var key in source) {
      if (source.hasOwnProperty(key)) {
        var targetProp = target[key];
        var sourceProp = source[key];

        if (isObject(sourceProp) && isObject(targetProp) && !isArray(sourceProp) && !isArray(targetProp) && !isDom(sourceProp) && !isDom(targetProp) && !isBuiltInObject(sourceProp) && !isBuiltInObject(targetProp) && !isPrimitive(sourceProp) && !isPrimitive(targetProp)) {
          // 如果需要递归覆盖，就递归调用merge
          merge(targetProp, sourceProp, overwrite);
        } else if (overwrite || !(key in target)) {
          // 否则只处理overwrite为true，或者在目标对象中没有此属性的情况
          // NOTE，在 target[key] 不存在的时候也是直接覆盖
          target[key] = clone(source[key]);
        }
      }
    }

    return target;
  }
  /**
   * @param {Array} targetAndSources The first item is target, and the rests are source.
   * @param {boolean} [overwrite=false]
   * @return {*} target
   */


  function mergeAll(targetAndSources, overwrite) {
    var result = targetAndSources[0];

    for (var i = 1, len = targetAndSources.length; i < len; i++) {
      result = merge(result, targetAndSources[i], overwrite);
    }

    return result;
  }
  /**
   * @param {*} target
   * @param {*} source
   * @memberOf module:zrender/core/util
   */


  function extend(target, source) {
    for (var key in source) {
      if (source.hasOwnProperty(key)) {
        target[key] = source[key];
      }
    }

    return target;
  }
  /**
   * @param {*} target
   * @param {*} source
   * @param {boolean} [overlay=false]
   * @memberOf module:zrender/core/util
   */


  function defaults(target, source, overlay) {
    for (var key in source) {
      if (source.hasOwnProperty(key) && (overlay ? source[key] != null : target[key] == null)) {
        target[key] = source[key];
      }
    }

    return target;
  }

  var createCanvas = function () {
    return methods.createCanvas();
  };

  methods.createCanvas = function () {
    return document.createElement('canvas');
  }; // FIXME


  var _ctx;

  function getContext() {
    if (!_ctx) {
      // Use util.createCanvas instead of createCanvas
      // because createCanvas may be overwritten in different environment
      _ctx = createCanvas().getContext('2d');
    }

    return _ctx;
  }
  /**
   * 查询数组中元素的index
   * @memberOf module:zrender/core/util
   */


  function indexOf(array, value) {
    if (array) {
      if (array.indexOf) {
        return array.indexOf(value);
      }

      for (var i = 0, len = array.length; i < len; i++) {
        if (array[i] === value) {
          return i;
        }
      }
    }

    return -1;
  }
  /**
   * 构造类继承关系
   *
   * @memberOf module:zrender/core/util
   * @param {Function} clazz 源类
   * @param {Function} baseClazz 基类
   */


  function inherits(clazz, baseClazz) {
    var clazzPrototype = clazz.prototype;

    function F() {}

    F.prototype = baseClazz.prototype;
    clazz.prototype = new F();

    for (var prop in clazzPrototype) {
      clazz.prototype[prop] = clazzPrototype[prop];
    }

    clazz.prototype.constructor = clazz;
    clazz.superClass = baseClazz;
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {Object|Function} target
   * @param {Object|Function} sorce
   * @param {boolean} overlay
   */


  function mixin(target, source, overlay) {
    target = 'prototype' in target ? target.prototype : target;
    source = 'prototype' in source ? source.prototype : source;
    defaults(target, source, overlay);
  }
  /**
   * Consider typed array.
   * @param {Array|TypedArray} data
   */


  function isArrayLike(data) {
    if (!data) {
      return;
    }

    if (typeof data == 'string') {
      return false;
    }

    return typeof data.length == 'number';
  }
  /**
   * 数组或对象遍历
   * @memberOf module:zrender/core/util
   * @param {Object|Array} obj
   * @param {Function} cb
   * @param {*} [context]
   */


  function each(obj, cb, context) {
    if (!(obj && cb)) {
      return;
    }

    if (obj.forEach && obj.forEach === nativeForEach) {
      obj.forEach(cb, context);
    } else if (obj.length === +obj.length) {
      for (var i = 0, len = obj.length; i < len; i++) {
        cb.call(context, obj[i], i, obj);
      }
    } else {
      for (var key in obj) {
        if (obj.hasOwnProperty(key)) {
          cb.call(context, obj[key], key, obj);
        }
      }
    }
  }
  /**
   * 数组映射
   * @memberOf module:zrender/core/util
   * @param {Array} obj
   * @param {Function} cb
   * @param {*} [context]
   * @return {Array}
   */


  function map(obj, cb, context) {
    if (!(obj && cb)) {
      return;
    }

    if (obj.map && obj.map === nativeMap) {
      return obj.map(cb, context);
    } else {
      var result = [];

      for (var i = 0, len = obj.length; i < len; i++) {
        result.push(cb.call(context, obj[i], i, obj));
      }

      return result;
    }
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {Array} obj
   * @param {Function} cb
   * @param {Object} [memo]
   * @param {*} [context]
   * @return {Array}
   */


  function reduce(obj, cb, memo, context) {
    if (!(obj && cb)) {
      return;
    }

    if (obj.reduce && obj.reduce === nativeReduce) {
      return obj.reduce(cb, memo, context);
    } else {
      for (var i = 0, len = obj.length; i < len; i++) {
        memo = cb.call(context, memo, obj[i], i, obj);
      }

      return memo;
    }
  }
  /**
   * 数组过滤
   * @memberOf module:zrender/core/util
   * @param {Array} obj
   * @param {Function} cb
   * @param {*} [context]
   * @return {Array}
   */


  function filter(obj, cb, context) {
    if (!(obj && cb)) {
      return;
    }

    if (obj.filter && obj.filter === nativeFilter) {
      return obj.filter(cb, context);
    } else {
      var result = [];

      for (var i = 0, len = obj.length; i < len; i++) {
        if (cb.call(context, obj[i], i, obj)) {
          result.push(obj[i]);
        }
      }

      return result;
    }
  }
  /**
   * 数组项查找
   * @memberOf module:zrender/core/util
   * @param {Array} obj
   * @param {Function} cb
   * @param {*} [context]
   * @return {*}
   */


  function find(obj, cb, context) {
    if (!(obj && cb)) {
      return;
    }

    for (var i = 0, len = obj.length; i < len; i++) {
      if (cb.call(context, obj[i], i, obj)) {
        return obj[i];
      }
    }
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {Function} func
   * @param {*} context
   * @return {Function}
   */


  function bind(func, context) {
    var args = nativeSlice.call(arguments, 2);
    return function () {
      return func.apply(context, args.concat(nativeSlice.call(arguments)));
    };
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {Function} func
   * @return {Function}
   */


  function curry(func) {
    var args = nativeSlice.call(arguments, 1);
    return function () {
      return func.apply(this, args.concat(nativeSlice.call(arguments)));
    };
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {*} value
   * @return {boolean}
   */


  function isArray(value) {
    return objToString.call(value) === '[object Array]';
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {*} value
   * @return {boolean}
   */


  function isFunction(value) {
    return typeof value === 'function';
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {*} value
   * @return {boolean}
   */


  function isString(value) {
    return objToString.call(value) === '[object String]';
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {*} value
   * @return {boolean}
   */


  function isObject(value) {
    // Avoid a V8 JIT bug in Chrome 19-20.
    // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
    var type = typeof value;
    return type === 'function' || !!value && type == 'object';
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {*} value
   * @return {boolean}
   */


  function isBuiltInObject(value) {
    return !!BUILTIN_OBJECT[objToString.call(value)];
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {*} value
   * @return {boolean}
   */


  function isTypedArray(value) {
    return !!TYPED_ARRAY[objToString.call(value)];
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {*} value
   * @return {boolean}
   */


  function isDom(value) {
    return typeof value === 'object' && typeof value.nodeType === 'number' && typeof value.ownerDocument === 'object';
  }
  /**
   * Whether is exactly NaN. Notice isNaN('a') returns true.
   * @param {*} value
   * @return {boolean}
   */


  function eqNaN(value) {
    return value !== value;
  }
  /**
   * If value1 is not null, then return value1, otherwise judget rest of values.
   * Low performance.
   * @memberOf module:zrender/core/util
   * @return {*} Final value
   */


  function retrieve(values) {
    for (var i = 0, len = arguments.length; i < len; i++) {
      if (arguments[i] != null) {
        return arguments[i];
      }
    }
  }

  function retrieve2(value0, value1) {
    return value0 != null ? value0 : value1;
  }

  function retrieve3(value0, value1, value2) {
    return value0 != null ? value0 : value1 != null ? value1 : value2;
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {Array} arr
   * @param {number} startIndex
   * @param {number} endIndex
   * @return {Array}
   */


  function slice() {
    return Function.call.apply(nativeSlice, arguments);
  }
  /**
   * Normalize css liked array configuration
   * e.g.
   *  3 => [3, 3, 3, 3]
   *  [4, 2] => [4, 2, 4, 2]
   *  [4, 3, 2] => [4, 3, 2, 3]
   * @param {number|Array.<number>} val
   * @return {Array.<number>}
   */


  function normalizeCssArray(val) {
    if (typeof val === 'number') {
      return [val, val, val, val];
    }

    var len = val.length;

    if (len === 2) {
      // vertical | horizontal
      return [val[0], val[1], val[0], val[1]];
    } else if (len === 3) {
      // top | horizontal | bottom
      return [val[0], val[1], val[2], val[1]];
    }

    return val;
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {boolean} condition
   * @param {string} message
   */


  function assert(condition, message) {
    if (!condition) {
      throw new Error(message);
    }
  }
  /**
   * @memberOf module:zrender/core/util
   * @param {string} str string to be trimed
   * @return {string} trimed string
   */


  function trim(str) {
    if (str == null) {
      return null;
    } else if (typeof str.trim === 'function') {
      return str.trim();
    } else {
      return str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
    }
  }

  var primitiveKey = '__ec_primitive__';
  /**
   * Set an object as primitive to be ignored traversing children in clone or merge
   */

  function setAsPrimitive(obj) {
    obj[primitiveKey] = true;
  }

  function isPrimitive(obj) {
    return obj[primitiveKey];
  }
  /**
   * @constructor
   * @param {Object} obj Only apply `ownProperty`.
   */


  function HashMap(obj) {
    var isArr = isArray(obj); // Key should not be set on this, otherwise
    // methods get/set/... may be overrided.

    this.data = {};
    var thisMap = this;
    obj instanceof HashMap ? obj.each(visit) : obj && each(obj, visit);

    function visit(value, key) {
      isArr ? thisMap.set(value, key) : thisMap.set(key, value);
    }
  }

  HashMap.prototype = {
    constructor: HashMap,
    // Do not provide `has` method to avoid defining what is `has`.
    // (We usually treat `null` and `undefined` as the same, different
    // from ES6 Map).
    get: function (key) {
      return this.data.hasOwnProperty(key) ? this.data[key] : null;
    },
    set: function (key, value) {
      // Comparing with invocation chaining, `return value` is more commonly
      // used in this case: `var someVal = map.set('a', genVal());`
      return this.data[key] = value;
    },
    // Although util.each can be performed on this hashMap directly, user
    // should not use the exposed keys, who are prefixed.
    each: function (cb, context) {
      context !== void 0 && (cb = bind(cb, context));

      for (var key in this.data) {
        this.data.hasOwnProperty(key) && cb(this.data[key], key);
      }
    },
    // Do not use this method if performance sensitive.
    removeKey: function (key) {
      delete this.data[key];
    }
  };

  function createHashMap(obj) {
    return new HashMap(obj);
  }

  function concatArray(a, b) {
    var newArray = new a.constructor(a.length + b.length);

    for (var i = 0; i < a.length; i++) {
      newArray[i] = a[i];
    }

    var offset = a.length;

    for (i = 0; i < b.length; i++) {
      newArray[i + offset] = b[i];
    }

    return newArray;
  }

  function noop() {}

  exports.$override = $override;
  exports.clone = clone;
  exports.merge = merge;
  exports.mergeAll = mergeAll;
  exports.extend = extend;
  exports.defaults = defaults;
  exports.createCanvas = createCanvas;
  exports.getContext = getContext;
  exports.indexOf = indexOf;
  exports.inherits = inherits;
  exports.mixin = mixin;
  exports.isArrayLike = isArrayLike;
  exports.each = each;
  exports.map = map;
  exports.reduce = reduce;
  exports.filter = filter;
  exports.find = find;
  exports.bind = bind;
  exports.curry = curry;
  exports.isArray = isArray;
  exports.isFunction = isFunction;
  exports.isString = isString;
  exports.isObject = isObject;
  exports.isBuiltInObject = isBuiltInObject;
  exports.isTypedArray = isTypedArray;
  exports.isDom = isDom;
  exports.eqNaN = eqNaN;
  exports.retrieve = retrieve;
  exports.retrieve2 = retrieve2;
  exports.retrieve3 = retrieve3;
  exports.slice = slice;
  exports.normalizeCssArray = normalizeCssArray;
  exports.assert = assert;
  exports.trim = trim;
  exports.setAsPrimitive = setAsPrimitive;
  exports.isPrimitive = isPrimitive;
  exports.createHashMap = createHashMap;
  exports.concatArray = concatArray;
  exports.noop = noop;

  /***/ }),
  /* 81 */
  /***/ (function(module, exports) {

  var _default = typeof window !== 'undefined' && (window.requestAnimationFrame && window.requestAnimationFrame.bind(window) || // https://github.com/ecomfe/zrender/issues/189#issuecomment-224919809
  window.msRequestAnimationFrame && window.msRequestAnimationFrame.bind(window) || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame) || function (func) {
    setTimeout(func, 16);
  };

  module.exports = _default;

  /***/ }),
  /* 82 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_claygl_src_Texture2D__ = __webpack_require__(5);
  /**
   * Texture Atlas for the sprites.
   * It uses zrender for 2d element management and rendering
   * @module echarts-gl/util/ZRTextureAtlasSurface
   */

  // TODO Expand.



  function ZRTextureAtlasSurfaceNode(zr, offsetX, offsetY, width, height, gap, dpr) {
      this._zr = zr;

      /**
       * Current cursor x
       * @type {number}
       * @private
       */
      this._x = 0;

      /**
       * Current cursor y
       * @type {number}
       */
      this._y = 0;

      this._rowHeight = 0;
      /**
       * width without dpr.
       * @type {number}
       * @private
       */
      this.width = width;

      /**
       * height without dpr.
       * @type {number}
       * @private
       */
      this.height = height;

      /**
       * offsetX without dpr
       * @type {number}
       */
      this.offsetX = offsetX;
      /**
       * offsetY without dpr
       * @type {number}
       */
      this.offsetY = offsetY;

      this.dpr = dpr;

      this.gap = gap;
  }

  ZRTextureAtlasSurfaceNode.prototype = {

      constructor: ZRTextureAtlasSurfaceNode,

      clear: function () {
          this._x = 0;
          this._y = 0;
          this._rowHeight = 0;
      },

      /**
       * Add shape to atlas
       * @param {module:zrender/graphic/Displayable} shape
       * @param {number} width
       * @param {number} height
       * @return {Array}
       */
      add: function (el, width, height) {
          // FIXME Text element not consider textAlign and textVerticalAlign.

          // TODO, inner text, shadow
          var rect = el.getBoundingRect();

          // FIXME aspect ratio
          if (width == null) {
              width = rect.width;
          }
          if (height == null) {
              height = rect.height;
          }
          width *= this.dpr;
          height *= this.dpr;

          this._fitElement(el, width, height);

          // var aspect = el.scale[1] / el.scale[0];
          // Adjust aspect ratio to make the text more clearly
          // FIXME If height > width, width is useless ?
          // width = height * aspect;
          // el.position[0] *= aspect;
          // el.scale[0] = el.scale[1];

          var x = this._x;
          var y = this._y;

          var canvasWidth = this.width * this.dpr;
          var canvasHeight = this.height * this.dpr;
          var gap = this.gap;

          if (x + width + gap > canvasWidth) {
              // Change a new row
              x = this._x = 0;
              y += this._rowHeight + gap;
              this._y = y;
              // Reset row height
              this._rowHeight = 0;
          }

          this._x += width + gap;

          this._rowHeight = Math.max(this._rowHeight, height);

          if (y + height + gap > canvasHeight) {
              // There is no space anymore
              return null;
          }

          // Shift the el
          el.position[0] += this.offsetX * this.dpr + x;
          el.position[1] += this.offsetY * this.dpr + y;

          this._zr.add(el);

          var coordsOffset = [
              this.offsetX / this.width,
              this.offsetY / this.height
          ];
          var coords = [
              [x / canvasWidth + coordsOffset[0], y / canvasHeight + coordsOffset[1]],
              [(x + width) / canvasWidth + coordsOffset[0], (y + height) / canvasHeight + coordsOffset[1]]
          ];

          return coords;
      },

      /**
       * Fit element size by correct its position and scaling
       * @param {module:zrender/graphic/Displayable} el
       * @param {number} spriteWidth
       * @param {number} spriteHeight
       */
      _fitElement: function (el, spriteWidth, spriteHeight) {
          // TODO, inner text, shadow
          var rect = el.getBoundingRect();

          var scaleX = spriteWidth / rect.width;
          var scaleY = spriteHeight / rect.height;
          el.position = [-rect.x * scaleX, -rect.y * scaleY];
          el.scale = [scaleX, scaleY];
          el.update();
      }
  };
  /**
   * constructor
   * @alias module:echarts-gl/util/ZRTextureAtlasSurface
   * @param {number} opt.width
   * @param {number} opt.height
   * @param {number} opt.devicePixelRatio
   * @param {number} opt.gap Gap for safe.
   * @param {Function} opt.onupdate
   */
  function ZRTextureAtlasSurface (opt) {

      opt = opt || {};
      opt.width = opt.width || 512;
      opt.height = opt.height || 512;
      opt.devicePixelRatio = opt.devicePixelRatio || 1;
      opt.gap = opt.gap == null ? 2 : opt.gap;

      var canvas = document.createElement('canvas');
      canvas.width = opt.width * opt.devicePixelRatio;
      canvas.height = opt.height * opt.devicePixelRatio;

      this._canvas = canvas;

      this._texture = new __WEBPACK_IMPORTED_MODULE_1_claygl_src_Texture2D__["a" /* default */]({
          image: canvas,
          flipY: false
      });

      var self = this;
      /**
       * zrender instance in the Chart
       * @type {zrender~ZRender}
       */
      this._zr = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.zrender.init(canvas);
      var oldRefreshImmediately = this._zr.refreshImmediately;
      this._zr.refreshImmediately = function () {
          oldRefreshImmediately.call(this);
          self._texture.dirty();
          self.onupdate && self.onupdate();
      };

      this._dpr = opt.devicePixelRatio;

      /**
       * Texture coords map for each sprite image
       * @type {Object}
       */
      this._coords = {};

      this.onupdate = opt.onupdate;

      this._gap = opt.gap;

      // Left sub atlas.
      this._textureAtlasNodes = [new ZRTextureAtlasSurfaceNode(
          this._zr, 0, 0, opt.width, opt.height, this._gap, this._dpr
      )];

      this._nodeWidth = opt.width;
      this._nodeHeight = opt.height;

      this._currentNodeIdx = 0;
  }

  ZRTextureAtlasSurface.prototype = {

      /**
       * Clear the texture atlas
       */
      clear: function () {

          for (var i = 0; i < this._textureAtlasNodes.length; i++) {
              this._textureAtlasNodes[i].clear();
          }

          this._currentNodeIdx = 0;

          this._zr.clear();
          this._coords = {};
      },

      /**
       * @return {number}
       */
      getWidth: function () {
          return this._width;
      },

      /**
       * @return {number}
       */
      getHeight: function () {
          return this._height;
      },

      /**
       * @return {number}
       */
      getTexture: function () {
          return this._texture;
      },

      /**
       * @return {number}
       */
      getDevicePixelRatio: function () {
          return this._dpr;
      },

      getZr: function () {
          return this._zr;
      },

      _getCurrentNode: function () {
          return this._textureAtlasNodes[this._currentNodeIdx];
      },

      _expand: function () {
          this._currentNodeIdx++;
          if (this._textureAtlasNodes[this._currentNodeIdx]) {
              // Use the node created previously.
              return this._textureAtlasNodes[this._currentNodeIdx];
          }

          var maxSize = 4096 / this._dpr;
          var textureAtlasNodes = this._textureAtlasNodes;
          var nodeLen = textureAtlasNodes.length;
          var offsetX = (nodeLen * this._nodeWidth) % maxSize;
          var offsetY = Math.floor(nodeLen * this._nodeWidth / maxSize) * this._nodeHeight;
          if (offsetY >= maxSize) {
              // Failed if image is too large.
              {
                  console.error('Too much labels. Some will be ignored.');
              }
              return;
          }

          var width = (offsetX + this._nodeWidth) * this._dpr;
          var height = (offsetY + this._nodeHeight) * this._dpr;
          try {
              // Resize will error in node.
              this._zr.resize({
                  width: width,
                  height: height
              });
          }
          catch (e) {
              this._canvas.width = width;
              this._canvas.height = height;
          }

          var newNode = new ZRTextureAtlasSurfaceNode(
              this._zr, offsetX, offsetY, this._nodeWidth, this._nodeHeight, this._gap, this._dpr
          );
          this._textureAtlasNodes.push(newNode);

          return newNode;
      },

      add: function (el, width, height) {
          if (this._coords[el.id]) {
              {
                  console.warn('Element already been add');
              }
              return this._coords[el.id];
          }
          var coords = this._getCurrentNode().add(el, width, height);
          if (!coords) {
              var newNode = this._expand();
              if (!newNode) {
                  // To maximum
                  return;
              }
              coords = newNode.add(el, width, height);
          }

          this._coords[el.id] = coords;

          return coords;
      },

      /**
       * Get coord scale after texture atlas is expanded.
       * @return {Array.<number>}
       */
      getCoordsScale: function () {
          var dpr = this._dpr;
          return [this._nodeWidth / this._canvas.width * dpr, this._nodeHeight / this._canvas.height * dpr];
      },

      /**
       * Get texture coords of sprite image
       * @param  {string} id Image id
       * @return {Array}
       */
      getCoords: function (id) {
          return this._coords[id];
      }
  };

  /* harmony default export */ __webpack_exports__["a"] = (ZRTextureAtlasSurface);

  /***/ }),
  /* 83 */
  /***/ (function(module, exports, __webpack_require__) {

  var vec2 = __webpack_require__(170);

  var matrix = __webpack_require__(171);

  /**
   * @module echarts/core/BoundingRect
   */
  var v2ApplyTransform = vec2.applyTransform;
  var mathMin = Math.min;
  var mathMax = Math.max;
  /**
   * @alias module:echarts/core/BoundingRect
   */

  function BoundingRect(x, y, width, height) {
    if (width < 0) {
      x = x + width;
      width = -width;
    }

    if (height < 0) {
      y = y + height;
      height = -height;
    }
    /**
     * @type {number}
     */


    this.x = x;
    /**
     * @type {number}
     */

    this.y = y;
    /**
     * @type {number}
     */

    this.width = width;
    /**
     * @type {number}
     */

    this.height = height;
  }

  BoundingRect.prototype = {
    constructor: BoundingRect,

    /**
     * @param {module:echarts/core/BoundingRect} other
     */
    union: function (other) {
      var x = mathMin(other.x, this.x);
      var y = mathMin(other.y, this.y);
      this.width = mathMax(other.x + other.width, this.x + this.width) - x;
      this.height = mathMax(other.y + other.height, this.y + this.height) - y;
      this.x = x;
      this.y = y;
    },

    /**
     * @param {Array.<number>} m
     * @methods
     */
    applyTransform: function () {
      var lt = [];
      var rb = [];
      var lb = [];
      var rt = [];
      return function (m) {
        // In case usage like this
        // el.getBoundingRect().applyTransform(el.transform)
        // And element has no transform
        if (!m) {
          return;
        }

        lt[0] = lb[0] = this.x;
        lt[1] = rt[1] = this.y;
        rb[0] = rt[0] = this.x + this.width;
        rb[1] = lb[1] = this.y + this.height;
        v2ApplyTransform(lt, lt, m);
        v2ApplyTransform(rb, rb, m);
        v2ApplyTransform(lb, lb, m);
        v2ApplyTransform(rt, rt, m);
        this.x = mathMin(lt[0], rb[0], lb[0], rt[0]);
        this.y = mathMin(lt[1], rb[1], lb[1], rt[1]);
        var maxX = mathMax(lt[0], rb[0], lb[0], rt[0]);
        var maxY = mathMax(lt[1], rb[1], lb[1], rt[1]);
        this.width = maxX - this.x;
        this.height = maxY - this.y;
      };
    }(),

    /**
     * Calculate matrix of transforming from self to target rect
     * @param  {module:zrender/core/BoundingRect} b
     * @return {Array.<number>}
     */
    calculateTransform: function (b) {
      var a = this;
      var sx = b.width / a.width;
      var sy = b.height / a.height;
      var m = matrix.create(); // 矩阵右乘

      matrix.translate(m, m, [-a.x, -a.y]);
      matrix.scale(m, m, [sx, sy]);
      matrix.translate(m, m, [b.x, b.y]);
      return m;
    },

    /**
     * @param {(module:echarts/core/BoundingRect|Object)} b
     * @return {boolean}
     */
    intersect: function (b) {
      if (!b) {
        return false;
      }

      if (!(b instanceof BoundingRect)) {
        // Normalize negative width/height.
        b = BoundingRect.create(b);
      }

      var a = this;
      var ax0 = a.x;
      var ax1 = a.x + a.width;
      var ay0 = a.y;
      var ay1 = a.y + a.height;
      var bx0 = b.x;
      var bx1 = b.x + b.width;
      var by0 = b.y;
      var by1 = b.y + b.height;
      return !(ax1 < bx0 || bx1 < ax0 || ay1 < by0 || by1 < ay0);
    },
    contain: function (x, y) {
      var rect = this;
      return x >= rect.x && x <= rect.x + rect.width && y >= rect.y && y <= rect.y + rect.height;
    },

    /**
     * @return {module:echarts/core/BoundingRect}
     */
    clone: function () {
      return new BoundingRect(this.x, this.y, this.width, this.height);
    },

    /**
     * Copy from another rect
     */
    copy: function (other) {
      this.x = other.x;
      this.y = other.y;
      this.width = other.width;
      this.height = other.height;
    },
    plain: function () {
      return {
        x: this.x,
        y: this.y,
        width: this.width,
        height: this.height
      };
    }
  };
  /**
   * @param {Object|module:zrender/core/BoundingRect} rect
   * @param {number} rect.x
   * @param {number} rect.y
   * @param {number} rect.width
   * @param {number} rect.height
   * @return {module:zrender/core/BoundingRect}
   */

  BoundingRect.create = function (rect) {
    return new BoundingRect(rect.x, rect.y, rect.width, rect.height);
  };

  var _default = BoundingRect;
  module.exports = _default;

  /***/ }),
  /* 84 */
  /***/ (function(module, exports, __webpack_require__) {


  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  var zrUtil = __webpack_require__(16);

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /*
  * A third-party license is embeded for some of the code in this file:
  * The method "quantile" was copied from "d3.js".
  * (See more details in the comment of the method below.)
  * The use of the source code of this file is also subject to the terms
  * and consitions of the license of "d3.js" (BSD-3Clause, see
  * </licenses/LICENSE-d3>).
  */
  var RADIAN_EPSILON = 1e-4;

  function _trim(str) {
    return str.replace(/^\s+|\s+$/g, '');
  }
  /**
   * Linear mapping a value from domain to range
   * @memberOf module:echarts/util/number
   * @param  {(number|Array.<number>)} val
   * @param  {Array.<number>} domain Domain extent domain[0] can be bigger than domain[1]
   * @param  {Array.<number>} range  Range extent range[0] can be bigger than range[1]
   * @param  {boolean} clamp
   * @return {(number|Array.<number>}
   */


  function linearMap(val, domain, range, clamp) {
    var subDomain = domain[1] - domain[0];
    var subRange = range[1] - range[0];

    if (subDomain === 0) {
      return subRange === 0 ? range[0] : (range[0] + range[1]) / 2;
    } // Avoid accuracy problem in edge, such as
    // 146.39 - 62.83 === 83.55999999999999.
    // See echarts/test/ut/spec/util/number.js#linearMap#accuracyError
    // It is a little verbose for efficiency considering this method
    // is a hotspot.


    if (clamp) {
      if (subDomain > 0) {
        if (val <= domain[0]) {
          return range[0];
        } else if (val >= domain[1]) {
          return range[1];
        }
      } else {
        if (val >= domain[0]) {
          return range[0];
        } else if (val <= domain[1]) {
          return range[1];
        }
      }
    } else {
      if (val === domain[0]) {
        return range[0];
      }

      if (val === domain[1]) {
        return range[1];
      }
    }

    return (val - domain[0]) / subDomain * subRange + range[0];
  }
  /**
   * Convert a percent string to absolute number.
   * Returns NaN if percent is not a valid string or number
   * @memberOf module:echarts/util/number
   * @param {string|number} percent
   * @param {number} all
   * @return {number}
   */


  function parsePercent(percent, all) {
    switch (percent) {
      case 'center':
      case 'middle':
        percent = '50%';
        break;

      case 'left':
      case 'top':
        percent = '0%';
        break;

      case 'right':
      case 'bottom':
        percent = '100%';
        break;
    }

    if (typeof percent === 'string') {
      if (_trim(percent).match(/%$/)) {
        return parseFloat(percent) / 100 * all;
      }

      return parseFloat(percent);
    }

    return percent == null ? NaN : +percent;
  }
  /**
   * (1) Fix rounding error of float numbers.
   * (2) Support return string to avoid scientific notation like '3.5e-7'.
   *
   * @param {number} x
   * @param {number} [precision]
   * @param {boolean} [returnStr]
   * @return {number|string}
   */


  function round(x, precision, returnStr) {
    if (precision == null) {
      precision = 10;
    } // Avoid range error


    precision = Math.min(Math.max(0, precision), 20);
    x = (+x).toFixed(precision);
    return returnStr ? x : +x;
  }
  /**
   * asc sort arr.
   * The input arr will be modified.
   *
   * @param {Array} arr
   * @return {Array} The input arr.
   */


  function asc(arr) {
    arr.sort(function (a, b) {
      return a - b;
    });
    return arr;
  }
  /**
   * Get precision
   * @param {number} val
   */


  function getPrecision(val) {
    val = +val;

    if (isNaN(val)) {
      return 0;
    } // It is much faster than methods converting number to string as follows
    //      var tmp = val.toString();
    //      return tmp.length - 1 - tmp.indexOf('.');
    // especially when precision is low


    var e = 1;
    var count = 0;

    while (Math.round(val * e) / e !== val) {
      e *= 10;
      count++;
    }

    return count;
  }
  /**
   * @param {string|number} val
   * @return {number}
   */


  function getPrecisionSafe(val) {
    var str = val.toString(); // Consider scientific notation: '3.4e-12' '3.4e+12'

    var eIndex = str.indexOf('e');

    if (eIndex > 0) {
      var precision = +str.slice(eIndex + 1);
      return precision < 0 ? -precision : 0;
    } else {
      var dotIndex = str.indexOf('.');
      return dotIndex < 0 ? 0 : str.length - 1 - dotIndex;
    }
  }
  /**
   * Minimal dicernible data precisioin according to a single pixel.
   *
   * @param {Array.<number>} dataExtent
   * @param {Array.<number>} pixelExtent
   * @return {number} precision
   */


  function getPixelPrecision(dataExtent, pixelExtent) {
    var log = Math.log;
    var LN10 = Math.LN10;
    var dataQuantity = Math.floor(log(dataExtent[1] - dataExtent[0]) / LN10);
    var sizeQuantity = Math.round(log(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10); // toFixed() digits argument must be between 0 and 20.

    var precision = Math.min(Math.max(-dataQuantity + sizeQuantity, 0), 20);
    return !isFinite(precision) ? 20 : precision;
  }
  /**
   * Get a data of given precision, assuring the sum of percentages
   * in valueList is 1.
   * The largest remainer method is used.
   * https://en.wikipedia.org/wiki/Largest_remainder_method
   *
   * @param {Array.<number>} valueList a list of all data
   * @param {number} idx index of the data to be processed in valueList
   * @param {number} precision integer number showing digits of precision
   * @return {number} percent ranging from 0 to 100
   */


  function getPercentWithPrecision(valueList, idx, precision) {
    if (!valueList[idx]) {
      return 0;
    }

    var sum = zrUtil.reduce(valueList, function (acc, val) {
      return acc + (isNaN(val) ? 0 : val);
    }, 0);

    if (sum === 0) {
      return 0;
    }

    var digits = Math.pow(10, precision);
    var votesPerQuota = zrUtil.map(valueList, function (val) {
      return (isNaN(val) ? 0 : val) / sum * digits * 100;
    });
    var targetSeats = digits * 100;
    var seats = zrUtil.map(votesPerQuota, function (votes) {
      // Assign automatic seats.
      return Math.floor(votes);
    });
    var currentSum = zrUtil.reduce(seats, function (acc, val) {
      return acc + val;
    }, 0);
    var remainder = zrUtil.map(votesPerQuota, function (votes, idx) {
      return votes - seats[idx];
    }); // Has remainding votes.

    while (currentSum < targetSeats) {
      // Find next largest remainder.
      var max = Number.NEGATIVE_INFINITY;
      var maxId = null;

      for (var i = 0, len = remainder.length; i < len; ++i) {
        if (remainder[i] > max) {
          max = remainder[i];
          maxId = i;
        }
      } // Add a vote to max remainder.


      ++seats[maxId];
      remainder[maxId] = 0;
      ++currentSum;
    }

    return seats[idx] / digits;
  } // Number.MAX_SAFE_INTEGER, ie do not support.


  var MAX_SAFE_INTEGER = 9007199254740991;
  /**
   * To 0 - 2 * PI, considering negative radian.
   * @param {number} radian
   * @return {number}
   */

  function remRadian(radian) {
    var pi2 = Math.PI * 2;
    return (radian % pi2 + pi2) % pi2;
  }
  /**
   * @param {type} radian
   * @return {boolean}
   */


  function isRadianAroundZero(val) {
    return val > -RADIAN_EPSILON && val < RADIAN_EPSILON;
  }
  /* eslint-disable */


  var TIME_REG = /^(?:(\d{4})(?:[-\/](\d{1,2})(?:[-\/](\d{1,2})(?:[T ](\d{1,2})(?::(\d\d)(?::(\d\d)(?:[.,](\d+))?)?)?(Z|[\+\-]\d\d:?\d\d)?)?)?)?)?$/; // jshint ignore:line

  /* eslint-enable */

  /**
   * @param {string|Date|number} value These values can be accepted:
   *   + An instance of Date, represent a time in its own time zone.
   *   + Or string in a subset of ISO 8601, only including:
   *     + only year, month, date: '2012-03', '2012-03-01', '2012-03-01 05', '2012-03-01 05:06',
   *     + separated with T or space: '2012-03-01T12:22:33.123', '2012-03-01 12:22:33.123',
   *     + time zone: '2012-03-01T12:22:33Z', '2012-03-01T12:22:33+8000', '2012-03-01T12:22:33-05:00',
   *     all of which will be treated as local time if time zone is not specified
   *     (see <https://momentjs.com/>).
   *   + Or other string format, including (all of which will be treated as loacal time):
   *     '2012', '2012-3-1', '2012/3/1', '2012/03/01',
   *     '2009/6/12 2:00', '2009/6/12 2:05:08', '2009/6/12 2:05:08.123'
   *   + a timestamp, which represent a time in UTC.
   * @return {Date} date
   */

  function parseDate(value) {
    if (value instanceof Date) {
      return value;
    } else if (typeof value === 'string') {
      // Different browsers parse date in different way, so we parse it manually.
      // Some other issues:
      // new Date('1970-01-01') is UTC,
      // new Date('1970/01/01') and new Date('1970-1-01') is local.
      // See issue #3623
      var match = TIME_REG.exec(value);

      if (!match) {
        // return Invalid Date.
        return new Date(NaN);
      } // Use local time when no timezone offset specifed.


      if (!match[8]) {
        // match[n] can only be string or undefined.
        // But take care of '12' + 1 => '121'.
        return new Date(+match[1], +(match[2] || 1) - 1, +match[3] || 1, +match[4] || 0, +(match[5] || 0), +match[6] || 0, +match[7] || 0);
      } // Timezoneoffset of Javascript Date has considered DST (Daylight Saving Time,
      // https://tc39.github.io/ecma262/#sec-daylight-saving-time-adjustment).
      // For example, system timezone is set as "Time Zone: America/Toronto",
      // then these code will get different result:
      // `new Date(1478411999999).getTimezoneOffset();  // get 240`
      // `new Date(1478412000000).getTimezoneOffset();  // get 300`
      // So we should not use `new Date`, but use `Date.UTC`.
      else {
          var hour = +match[4] || 0;

          if (match[8].toUpperCase() !== 'Z') {
            hour -= match[8].slice(0, 3);
          }

          return new Date(Date.UTC(+match[1], +(match[2] || 1) - 1, +match[3] || 1, hour, +(match[5] || 0), +match[6] || 0, +match[7] || 0));
        }
    } else if (value == null) {
      return new Date(NaN);
    }

    return new Date(Math.round(value));
  }
  /**
   * Quantity of a number. e.g. 0.1, 1, 10, 100
   *
   * @param  {number} val
   * @return {number}
   */


  function quantity(val) {
    return Math.pow(10, quantityExponent(val));
  }

  function quantityExponent(val) {
    return Math.floor(Math.log(val) / Math.LN10);
  }
  /**
   * find a “nice” number approximately equal to x. Round the number if round = true,
   * take ceiling if round = false. The primary observation is that the “nicest”
   * numbers in decimal are 1, 2, and 5, and all power-of-ten multiples of these numbers.
   *
   * See "Nice Numbers for Graph Labels" of Graphic Gems.
   *
   * @param  {number} val Non-negative value.
   * @param  {boolean} round
   * @return {number}
   */


  function nice(val, round) {
    var exponent = quantityExponent(val);
    var exp10 = Math.pow(10, exponent);
    var f = val / exp10; // 1 <= f < 10

    var nf;

    if (round) {
      if (f < 1.5) {
        nf = 1;
      } else if (f < 2.5) {
        nf = 2;
      } else if (f < 4) {
        nf = 3;
      } else if (f < 7) {
        nf = 5;
      } else {
        nf = 10;
      }
    } else {
      if (f < 1) {
        nf = 1;
      } else if (f < 2) {
        nf = 2;
      } else if (f < 3) {
        nf = 3;
      } else if (f < 5) {
        nf = 5;
      } else {
        nf = 10;
      }
    }

    val = nf * exp10; // Fix 3 * 0.1 === 0.30000000000000004 issue (see IEEE 754).
    // 20 is the uppper bound of toFixed.

    return exponent >= -20 ? +val.toFixed(exponent < 0 ? -exponent : 0) : val;
  }
  /**
   * This code was copied from "d3.js"
   * <https://github.com/d3/d3/blob/9cc9a875e636a1dcf36cc1e07bdf77e1ad6e2c74/src/arrays/quantile.js>.
   * See the license statement at the head of this file.
   * @param {Array.<number>} ascArr
   */


  function quantile(ascArr, p) {
    var H = (ascArr.length - 1) * p + 1;
    var h = Math.floor(H);
    var v = +ascArr[h - 1];
    var e = H - h;
    return e ? v + e * (ascArr[h] - v) : v;
  }
  /**
   * Order intervals asc, and split them when overlap.
   * expect(numberUtil.reformIntervals([
   *     {interval: [18, 62], close: [1, 1]},
   *     {interval: [-Infinity, -70], close: [0, 0]},
   *     {interval: [-70, -26], close: [1, 1]},
   *     {interval: [-26, 18], close: [1, 1]},
   *     {interval: [62, 150], close: [1, 1]},
   *     {interval: [106, 150], close: [1, 1]},
   *     {interval: [150, Infinity], close: [0, 0]}
   * ])).toEqual([
   *     {interval: [-Infinity, -70], close: [0, 0]},
   *     {interval: [-70, -26], close: [1, 1]},
   *     {interval: [-26, 18], close: [0, 1]},
   *     {interval: [18, 62], close: [0, 1]},
   *     {interval: [62, 150], close: [0, 1]},
   *     {interval: [150, Infinity], close: [0, 0]}
   * ]);
   * @param {Array.<Object>} list, where `close` mean open or close
   *        of the interval, and Infinity can be used.
   * @return {Array.<Object>} The origin list, which has been reformed.
   */


  function reformIntervals(list) {
    list.sort(function (a, b) {
      return littleThan(a, b, 0) ? -1 : 1;
    });
    var curr = -Infinity;
    var currClose = 1;

    for (var i = 0; i < list.length;) {
      var interval = list[i].interval;
      var close = list[i].close;

      for (var lg = 0; lg < 2; lg++) {
        if (interval[lg] <= curr) {
          interval[lg] = curr;
          close[lg] = !lg ? 1 - currClose : 1;
        }

        curr = interval[lg];
        currClose = close[lg];
      }

      if (interval[0] === interval[1] && close[0] * close[1] !== 1) {
        list.splice(i, 1);
      } else {
        i++;
      }
    }

    return list;

    function littleThan(a, b, lg) {
      return a.interval[lg] < b.interval[lg] || a.interval[lg] === b.interval[lg] && (a.close[lg] - b.close[lg] === (!lg ? 1 : -1) || !lg && littleThan(a, b, 1));
    }
  }
  /**
   * parseFloat NaNs numeric-cast false positives (null|true|false|"")
   * ...but misinterprets leading-number strings, particularly hex literals ("0x...")
   * subtraction forces infinities to NaN
   *
   * @param {*} v
   * @return {boolean}
   */


  function isNumeric(v) {
    return v - parseFloat(v) >= 0;
  }

  exports.linearMap = linearMap;
  exports.parsePercent = parsePercent;
  exports.round = round;
  exports.asc = asc;
  exports.getPrecision = getPrecision;
  exports.getPrecisionSafe = getPrecisionSafe;
  exports.getPixelPrecision = getPixelPrecision;
  exports.getPercentWithPrecision = getPercentWithPrecision;
  exports.MAX_SAFE_INTEGER = MAX_SAFE_INTEGER;
  exports.remRadian = remRadian;
  exports.isRadianAroundZero = isRadianAroundZero;
  exports.parseDate = parseDate;
  exports.quantity = quantity;
  exports.nice = nice;
  exports.quantile = quantile;
  exports.reformIntervals = reformIntervals;
  exports.isNumeric = isNumeric;

  /***/ }),
  /* 85 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Texture2D__ = __webpack_require__(5);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_glenum__ = __webpack_require__(11);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_util__ = __webpack_require__(23);




  var TexturePool = function () {

      this._pool = {};

      this._allocatedTextures = [];
  };

  TexturePool.prototype = {

      constructor: TexturePool,

      get: function (parameters) {
          var key = generateKey(parameters);
          if (!this._pool.hasOwnProperty(key)) {
              this._pool[key] = [];
          }
          var list = this._pool[key];
          if (!list.length) {
              var texture = new __WEBPACK_IMPORTED_MODULE_0__Texture2D__["a" /* default */](parameters);
              this._allocatedTextures.push(texture);
              return texture;
          }
          return list.pop();
      },

      put: function (texture) {
          var key = generateKey(texture);
          if (!this._pool.hasOwnProperty(key)) {
              this._pool[key] = [];
          }
          var list = this._pool[key];
          list.push(texture);
      },

      clear: function (renderer) {
          for (var i = 0; i < this._allocatedTextures.length; i++) {
              this._allocatedTextures[i].dispose(renderer);
          }
          this._pool = {};
          this._allocatedTextures = [];
      }
  };

  var defaultParams = {
      width: 512,
      height: 512,
      type: __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].UNSIGNED_BYTE,
      format: __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].RGBA,
      wrapS: __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].CLAMP_TO_EDGE,
      wrapT: __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].CLAMP_TO_EDGE,
      minFilter: __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].LINEAR_MIPMAP_LINEAR,
      magFilter: __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].LINEAR,
      useMipmap: true,
      anisotropic: 1,
      flipY: true,
      unpackAlignment: 4,
      premultiplyAlpha: false
  };

  var defaultParamPropList = Object.keys(defaultParams);

  function generateKey(parameters) {
      __WEBPACK_IMPORTED_MODULE_2__core_util__["a" /* default */].defaultsWithPropList(parameters, defaultParams, defaultParamPropList);
      fallBack(parameters);

      var key = '';
      for (var i = 0; i < defaultParamPropList.length; i++) {
          var name = defaultParamPropList[i];
          var chunk = parameters[name].toString();
          key += chunk;
      }
      return key;
  }

  function fallBack(target) {

      var IPOT = isPowerOfTwo(target.width, target.height);

      if (target.format === __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].DEPTH_COMPONENT) {
          target.useMipmap = false;
      }

      if (!IPOT || !target.useMipmap) {
          if (target.minFilter == __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].NEAREST_MIPMAP_NEAREST ||
              target.minFilter == __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].NEAREST_MIPMAP_LINEAR) {
              target.minFilter = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].NEAREST;
          } else if (
              target.minFilter == __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].LINEAR_MIPMAP_LINEAR ||
              target.minFilter == __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].LINEAR_MIPMAP_NEAREST
          ) {
              target.minFilter = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].LINEAR;
          }
      }
      if (!IPOT) {
          target.wrapS = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].CLAMP_TO_EDGE;
          target.wrapT = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].CLAMP_TO_EDGE;
      }
  }

  function isPowerOfTwo(width, height) {
      return (width & (width-1)) === 0 &&
              (height & (height-1)) === 0;
  }

  /* harmony default export */ __webpack_exports__["a"] = (TexturePool);


  /***/ }),
  /* 86 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("@export clay.compositor.kernel.gaussian_9\nfloat gaussianKernel[9];\ngaussianKernel[0] = 0.07;\ngaussianKernel[1] = 0.09;\ngaussianKernel[2] = 0.12;\ngaussianKernel[3] = 0.14;\ngaussianKernel[4] = 0.16;\ngaussianKernel[5] = 0.14;\ngaussianKernel[6] = 0.12;\ngaussianKernel[7] = 0.09;\ngaussianKernel[8] = 0.07;\n@end\n@export clay.compositor.kernel.gaussian_13\nfloat gaussianKernel[13];\ngaussianKernel[0] = 0.02;\ngaussianKernel[1] = 0.03;\ngaussianKernel[2] = 0.06;\ngaussianKernel[3] = 0.08;\ngaussianKernel[4] = 0.11;\ngaussianKernel[5] = 0.13;\ngaussianKernel[6] = 0.14;\ngaussianKernel[7] = 0.13;\ngaussianKernel[8] = 0.11;\ngaussianKernel[9] = 0.08;\ngaussianKernel[10] = 0.06;\ngaussianKernel[11] = 0.03;\ngaussianKernel[12] = 0.02;\n@end\n@export clay.compositor.gaussian_blur\n#define SHADER_NAME gaussian_blur\nuniform sampler2D texture;varying vec2 v_Texcoord;\nuniform float blurSize : 2.0;\nuniform vec2 textureSize : [512.0, 512.0];\nuniform float blurDir : 0.0;\n@import clay.util.rgbm\n@import clay.util.clamp_sample\nvoid main (void)\n{\n @import clay.compositor.kernel.gaussian_9\n vec2 off = blurSize / textureSize;\n off *= vec2(1.0 - blurDir, blurDir);\n vec4 sum = vec4(0.0);\n float weightAll = 0.0;\n for (int i = 0; i < 9; i++) {\n float w = gaussianKernel[i];\n vec4 texel = decodeHDR(clampSample(texture, v_Texcoord + float(i - 4) * off));\n sum += texel * w;\n weightAll += w;\n }\n gl_FragColor = encodeHDR(sum / max(weightAll, 0.01));\n}\n@end\n");


  /***/ }),
  /* 87 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("\n@export clay.compositor.lut\nvarying vec2 v_Texcoord;\nuniform sampler2D texture;\nuniform sampler2D lookup;\nvoid main()\n{\n vec4 tex = texture2D(texture, v_Texcoord);\n float blueColor = tex.b * 63.0;\n vec2 quad1;\n quad1.y = floor(floor(blueColor) / 8.0);\n quad1.x = floor(blueColor) - (quad1.y * 8.0);\n vec2 quad2;\n quad2.y = floor(ceil(blueColor) / 8.0);\n quad2.x = ceil(blueColor) - (quad2.y * 8.0);\n vec2 texPos1;\n texPos1.x = (quad1.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * tex.r);\n texPos1.y = (quad1.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * tex.g);\n vec2 texPos2;\n texPos2.x = (quad2.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * tex.r);\n texPos2.y = (quad2.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * tex.g);\n vec4 newColor1 = texture2D(lookup, texPos1);\n vec4 newColor2 = texture2D(lookup, texPos2);\n vec4 newColor = mix(newColor1, newColor2, fract(blueColor));\n gl_FragColor = vec4(newColor.rgb, tex.w);\n}\n@end");


  /***/ }),
  /* 88 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("@export clay.compositor.output\n#define OUTPUT_ALPHA\nvarying vec2 v_Texcoord;\nuniform sampler2D texture;\n@import clay.util.rgbm\nvoid main()\n{\n vec4 tex = decodeHDR(texture2D(texture, v_Texcoord));\n gl_FragColor.rgb = tex.rgb;\n#ifdef OUTPUT_ALPHA\n gl_FragColor.a = tex.a;\n#else\n gl_FragColor.a = 1.0;\n#endif\n gl_FragColor = encodeHDR(gl_FragColor);\n#ifdef PREMULTIPLY_ALPHA\n gl_FragColor.rgb *= gl_FragColor.a;\n#endif\n}\n@end");


  /***/ }),
  /* 89 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("@export clay.compositor.bright\nuniform sampler2D texture;\nuniform float threshold : 1;\nuniform float scale : 1.0;\nuniform vec2 textureSize: [512, 512];\nvarying vec2 v_Texcoord;\nconst vec3 lumWeight = vec3(0.2125, 0.7154, 0.0721);\n@import clay.util.rgbm\nvec4 median(vec4 a, vec4 b, vec4 c)\n{\n return a + b + c - min(min(a, b), c) - max(max(a, b), c);\n}\nvoid main()\n{\n vec4 texel = decodeHDR(texture2D(texture, v_Texcoord));\n#ifdef ANTI_FLICKER\n vec3 d = 1.0 / textureSize.xyx * vec3(1.0, 1.0, 0.0);\n vec4 s1 = decodeHDR(texture2D(texture, v_Texcoord - d.xz));\n vec4 s2 = decodeHDR(texture2D(texture, v_Texcoord + d.xz));\n vec4 s3 = decodeHDR(texture2D(texture, v_Texcoord - d.zy));\n vec4 s4 = decodeHDR(texture2D(texture, v_Texcoord + d.zy));\n texel = median(median(texel, s1, s2), s3, s4);\n#endif\n float lum = dot(texel.rgb , lumWeight);\n vec4 color;\n if (lum > threshold && texel.a > 0.0)\n {\n color = vec4(texel.rgb * scale, texel.a * scale);\n }\n else\n {\n color = vec4(0.0);\n }\n gl_FragColor = encodeHDR(color);\n}\n@end\n");


  /***/ }),
  /* 90 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("@export clay.compositor.downsample\nuniform sampler2D texture;\nuniform vec2 textureSize : [512, 512];\nvarying vec2 v_Texcoord;\n@import clay.util.rgbm\nfloat brightness(vec3 c)\n{\n return max(max(c.r, c.g), c.b);\n}\n@import clay.util.clamp_sample\nvoid main()\n{\n vec4 d = vec4(-1.0, -1.0, 1.0, 1.0) / textureSize.xyxy;\n#ifdef ANTI_FLICKER\n vec3 s1 = decodeHDR(clampSample(texture, v_Texcoord + d.xy)).rgb;\n vec3 s2 = decodeHDR(clampSample(texture, v_Texcoord + d.zy)).rgb;\n vec3 s3 = decodeHDR(clampSample(texture, v_Texcoord + d.xw)).rgb;\n vec3 s4 = decodeHDR(clampSample(texture, v_Texcoord + d.zw)).rgb;\n float s1w = 1.0 / (brightness(s1) + 1.0);\n float s2w = 1.0 / (brightness(s2) + 1.0);\n float s3w = 1.0 / (brightness(s3) + 1.0);\n float s4w = 1.0 / (brightness(s4) + 1.0);\n float oneDivideSum = 1.0 / (s1w + s2w + s3w + s4w);\n vec4 color = vec4(\n (s1 * s1w + s2 * s2w + s3 * s3w + s4 * s4w) * oneDivideSum,\n 1.0\n );\n#else\n vec4 color = decodeHDR(clampSample(texture, v_Texcoord + d.xy));\n color += decodeHDR(clampSample(texture, v_Texcoord + d.zy));\n color += decodeHDR(clampSample(texture, v_Texcoord + d.xw));\n color += decodeHDR(clampSample(texture, v_Texcoord + d.zw));\n color *= 0.25;\n#endif\n gl_FragColor = encodeHDR(color);\n}\n@end");


  /***/ }),
  /* 91 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("\n@export clay.compositor.upsample\n#define HIGH_QUALITY\nuniform sampler2D texture;\nuniform vec2 textureSize : [512, 512];\nuniform float sampleScale: 0.5;\nvarying vec2 v_Texcoord;\n@import clay.util.rgbm\n@import clay.util.clamp_sample\nvoid main()\n{\n#ifdef HIGH_QUALITY\n vec4 d = vec4(1.0, 1.0, -1.0, 0.0) / textureSize.xyxy * sampleScale;\n vec4 s;\n s = decodeHDR(clampSample(texture, v_Texcoord - d.xy));\n s += decodeHDR(clampSample(texture, v_Texcoord - d.wy)) * 2.0;\n s += decodeHDR(clampSample(texture, v_Texcoord - d.zy));\n s += decodeHDR(clampSample(texture, v_Texcoord + d.zw)) * 2.0;\n s += decodeHDR(clampSample(texture, v_Texcoord )) * 4.0;\n s += decodeHDR(clampSample(texture, v_Texcoord + d.xw)) * 2.0;\n s += decodeHDR(clampSample(texture, v_Texcoord + d.zy));\n s += decodeHDR(clampSample(texture, v_Texcoord + d.wy)) * 2.0;\n s += decodeHDR(clampSample(texture, v_Texcoord + d.xy));\n gl_FragColor = encodeHDR(s / 16.0);\n#else\n vec4 d = vec4(-1.0, -1.0, +1.0, +1.0) / textureSize.xyxy;\n vec4 s;\n s = decodeHDR(clampSample(texture, v_Texcoord + d.xy));\n s += decodeHDR(clampSample(texture, v_Texcoord + d.zy));\n s += decodeHDR(clampSample(texture, v_Texcoord + d.xw));\n s += decodeHDR(clampSample(texture, v_Texcoord + d.zw));\n gl_FragColor = encodeHDR(s / 4.0);\n#endif\n}\n@end");


  /***/ }),
  /* 92 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("@export clay.compositor.hdr.composite\n#define TONEMAPPING\nuniform sampler2D texture;\n#ifdef BLOOM_ENABLED\nuniform sampler2D bloom;\n#endif\n#ifdef LENSFLARE_ENABLED\nuniform sampler2D lensflare;\nuniform sampler2D lensdirt;\n#endif\n#ifdef LUM_ENABLED\nuniform sampler2D lum;\n#endif\n#ifdef LUT_ENABLED\nuniform sampler2D lut;\n#endif\n#ifdef COLOR_CORRECTION\nuniform float brightness : 0.0;\nuniform float contrast : 1.0;\nuniform float saturation : 1.0;\n#endif\n#ifdef VIGNETTE\nuniform float vignetteDarkness: 1.0;\nuniform float vignetteOffset: 1.0;\n#endif\nuniform float exposure : 1.0;\nuniform float bloomIntensity : 0.25;\nuniform float lensflareIntensity : 1;\nvarying vec2 v_Texcoord;\n@import clay.util.srgb\nvec3 ACESToneMapping(vec3 color)\n{\n const float A = 2.51;\n const float B = 0.03;\n const float C = 2.43;\n const float D = 0.59;\n const float E = 0.14;\n return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nfloat eyeAdaption(float fLum)\n{\n return mix(0.2, fLum, 0.5);\n}\n#ifdef LUT_ENABLED\nvec3 lutTransform(vec3 color) {\n float blueColor = color.b * 63.0;\n vec2 quad1;\n quad1.y = floor(floor(blueColor) / 8.0);\n quad1.x = floor(blueColor) - (quad1.y * 8.0);\n vec2 quad2;\n quad2.y = floor(ceil(blueColor) / 8.0);\n quad2.x = ceil(blueColor) - (quad2.y * 8.0);\n vec2 texPos1;\n texPos1.x = (quad1.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * color.r);\n texPos1.y = (quad1.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * color.g);\n vec2 texPos2;\n texPos2.x = (quad2.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * color.r);\n texPos2.y = (quad2.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * color.g);\n vec4 newColor1 = texture2D(lut, texPos1);\n vec4 newColor2 = texture2D(lut, texPos2);\n vec4 newColor = mix(newColor1, newColor2, fract(blueColor));\n return newColor.rgb;\n}\n#endif\n@import clay.util.rgbm\nvoid main()\n{\n vec4 texel = vec4(0.0);\n vec4 originalTexel = vec4(0.0);\n#ifdef TEXTURE_ENABLED\n texel = decodeHDR(texture2D(texture, v_Texcoord));\n originalTexel = texel;\n#endif\n#ifdef BLOOM_ENABLED\n vec4 bloomTexel = decodeHDR(texture2D(bloom, v_Texcoord));\n texel.rgb += bloomTexel.rgb * bloomIntensity;\n texel.a += bloomTexel.a * bloomIntensity;\n#endif\n#ifdef LENSFLARE_ENABLED\n texel += decodeHDR(texture2D(lensflare, v_Texcoord)) * texture2D(lensdirt, v_Texcoord) * lensflareIntensity;\n#endif\n texel.a = min(texel.a, 1.0);\n#ifdef LUM_ENABLED\n float fLum = texture2D(lum, vec2(0.5, 0.5)).r;\n float adaptedLumDest = 3.0 / (max(0.1, 1.0 + 10.0*eyeAdaption(fLum)));\n float exposureBias = adaptedLumDest * exposure;\n#else\n float exposureBias = exposure;\n#endif\n#ifdef TONEMAPPING\n texel.rgb *= exposureBias;\n texel.rgb = ACESToneMapping(texel.rgb);\n#endif\n texel = linearTosRGB(texel);\n#ifdef LUT_ENABLED\n texel.rgb = lutTransform(clamp(texel.rgb,vec3(0.0),vec3(1.0)));\n#endif\n#ifdef COLOR_CORRECTION\n texel.rgb = clamp(texel.rgb + vec3(brightness), 0.0, 1.0);\n texel.rgb = clamp((texel.rgb - vec3(0.5))*contrast+vec3(0.5), 0.0, 1.0);\n float lum = dot(texel.rgb, vec3(0.2125, 0.7154, 0.0721));\n texel.rgb = mix(vec3(lum), texel.rgb, saturation);\n#endif\n#ifdef VIGNETTE\n vec2 uv = (v_Texcoord - vec2(0.5)) * vec2(vignetteOffset);\n texel.rgb = mix(texel.rgb, vec3(1.0 - vignetteDarkness), dot(uv, uv));\n#endif\n gl_FragColor = encodeHDR(texel);\n#ifdef DEBUG\n #if DEBUG == 1\n gl_FragColor = encodeHDR(decodeHDR(texture2D(texture, v_Texcoord)));\n #elif DEBUG == 2\n gl_FragColor = encodeHDR(decodeHDR(texture2D(bloom, v_Texcoord)) * bloomIntensity);\n #elif DEBUG == 3\n gl_FragColor = encodeHDR(decodeHDR(texture2D(lensflare, v_Texcoord) * lensflareIntensity));\n #endif\n#endif\n if (originalTexel.a <= 0.01 && gl_FragColor.a > 1e-5) {\n gl_FragColor.a = dot(gl_FragColor.rgb, vec3(0.2125, 0.7154, 0.0721));\n }\n#ifdef PREMULTIPLY_ALPHA\n gl_FragColor.rgb *= gl_FragColor.a;\n#endif\n}\n@end");


  /***/ }),
  /* 93 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("@export clay.compositor.blend\n#define SHADER_NAME blend\n#ifdef TEXTURE1_ENABLED\nuniform sampler2D texture1;\nuniform float weight1 : 1.0;\n#endif\n#ifdef TEXTURE2_ENABLED\nuniform sampler2D texture2;\nuniform float weight2 : 1.0;\n#endif\n#ifdef TEXTURE3_ENABLED\nuniform sampler2D texture3;\nuniform float weight3 : 1.0;\n#endif\n#ifdef TEXTURE4_ENABLED\nuniform sampler2D texture4;\nuniform float weight4 : 1.0;\n#endif\n#ifdef TEXTURE5_ENABLED\nuniform sampler2D texture5;\nuniform float weight5 : 1.0;\n#endif\n#ifdef TEXTURE6_ENABLED\nuniform sampler2D texture6;\nuniform float weight6 : 1.0;\n#endif\nvarying vec2 v_Texcoord;\n@import clay.util.rgbm\nvoid main()\n{\n vec4 tex = vec4(0.0);\n#ifdef TEXTURE1_ENABLED\n tex += decodeHDR(texture2D(texture1, v_Texcoord)) * weight1;\n#endif\n#ifdef TEXTURE2_ENABLED\n tex += decodeHDR(texture2D(texture2, v_Texcoord)) * weight2;\n#endif\n#ifdef TEXTURE3_ENABLED\n tex += decodeHDR(texture2D(texture3, v_Texcoord)) * weight3;\n#endif\n#ifdef TEXTURE4_ENABLED\n tex += decodeHDR(texture2D(texture4, v_Texcoord)) * weight4;\n#endif\n#ifdef TEXTURE5_ENABLED\n tex += decodeHDR(texture2D(texture5, v_Texcoord)) * weight5;\n#endif\n#ifdef TEXTURE6_ENABLED\n tex += decodeHDR(texture2D(texture6, v_Texcoord)) * weight6;\n#endif\n gl_FragColor = encodeHDR(tex);\n}\n@end");


  /***/ }),
  /* 94 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("@export clay.compositor.fxaa\nuniform sampler2D texture;\nuniform vec4 viewport : VIEWPORT;\nvarying vec2 v_Texcoord;\n#define FXAA_REDUCE_MIN (1.0/128.0)\n#define FXAA_REDUCE_MUL (1.0/8.0)\n#define FXAA_SPAN_MAX 8.0\n@import clay.util.rgbm\nvoid main()\n{\n vec2 resolution = 1.0 / viewport.zw;\n vec3 rgbNW = decodeHDR( texture2D( texture, ( gl_FragCoord.xy + vec2( -1.0, -1.0 ) ) * resolution ) ).xyz;\n vec3 rgbNE = decodeHDR( texture2D( texture, ( gl_FragCoord.xy + vec2( 1.0, -1.0 ) ) * resolution ) ).xyz;\n vec3 rgbSW = decodeHDR( texture2D( texture, ( gl_FragCoord.xy + vec2( -1.0, 1.0 ) ) * resolution ) ).xyz;\n vec3 rgbSE = decodeHDR( texture2D( texture, ( gl_FragCoord.xy + vec2( 1.0, 1.0 ) ) * resolution ) ).xyz;\n vec4 rgbaM = decodeHDR( texture2D( texture, gl_FragCoord.xy * resolution ) );\n vec3 rgbM = rgbaM.xyz;\n float opacity = rgbaM.w;\n vec3 luma = vec3( 0.299, 0.587, 0.114 );\n float lumaNW = dot( rgbNW, luma );\n float lumaNE = dot( rgbNE, luma );\n float lumaSW = dot( rgbSW, luma );\n float lumaSE = dot( rgbSE, luma );\n float lumaM = dot( rgbM, luma );\n float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n vec2 dir;\n dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n dir.y = ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n dir = min( vec2( FXAA_SPAN_MAX, FXAA_SPAN_MAX),\n max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n dir * rcpDirMin)) * resolution;\n vec3 rgbA = decodeHDR( texture2D( texture, gl_FragCoord.xy * resolution + dir * ( 1.0 / 3.0 - 0.5 ) ) ).xyz;\n rgbA += decodeHDR( texture2D( texture, gl_FragCoord.xy * resolution + dir * ( 2.0 / 3.0 - 0.5 ) ) ).xyz;\n rgbA *= 0.5;\n vec3 rgbB = decodeHDR( texture2D( texture, gl_FragCoord.xy * resolution + dir * -0.5 ) ).xyz;\n rgbB += decodeHDR( texture2D( texture, gl_FragCoord.xy * resolution + dir * 0.5 ) ).xyz;\n rgbB *= 0.25;\n rgbB += rgbA * 0.5;\n float lumaB = dot( rgbB, luma );\n if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) )\n {\n gl_FragColor = vec4( rgbA, opacity );\n }\n else {\n gl_FragColor = vec4( rgbB, opacity );\n }\n}\n@end");


  /***/ }),
  /* 95 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);


  /* harmony default export */ __webpack_exports__["a"] = ({

      getFilledRegions: function (regions, mapData) {
          var regionsArr = (regions || []).slice();

          var geoJson;
          if (typeof mapData === 'string') {
              mapData = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.getMap(mapData);
              geoJson = mapData && mapData.geoJson;
          }
          else {
              if (mapData && mapData.features) {
                  geoJson = mapData;
              }
          }
          if (!geoJson) {
              {
                  console.error('Map ' + mapData + ' not exists. You can download map file on http://echarts.baidu.com/download-map.html');
                  if (!geoJson.features) {
                      console.error('Invalid GeoJSON for map3D');
                  }
              }
              return [];
          }

          var dataNameMap = {};
          var features = geoJson.features;
          for (var i = 0; i < regionsArr.length; i++) {
              dataNameMap[regionsArr[i].name] = regionsArr[i];
          }

          for (var i = 0; i < features.length; i++) {
              var name = features[i].properties.name;
              if (!dataNameMap[name]) {
                  regionsArr.push({
                      name: name
                  });
              }
          }

          return regionsArr;
      },

      defaultOption: {
          show: true,

          zlevel: -10,

          // geoJson used by geo3D
          map: '',

          // Layout used for viewport
          left: 0,
          top: 0,
          width: '100%',
          height: '100%',

          boxWidth: 100,
          boxHeight: 10,
          boxDepth: 'auto',

          regionHeight: 3,

          environment: 'auto',

          groundPlane: {
              show: false,
              color: '#aaa'
          },

          shading: 'lambert',

          light: {
              main: {
                  alpha: 40,
                  beta: 30
              }
          },

          viewControl: {
              alpha: 40,
              beta: 0,
              distance: 100,
              orthographicSize: 60,

              minAlpha: 5,
              minBeta: -80,
              maxBeta: 80
          },

          label: {
              show: false,
              // Distance in 3d space.
              distance: 2,

              textStyle: {
                  fontSize: 20,
                  color: '#000',
                  backgroundColor: 'rgba(255,255,255,0.7)',
                  padding: 3,
                  borderRadius: 4
              }
          },

          // TODO
          // altitude: {
          //     min: 'auto',
          //     max: 'auto',

          //     height: []
          // },


          // labelLine

          // light
          // postEffect
          // temporalSuperSampling

          itemStyle: {
              color: '#fff',
              borderWidth: 0,
              borderColor: '#333'
          },

          emphasis: {
              itemStyle: {
                  // color: '#f94b59'
                  color: '#639fc0'
              },
              label: {
                  show: true
              }
          }
      }
  });

  /***/ }),
  /* 96 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {

  function swap(arr, a, b) {
      var tmp = arr[a];
      arr[a] = arr[b];
      arr[b] = tmp;
  }
  function partition(arr, pivot, left, right, compare) {
      var storeIndex = left;
      var pivotValue = arr[pivot];

      // put the pivot on the right
      swap(arr, pivot, right);

      // go through the rest
      for(var v = left; v < right; v++) {
          if(compare(arr[v], pivotValue) < 0) {
              swap(arr, v, storeIndex);
              storeIndex++;
          }
      }

      // finally put the pivot in the correct place
      swap(arr, right, storeIndex);

      return storeIndex;
  }

  function quickSort(array, compare, left, right) {
      if(left < right) {
          var pivot = Math.floor((left + right) / 2);
          var newPivot = partition(array, pivot, left, right, compare);
          quickSort(array, compare, left, newPivot - 1);
          quickSort(array, compare, newPivot + 1, right);
      }
  }


  // TODO Test.
  function ProgressiveQuickSort() {

      // this._pivotList = new LinkedList();
      this._parts = [];
  }

  ProgressiveQuickSort.prototype.step = function (arr, compare, frame) {

      var len = arr.length;
      if (frame === 0) {
          this._parts = [];
          this._sorted = false;

          // Pick a start pivot;
          var pivot = Math.floor(len / 2);
          this._parts.push({
              pivot: pivot,
              left: 0,
              right: len - 1
          });

          this._currentSortPartIdx = 0;
      }

      if (this._sorted) {
          return;
      }

      var parts = this._parts;
      if (parts.length === 0) {
          this._sorted = true;
          // Already finished.
          return true;
      }
      else if (parts.length < 512) {
          // Sort large parts in about 10 frames.
          for (var i = 0; i < parts.length; i++) {
              // Partition and Modify the pivot index.
              parts[i].pivot = partition(
                  arr, parts[i].pivot, parts[i].left, parts[i].right, compare
              );
          }

          var subdividedParts = [];
          for (var i = 0; i < parts.length; i++) {
              // Subdivide left
              var left = parts[i].left;
              var right = parts[i].pivot - 1;
              if (right > left) {
                  subdividedParts.push({
                      pivot: Math.floor((right + left) / 2),
                      left: left, right: right
                  });
              }
              // Subdivide right
              var left = parts[i].pivot + 1;
              var right = parts[i].right;
              if (right > left) {
                  subdividedParts.push({
                      pivot: Math.floor((right + left) / 2),
                      left: left, right: right
                  });
              }
          }
          parts = this._parts = subdividedParts;
      }
      else {
          // console.time('sort');
          // Finally quick sort each parts in 10 frames.
          for (var i = 0; i < Math.floor(parts.length / 10); i++) {
              // Sort near parts first.
              var idx = parts.length - 1 - this._currentSortPartIdx;
              quickSort(arr, compare, parts[idx].left, parts[idx].right);
              this._currentSortPartIdx++;

              // Finish sort
              if (this._currentSortPartIdx === parts.length) {
                  this._sorted = true;
                  return true;
              }
          }
          // console.timeEnd('sort');

      }

      return false;
  };

  ProgressiveQuickSort.sort = quickSort;

  /* harmony default export */ __webpack_exports__["a"] = (ProgressiveQuickSort);

  /***/ }),
  /* 97 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geo3D_Geo3D__ = __webpack_require__(98);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_echarts_lib_util_layout__ = __webpack_require__(47);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_echarts_lib_util_layout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_echarts_lib_util_layout__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_ViewGL__ = __webpack_require__(22);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_retrieve__ = __webpack_require__(2);






  function resizeGeo3D(geo3DModel, api) {
      // Use left/top/width/height
      var boxLayoutOption = geo3DModel.getBoxLayoutParams();

      var viewport = __WEBPACK_IMPORTED_MODULE_2_echarts_lib_util_layout___default.a.getLayoutRect(boxLayoutOption, {
          width: api.getWidth(),
          height: api.getHeight()
      });

      // Flip Y
      viewport.y = api.getHeight() - viewport.y - viewport.height;

      this.viewGL.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, api.getDevicePixelRatio());

      var geoRect = this.getGeoBoundingRect();
      var aspect = geoRect.width / geoRect.height * (geo3DModel.get('aspectScale') || 0.75);

      var width = geo3DModel.get('boxWidth');
      var depth = geo3DModel.get('boxDepth');
      var height = geo3DModel.get('boxHeight');
      if (height == null) {
          height = 5;
      }
      if (isNaN(width) && isNaN(depth)) {
          // Default to have 100 width
          width = 100;
      }
      if (isNaN(depth)) {
          depth = width / aspect;
      }
      else if (isNaN(width)) {
          width = depth / aspect;
      }

      this.setSize(width, height, depth);

      this.regionHeight = geo3DModel.get('regionHeight');

      if (this.altitudeAxis) {
          this.altitudeAxis.setExtent(0, Math.max(height - this.regionHeight, 0));
      }
  }

  function updateGeo3D(ecModel, api) {

      var altitudeDataExtent = [Infinity, -Infinity];

      ecModel.eachSeries(function (seriesModel) {
          if (seriesModel.coordinateSystem !== this) {
              return;
          }
          if (seriesModel.type === 'series.map3D') {
              return;
          }
          // Get altitude data extent.
          var data = seriesModel.getData();
          var altDims = seriesModel.coordDimToDataDim('alt');
          var altDim = altDims && altDims[0];
          if (altDim) {
              // TODO altitiude is in coords of lines.
              var dataExtent = data.getDataExtent(altDim, true);
              altitudeDataExtent[0] = Math.min(
                  altitudeDataExtent[0], dataExtent[0]
              );
              altitudeDataExtent[1] = Math.max(
                  altitudeDataExtent[1], dataExtent[1]
              );
          }
      }, this);
      // Create altitude axis
      if (altitudeDataExtent && isFinite(altitudeDataExtent[1] - altitudeDataExtent[0])) {
          var scale = __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts___default.a.helper.createScale(
              altitudeDataExtent, {
                  type: 'value',
                  // PENDING
                  min: 'dataMin',
                  max: 'dataMax'
              }
          );
          this.altitudeAxis = new __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts___default.a.Axis('altitude', scale);
          // Resize again
          this.resize(this.model, api);
      }
  }


  {
      var mapNotExistsError = function (name) {
          console.error('Map ' + name + ' not exists. You can download map file on http://echarts.baidu.com/download-map.html');
      };
  }


  var idStart = 0;

  var geo3DCreator = {

      dimensions: __WEBPACK_IMPORTED_MODULE_0__geo3D_Geo3D__["a" /* default */].prototype.dimensions,

      create: function (ecModel, api) {

          var geo3DList = [];

          if (!__WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts___default.a.getMap) {
              throw new Error('geo3D component depends on geo component');
          }

          function createGeo3D(componentModel, idx) {

              var geo3D = geo3DCreator.createGeo3D(componentModel);

              // FIXME
              componentModel.__viewGL = componentModel.__viewGL || new __WEBPACK_IMPORTED_MODULE_3__core_ViewGL__["a" /* default */]();

              geo3D.viewGL = componentModel.__viewGL;

              componentModel.coordinateSystem = geo3D;
              geo3D.model = componentModel;

              geo3DList.push(geo3D);

              // Inject resize
              geo3D.resize = resizeGeo3D;
              geo3D.resize(componentModel, api);

              geo3D.update = updateGeo3D;
          }

          ecModel.eachComponent('geo3D', function (geo3DModel, idx) {
              createGeo3D(geo3DModel);
          });

          ecModel.eachSeriesByType('map3D', function (map3DModel, idx) {
              var coordSys = map3DModel.get('coordinateSystem');
              if (coordSys == null) {
                  coordSys = 'geo3D';
              }
              if (coordSys === 'geo3D') {
                  createGeo3D(map3DModel);
              }
          });

          ecModel.eachSeries(function (seriesModel) {
              if (seriesModel.get('coordinateSystem') === 'geo3D') {
                  if (seriesModel.type === 'series.map3D') {
                      return;
                  }
                  var geo3DModel = seriesModel.getReferringComponents('geo3D')[0];
                  if (!geo3DModel) {
                      geo3DModel = ecModel.getComponent('geo3D');
                  }

                  if (!geo3DModel) {
                      throw new Error('geo "' + __WEBPACK_IMPORTED_MODULE_4__util_retrieve__["a" /* default */].firstNotNull(
                          seriesModel.get('geo3DIndex'),
                          seriesModel.get('geo3DId'),
                          0
                      ) + '" not found');
                  }

                  seriesModel.coordinateSystem = geo3DModel.coordinateSystem;
              }
          });

          return geo3DList;
      },

      createGeo3D: function (componentModel) {

          var mapData = componentModel.get('map');
          var name;
          if (typeof mapData === 'string') {
              name = mapData;
              mapData = __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts___default.a.getMap(mapData);
          }
          else {
              if (mapData && mapData.features) {
                  mapData = {
                      geoJson: mapData
                  };
              }
          }
          {
              if (!mapData) {
                  mapNotExistsError(mapData);
              }
              if (!mapData.geoJson.features) {
                  throw new Error('Invalid GeoJSON for map3D');
              }
          }
          if (name == null) {
              name = 'GEO_ANONYMOUS_' + idStart++;
          }

          return new __WEBPACK_IMPORTED_MODULE_0__geo3D_Geo3D__["a" /* default */](
              name + idStart++, name,
              mapData && mapData.geoJson, mapData && mapData.specialAreas,
              componentModel.get('nameMap')
          );
      }
  };

  __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts___default.a.registerCoordinateSystem('geo3D', geo3DCreator);

  /* harmony default export */ __webpack_exports__["a"] = (geo3DCreator);

  /***/ }),
  /* 98 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_claygl_src_dep_glmatrix__ = __webpack_require__(6);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_echarts_lib_coord_geo_fix_textCoord__ = __webpack_require__(207);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_echarts_lib_coord_geo_fix_textCoord___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_echarts_lib_coord_geo_fix_textCoord__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_echarts_lib_coord_geo_fix_geoCoord__ = __webpack_require__(208);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_echarts_lib_coord_geo_fix_geoCoord___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_echarts_lib_coord_geo_fix_geoCoord__);


  var vec3 = __WEBPACK_IMPORTED_MODULE_1_claygl_src_dep_glmatrix__["a" /* default */].vec3;
  var mat4 = __WEBPACK_IMPORTED_MODULE_1_claygl_src_dep_glmatrix__["a" /* default */].mat4;



  // Geo fix functions
  var geoFixFuncs = [__WEBPACK_IMPORTED_MODULE_2_echarts_lib_coord_geo_fix_textCoord___default.a, __WEBPACK_IMPORTED_MODULE_3_echarts_lib_coord_geo_fix_geoCoord___default.a];

  function Geo3D(name, map, geoJson, specialAreas, nameMap) {

      this.name = name;

      this.map = map;

      this.regionHeight = 0;

      this.regions = [];

      this._nameCoordMap = {};

      this.loadGeoJson(geoJson, specialAreas, nameMap);

      this.transform = mat4.identity(new Float64Array(16));

      this.invTransform = mat4.identity(new Float64Array(16));

      // Which dimension to extrude. Y or Z
      this.extrudeY = true;

      this.altitudeAxis;
  }

  Geo3D.prototype = {

      constructor: Geo3D,

      type: 'geo3D',

      dimensions: ['lng', 'lat', 'alt'],

      containPoint: function () {},

      loadGeoJson: function (geoJson, specialAreas, nameMap) {
          var parseGeoJSON = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.parseGeoJSON || __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.parseGeoJson;
          try {
              this.regions = geoJson ? parseGeoJSON(geoJson) : [];
          }
          catch (e) {
              throw 'Invalid geoJson format\n' + e;
          }
          specialAreas = specialAreas || {};
          nameMap = nameMap || {};
          var regions = this.regions;
          var regionsMap = {};
          for (var i = 0; i < regions.length; i++) {
              var regionName = regions[i].name;
              // Try use the alias in nameMap
              regionName = nameMap[regionName] || regionName;
              regions[i].name = regionName;

              regionsMap[regionName] = regions[i];
              // Add geoJson
              this.addGeoCoord(regionName, regions[i].center);

              // Some area like Alaska in USA map needs to be tansformed
              // to look better
              var specialArea = specialAreas[regionName];
              if (specialArea) {
                  regions[i].transformTo(
                      specialArea.left, specialArea.top, specialArea.width, specialArea.height
                  );
              }
          }

          this._regionsMap = regionsMap;

          this._geoRect = null;

          geoFixFuncs.forEach(function (fixFunc) {
              fixFunc(this);
          }, this);
      },

      getGeoBoundingRect: function () {
          if (this._geoRect) {
              return this._geoRect;
          }
          var rect;

          var regions = this.regions;
          for (var i = 0; i < regions.length; i++) {
              var regionRect = regions[i].getBoundingRect();
              rect = rect || regionRect.clone();
              rect.union(regionRect);
          }
          // FIXME Always return new ?
          return (this._geoRect = rect || new __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.graphic.BoundingRect(0, 0, 0, 0));
      },

      /**
       * Add geoCoord for indexing by name
       * @param {string} name
       * @param {Array.<number>} geoCoord
       */
      addGeoCoord: function (name, geoCoord) {
          this._nameCoordMap[name] = geoCoord;
      },

      /**
       * @param {string} name
       * @return {module:echarts/coord/geo/Region}
       */
      getRegion: function (name) {
          return this._regionsMap[name];
      },

      getRegionByCoord: function (coord) {
          var regions = this.regions;
          for (var i = 0; i < regions.length; i++) {
              if (regions[i].contain(coord)) {
                  return regions[i];
              }
          }
      },

      setSize: function (width, height, depth) {
          this.size = [width, height, depth];

          var rect = this.getGeoBoundingRect();

          var scaleX = width / rect.width;
          var scaleZ = -depth / rect.height;
          var translateX = -width / 2 - rect.x * scaleX;
          var translateZ = depth / 2 - rect.y * scaleZ;

          var position = this.extrudeY ? [translateX, 0, translateZ] : [translateX, translateZ, 0];
          var scale = this.extrudeY ? [scaleX, 1, scaleZ] : [scaleX, scaleZ, 1];

          var m = this.transform;
          mat4.identity(m);
          mat4.translate(m, m, position);
          mat4.scale(m, m, scale);

          mat4.invert(this.invTransform, m);
      },

      dataToPoint: function (data, out) {
          out = out || [];

          var extrudeCoordIndex = this.extrudeY ? 1 : 2;
          var sideCoordIndex = this.extrudeY ? 2 : 1;

          var altitudeVal = data[2];
          // PENDING.
          if (isNaN(altitudeVal)) {
              altitudeVal = 0;
          }
          // lng
          out[0] = data[0];
          // lat
          out[sideCoordIndex] = data[1];

          if (this.altitudeAxis) {
              out[extrudeCoordIndex] = this.altitudeAxis.dataToCoord(altitudeVal);
          }
          else {
              out[extrudeCoordIndex] = 0;
          }
          // PENDING different region height.
          out[extrudeCoordIndex] += this.regionHeight;

          vec3.transformMat4(out, out, this.transform);

          return out;
      },

      pointToData: function (point, out) {
          // TODO
      }
  };

  /* harmony default export */ __webpack_exports__["a"] = (Geo3D);

  /***/ }),
  /* 99 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_claygl_src_dep_glmatrix__ = __webpack_require__(6);

  var mat4 = __WEBPACK_IMPORTED_MODULE_0_claygl_src_dep_glmatrix__["a" /* default */].mat4;

  var TILE_SIZE = 512;
  var FOV = 0.6435011087932844;
  var PI = Math.PI;

  var WORLD_SCALE = 1 / 10;

  function MapServiceCoordSys3D() {
      /**
       * Width of mapbox viewport
       */
      this.width = 0;
      /**
       * Height of mapbox viewport
       */
      this.height = 0;

      this.altitudeScale = 1;

      // TODO Change boxHeight won't have animation.
      this.boxHeight = 'auto';

      // Set by mapbox creator
      this.altitudeExtent;

      this.bearing = 0;
      this.pitch = 0;
      this.center = [0, 0];

      this._origin;

      this.zoom = 0;
      this._initialZoom;

      // Some parameters for different map services.
      this.maxPitch = 60;
      this.zoomOffset = 0;
  }

  MapServiceCoordSys3D.prototype = {

      constructor: MapServiceCoordSys3D,

      dimensions: ['lng', 'lat', 'alt'],

      containPoint: function () {},

      setCameraOption: function (option) {
          this.bearing = option.bearing;
          this.pitch = option.pitch;

          this.center = option.center;
          this.zoom = option.zoom;

          if (!this._origin) {
              this._origin = this.projectOnTileWithScale(this.center, TILE_SIZE);
          }
          if (this._initialZoom == null) {
              this._initialZoom = this.zoom;
          }

          this.updateTransform();
      },

      // https://github.com/mapbox/mapbox-gl-js/blob/master/src/geo/transform.js#L479
      updateTransform: function () {
          if (!this.height) { return; }

          var cameraToCenterDistance = 0.5 / Math.tan(FOV / 2) * this.height * WORLD_SCALE;
          // Convert to radian.
          var pitch = Math.max(Math.min(this.pitch, this.maxPitch), 0) / 180 * Math.PI;

          // Find the distance from the center point [width/2, height/2] to the
          // center top point [width/2, 0] in Z units, using the law of sines.
          // 1 Z unit is equivalent to 1 horizontal px at the center of the map
          // (the distance between[width/2, height/2] and [width/2 + 1, height/2])
          var halfFov = FOV / 2;
          var groundAngle = Math.PI / 2 + pitch;
          var topHalfSurfaceDistance = Math.sin(halfFov) * cameraToCenterDistance / Math.sin(Math.PI - groundAngle - halfFov);

          // Calculate z distance of the farthest fragment that should be rendered.
          var furthestDistance = Math.cos(Math.PI / 2 - pitch) * topHalfSurfaceDistance + cameraToCenterDistance;
          // Add a bit extra to avoid precision problems when a fragment's distance is exactly `furthestDistance`
          var farZ = furthestDistance * 1.1;
          // Forced to be 1000
          if (this.pitch > 50) {
              farZ = 1000;
          }

          // matrix for conversion from location to GL coordinates (-1 .. 1)
          var m = [];
          mat4.perspective(m, FOV, this.width / this.height, 1, farZ);
          this.viewGL.camera.projectionMatrix.setArray(m);
          this.viewGL.camera.decomposeProjectionMatrix();

          var m = mat4.identity([]);
          var pt = this.dataToPoint(this.center);
          // Inverse
          mat4.scale(m, m, [1, -1, 1]);
          // Translate to altitude
          mat4.translate(m, m, [0, 0, -cameraToCenterDistance]);
          mat4.rotateX(m, m, pitch);
          mat4.rotateZ(m, m, -this.bearing / 180 * Math.PI);
          // Translate to center.
          mat4.translate(m, m, [-pt[0] * this.getScale() * WORLD_SCALE, -pt[1] * this.getScale() * WORLD_SCALE, 0]);

          this.viewGL.camera.viewMatrix.array = m;
          var invertM = [];
          mat4.invert(invertM, m);
          this.viewGL.camera.worldTransform.array = invertM;
          this.viewGL.camera.decomposeWorldTransform();

          // scale vertically to meters per pixel (inverse of ground resolution):
          // worldSize / (circumferenceOfEarth * cos(lat * π / 180))
          var worldSize = TILE_SIZE * this.getScale();
          var verticalScale;

          if (this.altitudeExtent && !isNaN(this.boxHeight)) {
              var range = this.altitudeExtent[1] - this.altitudeExtent[0];
              verticalScale = this.boxHeight / range * this.getScale() / Math.pow(2, this._initialZoom - this.zoomOffset);
          }
          else {
              verticalScale = worldSize / (2 * Math.PI * 6378000 * Math.abs(Math.cos(this.center[1] * (Math.PI / 180))))
                  * this.altitudeScale * WORLD_SCALE;
          }
          // Include scale to avoid relayout when zooming
          // FIXME Camera scale may have problem in shadow
          this.viewGL.rootNode.scale.set(
              this.getScale() * WORLD_SCALE, this.getScale() * WORLD_SCALE, verticalScale
          );
      },

      getScale: function () {
          return Math.pow(2, this.zoom - this.zoomOffset);
      },

      projectOnTile: function (data, out) {
          return this.projectOnTileWithScale(data, this.getScale() * TILE_SIZE, out);
      },

      projectOnTileWithScale: function (data, scale, out) {
          var lng = data[0];
          var lat = data[1];
          var lambda2 = lng * PI / 180;
          var phi2 = lat * PI / 180;
          var x = scale * (lambda2 + PI) / (2 * PI);
          var y = scale * (PI - Math.log(Math.tan(PI / 4 + phi2 * 0.5))) / (2 * PI);
          out = out || [];
          out[0] = x;
          out[1] = y;
          return out;
      },

      unprojectFromTile: function (point, out) {
          return this.unprojectOnTileWithScale(point, this.getScale() * TILE_SIZE, out);
      },

      unprojectOnTileWithScale: function (point, scale, out) {
          var x = point[0];
          var y = point[1];
          var lambda2 = (x / scale) * (2 * PI) - PI;
          var phi2 = 2 * (Math.atan(Math.exp(PI - (y / scale) * (2 * PI))) - PI / 4);
          out = out || [];
          out[0] = lambda2 * 180 / PI;
          out[1] = phi2 * 180 / PI;
          return out;
      },

      dataToPoint: function (data, out) {
          out = this.projectOnTileWithScale(data, TILE_SIZE, out);
          // Add a origin to avoid precision issue in WebGL.
          out[0] -= this._origin[0];
          out[1] -= this._origin[1];
          // PENDING
          out[2] = !isNaN(data[2]) ? data[2] : 0;
          if (!isNaN(data[2])) {
              out[2] = data[2];
              if (this.altitudeExtent) {
                  out[2] -= this.altitudeExtent[0];
              }
          }
          return out;
      }
  };

  /* harmony default export */ __webpack_exports__["a"] = (MapServiceCoordSys3D);

  /***/ }),
  /* 100 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_retrieve__ = __webpack_require__(2);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__ = __webpack_require__(1);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_ViewGL__ = __webpack_require__(22);




  /* harmony default export */ __webpack_exports__["a"] = (function (serviceComponentType, ServiceCtor, afterCreate) {

      function resizeMapService3D(mapService3DModel, api) {
          var width = api.getWidth();
          var height = api.getHeight();
          var dpr = api.getDevicePixelRatio();
          this.viewGL.setViewport(0, 0, width, height, dpr);

          this.width = width;
          this.height = height;

          this.altitudeScale = mapService3DModel.get('altitudeScale');

          this.boxHeight = mapService3DModel.get('boxHeight');
          // this.updateTransform();
      }


      function updateService3D(ecModel, api) {

          if (this.model.get('boxHeight') === 'auto') {
              return;
          }

          var altitudeDataExtent = [Infinity, -Infinity];

          ecModel.eachSeries(function (seriesModel) {
              if (seriesModel.coordinateSystem !== this) {
                  return;
              }

              // Get altitude data extent.
              var data = seriesModel.getData();
              var altDim = seriesModel.coordDimToDataDim('alt')[0];
              if (altDim) {
                  // TODO altitiude is in coords of lines.
                  var dataExtent = data.getDataExtent(altDim, true);
                  altitudeDataExtent[0] = Math.min(
                      altitudeDataExtent[0], dataExtent[0]
                  );
                  altitudeDataExtent[1] = Math.max(
                      altitudeDataExtent[1], dataExtent[1]
                  );
              }
          }, this);
          if (altitudeDataExtent && isFinite(altitudeDataExtent[1] - altitudeDataExtent[0])) {
              this.altitudeExtent = altitudeDataExtent;
          }
      }

      return {


          dimensions: ServiceCtor.prototype.dimensions,

          create: function (ecModel, api) {
              var mapService3DList = [];

              ecModel.eachComponent(serviceComponentType, function (mapService3DModel) {
                  var viewGL = mapService3DModel.__viewGL;
                  if (!viewGL) {
                      viewGL = mapService3DModel.__viewGL = new __WEBPACK_IMPORTED_MODULE_2__core_ViewGL__["a" /* default */]();
                      viewGL.setRootNode(new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Node());
                  }

                  var mapService3DCoordSys = new ServiceCtor();
                  mapService3DCoordSys.viewGL = mapService3DModel.__viewGL;
                  // Inject resize
                  mapService3DCoordSys.resize = resizeMapService3D;
                  mapService3DCoordSys.resize(mapService3DModel, api);

                  mapService3DList.push(mapService3DCoordSys);

                  mapService3DModel.coordinateSystem = mapService3DCoordSys;
                  mapService3DCoordSys.model = mapService3DModel;

                  mapService3DCoordSys.update = updateService3D;
              });

              ecModel.eachSeries(function (seriesModel) {
                  if (seriesModel.get('coordinateSystem') === serviceComponentType) {
                      var mapService3DModel = seriesModel.getReferringComponents(serviceComponentType)[0];
                      if (!mapService3DModel) {
                          mapService3DModel = ecModel.getComponent(serviceComponentType);
                      }

                      if (!mapService3DModel) {
                          throw new Error(serviceComponentType + ' "' + __WEBPACK_IMPORTED_MODULE_0__util_retrieve__["a" /* default */].firstNotNull(
                              seriesModel.get(serviceComponentType + 'Index'),
                              seriesModel.get(serviceComponentType + 'Id'),
                              0
                          ) + '" not found');
                      }

                      seriesModel.coordinateSystem = mapService3DModel.coordinateSystem;
                  }
              });

              afterCreate && afterCreate(mapService3DList, ecModel, api);

              return mapService3DList;
          }
      };
  });


  /***/ }),
  /* 101 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("\n@export ecgl.displayShadow.vertex\n\n@import ecgl.common.transformUniforms\n\n@import ecgl.common.uv.header\n\n@import ecgl.common.attributes\n\nvarying vec3 v_WorldPosition;\n\nvarying vec3 v_Normal;\n\nvoid main()\n{\n @import ecgl.common.uv.main\n v_Normal = normalize((worldInverseTranspose * vec4(normal, 0.0)).xyz);\n\n v_WorldPosition = (world * vec4(position, 1.0)).xyz;\n gl_Position = worldViewProjection * vec4(position, 1.0);\n}\n\n@end\n\n\n@export ecgl.displayShadow.fragment\n\n@import ecgl.common.uv.fragmentHeader\n\nvarying vec3 v_Normal;\nvarying vec3 v_WorldPosition;\n\nuniform float roughness: 0.2;\n\n#ifdef DIRECTIONAL_LIGHT_COUNT\n@import clay.header.directional_light\n#endif\n\n@import ecgl.common.ssaoMap.header\n\n@import clay.plugin.compute_shadow_map\n\nvoid main()\n{\n float shadow = 1.0;\n\n @import ecgl.common.ssaoMap.main\n\n#if defined(DIRECTIONAL_LIGHT_COUNT) && defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT)\n float shadowContribsDir[DIRECTIONAL_LIGHT_COUNT];\n if(shadowEnabled)\n {\n computeShadowOfDirectionalLights(v_WorldPosition, shadowContribsDir);\n }\n for (int i = 0; i < DIRECTIONAL_LIGHT_COUNT; i++) {\n shadow = min(shadow, shadowContribsDir[i] * 0.5 + 0.5);\n }\n#endif\n\n shadow *= 0.5 + ao * 0.5;\n shadow = clamp(shadow, 0.0, 1.0);\n\n gl_FragColor = vec4(vec3(0.0), 1.0 - shadow);\n}\n\n@end");


  /***/ }),
  /* 102 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_zrender_lib_core_matrix__ = __webpack_require__(264);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_zrender_lib_core_matrix___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_zrender_lib_core_matrix__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_zrender_lib_core_vector__ = __webpack_require__(265);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_zrender_lib_core_vector___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_zrender_lib_core_vector__);




  function GLViewHelper(viewGL) {
      this.viewGL = viewGL;
  }

  GLViewHelper.prototype.reset = function (seriesModel, api) {
      this._updateCamera(api.getWidth(), api.getHeight(), api.getDevicePixelRatio());
      this._viewTransform = __WEBPACK_IMPORTED_MODULE_0_zrender_lib_core_matrix___default.a.create();
      this.updateTransform(seriesModel, api);
  };

  GLViewHelper.prototype.updateTransform = function (seriesModel, api) {
      var coordinateSystem = seriesModel.coordinateSystem;

      if (coordinateSystem.getRoamTransform) {

          __WEBPACK_IMPORTED_MODULE_0_zrender_lib_core_matrix___default.a.invert(this._viewTransform, coordinateSystem.getRoamTransform());

          this._setCameraTransform(this._viewTransform);

          api.getZr().refresh();
      }
  };

  // Reimplement the dataToPoint of coordinate system.
  // Remove the effect of pan/zoom transform
  GLViewHelper.prototype.dataToPoint = function (coordSys, data, pt) {
      pt = coordSys.dataToPoint(data, null, pt);
      var viewTransform = this._viewTransform;
      if (viewTransform) {
          __WEBPACK_IMPORTED_MODULE_1_zrender_lib_core_vector___default.a.applyTransform(pt, pt, viewTransform);
      }
  };

  /**
   * Remove transform info in point.
   */
  GLViewHelper.prototype.removeTransformInPoint = function (pt) {
      if (this._viewTransform) {
          __WEBPACK_IMPORTED_MODULE_1_zrender_lib_core_vector___default.a.applyTransform(pt, pt, this._viewTransform);
      }
      return pt;
  };

  /**
   * Return number
   */
  GLViewHelper.prototype.getZoom = function () {
      if (this._viewTransform) {
          var m = this._viewTransform;
          return 1 / Math.max(
              Math.sqrt(m[0] * m[0] + m[1] * m[1]),
              Math.sqrt(m[2] * m[2] + m[3] * m[3])
          );
      }
      return 1;
  };

  GLViewHelper.prototype._setCameraTransform = function (m) {
      var camera = this.viewGL.camera;
      camera.position.set(m[4], m[5], 0);
      camera.scale.set(
          Math.sqrt(m[0] * m[0] + m[1] * m[1]),
          Math.sqrt(m[2] * m[2] + m[3] * m[3]),
          1
      );
  };

  GLViewHelper.prototype._updateCamera = function (width, height, dpr) {
      // TODO, left, top, right, bottom
      this.viewGL.setViewport(0, 0, width, height, dpr);
      var camera = this.viewGL.camera;
      camera.left = camera.top = 0;
      camera.bottom = height;
      camera.right = width;
      camera.near = 0;
      camera.far = 100;
  };

  /* harmony default export */ __webpack_exports__["a"] = (GLViewHelper);

  /***/ }),
  /* 103 */
  /***/ (function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(global) {
  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  // (1) The code `if (__DEV__) ...` can be removed by build tool.
  // (2) If intend to use `__DEV__`, this module should be imported. Use a global
  // variable `__DEV__` may cause that miss the declaration (see #6535), or the
  // declaration is behind of the using position (for example in `Model.extent`,
  // And tools like rollup can not analysis the dependency if not import).
  var dev; // In browser

  if (typeof window !== 'undefined') {
    dev = window.__DEV__;
  } // In node
  else if (typeof global !== 'undefined') {
      dev = global.__DEV__;
    }

  if (typeof dev === 'undefined') {
    dev = true;
  }

  var __DEV__ = dev;
  exports.__DEV__ = __DEV__;
  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(67)));

  /***/ }),
  /* 104 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_claygl_src_Geometry__ = __webpack_require__(14);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__dynamicConvertMixin__ = __webpack_require__(39);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_claygl_src_dep_glmatrix__ = __webpack_require__(6);
  /**
   * Lines geometry
   * Use screen space projected lines lineWidth > MAX_LINE_WIDTH
   * https://mattdesl.svbtle.com/drawing-lines-is-hard
   * @module echarts-gl/util/geometry/LinesGeometry
   * @author Yi Shen(http://github.com/pissang)
   */





  var vec2 = __WEBPACK_IMPORTED_MODULE_3_claygl_src_dep_glmatrix__["a" /* default */].vec2;

  // var CURVE_RECURSION_LIMIT = 8;
  // var CURVE_COLLINEAR_EPSILON = 40;

  var sampleLinePoints = [[0, 0], [1, 1]];
  /**
   * @constructor
   * @alias module:echarts-gl/util/geometry/LinesGeometry
   * @extends clay.Geometry
   */

  var LinesGeometry = __WEBPACK_IMPORTED_MODULE_0_claygl_src_Geometry__["a" /* default */].extend(function () {
      return {

          segmentScale: 4,

          dynamic: true,
          /**
           * Need to use mesh to expand lines if lineWidth > MAX_LINE_WIDTH
           */
          useNativeLine: true,

          attributes: {
              position: new __WEBPACK_IMPORTED_MODULE_0_claygl_src_Geometry__["a" /* default */].Attribute('position', 'float', 2, 'POSITION'),
              normal: new __WEBPACK_IMPORTED_MODULE_0_claygl_src_Geometry__["a" /* default */].Attribute('normal', 'float', 2),
              offset: new __WEBPACK_IMPORTED_MODULE_0_claygl_src_Geometry__["a" /* default */].Attribute('offset', 'float', 1),
              color: new __WEBPACK_IMPORTED_MODULE_0_claygl_src_Geometry__["a" /* default */].Attribute('color', 'float', 4, 'COLOR')
          }
      };
  },
  /** @lends module: echarts-gl/util/geometry/LinesGeometry.prototype */
  {

      /**
       * Reset offset
       */
      resetOffset: function () {
          this._vertexOffset = 0;
          this._faceOffset = 0;

          this._itemVertexOffsets = [];
      },

      /**
       * @param {number} nVertex
       */
      setVertexCount: function (nVertex) {
          var attributes = this.attributes;
          if (this.vertexCount !== nVertex) {
              attributes.position.init(nVertex);
              attributes.color.init(nVertex);

              if (!this.useNativeLine) {
                  attributes.offset.init(nVertex);
                  attributes.normal.init(nVertex);
              }

              if (nVertex > 0xffff) {
                  if (this.indices instanceof Uint16Array) {
                      this.indices = new Uint32Array(this.indices);
                  }
              }
              else {
                  if (this.indices instanceof Uint32Array) {
                      this.indices = new Uint16Array(this.indices);
                  }
              }
          }
      },

      /**
       * @param {number} nTriangle
       */
      setTriangleCount: function (nTriangle) {
          if (this.triangleCount !== nTriangle) {
              if (nTriangle === 0) {
                  this.indices = null;
              }
              else {
                  this.indices = this.vertexCount > 0xffff ? new Uint32Array(nTriangle * 3) : new Uint16Array(nTriangle * 3);
              }
          }
      },

      _getCubicCurveApproxStep: function (p0, p1, p2, p3) {
          var len = vec2.dist(p0, p1) + vec2.dist(p2, p1) + vec2.dist(p3, p2);
          var step = 1 / (len + 1) * this.segmentScale;
          return step;
      },

      /**
       * Get vertex count of cubic curve
       * @param {Array.<number>} p0
       * @param {Array.<number>} p1
       * @param {Array.<number>} p2
       * @param {Array.<number>} p3
       * @return number
       */
      getCubicCurveVertexCount: function (p0, p1, p2, p3) {
          var step = this._getCubicCurveApproxStep(p0, p1, p2, p3);
          var segCount = Math.ceil(1 / step);
          if (!this.useNativeLine) {
              return segCount * 2 + 2;
          }
          else {
              return segCount * 2;
          }
      },

      /**
       * Get face count of cubic curve
       * @param {Array.<number>} p0
       * @param {Array.<number>} p1
       * @param {Array.<number>} p2
       * @param {Array.<number>} p3
       * @return number
       */
      getCubicCurveTriangleCount: function (p0, p1, p2, p3) {
          var step = this._getCubicCurveApproxStep(p0, p1, p2, p3);
          var segCount = Math.ceil(1 / step);
          if (!this.useNativeLine) {
              return segCount * 2;
          }
          else {
              return 0;
          }
      },

      /**
       * Get vertex count of line
       * @return {number}
       */
      getLineVertexCount: function () {
          return this.getPolylineVertexCount(sampleLinePoints);
      },

      /**
       * Get face count of line
       * @return {number}
       */
      getLineTriangleCount: function () {
          return this.getPolylineTriangleCount(sampleLinePoints);
      },

      /**
       * Get how many vertices will polyline take.
       * @type {number|Array} points Can be a 1d/2d list of points, or a number of points amount.
       * @return {number}
       */
      getPolylineVertexCount: function (points) {
          var pointsLen;
          if (typeof points === 'number') {
              pointsLen = points;
          }
          else {
              var is2DArray = typeof points[0] !== 'number';
              pointsLen = is2DArray ? points.length : (points.length / 2);
          }
          return !this.useNativeLine ? ((pointsLen - 1) * 2 + 2) : (pointsLen - 1) * 2;
      },

      /**
       * Get how many triangles will polyline take.
       * @type {number|Array} points Can be a 1d/2d list of points, or a number of points amount.
       * @return {number}
       */
      getPolylineTriangleCount: function (points) {
          var pointsLen;
          if (typeof points === 'number') {
              pointsLen = points;
          }
          else {
              var is2DArray = typeof points[0] !== 'number';
              pointsLen = is2DArray ? points.length : (points.length / 2);
          }
          return !this.useNativeLine ? (pointsLen - 1) * 2 : 0;
      },

      /**
       * Add a cubic curve
       * @param {Array.<number>} p0
       * @param {Array.<number>} p1
       * @param {Array.<number>} p2
       * @param {Array.<number>} p3
       * @param {Array.<number>} color
       * @param {number} [lineWidth=1]
       */
      addCubicCurve: function (p0, p1, p2, p3, color, lineWidth) {
          if (lineWidth == null) {
              lineWidth = 1;
          }
          // incremental interpolation
          // http://antigrain.com/research/bezier_interpolation/index.html#PAGE_BEZIER_INTERPOLATION
          var x0 = p0[0], y0 = p0[1];
          var x1 = p1[0], y1 = p1[1];
          var x2 = p2[0], y2 = p2[1];
          var x3 = p3[0], y3 = p3[1];

          var step = this._getCubicCurveApproxStep(p0, p1, p2, p3);

          var step2 = step * step;
          var step3 = step2 * step;

          var pre1 = 3.0 * step;
          var pre2 = 3.0 * step2;
          var pre4 = 6.0 * step2;
          var pre5 = 6.0 * step3;

          var tmp1x = x0 - x1 * 2.0 + x2;
          var tmp1y = y0 - y1 * 2.0 + y2;

          var tmp2x = (x1 - x2) * 3.0 - x0 + x3;
          var tmp2y = (y1 - y2) * 3.0 - y0 + y3;

          var fx = x0;
          var fy = y0;

          var dfx = (x1 - x0) * pre1 + tmp1x * pre2 + tmp2x * step3;
          var dfy = (y1 - y0) * pre1 + tmp1y * pre2 + tmp2y * step3;

          var ddfx = tmp1x * pre4 + tmp2x * pre5;
          var ddfy = tmp1y * pre4 + tmp2y * pre5;

          var dddfx = tmp2x * pre5;
          var dddfy = tmp2y * pre5;

          var t = 0;

          var k = 0;
          var segCount = Math.ceil(1 / step);

          var points = new Float32Array((segCount + 1) * 3);
          var points = [];
          var offset = 0;
          for (var k = 0; k < segCount + 1; k++) {
              points[offset++] = fx;
              points[offset++] = fy;

              fx += dfx; fy += dfy;
              dfx += ddfx; dfy += ddfy;
              ddfx += dddfx; ddfy += dddfy;
              t += step;

              if (t > 1) {
                  fx = dfx > 0 ? Math.min(fx, x3) : Math.max(fx, x3);
                  fy = dfy > 0 ? Math.min(fy, y3) : Math.max(fy, y3);
              }
          }

          this.addPolyline(points, color, lineWidth);
      },

      /**
       * Add a straight line
       * @param {Array.<number>} p0
       * @param {Array.<number>} p1
       * @param {Array.<number>} color
       * @param {number} [lineWidth=1]
       */
      addLine: function (p0, p1, color, lineWidth) {
          this.addPolyline([p0, p1], color, lineWidth);
      },

      /**
       * Add a straight line
       * @param {Array.<Array> | Array.<number>} points
       * @param {Array.<number> | Array.<Array>} color
       * @param {number} [lineWidth=1]
       * @param {number} [arrayOffset=0]
       * @param {number} [pointsCount] Default to be amount of points in the first argument
       */
      addPolyline: (function () {
          var dirA = vec2.create();
          var dirB = vec2.create();
          var normal = vec2.create();
          var tangent = vec2.create();
          var point = [], nextPoint = [], prevPoint = [];
          return function (points, color, lineWidth, arrayOffset, pointsCount) {
              if (!points.length) {
                  return;
              }
              var is2DArray = typeof points[0] !== 'number';
              if (pointsCount == null) {
                  pointsCount = is2DArray ? points.length : points.length / 2;
              }
              if (pointsCount < 2) {
                  return;
              }
              if (arrayOffset == null) {
                  arrayOffset = 0;
              }
              if (lineWidth == null) {
                  lineWidth = 1;
              }

              this._itemVertexOffsets.push(this._vertexOffset);

              var notSharingColor = is2DArray
                  ? typeof color[0] !== 'number'
                  : color.length / 4 === pointsCount;

              var positionAttr = this.attributes.position;
              var colorAttr = this.attributes.color;
              var offsetAttr = this.attributes.offset;
              var normalAttr = this.attributes.normal;
              var indices = this.indices;

              var vertexOffset = this._vertexOffset;
              var pointColor;
              for (var k = 0; k < pointsCount; k++) {
                  if (is2DArray) {
                      point = points[k + arrayOffset];
                      if (notSharingColor) {
                          pointColor = color[k + arrayOffset];
                      }
                      else {
                          pointColor = color;
                      }
                  }
                  else {
                      var k2 = k * 2 + arrayOffset;
                      point = point || [];
                      point[0] = points[k2];
                      point[1] = points[k2 + 1];

                      if (notSharingColor) {
                          var k4 = k * 4 + arrayOffset;
                          pointColor = pointColor || [];
                          pointColor[0] = color[k4];
                          pointColor[1] = color[k4 + 1];
                          pointColor[2] = color[k4 + 2];
                          pointColor[3] = color[k4 + 3];
                      }
                      else {
                          pointColor = color;
                      }
                  }
                  if (!this.useNativeLine) {
                      var offset;
                      if (k < pointsCount - 1) {
                          if (is2DArray) {
                              vec2.copy(nextPoint, points[k + 1]);
                          }
                          else {
                              var k2 = (k + 1) * 2 + arrayOffset;
                              nextPoint = nextPoint || [];
                              nextPoint[0] = points[k2];
                              nextPoint[1] = points[k2 + 1];
                          }
                          // TODO In case dir is (0, 0)
                          // TODO miterLimit
                          if (k > 0) {
                              vec2.sub(dirA, point, prevPoint);
                              vec2.sub(dirB, nextPoint, point);
                              vec2.normalize(dirA, dirA);
                              vec2.normalize(dirB, dirB);
                              vec2.add(tangent, dirA, dirB);
                              vec2.normalize(tangent, tangent);
                              var miter = lineWidth / 2 * Math.min(1 / vec2.dot(dirA, tangent), 2);
                              normal[0] = -tangent[1];
                              normal[1] = tangent[0];

                              offset = miter;
                          }
                          else {
                              vec2.sub(dirA, nextPoint, point);
                              vec2.normalize(dirA, dirA);

                              normal[0] = -dirA[1];
                              normal[1] = dirA[0];

                              offset = lineWidth / 2;
                          }

                      }
                      else {
                          vec2.sub(dirA, point, prevPoint);
                          vec2.normalize(dirA, dirA);

                          normal[0] = -dirA[1];
                          normal[1] = dirA[0];

                          offset = lineWidth / 2;
                      }
                      normalAttr.set(vertexOffset, normal);
                      normalAttr.set(vertexOffset + 1, normal);
                      offsetAttr.set(vertexOffset, offset);
                      offsetAttr.set(vertexOffset + 1, -offset);

                      vec2.copy(prevPoint, point);

                      positionAttr.set(vertexOffset, point);
                      positionAttr.set(vertexOffset + 1, point);

                      colorAttr.set(vertexOffset, pointColor);
                      colorAttr.set(vertexOffset + 1, pointColor);

                      vertexOffset += 2;
                  }
                  else {
                      if (k > 1) {
                          positionAttr.copy(vertexOffset, vertexOffset - 1);
                          colorAttr.copy(vertexOffset, vertexOffset - 1);
                          vertexOffset++;
                      }
                  }

                  if (!this.useNativeLine) {
                      if (k > 0) {
                          var idx3 = this._faceOffset * 3;
                          var indices = this.indices;
                          // 0-----2
                          // 1-----3
                          // 0->1->2, 1->3->2
                          indices[idx3] = vertexOffset - 4;
                          indices[idx3 + 1] = vertexOffset - 3;
                          indices[idx3 + 2] = vertexOffset - 2;

                          indices[idx3 + 3] = vertexOffset - 3;
                          indices[idx3 + 4] = vertexOffset - 1;
                          indices[idx3 + 5] = vertexOffset - 2;

                          this._faceOffset += 2;
                      }
                  }
                  else {
                      colorAttr.set(vertexOffset, pointColor);
                      positionAttr.set(vertexOffset, point);
                      vertexOffset++;
                  }
              }

              this._vertexOffset = vertexOffset;
          };
      })(),

      /**
       * Set color of single line.
       */
      setItemColor: function (idx, color) {
          var startOffset = this._itemVertexOffsets[idx];
          var endOffset = idx < this._itemVertexOffsets.length - 1 ? this._itemVertexOffsets[idx + 1] : this._vertexOffset;

          for (var i = startOffset; i < endOffset; i++) {
              this.attributes.color.set(i, color);
          }
          this.dirty('color');
      }
  });

  __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts___default.a.util.defaults(LinesGeometry.prototype, __WEBPACK_IMPORTED_MODULE_2__dynamicConvertMixin__["a" /* default */]);

  /* harmony default export */ __webpack_exports__["a"] = (LinesGeometry);

  /***/ }),
  /* 105 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_echarts_gl__ = __webpack_require__(106);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_component_grid3D__ = __webpack_require__(153);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_component_geo3D__ = __webpack_require__(203);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_component_globe__ = __webpack_require__(209);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_component_mapbox3D__ = __webpack_require__(215);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_component_maptalks3D__ = __webpack_require__(221);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__src_chart_bar3D__ = __webpack_require__(227);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__src_chart_line3D__ = __webpack_require__(234);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__src_chart_scatter3D__ = __webpack_require__(238);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__src_chart_lines3D__ = __webpack_require__(245);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__src_chart_polygons3D__ = __webpack_require__(251);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__src_chart_surface__ = __webpack_require__(254);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__src_chart_map3D__ = __webpack_require__(258);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__src_chart_scatterGL__ = __webpack_require__(261);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__src_chart_graphGL__ = __webpack_require__(266);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__src_chart_flowGL__ = __webpack_require__(279);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__src_chart_linesGL__ = __webpack_require__(285);





















  /***/ }),
  /* 106 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_claygl_src_version__ = __webpack_require__(107);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_LayerGL__ = __webpack_require__(108);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__preprocessor_backwardCompat__ = __webpack_require__(152);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_graphicGL__ = __webpack_require__(1);
  /**
   * echarts-gl
   * Extension pack of ECharts providing 3d plots and globe visualization
   *
   * Copyright (c) 2014, echarts-gl
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * * Redistributions of source code must retain the above copyright notice, this
   *   list of conditions and the following disclaimer.
   *
   * * Redistributions in binary form must reproduce the above copyright notice,
   *   this list of conditions and the following disclaimer in the documentation
   *   and/or other materials provided with the distribution.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   */

  /**
   * @module echarts-gl
   * @author Yi Shen(http://github.com/pissang)
   */

  // PENDING Use a single canvas as layer or use image element?
  var echartsGl = {
      version: '1.1.2',
      dependencies: {
          echarts: '4.1.0',
          claygl: '1.2.1'
      }
  };






  // Version checking
  var deps = echartsGl.dependencies;
  function versionTooOldMsg(name) {
      throw new Error(
          name + ' version is too old, needs ' + deps[name] + ' or higher'
      );
  }
  function checkVersion(version, name) {
      if ((version.replace('.', '') - 0) < (deps[name].replace('.', '') - 0)) {
          versionTooOldMsg(name);
      }
      console.log('Loaded ' + name + ', version ' + version);
  }
  checkVersion(__WEBPACK_IMPORTED_MODULE_1_claygl_src_version__["a" /* default */], 'claygl');
  checkVersion(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.version, 'echarts');

  function EChartsGL (zr) {
      this._layers = {};

      this._zr = zr;
  }

  EChartsGL.prototype.update = function (ecModel, api) {
      var self = this;
      var zr = api.getZr();

      if (!zr.getWidth() || !zr.getHeight()) {
          console.warn('Dom has no width or height');
          return;
      }

      function getLayerGL(model) {
          var zlevel;
          // Host on coordinate system.
          if (model.coordinateSystem && model.coordinateSystem.model) {
              zlevel = model.get('zlevel');
          }
          else {
              zlevel = model.get('zlevel');
          }

          var layers = self._layers;
          var layerGL = layers[zlevel];
          if (!layerGL) {
              layerGL = layers[zlevel] = new __WEBPACK_IMPORTED_MODULE_2__core_LayerGL__["a" /* default */]('gl-' + zlevel, zr);

              if (zr.painter.isSingleCanvas()) {
                  layerGL.virtual = true;
                  // If container is canvas, use image to represent LayerGL
                  // FIXME Performance
                  var img = new __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.graphic.Image({
                      z: 1e4,
                      style: {
                          image: layerGL.renderer.canvas
                      },
                      silent: true
                  });
                  layerGL.__hostImage = img;

                  zr.add(img);
              }

              zr.painter.insertLayer(zlevel, layerGL);
          }
          if (layerGL.__hostImage) {
              layerGL.__hostImage.setStyle({
                  width: layerGL.renderer.getWidth(),
                  height: layerGL.renderer.getHeight()
              });
          }

          return layerGL;
      }

      function setSilent(groupGL, silent) {
          if (groupGL) {
              groupGL.traverse(function (mesh) {
                  if (mesh.isRenderable && mesh.isRenderable()) {
                      mesh.ignorePicking = mesh.$ignorePicking != null
                          ? mesh.$ignorePicking : silent;
                  }
              });
          }
      }

      for (var zlevel in this._layers) {
          this._layers[zlevel].removeViewsAll();
      }

      ecModel.eachComponent(function (componentType, componentModel) {
          if (componentType !== 'series') {
              var view = api.getViewOfComponentModel(componentModel);
              var coordSys = componentModel.coordinateSystem;
              // View with __ecgl__ flag is a echarts-gl component.
              if (view.__ecgl__) {
                  var viewGL;
                  if (coordSys) {
                      if (!coordSys.viewGL) {
                          console.error('Can\'t find viewGL in coordinateSystem of component ' + componentModel.id);
                          return;
                      }
                      viewGL = coordSys.viewGL;
                  }
                  else {
                      if (!componentModel.viewGL) {
                          console.error('Can\'t find viewGL of component ' + componentModel.id);
                          return;
                      }
                      viewGL = coordSys.viewGL;
                  }

                  var viewGL = coordSys.viewGL;
                  var layerGL = getLayerGL(componentModel);

                  layerGL.addView(viewGL);

                  view.afterRender && view.afterRender(
                      componentModel, ecModel, api, layerGL
                  );

                  setSilent(view.groupGL, componentModel.get('silent'));
              }
          }
      });

      ecModel.eachSeries(function (seriesModel) {
          var chartView = api.getViewOfSeriesModel(seriesModel);
          var coordSys = seriesModel.coordinateSystem;
          if (chartView.__ecgl__) {
              if ((coordSys && !coordSys.viewGL) && !chartView.viewGL) {
                  console.error('Can\'t find viewGL of series ' + chartView.id);
                  return;
              }
              var viewGL = (coordSys && coordSys.viewGL) || chartView.viewGL;
              // TODO Check zlevel not same with component of coordinate system ?
              var layerGL = getLayerGL(seriesModel);
              layerGL.addView(viewGL);

              chartView.afterRender && chartView.afterRender(
                  seriesModel, ecModel, api, layerGL
              );

              setSilent(chartView.groupGL, seriesModel.get('silent'));
          }
      });
  };

  // Hack original getRenderedCanvas. Will removed after new echarts released
  // TODO
  var oldInit = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.init;
  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.init = function () {
      var chart = oldInit.apply(this, arguments);
      chart.getZr().painter.getRenderedCanvas = function (opts) {
          opts = opts || {};
          if (this._singleCanvas) {
              return this._layers[0].dom;
          }

          var canvas = document.createElement('canvas');
          var dpr = opts.pixelRatio || this.dpr;
          canvas.width = this.getWidth() * dpr;
          canvas.height = this.getHeight() * dpr;
          var ctx = canvas.getContext('2d');
          ctx.dpr = dpr;

          ctx.clearRect(0, 0, canvas.width, canvas.height);
          if (opts.backgroundColor) {
              ctx.fillStyle = opts.backgroundColor;
              ctx.fillRect(0, 0, canvas.width, canvas.height);
          }

          var displayList = this.storage.getDisplayList(true);

          var scope = {};
          var zlevel;

          var self = this;
          function findAndDrawOtherLayer(smaller, larger) {
              var zlevelList = self._zlevelList;
              if (smaller == null) {
                  smaller = -Infinity;
              }
              var intermediateLayer;
              for (var i = 0; i < zlevelList.length; i++) {
                  var z = zlevelList[i];
                  var layer = self._layers[z];
                  if (!layer.__builtin__ && z > smaller && z < larger) {
                      intermediateLayer = layer;
                      break;
                  }
              }
              if (intermediateLayer && intermediateLayer.renderToCanvas) {
                  ctx.save();
                  intermediateLayer.renderToCanvas(ctx);
                  ctx.restore();
              }
          }
          var layer = {
              ctx: ctx
          };
          for (var i = 0; i < displayList.length; i++) {
              var el = displayList[i];

              if (el.zlevel !== zlevel) {
                  findAndDrawOtherLayer(zlevel, el.zlevel);
                  zlevel = el.zlevel;
              }
              this._doPaintEl(el, layer, true, scope);
          }

          findAndDrawOtherLayer(zlevel, Infinity);

          return canvas;
      };
      return chart;
  };


  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerPostUpdate(function (ecModel, api) {
      var zr = api.getZr();

      var egl = zr.__egl = zr.__egl || new EChartsGL(zr);

      egl.update(ecModel, api);
  });

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerPreprocessor(__WEBPACK_IMPORTED_MODULE_3__preprocessor_backwardCompat__["a" /* default */]);

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.graphicGL = __WEBPACK_IMPORTED_MODULE_4__util_graphicGL__["a" /* default */];

  /***/ }),
  /* 107 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /**
   * @name clay.version
   */
  /* harmony default export */ __webpack_exports__["a"] = ('1.3.0');


  /***/ }),
  /* 108 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_claygl_src_Renderer__ = __webpack_require__(52);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_claygl_src_picking_RayPicking__ = __webpack_require__(116);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_claygl_src_Texture__ = __webpack_require__(4);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_graphicGL__ = __webpack_require__(1);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_claygl_src_core_mixin_notifier__ = __webpack_require__(53);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_zrender_lib_animation_requestAnimationFrame__ = __webpack_require__(81);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_zrender_lib_animation_requestAnimationFrame___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_zrender_lib_animation_requestAnimationFrame__);
  /**
   * Provide WebGL layer to zrender. Which is rendered on top of clay.
   *
   *
   * Relationship between zrender, LayerGL(renderer) and ViewGL(Scene, Camera, Viewport)
   *           zrender
   *           /     \
   *      LayerGL   LayerGL
   *    (renderer) (renderer)
   *      /     \
   *  ViewGL   ViewGL
   *
   * @module echarts-gl/core/LayerGL
   * @author Yi Shen(http://github.com/pissang)
   */







  // PENDING, clay. notifier is same with zrender Eventful



  /**
   * @constructor
   * @alias module:echarts-gl/core/LayerGL
   * @param {string} id Layer ID
   * @param {module:zrender/ZRender} zr
   */
  var LayerGL = function (id, zr) {

      /**
       * Layer ID
       * @type {string}
       */
      this.id = id;

      /**
       * @type {module:zrender/ZRender}
       */
      this.zr = zr;

      /**
       * @type {clay.Renderer}
       */
      try {
          this.renderer = new __WEBPACK_IMPORTED_MODULE_1_claygl_src_Renderer__["a" /* default */]({
              clearBit: 0,
              devicePixelRatio: zr.painter.dpr,
              preserveDrawingBuffer: true,
              // PENDING
              premultipliedAlpha: true
          });
          this.renderer.resize(zr.painter.getWidth(), zr.painter.getHeight());
      }
      catch (e) {
          this.renderer = null;
          this.dom = document.createElement('div');
          this.dom.style.cssText = 'position:absolute; left: 0; top: 0; right: 0; bottom: 0;';
          this.dom.className = 'ecgl-nowebgl';
          this.dom.innerHTML = 'Sorry, your browser does not support WebGL';

          console.error(e);
          return;
      }

      this.onglobalout = this.onglobalout.bind(this);
      zr.on('globalout', this.onglobalout);

      /**
       * Canvas dom for webgl rendering
       * @type {HTMLCanvasElement}
       */
      this.dom = this.renderer.canvas;
      var style = this.dom.style;
      style.position = 'absolute';
      style.left = '0';
      style.top = '0';

      /**
       * @type {Array.<clay.Scene>}
       */
      this.views = [];

      this._picking = new __WEBPACK_IMPORTED_MODULE_2_claygl_src_picking_RayPicking__["a" /* default */]({
          renderer: this.renderer
      });

      this._viewsToDispose = [];

      /**
       * Current accumulating id.
       */
      this._accumulatingId = 0;

      this._zrEventProxy = new __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.graphic.Rect({
          shape: {x: -1, y: -1, width: 2, height: 2},
          // FIXME Better solution.
          __isGLToZRProxy: true
      });

      this._backgroundColor = null;
  };

  /**
   * @param {module:echarts-gl/core/ViewGL} view
   */
  LayerGL.prototype.addView = function (view) {
      if (view.layer === this) {
          return;
      }
      // If needs to dispose in this layer. unmark it.
      var idx = this._viewsToDispose.indexOf(view);
      if (idx >= 0) {
          this._viewsToDispose.splice(idx, 1);
      }

      this.views.push(view);

      view.layer = this;

      var zr = this.zr;
      view.scene.traverse(function (node) {
          node.__zr = zr;
          if (node.addAnimatorsToZr) {
              node.addAnimatorsToZr(zr);
          }
      });
  };

  function removeFromZr(node) {
      var zr = node.__zr;
      node.__zr = null;
      if (zr && node.removeAnimatorsFromZr) {
          node.removeAnimatorsFromZr(zr);
      }
  }
  /**
   * @param {module:echarts-gl/core/ViewGL} view
   */
  LayerGL.prototype.removeView = function (view) {
      if (view.layer !== this) {
          return;
      }

      var idx = this.views.indexOf(view);
      if (idx >= 0) {
          this.views.splice(idx, 1);
          view.scene.traverse(removeFromZr, this);
          view.layer = null;

          // Mark to dispose in this layer.
          this._viewsToDispose.push(view);
      }
  };

  /**
   * Remove all views
   */
  LayerGL.prototype.removeViewsAll = function () {
      this.views.forEach(function (view) {
          view.scene.traverse(removeFromZr, this);
          view.layer = null;

          // Mark to dispose in this layer.
          this._viewsToDispose.push(view);
      }, this);

      this.views.length = 0;

  };

  /**
   * Resize the canvas and viewport, will be invoked by zrender
   * @param  {number} width
   * @param  {number} height
   */
  LayerGL.prototype.resize = function (width, height) {
      var renderer = this.renderer;
      renderer.resize(width, height);
  };

  /**
   * Clear color and depth
   * @return {[type]} [description]
   */
  LayerGL.prototype.clear = function () {
      var gl = this.renderer.gl;
      var clearColor = this._backgroundColor || [0, 0, 0, 0];
      gl.clearColor(clearColor[0], clearColor[1], clearColor[2], clearColor[3]);
      gl.depthMask(true);
      gl.colorMask(true, true, true, true);
      gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT);
  };

  /**
   * Clear depth
   */
  LayerGL.prototype.clearDepth = function () {
      var gl = this.renderer.gl;
      gl.clear(gl.DEPTH_BUFFER_BIT);
  };

  /**
   * Clear color
   */
  LayerGL.prototype.clearColor = function () {
      var gl = this.renderer.gl;
      gl.clearColor(0, 0, 0, 0);
      gl.clear(gl.COLOR_BUFFER_BIT);
  };

  /**
   * Mark layer to refresh next tick
   */
  LayerGL.prototype.needsRefresh = function () {
      this.zr.refresh();
  };

  /**
   * Refresh the layer, will be invoked by zrender
   */
  LayerGL.prototype.refresh = function (bgColor) {

      this._backgroundColor = bgColor ? __WEBPACK_IMPORTED_MODULE_4__util_graphicGL__["a" /* default */].parseColor(bgColor) : [0, 0, 0, 0];
      this.renderer.clearColor = this._backgroundColor;

      for (var i = 0; i < this.views.length; i++) {
          this.views[i].prepareRender(this.renderer);
      }

      this._doRender(false);

      // Auto dispose unused resources on GPU, like program(shader), texture, geometry(buffers)
      this._trackAndClean();

      // Dispose trashed views
      for (var i = 0; i < this._viewsToDispose.length; i++) {
          this._viewsToDispose[i].dispose(this.renderer);
      }
      this._viewsToDispose.length = 0;

      this._startAccumulating();
  };


  LayerGL.prototype.renderToCanvas = function (ctx) {
      // PENDING will block the page
      this._startAccumulating(true);
      ctx.drawImage(this.dom, 0, 0, ctx.canvas.width, ctx.canvas.height);
  };

  LayerGL.prototype._doRender = function (accumulating) {
      this.clear();
      this.renderer.saveViewport();
      for (var i = 0; i < this.views.length; i++) {
          this.views[i].render(this.renderer, accumulating);
      }
      this.renderer.restoreViewport();
  };

  /**
   * Stop accumulating
   */
  LayerGL.prototype._stopAccumulating = function () {
      this._accumulatingId = 0;
      clearTimeout(this._accumulatingTimeout);
  };

  var accumulatingId = 1;
  /**
   * Start accumulating all the views.
   * Accumulating is for antialising and have more sampling in SSAO
   * @private
   */
  LayerGL.prototype._startAccumulating = function (immediate) {
      var self = this;
      this._stopAccumulating();

      var needsAccumulate = false;
      for (var i = 0; i < this.views.length; i++) {
          needsAccumulate = this.views[i].needsAccumulate() || needsAccumulate;
      }
      if (!needsAccumulate) {
          return;
      }

      function accumulate(id) {
          if (!self._accumulatingId || id !== self._accumulatingId) {
              return;
          }

          var isFinished = true;
          for (var i = 0; i < self.views.length; i++) {
              isFinished = self.views[i].isAccumulateFinished() && needsAccumulate;
          }

          if (!isFinished) {
              self._doRender(true);

              if (immediate) {
                  accumulate(id);
              }
              else {
                  __WEBPACK_IMPORTED_MODULE_6_zrender_lib_animation_requestAnimationFrame___default()(function () {
                      accumulate(id);
                  });
              }
          }
      }

      this._accumulatingId = accumulatingId++;

      if (immediate) {
          accumulate(self._accumulatingId);
      }
      else {
          this._accumulatingTimeout = setTimeout(function () {
              accumulate(self._accumulatingId);
          }, 50);
      }
  };

  LayerGL.prototype._trackAndClean = function () {
      var textureList = [];
      var geometriesList = [];

      // Mark all resources unused;
      if (this._textureList) {
          markUnused(this._textureList);
          markUnused(this._geometriesList);
      }

      for (var i = 0; i < this.views.length; i++) {
          collectResources(this.views[i].scene, textureList, geometriesList);
      }

      // Dispose those unsed resources.
      if (this._textureList) {
          checkAndDispose(this.renderer, this._textureList);
          checkAndDispose(this.renderer, this._geometriesList);
      }

      this._textureList = textureList;
      this._geometriesList = geometriesList;
  };

  function markUnused(resourceList) {
      for (var i = 0; i < resourceList.length; i++) {
          resourceList[i].__used__ = 0;
      }
  }
  function checkAndDispose(renderer, resourceList) {
      for (var i = 0; i < resourceList.length; i++) {
          if (!resourceList[i].__used__) {
              resourceList[i].dispose(renderer);
          }
      }
  }
  function updateUsed(resource, list) {
      resource.__used__ = resource.__used__ || 0;
      resource.__used__++;
      if (resource.__used__ === 1) {
          // Don't push to the list twice.
          list.push(resource);
      }
  }
  function collectResources(scene, textureResourceList, geometryResourceList) {
      var prevMaterial;
      var prevGeometry;
      scene.traverse(function (renderable) {
          if (renderable.isRenderable()) {
              var geometry = renderable.geometry;
              var material = renderable.material;

              // TODO optimize!!
              if (material !== prevMaterial) {
                  var textureUniforms = material.getTextureUniforms();
                  for (var u = 0; u < textureUniforms.length; u++) {
                      var uniformName = textureUniforms[u];
                      var val = material.uniforms[uniformName].value;
                      if (!val) {
                          continue;
                      }
                      if (val instanceof __WEBPACK_IMPORTED_MODULE_3_claygl_src_Texture__["a" /* default */]) {
                          updateUsed(val, textureResourceList);
                      }
                      else if (val instanceof Array) {
                          for (var k = 0; k < val.length; k++) {
                              if (val[k] instanceof __WEBPACK_IMPORTED_MODULE_3_claygl_src_Texture__["a" /* default */]) {
                                  updateUsed(val[k], textureResourceList);
                              }
                          }
                      }
                  }
              }
              if (geometry !== prevGeometry) {
                  updateUsed(geometry, geometryResourceList);
              }

              prevMaterial = material;
              prevGeometry = geometry;
          }
      });

      for (var k = 0; k < scene.lights.length; k++) {
          // Track AmbientCubemap
          if (scene.lights[k].cubemap) {
              updateUsed(scene.lights[k].cubemap, textureResourceList);
          }
      }
  }
  /**
   * Dispose the layer
   */
  LayerGL.prototype.dispose = function () {
      this._stopAccumulating();
      this.renderer.disposeScene(this.scene);

      this.zr.off('globalout', this.onglobalout);
  };

  // Event handlers
  LayerGL.prototype.onmousedown = function (e) {
      if (e.target && e.target.__isGLToZRProxy) {
          return;
      }

      e = e.event;
      var obj = this.pickObject(e.offsetX, e.offsetY);
      if (obj) {
          this._dispatchEvent('mousedown', e, obj);
          this._dispatchDataEvent('mousedown', e, obj);
      }

      this._downX = e.offsetX;
      this._downY = e.offsetY;
  };

  LayerGL.prototype.onmousemove = function (e) {
      if (e.target && e.target.__isGLToZRProxy) {
          return;
      }

      e = e.event;
      var obj = this.pickObject(e.offsetX, e.offsetY);

      var target = obj && obj.target;
      var lastHovered = this._hovered;
      this._hovered = obj;

      if (lastHovered && target !== lastHovered.target) {
          lastHovered.relatedTarget = target;
          this._dispatchEvent('mouseout', e, lastHovered);
          // this._dispatchDataEvent('mouseout', e, lastHovered);

          this.zr.setCursorStyle('default');
      }

      this._dispatchEvent('mousemove', e, obj);

      if (obj) {
          this.zr.setCursorStyle('pointer');

          if (!lastHovered || (target !== lastHovered.target)) {
              this._dispatchEvent('mouseover', e, obj);
              // this._dispatchDataEvent('mouseover', e, obj);
          }
      }

      this._dispatchDataEvent('mousemove', e, obj);
  };

  LayerGL.prototype.onmouseup = function (e) {
      if (e.target && e.target.__isGLToZRProxy) {
          return;
      }

      e = e.event;
      var obj = this.pickObject(e.offsetX, e.offsetY);

      if (obj) {
          this._dispatchEvent('mouseup', e, obj);
          this._dispatchDataEvent('mouseup', e, obj);
      }

      this._upX = e.offsetX;
      this._upY = e.offsetY;
  };

  LayerGL.prototype.onclick = LayerGL.prototype.dblclick = function (e) {
      if (e.target && e.target.__isGLToZRProxy) {
          return;
      }

      // Ignore click event if mouse moved
      var dx = this._upX - this._downX;
      var dy = this._upY - this._downY;
      if (Math.sqrt(dx * dx + dy * dy) > 20) {
          return;
      }

      e = e.event;
      var obj = this.pickObject(e.offsetX, e.offsetY);

      if (obj) {
          this._dispatchEvent(e.type, e, obj);
          this._dispatchDataEvent(e.type, e, obj);
      }

      // Try set depth of field onclick
      var result = this._clickToSetFocusPoint(e);
      if (result) {
          var success = result.view.setDOFFocusOnPoint(result.distance);
          if (success) {
              this.zr.refresh();
          }
      }
  };

  LayerGL.prototype._clickToSetFocusPoint = function (e) {
      var renderer = this.renderer;
      var oldViewport = renderer.viewport;
      for (var i = this.views.length - 1; i >= 0; i--) {
          var viewGL = this.views[i];
          if (viewGL.hasDOF() && viewGL.containPoint(e.offsetX, e.offsetY)) {
              this._picking.scene = viewGL.scene;
              this._picking.camera = viewGL.camera;
              // Only used for picking, renderer.setViewport will also invoke gl.viewport.
              // Set directly, PENDING.
              renderer.viewport = viewGL.viewport;
              var result = this._picking.pick(e.offsetX, e.offsetY, true);
              if (result) {
                  result.view = viewGL;
                  return result;
              }
          }
      }
      renderer.viewport = oldViewport;
  };

  LayerGL.prototype.onglobalout = function (e) {
      var lastHovered = this._hovered;
      if (lastHovered) {
          this._dispatchEvent('mouseout', e, {
              target: lastHovered.target
          });
      }
  };

  LayerGL.prototype.pickObject = function (x, y) {

      var output = [];
      var renderer = this.renderer;
      var oldViewport = renderer.viewport;
      for (var i = 0; i < this.views.length; i++) {
          var viewGL = this.views[i];
          if (viewGL.containPoint(x, y)) {
              this._picking.scene = viewGL.scene;
              this._picking.camera = viewGL.camera;
              // Only used for picking, renderer.setViewport will also invoke gl.viewport.
              // Set directly, PENDING.
              renderer.viewport = viewGL.viewport;
              this._picking.pickAll(x, y, output);
          }
      }
      renderer.viewport = oldViewport;
      output.sort(function (a, b) {
          return a.distance - b.distance;
      });
      return output[0];
  };

  LayerGL.prototype._dispatchEvent = function (eveName, originalEvent, newEvent) {
      if (!newEvent) {
          newEvent = {};
      }
      var current = newEvent.target;

      newEvent.cancelBubble = false;
      newEvent.event = originalEvent;
      newEvent.type = eveName;
      newEvent.offsetX = originalEvent.offsetX;
      newEvent.offsetY = originalEvent.offsetY;

      while (current) {
          current.trigger(eveName, newEvent);
          current = current.getParent();

          if (newEvent.cancelBubble) {
              break;
          }
      }

      this._dispatchToView(eveName, newEvent);
  };

  LayerGL.prototype._dispatchDataEvent = function (eveName, originalEvent, newEvent) {
      var mesh = newEvent && newEvent.target;

      var dataIndex = mesh && mesh.dataIndex;
      var seriesIndex = mesh && mesh.seriesIndex;
      // Custom event data
      var eventData = mesh && mesh.eventData;
      var elChangedInMouseMove = false;

      var eventProxy = this._zrEventProxy;
      eventProxy.position = [originalEvent.offsetX, originalEvent.offsetY];
      eventProxy.update();

      var targetInfo = {
          target: eventProxy
      };
      if (eveName === 'mousemove') {
          if (dataIndex != null) {
              if (dataIndex !== this._lastDataIndex) {
                  if (parseInt(this._lastDataIndex, 10) >= 0) {
                      eventProxy.dataIndex = this._lastDataIndex;
                      eventProxy.seriesIndex = this._lastSeriesIndex;
                      // FIXME May cause double events.
                      this.zr.handler.dispatchToElement(targetInfo, 'mouseout', originalEvent);
                  }
                  elChangedInMouseMove = true;
              }
          }
          else if (eventData != null) {
              if (eventData !== this._lastEventData) {
                  if (this._lastEventData != null) {
                      eventProxy.eventData = this._lastEventData;
                      // FIXME May cause double events.
                      this.zr.handler.dispatchToElement(targetInfo, 'mouseout', originalEvent);
                  }
                  elChangedInMouseMove = true;
              }
          }
          this._lastEventData = eventData;
          this._lastDataIndex = dataIndex;
          this._lastSeriesIndex = seriesIndex;
      }

      eventProxy.eventData = eventData;
      eventProxy.dataIndex = dataIndex;
      eventProxy.seriesIndex = seriesIndex;

      if (eventData != null || (parseInt(dataIndex, 10) >= 0 && parseInt(seriesIndex, 10) >= 0)) {
          this.zr.handler.dispatchToElement(targetInfo, eveName, originalEvent);

          if (elChangedInMouseMove) {
              this.zr.handler.dispatchToElement(targetInfo, 'mouseover', originalEvent);
          }
      }
  };

  LayerGL.prototype._dispatchToView = function (eventName, e) {
      for (var i = 0; i < this.views.length; i++) {
          if (this.views[i].containPoint(e.offsetX, e.offsetY)) {
              this.views[i].trigger(eventName, e);
          }
      }
  };

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.extend(LayerGL.prototype, __WEBPACK_IMPORTED_MODULE_5_claygl_src_core_mixin_notifier__["a" /* default */]);

  /* harmony default export */ __webpack_exports__["a"] = (LayerGL);

  /***/ }),
  /* 109 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /**
   * Extend a sub class from base class
   * @param {object|Function} makeDefaultOpt default option of this sub class, method of the sub can use this.xxx to access this option
   * @param {Function} [initialize] Initialize after the sub class is instantiated
   * @param {Object} [proto] Prototype methods/properties of the sub class
   * @memberOf clay.core.mixin.extend
   * @return {Function}
   */
  function derive(makeDefaultOpt, initialize/*optional*/, proto/*optional*/) {

      if (typeof initialize == 'object') {
          proto = initialize;
          initialize = null;
      }

      var _super = this;

      var propList;
      if (!(makeDefaultOpt instanceof Function)) {
          // Optimize the property iterate if it have been fixed
          propList = [];
          for (var propName in makeDefaultOpt) {
              if (makeDefaultOpt.hasOwnProperty(propName)) {
                  propList.push(propName);
              }
          }
      }

      var sub = function(options) {

          // call super constructor
          _super.apply(this, arguments);

          if (makeDefaultOpt instanceof Function) {
              // Invoke makeDefaultOpt each time if it is a function, So we can make sure each
              // property in the object will not be shared by mutiple instances
              extend(this, makeDefaultOpt.call(this, options));
          }
          else {
              extendWithPropList(this, makeDefaultOpt, propList);
          }

          if (this.constructor === sub) {
              // Initialize function will be called in the order of inherit
              var initializers = sub.__initializers__;
              for (var i = 0; i < initializers.length; i++) {
                  initializers[i].apply(this, arguments);
              }
          }
      };
      // save super constructor
      sub.__super__ = _super;
      // Initialize function will be called after all the super constructor is called
      if (!_super.__initializers__) {
          sub.__initializers__ = [];
      } else {
          sub.__initializers__ = _super.__initializers__.slice();
      }
      if (initialize) {
          sub.__initializers__.push(initialize);
      }

      var Ctor = function() {};
      Ctor.prototype = _super.prototype;
      sub.prototype = new Ctor();
      sub.prototype.constructor = sub;
      extend(sub.prototype, proto);

      // extend the derive method as a static method;
      sub.extend = _super.extend;

      // DEPCRATED
      sub.derive = _super.extend;

      return sub;
  }

  function extend(target, source) {
      if (!source) {
          return;
      }
      for (var name in source) {
          if (source.hasOwnProperty(name)) {
              target[name] = source[name];
          }
      }
  }

  function extendWithPropList(target, source, propList) {
      for (var i = 0; i < propList.length; i++) {
          var propName = propList[i];
          target[propName] = source[propName];
      }
  }

  /**
   * @alias clay.core.mixin.extend
   * @mixin
   */
  /* harmony default export */ __webpack_exports__["a"] = ({

      extend: derive,

      // DEPCRATED
      derive: derive
  });


  /***/ }),
  /* 110 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  var EXTENSION_LIST = [
      'OES_texture_float',
      'OES_texture_half_float',
      'OES_texture_float_linear',
      'OES_texture_half_float_linear',
      'OES_standard_derivatives',
      'OES_vertex_array_object',
      'OES_element_index_uint',
      'WEBGL_compressed_texture_s3tc',
      'WEBGL_compressed_texture_etc',
      'WEBGL_compressed_texture_etc1',
      'WEBGL_compressed_texture_pvrtc',
      'WEBGL_compressed_texture_atc',
      'WEBGL_compressed_texture_astc',
      'WEBGL_depth_texture',
      'EXT_texture_filter_anisotropic',
      'EXT_shader_texture_lod',
      'WEBGL_draw_buffers',
      'EXT_frag_depth',
      'EXT_sRGB',
      'ANGLE_instanced_arrays'
  ];

  var PARAMETER_NAMES = [
      'MAX_TEXTURE_SIZE',
      'MAX_CUBE_MAP_TEXTURE_SIZE'
  ];

  function GLInfo(_gl) {
      var extensions = {};
      var parameters = {};

      // Get webgl extension
      for (var i = 0; i < EXTENSION_LIST.length; i++) {
          var extName = EXTENSION_LIST[i];
          createExtension(extName);
      }
      // Get parameters
      for (var i = 0; i < PARAMETER_NAMES.length; i++) {
          var name = PARAMETER_NAMES[i];
          parameters[name] = _gl.getParameter(_gl[name]);
      }

      this.getExtension = function (name) {
          if (!(name in extensions)) {
              createExtension(name);
          }
          return extensions[name];
      };

      this.getParameter = function (name) {
          return parameters[name];
      };

      function createExtension(name) {
          if (_gl.getExtension) {
              var ext = _gl.getExtension(name);
              if (!ext) {
                  ext = _gl.getExtension('MOZ_' + name);
              }
              if (!ext) {
                  ext = _gl.getExtension('WEBKIT_' + name);
              }
              extensions[name] = ext;
          }
      }
  }

  /* harmony default export */ __webpack_exports__["a"] = (GLInfo);


  /***/ }),
  /* 111 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  function get(options) {

      var xhr = new XMLHttpRequest();

      xhr.open('get', options.url);
      // With response type set browser can get and put binary data
      // https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest/Sending_and_Receiving_Binary_Data
      // Default is text, and it can be set
      // arraybuffer, blob, document, json, text
      xhr.responseType = options.responseType || 'text';

      if (options.onprogress) {
          //https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest/Using_XMLHttpRequest
          xhr.onprogress = function(e) {
              if (e.lengthComputable) {
                  var percent = e.loaded / e.total;
                  options.onprogress(percent, e.loaded, e.total);
              }
              else {
                  options.onprogress(null);
              }
          };
      }
      xhr.onload = function(e) {
          if (xhr.status >= 400) {
              options.onerror && options.onerror();
          }
          else {
              options.onload && options.onload(xhr.response);
          }
      };
      if (options.onerror) {
          xhr.onerror = options.onerror;
      }
      xhr.send(null);
  }

  /* harmony default export */ __webpack_exports__["a"] = ({
      get: get
  });


  /***/ }),
  /* 112 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_LRU__ = __webpack_require__(68);
  /**
   * @namespace clay.core.color
   */


  var colorUtil = {};

  var kCSSColorTable = {
      'transparent': [0,0,0,0], 'aliceblue': [240,248,255,1],
      'antiquewhite': [250,235,215,1], 'aqua': [0,255,255,1],
      'aquamarine': [127,255,212,1], 'azure': [240,255,255,1],
      'beige': [245,245,220,1], 'bisque': [255,228,196,1],
      'black': [0,0,0,1], 'blanchedalmond': [255,235,205,1],
      'blue': [0,0,255,1], 'blueviolet': [138,43,226,1],
      'brown': [165,42,42,1], 'burlywood': [222,184,135,1],
      'cadetblue': [95,158,160,1], 'chartreuse': [127,255,0,1],
      'chocolate': [210,105,30,1], 'coral': [255,127,80,1],
      'cornflowerblue': [100,149,237,1], 'cornsilk': [255,248,220,1],
      'crimson': [220,20,60,1], 'cyan': [0,255,255,1],
      'darkblue': [0,0,139,1], 'darkcyan': [0,139,139,1],
      'darkgoldenrod': [184,134,11,1], 'darkgray': [169,169,169,1],
      'darkgreen': [0,100,0,1], 'darkgrey': [169,169,169,1],
      'darkkhaki': [189,183,107,1], 'darkmagenta': [139,0,139,1],
      'darkolivegreen': [85,107,47,1], 'darkorange': [255,140,0,1],
      'darkorchid': [153,50,204,1], 'darkred': [139,0,0,1],
      'darksalmon': [233,150,122,1], 'darkseagreen': [143,188,143,1],
      'darkslateblue': [72,61,139,1], 'darkslategray': [47,79,79,1],
      'darkslategrey': [47,79,79,1], 'darkturquoise': [0,206,209,1],
      'darkviolet': [148,0,211,1], 'deeppink': [255,20,147,1],
      'deepskyblue': [0,191,255,1], 'dimgray': [105,105,105,1],
      'dimgrey': [105,105,105,1], 'dodgerblue': [30,144,255,1],
      'firebrick': [178,34,34,1], 'floralwhite': [255,250,240,1],
      'forestgreen': [34,139,34,1], 'fuchsia': [255,0,255,1],
      'gainsboro': [220,220,220,1], 'ghostwhite': [248,248,255,1],
      'gold': [255,215,0,1], 'goldenrod': [218,165,32,1],
      'gray': [128,128,128,1], 'green': [0,128,0,1],
      'greenyellow': [173,255,47,1], 'grey': [128,128,128,1],
      'honeydew': [240,255,240,1], 'hotpink': [255,105,180,1],
      'indianred': [205,92,92,1], 'indigo': [75,0,130,1],
      'ivory': [255,255,240,1], 'khaki': [240,230,140,1],
      'lavender': [230,230,250,1], 'lavenderblush': [255,240,245,1],
      'lawngreen': [124,252,0,1], 'lemonchiffon': [255,250,205,1],
      'lightblue': [173,216,230,1], 'lightcoral': [240,128,128,1],
      'lightcyan': [224,255,255,1], 'lightgoldenrodyellow': [250,250,210,1],
      'lightgray': [211,211,211,1], 'lightgreen': [144,238,144,1],
      'lightgrey': [211,211,211,1], 'lightpink': [255,182,193,1],
      'lightsalmon': [255,160,122,1], 'lightseagreen': [32,178,170,1],
      'lightskyblue': [135,206,250,1], 'lightslategray': [119,136,153,1],
      'lightslategrey': [119,136,153,1], 'lightsteelblue': [176,196,222,1],
      'lightyellow': [255,255,224,1], 'lime': [0,255,0,1],
      'limegreen': [50,205,50,1], 'linen': [250,240,230,1],
      'magenta': [255,0,255,1], 'maroon': [128,0,0,1],
      'mediumaquamarine': [102,205,170,1], 'mediumblue': [0,0,205,1],
      'mediumorchid': [186,85,211,1], 'mediumpurple': [147,112,219,1],
      'mediumseagreen': [60,179,113,1], 'mediumslateblue': [123,104,238,1],
      'mediumspringgreen': [0,250,154,1], 'mediumturquoise': [72,209,204,1],
      'mediumvioletred': [199,21,133,1], 'midnightblue': [25,25,112,1],
      'mintcream': [245,255,250,1], 'mistyrose': [255,228,225,1],
      'moccasin': [255,228,181,1], 'navajowhite': [255,222,173,1],
      'navy': [0,0,128,1], 'oldlace': [253,245,230,1],
      'olive': [128,128,0,1], 'olivedrab': [107,142,35,1],
      'orange': [255,165,0,1], 'orangered': [255,69,0,1],
      'orchid': [218,112,214,1], 'palegoldenrod': [238,232,170,1],
      'palegreen': [152,251,152,1], 'paleturquoise': [175,238,238,1],
      'palevioletred': [219,112,147,1], 'papayawhip': [255,239,213,1],
      'peachpuff': [255,218,185,1], 'peru': [205,133,63,1],
      'pink': [255,192,203,1], 'plum': [221,160,221,1],
      'powderblue': [176,224,230,1], 'purple': [128,0,128,1],
      'red': [255,0,0,1], 'rosybrown': [188,143,143,1],
      'royalblue': [65,105,225,1], 'saddlebrown': [139,69,19,1],
      'salmon': [250,128,114,1], 'sandybrown': [244,164,96,1],
      'seagreen': [46,139,87,1], 'seashell': [255,245,238,1],
      'sienna': [160,82,45,1], 'silver': [192,192,192,1],
      'skyblue': [135,206,235,1], 'slateblue': [106,90,205,1],
      'slategray': [112,128,144,1], 'slategrey': [112,128,144,1],
      'snow': [255,250,250,1], 'springgreen': [0,255,127,1],
      'steelblue': [70,130,180,1], 'tan': [210,180,140,1],
      'teal': [0,128,128,1], 'thistle': [216,191,216,1],
      'tomato': [255,99,71,1], 'turquoise': [64,224,208,1],
      'violet': [238,130,238,1], 'wheat': [245,222,179,1],
      'white': [255,255,255,1], 'whitesmoke': [245,245,245,1],
      'yellow': [255,255,0,1], 'yellowgreen': [154,205,50,1]
  };

  function clampCssByte(i) {  // Clamp to integer 0 .. 255.
      i = Math.round(i);  // Seems to be what Chrome does (vs truncation).
      return i < 0 ? 0 : i > 255 ? 255 : i;
  }

  function clampCssAngle(i) {  // Clamp to integer 0 .. 360.
      i = Math.round(i);  // Seems to be what Chrome does (vs truncation).
      return i < 0 ? 0 : i > 360 ? 360 : i;
  }

  function clampCssFloat(f) {  // Clamp to float 0.0 .. 1.0.
      return f < 0 ? 0 : f > 1 ? 1 : f;
  }

  function parseCssInt(str) {  // int or percentage.
      if (str.length && str.charAt(str.length - 1) === '%') {
          return clampCssByte(parseFloat(str) / 100 * 255);
      }
      return clampCssByte(parseInt(str, 10));
  }

  function parseCssFloat(str) {  // float or percentage.
      if (str.length && str.charAt(str.length - 1) === '%') {
          return clampCssFloat(parseFloat(str) / 100);
      }
      return clampCssFloat(parseFloat(str));
  }

  function cssHueToRgb(m1, m2, h) {
      if (h < 0) {
          h += 1;
      }
      else if (h > 1) {
          h -= 1;
      }

      if (h * 6 < 1) {
          return m1 + (m2 - m1) * h * 6;
      }
      if (h * 2 < 1) {
          return m2;
      }
      if (h * 3 < 2) {
          return m1 + (m2 - m1) * (2/3 - h) * 6;
      }
      return m1;
  }

  function lerpNumber(a, b, p) {
      return a + (b - a) * p;
  }

  function setRgba(out, r, g, b, a) {
      out[0] = r; out[1] = g; out[2] = b; out[3] = a;
      return out;
  }
  function copyRgba(out, a) {
      out[0] = a[0]; out[1] = a[1]; out[2] = a[2]; out[3] = a[3];
      return out;
  }

  var colorCache = new __WEBPACK_IMPORTED_MODULE_0__core_LRU__["a" /* default */](20);
  var lastRemovedArr = null;

  function putToCache(colorStr, rgbaArr) {
      // Reuse removed array
      if (lastRemovedArr) {
          copyRgba(lastRemovedArr, rgbaArr);
      }
      lastRemovedArr = colorCache.put(colorStr, lastRemovedArr || (rgbaArr.slice()));
  }

  /**
   * @name clay.core.color.parse
   * @param {string} colorStr
   * @param {Array.<number>} out
   * @return {Array.<number>}
   */
  colorUtil.parse = function (colorStr, rgbaArr) {
      if (!colorStr) {
          return;
      }
      rgbaArr = rgbaArr || [];

      var cached = colorCache.get(colorStr);
      if (cached) {
          return copyRgba(rgbaArr, cached);
      }

      // colorStr may be not string
      colorStr = colorStr + '';
      // Remove all whitespace, not compliant, but should just be more accepting.
      var str = colorStr.replace(/ /g, '').toLowerCase();

      // Color keywords (and transparent) lookup.
      if (str in kCSSColorTable) {
          copyRgba(rgbaArr, kCSSColorTable[str]);
          putToCache(colorStr, rgbaArr);
          return rgbaArr;
      }

      // #abc and #abc123 syntax.
      if (str.charAt(0) === '#') {
          if (str.length === 4) {
              var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.
              if (!(iv >= 0 && iv <= 0xfff)) {
                  setRgba(rgbaArr, 0, 0, 0, 1);
                  return;  // Covers NaN.
              }
              setRgba(rgbaArr,
                  ((iv & 0xf00) >> 4) | ((iv & 0xf00) >> 8),
                  (iv & 0xf0) | ((iv & 0xf0) >> 4),
                  (iv & 0xf) | ((iv & 0xf) << 4),
                  1
              );
              putToCache(colorStr, rgbaArr);
              return rgbaArr;
          }
          else if (str.length === 7) {
              var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.
              if (!(iv >= 0 && iv <= 0xffffff)) {
                  setRgba(rgbaArr, 0, 0, 0, 1);
                  return;  // Covers NaN.
              }
              setRgba(rgbaArr,
                  (iv & 0xff0000) >> 16,
                  (iv & 0xff00) >> 8,
                  iv & 0xff,
                  1
              );
              putToCache(colorStr, rgbaArr);
              return rgbaArr;
          }

          return;
      }
      var op = str.indexOf('('), ep = str.indexOf(')');
      if (op !== -1 && ep + 1 === str.length) {
          var fname = str.substr(0, op);
          var params = str.substr(op + 1, ep - (op + 1)).split(',');
          var alpha = 1;  // To allow case fallthrough.
          switch (fname) {
              case 'rgba':
                  if (params.length !== 4) {
                      setRgba(rgbaArr, 0, 0, 0, 1);
                      return;
                  }
                  alpha = parseCssFloat(params.pop()); // jshint ignore:line
              // Fall through.
              case 'rgb':
                  if (params.length !== 3) {
                      setRgba(rgbaArr, 0, 0, 0, 1);
                      return;
                  }
                  setRgba(rgbaArr,
                      parseCssInt(params[0]),
                      parseCssInt(params[1]),
                      parseCssInt(params[2]),
                      alpha
                  );
                  putToCache(colorStr, rgbaArr);
                  return rgbaArr;
              case 'hsla':
                  if (params.length !== 4) {
                      setRgba(rgbaArr, 0, 0, 0, 1);
                      return;
                  }
                  params[3] = parseCssFloat(params[3]);
                  hsla2rgba(params, rgbaArr);
                  putToCache(colorStr, rgbaArr);
                  return rgbaArr;
              case 'hsl':
                  if (params.length !== 3) {
                      setRgba(rgbaArr, 0, 0, 0, 1);
                      return;
                  }
                  hsla2rgba(params, rgbaArr);
                  putToCache(colorStr, rgbaArr);
                  return rgbaArr;
              default:
                  return;
          }
      }

      setRgba(rgbaArr, 0, 0, 0, 1);
      return;
  };

  colorUtil.parseToFloat = function (colorStr, rgbaArr) {
      rgbaArr = colorUtil.parse(colorStr, rgbaArr);
      if (!rgbaArr) {
          return;
      }
      rgbaArr[0] /= 255;
      rgbaArr[1] /= 255;
      rgbaArr[2] /= 255;
      return rgbaArr;
  };

  /**
   * @name clay.core.color.hsla2rgba
   * @param {Array.<number>} hsla
   * @param {Array.<number>} rgba
   * @return {Array.<number>} rgba
   */
  function hsla2rgba(hsla, rgba) {
      var h = (((parseFloat(hsla[0]) % 360) + 360) % 360) / 360;  // 0 .. 1
      // NOTE(deanm): According to the CSS spec s/l should only be
      // percentages, but we don't bother and let float or percentage.
      var s = parseCssFloat(hsla[1]);
      var l = parseCssFloat(hsla[2]);
      var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
      var m1 = l * 2 - m2;

      rgba = rgba || [];
      setRgba(rgba,
          clampCssByte(cssHueToRgb(m1, m2, h + 1 / 3) * 255),
          clampCssByte(cssHueToRgb(m1, m2, h) * 255),
          clampCssByte(cssHueToRgb(m1, m2, h - 1 / 3) * 255),
          1
      );

      if (hsla.length === 4) {
          rgba[3] = hsla[3];
      }

      return rgba;
  }

  /**
   * @name clay.core.color.rgba2hsla
   * @param {Array.<number>} rgba
   * @return {Array.<number>} hsla
   */
  function rgba2hsla(rgba) {
      if (!rgba) {
          return;
      }

      // RGB from 0 to 255
      var R = rgba[0] / 255;
      var G = rgba[1] / 255;
      var B = rgba[2] / 255;

      var vMin = Math.min(R, G, B); // Min. value of RGB
      var vMax = Math.max(R, G, B); // Max. value of RGB
      var delta = vMax - vMin; // Delta RGB value

      var L = (vMax + vMin) / 2;
      var H;
      var S;
      // HSL results from 0 to 1
      if (delta === 0) {
          H = 0;
          S = 0;
      }
      else {
          if (L < 0.5) {
              S = delta / (vMax + vMin);
          }
          else {
              S = delta / (2 - vMax - vMin);
          }

          var deltaR = (((vMax - R) / 6) + (delta / 2)) / delta;
          var deltaG = (((vMax - G) / 6) + (delta / 2)) / delta;
          var deltaB = (((vMax - B) / 6) + (delta / 2)) / delta;

          if (R === vMax) {
              H = deltaB - deltaG;
          }
          else if (G === vMax) {
              H = (1 / 3) + deltaR - deltaB;
          }
          else if (B === vMax) {
              H = (2 / 3) + deltaG - deltaR;
          }

          if (H < 0) {
              H += 1;
          }

          if (H > 1) {
              H -= 1;
          }
      }

      var hsla = [H * 360, S, L];

      if (rgba[3] != null) {
          hsla.push(rgba[3]);
      }

      return hsla;
  }

  /**
   * @name clay.core.color.lift
   * @param {string} color
   * @param {number} level
   * @return {string}
   */
  colorUtil.lift = function (color, level) {
      var colorArr = colorUtil.parse(color);
      if (colorArr) {
          for (var i = 0; i < 3; i++) {
              if (level < 0) {
                  colorArr[i] = colorArr[i] * (1 - level) | 0;
              }
              else {
                  colorArr[i] = ((255 - colorArr[i]) * level + colorArr[i]) | 0;
              }
          }
          return colorUtil.stringify(colorArr, colorArr.length === 4 ? 'rgba' : 'rgb');
      }
  };

  /**
   * @name clay.core.color.toHex
   * @param {string} color
   * @return {string}
   */
  colorUtil.toHex = function (color) {
      var colorArr = colorUtil.parse(color);
      if (colorArr) {
          return ((1 << 24) + (colorArr[0] << 16) + (colorArr[1] << 8) + (+colorArr[2])).toString(16).slice(1);
      }
  };

  /**
   * Map value to color. Faster than lerp methods because color is represented by rgba array.
   * @name clay.core.color
   * @param {number} normalizedValue A float between 0 and 1.
   * @param {Array.<Array.<number>>} colors List of rgba color array
   * @param {Array.<number>} [out] Mapped gba color array
   * @return {Array.<number>} will be null/undefined if input illegal.
   */
  colorUtil.fastLerp = function (normalizedValue, colors, out) {
      if (!(colors && colors.length)
          || !(normalizedValue >= 0 && normalizedValue <= 1)
      ) {
          return;
      }

      out = out || [];

      var value = normalizedValue * (colors.length - 1);
      var leftIndex = Math.floor(value);
      var rightIndex = Math.ceil(value);
      var leftColor = colors[leftIndex];
      var rightColor = colors[rightIndex];
      var dv = value - leftIndex;
      out[0] = clampCssByte(lerpNumber(leftColor[0], rightColor[0], dv));
      out[1] = clampCssByte(lerpNumber(leftColor[1], rightColor[1], dv));
      out[2] = clampCssByte(lerpNumber(leftColor[2], rightColor[2], dv));
      out[3] = clampCssFloat(lerpNumber(leftColor[3], rightColor[3], dv));

      return out;
  };

  colorUtil.fastMapToColor = colorUtil.fastLerp;

  /**
   * @param {number} normalizedValue A float between 0 and 1.
   * @param {Array.<string>} colors Color list.
   * @param {boolean=} fullOutput Default false.
   * @return {(string|Object)} Result color. If fullOutput,
   *                           return {color: ..., leftIndex: ..., rightIndex: ..., value: ...},
   */
  colorUtil.lerp = function (normalizedValue, colors, fullOutput) {
      if (!(colors && colors.length)
          || !(normalizedValue >= 0 && normalizedValue <= 1)
      ) {
          return;
      }

      var value = normalizedValue * (colors.length - 1);
      var leftIndex = Math.floor(value);
      var rightIndex = Math.ceil(value);
      var leftColor = colorUtil.parse(colors[leftIndex]);
      var rightColor = colorUtil.parse(colors[rightIndex]);
      var dv = value - leftIndex;

      var color = colorUtil.stringify(
          [
              clampCssByte(lerpNumber(leftColor[0], rightColor[0], dv)),
              clampCssByte(lerpNumber(leftColor[1], rightColor[1], dv)),
              clampCssByte(lerpNumber(leftColor[2], rightColor[2], dv)),
              clampCssFloat(lerpNumber(leftColor[3], rightColor[3], dv))
          ],
          'rgba'
      );

      return fullOutput
          ? {
              color: color,
              leftIndex: leftIndex,
              rightIndex: rightIndex,
              value: value
          }
          : color;
  };

  /**
   * @deprecated
   */
  colorUtil.mapToColor = colorUtil.lerp;

  /**
   * @name clay.core.color
   * @param {string} color
   * @param {number=} h 0 ~ 360, ignore when null.
   * @param {number=} s 0 ~ 1, ignore when null.
   * @param {number=} l 0 ~ 1, ignore when null.
   * @return {string} Color string in rgba format.
   */
  colorUtil.modifyHSL = function (color, h, s, l) {
      color = colorUtil.parse(color);

      if (color) {
          color = rgba2hsla(color);
          h != null && (color[0] = clampCssAngle(h));
          s != null && (color[1] = parseCssFloat(s));
          l != null && (color[2] = parseCssFloat(l));

          return colorUtil.stringify(hsla2rgba(color), 'rgba');
      }
  };

  /**
   * @param {string} color
   * @param {number=} alpha 0 ~ 1
   * @return {string} Color string in rgba format.
   */
  colorUtil.modifyAlpha = function (color, alpha) {
      color = colorUtil.parse(color);

      if (color && alpha != null) {
          color[3] = clampCssFloat(alpha);
          return colorUtil.stringify(color, 'rgba');
      }
  };

  /**
   * @param {Array.<number>} arrColor like [12,33,44,0.4]
   * @param {string} type 'rgba', 'hsva', ...
   * @return {string} Result color. (If input illegal, return undefined).
   */
  colorUtil.stringify = function (arrColor, type) {
      if (!arrColor || !arrColor.length) {
          return;
      }
      var colorStr = arrColor[0] + ',' + arrColor[1] + ',' + arrColor[2];
      if (type === 'rgba' || type === 'hsva' || type === 'hsla') {
          colorStr += ',' + arrColor[3];
      }
      return type + '(' + colorStr + ')';
  };



  /* harmony default export */ __webpack_exports__["a"] = (colorUtil);

  /***/ }),
  /* 113 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /**
   * Simple double linked list. Compared with array, it has O(1) remove operation.
   * @constructor
   * @alias clay.core.LinkedList
   */
  var LinkedList = function () {

      /**
       * @type {clay.core.LinkedList.Entry}
       */
      this.head = null;

      /**
       * @type {clay.core.LinkedList.Entry}
       */
      this.tail = null;

      this._length = 0;
  };

  /**
   * Insert a new value at the tail
   * @param  {} val
   * @return {clay.core.LinkedList.Entry}
   */
  LinkedList.prototype.insert = function (val) {
      var entry = new LinkedList.Entry(val);
      this.insertEntry(entry);
      return entry;
  };

  /**
   * Insert a new value at idx
   * @param {number} idx
   * @param  {} val
   * @return {clay.core.LinkedList.Entry}
   */
  LinkedList.prototype.insertAt = function (idx, val) {
      if (idx < 0) {
          return;
      }
      var next = this.head;
      var cursor = 0;
      while (next && cursor != idx) {
          next = next.next;
          cursor++;
      }
      if (next) {
          var entry = new LinkedList.Entry(val);
          var prev = next.prev;
          if (!prev) { //next is head
              this.head = entry;
          }
          else {
              prev.next = entry;
              entry.prev = prev;
          }
          entry.next = next;
          next.prev = entry;
      }
      else {
          this.insert(val);
      }
  };

  LinkedList.prototype.insertBeforeEntry = function (val, next) {
      var entry = new LinkedList.Entry(val);
      var prev = next.prev;
      if (!prev) { //next is head
          this.head = entry;
      }
      else {
          prev.next = entry;
          entry.prev = prev;
      }
      entry.next = next;
      next.prev = entry;

      this._length++;
  };

  /**
   * Insert an entry at the tail
   * @param  {clay.core.LinkedList.Entry} entry
   */
  LinkedList.prototype.insertEntry = function (entry) {
      if (!this.head) {
          this.head = this.tail = entry;
      }
      else {
          this.tail.next = entry;
          entry.prev = this.tail;
          this.tail = entry;
      }
      this._length++;
  };

  /**
   * Remove entry.
   * @param  {clay.core.LinkedList.Entry} entry
   */
  LinkedList.prototype.remove = function (entry) {
      var prev = entry.prev;
      var next = entry.next;
      if (prev) {
          prev.next = next;
      }
      else {
          // Is head
          this.head = next;
      }
      if (next) {
          next.prev = prev;
      }
      else {
          // Is tail
          this.tail = prev;
      }
      entry.next = entry.prev = null;
      this._length--;
  };

  /**
   * Remove entry at index.
   * @param  {number} idx
   * @return {}
   */
  LinkedList.prototype.removeAt = function (idx) {
      if (idx < 0) {
          return;
      }
      var curr = this.head;
      var cursor = 0;
      while (curr && cursor != idx) {
          curr = curr.next;
          cursor++;
      }
      if (curr) {
          this.remove(curr);
          return curr.value;
      }
  };
  /**
   * Get head value
   * @return {}
   */
  LinkedList.prototype.getHead = function () {
      if (this.head) {
          return this.head.value;
      }
  };
  /**
   * Get tail value
   * @return {}
   */
  LinkedList.prototype.getTail = function () {
      if (this.tail) {
          return this.tail.value;
      }
  };
  /**
   * Get value at idx
   * @param {number} idx
   * @return {}
   */
  LinkedList.prototype.getAt = function (idx) {
      if (idx < 0) {
          return;
      }
      var curr = this.head;
      var cursor = 0;
      while (curr && cursor != idx) {
          curr = curr.next;
          cursor++;
      }
      return curr.value;
  };

  /**
   * @param  {} value
   * @return {number}
   */
  LinkedList.prototype.indexOf = function (value) {
      var curr = this.head;
      var cursor = 0;
      while (curr) {
          if (curr.value === value) {
              return cursor;
          }
          curr = curr.next;
          cursor++;
      }
  };

  /**
   * @return {number}
   */
  LinkedList.prototype.length = function () {
      return this._length;
  };

  /**
   * If list is empty
   */
  LinkedList.prototype.isEmpty = function () {
      return this._length === 0;
  };

  /**
   * @param  {Function} cb
   * @param  {} context
   */
  LinkedList.prototype.forEach = function (cb, context) {
      var curr = this.head;
      var idx = 0;
      var haveContext = typeof(context) != 'undefined';
      while (curr) {
          if (haveContext) {
              cb.call(context, curr.value, idx);
          }
          else {
              cb(curr.value, idx);
          }
          curr = curr.next;
          idx++;
      }
  };

  /**
   * Clear the list
   */
  LinkedList.prototype.clear = function () {
      this.tail = this.head = null;
      this._length = 0;
  };

  /**
   * @constructor
   * @param {} val
   */
  LinkedList.Entry = function (val) {
      /**
       * @type {}
       */
      this.value = val;

      /**
       * @type {clay.core.LinkedList.Entry}
       */
      this.next = null;

      /**
       * @type {clay.core.LinkedList.Entry}
       */
      this.prev = null;
  };

  /* harmony default export */ __webpack_exports__["a"] = (LinkedList);


  /***/ }),
  /* 114 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__GLProgram__ = __webpack_require__(115);


  var loopRegex = /for\s*?\(int\s*?_idx_\s*\=\s*([\w-]+)\;\s*_idx_\s*<\s*([\w-]+);\s*_idx_\s*\+\+\s*\)\s*\{\{([\s\S]+?)(?=\}\})\}\}/g;

  function unrollLoop(shaderStr, defines, lightsNumbers) {
      // Loop unroll from three.js, https://github.com/mrdoob/three.js/blob/master/src/renderers/webgl/WebGLProgram.js#L175
      // In some case like shadowMap in loop use 'i' to index value much slower.

      // Loop use _idx_ and increased with _idx_++ will be unrolled
      // Use {{ }} to match the pair so the if statement will not be affected
      // Write like following
      // for (int _idx_ = 0; _idx_ < 4; _idx_++) {{
      //     vec3 color = texture2D(textures[_idx_], uv).rgb;
      // }}
      function replace(match, start, end, snippet) {
          var unroll = '';
          // Try to treat as define
          if (isNaN(start)) {
              if (start in defines) {
                  start = defines[start];
              }
              else {
                  start = lightNumberDefines[start];
              }
          }
          if (isNaN(end)) {
              if (end in defines) {
                  end = defines[end];
              }
              else {
                  end = lightNumberDefines[end];
              }
          }
          // TODO Error checking

          for (var idx = parseInt(start); idx < parseInt(end); idx++) {
              // PENDING Add scope?
              unroll += '{'
                  + snippet
                      .replace(/float\s*\(\s*_idx_\s*\)/g, idx.toFixed(1))
                      .replace(/_idx_/g, idx)
              + '}';
          }

          return unroll;
      }

      var lightNumberDefines = {};
      for (var lightType in lightsNumbers) {
          lightNumberDefines[lightType + '_COUNT'] = lightsNumbers[lightType];
      }
      return shaderStr.replace(loopRegex, replace);
  }

  function getDefineCode(defines, lightsNumbers, enabledTextures) {
      var defineStr = [];
      if (lightsNumbers) {
          for (var lightType in lightsNumbers) {
              var count = lightsNumbers[lightType];
              if (count > 0) {
                  defineStr.push('#define ' + lightType.toUpperCase() + '_COUNT ' + count);
              }
          }
      }
      if (enabledTextures) {
          for (var i = 0; i < enabledTextures.length; i++) {
              var symbol = enabledTextures[i];
              defineStr.push('#define ' + symbol.toUpperCase() + '_ENABLED');
          }
      }
      // Custom Defines
      for (var symbol in defines) {
          var value = defines[symbol];
          if (value === null) {
              defineStr.push('#define ' + symbol);
          }
          else {
              defineStr.push('#define ' + symbol + ' ' + value.toString());
          }
      }
      return defineStr.join('\n');
  }

  function getExtensionCode(exts) {
      // Extension declaration must before all non-preprocessor codes
      // TODO vertex ? extension enum ?
      var extensionStr = [];
      for (var i = 0; i < exts.length; i++) {
          extensionStr.push('#extension GL_' + exts[i][0] + ' : enable');
      }
      return extensionStr.join('\n');
  }

  function getPrecisionCode(precision) {
      return ['precision', precision, 'float'].join(' ') + ';\n'
          + ['precision', precision, 'int'].join(' ') + ';\n'
          // depth texture may have precision problem on iOS device.
          + ['precision', precision, 'sampler2D'].join(' ') + ';\n';
  }

  function ProgramManager(renderer) {
      this._renderer = renderer;
      this._cache = {};
  }

  ProgramManager.prototype.getProgram = function (renderable, material, scene, renderer) {
      var cache = this._cache;

      var isSkinnedMesh = renderable.isSkinnedMesh && renderable.isSkinnedMesh();
      var isInstancedMesh = renderable.isInstancedMesh && renderable.isInstancedMesh();
      var key = 's' + material.shader.shaderID + 'm' + material.getProgramKey();
      if (scene) {
          key += 'se' + scene.getProgramKey(renderable.lightGroup);
      }
      if (isSkinnedMesh) {
          key += ',sk' + renderable.joints.length;
      }
      if (isInstancedMesh) {
          key += ',is';
      }
      if (renderer.logDepthBuffer) {
          key += ',ld';
      }
      var program = cache[key];

      if (program) {
          return program;
      }

      var lightsNumbers = scene ? scene.getLightsNumbers(renderable.lightGroup) : {};
      var renderer = this._renderer;
      var _gl = renderer.gl;
      var enabledTextures = material.getEnabledTextures();
      var extraDefineCode = '';
      if (isSkinnedMesh) {
          var skinDefines = {
              SKINNING: null,
              JOINT_COUNT: renderable.joints.length
          };
          if (renderable.joints.length > renderer.getMaxJointNumber()) {
              skinDefines.USE_SKIN_MATRICES_TEXTURE = null;
          }
          // TODO Add skinning code?
          extraDefineCode += '\n' + getDefineCode(skinDefines) + '\n';
      }
      if (isInstancedMesh) {
          extraDefineCode += '\n#define INSTANCING\n';
      }
      if (renderer.logDepthBuffer) {
          extraDefineCode += '\n#define LOG_DEPTH\n';
      }
      // TODO Optimize key generation
      // VERTEX
      var vertexDefineStr = extraDefineCode + getDefineCode(material.vertexDefines, lightsNumbers, enabledTextures);
      // FRAGMENT
      var fragmentDefineStr = extraDefineCode + getDefineCode(material.fragmentDefines, lightsNumbers, enabledTextures);

      var extensions = [
          ['OES_standard_derivatives', 'TEXTURE_LOD'],
          ['EXT_shader_texture_lod', 'STANDARD_DERIVATIVES'],
          ['EXT_frag_depth', 'FRAG_DEPTH']
      ].filter(function (ext) {
          return renderer.getGLExtension(ext[0]) != null;
      });

      for (var i = 0; i < extensions.length; i++) {
          var extDefineCode = '\n#define SUPPORT_' + extensions[i][1];
          fragmentDefineStr += extDefineCode;
          vertexDefineStr += extDefineCode;
      }
      var vertexCode = vertexDefineStr + '\n' + material.shader.vertex;

      var fragmentCode = getExtensionCode(extensions) + '\n'
          + getPrecisionCode(material.precision) + '\n'
          + fragmentDefineStr + '\n'
          + material.shader.fragment;

      var finalVertexCode = unrollLoop(vertexCode, material.vertexDefines, lightsNumbers);
      var finalFragmentCode = unrollLoop(fragmentCode, material.fragmentDefines, lightsNumbers);

      var program = new __WEBPACK_IMPORTED_MODULE_0__GLProgram__["a" /* default */]();
      program.uniformSemantics = material.shader.uniformSemantics;
      program.attributes = material.shader.attributes;
      var errorMsg = program.buildProgram(_gl, material.shader, finalVertexCode, finalFragmentCode);
      program.__error = errorMsg;

      cache[key] = program;

      return program;
  };

  /* harmony default export */ __webpack_exports__["a"] = (ProgramManager);

  /***/ }),
  /* 115 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_vendor__ = __webpack_require__(13);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Base__ = __webpack_require__(8);



  var SHADER_STATE_TO_ENABLE = 1;
  var SHADER_STATE_KEEP_ENABLE = 2;
  var SHADER_STATE_PENDING = 3;

  // Enable attribute operation is global to all programs
  // Here saved the list of all enabled attribute index
  // http://www.mjbshaw.com/2013/03/webgl-fixing-invalidoperation.html
  var enabledAttributeList = {};

  // some util functions
  function addLineNumbers(string) {
      var chunks = string.split('\n');
      for (var i = 0, il = chunks.length; i < il; i ++) {
          // Chrome reports shader errors on lines
          // starting counting from 1
          chunks[i] = (i + 1) + ': ' + chunks[i];
      }
      return chunks.join('\n');
  }

  // Return true or error msg if error happened
  function checkShaderErrorMsg(_gl, shader, shaderString) {
      if (!_gl.getShaderParameter(shader, _gl.COMPILE_STATUS)) {
          return [_gl.getShaderInfoLog(shader), addLineNumbers(shaderString)].join('\n');
      }
  }

  var tmpFloat32Array16 = new __WEBPACK_IMPORTED_MODULE_0__core_vendor__["a" /* default */].Float32Array(16);

  var GLProgram = __WEBPACK_IMPORTED_MODULE_1__core_Base__["a" /* default */].extend({

      uniformSemantics: {},
      attributes: {}

  }, function () {
      this._locations = {};

      this._textureSlot = 0;

      this._program = null;
  }, {

      bind: function (renderer) {
          this._textureSlot = 0;
          renderer.gl.useProgram(this._program);
      },

      hasUniform: function (symbol) {
          var location = this._locations[symbol];
          return location !== null && location !== undefined;
      },

      useTextureSlot: function (renderer, texture, slot) {
          if (texture) {
              renderer.gl.activeTexture(renderer.gl.TEXTURE0 + slot);
              // Maybe texture is not loaded yet;
              if (texture.isRenderable()) {
                  texture.bind(renderer);
              }
              else {
                  // Bind texture to null
                  texture.unbind(renderer);
              }
          }
      },

      currentTextureSlot: function () {
          return this._textureSlot;
      },

      resetTextureSlot: function (slot) {
          this._textureSlot = slot || 0;
      },

      takeCurrentTextureSlot: function (renderer, texture) {
          var textureSlot = this._textureSlot;

          this.useTextureSlot(renderer, texture, textureSlot);

          this._textureSlot++;

          return textureSlot;
      },

      setUniform: function (_gl, type, symbol, value) {
          var locationMap = this._locations;
          var location = locationMap[symbol];
          // Uniform is not existed in the shader
          if (location === null || location === undefined) {
              return false;
          }

          switch (type) {
              case 'm4':
                  if (!(value instanceof Float32Array)) {
                      // Use Float32Array is much faster than array when uniformMatrix4fv.
                      for (var i = 0; i < value.length; i++) {
                          tmpFloat32Array16[i] = value[i];
                      }
                      value = tmpFloat32Array16;
                  }
                  _gl.uniformMatrix4fv(location, false, value);
                  break;
              case '2i':
                  _gl.uniform2i(location, value[0], value[1]);
                  break;
              case '2f':
                  _gl.uniform2f(location, value[0], value[1]);
                  break;
              case '3i':
                  _gl.uniform3i(location, value[0], value[1], value[2]);
                  break;
              case '3f':
                  _gl.uniform3f(location, value[0], value[1], value[2]);
                  break;
              case '4i':
                  _gl.uniform4i(location, value[0], value[1], value[2], value[3]);
                  break;
              case '4f':
                  _gl.uniform4f(location, value[0], value[1], value[2], value[3]);
                  break;
              case '1i':
                  _gl.uniform1i(location, value);
                  break;
              case '1f':
                  _gl.uniform1f(location, value);
                  break;
              case '1fv':
                  _gl.uniform1fv(location, value);
                  break;
              case '1iv':
                  _gl.uniform1iv(location, value);
                  break;
              case '2iv':
                  _gl.uniform2iv(location, value);
                  break;
              case '2fv':
                  _gl.uniform2fv(location, value);
                  break;
              case '3iv':
                  _gl.uniform3iv(location, value);
                  break;
              case '3fv':
                  _gl.uniform3fv(location, value);
                  break;
              case '4iv':
                  _gl.uniform4iv(location, value);
                  break;
              case '4fv':
                  _gl.uniform4fv(location, value);
                  break;
              case 'm2':
              case 'm2v':
                  _gl.uniformMatrix2fv(location, false, value);
                  break;
              case 'm3':
              case 'm3v':
                  _gl.uniformMatrix3fv(location, false, value);
                  break;
              case 'm4v':
                  // Raw value
                  if (Array.isArray(value) && Array.isArray(value[0])) {
                      var array = new __WEBPACK_IMPORTED_MODULE_0__core_vendor__["a" /* default */].Float32Array(value.length * 16);
                      var cursor = 0;
                      for (var i = 0; i < value.length; i++) {
                          var item = value[i];
                          for (var j = 0; j < 16; j++) {
                              array[cursor++] = item[j];
                          }
                      }
                      _gl.uniformMatrix4fv(location, false, array);
                  }
                  else {   // ArrayBufferView
                      _gl.uniformMatrix4fv(location, false, value);
                  }
                  break;
          }
          return true;
      },

      setUniformOfSemantic: function (_gl, semantic, val) {
          var semanticInfo = this.uniformSemantics[semantic];
          if (semanticInfo) {
              return this.setUniform(_gl, semanticInfo.type, semanticInfo.symbol, val);
          }
          return false;
      },

      // Used for creating VAO
      // Enable the attributes passed in and disable the rest
      // Example Usage:
      // enableAttributes(renderer, ["position", "texcoords"])
      enableAttributes: function (renderer, attribList, vao) {
          var _gl = renderer.gl;
          var program = this._program;

          var locationMap = this._locations;

          var enabledAttributeListInContext;
          if (vao) {
              enabledAttributeListInContext = vao.__enabledAttributeList;
          }
          else {
              enabledAttributeListInContext = enabledAttributeList[renderer.__uid__];
          }
          if (!enabledAttributeListInContext) {
              // In vertex array object context
              // PENDING Each vao object needs to enable attributes again?
              if (vao) {
                  enabledAttributeListInContext
                      = vao.__enabledAttributeList
                      = [];
              }
              else {
                  enabledAttributeListInContext
                      = enabledAttributeList[renderer.__uid__]
                      = [];
              }
          }
          var locationList = [];
          for (var i = 0; i < attribList.length; i++) {
              var symbol = attribList[i];
              if (!this.attributes[symbol]) {
                  locationList[i] = -1;
                  continue;
              }
              var location = locationMap[symbol];
              if (location == null) {
                  location = _gl.getAttribLocation(program, symbol);
                  // Attrib location is a number from 0 to ...
                  if (location === -1) {
                      locationList[i] = -1;
                      continue;
                  }
                  locationMap[symbol] = location;
              }
              locationList[i] = location;

              if (!enabledAttributeListInContext[location]) {
                  enabledAttributeListInContext[location] = SHADER_STATE_TO_ENABLE;
              }
              else {
                  enabledAttributeListInContext[location] = SHADER_STATE_KEEP_ENABLE;
              }
          }

          for (var i = 0; i < enabledAttributeListInContext.length; i++) {
              switch (enabledAttributeListInContext[i]){
                  case SHADER_STATE_TO_ENABLE:
                      _gl.enableVertexAttribArray(i);
                      enabledAttributeListInContext[i] = SHADER_STATE_PENDING;
                      break;
                  case SHADER_STATE_KEEP_ENABLE:
                      enabledAttributeListInContext[i] = SHADER_STATE_PENDING;
                      break;
                  // Expired
                  case SHADER_STATE_PENDING:
                      _gl.disableVertexAttribArray(i);
                      enabledAttributeListInContext[i] = 0;
                      break;
              }
          }

          return locationList;
      },

      getAttribLocation: function (_gl, symbol) {
          var locationMap = this._locations;

          var location = locationMap[symbol];
          if (location == null) {
              location = _gl.getAttribLocation(this._program, symbol);
              locationMap[symbol] = location;
          }

          return location;
      },

      isAttribEnabled: function (renderer, location) {
          var enabledAttributeListInContext
              = enabledAttributeList[renderer.__uid__]
              || [];

          return !!enabledAttributeListInContext[location];
      },

      buildProgram: function (_gl, shader, vertexShaderCode, fragmentShaderCode) {
          var vertexShader = _gl.createShader(_gl.VERTEX_SHADER);
          var program = _gl.createProgram();

          _gl.shaderSource(vertexShader, vertexShaderCode);
          _gl.compileShader(vertexShader);

          var fragmentShader = _gl.createShader(_gl.FRAGMENT_SHADER);
          _gl.shaderSource(fragmentShader, fragmentShaderCode);
          _gl.compileShader(fragmentShader);

          var msg = checkShaderErrorMsg(_gl, vertexShader, vertexShaderCode);
          if (msg) {
              return msg;
          }
          msg = checkShaderErrorMsg(_gl, fragmentShader, fragmentShaderCode);
          if (msg) {
              return msg;
          }

          _gl.attachShader(program, vertexShader);
          _gl.attachShader(program, fragmentShader);
          // Force the position bind to location 0;
          if (shader.attributeSemantics['POSITION']) {
              _gl.bindAttribLocation(program, 0, shader.attributeSemantics['POSITION'].symbol);
          }
          else {
              // Else choose an attribute and bind to location 0;
              var keys = Object.keys(this.attributes);
              _gl.bindAttribLocation(program, 0, keys[0]);
          }

          _gl.linkProgram(program);

          _gl.deleteShader(vertexShader);
          _gl.deleteShader(fragmentShader);

          this._program = program;

          // Save code.
          this.vertexCode = vertexShaderCode;
          this.fragmentCode = fragmentShaderCode;

          if (!_gl.getProgramParameter(program, _gl.LINK_STATUS)) {
              return 'Could not link program\n' + _gl.getProgramInfoLog(program);
          }

          // Cache uniform locations
          for (var i = 0; i < shader.uniforms.length; i++) {
              var uniformSymbol = shader.uniforms[i];
              this._locations[uniformSymbol] = _gl.getUniformLocation(program, uniformSymbol);
          }

      }
  });

  /* harmony default export */ __webpack_exports__["a"] = (GLProgram);

  /***/ }),
  /* 116 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Base__ = __webpack_require__(8);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__math_Ray__ = __webpack_require__(54);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math_Vector2__ = __webpack_require__(26);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__math_Vector3__ = __webpack_require__(3);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__math_Matrix4__ = __webpack_require__(7);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Renderable__ = __webpack_require__(71);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_glenum__ = __webpack_require__(11);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__glmatrix_vec3__ = __webpack_require__(12);









  /**
   * @constructor clay.picking.RayPicking
   * @extends clay.core.Base
   */
  var RayPicking = __WEBPACK_IMPORTED_MODULE_0__core_Base__["a" /* default */].extend(/** @lends clay.picking.RayPicking# */{
      /**
       * Target scene
       * @type {clay.Scene}
       */
      scene: null,
      /**
       * Target camera
       * @type {clay.Camera}
       */
      camera: null,
      /**
       * Target renderer
       * @type {clay.Renderer}
       */
      renderer: null
  }, function () {
      this._ray = new __WEBPACK_IMPORTED_MODULE_1__math_Ray__["a" /* default */]();
      this._ndc = new __WEBPACK_IMPORTED_MODULE_2__math_Vector2__["a" /* default */]();
  },
  /** @lends clay.picking.RayPicking.prototype */
  {

      /**
       * Pick the nearest intersection object in the scene
       * @param  {number} x Mouse position x
       * @param  {number} y Mouse position y
       * @param  {boolean} [forcePickAll=false] ignore ignorePicking
       * @return {clay.picking.RayPicking~Intersection}
       */
      pick: function (x, y, forcePickAll) {
          var out = this.pickAll(x, y, [], forcePickAll);
          return out[0] || null;
      },

      /**
       * Pick all intersection objects, wich will be sorted from near to far
       * @param  {number} x Mouse position x
       * @param  {number} y Mouse position y
       * @param  {Array} [output]
       * @param  {boolean} [forcePickAll=false] ignore ignorePicking
       * @return {Array.<clay.picking.RayPicking~Intersection>}
       */
      pickAll: function (x, y, output, forcePickAll) {
          this.renderer.screenToNDC(x, y, this._ndc);
          this.camera.castRay(this._ndc, this._ray);

          output = output || [];

          this._intersectNode(this.scene, output, forcePickAll || false);

          output.sort(this._intersectionCompareFunc);

          return output;
      },

      _intersectNode: function (node, out, forcePickAll) {
          if ((node instanceof __WEBPACK_IMPORTED_MODULE_5__Renderable__["a" /* default */]) && node.isRenderable()) {
              if ((!node.ignorePicking || forcePickAll)
                  && (
                      // Only triangle mesh support ray picking
                      (node.mode === __WEBPACK_IMPORTED_MODULE_6__core_glenum__["a" /* default */].TRIANGLES && node.geometry.isUseIndices())
                      // Or if geometry has it's own pickByRay, pick, implementation
                      || node.geometry.pickByRay
                      || node.geometry.pick
                  )
              ) {
                  this._intersectRenderable(node, out);
              }
          }
          for (var i = 0; i < node._children.length; i++) {
              this._intersectNode(node._children[i], out, forcePickAll);
          }
      },

      _intersectRenderable: (function () {

          var v1 = new __WEBPACK_IMPORTED_MODULE_3__math_Vector3__["a" /* default */]();
          var v2 = new __WEBPACK_IMPORTED_MODULE_3__math_Vector3__["a" /* default */]();
          var v3 = new __WEBPACK_IMPORTED_MODULE_3__math_Vector3__["a" /* default */]();
          var ray = new __WEBPACK_IMPORTED_MODULE_1__math_Ray__["a" /* default */]();
          var worldInverse = new __WEBPACK_IMPORTED_MODULE_4__math_Matrix4__["a" /* default */]();

          return function (renderable, out) {

              var isSkinnedMesh = renderable.isSkinnedMesh();
              ray.copy(this._ray);
              __WEBPACK_IMPORTED_MODULE_4__math_Matrix4__["a" /* default */].invert(worldInverse, renderable.worldTransform);

              // Skinned mesh will ignore the world transform.
              if (!isSkinnedMesh) {
                  ray.applyTransform(worldInverse);
              }

              var geometry = renderable.geometry;

              var bbox = isSkinnedMesh ? renderable.skeleton.boundingBox : geometry.boundingBox;

              if (bbox && !ray.intersectBoundingBox(bbox)) {
                  return;
              }
              // Use user defined picking algorithm
              if (geometry.pick) {
                  geometry.pick(
                      this._ndc.x, this._ndc.y,
                      this.renderer,
                      this.camera,
                      renderable, out
                  );
                  return;
              }
              // Use user defined ray picking algorithm
              else if (geometry.pickByRay) {
                  geometry.pickByRay(ray, renderable, out);
                  return;
              }

              var cullBack = (renderable.cullFace === __WEBPACK_IMPORTED_MODULE_6__core_glenum__["a" /* default */].BACK && renderable.frontFace === __WEBPACK_IMPORTED_MODULE_6__core_glenum__["a" /* default */].CCW)
                          || (renderable.cullFace === __WEBPACK_IMPORTED_MODULE_6__core_glenum__["a" /* default */].FRONT && renderable.frontFace === __WEBPACK_IMPORTED_MODULE_6__core_glenum__["a" /* default */].CW);

              var point;
              var indices = geometry.indices;
              var positionAttr = geometry.attributes.position;
              var weightAttr = geometry.attributes.weight;
              var jointAttr = geometry.attributes.joint;
              var skinMatricesArray;
              var skinMatrices = [];
              // Check if valid.
              if (!positionAttr || !positionAttr.value || !indices) {
                  return;
              }
              if (isSkinnedMesh) {
                  skinMatricesArray = renderable.skeleton.getSubSkinMatrices(renderable.__uid__, renderable.joints);
                  for (var i = 0; i < renderable.joints.length; i++) {
                      skinMatrices[i] = skinMatrices[i] || [];
                      for (var k = 0; k < 16; k++) {
                          skinMatrices[i][k] = skinMatricesArray[i * 16 + k];
                      }
                  }
                  var pos = [];
                  var weight = [];
                  var joint = [];
                  var skinnedPos = [];
                  var tmp = [];
                  var skinnedPositionAttr = geometry.attributes.skinnedPosition;
                  if (!skinnedPositionAttr || !skinnedPositionAttr.value) {
                      geometry.createAttribute('skinnedPosition', 'f', 3);
                      skinnedPositionAttr = geometry.attributes.skinnedPosition;
                      skinnedPositionAttr.init(geometry.vertexCount);
                  }
                  for (var i = 0; i < geometry.vertexCount; i++) {
                      positionAttr.get(i, pos);
                      weightAttr.get(i, weight);
                      jointAttr.get(i, joint);
                      weight[3] = 1 - weight[0] - weight[1] - weight[2];
                      __WEBPACK_IMPORTED_MODULE_7__glmatrix_vec3__["a" /* default */].set(skinnedPos, 0, 0, 0);
                      for (var k = 0; k < 4; k++) {
                          if (joint[k] >= 0 && weight[k] > 1e-4) {
                              __WEBPACK_IMPORTED_MODULE_7__glmatrix_vec3__["a" /* default */].transformMat4(tmp, pos, skinMatrices[joint[k]]);
                              __WEBPACK_IMPORTED_MODULE_7__glmatrix_vec3__["a" /* default */].scaleAndAdd(skinnedPos, skinnedPos, tmp, weight[k]);
                          }
                      }
                      skinnedPositionAttr.set(i, skinnedPos);
                  }
              }

              for (var i = 0; i < indices.length; i += 3) {
                  var i1 = indices[i];
                  var i2 = indices[i + 1];
                  var i3 = indices[i + 2];
                  var finalPosAttr = isSkinnedMesh
                      ? geometry.attributes.skinnedPosition
                      : positionAttr;
                  finalPosAttr.get(i1, v1.array);
                  finalPosAttr.get(i2, v2.array);
                  finalPosAttr.get(i3, v3.array);

                  if (cullBack) {
                      point = ray.intersectTriangle(v1, v2, v3, renderable.culling);
                  }
                  else {
                      point = ray.intersectTriangle(v1, v3, v2, renderable.culling);
                  }
                  if (point) {
                      var pointW = new __WEBPACK_IMPORTED_MODULE_3__math_Vector3__["a" /* default */]();
                      if (!isSkinnedMesh) {
                          __WEBPACK_IMPORTED_MODULE_3__math_Vector3__["a" /* default */].transformMat4(pointW, point, renderable.worldTransform);
                      }
                      else {
                          // TODO point maybe not right.
                          __WEBPACK_IMPORTED_MODULE_3__math_Vector3__["a" /* default */].copy(pointW, point);
                      }
                      out.push(new RayPicking.Intersection(
                          point, pointW, renderable, [i1, i2, i3], i / 3,
                          __WEBPACK_IMPORTED_MODULE_3__math_Vector3__["a" /* default */].dist(pointW, this._ray.origin)
                      ));
                  }
              }
          };
      })(),

      _intersectionCompareFunc: function (a, b) {
          return a.distance - b.distance;
      }
  });

  /**
   * @constructor clay.picking.RayPicking~Intersection
   * @param {clay.Vector3} point
   * @param {clay.Vector3} pointWorld
   * @param {clay.Node} target
   * @param {Array.<number>} triangle
   * @param {number} triangleIndex
   * @param {number} distance
   */
  RayPicking.Intersection = function (point, pointWorld, target, triangle, triangleIndex, distance) {
      /**
       * Intersection point in local transform coordinates
       * @type {clay.Vector3}
       */
      this.point = point;
      /**
       * Intersection point in world transform coordinates
       * @type {clay.Vector3}
       */
      this.pointWorld = pointWorld;
      /**
       * Intersection scene node
       * @type {clay.Node}
       */
      this.target = target;
      /**
       * Intersection triangle, which is an array of vertex index
       * @type {Array.<number>}
       */
      this.triangle = triangle;
      /**
       * Index of intersection triangle.
       */
      this.triangleIndex = triangleIndex;
      /**
       * Distance from intersection point to ray origin
       * @type {number}
       */
      this.distance = distance;
  };

  /* harmony default export */ __webpack_exports__["a"] = (RayPicking);


  /***/ }),
  /* 117 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Base__ = __webpack_require__(8);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_glenum__ = __webpack_require__(11);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_Cache__ = __webpack_require__(57);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_vendor__ = __webpack_require__(13);





  function getArrayCtorByType (type) {
      return ({
          'byte': __WEBPACK_IMPORTED_MODULE_3__core_vendor__["a" /* default */].Int8Array,
          'ubyte': __WEBPACK_IMPORTED_MODULE_3__core_vendor__["a" /* default */].Uint8Array,
          'short': __WEBPACK_IMPORTED_MODULE_3__core_vendor__["a" /* default */].Int16Array,
          'ushort': __WEBPACK_IMPORTED_MODULE_3__core_vendor__["a" /* default */].Uint16Array
      })[type] || __WEBPACK_IMPORTED_MODULE_3__core_vendor__["a" /* default */].Float32Array;
  }

  function makeAttrKey(attrName) {
      return 'attr_' + attrName;
  }
  /**
   * GeometryBase attribute
   * @alias clay.GeometryBase.Attribute
   * @constructor
   */
  function Attribute(name, type, size, semantic) {
      /**
       * Attribute name
       * @type {string}
       */
      this.name = name;
      /**
       * Attribute type
       * Possible values:
       *  + `'byte'`
       *  + `'ubyte'`
       *  + `'short'`
       *  + `'ushort'`
       *  + `'float'` Most commonly used.
       * @type {string}
       */
      this.type = type;
      /**
       * Size of attribute component. 1 - 4.
       * @type {number}
       */
      this.size = size;
      /**
       * Semantic of this attribute.
       * Possible values:
       *  + `'POSITION'`
       *  + `'NORMAL'`
       *  + `'BINORMAL'`
       *  + `'TANGENT'`
       *  + `'TEXCOORD'`
       *  + `'TEXCOORD_0'`
       *  + `'TEXCOORD_1'`
       *  + `'COLOR'`
       *  + `'JOINT'`
       *  + `'WEIGHT'`
       *
       * In shader, attribute with same semantic will be automatically mapped. For example:
       * ```glsl
       * attribute vec3 pos: POSITION
       * ```
       * will use the attribute value with semantic POSITION in geometry, no matter what name it used.
       * @type {string}
       */
      this.semantic = semantic || '';

      /**
       * Value of the attribute.
       * @type {TypedArray}
       */
      this.value = null;

      // Init getter setter
      switch (size) {
          case 1:
              this.get = function (idx) {
                  return this.value[idx];
              };
              this.set = function (idx, value) {
                  this.value[idx] = value;
              };
              // Copy from source to target
              this.copy = function (target, source) {
                  this.value[target] = this.value[target];
              };
              break;
          case 2:
              this.get = function (idx, out) {
                  var arr = this.value;
                  out[0] = arr[idx * 2];
                  out[1] = arr[idx * 2 + 1];
                  return out;
              };
              this.set = function (idx, val) {
                  var arr = this.value;
                  arr[idx * 2] = val[0];
                  arr[idx * 2 + 1] = val[1];
              };
              this.copy = function (target, source) {
                  var arr = this.value;
                  source *= 2;
                  target *= 2;
                  arr[target] = arr[source];
                  arr[target + 1] = arr[source + 1];
              };
              break;
          case 3:
              this.get = function (idx, out) {
                  var idx3 = idx * 3;
                  var arr = this.value;
                  out[0] = arr[idx3];
                  out[1] = arr[idx3 + 1];
                  out[2] = arr[idx3 + 2];
                  return out;
              };
              this.set = function (idx, val) {
                  var idx3 = idx * 3;
                  var arr = this.value;
                  arr[idx3] = val[0];
                  arr[idx3 + 1] = val[1];
                  arr[idx3 + 2] = val[2];
              };
              this.copy = function (target, source) {
                  var arr = this.value;
                  source *= 3;
                  target *= 3;
                  arr[target] = arr[source];
                  arr[target + 1] = arr[source + 1];
                  arr[target + 2] = arr[source + 2];
              };
              break;
          case 4:
              this.get = function (idx, out) {
                  var arr = this.value;
                  var idx4 = idx * 4;
                  out[0] = arr[idx4];
                  out[1] = arr[idx4 + 1];
                  out[2] = arr[idx4 + 2];
                  out[3] = arr[idx4 + 3];
                  return out;
              };
              this.set = function (idx, val) {
                  var arr = this.value;
                  var idx4 = idx * 4;
                  arr[idx4] = val[0];
                  arr[idx4 + 1] = val[1];
                  arr[idx4 + 2] = val[2];
                  arr[idx4 + 3] = val[3];
              };
              this.copy = function (target, source) {
                  var arr = this.value;
                  source *= 4;
                  target *= 4;
                  // copyWithin is extremely slow
                  arr[target] = arr[source];
                  arr[target + 1] = arr[source + 1];
                  arr[target + 2] = arr[source + 2];
                  arr[target + 3] = arr[source + 3];
              };
      }
  }

  /**
   * Set item value at give index. Second parameter val is number if size is 1
   * @function
   * @name clay.GeometryBase.Attribute#set
   * @param {number} idx
   * @param {number[]|number} val
   * @example
   * geometry.getAttribute('position').set(0, [1, 1, 1]);
   */

  /**
   * Get item value at give index. Second parameter out is no need if size is 1
   * @function
   * @name clay.GeometryBase.Attribute#set
   * @param {number} idx
   * @param {number[]} [out]
   * @example
   * geometry.getAttribute('position').get(0, out);
   */

  /**
   * Initialize attribute with given vertex count
   * @param {number} nVertex
   */
  Attribute.prototype.init = function (nVertex) {
      if (!this.value || this.value.length !== nVertex * this.size) {
          var ArrayConstructor = getArrayCtorByType(this.type);
          this.value = new ArrayConstructor(nVertex * this.size);
      }
  };

  /**
   * Initialize attribute with given array. Which can be 1 dimensional or 2 dimensional
   * @param {Array} array
   * @example
   *  geometry.getAttribute('position').fromArray(
   *      [-1, 0, 0, 1, 0, 0, 0, 1, 0]
   *  );
   *  geometry.getAttribute('position').fromArray(
   *      [ [-1, 0, 0], [1, 0, 0], [0, 1, 0] ]
   *  );
   */
  Attribute.prototype.fromArray = function (array) {
      var ArrayConstructor = getArrayCtorByType(this.type);
      var value;
      // Convert 2d array to flat
      if (array[0] && (array[0].length)) {
          var n = 0;
          var size = this.size;
          value = new ArrayConstructor(array.length * size);
          for (var i = 0; i < array.length; i++) {
              for (var j = 0; j < size; j++) {
                  value[n++] = array[i][j];
              }
          }
      }
      else {
          value = new ArrayConstructor(array);
      }
      this.value = value;
  };

  Attribute.prototype.clone = function(copyValue) {
      var ret = new Attribute(this.name, this.type, this.size, this.semantic);
      // FIXME
      if (copyValue) {
          console.warn('todo');
      }
      return ret;
  };

  function AttributeBuffer(name, type, buffer, size, semantic) {
      this.name = name;
      this.type = type;
      this.buffer = buffer;
      this.size = size;
      this.semantic = semantic;

      // To be set in mesh
      // symbol in the shader
      this.symbol = '';

      // Needs remove flag
      this.needsRemove = false;
  }

  function IndicesBuffer(buffer) {
      this.buffer = buffer;
      this.count = 0;
  }

  /**
   * Base of all geometry. Use {@link clay.Geometry} for common 3D usage.
   * @constructor clay.GeometryBase
   * @extends clay.core.Base
   */
  var GeometryBase = __WEBPACK_IMPORTED_MODULE_0__core_Base__["a" /* default */].extend(function () {
      return /** @lends clay.GeometryBase# */ {
          /**
           * Attributes of geometry.
           * @type {Object.<string, clay.GeometryBase.Attribute>}
           */
          attributes: {},

          /**
           * Indices of geometry.
           * @type {Uint16Array|Uint32Array}
           */
          indices: null,

          /**
           * Is vertices data dynamically updated.
           * Attributes value can't be changed after first render if dyanmic is false.
           * @type {boolean}
           */
          dynamic: true,

          _enabledAttributes: null,

          // PENDING
          // Init it here to avoid deoptimization when it's assigned in application dynamically
          __used: 0
      };
  }, function () {
      // Use cache
      this._cache = new __WEBPACK_IMPORTED_MODULE_2__core_Cache__["a" /* default */]();

      this._attributeList = Object.keys(this.attributes);

      this.__vaoCache = {};
  },
  /** @lends clay.GeometryBase.prototype */
  {
      /**
       * Main attribute will be used to count vertex number
       * @type {string}
       */
      mainAttribute: '',
      /**
       * User defined picking algorithm instead of default
       * triangle ray intersection
       * x, y are NDC.
       * ```typescript
       * (x, y, renderer, camera, renderable, out) => boolean
       * ```
       * @type {?Function}
       */
      pick: null,

      /**
       * User defined ray picking algorithm instead of default
       * triangle ray intersection
       * ```typescript
       * (ray: clay.Ray, renderable: clay.Renderable, out: Array) => boolean
       * ```
       * @type {?Function}
       */
      pickByRay: null,

      /**
       * Mark attributes and indices in geometry needs to update.
       * Usually called after you change the data in attributes.
       */
      dirty: function () {
          var enabledAttributes = this.getEnabledAttributes();
          for (var i = 0; i < enabledAttributes.length; i++) {
              this.dirtyAttribute(enabledAttributes[i]);
          }
          this.dirtyIndices();
          this._enabledAttributes = null;

          this._cache.dirtyAll('any');
      },
      /**
       * Mark the indices needs to update.
       */
      dirtyIndices: function () {
          this._cache.dirtyAll('indices');
      },
      /**
       * Mark the attributes needs to update.
       * @param {string} [attrName]
       */
      dirtyAttribute: function (attrName) {
          this._cache.dirtyAll(makeAttrKey(attrName));
          this._cache.dirtyAll('attributes');
      },
      /**
       * Get indices of triangle at given index.
       * @param {number} idx
       * @param {Array.<number>} out
       * @return {Array.<number>}
       */
      getTriangleIndices: function (idx, out) {
          if (idx < this.triangleCount && idx >= 0) {
              if (!out) {
                  out = [];
              }
              var indices = this.indices;
              out[0] = indices[idx * 3];
              out[1] = indices[idx * 3 + 1];
              out[2] = indices[idx * 3 + 2];
              return out;
          }
      },

      /**
       * Set indices of triangle at given index.
       * @param {number} idx
       * @param {Array.<number>} arr
       */
      setTriangleIndices: function (idx, arr) {
          var indices = this.indices;
          indices[idx * 3] = arr[0];
          indices[idx * 3 + 1] = arr[1];
          indices[idx * 3 + 2] = arr[2];
      },

      isUseIndices: function () {
          return !!this.indices;
      },

      /**
       * Initialize indices from an array.
       * @param {Array} array
       */
      initIndicesFromArray: function (array) {
          var value;
          var ArrayConstructor = this.vertexCount > 0xffff
              ? __WEBPACK_IMPORTED_MODULE_3__core_vendor__["a" /* default */].Uint32Array : __WEBPACK_IMPORTED_MODULE_3__core_vendor__["a" /* default */].Uint16Array;
          // Convert 2d array to flat
          if (array[0] && (array[0].length)) {
              var n = 0;
              var size = 3;

              value = new ArrayConstructor(array.length * size);
              for (var i = 0; i < array.length; i++) {
                  for (var j = 0; j < size; j++) {
                      value[n++] = array[i][j];
                  }
              }
          }
          else {
              value = new ArrayConstructor(array);
          }

          this.indices = value;
      },
      /**
       * Create a new attribute
       * @param {string} name
       * @param {string} type
       * @param {number} size
       * @param {string} [semantic]
       */
      createAttribute: function (name, type, size, semantic) {
          var attrib = new Attribute(name, type, size, semantic);
          if (this.attributes[name]) {
              this.removeAttribute(name);
          }
          this.attributes[name] = attrib;
          this._attributeList.push(name);
          return attrib;
      },
      /**
       * Remove attribute
       * @param {string} name
       */
      removeAttribute: function (name) {
          var attributeList = this._attributeList;
          var idx = attributeList.indexOf(name);
          if (idx >= 0) {
              attributeList.splice(idx, 1);
              delete this.attributes[name];
              return true;
          }
          return false;
      },

      /**
       * Get attribute
       * @param {string} name
       * @return {clay.GeometryBase.Attribute}
       */
      getAttribute: function (name) {
          return this.attributes[name];
      },

      /**
       * Get enabled attributes name list
       * Attribute which has the same vertex number with position is treated as a enabled attribute
       * @return {string[]}
       */
      getEnabledAttributes: function () {
          var enabledAttributes = this._enabledAttributes;
          var attributeList = this._attributeList;
          // Cache
          if (enabledAttributes) {
              return enabledAttributes;
          }

          var result = [];
          var nVertex = this.vertexCount;

          for (var i = 0; i < attributeList.length; i++) {
              var name = attributeList[i];
              var attrib = this.attributes[name];
              if (attrib.value) {
                  if (attrib.value.length === nVertex * attrib.size) {
                      result.push(name);
                  }
              }
          }

          this._enabledAttributes = result;

          return result;
      },

      getBufferChunks: function (renderer) {
          var cache = this._cache;
          cache.use(renderer.__uid__);
          var isAttributesDirty = cache.isDirty('attributes');
          var isIndicesDirty = cache.isDirty('indices');
          if (isAttributesDirty || isIndicesDirty) {
              this._updateBuffer(renderer.gl, isAttributesDirty, isIndicesDirty);
              var enabledAttributes = this.getEnabledAttributes();
              for (var i = 0; i < enabledAttributes.length; i++) {
                  cache.fresh(makeAttrKey(enabledAttributes[i]));
              }
              cache.fresh('attributes');
              cache.fresh('indices');
          }
          cache.fresh('any');
          return cache.get('chunks');
      },

      _updateBuffer: function (_gl, isAttributesDirty, isIndicesDirty) {
          var cache = this._cache;
          var chunks = cache.get('chunks');
          var firstUpdate = false;
          if (!chunks) {
              chunks = [];
              // Intialize
              chunks[0] = {
                  attributeBuffers: [],
                  indicesBuffer: null
              };
              cache.put('chunks', chunks);
              firstUpdate = true;
          }

          var chunk = chunks[0];
          var attributeBuffers = chunk.attributeBuffers;
          var indicesBuffer = chunk.indicesBuffer;

          if (isAttributesDirty || firstUpdate) {
              var attributeList = this.getEnabledAttributes();

              var attributeBufferMap = {};
              if (!firstUpdate) {
                  for (var i = 0; i < attributeBuffers.length; i++) {
                      attributeBufferMap[attributeBuffers[i].name] = attributeBuffers[i];
                  }
              }
              // FIXME If some attributes removed
              for (var k = 0; k < attributeList.length; k++) {
                  var name = attributeList[k];
                  var attribute = this.attributes[name];

                  var bufferInfo;

                  if (!firstUpdate) {
                      bufferInfo = attributeBufferMap[name];
                  }
                  var buffer;
                  if (bufferInfo) {
                      buffer = bufferInfo.buffer;
                  }
                  else {
                      buffer = _gl.createBuffer();
                  }
                  if (cache.isDirty(makeAttrKey(name))) {
                      // Only update when they are dirty.
                      // TODO: Use BufferSubData?
                      _gl.bindBuffer(_gl.ARRAY_BUFFER, buffer);
                      _gl.bufferData(_gl.ARRAY_BUFFER, attribute.value, this.dynamic ? _gl.DYNAMIC_DRAW : _gl.STATIC_DRAW);
                  }

                  attributeBuffers[k] = new AttributeBuffer(name, attribute.type, buffer, attribute.size, attribute.semantic);
              }
              // Remove unused attributes buffers.
              // PENDING
              for (var i = k; i < attributeBuffers.length; i++) {
                  _gl.deleteBuffer(attributeBuffers[i].buffer);
              }
              attributeBuffers.length = k;

          }

          if (this.isUseIndices() && (isIndicesDirty || firstUpdate)) {
              if (!indicesBuffer) {
                  indicesBuffer = new IndicesBuffer(_gl.createBuffer());
                  chunk.indicesBuffer = indicesBuffer;
              }
              indicesBuffer.count = this.indices.length;
              _gl.bindBuffer(_gl.ELEMENT_ARRAY_BUFFER, indicesBuffer.buffer);
              _gl.bufferData(_gl.ELEMENT_ARRAY_BUFFER, this.indices, this.dynamic ? _gl.DYNAMIC_DRAW : _gl.STATIC_DRAW);
          }
      },

      /**
       * Dispose geometry data in GL context.
       * @param {clay.Renderer} renderer
       */
      dispose: function (renderer) {

          var cache = this._cache;

          cache.use(renderer.__uid__);
          var chunks = cache.get('chunks');
          if (chunks) {
              for (var c = 0; c < chunks.length; c++) {
                  var chunk = chunks[c];

                  for (var k = 0; k < chunk.attributeBuffers.length; k++) {
                      var attribs = chunk.attributeBuffers[k];
                      renderer.gl.deleteBuffer(attribs.buffer);
                  }

                  if (chunk.indicesBuffer) {
                      renderer.gl.deleteBuffer(chunk.indicesBuffer.buffer);
                  }
              }
          }
          if (this.__vaoCache) {
              var vaoExt = renderer.getGLExtension('OES_vertex_array_object');
              for (var id in this.__vaoCache) {
                  var vao = this.__vaoCache[id].vao;
                  if (vao) {
                      vaoExt.deleteVertexArrayOES(vao);
                  }
              }
          }
          this.__vaoCache = {};
          cache.deleteContext(renderer.__uid__);
      }

  });

  if (Object.defineProperty) {
      /**
       * @name clay.GeometryBase#vertexCount
       * @type {number}
       * @readOnly
       */
      Object.defineProperty(GeometryBase.prototype, 'vertexCount', {

          enumerable: false,

          get: function () {

              var mainAttribute = this.attributes[this.mainAttribute];

              if (!mainAttribute) {
                  mainAttribute = this.attributes[this._attributeList[0]];
              }

              if (!mainAttribute || !mainAttribute.value) {
                  return 0;
              }
              return mainAttribute.value.length / mainAttribute.size;
          }
      });
      /**
       * @name clay.GeometryBase#triangleCount
       * @type {number}
       * @readOnly
       */
      Object.defineProperty(GeometryBase.prototype, 'triangleCount', {

          enumerable: false,

          get: function () {
              var indices = this.indices;
              if (!indices) {
                  return 0;
              }
              else {
                  return indices.length / 3;
              }
          }
      });
  }

  GeometryBase.STATIC_DRAW = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].STATIC_DRAW;
  GeometryBase.DYNAMIC_DRAW = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].DYNAMIC_DRAW;
  GeometryBase.STREAM_DRAW = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].STREAM_DRAW;

  GeometryBase.AttributeBuffer = AttributeBuffer;
  GeometryBase.IndicesBuffer = IndicesBuffer;

  GeometryBase.Attribute = Attribute;

  /* harmony default export */ __webpack_exports__["a"] = (GeometryBase);


  /***/ }),
  /* 118 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__calcAmbientSHLight_glsl_js__ = __webpack_require__(119);


  var uniformVec3Prefix = 'uniform vec3 ';
  var uniformFloatPrefix = 'uniform float ';
  var exportHeaderPrefix = '@export clay.header.';
  var exportEnd = '@end';
  var unconfigurable = ':unconfigurable;';
  /* harmony default export */ __webpack_exports__["a"] = ([
      exportHeaderPrefix + 'directional_light',
      uniformVec3Prefix + 'directionalLightDirection[DIRECTIONAL_LIGHT_COUNT]' + unconfigurable,
      uniformVec3Prefix + 'directionalLightColor[DIRECTIONAL_LIGHT_COUNT]' + unconfigurable,
      exportEnd,

      exportHeaderPrefix + 'ambient_light',
      uniformVec3Prefix + 'ambientLightColor[AMBIENT_LIGHT_COUNT]' + unconfigurable,
      exportEnd,

      exportHeaderPrefix + 'ambient_sh_light',
      uniformVec3Prefix + 'ambientSHLightColor[AMBIENT_SH_LIGHT_COUNT]' + unconfigurable,
      uniformVec3Prefix + 'ambientSHLightCoefficients[AMBIENT_SH_LIGHT_COUNT * 9]' + unconfigurable,
      __WEBPACK_IMPORTED_MODULE_0__calcAmbientSHLight_glsl_js__["a" /* default */],
      exportEnd,

      exportHeaderPrefix + 'ambient_cubemap_light',
      uniformVec3Prefix + 'ambientCubemapLightColor[AMBIENT_CUBEMAP_LIGHT_COUNT]' + unconfigurable,
      'uniform samplerCube ambientCubemapLightCubemap[AMBIENT_CUBEMAP_LIGHT_COUNT]' + unconfigurable,
      'uniform sampler2D ambientCubemapLightBRDFLookup[AMBIENT_CUBEMAP_LIGHT_COUNT]' + unconfigurable,
      exportEnd,

      exportHeaderPrefix + 'point_light',
      uniformVec3Prefix + 'pointLightPosition[POINT_LIGHT_COUNT]' + unconfigurable,
      uniformFloatPrefix + 'pointLightRange[POINT_LIGHT_COUNT]' + unconfigurable,
      uniformVec3Prefix + 'pointLightColor[POINT_LIGHT_COUNT]' + unconfigurable,
      exportEnd,

      exportHeaderPrefix + 'spot_light',
      uniformVec3Prefix + 'spotLightPosition[SPOT_LIGHT_COUNT]' + unconfigurable,
      uniformVec3Prefix + 'spotLightDirection[SPOT_LIGHT_COUNT]' + unconfigurable,
      uniformFloatPrefix + 'spotLightRange[SPOT_LIGHT_COUNT]' + unconfigurable,
      uniformFloatPrefix + 'spotLightUmbraAngleCosine[SPOT_LIGHT_COUNT]' + unconfigurable,
      uniformFloatPrefix + 'spotLightPenumbraAngleCosine[SPOT_LIGHT_COUNT]' + unconfigurable,
      uniformFloatPrefix + 'spotLightFalloffFactor[SPOT_LIGHT_COUNT]' + unconfigurable,
      uniformVec3Prefix + 'spotLightColor[SPOT_LIGHT_COUNT]' + unconfigurable,
      exportEnd
  ].join('\n'));


  /***/ }),
  /* 119 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("vec3 calcAmbientSHLight(int idx, vec3 N) {\n int offset = 9 * idx;\n return ambientSHLightCoefficients[0]\n + ambientSHLightCoefficients[1] * N.x\n + ambientSHLightCoefficients[2] * N.y\n + ambientSHLightCoefficients[3] * N.z\n + ambientSHLightCoefficients[4] * N.x * N.z\n + ambientSHLightCoefficients[5] * N.z * N.y\n + ambientSHLightCoefficients[6] * N.y * N.x\n + ambientSHLightCoefficients[7] * (3.0 * N.z * N.z - 1.0)\n + ambientSHLightCoefficients[8] * (N.x * N.x - N.y * N.y);\n}");


  /***/ }),
  /* 120 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("@export clay.skybox.vertex\n#define SHADER_NAME skybox\nuniform mat4 world : WORLD;\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nattribute vec3 position : POSITION;\nvarying vec3 v_WorldPosition;\nvoid main()\n{\n v_WorldPosition = (world * vec4(position, 1.0)).xyz;\n gl_Position = worldViewProjection * vec4(position, 1.0);\n}\n@end\n@export clay.skybox.fragment\n#define PI 3.1415926\nuniform mat4 viewInverse : VIEWINVERSE;\n#ifdef EQUIRECTANGULAR\nuniform sampler2D environmentMap;\n#else\nuniform samplerCube environmentMap;\n#endif\nuniform float lod: 0.0;\nvarying vec3 v_WorldPosition;\n@import clay.util.rgbm\n@import clay.util.srgb\n@import clay.util.ACES\nvoid main()\n{\n vec3 eyePos = viewInverse[3].xyz;\n vec3 V = normalize(v_WorldPosition - eyePos);\n#ifdef EQUIRECTANGULAR\n float phi = acos(V.y);\n float theta = atan(-V.x, V.z) + PI * 0.5;\n vec2 uv = vec2(theta / 2.0 / PI, phi / PI);\n vec4 texel = decodeHDR(texture2D(environmentMap, fract(uv)));\n#else\n #if defined(LOD) || defined(SUPPORT_TEXTURE_LOD)\n vec4 texel = decodeHDR(textureCubeLodEXT(environmentMap, V, lod));\n #else\n vec4 texel = decodeHDR(textureCube(environmentMap, V));\n #endif\n#endif\n#ifdef SRGB_DECODE\n texel = sRGBToLinear(texel);\n#endif\n#ifdef TONEMAPPING\n texel.rgb = ACESToneMapping(texel.rgb);\n#endif\n#ifdef SRGB_ENCODE\n texel = linearTosRGB(texel);\n#endif\n gl_FragColor = encodeHDR(vec4(texel.rgb, 1.0));\n}\n@end");


  /***/ }),
  /* 121 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Texture__ = __webpack_require__(4);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Texture2D__ = __webpack_require__(5);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__TextureCube__ = __webpack_require__(27);




  // http://msdn.microsoft.com/en-us/library/windows/desktop/bb943991(v=vs.85).aspx
  // https://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js
  var DDS_MAGIC = 0x20534444;
  var DDSD_MIPMAPCOUNT = 0x20000;

  var DDSCAPS2_CUBEMAP = 0x200;
  var DDPF_FOURCC = 0x4;

  function fourCCToInt32(value) {
      return value.charCodeAt(0) +
          (value.charCodeAt(1) << 8) +
          (value.charCodeAt(2) << 16) +
          (value.charCodeAt(3) << 24);
  }

  var headerLengthInt = 31; // The header length in 32 bit ints

  var FOURCC_DXT1 = fourCCToInt32('DXT1');
  var FOURCC_DXT3 = fourCCToInt32('DXT3');
  var FOURCC_DXT5 = fourCCToInt32('DXT5');
  // Offsets into the header array
  var off_magic = 0;

  var off_size = 1;
  var off_flags = 2;
  var off_height = 3;
  var off_width = 4;

  var off_mipmapCount = 7;

  var off_pfFlags = 20;
  var off_pfFourCC = 21;
  var off_caps2 = 28;

  var ret = {
      parse: function(arraybuffer, out) {
          var header = new Int32Array(arraybuffer, 0, headerLengthInt);
          if (header[off_magic] !== DDS_MAGIC) {
              return null;
          }
          if (!header(off_pfFlags) & DDPF_FOURCC) {
              return null;
          }

          var fourCC = header(off_pfFourCC);
          var width = header[off_width];
          var height = header[off_height];
          var isCubeMap = header[off_caps2] & DDSCAPS2_CUBEMAP;
          var hasMipmap = header[off_flags] & DDSD_MIPMAPCOUNT;
          var blockBytes, internalFormat;
          switch(fourCC) {
              case FOURCC_DXT1:
                  blockBytes = 8;
                  internalFormat = __WEBPACK_IMPORTED_MODULE_0__Texture__["a" /* default */].COMPRESSED_RGB_S3TC_DXT1_EXT;
                  break;
              case FOURCC_DXT3:
                  blockBytes = 16;
                  internalFormat = __WEBPACK_IMPORTED_MODULE_0__Texture__["a" /* default */].COMPRESSED_RGBA_S3TC_DXT3_EXT;
                  break;
              case FOURCC_DXT5:
                  blockBytes = 16;
                  internalFormat = __WEBPACK_IMPORTED_MODULE_0__Texture__["a" /* default */].COMPRESSED_RGBA_S3TC_DXT5_EXT;
                  break;
              default:
                  return null;
          }
          var dataOffset = header[off_size] + 4;
          // TODO: Suppose all face are existed
          var faceNumber = isCubeMap ? 6 : 1;
          var mipmapCount = 1;
          if (hasMipmap) {
              mipmapCount = Math.max(1, header[off_mipmapCount]);
          }

          var textures = [];
          for (var f = 0; f < faceNumber; f++) {
              var _width = width;
              var _height = height;
              textures[f] = new __WEBPACK_IMPORTED_MODULE_1__Texture2D__["a" /* default */]({
                  width: _width,
                  height: _height,
                  format: internalFormat
              });
              var mipmaps = [];
              for (var i = 0; i < mipmapCount; i++) {
                  var dataLength = Math.max(4, _width) / 4 * Math.max(4, _height) / 4 * blockBytes;
                  var byteArray = new Uint8Array(arraybuffer, dataOffset, dataLength);

                  dataOffset += dataLength;
                  _width *= 0.5;
                  _height *= 0.5;
                  mipmaps[i] = byteArray;
              }
              textures[f].pixels = mipmaps[0];
              if (hasMipmap) {
                  textures[f].mipmaps = mipmaps;
              }
          }
          // TODO
          // return isCubeMap ? textures : textures[0];
          if (out) {
              out.width = textures[0].width;
              out.height = textures[0].height;
              out.format = textures[0].format;
              out.pixels = textures[0].pixels;
              out.mipmaps = textures[0].mipmaps;
          }
          else {
              return textures[0];
          }
      }
  };

  /* harmony default export */ __webpack_exports__["a"] = (ret);


  /***/ }),
  /* 122 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Texture__ = __webpack_require__(4);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Texture2D__ = __webpack_require__(5);


  var toChar = String.fromCharCode;

  var MINELEN = 8;
  var MAXELEN = 0x7fff;
  function rgbe2float(rgbe, buffer, offset, exposure) {
      if (rgbe[3] > 0) {
          var f = Math.pow(2.0, rgbe[3] - 128 - 8 + exposure);
          buffer[offset + 0] = rgbe[0] * f;
          buffer[offset + 1] = rgbe[1] * f;
          buffer[offset + 2] = rgbe[2] * f;
      }
      else {
          buffer[offset + 0] = 0;
          buffer[offset + 1] = 0;
          buffer[offset + 2] = 0;
      }
      buffer[offset + 3] = 1.0;
      return buffer;
  }

  function uint82string(array, offset, size) {
      var str = '';
      for (var i = offset; i < size; i++) {
          str += toChar(array[i]);
      }
      return str;
  }

  function copyrgbe(s, t) {
      t[0] = s[0];
      t[1] = s[1];
      t[2] = s[2];
      t[3] = s[3];
  }

  // TODO : check
  function oldReadColors(scan, buffer, offset, xmax) {
      var rshift = 0, x = 0, len = xmax;
      while (len > 0) {
          scan[x][0] = buffer[offset++];
          scan[x][1] = buffer[offset++];
          scan[x][2] = buffer[offset++];
          scan[x][3] = buffer[offset++];
          if (scan[x][0] === 1 && scan[x][1] === 1 && scan[x][2] === 1) {
              // exp is count of repeated pixels
              for (var i = (scan[x][3] << rshift) >>> 0; i > 0; i--) {
                  copyrgbe(scan[x-1], scan[x]);
                  x++;
                  len--;
              }
              rshift += 8;
          } else {
              x++;
              len--;
              rshift = 0;
          }
      }
      return offset;
  }

  function readColors(scan, buffer, offset, xmax) {
      if ((xmax < MINELEN) | (xmax > MAXELEN)) {
          return oldReadColors(scan, buffer, offset, xmax);
      }
      var i = buffer[offset++];
      if (i != 2) {
          return oldReadColors(scan, buffer, offset - 1, xmax);
      }
      scan[0][1] = buffer[offset++];
      scan[0][2] = buffer[offset++];

      i = buffer[offset++];
      if ((((scan[0][2] << 8) >>> 0) | i) >>> 0 !== xmax) {
          return null;
      }
      for (var i = 0; i < 4; i++) {
          for (var x = 0; x < xmax;) {
              var code = buffer[offset++];
              if (code > 128) {
                  code = (code & 127) >>> 0;
                  var val = buffer[offset++];
                  while (code--) {
                      scan[x++][i] = val;
                  }
              } else {
                  while (code--) {
                      scan[x++][i] = buffer[offset++];
                  }
              }
          }
      }
      return offset;
  }


  var ret = {
      // http://www.graphics.cornell.edu/~bjw/rgbe.html
      // Blender source
      // http://radsite.lbl.gov/radiance/refer/Notes/picture_format.html
      parseRGBE: function(arrayBuffer, texture, exposure) {
          if (exposure == null) {
              exposure = 0;
          }
          var data = new Uint8Array(arrayBuffer);
          var size = data.length;
          if (uint82string(data, 0, 2) !== '#?') {
              return;
          }
          // find empty line, next line is resolution info
          for (var i = 2; i < size; i++) {
              if (toChar(data[i]) === '\n' && toChar(data[i+1]) === '\n') {
                  break;
              }
          }
          if (i >= size) { // not found
              return;
          }
          // find resolution info line
          i += 2;
          var str = '';
          for (; i < size; i++) {
              var _char = toChar(data[i]);
              if (_char === '\n') {
                  break;
              }
              str += _char;
          }
          // -Y M +X N
          var tmp = str.split(' ');
          var height = parseInt(tmp[1]);
          var width = parseInt(tmp[3]);
          if (!width || !height) {
              return;
          }

          // read and decode actual data
          var offset = i+1;
          var scanline = [];
          // memzero
          for (var x = 0; x < width; x++) {
              scanline[x] = [];
              for (var j = 0; j < 4; j++) {
                  scanline[x][j] = 0;
              }
          }
          var pixels = new Float32Array(width * height * 4);
          var offset2 = 0;
          for (var y = 0; y < height; y++) {
              var offset = readColors(scanline, data, offset, width);
              if (!offset) {
                  return null;
              }
              for (var x = 0; x < width; x++) {
                  rgbe2float(scanline[x], pixels, offset2, exposure);
                  offset2 += 4;
              }
          }

          if (!texture) {
              texture = new __WEBPACK_IMPORTED_MODULE_1__Texture2D__["a" /* default */]();
          }
          texture.width = width;
          texture.height = height;
          texture.pixels = pixels;
          // HALF_FLOAT can't use Float32Array
          texture.type = __WEBPACK_IMPORTED_MODULE_0__Texture__["a" /* default */].FLOAT;
          return texture;
      },

      parseRGBEFromPNG: function(png) {

      }
  };

  /* harmony default export */ __webpack_exports__["a"] = (ret);


  /***/ }),
  /* 123 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_claygl_src_Texture2D__ = __webpack_require__(5);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_claygl_src_math_Vector3__ = __webpack_require__(3);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_claygl_src_math_Vector2__ = __webpack_require__(26);
  /**
   * Surface texture in the 3D scene.
   * Provide management and rendering of zrender shapes and groups
   *
   * @module echarts-gl/util/EChartsSurface
   * @author Yi Shen(http://github.com/pissang)
   */





  var events = ['mousedown', 'mouseup', 'mousemove', 'mouseover', 'mouseout', 'click', 'dblclick', 'contextmenu'];

  function makeHandlerName(eventName) {
      return '_on' + eventName;
  }
  /**
   * @constructor
   * @alias echarts-gl/util/EChartsSurface
   * @param {module:echarts~ECharts} chart
   */
  var EChartsSurface = function (chart) {
      var self = this;
      this._texture = new __WEBPACK_IMPORTED_MODULE_0_claygl_src_Texture2D__["a" /* default */]({
          anisotropic: 32,
          flipY: false,

          surface: this,

          dispose: function (renderer) {
              self.dispose();
              __WEBPACK_IMPORTED_MODULE_0_claygl_src_Texture2D__["a" /* default */].prototype.dispose.call(this, renderer);
          }
      });

      events.forEach(function (eventName) {
          this[makeHandlerName(eventName)] = function (eveObj) {
              if (!eveObj.triangle) {
                  return;
              }
              this._meshes.forEach(function (mesh) {
                  this.dispatchEvent(eventName, mesh, eveObj.triangle, eveObj.point);
              }, this);
          };
      }, this);

      this._meshes = [];

      if (chart) {
          this.setECharts(chart);
      }

      // Texture updated callback;
      this.onupdate = null;
  };

  EChartsSurface.prototype = {

      constructor: EChartsSurface,

      getTexture: function () {
          return this._texture;
      },

      setECharts: function (chart) {
          this._chart = chart;

          var canvas = chart.getDom();
          if (!(canvas instanceof HTMLCanvasElement)) {
              console.error('ECharts must init on canvas if it is used as texture.');
              // Use an empty canvas
              canvas = document.createElement('canvas');
          }
          else {
              var self = this;
              // Wrap refreshImmediately
              var zr = chart.getZr();
              var oldRefreshImmediately = zr.__oldRefreshImmediately || zr.refreshImmediately;
              zr.refreshImmediately = function () {
                  oldRefreshImmediately.call(this);
                  self._texture.dirty();

                  self.onupdate && self.onupdate();
              };
              zr.__oldRefreshImmediately = oldRefreshImmediately;
          }

          this._texture.image = canvas;
          this._texture.dirty();
          this.onupdate && this.onupdate();
      },

      /**
       * @method
       * @param {clay.Mesh} attachedMesh
       * @param {Array.<number>} triangle Triangle indices
       * @param {clay.math.Vector3} point
       */
      dispatchEvent: (function () {

          var p0 = new __WEBPACK_IMPORTED_MODULE_1_claygl_src_math_Vector3__["a" /* default */]();
          var p1 = new __WEBPACK_IMPORTED_MODULE_1_claygl_src_math_Vector3__["a" /* default */]();
          var p2 = new __WEBPACK_IMPORTED_MODULE_1_claygl_src_math_Vector3__["a" /* default */]();
          var uv0 = new __WEBPACK_IMPORTED_MODULE_2_claygl_src_math_Vector2__["a" /* default */]();
          var uv1 = new __WEBPACK_IMPORTED_MODULE_2_claygl_src_math_Vector2__["a" /* default */]();
          var uv2 = new __WEBPACK_IMPORTED_MODULE_2_claygl_src_math_Vector2__["a" /* default */]();
          var uv = new __WEBPACK_IMPORTED_MODULE_2_claygl_src_math_Vector2__["a" /* default */]();

          var vCross = new __WEBPACK_IMPORTED_MODULE_1_claygl_src_math_Vector3__["a" /* default */]();

          return function (eventName, attachedMesh, triangle, point) {
              var geo = attachedMesh.geometry;
              var position = geo.attributes.position;
              var texcoord = geo.attributes.texcoord0;
              var dot = __WEBPACK_IMPORTED_MODULE_1_claygl_src_math_Vector3__["a" /* default */].dot;
              var cross = __WEBPACK_IMPORTED_MODULE_1_claygl_src_math_Vector3__["a" /* default */].cross;

              position.get(triangle[0], p0.array);
              position.get(triangle[1], p1.array);
              position.get(triangle[2], p2.array);
              texcoord.get(triangle[0], uv0.array);
              texcoord.get(triangle[1], uv1.array);
              texcoord.get(triangle[2], uv2.array);

              cross(vCross, p1, p2);
              var det = dot(p0, vCross);
              var t = dot(point, vCross) / det;
              cross(vCross, p2, p0);
              var u = dot(point, vCross) / det;
              cross(vCross, p0, p1);
              var v = dot(point, vCross) / det;

              __WEBPACK_IMPORTED_MODULE_2_claygl_src_math_Vector2__["a" /* default */].scale(uv, uv0, t);
              __WEBPACK_IMPORTED_MODULE_2_claygl_src_math_Vector2__["a" /* default */].scaleAndAdd(uv, uv, uv1, u);
              __WEBPACK_IMPORTED_MODULE_2_claygl_src_math_Vector2__["a" /* default */].scaleAndAdd(uv, uv, uv2, v);

              var x = uv.x * this._chart.getWidth();
              var y = uv.y * this._chart.getHeight();
              this._chart.getZr().handler.dispatch(eventName, {
                  zrX: x,
                  zrY: y
              });
          };
      })(),

      attachToMesh: function (mesh) {
          if (this._meshes.indexOf(mesh) >= 0) {
              return;
          }

          events.forEach(function (eventName) {
              mesh.on(eventName, this[makeHandlerName(eventName)], this);
          }, this);

          this._meshes.push(mesh);
      },

      detachFromMesh: function (mesh) {
          var idx = this._meshes.indexOf(mesh);
          if (idx >= 0) {
              this._meshes.splice(idx, 1);
          }

          events.forEach(function (eventName) {
              mesh.off(eventName, this[makeHandlerName(eventName)]);
          }, this);
      },

      dispose: function () {
          this._meshes.forEach(function (mesh) {
              this.detachFromMesh(mesh);
          }, this);
      }
  };

  /* harmony default export */ __webpack_exports__["a"] = (EChartsSurface);

  /***/ }),
  /* 124 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Light__ = __webpack_require__(24);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_cubemap__ = __webpack_require__(77);
  // https://docs.unrealengine.com/latest/INT/Engine/Rendering/LightingAndShadows/AmbientCubemap/



  /**
   * Ambient cubemap light provides specular parts of Image Based Lighting.
   * Which is a basic requirement for Physically Based Rendering
   * @constructor clay.light.AmbientCubemap
   * @extends clay.Light
   */
  var AmbientCubemapLight = __WEBPACK_IMPORTED_MODULE_0__Light__["a" /* default */].extend({

      /**
       * @type {clay.TextureCube}
       * @memberOf clay.light.AmbientCubemap#
       */
      cubemap: null,

      // TODO
      // range: 100,

      castShadow: false,

      _normalDistribution: null,
      _brdfLookup: null

  }, /** @lends clay.light.AmbientCubemap# */ {

      type: 'AMBIENT_CUBEMAP_LIGHT',

      /**
       * Do prefitering the cubemap
       * @param {clay.Renderer} renderer
       * @param {number} [size=32]
       */
      prefilter: function (renderer, size) {
          if (!renderer.getGLExtension('EXT_shader_texture_lod')) {
              console.warn('Device not support textureCubeLodEXT');
              return;
          }
          if (!this._brdfLookup) {
              this._normalDistribution = __WEBPACK_IMPORTED_MODULE_1__util_cubemap__["a" /* default */].generateNormalDistribution();
              this._brdfLookup = __WEBPACK_IMPORTED_MODULE_1__util_cubemap__["a" /* default */].integrateBRDF(renderer, this._normalDistribution);
          }
          var cubemap = this.cubemap;
          if (cubemap.__prefiltered) {
              return;
          }

          var result = __WEBPACK_IMPORTED_MODULE_1__util_cubemap__["a" /* default */].prefilterEnvironmentMap(
              renderer, cubemap, {
                  encodeRGBM: true,
                  width: size,
                  height: size
              }, this._normalDistribution, this._brdfLookup
          );
          this.cubemap = result.environmentMap;
          this.cubemap.__prefiltered = true;

          cubemap.dispose(renderer);
      },

      getBRDFLookup: function () {
          return this._brdfLookup;
      },

      uniformTemplates: {
          ambientCubemapLightColor: {
              type: '3f',
              value: function (instance) {
                  var color = instance.color;
                  var intensity = instance.intensity;
                  return [color[0]*intensity, color[1]*intensity, color[2]*intensity];
              }
          },

          ambientCubemapLightCubemap: {
              type: 't',
              value: function (instance) {
                  return instance.cubemap;
              }
          },

          ambientCubemapLightBRDFLookup: {
              type: 't',
              value: function (instance) {
                  return instance._brdfLookup;
              }
          }
      }
      /**
       * @function
       * @name clone
       * @return {clay.light.AmbientCubemap}
       * @memberOf clay.light.AmbientCubemap.prototype
       */
  });

  /* harmony default export */ __webpack_exports__["a"] = (AmbientCubemapLight);


  /***/ }),
  /* 125 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("\n@export clay.compositor.vertex\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nattribute vec3 position : POSITION;\nattribute vec2 texcoord : TEXCOORD_0;\nvarying vec2 v_Texcoord;\nvoid main()\n{\n v_Texcoord = texcoord;\n gl_Position = worldViewProjection * vec4(position, 1.0);\n}\n@end");


  /***/ }),
  /* 126 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("#define SAMPLE_NUMBER 1024\n#define PI 3.14159265358979\nuniform sampler2D normalDistribution;\nuniform vec2 viewportSize : [512, 256];\nconst vec3 N = vec3(0.0, 0.0, 1.0);\nconst float fSampleNumber = float(SAMPLE_NUMBER);\nvec3 importanceSampleNormal(float i, float roughness, vec3 N) {\n vec3 H = texture2D(normalDistribution, vec2(roughness, i)).rgb;\n vec3 upVector = abs(N.y) > 0.999 ? vec3(1.0, 0.0, 0.0) : vec3(0.0, 1.0, 0.0);\n vec3 tangentX = normalize(cross(N, upVector));\n vec3 tangentZ = cross(N, tangentX);\n return normalize(tangentX * H.x + N * H.y + tangentZ * H.z);\n}\nfloat G_Smith(float roughness, float NoV, float NoL) {\n float k = roughness * roughness / 2.0;\n float G1V = NoV / (NoV * (1.0 - k) + k);\n float G1L = NoL / (NoL * (1.0 - k) + k);\n return G1L * G1V;\n}\nvoid main() {\n vec2 uv = gl_FragCoord.xy / viewportSize;\n float NoV = uv.x;\n float roughness = uv.y;\n vec3 V;\n V.x = sqrt(1.0 - NoV * NoV);\n V.y = 0.0;\n V.z = NoV;\n float A = 0.0;\n float B = 0.0;\n for (int i = 0; i < SAMPLE_NUMBER; i++) {\n vec3 H = importanceSampleNormal(float(i) / fSampleNumber, roughness, N);\n vec3 L = reflect(-V, H);\n float NoL = clamp(L.z, 0.0, 1.0);\n float NoH = clamp(H.z, 0.0, 1.0);\n float VoH = clamp(dot(V, H), 0.0, 1.0);\n if (NoL > 0.0) {\n float G = G_Smith(roughness, NoV, NoL);\n float G_Vis = G * VoH / (NoH * NoV);\n float Fc = pow(1.0 - VoH, 5.0);\n A += (1.0 - Fc) * G_Vis;\n B += Fc * G_Vis;\n }\n }\n gl_FragColor = vec4(vec2(A, B) / fSampleNumber, 0.0, 1.0);\n}\n");


  /***/ }),
  /* 127 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("#define SHADER_NAME prefilter\n#define SAMPLE_NUMBER 1024\n#define PI 3.14159265358979\nuniform mat4 viewInverse : VIEWINVERSE;\nuniform samplerCube environmentMap;\nuniform sampler2D normalDistribution;\nuniform float roughness : 0.5;\nvarying vec2 v_Texcoord;\nvarying vec3 v_WorldPosition;\n@import clay.util.rgbm\nvec3 importanceSampleNormal(float i, float roughness, vec3 N) {\n vec3 H = texture2D(normalDistribution, vec2(roughness, i)).rgb;\n vec3 upVector = abs(N.y) > 0.999 ? vec3(1.0, 0.0, 0.0) : vec3(0.0, 1.0, 0.0);\n vec3 tangentX = normalize(cross(N, upVector));\n vec3 tangentZ = cross(N, tangentX);\n return normalize(tangentX * H.x + N * H.y + tangentZ * H.z);\n}\nvoid main() {\n vec3 eyePos = viewInverse[3].xyz;\n vec3 V = normalize(v_WorldPosition - eyePos);\n vec3 N = V;\n vec3 prefilteredColor = vec3(0.0);\n float totalWeight = 0.0;\n float fMaxSampleNumber = float(SAMPLE_NUMBER);\n for (int i = 0; i < SAMPLE_NUMBER; i++) {\n vec3 H = importanceSampleNormal(float(i) / fMaxSampleNumber, roughness, N);\n vec3 L = reflect(-V, H);\n float NoL = clamp(dot(N, L), 0.0, 1.0);\n if (NoL > 0.0) {\n prefilteredColor += decodeHDR(textureCube(environmentMap, L)).rgb * NoL;\n totalWeight += NoL;\n }\n }\n gl_FragColor = encodeHDR(vec4(prefilteredColor / totalWeight, 1.0));\n}\n");


  /***/ }),
  /* 128 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Light__ = __webpack_require__(24);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_vendor__ = __webpack_require__(13);



  /**
   * Spherical Harmonic Ambient Light
   * @constructor clay.light.AmbientSH
   * @extends clay.Light
   */
  var AmbientSHLight = __WEBPACK_IMPORTED_MODULE_0__Light__["a" /* default */].extend({

      castShadow: false,

      /**
       * Spherical Harmonic Coefficients
       * @type {Array.<number>}
       * @memberOf clay.light.AmbientSH#
       */
      coefficients: [],

  }, function () {
      this._coefficientsTmpArr = new __WEBPACK_IMPORTED_MODULE_1__core_vendor__["a" /* default */].Float32Array(9 * 3);
  }, {

      type: 'AMBIENT_SH_LIGHT',

      uniformTemplates: {
          ambientSHLightColor: {
              type: '3f',
              value: function (instance) {
                  var color = instance.color;
                  var intensity = instance.intensity;
                  return [color[0] * intensity, color[1] * intensity, color[2] * intensity];
              }
          },

          ambientSHLightCoefficients: {
              type: '3f',
              value: function (instance) {
                  var coefficientsTmpArr = instance._coefficientsTmpArr;
                  for (var i = 0; i < instance.coefficients.length; i++) {
                      coefficientsTmpArr[i] = instance.coefficients[i];
                  }
                  return coefficientsTmpArr;
              }
          }
      }
      /**
       * @function
       * @name clone
       * @return {clay.light.Ambient}
       * @memberOf clay.light.Ambient.prototype
       */
  });

  /* harmony default export */ __webpack_exports__["a"] = (AmbientSHLight);


  /***/ }),
  /* 129 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Texture__ = __webpack_require__(4);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__FrameBuffer__ = __webpack_require__(10);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Texture2D__ = __webpack_require__(5);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__compositor_Pass__ = __webpack_require__(15);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_vendor__ = __webpack_require__(13);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__plugin_Skybox__ = __webpack_require__(42);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__plugin_Skydome__ = __webpack_require__(75);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__prePass_EnvironmentMap__ = __webpack_require__(61);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__Scene__ = __webpack_require__(36);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__glmatrix_vec3__ = __webpack_require__(12);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__shader_projectEnvMap_glsl_js__ = __webpack_require__(130);
  // Spherical Harmonic Helpers










  var sh = {};



  var targets = ['px', 'nx', 'py', 'ny', 'pz', 'nz'];

  function harmonics(normal, index){
      var x = normal[0];
      var y = normal[1];
      var z = normal[2];

      if (index === 0) {
          return 1.0;
      }
      else if (index === 1) {
          return x;
      }
      else if (index === 2) {
          return y;
      }
      else if (index === 3) {
          return z;
      }
      else if (index === 4) {
          return x * z;
      }
      else if (index === 5) {
          return y * z;
      }
      else if (index === 6) {
          return x * y;
      }
      else if (index === 7) {
          return 3.0 * z * z - 1.0;
      }
      else {
          return x * x - y * y;
      }
  }

  var normalTransform = {
      px: [2, 1, 0, -1, -1, 1],
      nx: [2, 1, 0, 1, -1, -1],
      py: [0, 2, 1, 1, -1, -1],
      ny: [0, 2, 1, 1, 1, 1],
      pz: [0, 1, 2, -1, -1, -1],
      nz: [0, 1, 2, 1, -1, 1]
  };

  // Project on cpu.
  function projectEnvironmentMapCPU(renderer, cubePixels, width, height) {
      var coeff = new __WEBPACK_IMPORTED_MODULE_4__core_vendor__["a" /* default */].Float32Array(9 * 3);
      var normal = __WEBPACK_IMPORTED_MODULE_9__glmatrix_vec3__["a" /* default */].create();
      var texel = __WEBPACK_IMPORTED_MODULE_9__glmatrix_vec3__["a" /* default */].create();
      var fetchNormal = __WEBPACK_IMPORTED_MODULE_9__glmatrix_vec3__["a" /* default */].create();
      for (var m = 0; m < 9; m++) {
          var result = __WEBPACK_IMPORTED_MODULE_9__glmatrix_vec3__["a" /* default */].create();
          for (var k = 0; k < targets.length; k++) {
              var pixels = cubePixels[targets[k]];

              var sideResult = __WEBPACK_IMPORTED_MODULE_9__glmatrix_vec3__["a" /* default */].create();
              var divider = 0;
              var i = 0;
              var transform = normalTransform[targets[k]];
              for (var y = 0; y < height; y++) {
                  for (var x = 0; x < width; x++) {

                      normal[0] = x / (width - 1.0) * 2.0 - 1.0;
                      // TODO Flip y?
                      normal[1] = y / (height - 1.0) * 2.0 - 1.0;
                      normal[2] = -1.0;
                      __WEBPACK_IMPORTED_MODULE_9__glmatrix_vec3__["a" /* default */].normalize(normal, normal);

                      fetchNormal[0] = normal[transform[0]] * transform[3];
                      fetchNormal[1] = normal[transform[1]] * transform[4];
                      fetchNormal[2] = normal[transform[2]] * transform[5];

                      texel[0] = pixels[i++] / 255;
                      texel[1] = pixels[i++] / 255;
                      texel[2] = pixels[i++] / 255;
                      // RGBM Decode
                      var scale = pixels[i++] / 255 * 8.12;
                      texel[0] *= scale;
                      texel[1] *= scale;
                      texel[2] *= scale;

                      __WEBPACK_IMPORTED_MODULE_9__glmatrix_vec3__["a" /* default */].scaleAndAdd(sideResult, sideResult, texel, harmonics(fetchNormal, m) * -normal[2]);
                      // -normal.z equals cos(theta) of Lambertian
                      divider += -normal[2];
                  }
              }
              __WEBPACK_IMPORTED_MODULE_9__glmatrix_vec3__["a" /* default */].scaleAndAdd(result, result, sideResult, 1 / divider);
          }

          coeff[m * 3] = result[0] / 6.0;
          coeff[m * 3 + 1] = result[1] / 6.0;
          coeff[m * 3 + 2] = result[2] / 6.0;
      }
      return coeff;
  }

  /**
   * @param  {clay.Renderer} renderer
   * @param  {clay.Texture} envMap
   * @param  {Object} [textureOpts]
   * @param  {Object} [textureOpts.lod]
   * @param  {boolean} [textureOpts.decodeRGBM]
   */
  sh.projectEnvironmentMap = function (renderer, envMap, opts) {

      // TODO sRGB

      opts = opts || {};
      opts.lod = opts.lod || 0;

      var skybox;
      var dummyScene = new __WEBPACK_IMPORTED_MODULE_8__Scene__["a" /* default */]();
      var size = 64;
      if (envMap.textureType === 'texture2D') {
          skybox = new __WEBPACK_IMPORTED_MODULE_6__plugin_Skydome__["a" /* default */]({
              scene: dummyScene,
              environmentMap: envMap
          });
      }
      else {
          size = (envMap.image && envMap.image.px) ? envMap.image.px.width : envMap.width;
          skybox = new __WEBPACK_IMPORTED_MODULE_5__plugin_Skybox__["a" /* default */]({
              scene: dummyScene,
              environmentMap: envMap
          });
      }
      // Convert to rgbm
      var width = Math.ceil(size / Math.pow(2, opts.lod));
      var height = Math.ceil(size / Math.pow(2, opts.lod));
      var rgbmTexture = new __WEBPACK_IMPORTED_MODULE_2__Texture2D__["a" /* default */]({
          width: width,
          height: height
      });
      var framebuffer = new __WEBPACK_IMPORTED_MODULE_1__FrameBuffer__["a" /* default */]();
      skybox.material.define('fragment', 'RGBM_ENCODE');
      if (opts.decodeRGBM) {
          skybox.material.define('fragment', 'RGBM_DECODE');
      }
      skybox.material.set('lod', opts.lod);
      var envMapPass = new __WEBPACK_IMPORTED_MODULE_7__prePass_EnvironmentMap__["a" /* default */]({
          texture: rgbmTexture
      });
      var cubePixels = {};
      for (var i = 0; i < targets.length; i++) {
          cubePixels[targets[i]] = new Uint8Array(width * height * 4);
          var camera = envMapPass.getCamera(targets[i]);
          camera.fov = 90;
          framebuffer.attach(rgbmTexture);
          framebuffer.bind(renderer);
          renderer.render(dummyScene, camera);
          renderer.gl.readPixels(
              0, 0, width, height,
              __WEBPACK_IMPORTED_MODULE_0__Texture__["a" /* default */].RGBA, __WEBPACK_IMPORTED_MODULE_0__Texture__["a" /* default */].UNSIGNED_BYTE, cubePixels[targets[i]]
          );
          framebuffer.unbind(renderer);
      }

      skybox.dispose(renderer);
      framebuffer.dispose(renderer);
      rgbmTexture.dispose(renderer);

      return projectEnvironmentMapCPU(renderer, cubePixels, width, height);
  };

  /* harmony default export */ __webpack_exports__["a"] = (sh);


  /***/ }),
  /* 130 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("uniform samplerCube environmentMap;\nvarying vec2 v_Texcoord;\n#define TEXTURE_SIZE 16\nmat3 front = mat3(\n 1.0, 0.0, 0.0,\n 0.0, 1.0, 0.0,\n 0.0, 0.0, 1.0\n);\nmat3 back = mat3(\n -1.0, 0.0, 0.0,\n 0.0, 1.0, 0.0,\n 0.0, 0.0, -1.0\n);\nmat3 left = mat3(\n 0.0, 0.0, -1.0,\n 0.0, 1.0, 0.0,\n 1.0, 0.0, 0.0\n);\nmat3 right = mat3(\n 0.0, 0.0, 1.0,\n 0.0, 1.0, 0.0,\n -1.0, 0.0, 0.0\n);\nmat3 up = mat3(\n 1.0, 0.0, 0.0,\n 0.0, 0.0, 1.0,\n 0.0, -1.0, 0.0\n);\nmat3 down = mat3(\n 1.0, 0.0, 0.0,\n 0.0, 0.0, -1.0,\n 0.0, 1.0, 0.0\n);\nfloat harmonics(vec3 normal){\n int index = int(gl_FragCoord.x);\n float x = normal.x;\n float y = normal.y;\n float z = normal.z;\n if(index==0){\n return 1.0;\n }\n else if(index==1){\n return x;\n }\n else if(index==2){\n return y;\n }\n else if(index==3){\n return z;\n }\n else if(index==4){\n return x*z;\n }\n else if(index==5){\n return y*z;\n }\n else if(index==6){\n return x*y;\n }\n else if(index==7){\n return 3.0*z*z - 1.0;\n }\n else{\n return x*x - y*y;\n }\n}\nvec3 sampleSide(mat3 rot)\n{\n vec3 result = vec3(0.0);\n float divider = 0.0;\n for (int i = 0; i < TEXTURE_SIZE * TEXTURE_SIZE; i++) {\n float x = mod(float(i), float(TEXTURE_SIZE));\n float y = float(i / TEXTURE_SIZE);\n vec2 sidecoord = ((vec2(x, y) + vec2(0.5, 0.5)) / vec2(TEXTURE_SIZE)) * 2.0 - 1.0;\n vec3 normal = normalize(vec3(sidecoord, -1.0));\n vec3 fetchNormal = rot * normal;\n vec3 texel = textureCube(environmentMap, fetchNormal).rgb;\n result += harmonics(fetchNormal) * texel * -normal.z;\n divider += -normal.z;\n }\n return result / divider;\n}\nvoid main()\n{\n vec3 result = (\n sampleSide(front) +\n sampleSide(back) +\n sampleSide(left) +\n sampleSide(right) +\n sampleSide(up) +\n sampleSide(down)\n ) / 6.0;\n gl_FragColor = vec4(result, 1.0);\n}");


  /***/ }),
  /* 131 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Geometry__ = __webpack_require__(14);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__math_BoundingBox__ = __webpack_require__(18);



  /**
   * @constructor clay.geometry.Sphere
   * @extends clay.Geometry
   * @param {Object} [opt]
   * @param {number} [widthSegments]
   * @param {number} [heightSegments]
   * @param {number} [phiStart]
   * @param {number} [phiLength]
   * @param {number} [thetaStart]
   * @param {number} [thetaLength]
   * @param {number} [radius]
   */
  var Sphere = __WEBPACK_IMPORTED_MODULE_0__Geometry__["a" /* default */].extend(/** @lends clay.geometry.Sphere# */ {
      dynamic: false,
      /**
       * @type {number}
       */
      widthSegments: 40,
      /**
       * @type {number}
       */
      heightSegments: 20,

      /**
       * @type {number}
       */
      phiStart: 0,
      /**
       * @type {number}
       */
      phiLength: Math.PI * 2,

      /**
       * @type {number}
       */
      thetaStart: 0,
      /**
       * @type {number}
       */
      thetaLength: Math.PI,

      /**
       * @type {number}
       */
      radius: 1

  }, function() {
      this.build();
  },
  /** @lends clay.geometry.Sphere.prototype */
  {
      /**
       * Build sphere geometry
       */
      build: function() {
          var heightSegments = this.heightSegments;
          var widthSegments = this.widthSegments;

          var positionAttr = this.attributes.position;
          var texcoordAttr = this.attributes.texcoord0;
          var normalAttr = this.attributes.normal;

          var vertexCount = (widthSegments + 1) * (heightSegments + 1);
          positionAttr.init(vertexCount);
          texcoordAttr.init(vertexCount);
          normalAttr.init(vertexCount);

          var IndicesCtor = vertexCount > 0xffff ? Uint32Array : Uint16Array;
          var indices = this.indices = new IndicesCtor(widthSegments * heightSegments * 6);

          var x, y, z,
              u, v,
              i, j;

          var radius = this.radius;
          var phiStart = this.phiStart;
          var phiLength = this.phiLength;
          var thetaStart = this.thetaStart;
          var thetaLength = this.thetaLength;
          var radius = this.radius;

          var pos = [];
          var uv = [];
          var offset = 0;
          var divider = 1 / radius;
          for (j = 0; j <= heightSegments; j ++) {
              for (i = 0; i <= widthSegments; i ++) {
                  u = i / widthSegments;
                  v = j / heightSegments;

                  // X axis is inverted so texture can be mapped from left to right
                  x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
                  y = radius * Math.cos(thetaStart + v * thetaLength);
                  z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);

                  pos[0] = x; pos[1] = y; pos[2] = z;
                  uv[0] = u; uv[1] = v;
                  positionAttr.set(offset, pos);
                  texcoordAttr.set(offset, uv);
                  pos[0] *= divider;
                  pos[1] *= divider;
                  pos[2] *= divider;
                  normalAttr.set(offset, pos);
                  offset++;
              }
          }

          var i1, i2, i3, i4;

          var len = widthSegments + 1;

          var n = 0;
          for (j = 0; j < heightSegments; j ++) {
              for (i = 0; i < widthSegments; i ++) {
                  i2 = j * len + i;
                  i1 = (j * len + i + 1);
                  i4 = (j + 1) * len + i + 1;
                  i3 = (j + 1) * len + i;

                  indices[n++] = i1;
                  indices[n++] = i2;
                  indices[n++] = i4;

                  indices[n++] = i2;
                  indices[n++] = i3;
                  indices[n++] = i4;
              }
          }

          this.boundingBox = new __WEBPACK_IMPORTED_MODULE_1__math_BoundingBox__["a" /* default */]();
          this.boundingBox.max.set(radius, radius, radius);
          this.boundingBox.min.set(-radius, -radius, -radius);
      }
  });

  /* harmony default export */ __webpack_exports__["a"] = (Sphere);


  /***/ }),
  /* 132 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Light__ = __webpack_require__(24);


  /**
   * @constructor clay.light.Ambient
   * @extends clay.Light
   */
  var AmbientLight = __WEBPACK_IMPORTED_MODULE_0__Light__["a" /* default */].extend({

      castShadow: false

  }, {

      type: 'AMBIENT_LIGHT',

      uniformTemplates: {
          ambientLightColor: {
              type: '3f',
              value: function(instance) {
                  var color = instance.color;
                  var intensity = instance.intensity;
                  return [color[0]*intensity, color[1]*intensity, color[2]*intensity];
              }
          }
      }
      /**
       * @function
       * @name clone
       * @return {clay.light.Ambient}
       * @memberOf clay.light.Ambient.prototype
       */
  });

  /* harmony default export */ __webpack_exports__["a"] = (AmbientLight);


  /***/ }),
  /* 133 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Light__ = __webpack_require__(24);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__math_Vector3__ = __webpack_require__(3);



  /**
   * @constructor clay.light.Directional
   * @extends clay.Light
   *
   * @example
   *     var light = new clay.light.Directional({
   *         intensity: 0.5,
   *         color: [1.0, 0.0, 0.0]
   *     });
   *     light.position.set(10, 10, 10);
   *     light.lookAt(clay.Vector3.ZERO);
   *     scene.add(light);
   */
  var DirectionalLight = __WEBPACK_IMPORTED_MODULE_0__Light__["a" /* default */].extend(/** @lends clay.light.Directional# */ {
      /**
       * @type {number}
       */
      shadowBias: 0.001,
      /**
       * @type {number}
       */
      shadowSlopeScale: 2.0,
      /**
       * Shadow cascade.
       * Use PSSM technique when it is larger than 1 and have a unique directional light in scene.
       * @type {number}
       */
      shadowCascade: 1,

      /**
       * Available when shadowCascade is larger than 1 and have a unique directional light in scene.
       * @type {number}
       */
      cascadeSplitLogFactor: 0.2
  }, {

      type: 'DIRECTIONAL_LIGHT',

      uniformTemplates: {
          directionalLightDirection: {
              type: '3f',
              value: function (instance) {
                  instance.__dir = instance.__dir || new __WEBPACK_IMPORTED_MODULE_1__math_Vector3__["a" /* default */]();
                  // Direction is target to eye
                  return instance.__dir.copy(instance.worldTransform.z).normalize().negate().array;
              }
          },
          directionalLightColor: {
              type: '3f',
              value: function (instance) {
                  var color = instance.color;
                  var intensity = instance.intensity;
                  return [color[0] * intensity, color[1] * intensity, color[2] * intensity];
              }
          }
      },
      /**
       * @return {clay.light.Directional}
       * @memberOf clay.light.Directional.prototype
       */
      clone: function () {
          var light = __WEBPACK_IMPORTED_MODULE_0__Light__["a" /* default */].prototype.clone.call(this);
          light.shadowBias = this.shadowBias;
          light.shadowSlopeScale = this.shadowSlopeScale;
          return light;
      }
  });

  /* harmony default export */ __webpack_exports__["a"] = (DirectionalLight);


  /***/ }),
  /* 134 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Light__ = __webpack_require__(24);


  /**
   * @constructor clay.light.Point
   * @extends clay.Light
   */
  var PointLight = __WEBPACK_IMPORTED_MODULE_0__Light__["a" /* default */].extend(/** @lends clay.light.Point# */ {
      /**
       * @type {number}
       */
      range: 100,

      /**
       * @type {number}
       */
      castShadow: false
  }, {

      type: 'POINT_LIGHT',

      uniformTemplates: {
          pointLightPosition: {
              type: '3f',
              value: function(instance) {
                  return instance.getWorldPosition().array;
              }
          },
          pointLightRange: {
              type: '1f',
              value: function(instance) {
                  return instance.range;
              }
          },
          pointLightColor: {
              type: '3f',
              value: function(instance) {
                  var color = instance.color;
                  var intensity = instance.intensity;
                  return [color[0] * intensity, color[1] * intensity, color[2] * intensity];
              }
          }
      },
      /**
       * @return {clay.light.Point}
       * @memberOf clay.light.Point.prototype
       */
      clone: function() {
          var light = __WEBPACK_IMPORTED_MODULE_0__Light__["a" /* default */].prototype.clone.call(this);
          light.range = this.range;
          return light;
      }
  });

  /* harmony default export */ __webpack_exports__["a"] = (PointLight);


  /***/ }),
  /* 135 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Light__ = __webpack_require__(24);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__math_Vector3__ = __webpack_require__(3);



  /**
   * @constructor clay.light.Spot
   * @extends clay.Light
   */
  var SpotLight = __WEBPACK_IMPORTED_MODULE_0__Light__["a" /* default */].extend(/**@lends clay.light.Spot */ {
      /**
       * @type {number}
       */
      range: 20,
      /**
       * @type {number}
       */
      umbraAngle: 30,
      /**
       * @type {number}
       */
      penumbraAngle: 45,
      /**
       * @type {number}
       */
      falloffFactor: 2.0,
      /**
       * @type {number}
       */
      shadowBias: 0.001,
      /**
       * @type {number}
       */
      shadowSlopeScale: 2.0
  }, {

      type: 'SPOT_LIGHT',

      uniformTemplates: {
          spotLightPosition: {
              type: '3f',
              value: function (instance) {
                  return instance.getWorldPosition().array;
              }
          },
          spotLightRange: {
              type: '1f',
              value: function (instance) {
                  return instance.range;
              }
          },
          spotLightUmbraAngleCosine: {
              type: '1f',
              value: function (instance) {
                  return Math.cos(instance.umbraAngle * Math.PI / 180);
              }
          },
          spotLightPenumbraAngleCosine: {
              type: '1f',
              value: function (instance) {
                  return Math.cos(instance.penumbraAngle * Math.PI / 180);
              }
          },
          spotLightFalloffFactor: {
              type: '1f',
              value: function (instance) {
                  return instance.falloffFactor;
              }
          },
          spotLightDirection: {
              type: '3f',
              value: function (instance) {
                  instance.__dir = instance.__dir || new __WEBPACK_IMPORTED_MODULE_1__math_Vector3__["a" /* default */]();
                  // Direction is target to eye
                  return instance.__dir.copy(instance.worldTransform.z).negate().array;
              }
          },
          spotLightColor: {
              type: '3f',
              value: function (instance) {
                  var color = instance.color;
                  var intensity = instance.intensity;
                  return [color[0] * intensity, color[1] * intensity, color[2] * intensity];
              }
          }
      },
      /**
       * @return {clay.light.Spot}
       * @memberOf clay.light.Spot.prototype
       */
      clone: function () {
          var light = __WEBPACK_IMPORTED_MODULE_0__Light__["a" /* default */].prototype.clone.call(this);
          light.range = this.range;
          light.umbraAngle = this.umbraAngle;
          light.penumbraAngle = this.penumbraAngle;
          light.falloffFactor = this.falloffFactor;
          light.shadowBias = this.shadowBias;
          light.shadowSlopeScale = this.shadowSlopeScale;
          return light;
      }
  });

  /* harmony default export */ __webpack_exports__["a"] = (SpotLight);


  /***/ }),
  /* 136 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__ = __webpack_require__(33);


  /**
   * @constructor
   * @alias clay.Vector4
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} w
   */
  var Vector4 = function(x, y, z, w) {

      x = x || 0;
      y = y || 0;
      z = z || 0;
      w = w || 0;

      /**
       * Storage of Vector4, read and write of x, y, z, w will change the values in array
       * All methods also operate on the array instead of x, y, z, w components
       * @name array
       * @type {Float32Array}
       * @memberOf clay.Vector4#
       */
      this.array = __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].fromValues(x, y, z, w);

      /**
       * Dirty flag is used by the Node to determine
       * if the matrix is updated to latest
       * @name _dirty
       * @type {boolean}
       * @memberOf clay.Vector4#
       */
      this._dirty = true;
  };

  Vector4.prototype = {

      constructor: Vector4,

      /**
       * Add b to self
       * @param  {clay.Vector4} b
       * @return {clay.Vector4}
       */
      add: function(b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].add(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Set x, y and z components
       * @param  {number}  x
       * @param  {number}  y
       * @param  {number}  z
       * @param  {number}  w
       * @return {clay.Vector4}
       */
      set: function(x, y, z, w) {
          this.array[0] = x;
          this.array[1] = y;
          this.array[2] = z;
          this.array[3] = w;
          this._dirty = true;
          return this;
      },

      /**
       * Set x, y, z and w components from array
       * @param  {Float32Array|number[]} arr
       * @return {clay.Vector4}
       */
      setArray: function(arr) {
          this.array[0] = arr[0];
          this.array[1] = arr[1];
          this.array[2] = arr[2];
          this.array[3] = arr[3];

          this._dirty = true;
          return this;
      },

      /**
       * Clone a new Vector4
       * @return {clay.Vector4}
       */
      clone: function() {
          return new Vector4(this.x, this.y, this.z, this.w);
      },

      /**
       * Copy from b
       * @param  {clay.Vector4} b
       * @return {clay.Vector4}
       */
      copy: function(b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].copy(this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Alias for distance
       * @param  {clay.Vector4} b
       * @return {number}
       */
      dist: function(b) {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].dist(this.array, b.array);
      },

      /**
       * Distance between self and b
       * @param  {clay.Vector4} b
       * @return {number}
       */
      distance: function(b) {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].distance(this.array, b.array);
      },

      /**
       * Alias for divide
       * @param  {clay.Vector4} b
       * @return {clay.Vector4}
       */
      div: function(b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].div(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Divide self by b
       * @param  {clay.Vector4} b
       * @return {clay.Vector4}
       */
      divide: function(b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].divide(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Dot product of self and b
       * @param  {clay.Vector4} b
       * @return {number}
       */
      dot: function(b) {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].dot(this.array, b.array);
      },

      /**
       * Alias of length
       * @return {number}
       */
      len: function() {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].len(this.array);
      },

      /**
       * Calculate the length
       * @return {number}
       */
      length: function() {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].length(this.array);
      },
      /**
       * Linear interpolation between a and b
       * @param  {clay.Vector4} a
       * @param  {clay.Vector4} b
       * @param  {number}  t
       * @return {clay.Vector4}
       */
      lerp: function(a, b, t) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].lerp(this.array, a.array, b.array, t);
          this._dirty = true;
          return this;
      },

      /**
       * Minimum of self and b
       * @param  {clay.Vector4} b
       * @return {clay.Vector4}
       */
      min: function(b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].min(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Maximum of self and b
       * @param  {clay.Vector4} b
       * @return {clay.Vector4}
       */
      max: function(b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].max(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Alias for multiply
       * @param  {clay.Vector4} b
       * @return {clay.Vector4}
       */
      mul: function(b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].mul(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Mutiply self and b
       * @param  {clay.Vector4} b
       * @return {clay.Vector4}
       */
      multiply: function(b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].multiply(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Negate self
       * @return {clay.Vector4}
       */
      negate: function() {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].negate(this.array, this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Normalize self
       * @return {clay.Vector4}
       */
      normalize: function() {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].normalize(this.array, this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Generate random x, y, z, w components with a given scale
       * @param  {number} scale
       * @return {clay.Vector4}
       */
      random: function(scale) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].random(this.array, scale);
          this._dirty = true;
          return this;
      },

      /**
       * Scale self
       * @param  {number}  scale
       * @return {clay.Vector4}
       */
      scale: function(s) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].scale(this.array, this.array, s);
          this._dirty = true;
          return this;
      },
      /**
       * Scale b and add to self
       * @param  {clay.Vector4} b
       * @param  {number}  scale
       * @return {clay.Vector4}
       */
      scaleAndAdd: function(b, s) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].scaleAndAdd(this.array, this.array, b.array, s);
          this._dirty = true;
          return this;
      },

      /**
       * Alias for squaredDistance
       * @param  {clay.Vector4} b
       * @return {number}
       */
      sqrDist: function(b) {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].sqrDist(this.array, b.array);
      },

      /**
       * Squared distance between self and b
       * @param  {clay.Vector4} b
       * @return {number}
       */
      squaredDistance: function(b) {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].squaredDistance(this.array, b.array);
      },

      /**
       * Alias for squaredLength
       * @return {number}
       */
      sqrLen: function() {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].sqrLen(this.array);
      },

      /**
       * Squared length of self
       * @return {number}
       */
      squaredLength: function() {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].squaredLength(this.array);
      },

      /**
       * Alias for subtract
       * @param  {clay.Vector4} b
       * @return {clay.Vector4}
       */
      sub: function(b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].sub(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Subtract b from self
       * @param  {clay.Vector4} b
       * @return {clay.Vector4}
       */
      subtract: function(b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].subtract(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Transform self with a Matrix4 m
       * @param  {clay.Matrix4} m
       * @return {clay.Vector4}
       */
      transformMat4: function(m) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].transformMat4(this.array, this.array, m.array);
          this._dirty = true;
          return this;
      },

      /**
       * Transform self with a Quaternion q
       * @param  {clay.Quaternion} q
       * @return {clay.Vector4}
       */
      transformQuat: function(q) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].transformQuat(this.array, this.array, q.array);
          this._dirty = true;
          return this;
      },

      toString: function() {
          return '[' + Array.prototype.join.call(this.array, ',') + ']';
      },

      toArray: function () {
          return Array.prototype.slice.call(this.array);
      }
  };

  var defineProperty = Object.defineProperty;
  // Getter and Setter
  if (defineProperty) {

      var proto = Vector4.prototype;
      /**
       * @name x
       * @type {number}
       * @memberOf clay.Vector4
       * @instance
       */
      defineProperty(proto, 'x', {
          get: function () {
              return this.array[0];
          },
          set: function (value) {
              this.array[0] = value;
              this._dirty = true;
          }
      });

      /**
       * @name y
       * @type {number}
       * @memberOf clay.Vector4
       * @instance
       */
      defineProperty(proto, 'y', {
          get: function () {
              return this.array[1];
          },
          set: function (value) {
              this.array[1] = value;
              this._dirty = true;
          }
      });

      /**
       * @name z
       * @type {number}
       * @memberOf clay.Vector4
       * @instance
       */
      defineProperty(proto, 'z', {
          get: function () {
              return this.array[2];
          },
          set: function (value) {
              this.array[2] = value;
              this._dirty = true;
          }
      });

      /**
       * @name w
       * @type {number}
       * @memberOf clay.Vector4
       * @instance
       */
      defineProperty(proto, 'w', {
          get: function () {
              return this.array[3];
          },
          set: function (value) {
              this.array[3] = value;
              this._dirty = true;
          }
      });
  }

  // Supply methods that are not in place

  /**
   * @param  {clay.Vector4} out
   * @param  {clay.Vector4} a
   * @param  {clay.Vector4} b
   * @return {clay.Vector4}
   */
  Vector4.add = function(out, a, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].add(out.array, a.array, b.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Vector4} out
   * @param  {number}  x
   * @param  {number}  y
   * @param  {number}  z
   * @return {clay.Vector4}
   */
  Vector4.set = function(out, x, y, z, w) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].set(out.array, x, y, z, w);
      out._dirty = true;
  };

  /**
   * @param  {clay.Vector4} out
   * @param  {clay.Vector4} b
   * @return {clay.Vector4}
   */
  Vector4.copy = function(out, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].copy(out.array, b.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Vector4} a
   * @param  {clay.Vector4} b
   * @return {number}
   */
  Vector4.dist = function(a, b) {
      return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].distance(a.array, b.array);
  };

  /**
   * @function
   * @param  {clay.Vector4} a
   * @param  {clay.Vector4} b
   * @return {number}
   */
  Vector4.distance = Vector4.dist;

  /**
   * @param  {clay.Vector4} out
   * @param  {clay.Vector4} a
   * @param  {clay.Vector4} b
   * @return {clay.Vector4}
   */
  Vector4.div = function(out, a, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].divide(out.array, a.array, b.array);
      out._dirty = true;
      return out;
  };

  /**
   * @function
   * @param  {clay.Vector4} out
   * @param  {clay.Vector4} a
   * @param  {clay.Vector4} b
   * @return {clay.Vector4}
   */
  Vector4.divide = Vector4.div;

  /**
   * @param  {clay.Vector4} a
   * @param  {clay.Vector4} b
   * @return {number}
   */
  Vector4.dot = function(a, b) {
      return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].dot(a.array, b.array);
  };

  /**
   * @param  {clay.Vector4} a
   * @return {number}
   */
  Vector4.len = function(b) {
      return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].length(b.array);
  };

  // Vector4.length = Vector4.len;

  /**
   * @param  {clay.Vector4} out
   * @param  {clay.Vector4} a
   * @param  {clay.Vector4} b
   * @param  {number}  t
   * @return {clay.Vector4}
   */
  Vector4.lerp = function(out, a, b, t) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].lerp(out.array, a.array, b.array, t);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Vector4} out
   * @param  {clay.Vector4} a
   * @param  {clay.Vector4} b
   * @return {clay.Vector4}
   */
  Vector4.min = function(out, a, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].min(out.array, a.array, b.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Vector4} out
   * @param  {clay.Vector4} a
   * @param  {clay.Vector4} b
   * @return {clay.Vector4}
   */
  Vector4.max = function(out, a, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].max(out.array, a.array, b.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Vector4} out
   * @param  {clay.Vector4} a
   * @param  {clay.Vector4} b
   * @return {clay.Vector4}
   */
  Vector4.mul = function(out, a, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].multiply(out.array, a.array, b.array);
      out._dirty = true;
      return out;
  };

  /**
   * @function
   * @param  {clay.Vector4} out
   * @param  {clay.Vector4} a
   * @param  {clay.Vector4} b
   * @return {clay.Vector4}
   */
  Vector4.multiply = Vector4.mul;

  /**
   * @param  {clay.Vector4} out
   * @param  {clay.Vector4} a
   * @return {clay.Vector4}
   */
  Vector4.negate = function(out, a) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].negate(out.array, a.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Vector4} out
   * @param  {clay.Vector4} a
   * @return {clay.Vector4}
   */
  Vector4.normalize = function(out, a) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].normalize(out.array, a.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Vector4} out
   * @param  {number}  scale
   * @return {clay.Vector4}
   */
  Vector4.random = function(out, scale) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].random(out.array, scale);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Vector4} out
   * @param  {clay.Vector4} a
   * @param  {number}  scale
   * @return {clay.Vector4}
   */
  Vector4.scale = function(out, a, scale) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].scale(out.array, a.array, scale);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Vector4} out
   * @param  {clay.Vector4} a
   * @param  {clay.Vector4} b
   * @param  {number}  scale
   * @return {clay.Vector4}
   */
  Vector4.scaleAndAdd = function(out, a, b, scale) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].scaleAndAdd(out.array, a.array, b.array, scale);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Vector4} a
   * @param  {clay.Vector4} b
   * @return {number}
   */
  Vector4.sqrDist = function(a, b) {
      return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].sqrDist(a.array, b.array);
  };

  /**
   * @function
   * @param  {clay.Vector4} a
   * @param  {clay.Vector4} b
   * @return {number}
   */
  Vector4.squaredDistance = Vector4.sqrDist;

  /**
   * @param  {clay.Vector4} a
   * @return {number}
   */
  Vector4.sqrLen = function(a) {
      return __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].sqrLen(a.array);
  };
  /**
   * @function
   * @param  {clay.Vector4} a
   * @return {number}
   */
  Vector4.squaredLength = Vector4.sqrLen;

  /**
   * @param  {clay.Vector4} out
   * @param  {clay.Vector4} a
   * @param  {clay.Vector4} b
   * @return {clay.Vector4}
   */
  Vector4.sub = function(out, a, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].subtract(out.array, a.array, b.array);
      out._dirty = true;
      return out;
  };
  /**
   * @function
   * @param  {clay.Vector4} out
   * @param  {clay.Vector4} a
   * @param  {clay.Vector4} b
   * @return {clay.Vector4}
   */
  Vector4.subtract = Vector4.sub;

  /**
   * @param  {clay.Vector4} out
   * @param  {clay.Vector4} a
   * @param  {clay.Matrix4} m
   * @return {clay.Vector4}
   */
  Vector4.transformMat4 = function(out, a, m) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].transformMat4(out.array, a.array, m.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Vector4} out
   * @param  {clay.Vector4} a
   * @param  {clay.Quaternion} q
   * @return {clay.Vector4}
   */
  Vector4.transformQuat = function(out, a, q) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_vec4__["a" /* default */].transformQuat(out.array, a.array, q.array);
      out._dirty = true;
      return out;
  };

  /* harmony default export */ __webpack_exports__["a"] = (Vector4);


  /***/ }),
  /* 137 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2__ = __webpack_require__(78);


  /**
   * @constructor
   * @alias clay.Matrix2
   */
  var Matrix2 = function() {

      /**
       * Storage of Matrix2
       * @name array
       * @type {Float32Array}
       * @memberOf clay.Matrix2#
       */
      this.array = __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2__["a" /* default */].create();

      /**
       * @name _dirty
       * @type {boolean}
       * @memberOf clay.Matrix2#
       */
      this._dirty = true;
  };

  Matrix2.prototype = {

      constructor: Matrix2,

      /**
       * Set components from array
       * @param  {Float32Array|number[]} arr
       */
      setArray: function (arr) {
          for (var i = 0; i < this.array.length; i++) {
              this.array[i] = arr[i];
          }
          this._dirty = true;
          return this;
      },
      /**
       * Clone a new Matrix2
       * @return {clay.Matrix2}
       */
      clone: function() {
          return (new Matrix2()).copy(this);
      },

      /**
       * Copy from b
       * @param  {clay.Matrix2} b
       * @return {clay.Matrix2}
       */
      copy: function(b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2__["a" /* default */].copy(this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Calculate the adjugate of self, in-place
       * @return {clay.Matrix2}
       */
      adjoint: function() {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2__["a" /* default */].adjoint(this.array, this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Calculate matrix determinant
       * @return {number}
       */
      determinant: function() {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2__["a" /* default */].determinant(this.array);
      },

      /**
       * Set to a identity matrix
       * @return {clay.Matrix2}
       */
      identity: function() {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2__["a" /* default */].identity(this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Invert self
       * @return {clay.Matrix2}
       */
      invert: function() {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2__["a" /* default */].invert(this.array, this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Alias for mutiply
       * @param  {clay.Matrix2} b
       * @return {clay.Matrix2}
       */
      mul: function(b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2__["a" /* default */].mul(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Alias for multiplyLeft
       * @param  {clay.Matrix2} a
       * @return {clay.Matrix2}
       */
      mulLeft: function(a) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2__["a" /* default */].mul(this.array, a.array, this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Multiply self and b
       * @param  {clay.Matrix2} b
       * @return {clay.Matrix2}
       */
      multiply: function(b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2__["a" /* default */].multiply(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Multiply a and self, a is on the left
       * @param  {clay.Matrix2} a
       * @return {clay.Matrix2}
       */
      multiplyLeft: function(a) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2__["a" /* default */].multiply(this.array, a.array, this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Rotate self by a given radian
       * @param  {number}   rad
       * @return {clay.Matrix2}
       */
      rotate: function(rad) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2__["a" /* default */].rotate(this.array, this.array, rad);
          this._dirty = true;
          return this;
      },

      /**
       * Scale self by s
       * @param  {clay.Vector2}  s
       * @return {clay.Matrix2}
       */
      scale: function(v) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2__["a" /* default */].scale(this.array, this.array, v.array);
          this._dirty = true;
          return this;
      },
      /**
       * Transpose self, in-place.
       * @return {clay.Matrix2}
       */
      transpose: function() {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2__["a" /* default */].transpose(this.array, this.array);
          this._dirty = true;
          return this;
      },

      toString: function() {
          return '[' + Array.prototype.join.call(this.array, ',') + ']';
      },

      toArray: function () {
          return Array.prototype.slice.call(this.array);
      }
  };

  /**
   * @param  {Matrix2} out
   * @param  {Matrix2} a
   * @return {Matrix2}
   */
  Matrix2.adjoint = function(out, a) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2__["a" /* default */].adjoint(out.array, a.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix2} out
   * @param  {clay.Matrix2} a
   * @return {clay.Matrix2}
   */
  Matrix2.copy = function(out, a) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2__["a" /* default */].copy(out.array, a.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix2} a
   * @return {number}
   */
  Matrix2.determinant = function(a) {
      return __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2__["a" /* default */].determinant(a.array);
  };

  /**
   * @param  {clay.Matrix2} out
   * @return {clay.Matrix2}
   */
  Matrix2.identity = function(out) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2__["a" /* default */].identity(out.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix2} out
   * @param  {clay.Matrix2} a
   * @return {clay.Matrix2}
   */
  Matrix2.invert = function(out, a) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2__["a" /* default */].invert(out.array, a.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix2} out
   * @param  {clay.Matrix2} a
   * @param  {clay.Matrix2} b
   * @return {clay.Matrix2}
   */
  Matrix2.mul = function(out, a, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2__["a" /* default */].mul(out.array, a.array, b.array);
      out._dirty = true;
      return out;
  };

  /**
   * @function
   * @param  {clay.Matrix2} out
   * @param  {clay.Matrix2} a
   * @param  {clay.Matrix2} b
   * @return {clay.Matrix2}
   */
  Matrix2.multiply = Matrix2.mul;

  /**
   * @param  {clay.Matrix2} out
   * @param  {clay.Matrix2} a
   * @param  {number}   rad
   * @return {clay.Matrix2}
   */
  Matrix2.rotate = function(out, a, rad) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2__["a" /* default */].rotate(out.array, a.array, rad);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix2} out
   * @param  {clay.Matrix2} a
   * @param  {clay.Vector2}  v
   * @return {clay.Matrix2}
   */
  Matrix2.scale = function(out, a, v) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2__["a" /* default */].scale(out.array, a.array, v.array);
      out._dirty = true;
      return out;
  };
  /**
   * @param  {Matrix2} out
   * @param  {Matrix2} a
   * @return {Matrix2}
   */
  Matrix2.transpose = function(out, a) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2__["a" /* default */].transpose(out.array, a.array);
      out._dirty = true;
      return out;
  };

  /* harmony default export */ __webpack_exports__["a"] = (Matrix2);


  /***/ }),
  /* 138 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2d__ = __webpack_require__(79);


  /**
   * @constructor
   * @alias clay.Matrix2d
   */
  var Matrix2d = function() {
      /**
       * Storage of Matrix2d
       * @name array
       * @type {Float32Array}
       * @memberOf clay.Matrix2d#
       */
      this.array = __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2d__["a" /* default */].create();

      /**
       * @name _dirty
       * @type {boolean}
       * @memberOf clay.Matrix2d#
       */
      this._dirty = true;
  };

  Matrix2d.prototype = {

      constructor: Matrix2d,

      /**
       * Set components from array
       * @param  {Float32Array|number[]} arr
       */
      setArray: function (arr) {
          for (var i = 0; i < this.array.length; i++) {
              this.array[i] = arr[i];
          }
          this._dirty = true;
          return this;
      },
      /**
       * Clone a new Matrix2d
       * @return {clay.Matrix2d}
       */
      clone: function() {
          return (new Matrix2d()).copy(this);
      },

      /**
       * Copy from b
       * @param  {clay.Matrix2d} b
       * @return {clay.Matrix2d}
       */
      copy: function(b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2d__["a" /* default */].copy(this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Calculate matrix determinant
       * @return {number}
       */
      determinant: function() {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2d__["a" /* default */].determinant(this.array);
      },

      /**
       * Set to a identity matrix
       * @return {clay.Matrix2d}
       */
      identity: function() {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2d__["a" /* default */].identity(this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Invert self
       * @return {clay.Matrix2d}
       */
      invert: function() {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2d__["a" /* default */].invert(this.array, this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Alias for mutiply
       * @param  {clay.Matrix2d} b
       * @return {clay.Matrix2d}
       */
      mul: function(b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2d__["a" /* default */].mul(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Alias for multiplyLeft
       * @param  {clay.Matrix2d} a
       * @return {clay.Matrix2d}
       */
      mulLeft: function(b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2d__["a" /* default */].mul(this.array, b.array, this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Multiply self and b
       * @param  {clay.Matrix2d} b
       * @return {clay.Matrix2d}
       */
      multiply: function(b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2d__["a" /* default */].multiply(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Multiply a and self, a is on the left
       * @param  {clay.Matrix2d} a
       * @return {clay.Matrix2d}
       */
      multiplyLeft: function(b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2d__["a" /* default */].multiply(this.array, b.array, this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Rotate self by a given radian
       * @param  {number}   rad
       * @return {clay.Matrix2d}
       */
      rotate: function(rad) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2d__["a" /* default */].rotate(this.array, this.array, rad);
          this._dirty = true;
          return this;
      },

      /**
       * Scale self by s
       * @param  {clay.Vector2}  s
       * @return {clay.Matrix2d}
       */
      scale: function(s) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2d__["a" /* default */].scale(this.array, this.array, s.array);
          this._dirty = true;
          return this;
      },

      /**
       * Translate self by v
       * @param  {clay.Vector2}  v
       * @return {clay.Matrix2d}
       */
      translate: function(v) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2d__["a" /* default */].translate(this.array, this.array, v.array);
          this._dirty = true;
          return this;
      },

      toString: function() {
          return '[' + Array.prototype.join.call(this.array, ',') + ']';
      },

      toArray: function () {
          return Array.prototype.slice.call(this.array);
      }
  };

  /**
   * @param  {clay.Matrix2d} out
   * @param  {clay.Matrix2d} a
   * @return {clay.Matrix2d}
   */
  Matrix2d.copy = function(out, a) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2d__["a" /* default */].copy(out.array, a.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix2d} a
   * @return {number}
   */
  Matrix2d.determinant = function(a) {
      return __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2d__["a" /* default */].determinant(a.array);
  };

  /**
   * @param  {clay.Matrix2d} out
   * @return {clay.Matrix2d}
   */
  Matrix2d.identity = function(out) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2d__["a" /* default */].identity(out.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix2d} out
   * @param  {clay.Matrix2d} a
   * @return {clay.Matrix2d}
   */
  Matrix2d.invert = function(out, a) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2d__["a" /* default */].invert(out.array, a.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix2d} out
   * @param  {clay.Matrix2d} a
   * @param  {clay.Matrix2d} b
   * @return {clay.Matrix2d}
   */
  Matrix2d.mul = function(out, a, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2d__["a" /* default */].mul(out.array, a.array, b.array);
      out._dirty = true;
      return out;
  };

  /**
   * @function
   * @param  {clay.Matrix2d} out
   * @param  {clay.Matrix2d} a
   * @param  {clay.Matrix2d} b
   * @return {clay.Matrix2d}
   */
  Matrix2d.multiply = Matrix2d.mul;

  /**
   * @param  {clay.Matrix2d} out
   * @param  {clay.Matrix2d} a
   * @param  {number}   rad
   * @return {clay.Matrix2d}
   */
  Matrix2d.rotate = function(out, a, rad) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2d__["a" /* default */].rotate(out.array, a.array, rad);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix2d} out
   * @param  {clay.Matrix2d} a
   * @param  {clay.Vector2}  v
   * @return {clay.Matrix2d}
   */
  Matrix2d.scale = function(out, a, v) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2d__["a" /* default */].scale(out.array, a.array, v.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix2d} out
   * @param  {clay.Matrix2d} a
   * @param  {clay.Vector2}  v
   * @return {clay.Matrix2d}
   */
  Matrix2d.translate = function(out, a, v) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat2d__["a" /* default */].translate(out.array, a.array, v.array);
      out._dirty = true;
      return out;
  };

  /* harmony default export */ __webpack_exports__["a"] = (Matrix2d);


  /***/ }),
  /* 139 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__ = __webpack_require__(34);


  /**
   * @constructor
   * @alias clay.Matrix3
   */
  var Matrix3 = function () {

      /**
       * Storage of Matrix3
       * @name array
       * @type {Float32Array}
       * @memberOf clay.Matrix3#
       */
      this.array = __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].create();

      /**
       * @name _dirty
       * @type {boolean}
       * @memberOf clay.Matrix3#
       */
      this._dirty = true;
  };

  Matrix3.prototype = {

      constructor: Matrix3,

      /**
       * Set components from array
       * @param  {Float32Array|number[]} arr
       */
      setArray: function (arr) {
          for (var i = 0; i < this.array.length; i++) {
              this.array[i] = arr[i];
          }
          this._dirty = true;
          return this;
      },
      /**
       * Calculate the adjugate of self, in-place
       * @return {clay.Matrix3}
       */
      adjoint: function () {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].adjoint(this.array, this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Clone a new Matrix3
       * @return {clay.Matrix3}
       */
      clone: function () {
          return (new Matrix3()).copy(this);
      },

      /**
       * Copy from b
       * @param  {clay.Matrix3} b
       * @return {clay.Matrix3}
       */
      copy: function (b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].copy(this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Calculate matrix determinant
       * @return {number}
       */
      determinant: function () {
          return __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].determinant(this.array);
      },

      /**
       * Copy the values from Matrix2d a
       * @param  {clay.Matrix2d} a
       * @return {clay.Matrix3}
       */
      fromMat2d: function (a) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].fromMat2d(this.array, a.array);
          this._dirty = true;
          return this;
      },

      /**
       * Copies the upper-left 3x3 values of Matrix4
       * @param  {clay.Matrix4} a
       * @return {clay.Matrix3}
       */
      fromMat4: function (a) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].fromMat4(this.array, a.array);
          this._dirty = true;
          return this;
      },

      /**
       * Calculates a rotation matrix from the given quaternion
       * @param  {clay.Quaternion} q
       * @return {clay.Matrix3}
       */
      fromQuat: function (q) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].fromQuat(this.array, q.array);
          this._dirty = true;
          return this;
      },

      /**
       * Set to a identity matrix
       * @return {clay.Matrix3}
       */
      identity: function () {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].identity(this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Invert self
       * @return {clay.Matrix3}
       */
      invert: function () {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].invert(this.array, this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Alias for mutiply
       * @param  {clay.Matrix3} b
       * @return {clay.Matrix3}
       */
      mul: function (b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].mul(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Alias for multiplyLeft
       * @param  {clay.Matrix3} a
       * @return {clay.Matrix3}
       */
      mulLeft: function (a) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].mul(this.array, a.array, this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Multiply self and b
       * @param  {clay.Matrix3} b
       * @return {clay.Matrix3}
       */
      multiply: function (b) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].multiply(this.array, this.array, b.array);
          this._dirty = true;
          return this;
      },

      /**
       * Multiply a and self, a is on the left
       * @param  {clay.Matrix3} a
       * @return {clay.Matrix3}
       */
      multiplyLeft: function (a) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].multiply(this.array, a.array, this.array);
          this._dirty = true;
          return this;
      },

      /**
       * Rotate self by a given radian
       * @param  {number}   rad
       * @return {clay.Matrix3}
       */
      rotate: function (rad) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].rotate(this.array, this.array, rad);
          this._dirty = true;
          return this;
      },

      /**
       * Scale self by s
       * @param  {clay.Vector2}  s
       * @return {clay.Matrix3}
       */
      scale: function (v) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].scale(this.array, this.array, v.array);
          this._dirty = true;
          return this;
      },

      /**
       * Translate self by v
       * @param  {clay.Vector2}  v
       * @return {clay.Matrix3}
       */
      translate: function (v) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].translate(this.array, this.array, v.array);
          this._dirty = true;
          return this;
      },
      /**
       * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
       * @param {clay.Matrix4} a
       */
      normalFromMat4: function (a) {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].normalFromMat4(this.array, a.array);
          this._dirty = true;
          return this;
      },

      /**
       * Transpose self, in-place.
       * @return {clay.Matrix2}
       */
      transpose: function () {
          __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].transpose(this.array, this.array);
          this._dirty = true;
          return this;
      },

      toString: function () {
          return '[' + Array.prototype.join.call(this.array, ',') + ']';
      },

      toArray: function () {
          return Array.prototype.slice.call(this.array);
      }
  };
  /**
   * @param  {clay.Matrix3} out
   * @param  {clay.Matrix3} a
   * @return {clay.Matrix3}
   */
  Matrix3.adjoint = function (out, a) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].adjoint(out.array, a.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix3} out
   * @param  {clay.Matrix3} a
   * @return {clay.Matrix3}
   */
  Matrix3.copy = function (out, a) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].copy(out.array, a.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix3} a
   * @return {number}
   */
  Matrix3.determinant = function (a) {
      return __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].determinant(a.array);
  };

  /**
   * @param  {clay.Matrix3} out
   * @return {clay.Matrix3}
   */
  Matrix3.identity = function (out) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].identity(out.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix3} out
   * @param  {clay.Matrix3} a
   * @return {clay.Matrix3}
   */
  Matrix3.invert = function (out, a) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].invert(out.array, a.array);
      return out;
  };

  /**
   * @param  {clay.Matrix3} out
   * @param  {clay.Matrix3} a
   * @param  {clay.Matrix3} b
   * @return {clay.Matrix3}
   */
  Matrix3.mul = function (out, a, b) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].mul(out.array, a.array, b.array);
      out._dirty = true;
      return out;
  };

  /**
   * @function
   * @param  {clay.Matrix3} out
   * @param  {clay.Matrix3} a
   * @param  {clay.Matrix3} b
   * @return {clay.Matrix3}
   */
  Matrix3.multiply = Matrix3.mul;

  /**
   * @param  {clay.Matrix3}  out
   * @param  {clay.Matrix2d} a
   * @return {clay.Matrix3}
   */
  Matrix3.fromMat2d = function (out, a) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].fromMat2d(out.array, a.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix3} out
   * @param  {clay.Matrix4} a
   * @return {clay.Matrix3}
   */
  Matrix3.fromMat4 = function (out, a) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].fromMat4(out.array, a.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix3}    out
   * @param  {clay.Quaternion} a
   * @return {clay.Matrix3}
   */
  Matrix3.fromQuat = function (out, q) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].fromQuat(out.array, q.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix3} out
   * @param  {clay.Matrix4} a
   * @return {clay.Matrix3}
   */
  Matrix3.normalFromMat4 = function (out, a) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].normalFromMat4(out.array, a.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix3} out
   * @param  {clay.Matrix3} a
   * @param  {number}  rad
   * @return {clay.Matrix3}
   */
  Matrix3.rotate = function (out, a, rad) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].rotate(out.array, a.array, rad);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix3} out
   * @param  {clay.Matrix3} a
   * @param  {clay.Vector2} v
   * @return {clay.Matrix3}
   */
  Matrix3.scale = function (out, a, v) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].scale(out.array, a.array, v.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix3} out
   * @param  {clay.Matrix3} a
   * @return {clay.Matrix3}
   */
  Matrix3.transpose = function (out, a) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].transpose(out.array, a.array);
      out._dirty = true;
      return out;
  };

  /**
   * @param  {clay.Matrix3} out
   * @param  {clay.Matrix3} a
   * @param  {clay.Vector2} v
   * @return {clay.Matrix3}
   */
  Matrix3.translate = function (out, a, v) {
      __WEBPACK_IMPORTED_MODULE_0__glmatrix_mat3__["a" /* default */].translate(out.array, a.array, v.array);
      out._dirty = true;
      return out;
  };

  /* harmony default export */ __webpack_exports__["a"] = (Matrix3);


  /***/ }),
  /* 140 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_zrender_lib_animation_Animator__ = __webpack_require__(141);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_zrender_lib_animation_Animator___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_zrender_lib_animation_Animator__);


  var animatableMixin = {

      _animators: null,

      getAnimators: function () {
          this._animators = this._animators || [];

          return this._animators;
      },

      animate: function (path, opts) {
          this._animators = this._animators || [];

          var el = this;

          var target;

          if (path) {
              var pathSplitted = path.split('.');
              var prop = el;
              for (var i = 0, l = pathSplitted.length; i < l; i++) {
                  if (!prop) {
                      continue;
                  }
                  prop = prop[pathSplitted[i]];
              }
              if (prop) {
                  target = prop;
              }
          }
          else {
              target = el;
          }
          if (target == null) {
              throw new Error('Target ' + path + ' not exists');
          }

          var animators = this._animators;

          var animator = new __WEBPACK_IMPORTED_MODULE_0_zrender_lib_animation_Animator___default.a(target, opts);
          var self = this;
          animator.during(function () {
              if (self.__zr) {
                  self.__zr.refresh();
              }
          }).done(function () {
              var idx = animators.indexOf(animator);
              if (idx >= 0) {
                  animators.splice(idx, 1);
              }
          });
          animators.push(animator);

          if (this.__zr) {
              this.__zr.animation.addAnimator(animator);
          }

          return animator;
      },

      stopAnimation: function (forwardToLast) {
          this._animators = this._animators || [];

          var animators = this._animators;
          var len = animators.length;
          for (var i = 0; i < len; i++) {
              animators[i].stop(forwardToLast);
          }
          animators.length = 0;

          return this;
      },

      addAnimatorsToZr: function (zr) {
          if (this._animators) {
              for (var i = 0; i < this._animators.length; i++) {
                  zr.animation.addAnimator(this._animators[i]);
              }
          }
      },

      removeAnimatorsFromZr: function (zr) {
          if (this._animators) {
              for (var i = 0; i < this._animators.length; i++) {
                  zr.animation.removeAnimator(this._animators[i]);
              }
          }
      }
  };

  /* harmony default export */ __webpack_exports__["a"] = (animatableMixin);

  /***/ }),
  /* 141 */
  /***/ (function(module, exports, __webpack_require__) {

  var Clip = __webpack_require__(142);

  var color = __webpack_require__(144);

  var _util = __webpack_require__(80);

  var isArrayLike = _util.isArrayLike;

  /**
   * @module echarts/animation/Animator
   */
  var arraySlice = Array.prototype.slice;

  function defaultGetter(target, key) {
    return target[key];
  }

  function defaultSetter(target, key, value) {
    target[key] = value;
  }
  /**
   * @param  {number} p0
   * @param  {number} p1
   * @param  {number} percent
   * @return {number}
   */


  function interpolateNumber(p0, p1, percent) {
    return (p1 - p0) * percent + p0;
  }
  /**
   * @param  {string} p0
   * @param  {string} p1
   * @param  {number} percent
   * @return {string}
   */


  function interpolateString(p0, p1, percent) {
    return percent > 0.5 ? p1 : p0;
  }
  /**
   * @param  {Array} p0
   * @param  {Array} p1
   * @param  {number} percent
   * @param  {Array} out
   * @param  {number} arrDim
   */


  function interpolateArray(p0, p1, percent, out, arrDim) {
    var len = p0.length;

    if (arrDim == 1) {
      for (var i = 0; i < len; i++) {
        out[i] = interpolateNumber(p0[i], p1[i], percent);
      }
    } else {
      var len2 = len && p0[0].length;

      for (var i = 0; i < len; i++) {
        for (var j = 0; j < len2; j++) {
          out[i][j] = interpolateNumber(p0[i][j], p1[i][j], percent);
        }
      }
    }
  } // arr0 is source array, arr1 is target array.
  // Do some preprocess to avoid error happened when interpolating from arr0 to arr1


  function fillArr(arr0, arr1, arrDim) {
    var arr0Len = arr0.length;
    var arr1Len = arr1.length;

    if (arr0Len !== arr1Len) {
      // FIXME Not work for TypedArray
      var isPreviousLarger = arr0Len > arr1Len;

      if (isPreviousLarger) {
        // Cut the previous
        arr0.length = arr1Len;
      } else {
        // Fill the previous
        for (var i = arr0Len; i < arr1Len; i++) {
          arr0.push(arrDim === 1 ? arr1[i] : arraySlice.call(arr1[i]));
        }
      }
    } // Handling NaN value


    var len2 = arr0[0] && arr0[0].length;

    for (var i = 0; i < arr0.length; i++) {
      if (arrDim === 1) {
        if (isNaN(arr0[i])) {
          arr0[i] = arr1[i];
        }
      } else {
        for (var j = 0; j < len2; j++) {
          if (isNaN(arr0[i][j])) {
            arr0[i][j] = arr1[i][j];
          }
        }
      }
    }
  }
  /**
   * @param  {Array} arr0
   * @param  {Array} arr1
   * @param  {number} arrDim
   * @return {boolean}
   */


  function isArraySame(arr0, arr1, arrDim) {
    if (arr0 === arr1) {
      return true;
    }

    var len = arr0.length;

    if (len !== arr1.length) {
      return false;
    }

    if (arrDim === 1) {
      for (var i = 0; i < len; i++) {
        if (arr0[i] !== arr1[i]) {
          return false;
        }
      }
    } else {
      var len2 = arr0[0].length;

      for (var i = 0; i < len; i++) {
        for (var j = 0; j < len2; j++) {
          if (arr0[i][j] !== arr1[i][j]) {
            return false;
          }
        }
      }
    }

    return true;
  }
  /**
   * Catmull Rom interpolate array
   * @param  {Array} p0
   * @param  {Array} p1
   * @param  {Array} p2
   * @param  {Array} p3
   * @param  {number} t
   * @param  {number} t2
   * @param  {number} t3
   * @param  {Array} out
   * @param  {number} arrDim
   */


  function catmullRomInterpolateArray(p0, p1, p2, p3, t, t2, t3, out, arrDim) {
    var len = p0.length;

    if (arrDim == 1) {
      for (var i = 0; i < len; i++) {
        out[i] = catmullRomInterpolate(p0[i], p1[i], p2[i], p3[i], t, t2, t3);
      }
    } else {
      var len2 = p0[0].length;

      for (var i = 0; i < len; i++) {
        for (var j = 0; j < len2; j++) {
          out[i][j] = catmullRomInterpolate(p0[i][j], p1[i][j], p2[i][j], p3[i][j], t, t2, t3);
        }
      }
    }
  }
  /**
   * Catmull Rom interpolate number
   * @param  {number} p0
   * @param  {number} p1
   * @param  {number} p2
   * @param  {number} p3
   * @param  {number} t
   * @param  {number} t2
   * @param  {number} t3
   * @return {number}
   */


  function catmullRomInterpolate(p0, p1, p2, p3, t, t2, t3) {
    var v0 = (p2 - p0) * 0.5;
    var v1 = (p3 - p1) * 0.5;
    return (2 * (p1 - p2) + v0 + v1) * t3 + (-3 * (p1 - p2) - 2 * v0 - v1) * t2 + v0 * t + p1;
  }

  function cloneValue(value) {
    if (isArrayLike(value)) {
      var len = value.length;

      if (isArrayLike(value[0])) {
        var ret = [];

        for (var i = 0; i < len; i++) {
          ret.push(arraySlice.call(value[i]));
        }

        return ret;
      }

      return arraySlice.call(value);
    }

    return value;
  }

  function rgba2String(rgba) {
    rgba[0] = Math.floor(rgba[0]);
    rgba[1] = Math.floor(rgba[1]);
    rgba[2] = Math.floor(rgba[2]);
    return 'rgba(' + rgba.join(',') + ')';
  }

  function getArrayDim(keyframes) {
    var lastValue = keyframes[keyframes.length - 1].value;
    return isArrayLike(lastValue && lastValue[0]) ? 2 : 1;
  }

  function createTrackClip(animator, easing, oneTrackDone, keyframes, propName, forceAnimate) {
    var getter = animator._getter;
    var setter = animator._setter;
    var useSpline = easing === 'spline';
    var trackLen = keyframes.length;

    if (!trackLen) {
      return;
    } // Guess data type


    var firstVal = keyframes[0].value;
    var isValueArray = isArrayLike(firstVal);
    var isValueColor = false;
    var isValueString = false; // For vertices morphing

    var arrDim = isValueArray ? getArrayDim(keyframes) : 0;
    var trackMaxTime; // Sort keyframe as ascending

    keyframes.sort(function (a, b) {
      return a.time - b.time;
    });
    trackMaxTime = keyframes[trackLen - 1].time; // Percents of each keyframe

    var kfPercents = []; // Value of each keyframe

    var kfValues = [];
    var prevValue = keyframes[0].value;
    var isAllValueEqual = true;

    for (var i = 0; i < trackLen; i++) {
      kfPercents.push(keyframes[i].time / trackMaxTime); // Assume value is a color when it is a string

      var value = keyframes[i].value; // Check if value is equal, deep check if value is array

      if (!(isValueArray && isArraySame(value, prevValue, arrDim) || !isValueArray && value === prevValue)) {
        isAllValueEqual = false;
      }

      prevValue = value; // Try converting a string to a color array

      if (typeof value == 'string') {
        var colorArray = color.parse(value);

        if (colorArray) {
          value = colorArray;
          isValueColor = true;
        } else {
          isValueString = true;
        }
      }

      kfValues.push(value);
    }

    if (!forceAnimate && isAllValueEqual) {
      return;
    }

    var lastValue = kfValues[trackLen - 1]; // Polyfill array and NaN value

    for (var i = 0; i < trackLen - 1; i++) {
      if (isValueArray) {
        fillArr(kfValues[i], lastValue, arrDim);
      } else {
        if (isNaN(kfValues[i]) && !isNaN(lastValue) && !isValueString && !isValueColor) {
          kfValues[i] = lastValue;
        }
      }
    }

    isValueArray && fillArr(getter(animator._target, propName), lastValue, arrDim); // Cache the key of last frame to speed up when
    // animation playback is sequency

    var lastFrame = 0;
    var lastFramePercent = 0;
    var start;
    var w;
    var p0;
    var p1;
    var p2;
    var p3;

    if (isValueColor) {
      var rgba = [0, 0, 0, 0];
    }

    var onframe = function (target, percent) {
      // Find the range keyframes
      // kf1-----kf2---------current--------kf3
      // find kf2 and kf3 and do interpolation
      var frame; // In the easing function like elasticOut, percent may less than 0

      if (percent < 0) {
        frame = 0;
      } else if (percent < lastFramePercent) {
        // Start from next key
        // PENDING start from lastFrame ?
        start = Math.min(lastFrame + 1, trackLen - 1);

        for (frame = start; frame >= 0; frame--) {
          if (kfPercents[frame] <= percent) {
            break;
          }
        } // PENDING really need to do this ?


        frame = Math.min(frame, trackLen - 2);
      } else {
        for (frame = lastFrame; frame < trackLen; frame++) {
          if (kfPercents[frame] > percent) {
            break;
          }
        }

        frame = Math.min(frame - 1, trackLen - 2);
      }

      lastFrame = frame;
      lastFramePercent = percent;
      var range = kfPercents[frame + 1] - kfPercents[frame];

      if (range === 0) {
        return;
      } else {
        w = (percent - kfPercents[frame]) / range;
      }

      if (useSpline) {
        p1 = kfValues[frame];
        p0 = kfValues[frame === 0 ? frame : frame - 1];
        p2 = kfValues[frame > trackLen - 2 ? trackLen - 1 : frame + 1];
        p3 = kfValues[frame > trackLen - 3 ? trackLen - 1 : frame + 2];

        if (isValueArray) {
          catmullRomInterpolateArray(p0, p1, p2, p3, w, w * w, w * w * w, getter(target, propName), arrDim);
        } else {
          var value;

          if (isValueColor) {
            value = catmullRomInterpolateArray(p0, p1, p2, p3, w, w * w, w * w * w, rgba, 1);
            value = rgba2String(rgba);
          } else if (isValueString) {
            // String is step(0.5)
            return interpolateString(p1, p2, w);
          } else {
            value = catmullRomInterpolate(p0, p1, p2, p3, w, w * w, w * w * w);
          }

          setter(target, propName, value);
        }
      } else {
        if (isValueArray) {
          interpolateArray(kfValues[frame], kfValues[frame + 1], w, getter(target, propName), arrDim);
        } else {
          var value;

          if (isValueColor) {
            interpolateArray(kfValues[frame], kfValues[frame + 1], w, rgba, 1);
            value = rgba2String(rgba);
          } else if (isValueString) {
            // String is step(0.5)
            return interpolateString(kfValues[frame], kfValues[frame + 1], w);
          } else {
            value = interpolateNumber(kfValues[frame], kfValues[frame + 1], w);
          }

          setter(target, propName, value);
        }
      }
    };

    var clip = new Clip({
      target: animator._target,
      life: trackMaxTime,
      loop: animator._loop,
      delay: animator._delay,
      onframe: onframe,
      ondestroy: oneTrackDone
    });

    if (easing && easing !== 'spline') {
      clip.easing = easing;
    }

    return clip;
  }
  /**
   * @alias module:zrender/animation/Animator
   * @constructor
   * @param {Object} target
   * @param {boolean} loop
   * @param {Function} getter
   * @param {Function} setter
   */


  var Animator = function (target, loop, getter, setter) {
    this._tracks = {};
    this._target = target;
    this._loop = loop || false;
    this._getter = getter || defaultGetter;
    this._setter = setter || defaultSetter;
    this._clipCount = 0;
    this._delay = 0;
    this._doneList = [];
    this._onframeList = [];
    this._clipList = [];
  };

  Animator.prototype = {
    /**
     * 设置动画关键帧
     * @param  {number} time 关键帧时间，单位是ms
     * @param  {Object} props 关键帧的属性值，key-value表示
     * @return {module:zrender/animation/Animator}
     */
    when: function (time
    /* ms */
    , props) {
      var tracks = this._tracks;

      for (var propName in props) {
        if (!props.hasOwnProperty(propName)) {
          continue;
        }

        if (!tracks[propName]) {
          tracks[propName] = []; // Invalid value

          var value = this._getter(this._target, propName);

          if (value == null) {
            // zrLog('Invalid property ' + propName);
            continue;
          } // If time is 0
          //  Then props is given initialize value
          // Else
          //  Initialize value from current prop value


          if (time !== 0) {
            tracks[propName].push({
              time: 0,
              value: cloneValue(value)
            });
          }
        }

        tracks[propName].push({
          time: time,
          value: props[propName]
        });
      }

      return this;
    },

    /**
     * 添加动画每一帧的回调函数
     * @param  {Function} callback
     * @return {module:zrender/animation/Animator}
     */
    during: function (callback) {
      this._onframeList.push(callback);

      return this;
    },
    pause: function () {
      for (var i = 0; i < this._clipList.length; i++) {
        this._clipList[i].pause();
      }

      this._paused = true;
    },
    resume: function () {
      for (var i = 0; i < this._clipList.length; i++) {
        this._clipList[i].resume();
      }

      this._paused = false;
    },
    isPaused: function () {
      return !!this._paused;
    },
    _doneCallback: function () {
      // Clear all tracks
      this._tracks = {}; // Clear all clips

      this._clipList.length = 0;
      var doneList = this._doneList;
      var len = doneList.length;

      for (var i = 0; i < len; i++) {
        doneList[i].call(this);
      }
    },

    /**
     * 开始执行动画
     * @param  {string|Function} [easing]
     *         动画缓动函数，详见{@link module:zrender/animation/easing}
     * @param  {boolean} forceAnimate
     * @return {module:zrender/animation/Animator}
     */
    start: function (easing, forceAnimate) {
      var self = this;
      var clipCount = 0;

      var oneTrackDone = function () {
        clipCount--;

        if (!clipCount) {
          self._doneCallback();
        }
      };

      var lastClip;

      for (var propName in this._tracks) {
        if (!this._tracks.hasOwnProperty(propName)) {
          continue;
        }

        var clip = createTrackClip(this, easing, oneTrackDone, this._tracks[propName], propName, forceAnimate);

        if (clip) {
          this._clipList.push(clip);

          clipCount++; // If start after added to animation

          if (this.animation) {
            this.animation.addClip(clip);
          }

          lastClip = clip;
        }
      } // Add during callback on the last clip


      if (lastClip) {
        var oldOnFrame = lastClip.onframe;

        lastClip.onframe = function (target, percent) {
          oldOnFrame(target, percent);

          for (var i = 0; i < self._onframeList.length; i++) {
            self._onframeList[i](target, percent);
          }
        };
      } // This optimization will help the case that in the upper application
      // the view may be refreshed frequently, where animation will be
      // called repeatly but nothing changed.


      if (!clipCount) {
        this._doneCallback();
      }

      return this;
    },

    /**
     * 停止动画
     * @param {boolean} forwardToLast If move to last frame before stop
     */
    stop: function (forwardToLast) {
      var clipList = this._clipList;
      var animation = this.animation;

      for (var i = 0; i < clipList.length; i++) {
        var clip = clipList[i];

        if (forwardToLast) {
          // Move to last frame before stop
          clip.onframe(this._target, 1);
        }

        animation && animation.removeClip(clip);
      }

      clipList.length = 0;
    },

    /**
     * 设置动画延迟开始的时间
     * @param  {number} time 单位ms
     * @return {module:zrender/animation/Animator}
     */
    delay: function (time) {
      this._delay = time;
      return this;
    },

    /**
     * 添加动画结束的回调
     * @param  {Function} cb
     * @return {module:zrender/animation/Animator}
     */
    done: function (cb) {
      if (cb) {
        this._doneList.push(cb);
      }

      return this;
    },

    /**
     * @return {Array.<module:zrender/animation/Clip>}
     */
    getClips: function () {
      return this._clipList;
    }
  };
  var _default = Animator;
  module.exports = _default;

  /***/ }),
  /* 142 */
  /***/ (function(module, exports, __webpack_require__) {

  var easingFuncs = __webpack_require__(143);

  /**
   * 动画主控制器
   * @config target 动画对象，可以是数组，如果是数组的话会批量分发onframe等事件
   * @config life(1000) 动画时长
   * @config delay(0) 动画延迟时间
   * @config loop(true)
   * @config gap(0) 循环的间隔时间
   * @config onframe
   * @config easing(optional)
   * @config ondestroy(optional)
   * @config onrestart(optional)
   *
   * TODO pause
   */
  function Clip(options) {
    this._target = options.target; // 生命周期

    this._life = options.life || 1000; // 延时

    this._delay = options.delay || 0; // 开始时间
    // this._startTime = new Date().getTime() + this._delay;// 单位毫秒

    this._initialized = false; // 是否循环

    this.loop = options.loop == null ? false : options.loop;
    this.gap = options.gap || 0;
    this.easing = options.easing || 'Linear';
    this.onframe = options.onframe;
    this.ondestroy = options.ondestroy;
    this.onrestart = options.onrestart;
    this._pausedTime = 0;
    this._paused = false;
  }

  Clip.prototype = {
    constructor: Clip,
    step: function (globalTime, deltaTime) {
      // Set startTime on first step, or _startTime may has milleseconds different between clips
      // PENDING
      if (!this._initialized) {
        this._startTime = globalTime + this._delay;
        this._initialized = true;
      }

      if (this._paused) {
        this._pausedTime += deltaTime;
        return;
      }

      var percent = (globalTime - this._startTime - this._pausedTime) / this._life; // 还没开始

      if (percent < 0) {
        return;
      }

      percent = Math.min(percent, 1);
      var easing = this.easing;
      var easingFunc = typeof easing == 'string' ? easingFuncs[easing] : easing;
      var schedule = typeof easingFunc === 'function' ? easingFunc(percent) : percent;
      this.fire('frame', schedule); // 结束

      if (percent == 1) {
        if (this.loop) {
          this.restart(globalTime); // 重新开始周期
          // 抛出而不是直接调用事件直到 stage.update 后再统一调用这些事件

          return 'restart';
        } // 动画完成将这个控制器标识为待删除
        // 在Animation.update中进行批量删除


        this._needsRemove = true;
        return 'destroy';
      }

      return null;
    },
    restart: function (globalTime) {
      var remainder = (globalTime - this._startTime - this._pausedTime) % this._life;
      this._startTime = globalTime - remainder + this.gap;
      this._pausedTime = 0;
      this._needsRemove = false;
    },
    fire: function (eventType, arg) {
      eventType = 'on' + eventType;

      if (this[eventType]) {
        this[eventType](this._target, arg);
      }
    },
    pause: function () {
      this._paused = true;
    },
    resume: function () {
      this._paused = false;
    }
  };
  var _default = Clip;
  module.exports = _default;

  /***/ }),
  /* 143 */
  /***/ (function(module, exports) {

  /**
   * 缓动代码来自 https://github.com/sole/tween.js/blob/master/src/Tween.js
   * @see http://sole.github.io/tween.js/examples/03_graphs.html
   * @exports zrender/animation/easing
   */
  var easing = {
    /**
    * @param {number} k
    * @return {number}
    */
    linear: function (k) {
      return k;
    },

    /**
    * @param {number} k
    * @return {number}
    */
    quadraticIn: function (k) {
      return k * k;
    },

    /**
    * @param {number} k
    * @return {number}
    */
    quadraticOut: function (k) {
      return k * (2 - k);
    },

    /**
    * @param {number} k
    * @return {number}
    */
    quadraticInOut: function (k) {
      if ((k *= 2) < 1) {
        return 0.5 * k * k;
      }

      return -0.5 * (--k * (k - 2) - 1);
    },
    // 三次方的缓动（t^3）

    /**
    * @param {number} k
    * @return {number}
    */
    cubicIn: function (k) {
      return k * k * k;
    },

    /**
    * @param {number} k
    * @return {number}
    */
    cubicOut: function (k) {
      return --k * k * k + 1;
    },

    /**
    * @param {number} k
    * @return {number}
    */
    cubicInOut: function (k) {
      if ((k *= 2) < 1) {
        return 0.5 * k * k * k;
      }

      return 0.5 * ((k -= 2) * k * k + 2);
    },
    // 四次方的缓动（t^4）

    /**
    * @param {number} k
    * @return {number}
    */
    quarticIn: function (k) {
      return k * k * k * k;
    },

    /**
    * @param {number} k
    * @return {number}
    */
    quarticOut: function (k) {
      return 1 - --k * k * k * k;
    },

    /**
    * @param {number} k
    * @return {number}
    */
    quarticInOut: function (k) {
      if ((k *= 2) < 1) {
        return 0.5 * k * k * k * k;
      }

      return -0.5 * ((k -= 2) * k * k * k - 2);
    },
    // 五次方的缓动（t^5）

    /**
    * @param {number} k
    * @return {number}
    */
    quinticIn: function (k) {
      return k * k * k * k * k;
    },

    /**
    * @param {number} k
    * @return {number}
    */
    quinticOut: function (k) {
      return --k * k * k * k * k + 1;
    },

    /**
    * @param {number} k
    * @return {number}
    */
    quinticInOut: function (k) {
      if ((k *= 2) < 1) {
        return 0.5 * k * k * k * k * k;
      }

      return 0.5 * ((k -= 2) * k * k * k * k + 2);
    },
    // 正弦曲线的缓动（sin(t)）

    /**
    * @param {number} k
    * @return {number}
    */
    sinusoidalIn: function (k) {
      return 1 - Math.cos(k * Math.PI / 2);
    },

    /**
    * @param {number} k
    * @return {number}
    */
    sinusoidalOut: function (k) {
      return Math.sin(k * Math.PI / 2);
    },

    /**
    * @param {number} k
    * @return {number}
    */
    sinusoidalInOut: function (k) {
      return 0.5 * (1 - Math.cos(Math.PI * k));
    },
    // 指数曲线的缓动（2^t）

    /**
    * @param {number} k
    * @return {number}
    */
    exponentialIn: function (k) {
      return k === 0 ? 0 : Math.pow(1024, k - 1);
    },

    /**
    * @param {number} k
    * @return {number}
    */
    exponentialOut: function (k) {
      return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
    },

    /**
    * @param {number} k
    * @return {number}
    */
    exponentialInOut: function (k) {
      if (k === 0) {
        return 0;
      }

      if (k === 1) {
        return 1;
      }

      if ((k *= 2) < 1) {
        return 0.5 * Math.pow(1024, k - 1);
      }

      return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
    },
    // 圆形曲线的缓动（sqrt(1-t^2)）

    /**
    * @param {number} k
    * @return {number}
    */
    circularIn: function (k) {
      return 1 - Math.sqrt(1 - k * k);
    },

    /**
    * @param {number} k
    * @return {number}
    */
    circularOut: function (k) {
      return Math.sqrt(1 - --k * k);
    },

    /**
    * @param {number} k
    * @return {number}
    */
    circularInOut: function (k) {
      if ((k *= 2) < 1) {
        return -0.5 * (Math.sqrt(1 - k * k) - 1);
      }

      return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
    },
    // 创建类似于弹簧在停止前来回振荡的动画

    /**
    * @param {number} k
    * @return {number}
    */
    elasticIn: function (k) {
      var s;
      var a = 0.1;
      var p = 0.4;

      if (k === 0) {
        return 0;
      }

      if (k === 1) {
        return 1;
      }

      if (!a || a < 1) {
        a = 1;
        s = p / 4;
      } else {
        s = p * Math.asin(1 / a) / (2 * Math.PI);
      }

      return -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
    },

    /**
    * @param {number} k
    * @return {number}
    */
    elasticOut: function (k) {
      var s;
      var a = 0.1;
      var p = 0.4;

      if (k === 0) {
        return 0;
      }

      if (k === 1) {
        return 1;
      }

      if (!a || a < 1) {
        a = 1;
        s = p / 4;
      } else {
        s = p * Math.asin(1 / a) / (2 * Math.PI);
      }

      return a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1;
    },

    /**
    * @param {number} k
    * @return {number}
    */
    elasticInOut: function (k) {
      var s;
      var a = 0.1;
      var p = 0.4;

      if (k === 0) {
        return 0;
      }

      if (k === 1) {
        return 1;
      }

      if (!a || a < 1) {
        a = 1;
        s = p / 4;
      } else {
        s = p * Math.asin(1 / a) / (2 * Math.PI);
      }

      if ((k *= 2) < 1) {
        return -0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
      }

      return a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;
    },
    // 在某一动画开始沿指示的路径进行动画处理前稍稍收回该动画的移动

    /**
    * @param {number} k
    * @return {number}
    */
    backIn: function (k) {
      var s = 1.70158;
      return k * k * ((s + 1) * k - s);
    },

    /**
    * @param {number} k
    * @return {number}
    */
    backOut: function (k) {
      var s = 1.70158;
      return --k * k * ((s + 1) * k + s) + 1;
    },

    /**
    * @param {number} k
    * @return {number}
    */
    backInOut: function (k) {
      var s = 1.70158 * 1.525;

      if ((k *= 2) < 1) {
        return 0.5 * (k * k * ((s + 1) * k - s));
      }

      return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
    },
    // 创建弹跳效果

    /**
    * @param {number} k
    * @return {number}
    */
    bounceIn: function (k) {
      return 1 - easing.bounceOut(1 - k);
    },

    /**
    * @param {number} k
    * @return {number}
    */
    bounceOut: function (k) {
      if (k < 1 / 2.75) {
        return 7.5625 * k * k;
      } else if (k < 2 / 2.75) {
        return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;
      } else if (k < 2.5 / 2.75) {
        return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;
      } else {
        return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;
      }
    },

    /**
    * @param {number} k
    * @return {number}
    */
    bounceInOut: function (k) {
      if (k < 0.5) {
        return easing.bounceIn(k * 2) * 0.5;
      }

      return easing.bounceOut(k * 2 - 1) * 0.5 + 0.5;
    }
  };
  var _default = easing;
  module.exports = _default;

  /***/ }),
  /* 144 */
  /***/ (function(module, exports, __webpack_require__) {

  var LRU = __webpack_require__(74);

  var kCSSColorTable = {
    'transparent': [0, 0, 0, 0],
    'aliceblue': [240, 248, 255, 1],
    'antiquewhite': [250, 235, 215, 1],
    'aqua': [0, 255, 255, 1],
    'aquamarine': [127, 255, 212, 1],
    'azure': [240, 255, 255, 1],
    'beige': [245, 245, 220, 1],
    'bisque': [255, 228, 196, 1],
    'black': [0, 0, 0, 1],
    'blanchedalmond': [255, 235, 205, 1],
    'blue': [0, 0, 255, 1],
    'blueviolet': [138, 43, 226, 1],
    'brown': [165, 42, 42, 1],
    'burlywood': [222, 184, 135, 1],
    'cadetblue': [95, 158, 160, 1],
    'chartreuse': [127, 255, 0, 1],
    'chocolate': [210, 105, 30, 1],
    'coral': [255, 127, 80, 1],
    'cornflowerblue': [100, 149, 237, 1],
    'cornsilk': [255, 248, 220, 1],
    'crimson': [220, 20, 60, 1],
    'cyan': [0, 255, 255, 1],
    'darkblue': [0, 0, 139, 1],
    'darkcyan': [0, 139, 139, 1],
    'darkgoldenrod': [184, 134, 11, 1],
    'darkgray': [169, 169, 169, 1],
    'darkgreen': [0, 100, 0, 1],
    'darkgrey': [169, 169, 169, 1],
    'darkkhaki': [189, 183, 107, 1],
    'darkmagenta': [139, 0, 139, 1],
    'darkolivegreen': [85, 107, 47, 1],
    'darkorange': [255, 140, 0, 1],
    'darkorchid': [153, 50, 204, 1],
    'darkred': [139, 0, 0, 1],
    'darksalmon': [233, 150, 122, 1],
    'darkseagreen': [143, 188, 143, 1],
    'darkslateblue': [72, 61, 139, 1],
    'darkslategray': [47, 79, 79, 1],
    'darkslategrey': [47, 79, 79, 1],
    'darkturquoise': [0, 206, 209, 1],
    'darkviolet': [148, 0, 211, 1],
    'deeppink': [255, 20, 147, 1],
    'deepskyblue': [0, 191, 255, 1],
    'dimgray': [105, 105, 105, 1],
    'dimgrey': [105, 105, 105, 1],
    'dodgerblue': [30, 144, 255, 1],
    'firebrick': [178, 34, 34, 1],
    'floralwhite': [255, 250, 240, 1],
    'forestgreen': [34, 139, 34, 1],
    'fuchsia': [255, 0, 255, 1],
    'gainsboro': [220, 220, 220, 1],
    'ghostwhite': [248, 248, 255, 1],
    'gold': [255, 215, 0, 1],
    'goldenrod': [218, 165, 32, 1],
    'gray': [128, 128, 128, 1],
    'green': [0, 128, 0, 1],
    'greenyellow': [173, 255, 47, 1],
    'grey': [128, 128, 128, 1],
    'honeydew': [240, 255, 240, 1],
    'hotpink': [255, 105, 180, 1],
    'indianred': [205, 92, 92, 1],
    'indigo': [75, 0, 130, 1],
    'ivory': [255, 255, 240, 1],
    'khaki': [240, 230, 140, 1],
    'lavender': [230, 230, 250, 1],
    'lavenderblush': [255, 240, 245, 1],
    'lawngreen': [124, 252, 0, 1],
    'lemonchiffon': [255, 250, 205, 1],
    'lightblue': [173, 216, 230, 1],
    'lightcoral': [240, 128, 128, 1],
    'lightcyan': [224, 255, 255, 1],
    'lightgoldenrodyellow': [250, 250, 210, 1],
    'lightgray': [211, 211, 211, 1],
    'lightgreen': [144, 238, 144, 1],
    'lightgrey': [211, 211, 211, 1],
    'lightpink': [255, 182, 193, 1],
    'lightsalmon': [255, 160, 122, 1],
    'lightseagreen': [32, 178, 170, 1],
    'lightskyblue': [135, 206, 250, 1],
    'lightslategray': [119, 136, 153, 1],
    'lightslategrey': [119, 136, 153, 1],
    'lightsteelblue': [176, 196, 222, 1],
    'lightyellow': [255, 255, 224, 1],
    'lime': [0, 255, 0, 1],
    'limegreen': [50, 205, 50, 1],
    'linen': [250, 240, 230, 1],
    'magenta': [255, 0, 255, 1],
    'maroon': [128, 0, 0, 1],
    'mediumaquamarine': [102, 205, 170, 1],
    'mediumblue': [0, 0, 205, 1],
    'mediumorchid': [186, 85, 211, 1],
    'mediumpurple': [147, 112, 219, 1],
    'mediumseagreen': [60, 179, 113, 1],
    'mediumslateblue': [123, 104, 238, 1],
    'mediumspringgreen': [0, 250, 154, 1],
    'mediumturquoise': [72, 209, 204, 1],
    'mediumvioletred': [199, 21, 133, 1],
    'midnightblue': [25, 25, 112, 1],
    'mintcream': [245, 255, 250, 1],
    'mistyrose': [255, 228, 225, 1],
    'moccasin': [255, 228, 181, 1],
    'navajowhite': [255, 222, 173, 1],
    'navy': [0, 0, 128, 1],
    'oldlace': [253, 245, 230, 1],
    'olive': [128, 128, 0, 1],
    'olivedrab': [107, 142, 35, 1],
    'orange': [255, 165, 0, 1],
    'orangered': [255, 69, 0, 1],
    'orchid': [218, 112, 214, 1],
    'palegoldenrod': [238, 232, 170, 1],
    'palegreen': [152, 251, 152, 1],
    'paleturquoise': [175, 238, 238, 1],
    'palevioletred': [219, 112, 147, 1],
    'papayawhip': [255, 239, 213, 1],
    'peachpuff': [255, 218, 185, 1],
    'peru': [205, 133, 63, 1],
    'pink': [255, 192, 203, 1],
    'plum': [221, 160, 221, 1],
    'powderblue': [176, 224, 230, 1],
    'purple': [128, 0, 128, 1],
    'red': [255, 0, 0, 1],
    'rosybrown': [188, 143, 143, 1],
    'royalblue': [65, 105, 225, 1],
    'saddlebrown': [139, 69, 19, 1],
    'salmon': [250, 128, 114, 1],
    'sandybrown': [244, 164, 96, 1],
    'seagreen': [46, 139, 87, 1],
    'seashell': [255, 245, 238, 1],
    'sienna': [160, 82, 45, 1],
    'silver': [192, 192, 192, 1],
    'skyblue': [135, 206, 235, 1],
    'slateblue': [106, 90, 205, 1],
    'slategray': [112, 128, 144, 1],
    'slategrey': [112, 128, 144, 1],
    'snow': [255, 250, 250, 1],
    'springgreen': [0, 255, 127, 1],
    'steelblue': [70, 130, 180, 1],
    'tan': [210, 180, 140, 1],
    'teal': [0, 128, 128, 1],
    'thistle': [216, 191, 216, 1],
    'tomato': [255, 99, 71, 1],
    'turquoise': [64, 224, 208, 1],
    'violet': [238, 130, 238, 1],
    'wheat': [245, 222, 179, 1],
    'white': [255, 255, 255, 1],
    'whitesmoke': [245, 245, 245, 1],
    'yellow': [255, 255, 0, 1],
    'yellowgreen': [154, 205, 50, 1]
  };

  function clampCssByte(i) {
    // Clamp to integer 0 .. 255.
    i = Math.round(i); // Seems to be what Chrome does (vs truncation).

    return i < 0 ? 0 : i > 255 ? 255 : i;
  }

  function clampCssAngle(i) {
    // Clamp to integer 0 .. 360.
    i = Math.round(i); // Seems to be what Chrome does (vs truncation).

    return i < 0 ? 0 : i > 360 ? 360 : i;
  }

  function clampCssFloat(f) {
    // Clamp to float 0.0 .. 1.0.
    return f < 0 ? 0 : f > 1 ? 1 : f;
  }

  function parseCssInt(str) {
    // int or percentage.
    if (str.length && str.charAt(str.length - 1) === '%') {
      return clampCssByte(parseFloat(str) / 100 * 255);
    }

    return clampCssByte(parseInt(str, 10));
  }

  function parseCssFloat(str) {
    // float or percentage.
    if (str.length && str.charAt(str.length - 1) === '%') {
      return clampCssFloat(parseFloat(str) / 100);
    }

    return clampCssFloat(parseFloat(str));
  }

  function cssHueToRgb(m1, m2, h) {
    if (h < 0) {
      h += 1;
    } else if (h > 1) {
      h -= 1;
    }

    if (h * 6 < 1) {
      return m1 + (m2 - m1) * h * 6;
    }

    if (h * 2 < 1) {
      return m2;
    }

    if (h * 3 < 2) {
      return m1 + (m2 - m1) * (2 / 3 - h) * 6;
    }

    return m1;
  }

  function lerpNumber(a, b, p) {
    return a + (b - a) * p;
  }

  function setRgba(out, r, g, b, a) {
    out[0] = r;
    out[1] = g;
    out[2] = b;
    out[3] = a;
    return out;
  }

  function copyRgba(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
  }

  var colorCache = new LRU(20);
  var lastRemovedArr = null;

  function putToCache(colorStr, rgbaArr) {
    // Reuse removed array
    if (lastRemovedArr) {
      copyRgba(lastRemovedArr, rgbaArr);
    }

    lastRemovedArr = colorCache.put(colorStr, lastRemovedArr || rgbaArr.slice());
  }
  /**
   * @param {string} colorStr
   * @param {Array.<number>} out
   * @return {Array.<number>}
   * @memberOf module:zrender/util/color
   */


  function parse(colorStr, rgbaArr) {
    if (!colorStr) {
      return;
    }

    rgbaArr = rgbaArr || [];
    var cached = colorCache.get(colorStr);

    if (cached) {
      return copyRgba(rgbaArr, cached);
    } // colorStr may be not string


    colorStr = colorStr + ''; // Remove all whitespace, not compliant, but should just be more accepting.

    var str = colorStr.replace(/ /g, '').toLowerCase(); // Color keywords (and transparent) lookup.

    if (str in kCSSColorTable) {
      copyRgba(rgbaArr, kCSSColorTable[str]);
      putToCache(colorStr, rgbaArr);
      return rgbaArr;
    } // #abc and #abc123 syntax.


    if (str.charAt(0) === '#') {
      if (str.length === 4) {
        var iv = parseInt(str.substr(1), 16); // TODO(deanm): Stricter parsing.

        if (!(iv >= 0 && iv <= 0xfff)) {
          setRgba(rgbaArr, 0, 0, 0, 1);
          return; // Covers NaN.
        }

        setRgba(rgbaArr, (iv & 0xf00) >> 4 | (iv & 0xf00) >> 8, iv & 0xf0 | (iv & 0xf0) >> 4, iv & 0xf | (iv & 0xf) << 4, 1);
        putToCache(colorStr, rgbaArr);
        return rgbaArr;
      } else if (str.length === 7) {
        var iv = parseInt(str.substr(1), 16); // TODO(deanm): Stricter parsing.

        if (!(iv >= 0 && iv <= 0xffffff)) {
          setRgba(rgbaArr, 0, 0, 0, 1);
          return; // Covers NaN.
        }

        setRgba(rgbaArr, (iv & 0xff0000) >> 16, (iv & 0xff00) >> 8, iv & 0xff, 1);
        putToCache(colorStr, rgbaArr);
        return rgbaArr;
      }

      return;
    }

    var op = str.indexOf('('),
        ep = str.indexOf(')');

    if (op !== -1 && ep + 1 === str.length) {
      var fname = str.substr(0, op);
      var params = str.substr(op + 1, ep - (op + 1)).split(',');
      var alpha = 1; // To allow case fallthrough.

      switch (fname) {
        case 'rgba':
          if (params.length !== 4) {
            setRgba(rgbaArr, 0, 0, 0, 1);
            return;
          }

          alpha = parseCssFloat(params.pop());
        // jshint ignore:line
        // Fall through.

        case 'rgb':
          if (params.length !== 3) {
            setRgba(rgbaArr, 0, 0, 0, 1);
            return;
          }

          setRgba(rgbaArr, parseCssInt(params[0]), parseCssInt(params[1]), parseCssInt(params[2]), alpha);
          putToCache(colorStr, rgbaArr);
          return rgbaArr;

        case 'hsla':
          if (params.length !== 4) {
            setRgba(rgbaArr, 0, 0, 0, 1);
            return;
          }

          params[3] = parseCssFloat(params[3]);
          hsla2rgba(params, rgbaArr);
          putToCache(colorStr, rgbaArr);
          return rgbaArr;

        case 'hsl':
          if (params.length !== 3) {
            setRgba(rgbaArr, 0, 0, 0, 1);
            return;
          }

          hsla2rgba(params, rgbaArr);
          putToCache(colorStr, rgbaArr);
          return rgbaArr;

        default:
          return;
      }
    }

    setRgba(rgbaArr, 0, 0, 0, 1);
    return;
  }
  /**
   * @param {Array.<number>} hsla
   * @param {Array.<number>} rgba
   * @return {Array.<number>} rgba
   */


  function hsla2rgba(hsla, rgba) {
    var h = (parseFloat(hsla[0]) % 360 + 360) % 360 / 360; // 0 .. 1
    // NOTE(deanm): According to the CSS spec s/l should only be
    // percentages, but we don't bother and let float or percentage.

    var s = parseCssFloat(hsla[1]);
    var l = parseCssFloat(hsla[2]);
    var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
    var m1 = l * 2 - m2;
    rgba = rgba || [];
    setRgba(rgba, clampCssByte(cssHueToRgb(m1, m2, h + 1 / 3) * 255), clampCssByte(cssHueToRgb(m1, m2, h) * 255), clampCssByte(cssHueToRgb(m1, m2, h - 1 / 3) * 255), 1);

    if (hsla.length === 4) {
      rgba[3] = hsla[3];
    }

    return rgba;
  }
  /**
   * @param {Array.<number>} rgba
   * @return {Array.<number>} hsla
   */


  function rgba2hsla(rgba) {
    if (!rgba) {
      return;
    } // RGB from 0 to 255


    var R = rgba[0] / 255;
    var G = rgba[1] / 255;
    var B = rgba[2] / 255;
    var vMin = Math.min(R, G, B); // Min. value of RGB

    var vMax = Math.max(R, G, B); // Max. value of RGB

    var delta = vMax - vMin; // Delta RGB value

    var L = (vMax + vMin) / 2;
    var H;
    var S; // HSL results from 0 to 1

    if (delta === 0) {
      H = 0;
      S = 0;
    } else {
      if (L < 0.5) {
        S = delta / (vMax + vMin);
      } else {
        S = delta / (2 - vMax - vMin);
      }

      var deltaR = ((vMax - R) / 6 + delta / 2) / delta;
      var deltaG = ((vMax - G) / 6 + delta / 2) / delta;
      var deltaB = ((vMax - B) / 6 + delta / 2) / delta;

      if (R === vMax) {
        H = deltaB - deltaG;
      } else if (G === vMax) {
        H = 1 / 3 + deltaR - deltaB;
      } else if (B === vMax) {
        H = 2 / 3 + deltaG - deltaR;
      }

      if (H < 0) {
        H += 1;
      }

      if (H > 1) {
        H -= 1;
      }
    }

    var hsla = [H * 360, S, L];

    if (rgba[3] != null) {
      hsla.push(rgba[3]);
    }

    return hsla;
  }
  /**
   * @param {string} color
   * @param {number} level
   * @return {string}
   * @memberOf module:zrender/util/color
   */


  function lift(color, level) {
    var colorArr = parse(color);

    if (colorArr) {
      for (var i = 0; i < 3; i++) {
        if (level < 0) {
          colorArr[i] = colorArr[i] * (1 - level) | 0;
        } else {
          colorArr[i] = (255 - colorArr[i]) * level + colorArr[i] | 0;
        }

        if (colorArr[i] > 255) {
          colorArr[i] = 255;
        } else if (color[i] < 0) {
          colorArr[i] = 0;
        }
      }

      return stringify(colorArr, colorArr.length === 4 ? 'rgba' : 'rgb');
    }
  }
  /**
   * @param {string} color
   * @return {string}
   * @memberOf module:zrender/util/color
   */


  function toHex(color) {
    var colorArr = parse(color);

    if (colorArr) {
      return ((1 << 24) + (colorArr[0] << 16) + (colorArr[1] << 8) + +colorArr[2]).toString(16).slice(1);
    }
  }
  /**
   * Map value to color. Faster than lerp methods because color is represented by rgba array.
   * @param {number} normalizedValue A float between 0 and 1.
   * @param {Array.<Array.<number>>} colors List of rgba color array
   * @param {Array.<number>} [out] Mapped gba color array
   * @return {Array.<number>} will be null/undefined if input illegal.
   */


  function fastLerp(normalizedValue, colors, out) {
    if (!(colors && colors.length) || !(normalizedValue >= 0 && normalizedValue <= 1)) {
      return;
    }

    out = out || [];
    var value = normalizedValue * (colors.length - 1);
    var leftIndex = Math.floor(value);
    var rightIndex = Math.ceil(value);
    var leftColor = colors[leftIndex];
    var rightColor = colors[rightIndex];
    var dv = value - leftIndex;
    out[0] = clampCssByte(lerpNumber(leftColor[0], rightColor[0], dv));
    out[1] = clampCssByte(lerpNumber(leftColor[1], rightColor[1], dv));
    out[2] = clampCssByte(lerpNumber(leftColor[2], rightColor[2], dv));
    out[3] = clampCssFloat(lerpNumber(leftColor[3], rightColor[3], dv));
    return out;
  }
  /**
   * @deprecated
   */


  var fastMapToColor = fastLerp;
  /**
   * @param {number} normalizedValue A float between 0 and 1.
   * @param {Array.<string>} colors Color list.
   * @param {boolean=} fullOutput Default false.
   * @return {(string|Object)} Result color. If fullOutput,
   *                           return {color: ..., leftIndex: ..., rightIndex: ..., value: ...},
   * @memberOf module:zrender/util/color
   */

  function lerp(normalizedValue, colors, fullOutput) {
    if (!(colors && colors.length) || !(normalizedValue >= 0 && normalizedValue <= 1)) {
      return;
    }

    var value = normalizedValue * (colors.length - 1);
    var leftIndex = Math.floor(value);
    var rightIndex = Math.ceil(value);
    var leftColor = parse(colors[leftIndex]);
    var rightColor = parse(colors[rightIndex]);
    var dv = value - leftIndex;
    var color = stringify([clampCssByte(lerpNumber(leftColor[0], rightColor[0], dv)), clampCssByte(lerpNumber(leftColor[1], rightColor[1], dv)), clampCssByte(lerpNumber(leftColor[2], rightColor[2], dv)), clampCssFloat(lerpNumber(leftColor[3], rightColor[3], dv))], 'rgba');
    return fullOutput ? {
      color: color,
      leftIndex: leftIndex,
      rightIndex: rightIndex,
      value: value
    } : color;
  }
  /**
   * @deprecated
   */


  var mapToColor = lerp;
  /**
   * @param {string} color
   * @param {number=} h 0 ~ 360, ignore when null.
   * @param {number=} s 0 ~ 1, ignore when null.
   * @param {number=} l 0 ~ 1, ignore when null.
   * @return {string} Color string in rgba format.
   * @memberOf module:zrender/util/color
   */

  function modifyHSL(color, h, s, l) {
    color = parse(color);

    if (color) {
      color = rgba2hsla(color);
      h != null && (color[0] = clampCssAngle(h));
      s != null && (color[1] = parseCssFloat(s));
      l != null && (color[2] = parseCssFloat(l));
      return stringify(hsla2rgba(color), 'rgba');
    }
  }
  /**
   * @param {string} color
   * @param {number=} alpha 0 ~ 1
   * @return {string} Color string in rgba format.
   * @memberOf module:zrender/util/color
   */


  function modifyAlpha(color, alpha) {
    color = parse(color);

    if (color && alpha != null) {
      color[3] = clampCssFloat(alpha);
      return stringify(color, 'rgba');
    }
  }
  /**
   * @param {Array.<number>} arrColor like [12,33,44,0.4]
   * @param {string} type 'rgba', 'hsva', ...
   * @return {string} Result color. (If input illegal, return undefined).
   */


  function stringify(arrColor, type) {
    if (!arrColor || !arrColor.length) {
      return;
    }

    var colorStr = arrColor[0] + ',' + arrColor[1] + ',' + arrColor[2];

    if (type === 'rgba' || type === 'hsva' || type === 'hsla') {
      colorStr += ',' + arrColor[3];
    }

    return type + '(' + colorStr + ')';
  }

  exports.parse = parse;
  exports.lift = lift;
  exports.toHex = toHex;
  exports.fastLerp = fastLerp;
  exports.fastMapToColor = fastMapToColor;
  exports.lerp = lerp;
  exports.mapToColor = mapToColor;
  exports.modifyHSL = modifyHSL;
  exports.modifyAlpha = modifyAlpha;
  exports.stringify = stringify;

  /***/ }),
  /* 145 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("\n@export clay.util.rand\nhighp float rand(vec2 uv) {\n const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n highp float dt = dot(uv.xy, vec2(a,b)), sn = mod(dt, 3.141592653589793);\n return fract(sin(sn) * c);\n}\n@end\n@export clay.util.calculate_attenuation\nuniform float attenuationFactor : 5.0;\nfloat lightAttenuation(float dist, float range)\n{\n float attenuation = 1.0;\n attenuation = dist*dist/(range*range+1.0);\n float att_s = attenuationFactor;\n attenuation = 1.0/(attenuation*att_s+1.0);\n att_s = 1.0/(att_s+1.0);\n attenuation = attenuation - att_s;\n attenuation /= 1.0 - att_s;\n return clamp(attenuation, 0.0, 1.0);\n}\n@end\n@export clay.util.edge_factor\n#ifdef SUPPORT_STANDARD_DERIVATIVES\nfloat edgeFactor(float width)\n{\n vec3 d = fwidth(v_Barycentric);\n vec3 a3 = smoothstep(vec3(0.0), d * width, v_Barycentric);\n return min(min(a3.x, a3.y), a3.z);\n}\n#else\nfloat edgeFactor(float width)\n{\n return 1.0;\n}\n#endif\n@end\n@export clay.util.encode_float\nvec4 encodeFloat(const in float depth)\n{\n const vec4 bitShifts = vec4(256.0*256.0*256.0, 256.0*256.0, 256.0, 1.0);\n const vec4 bit_mask = vec4(0.0, 1.0/256.0, 1.0/256.0, 1.0/256.0);\n vec4 res = fract(depth * bitShifts);\n res -= res.xxyz * bit_mask;\n return res;\n}\n@end\n@export clay.util.decode_float\nfloat decodeFloat(const in vec4 color)\n{\n const vec4 bitShifts = vec4(1.0/(256.0*256.0*256.0), 1.0/(256.0*256.0), 1.0/256.0, 1.0);\n return dot(color, bitShifts);\n}\n@end\n@export clay.util.float\n@import clay.util.encode_float\n@import clay.util.decode_float\n@end\n@export clay.util.rgbm_decode\nvec3 RGBMDecode(vec4 rgbm, float range) {\n return range * rgbm.rgb * rgbm.a;\n}\n@end\n@export clay.util.rgbm_encode\nvec4 RGBMEncode(vec3 color, float range) {\n if (dot(color, color) == 0.0) {\n return vec4(0.0);\n }\n vec4 rgbm;\n color /= range;\n rgbm.a = clamp(max(max(color.r, color.g), max(color.b, 1e-6)), 0.0, 1.0);\n rgbm.a = ceil(rgbm.a * 255.0) / 255.0;\n rgbm.rgb = color / rgbm.a;\n return rgbm;\n}\n@end\n@export clay.util.rgbm\n@import clay.util.rgbm_decode\n@import clay.util.rgbm_encode\nvec4 decodeHDR(vec4 color)\n{\n#if defined(RGBM_DECODE) || defined(RGBM)\n return vec4(RGBMDecode(color, 8.12), 1.0);\n#else\n return color;\n#endif\n}\nvec4 encodeHDR(vec4 color)\n{\n#if defined(RGBM_ENCODE) || defined(RGBM)\n return RGBMEncode(color.xyz, 8.12);\n#else\n return color;\n#endif\n}\n@end\n@export clay.util.srgb\nvec4 sRGBToLinear(in vec4 value) {\n return vec4(mix(pow(value.rgb * 0.9478672986 + vec3(0.0521327014), vec3(2.4)), value.rgb * 0.0773993808, vec3(lessThanEqual(value.rgb, vec3(0.04045)))), value.w);\n}\nvec4 linearTosRGB(in vec4 value) {\n return vec4(mix(pow(value.rgb, vec3(0.41666)) * 1.055 - vec3(0.055), value.rgb * 12.92, vec3(lessThanEqual(value.rgb, vec3(0.0031308)))), value.w);\n}\n@end\n@export clay.chunk.skinning_header\n#ifdef SKINNING\nattribute vec3 weight : WEIGHT;\nattribute vec4 joint : JOINT;\n#ifdef USE_SKIN_MATRICES_TEXTURE\nuniform sampler2D skinMatricesTexture : ignore;\nuniform float skinMatricesTextureSize: ignore;\nmat4 getSkinMatrix(sampler2D tex, float idx) {\n float j = idx * 4.0;\n float x = mod(j, skinMatricesTextureSize);\n float y = floor(j / skinMatricesTextureSize) + 0.5;\n vec2 scale = vec2(skinMatricesTextureSize);\n return mat4(\n texture2D(tex, vec2(x + 0.5, y) / scale),\n texture2D(tex, vec2(x + 1.5, y) / scale),\n texture2D(tex, vec2(x + 2.5, y) / scale),\n texture2D(tex, vec2(x + 3.5, y) / scale)\n );\n}\nmat4 getSkinMatrix(float idx) {\n return getSkinMatrix(skinMatricesTexture, idx);\n}\n#else\nuniform mat4 skinMatrix[JOINT_COUNT] : SKIN_MATRIX;\nmat4 getSkinMatrix(float idx) {\n return skinMatrix[int(idx)];\n}\n#endif\n#endif\n@end\n@export clay.chunk.skin_matrix\nmat4 skinMatrixWS = getSkinMatrix(joint.x) * weight.x;\nif (weight.y > 1e-4)\n{\n skinMatrixWS += getSkinMatrix(joint.y) * weight.y;\n}\nif (weight.z > 1e-4)\n{\n skinMatrixWS += getSkinMatrix(joint.z) * weight.z;\n}\nfloat weightW = 1.0-weight.x-weight.y-weight.z;\nif (weightW > 1e-4)\n{\n skinMatrixWS += getSkinMatrix(joint.w) * weightW;\n}\n@end\n@export clay.chunk.instancing_header\n#ifdef INSTANCING\nattribute vec4 instanceMat1;\nattribute vec4 instanceMat2;\nattribute vec4 instanceMat3;\n#endif\n@end\n@export clay.chunk.instancing_matrix\nmat4 instanceMat = mat4(\n vec4(instanceMat1.xyz, 0.0),\n vec4(instanceMat2.xyz, 0.0),\n vec4(instanceMat3.xyz, 0.0),\n vec4(instanceMat1.w, instanceMat2.w, instanceMat3.w, 1.0)\n);\n@end\n@export clay.util.parallax_correct\nvec3 parallaxCorrect(in vec3 dir, in vec3 pos, in vec3 boxMin, in vec3 boxMax) {\n vec3 first = (boxMax - pos) / dir;\n vec3 second = (boxMin - pos) / dir;\n vec3 further = max(first, second);\n float dist = min(further.x, min(further.y, further.z));\n vec3 fixedPos = pos + dir * dist;\n vec3 boxCenter = (boxMax + boxMin) * 0.5;\n return normalize(fixedPos - boxCenter);\n}\n@end\n@export clay.util.clamp_sample\nvec4 clampSample(const in sampler2D texture, const in vec2 coord)\n{\n#ifdef STEREO\n float eye = step(0.5, coord.x) * 0.5;\n vec2 coordClamped = clamp(coord, vec2(eye, 0.0), vec2(0.5 + eye, 1.0));\n#else\n vec2 coordClamped = clamp(coord, vec2(0.0), vec2(1.0));\n#endif\n return texture2D(texture, coordClamped);\n}\n@end\n@export clay.util.ACES\nvec3 ACESToneMapping(vec3 color)\n{\n const float A = 2.51;\n const float B = 0.03;\n const float C = 2.43;\n const float D = 0.59;\n const float E = 0.14;\n return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\n@end\n@export clay.util.logdepth_vertex_header\n#ifdef LOG_DEPTH\n#ifdef SUPPORT_FRAG_DEPTH\nvarying float v_FragDepth;\n#else\nuniform float logDepthBufFC: LOG_DEPTH_BUFFER_FC;\n#endif\n#endif\n@end\n@export clay.util.logdepth_vertex_main\n#ifdef LOG_DEPTH\n #ifdef SUPPORT_FRAG_DEPTH\n v_FragDepth = 1.0 + gl_Position.w;\n #else\n gl_Position.z = log2(max(1e-6, gl_Position.w + 1.0)) * logDepthBufFC - 1.0;\n gl_Position.z *= gl_Position.w;\n #endif\n#endif\n@end\n@export clay.util.logdepth_fragment_header\n#if defined(LOG_DEPTH) && defined(SUPPORT_FRAG_DEPTH)\nvarying float v_FragDepth;\nuniform float logDepthBufFC : LOG_DEPTH_BUFFER_FC;\n#endif\n@end\n@export clay.util.logdepth_fragment_main\n#if defined(LOG_DEPTH) && defined(SUPPORT_FRAG_DEPTH)\n gl_FragDepthEXT = log2(v_FragDepth) * logDepthBufFC * 0.5;\n#endif\n@end\n");


  /***/ }),
  /* 146 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("\n@export ecgl.common.transformUniforms\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nuniform mat4 worldInverseTranspose : WORLDINVERSETRANSPOSE;\nuniform mat4 world : WORLD;\n@end\n\n@export ecgl.common.attributes\nattribute vec3 position : POSITION;\nattribute vec2 texcoord : TEXCOORD_0;\nattribute vec3 normal : NORMAL;\n@end\n\n@export ecgl.common.uv.header\nuniform vec2 uvRepeat : [1.0, 1.0];\nuniform vec2 uvOffset : [0.0, 0.0];\nuniform vec2 detailUvRepeat : [1.0, 1.0];\nuniform vec2 detailUvOffset : [0.0, 0.0];\n\nvarying vec2 v_Texcoord;\nvarying vec2 v_DetailTexcoord;\n@end\n\n@export ecgl.common.uv.main\nv_Texcoord = texcoord * uvRepeat + uvOffset;\nv_DetailTexcoord = texcoord * detailUvRepeat + detailUvOffset;\n@end\n\n@export ecgl.common.uv.fragmentHeader\nvarying vec2 v_Texcoord;\nvarying vec2 v_DetailTexcoord;\n@end\n\n\n@export ecgl.common.albedo.main\n\n vec4 albedoTexel = vec4(1.0);\n#ifdef DIFFUSEMAP_ENABLED\n albedoTexel = texture2D(diffuseMap, v_Texcoord);\n #ifdef SRGB_DECODE\n albedoTexel = sRGBToLinear(albedoTexel);\n #endif\n#endif\n\n#ifdef DETAILMAP_ENABLED\n vec4 detailTexel = texture2D(detailMap, v_DetailTexcoord);\n #ifdef SRGB_DECODE\n detailTexel = sRGBToLinear(detailTexel);\n #endif\n albedoTexel.rgb = mix(albedoTexel.rgb, detailTexel.rgb, detailTexel.a);\n albedoTexel.a = detailTexel.a + (1.0 - detailTexel.a) * albedoTexel.a;\n#endif\n\n@end\n\n@export ecgl.common.wireframe.vertexHeader\n\n#ifdef WIREFRAME_QUAD\nattribute vec4 barycentric;\nvarying vec4 v_Barycentric;\n#elif defined(WIREFRAME_TRIANGLE)\nattribute vec3 barycentric;\nvarying vec3 v_Barycentric;\n#endif\n\n@end\n\n@export ecgl.common.wireframe.vertexMain\n\n#if defined(WIREFRAME_QUAD) || defined(WIREFRAME_TRIANGLE)\n v_Barycentric = barycentric;\n#endif\n\n@end\n\n\n@export ecgl.common.wireframe.fragmentHeader\n\nuniform float wireframeLineWidth : 1;\nuniform vec4 wireframeLineColor: [0, 0, 0, 0.5];\n\n#ifdef WIREFRAME_QUAD\nvarying vec4 v_Barycentric;\nfloat edgeFactor () {\n vec4 d = fwidth(v_Barycentric);\n vec4 a4 = smoothstep(vec4(0.0), d * wireframeLineWidth, v_Barycentric);\n return min(min(min(a4.x, a4.y), a4.z), a4.w);\n}\n#elif defined(WIREFRAME_TRIANGLE)\nvarying vec3 v_Barycentric;\nfloat edgeFactor () {\n vec3 d = fwidth(v_Barycentric);\n vec3 a3 = smoothstep(vec3(0.0), d * wireframeLineWidth, v_Barycentric);\n return min(min(a3.x, a3.y), a3.z);\n}\n#endif\n\n@end\n\n\n@export ecgl.common.wireframe.fragmentMain\n\n#if defined(WIREFRAME_QUAD) || defined(WIREFRAME_TRIANGLE)\n if (wireframeLineWidth > 0.) {\n vec4 lineColor = wireframeLineColor;\n#ifdef SRGB_DECODE\n lineColor = sRGBToLinear(lineColor);\n#endif\n\n gl_FragColor.rgb = mix(gl_FragColor.rgb, lineColor.rgb, (1.0 - edgeFactor()) * lineColor.a);\n }\n#endif\n@end\n\n\n\n\n@export ecgl.common.bumpMap.header\n\n#ifdef BUMPMAP_ENABLED\nuniform sampler2D bumpMap;\nuniform float bumpScale : 1.0;\n\n\nvec3 bumpNormal(vec3 surfPos, vec3 surfNormal, vec3 baseNormal)\n{\n vec2 dSTdx = dFdx(v_Texcoord);\n vec2 dSTdy = dFdy(v_Texcoord);\n\n float Hll = bumpScale * texture2D(bumpMap, v_Texcoord).x;\n float dHx = bumpScale * texture2D(bumpMap, v_Texcoord + dSTdx).x - Hll;\n float dHy = bumpScale * texture2D(bumpMap, v_Texcoord + dSTdy).x - Hll;\n\n vec3 vSigmaX = dFdx(surfPos);\n vec3 vSigmaY = dFdy(surfPos);\n vec3 vN = surfNormal;\n\n vec3 R1 = cross(vSigmaY, vN);\n vec3 R2 = cross(vN, vSigmaX);\n\n float fDet = dot(vSigmaX, R1);\n\n vec3 vGrad = sign(fDet) * (dHx * R1 + dHy * R2);\n return normalize(abs(fDet) * baseNormal - vGrad);\n\n}\n#endif\n\n@end\n\n@export ecgl.common.normalMap.vertexHeader\n\n#ifdef NORMALMAP_ENABLED\nattribute vec4 tangent : TANGENT;\nvarying vec3 v_Tangent;\nvarying vec3 v_Bitangent;\n#endif\n\n@end\n\n@export ecgl.common.normalMap.vertexMain\n\n#ifdef NORMALMAP_ENABLED\n if (dot(tangent, tangent) > 0.0) {\n v_Tangent = normalize((worldInverseTranspose * vec4(tangent.xyz, 0.0)).xyz);\n v_Bitangent = normalize(cross(v_Normal, v_Tangent) * tangent.w);\n }\n#endif\n\n@end\n\n\n@export ecgl.common.normalMap.fragmentHeader\n\n#ifdef NORMALMAP_ENABLED\nuniform sampler2D normalMap;\nvarying vec3 v_Tangent;\nvarying vec3 v_Bitangent;\n#endif\n\n@end\n\n@export ecgl.common.normalMap.fragmentMain\n#ifdef NORMALMAP_ENABLED\n if (dot(v_Tangent, v_Tangent) > 0.0) {\n vec3 normalTexel = texture2D(normalMap, v_DetailTexcoord).xyz;\n if (dot(normalTexel, normalTexel) > 0.0) { N = normalTexel * 2.0 - 1.0;\n mat3 tbn = mat3(v_Tangent, v_Bitangent, v_Normal);\n N = normalize(tbn * N);\n }\n }\n#endif\n@end\n\n\n\n@export ecgl.common.vertexAnimation.header\n\n#ifdef VERTEX_ANIMATION\nattribute vec3 prevPosition;\nattribute vec3 prevNormal;\nuniform float percent;\n#endif\n\n@end\n\n@export ecgl.common.vertexAnimation.main\n\n#ifdef VERTEX_ANIMATION\n vec3 pos = mix(prevPosition, position, percent);\n vec3 norm = mix(prevNormal, normal, percent);\n#else\n vec3 pos = position;\n vec3 norm = normal;\n#endif\n\n@end\n\n\n@export ecgl.common.ssaoMap.header\n#ifdef SSAOMAP_ENABLED\nuniform sampler2D ssaoMap;\nuniform vec4 viewport : VIEWPORT;\n#endif\n@end\n\n@export ecgl.common.ssaoMap.main\n float ao = 1.0;\n#ifdef SSAOMAP_ENABLED\n ao = texture2D(ssaoMap, (gl_FragCoord.xy - viewport.xy) / viewport.zw).r;\n#endif\n@end\n\n\n\n\n@export ecgl.common.diffuseLayer.header\n\n#if (LAYER_DIFFUSEMAP_COUNT > 0)\nuniform float layerDiffuseIntensity[LAYER_DIFFUSEMAP_COUNT];\nuniform sampler2D layerDiffuseMap[LAYER_DIFFUSEMAP_COUNT];\n#endif\n\n@end\n\n@export ecgl.common.emissiveLayer.header\n\n#if (LAYER_EMISSIVEMAP_COUNT > 0)\nuniform float layerEmissionIntensity[LAYER_EMISSIVEMAP_COUNT];\nuniform sampler2D layerEmissiveMap[LAYER_EMISSIVEMAP_COUNT];\n#endif\n\n@end\n\n@export ecgl.common.layers.header\n@import ecgl.common.diffuseLayer.header\n@import ecgl.common.emissiveLayer.header\n@end\n\n@export ecgl.common.diffuseLayer.main\n\n#if (LAYER_DIFFUSEMAP_COUNT > 0)\n for (int _idx_ = 0; _idx_ < LAYER_DIFFUSEMAP_COUNT; _idx_++) {{\n float intensity = layerDiffuseIntensity[_idx_];\n vec4 texel2 = texture2D(layerDiffuseMap[_idx_], v_Texcoord);\n #ifdef SRGB_DECODE\n texel2 = sRGBToLinear(texel2);\n #endif\n albedoTexel.rgb = mix(albedoTexel.rgb, texel2.rgb * intensity, texel2.a);\n albedoTexel.a = texel2.a + (1.0 - texel2.a) * albedoTexel.a;\n }}\n#endif\n\n@end\n\n@export ecgl.common.emissiveLayer.main\n\n#if (LAYER_EMISSIVEMAP_COUNT > 0)\n for (int _idx_ = 0; _idx_ < LAYER_EMISSIVEMAP_COUNT; _idx_++)\n {{\n vec4 texel2 = texture2D(layerEmissiveMap[_idx_], v_Texcoord) * layerEmissionIntensity[_idx_];\n #ifdef SRGB_DECODE\n texel2 = sRGBToLinear(texel2);\n #endif\n float intensity = layerEmissionIntensity[_idx_];\n gl_FragColor.rgb += texel2.rgb * texel2.a * intensity;\n }}\n#endif\n\n@end\n");


  /***/ }),
  /* 147 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("@export ecgl.color.vertex\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\n\n@import ecgl.common.uv.header\n\nattribute vec2 texcoord : TEXCOORD_0;\nattribute vec3 position: POSITION;\n\n@import ecgl.common.wireframe.vertexHeader\n\n#ifdef VERTEX_COLOR\nattribute vec4 a_Color : COLOR;\nvarying vec4 v_Color;\n#endif\n\n#ifdef VERTEX_ANIMATION\nattribute vec3 prevPosition;\nuniform float percent : 1.0;\n#endif\n\nvoid main()\n{\n#ifdef VERTEX_ANIMATION\n vec3 pos = mix(prevPosition, position, percent);\n#else\n vec3 pos = position;\n#endif\n\n gl_Position = worldViewProjection * vec4(pos, 1.0);\n\n @import ecgl.common.uv.main\n\n#ifdef VERTEX_COLOR\n v_Color = a_Color;\n#endif\n\n @import ecgl.common.wireframe.vertexMain\n\n}\n\n@end\n\n@export ecgl.color.fragment\n\n#define LAYER_DIFFUSEMAP_COUNT 0\n#define LAYER_EMISSIVEMAP_COUNT 0\n\nuniform sampler2D diffuseMap;\nuniform sampler2D detailMap;\n\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\n\n#ifdef VERTEX_COLOR\nvarying vec4 v_Color;\n#endif\n\n@import ecgl.common.layers.header\n\n@import ecgl.common.uv.fragmentHeader\n\n@import ecgl.common.wireframe.fragmentHeader\n\n@import clay.util.srgb\n\nvoid main()\n{\n#ifdef SRGB_DECODE\n gl_FragColor = sRGBToLinear(color);\n#else\n gl_FragColor = color;\n#endif\n\n#ifdef VERTEX_COLOR\n gl_FragColor *= v_Color;\n#endif\n\n @import ecgl.common.albedo.main\n\n @import ecgl.common.diffuseLayer.main\n\n gl_FragColor *= albedoTexel;\n\n @import ecgl.common.emissiveLayer.main\n\n @import ecgl.common.wireframe.fragmentMain\n\n}\n@end");


  /***/ }),
  /* 148 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("/**\n * http: */\n\n@export ecgl.lambert.vertex\n\n@import ecgl.common.transformUniforms\n\n@import ecgl.common.uv.header\n\n\n@import ecgl.common.attributes\n\n@import ecgl.common.wireframe.vertexHeader\n\n#ifdef VERTEX_COLOR\nattribute vec4 a_Color : COLOR;\nvarying vec4 v_Color;\n#endif\n\n\n@import ecgl.common.vertexAnimation.header\n\n\nvarying vec3 v_Normal;\nvarying vec3 v_WorldPosition;\n\nvoid main()\n{\n @import ecgl.common.uv.main\n\n @import ecgl.common.vertexAnimation.main\n\n\n gl_Position = worldViewProjection * vec4(pos, 1.0);\n\n v_Normal = normalize((worldInverseTranspose * vec4(norm, 0.0)).xyz);\n v_WorldPosition = (world * vec4(pos, 1.0)).xyz;\n\n#ifdef VERTEX_COLOR\n v_Color = a_Color;\n#endif\n\n @import ecgl.common.wireframe.vertexMain\n}\n\n@end\n\n\n@export ecgl.lambert.fragment\n\n#define LAYER_DIFFUSEMAP_COUNT 0\n#define LAYER_EMISSIVEMAP_COUNT 0\n\n#define NORMAL_UP_AXIS 1\n#define NORMAL_FRONT_AXIS 2\n\n@import ecgl.common.uv.fragmentHeader\n\nvarying vec3 v_Normal;\nvarying vec3 v_WorldPosition;\n\nuniform sampler2D diffuseMap;\nuniform sampler2D detailMap;\n\n@import ecgl.common.layers.header\n\nuniform float emissionIntensity: 1.0;\n\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\n\nuniform mat4 viewInverse : VIEWINVERSE;\n\n#ifdef AMBIENT_LIGHT_COUNT\n@import clay.header.ambient_light\n#endif\n#ifdef AMBIENT_SH_LIGHT_COUNT\n@import clay.header.ambient_sh_light\n#endif\n\n#ifdef DIRECTIONAL_LIGHT_COUNT\n@import clay.header.directional_light\n#endif\n\n#ifdef VERTEX_COLOR\nvarying vec4 v_Color;\n#endif\n\n\n@import ecgl.common.ssaoMap.header\n\n@import ecgl.common.bumpMap.header\n\n@import clay.util.srgb\n\n@import ecgl.common.wireframe.fragmentHeader\n\n@import clay.plugin.compute_shadow_map\n\nvoid main()\n{\n#ifdef SRGB_DECODE\n gl_FragColor = sRGBToLinear(color);\n#else\n gl_FragColor = color;\n#endif\n\n#ifdef VERTEX_COLOR\n #ifdef SRGB_DECODE\n gl_FragColor *= sRGBToLinear(v_Color);\n #else\n gl_FragColor *= v_Color;\n #endif\n#endif\n\n @import ecgl.common.albedo.main\n\n @import ecgl.common.diffuseLayer.main\n\n gl_FragColor *= albedoTexel;\n\n vec3 N = v_Normal;\n#ifdef DOUBLE_SIDED\n vec3 eyePos = viewInverse[3].xyz;\n vec3 V = normalize(eyePos - v_WorldPosition);\n\n if (dot(N, V) < 0.0) {\n N = -N;\n }\n#endif\n\n float ambientFactor = 1.0;\n\n#ifdef BUMPMAP_ENABLED\n N = bumpNormal(v_WorldPosition, v_Normal, N);\n ambientFactor = dot(v_Normal, N);\n#endif\n\n vec3 N2 = vec3(N.x, N[NORMAL_UP_AXIS], N[NORMAL_FRONT_AXIS]);\n\n vec3 diffuseColor = vec3(0.0, 0.0, 0.0);\n\n @import ecgl.common.ssaoMap.main\n\n#ifdef AMBIENT_LIGHT_COUNT\n for(int i = 0; i < AMBIENT_LIGHT_COUNT; i++)\n {\n diffuseColor += ambientLightColor[i] * ambientFactor * ao;\n }\n#endif\n#ifdef AMBIENT_SH_LIGHT_COUNT\n for(int _idx_ = 0; _idx_ < AMBIENT_SH_LIGHT_COUNT; _idx_++)\n {{\n diffuseColor += calcAmbientSHLight(_idx_, N2) * ambientSHLightColor[_idx_] * ao;\n }}\n#endif\n#ifdef DIRECTIONAL_LIGHT_COUNT\n#if defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT)\n float shadowContribsDir[DIRECTIONAL_LIGHT_COUNT];\n if(shadowEnabled)\n {\n computeShadowOfDirectionalLights(v_WorldPosition, shadowContribsDir);\n }\n#endif\n for(int i = 0; i < DIRECTIONAL_LIGHT_COUNT; i++)\n {\n vec3 lightDirection = -directionalLightDirection[i];\n vec3 lightColor = directionalLightColor[i];\n\n float shadowContrib = 1.0;\n#if defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT)\n if (shadowEnabled)\n {\n shadowContrib = shadowContribsDir[i];\n }\n#endif\n\n float ndl = dot(N, normalize(lightDirection)) * shadowContrib;\n\n diffuseColor += lightColor * clamp(ndl, 0.0, 1.0);\n }\n#endif\n\n gl_FragColor.rgb *= diffuseColor;\n\n @import ecgl.common.emissiveLayer.main\n\n @import ecgl.common.wireframe.fragmentMain\n}\n\n@end");


  /***/ }),
  /* 149 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("@export ecgl.realistic.vertex\n\n@import ecgl.common.transformUniforms\n\n@import ecgl.common.uv.header\n\n@import ecgl.common.attributes\n\n\n@import ecgl.common.wireframe.vertexHeader\n\n#ifdef VERTEX_COLOR\nattribute vec4 a_Color : COLOR;\nvarying vec4 v_Color;\n#endif\n\n#ifdef NORMALMAP_ENABLED\nattribute vec4 tangent : TANGENT;\nvarying vec3 v_Tangent;\nvarying vec3 v_Bitangent;\n#endif\n\n@import ecgl.common.vertexAnimation.header\n\nvarying vec3 v_Normal;\nvarying vec3 v_WorldPosition;\n\nvoid main()\n{\n\n @import ecgl.common.uv.main\n\n @import ecgl.common.vertexAnimation.main\n\n gl_Position = worldViewProjection * vec4(pos, 1.0);\n\n v_Normal = normalize((worldInverseTranspose * vec4(norm, 0.0)).xyz);\n v_WorldPosition = (world * vec4(pos, 1.0)).xyz;\n\n#ifdef VERTEX_COLOR\n v_Color = a_Color;\n#endif\n\n#ifdef NORMALMAP_ENABLED\n v_Tangent = normalize((worldInverseTranspose * vec4(tangent.xyz, 0.0)).xyz);\n v_Bitangent = normalize(cross(v_Normal, v_Tangent) * tangent.w);\n#endif\n\n @import ecgl.common.wireframe.vertexMain\n\n}\n\n@end\n\n\n\n@export ecgl.realistic.fragment\n\n#define LAYER_DIFFUSEMAP_COUNT 0\n#define LAYER_EMISSIVEMAP_COUNT 0\n#define PI 3.14159265358979\n#define ROUGHNESS_CHANEL 0\n#define METALNESS_CHANEL 1\n\n#define NORMAL_UP_AXIS 1\n#define NORMAL_FRONT_AXIS 2\n\n#ifdef VERTEX_COLOR\nvarying vec4 v_Color;\n#endif\n\n@import ecgl.common.uv.fragmentHeader\n\nvarying vec3 v_Normal;\nvarying vec3 v_WorldPosition;\n\nuniform sampler2D diffuseMap;\n\nuniform sampler2D detailMap;\nuniform sampler2D metalnessMap;\nuniform sampler2D roughnessMap;\n\n@import ecgl.common.layers.header\n\nuniform float emissionIntensity: 1.0;\n\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\n\nuniform float metalness : 0.0;\nuniform float roughness : 0.5;\n\nuniform mat4 viewInverse : VIEWINVERSE;\n\n#ifdef AMBIENT_LIGHT_COUNT\n@import clay.header.ambient_light\n#endif\n\n#ifdef AMBIENT_SH_LIGHT_COUNT\n@import clay.header.ambient_sh_light\n#endif\n\n#ifdef AMBIENT_CUBEMAP_LIGHT_COUNT\n@import clay.header.ambient_cubemap_light\n#endif\n\n#ifdef DIRECTIONAL_LIGHT_COUNT\n@import clay.header.directional_light\n#endif\n\n@import ecgl.common.normalMap.fragmentHeader\n\n@import ecgl.common.ssaoMap.header\n\n@import ecgl.common.bumpMap.header\n\n@import clay.util.srgb\n\n@import clay.util.rgbm\n\n@import ecgl.common.wireframe.fragmentHeader\n\n@import clay.plugin.compute_shadow_map\n\nvec3 F_Schlick(float ndv, vec3 spec) {\n return spec + (1.0 - spec) * pow(1.0 - ndv, 5.0);\n}\n\nfloat D_Phong(float g, float ndh) {\n float a = pow(8192.0, g);\n return (a + 2.0) / 8.0 * pow(ndh, a);\n}\n\nvoid main()\n{\n vec4 albedoColor = color;\n\n vec3 eyePos = viewInverse[3].xyz;\n vec3 V = normalize(eyePos - v_WorldPosition);\n#ifdef VERTEX_COLOR\n #ifdef SRGB_DECODE\n albedoColor *= sRGBToLinear(v_Color);\n #else\n albedoColor *= v_Color;\n #endif\n#endif\n\n @import ecgl.common.albedo.main\n\n @import ecgl.common.diffuseLayer.main\n\n albedoColor *= albedoTexel;\n\n float m = metalness;\n\n#ifdef METALNESSMAP_ENABLED\n float m2 = texture2D(metalnessMap, v_DetailTexcoord)[METALNESS_CHANEL];\n m = clamp(m2 + (m - 0.5) * 2.0, 0.0, 1.0);\n#endif\n\n vec3 baseColor = albedoColor.rgb;\n albedoColor.rgb = baseColor * (1.0 - m);\n vec3 specFactor = mix(vec3(0.04), baseColor, m);\n\n float g = 1.0 - roughness;\n\n#ifdef ROUGHNESSMAP_ENABLED\n float g2 = 1.0 - texture2D(roughnessMap, v_DetailTexcoord)[ROUGHNESS_CHANEL];\n g = clamp(g2 + (g - 0.5) * 2.0, 0.0, 1.0);\n#endif\n\n vec3 N = v_Normal;\n\n#ifdef DOUBLE_SIDED\n if (dot(N, V) < 0.0) {\n N = -N;\n }\n#endif\n\n float ambientFactor = 1.0;\n\n#ifdef BUMPMAP_ENABLED\n N = bumpNormal(v_WorldPosition, v_Normal, N);\n ambientFactor = dot(v_Normal, N);\n#endif\n\n@import ecgl.common.normalMap.fragmentMain\n\n vec3 N2 = vec3(N.x, N[NORMAL_UP_AXIS], N[NORMAL_FRONT_AXIS]);\n\n vec3 diffuseTerm = vec3(0.0);\n vec3 specularTerm = vec3(0.0);\n\n float ndv = clamp(dot(N, V), 0.0, 1.0);\n vec3 fresnelTerm = F_Schlick(ndv, specFactor);\n\n @import ecgl.common.ssaoMap.main\n\n#ifdef AMBIENT_LIGHT_COUNT\n for(int _idx_ = 0; _idx_ < AMBIENT_LIGHT_COUNT; _idx_++)\n {{\n diffuseTerm += ambientLightColor[_idx_] * ambientFactor * ao;\n }}\n#endif\n\n#ifdef AMBIENT_SH_LIGHT_COUNT\n for(int _idx_ = 0; _idx_ < AMBIENT_SH_LIGHT_COUNT; _idx_++)\n {{\n diffuseTerm += calcAmbientSHLight(_idx_, N2) * ambientSHLightColor[_idx_] * ao;\n }}\n#endif\n\n#ifdef DIRECTIONAL_LIGHT_COUNT\n#if defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT)\n float shadowContribsDir[DIRECTIONAL_LIGHT_COUNT];\n if(shadowEnabled)\n {\n computeShadowOfDirectionalLights(v_WorldPosition, shadowContribsDir);\n }\n#endif\n for(int _idx_ = 0; _idx_ < DIRECTIONAL_LIGHT_COUNT; _idx_++)\n {{\n vec3 L = -directionalLightDirection[_idx_];\n vec3 lc = directionalLightColor[_idx_];\n\n vec3 H = normalize(L + V);\n float ndl = clamp(dot(N, normalize(L)), 0.0, 1.0);\n float ndh = clamp(dot(N, H), 0.0, 1.0);\n\n float shadowContrib = 1.0;\n#if defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT)\n if (shadowEnabled)\n {\n shadowContrib = shadowContribsDir[_idx_];\n }\n#endif\n\n vec3 li = lc * ndl * shadowContrib;\n\n diffuseTerm += li;\n specularTerm += li * fresnelTerm * D_Phong(g, ndh);\n }}\n#endif\n\n\n#ifdef AMBIENT_CUBEMAP_LIGHT_COUNT\n vec3 L = reflect(-V, N);\n L = vec3(L.x, L[NORMAL_UP_AXIS], L[NORMAL_FRONT_AXIS]);\n float rough2 = clamp(1.0 - g, 0.0, 1.0);\n float bias2 = rough2 * 5.0;\n vec2 brdfParam2 = texture2D(ambientCubemapLightBRDFLookup[0], vec2(rough2, ndv)).xy;\n vec3 envWeight2 = specFactor * brdfParam2.x + brdfParam2.y;\n vec3 envTexel2;\n for(int _idx_ = 0; _idx_ < AMBIENT_CUBEMAP_LIGHT_COUNT; _idx_++)\n {{\n envTexel2 = RGBMDecode(textureCubeLodEXT(ambientCubemapLightCubemap[_idx_], L, bias2), 8.12);\n specularTerm += ambientCubemapLightColor[_idx_] * envTexel2 * envWeight2 * ao;\n }}\n#endif\n\n gl_FragColor.rgb = albedoColor.rgb * diffuseTerm + specularTerm;\n gl_FragColor.a = albedoColor.a;\n\n#ifdef SRGB_ENCODE\n gl_FragColor = linearTosRGB(gl_FragColor);\n#endif\n\n @import ecgl.common.emissiveLayer.main\n\n @import ecgl.common.wireframe.fragmentMain\n}\n\n@end");


  /***/ }),
  /* 150 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("@export ecgl.hatching.vertex\n\n@import ecgl.realistic.vertex\n\n@end\n\n\n@export ecgl.hatching.fragment\n\n#define NORMAL_UP_AXIS 1\n#define NORMAL_FRONT_AXIS 2\n\n@import ecgl.common.uv.fragmentHeader\n\nvarying vec3 v_Normal;\nvarying vec3 v_WorldPosition;\n\nuniform vec4 color : [0.0, 0.0, 0.0, 1.0];\nuniform vec4 paperColor : [1.0, 1.0, 1.0, 1.0];\n\nuniform mat4 viewInverse : VIEWINVERSE;\n\n#ifdef AMBIENT_LIGHT_COUNT\n@import clay.header.ambient_light\n#endif\n#ifdef AMBIENT_SH_LIGHT_COUNT\n@import clay.header.ambient_sh_light\n#endif\n\n#ifdef DIRECTIONAL_LIGHT_COUNT\n@import clay.header.directional_light\n#endif\n\n#ifdef VERTEX_COLOR\nvarying vec4 v_Color;\n#endif\n\n\n@import ecgl.common.ssaoMap.header\n\n@import ecgl.common.bumpMap.header\n\n@import clay.util.srgb\n\n@import ecgl.common.wireframe.fragmentHeader\n\n@import clay.plugin.compute_shadow_map\n\nuniform sampler2D hatch1;\nuniform sampler2D hatch2;\nuniform sampler2D hatch3;\nuniform sampler2D hatch4;\nuniform sampler2D hatch5;\nuniform sampler2D hatch6;\n\nfloat shade(in float tone) {\n vec4 c = vec4(1. ,1., 1., 1.);\n float step = 1. / 6.;\n vec2 uv = v_DetailTexcoord;\n if (tone <= step / 2.0) {\n c = mix(vec4(0.), texture2D(hatch6, uv), 12. * tone);\n }\n else if (tone <= step) {\n c = mix(texture2D(hatch6, uv), texture2D(hatch5, uv), 6. * tone);\n }\n if(tone > step && tone <= 2. * step){\n c = mix(texture2D(hatch5, uv), texture2D(hatch4, uv) , 6. * (tone - step));\n }\n if(tone > 2. * step && tone <= 3. * step){\n c = mix(texture2D(hatch4, uv), texture2D(hatch3, uv), 6. * (tone - 2. * step));\n }\n if(tone > 3. * step && tone <= 4. * step){\n c = mix(texture2D(hatch3, uv), texture2D(hatch2, uv), 6. * (tone - 3. * step));\n }\n if(tone > 4. * step && tone <= 5. * step){\n c = mix(texture2D(hatch2, uv), texture2D(hatch1, uv), 6. * (tone - 4. * step));\n }\n if(tone > 5. * step){\n c = mix(texture2D(hatch1, uv), vec4(1.), 6. * (tone - 5. * step));\n }\n\n return c.r;\n}\n\nconst vec3 w = vec3(0.2125, 0.7154, 0.0721);\n\nvoid main()\n{\n#ifdef SRGB_DECODE\n vec4 inkColor = sRGBToLinear(color);\n#else\n vec4 inkColor = color;\n#endif\n\n#ifdef VERTEX_COLOR\n #ifdef SRGB_DECODE\n inkColor *= sRGBToLinear(v_Color);\n #else\n inkColor *= v_Color;\n #endif\n#endif\n\n vec3 N = v_Normal;\n#ifdef DOUBLE_SIDED\n vec3 eyePos = viewInverse[3].xyz;\n vec3 V = normalize(eyePos - v_WorldPosition);\n\n if (dot(N, V) < 0.0) {\n N = -N;\n }\n#endif\n\n float tone = 0.0;\n\n float ambientFactor = 1.0;\n\n#ifdef BUMPMAP_ENABLED\n N = bumpNormal(v_WorldPosition, v_Normal, N);\n ambientFactor = dot(v_Normal, N);\n#endif\n\n vec3 N2 = vec3(N.x, N[NORMAL_UP_AXIS], N[NORMAL_FRONT_AXIS]);\n\n @import ecgl.common.ssaoMap.main\n\n#ifdef AMBIENT_LIGHT_COUNT\n for(int i = 0; i < AMBIENT_LIGHT_COUNT; i++)\n {\n tone += dot(ambientLightColor[i], w) * ambientFactor * ao;\n }\n#endif\n#ifdef AMBIENT_SH_LIGHT_COUNT\n for(int _idx_ = 0; _idx_ < AMBIENT_SH_LIGHT_COUNT; _idx_++)\n {{\n tone += dot(calcAmbientSHLight(_idx_, N2) * ambientSHLightColor[_idx_], w) * ao;\n }}\n#endif\n#ifdef DIRECTIONAL_LIGHT_COUNT\n#if defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT)\n float shadowContribsDir[DIRECTIONAL_LIGHT_COUNT];\n if(shadowEnabled)\n {\n computeShadowOfDirectionalLights(v_WorldPosition, shadowContribsDir);\n }\n#endif\n for(int i = 0; i < DIRECTIONAL_LIGHT_COUNT; i++)\n {\n vec3 lightDirection = -directionalLightDirection[i];\n float lightTone = dot(directionalLightColor[i], w);\n\n float shadowContrib = 1.0;\n#if defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT)\n if (shadowEnabled)\n {\n shadowContrib = shadowContribsDir[i];\n }\n#endif\n\n float ndl = dot(N, normalize(lightDirection)) * shadowContrib;\n\n tone += lightTone * clamp(ndl, 0.0, 1.0);\n }\n#endif\n\n gl_FragColor = mix(inkColor, paperColor, shade(clamp(tone, 0.0, 1.0)));\n }\n@end\n");


  /***/ }),
  /* 151 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("@export ecgl.sm.depth.vertex\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\n\nattribute vec3 position : POSITION;\nattribute vec2 texcoord : TEXCOORD_0;\n\n#ifdef VERTEX_ANIMATION\nattribute vec3 prevPosition;\nuniform float percent : 1.0;\n#endif\n\nvarying vec4 v_ViewPosition;\nvarying vec2 v_Texcoord;\n\nvoid main(){\n\n#ifdef VERTEX_ANIMATION\n vec3 pos = mix(prevPosition, position, percent);\n#else\n vec3 pos = position;\n#endif\n\n v_ViewPosition = worldViewProjection * vec4(pos, 1.0);\n gl_Position = v_ViewPosition;\n\n v_Texcoord = texcoord;\n\n}\n@end\n\n\n\n@export ecgl.sm.depth.fragment\n\n@import clay.sm.depth.fragment\n\n@end");


  /***/ }),
  /* 152 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);


  var GL_SERIES = ['bar3D', 'line3D', 'map3D', 'scatter3D', 'surface', 'lines3D', 'scatterGL', 'scatter3D'];

  function convertNormalEmphasis(option, optType) {
      if (option && option[optType] && (option[optType].normal || option[optType].emphasis)) {
          var normalOpt = option[optType].normal;
          var emphasisOpt = option[optType].emphasis;

          if (normalOpt) {
              option[optType] = normalOpt;
          }
          if (emphasisOpt) {
              option.emphasis = option.emphasis || {};
              option.emphasis[optType] = emphasisOpt;
          }
      }
  }

  function convertNormalEmphasisForEach(option) {
      convertNormalEmphasis(option, 'itemStyle');
      convertNormalEmphasis(option, 'lineStyle');
      convertNormalEmphasis(option, 'areaStyle');
      convertNormalEmphasis(option, 'label');
  }

  function removeTextStyleInAxis(axesOpt) {
      if (!axesOpt) {
          return;
      }
      if (!(axesOpt instanceof Array)) {
          axesOpt = [axesOpt];
      }
      __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.each(axesOpt, function (axisOpt) {
          if (axisOpt.axisLabel) {
              var labelOpt = axisOpt.axisLabel;
              __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.extend(labelOpt, labelOpt.textStyle);
              labelOpt.textStyle = null;
          }
      });
  }

  /* harmony default export */ __webpack_exports__["a"] = (function (option) {
      __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.each(option.series, function (series) {
          if (__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.indexOf(GL_SERIES, series.type) >= 0) {
              convertNormalEmphasisForEach(series);

              // Compatitable with original mapbox
              if (series.coordinateSystem === 'mapbox') {
                  series.coordinateSystem = 'mapbox3D';
                  option.mapbox3D = option.mapbox;
              }
          }
      });

      removeTextStyleInAxis(option.xAxis3D);
      removeTextStyleInAxis(option.yAxis3D);
      removeTextStyleInAxis(option.zAxis3D);
      removeTextStyleInAxis(option.grid3D);

      convertNormalEmphasis(option.geo3D);
  });
  /***/ }),
  /* 153 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__grid3D_Axis3DModel__ = __webpack_require__(154);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__grid3D_Grid3DModel__ = __webpack_require__(158);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__grid3D_Grid3DView__ = __webpack_require__(159);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__coord_grid3DCreator__ = __webpack_require__(166);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_echarts_lib_echarts__);







  __WEBPACK_IMPORTED_MODULE_4_echarts_lib_echarts___default.a.registerAction({
      type: 'grid3DChangeCamera',
      event: 'grid3dcamerachanged',
      update: 'series:updateCamera'
  }, function (payload, ecModel) {
      ecModel.eachComponent({
          mainType: 'grid3D', query: payload
      }, function (componentModel) {
          componentModel.setView(payload);
      });
  });

  __WEBPACK_IMPORTED_MODULE_4_echarts_lib_echarts___default.a.registerAction({
      type: 'grid3DShowAxisPointer',
      event: 'grid3dshowaxispointer',
      update: 'grid3D:showAxisPointer'
  }, function (payload, ecModel) {
  });

  __WEBPACK_IMPORTED_MODULE_4_echarts_lib_echarts___default.a.registerAction({
      type: 'grid3DHideAxisPointer',
      event: 'grid3dhideaxispointer',
      update: 'grid3D:hideAxisPointer'
  }, function (payload, ecModel) {
  });

  /***/ }),
  /* 154 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__createAxis3DModel__ = __webpack_require__(155);



  var Axis3DModel = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendComponentModel({

      type: 'cartesian3DAxis',

      axis: null,

      /**
       * @override
       */
      getCoordSysModel: function () {
          return this.ecModel.queryComponents({
              mainType: 'grid3D',
              index: this.option.gridIndex,
              id: this.option.gridId
          })[0];
      }
  });

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.helper.mixinAxisModelCommonMethods(Axis3DModel);

  function getAxisType(axisDim, option) {
      // Default axis with data is category axis
      return option.type || (option.data ? 'category' : 'value');
  }

  Object(__WEBPACK_IMPORTED_MODULE_1__createAxis3DModel__["a" /* default */])('x', Axis3DModel, getAxisType, {
      name: 'X'
  });
  Object(__WEBPACK_IMPORTED_MODULE_1__createAxis3DModel__["a" /* default */])('y', Axis3DModel, getAxisType, {
      name: 'Y'
  });
  Object(__WEBPACK_IMPORTED_MODULE_1__createAxis3DModel__["a" /* default */])('z', Axis3DModel, getAxisType, {
      name: 'Z'
  });

  /***/ }),
  /* 155 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__axis3DDefault__ = __webpack_require__(156);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_echarts_lib_data_OrdinalMeta__ = __webpack_require__(157);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_echarts_lib_data_OrdinalMeta___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_echarts_lib_data_OrdinalMeta__);





  var AXIS_TYPES = ['value', 'category', 'time', 'log'];
  /**
   * Generate sub axis model class
   * @param {string} dim 'x' 'y' 'radius' 'angle' 'parallel'
   * @param {module:echarts/model/Component} BaseAxisModelClass
   * @param {Function} axisTypeDefaulter
   * @param {Object} [extraDefaultOption]
   */
  /* harmony default export */ __webpack_exports__["a"] = (function (dim, BaseAxisModelClass, axisTypeDefaulter, extraDefaultOption) {

      __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.each(AXIS_TYPES, function (axisType) {

          BaseAxisModelClass.extend({

              type: dim + 'Axis3D.' + axisType,

              /**
               * @type readOnly
               */
              __ordinalMeta: null,

              mergeDefaultAndTheme: function (option, ecModel) {

                  var themeModel = ecModel.getTheme();
                  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge(option, themeModel.get(axisType + 'Axis3D'));
                  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge(option, this.getDefaultOption());

                  option.type = axisTypeDefaulter(dim, option);
              },

              /**
               * @override
               */
              optionUpdated: function () {
                  var thisOption = this.option;

                  if (thisOption.type === 'category') {
                      this.__ordinalMeta = __WEBPACK_IMPORTED_MODULE_2_echarts_lib_data_OrdinalMeta___default.a.createByAxisModel(this);
                  }
              },

              getCategories: function () {
                  if (this.option.type === 'category') {
                      return this.__ordinalMeta.categories;
                  }
              },

              getOrdinalMeta: function () {
                  return this.__ordinalMeta;
              },

              defaultOption: __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge(
                  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.clone(__WEBPACK_IMPORTED_MODULE_1__axis3DDefault__["a" /* default */][axisType + 'Axis3D']),
                  extraDefaultOption || {},
                  true
              )
          });
      });

      // TODO
      BaseAxisModelClass.superClass.registerSubTypeDefaulter(
          dim + 'Axis3D',
          __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.curry(axisTypeDefaulter, dim)
      );
  });
  /***/ }),
  /* 156 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);


  var defaultOption = {
      show: true,

      grid3DIndex: 0,
      // 反向坐标轴
      inverse: false,

      // 坐标轴名字
      name: '',
      // 坐标轴名字位置
      nameLocation: 'middle',

      nameTextStyle: {
          fontSize: 16
      },
      // 文字与轴线距离
      nameGap: 20,

      axisPointer: {},

      axisLine: {},
      // 坐标轴小标记
      axisTick: {},
      axisLabel: {},
      // 分隔区域
      splitArea: {}
  };

  var categoryAxis = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge({
      // 类目起始和结束两端空白策略
      boundaryGap: true,
      // splitArea: {
          // show: false
      // },
      // 坐标轴小标记
      axisTick: {
          // If tick is align with label when boundaryGap is true
          // Default with axisTick
          alignWithLabel: false,
          interval: 'auto'
      },
      // 坐标轴文本标签，详见axis.axisLabel
      axisLabel: {
          interval: 'auto'
      },
      axisPointer: {
          label: {
              show: false
          }
      }
  }, defaultOption);

  var valueAxis = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge({
      // 数值起始和结束两端空白策略
      boundaryGap: [0, 0],
      // 最小值, 设置成 'dataMin' 则从数据中计算最小值
      // min: null,
      // 最大值，设置成 'dataMax' 则从数据中计算最大值
      // max: null,
      // 脱离0值比例，放大聚焦到最终_min，_max区间
      // scale: false,
      // 分割段数，默认为5
      splitNumber: 5,
      // Minimum interval
      // minInterval: null

      axisPointer: {
          label: {
          }
      }
  }, defaultOption);

  // FIXME
  var timeAxis = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.defaults({
      scale: true,
      min: 'dataMin',
      max: 'dataMax'
  }, valueAxis);
  var logAxis = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.defaults({
      logBase: 10
  }, valueAxis);
  logAxis.scale = true;

  /* harmony default export */ __webpack_exports__["a"] = ({
      categoryAxis3D: categoryAxis,
      valueAxis3D: valueAxis,
      timeAxis3D: timeAxis,
      logAxis3D: logAxis
  });

  /***/ }),
  /* 157 */
  /***/ (function(module, exports, __webpack_require__) {


  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  var _util = __webpack_require__(16);

  var createHashMap = _util.createHashMap;
  var isObject = _util.isObject;
  var map = _util.map;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * @constructor
   * @param {Object} [opt]
   * @param {Object} [opt.categories=[]]
   * @param {Object} [opt.needCollect=false]
   * @param {Object} [opt.deduplication=false]
   */
  function OrdinalMeta(opt) {
    /**
     * @readOnly
     * @type {Array.<string>}
     */
    this.categories = opt.categories || [];
    /**
     * @private
     * @type {boolean}
     */

    this._needCollect = opt.needCollect;
    /**
     * @private
     * @type {boolean}
     */

    this._deduplication = opt.deduplication;
    /**
     * @private
     * @type {boolean}
     */

    this._map;
  }
  /**
   * @param {module:echarts/model/Model} axisModel
   * @return {module:echarts/data/OrdinalMeta}
   */


  OrdinalMeta.createByAxisModel = function (axisModel) {
    var option = axisModel.option;
    var data = option.data;
    var categories = data && map(data, getName);
    return new OrdinalMeta({
      categories: categories,
      needCollect: !categories,
      // deduplication is default in axis.
      deduplication: option.dedplication !== false
    });
  };

  var proto = OrdinalMeta.prototype;
  /**
   * @param {string} category
   * @return {number} ordinal
   */

  proto.getOrdinal = function (category) {
    return getOrCreateMap(this).get(category);
  };
  /**
   * @param {*} category
   * @return {number} The ordinal. If not found, return NaN.
   */


  proto.parseAndCollect = function (category) {
    var index;
    var needCollect = this._needCollect; // The value of category dim can be the index of the given category set.
    // This feature is only supported when !needCollect, because we should
    // consider a common case: a value is 2017, which is a number but is
    // expected to be tread as a category. This case usually happen in dataset,
    // where it happent to be no need of the index feature.

    if (typeof category !== 'string' && !needCollect) {
      return category;
    } // Optimize for the scenario:
    // category is ['2012-01-01', '2012-01-02', ...], where the input
    // data has been ensured not duplicate and is large data.
    // Notice, if a dataset dimension provide categroies, usually echarts
    // should remove duplication except user tell echarts dont do that
    // (set axis.deduplication = false), because echarts do not know whether
    // the values in the category dimension has duplication (consider the
    // parallel-aqi example)


    if (needCollect && !this._deduplication) {
      index = this.categories.length;
      this.categories[index] = category;
      return index;
    }

    var map = getOrCreateMap(this);
    index = map.get(category);

    if (index == null) {
      if (needCollect) {
        index = this.categories.length;
        this.categories[index] = category;
        map.set(category, index);
      } else {
        index = NaN;
      }
    }

    return index;
  }; // Consider big data, do not create map until needed.


  function getOrCreateMap(ordinalMeta) {
    return ordinalMeta._map || (ordinalMeta._map = createHashMap(ordinalMeta.categories));
  }

  function getName(obj) {
    if (isObject(obj) && obj.value != null) {
      return obj.value;
    } else {
      return obj + '';
    }
  }

  var _default = OrdinalMeta;
  module.exports = _default;

  /***/ }),
  /* 158 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_componentViewControlMixin__ = __webpack_require__(44);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_componentPostEffectMixin__ = __webpack_require__(28);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_componentLightMixin__ = __webpack_require__(29);





  var Grid3DModel = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendComponentModel({

      type: 'grid3D',

      dependencies: ['xAxis3D', 'yAxis3D', 'zAxis3D'],

      defaultOption: {

          show: true,

          zlevel: -10,

          // Layout used for viewport
          left: 0,
          top: 0,
          width: '100%',
          height: '100%',

          environment: 'auto',

          // Dimension of grid3D
          boxWidth: 100,
          boxHeight: 100,
          boxDepth: 100,

          // Common axis options.
          axisPointer: {
              show: true,
              lineStyle: {
                  color: 'rgba(0, 0, 0, 0.8)',
                  width: 1
              },

              label: {
                  show: true,
                  // (dimValue: number, value: Array) => string
                  formatter: null,

                  // TODO, Consider boxWidth
                  margin: 8,
                  // backgroundColor: '#ffbd67',
                  // borderColor: '#000',
                  // borderWidth: 0,

                  textStyle: {
                      fontSize: 14,
                      color: '#fff',
                      backgroundColor: 'rgba(0,0,0,0.5)',
                      padding: 3,
                      borderRadius: 3
                  }
              }
          },

          axisLine: {
              show: true,
              lineStyle: {
                  color: '#333',
                  width: 2,
                  type: 'solid'
              }
          },

          axisTick: {
              show: true,
              inside: false,
              length: 3,
              lineStyle: {
                  width: 1
              }
          },
          axisLabel: {
              show: true,
              inside: false,
              rotate: 0,
              margin: 8,
              textStyle: {
                  fontSize: 12
              }
          },
          splitLine: {
              show: true,
              lineStyle: {
                  color: ['#ccc'],
                  width: 1,
                  type: 'solid'
              }
          },
          splitArea: {
              show: false,
              areaStyle: {
                  color: ['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']
              }
          },

          // Light options
          light: {
              main: {
                  // Alpha angle for top-down rotation
                  // Positive to rotate to top.
                  alpha: 30,
                  // beta angle for left-right rotation
                  // Positive to rotate to right.
                  beta: 40
              },
              ambient: {
                  intensity: 0.4
              }
          },

          viewControl: {
              // Small damping for precise control.
              // damping: 0.1,

              // Alpha angle for top-down rotation
              // Positive to rotate to top.
              alpha: 20,
              // beta angle for left-right rotation
              // Positive to rotate to right.
              beta: 40,

              autoRotate: false,

              // Distance to the surface of grid3D.
              distance: 200,

              // Min distance to the surface of grid3D
              minDistance: 40,
              // Max distance to the surface of grid3D
              maxDistance: 400
          }
      }
  });

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge(Grid3DModel.prototype, __WEBPACK_IMPORTED_MODULE_1__common_componentViewControlMixin__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge(Grid3DModel.prototype, __WEBPACK_IMPORTED_MODULE_2__common_componentPostEffectMixin__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge(Grid3DModel.prototype, __WEBPACK_IMPORTED_MODULE_3__common_componentLightMixin__["a" /* default */]);



  /***/ }),
  /* 159 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__ = __webpack_require__(1);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_OrbitControl__ = __webpack_require__(45);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_geometry_Lines3D__ = __webpack_require__(25);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_retrieve__ = __webpack_require__(2);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_ZRTextureAtlasSurface__ = __webpack_require__(82);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_SceneHelper__ = __webpack_require__(30);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__Grid3DFace__ = __webpack_require__(161);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__Grid3DAxis__ = __webpack_require__(163);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__util_mesh_LabelsMesh__ = __webpack_require__(62);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__util_shader_lines3D_glsl_js__ = __webpack_require__(46);
  // TODO orthographic camera






  var firstNotNull = __WEBPACK_IMPORTED_MODULE_4__util_retrieve__["a" /* default */].firstNotNull;







  __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Shader.import(__WEBPACK_IMPORTED_MODULE_10__util_shader_lines3D_glsl_js__["a" /* default */]);

  ['x', 'y', 'z'].forEach(function (dim) {
      __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendComponentView({
          type: dim + 'Axis3D'
      });
  });

  var dimIndicesMap = {
      // Left to right
      x: 0,
      // Far to near
      y: 2,
      // Bottom to up
      z: 1
  };

  /* unused harmony default export */ var _unused_webpack_default_export = (__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendComponentView({

      type: 'grid3D',

      __ecgl__: true,

      init: function (ecModel, api) {

          var FACES = [
              // planeDim0, planeDim1, offsetDim, dir on dim3 axis(gl), plane.
              ['y', 'z', 'x', -1, 'left'],
              ['y', 'z', 'x',  1, 'right'],
              ['x', 'y', 'z', -1, 'bottom'],
              ['x', 'y','z',  1, 'top'],
              ['x', 'z', 'y', -1, 'far'],
              ['x', 'z','y',  1, 'near']
          ];

          var DIMS = ['x', 'y', 'z'];

          var quadsMaterial = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Material({
              // transparent: true,
              shader: __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].createShader('ecgl.color'),
              depthMask: false,
              transparent: true
          });
          var linesMaterial = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Material({
              // transparent: true,
              shader: __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].createShader('ecgl.meshLines3D'),
              depthMask: false,
              transparent: true
          });
          quadsMaterial.define('fragment', 'DOUBLE_SIDED');
          quadsMaterial.define('both', 'VERTEX_COLOR');

          this.groupGL = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Node();

          this._control = new __WEBPACK_IMPORTED_MODULE_2__util_OrbitControl__["a" /* default */]({
              zr: api.getZr()
          });
          this._control.init();

          // Save mesh and other infos for each face.
          this._faces = FACES.map(function (faceInfo) {
              var face = new __WEBPACK_IMPORTED_MODULE_7__Grid3DFace__["a" /* default */](faceInfo, linesMaterial, quadsMaterial);
              this.groupGL.add(face.rootNode);
              return face;
          }, this);

          // Save mesh and other infos for each axis.
          this._axes = DIMS.map(function (dim) {
              var axis = new __WEBPACK_IMPORTED_MODULE_8__Grid3DAxis__["a" /* default */](dim, linesMaterial);
              this.groupGL.add(axis.rootNode);
              return axis;
          }, this);

          var dpr = api.getDevicePixelRatio();
          // Texture surface for label.
          this._axisLabelSurface = new __WEBPACK_IMPORTED_MODULE_5__util_ZRTextureAtlasSurface__["a" /* default */]({
              width: 256, height: 256,
              devicePixelRatio: dpr
          });
          this._axisLabelSurface.onupdate = function () {
              api.getZr().refresh();
          };

          this._axisPointerLineMesh = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Mesh({
              geometry: new __WEBPACK_IMPORTED_MODULE_3__util_geometry_Lines3D__["a" /* default */]({ useNativeLine: false }),
              material: linesMaterial,
              castShadow: false,
              // PENDING
              ignorePicking: true,
              renderOrder: 3
          });
          this.groupGL.add(this._axisPointerLineMesh);

          this._axisPointerLabelsSurface = new __WEBPACK_IMPORTED_MODULE_5__util_ZRTextureAtlasSurface__["a" /* default */]({
              width: 128, height: 128,
              devicePixelRatio: dpr
          });
          this._axisPointerLabelsMesh = new __WEBPACK_IMPORTED_MODULE_9__util_mesh_LabelsMesh__["a" /* default */]({
              ignorePicking: true, renderOrder: 4,
              castShadow: false
          });
          this._axisPointerLabelsMesh.material.set('textureAtlas', this._axisPointerLabelsSurface.getTexture());
          this.groupGL.add(this._axisPointerLabelsMesh);

          this._lightRoot = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Node();
          this._sceneHelper = new __WEBPACK_IMPORTED_MODULE_6__common_SceneHelper__["a" /* default */]();
          this._sceneHelper.initLight(this._lightRoot);
      },

      render: function (grid3DModel, ecModel, api) {

          this._model = grid3DModel;
          this._api = api;

          var cartesian = grid3DModel.coordinateSystem;

          // Always have light.
          cartesian.viewGL.add(this._lightRoot);

          if (grid3DModel.get('show')) {
              cartesian.viewGL.add(this.groupGL);
          }
          else {
              cartesian.viewGL.remove(this.groupGL);
          }

          // cartesian.viewGL.setCameraType(grid3DModel.get('viewControl.projection'));

          var control = this._control;
          control.setViewGL(cartesian.viewGL);

          var viewControlModel = grid3DModel.getModel('viewControl');
          control.setFromViewControlModel(viewControlModel, 0);

          this._axisLabelSurface.clear();

          control.off('update');
          if (grid3DModel.get('show')) {
              this._faces.forEach(function (face) {
                  face.update(grid3DModel, ecModel, api);
              }, this);
              this._axes.forEach(function (axis) {
                  axis.update(grid3DModel, this._axisLabelSurface, api);
              }, this);
          }

          control.on('update', this._onCameraChange.bind(this, grid3DModel, api), this);

          this._sceneHelper.setScene(cartesian.viewGL.scene);
          this._sceneHelper.updateLight(grid3DModel);

          // Set post effect
          cartesian.viewGL.setPostEffect(grid3DModel.getModel('postEffect'), api);
          cartesian.viewGL.setTemporalSuperSampling(grid3DModel.getModel('temporalSuperSampling'));

          this._initMouseHandler(grid3DModel);
      },

      afterRender: function (grid3DModel, ecModel, api, layerGL) {
          // Create ambient cubemap after render because we need to know the renderer.
          // TODO
          var renderer = layerGL.renderer;

          this._sceneHelper.updateAmbientCubemap(renderer, grid3DModel, api);

          this._sceneHelper.updateSkybox(renderer, grid3DModel, api);
      },

      /**
       * showAxisPointer will be triggered by action.
       */
      showAxisPointer: function (grid3dModel, ecModel, api, payload) {
          this._doShowAxisPointer();
          this._updateAxisPointer(payload.value);
      },

      /**
       * hideAxisPointer will be triggered by action.
       */
      hideAxisPointer: function (grid3dModel, ecModel, api, payload) {
          this._doHideAxisPointer();
      },

      _initMouseHandler: function (grid3DModel) {
          var cartesian = grid3DModel.coordinateSystem;
          var viewGL = cartesian.viewGL;

          // TODO xAxis3D.axisPointer.show ?
          if (grid3DModel.get('show') && grid3DModel.get('axisPointer.show')) {
              viewGL.on('mousemove', this._updateAxisPointerOnMousePosition, this);
          }
          else {
              viewGL.off('mousemove', this._updateAxisPointerOnMousePosition);
          }
      },

      /**
       * Try find and show axisPointer on the intersect point
       * of mouse ray with grid plane.
       */
      _updateAxisPointerOnMousePosition: function (e) {
          // Ignore if mouse is on the element.
          if (e.target) {
              return;
          }
          var grid3DModel = this._model;
          var cartesian = grid3DModel.coordinateSystem;
          var viewGL = cartesian.viewGL;

          var ray = viewGL.castRay(e.offsetX, e.offsetY, new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Ray());

          var nearestIntersectPoint;
          for (var i = 0; i < this._faces.length; i++) {
              var face = this._faces[i];
              if (face.rootNode.invisible) {
                  continue;
              }

              // Plane is not face the camera. flip it
              if (face.plane.normal.dot(viewGL.camera.worldTransform.z) < 0) {
                  face.plane.normal.negate();
              }

              var point = ray.intersectPlane(face.plane);
              if (!point) {
                  continue;
              }
              var axis0 = cartesian.getAxis(face.faceInfo[0]);
              var axis1 = cartesian.getAxis(face.faceInfo[1]);
              var idx0 = dimIndicesMap[face.faceInfo[0]];
              var idx1 = dimIndicesMap[face.faceInfo[1]];
              if (axis0.contain(point.array[idx0]) && axis1.contain(point.array[idx1])) {
                  nearestIntersectPoint = point;
              }
          }

          if (nearestIntersectPoint) {
              var data = cartesian.pointToData(nearestIntersectPoint.array, [], true);
              this._updateAxisPointer(data);

              this._doShowAxisPointer();
          }
          else {
              this._doHideAxisPointer();
          }
      },

      _onCameraChange: function (grid3DModel, api) {

          if (grid3DModel.get('show')) {
              this._updateFaceVisibility();
              this._updateAxisLinePosition();
          }

          var control = this._control;

          api.dispatchAction({
              type: 'grid3DChangeCamera',
              alpha: control.getAlpha(),
              beta: control.getBeta(),
              distance: control.getDistance(),
              center: control.getCenter(),
              from: this.uid,
              grid3DId: grid3DModel.id
          });
      },

      /**
       * Update visibility of each face when camera view changed, front face will be invisible.
       * @private
       */
      _updateFaceVisibility: function () {
          var camera = this._control.getCamera();
          var viewSpacePos = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Vector3();
          camera.update();
          for (var idx = 0; idx < this._faces.length / 2; idx++) {
              var depths = [];
              for (var k = 0; k < 2; k++) {
                  var face = this._faces[idx * 2 + k];
                  face.rootNode.getWorldPosition(viewSpacePos);
                  viewSpacePos.transformMat4(camera.viewMatrix);
                  depths[k] = viewSpacePos.z;
              }
              // Set the front face invisible
              var frontIndex = depths[0] > depths[1] ? 0 : 1;
              var frontFace = this._faces[idx * 2 + frontIndex];
              var backFace = this._faces[idx * 2 + 1 - frontIndex];
              // Update rotation.
              frontFace.rootNode.invisible = true;
              backFace.rootNode.invisible = false;
          }
      },

      /**
       * Update axis line position when camera view changed.
       * @private
       */
      _updateAxisLinePosition: function () {
          // Put xAxis, yAxis on x, y visible plane.
          // Put zAxis on the left.
          // TODO
          var cartesian = this._model.coordinateSystem;
          var xAxis = cartesian.getAxis('x');
          var yAxis = cartesian.getAxis('y');
          var zAxis = cartesian.getAxis('z');
          var top = zAxis.getExtentMax();
          var bottom = zAxis.getExtentMin();
          var left = xAxis.getExtentMin();
          var right = xAxis.getExtentMax();
          var near = yAxis.getExtentMax();
          var far = yAxis.getExtentMin();

          var xAxisNode = this._axes[0].rootNode;
          var yAxisNode = this._axes[1].rootNode;
          var zAxisNode = this._axes[2].rootNode;

          var faces = this._faces;
          // Notice: in cartesian up axis is z, but in webgl up axis is y.
          var xAxisZOffset = (faces[4].rootNode.invisible ? far : near);
          var xAxisYOffset = (faces[2].rootNode.invisible ? top : bottom);
          var yAxisXOffset = (faces[0].rootNode.invisible ? left : right);
          var yAxisYOffset = (faces[2].rootNode.invisible ? top : bottom);
          var zAxisXOffset = (faces[0].rootNode.invisible ? right : left);
          var zAxisZOffset = (faces[4].rootNode.invisible ? far : near);

          xAxisNode.rotation.identity();
          yAxisNode.rotation.identity();
          zAxisNode.rotation.identity();
          if (faces[4].rootNode.invisible) {
              this._axes[0].flipped = true;
              xAxisNode.rotation.rotateX(Math.PI);
          }
          if (faces[0].rootNode.invisible) {
              this._axes[1].flipped = true;
              yAxisNode.rotation.rotateZ(Math.PI);
          }
          if (faces[4].rootNode.invisible) {
              this._axes[2].flipped = true;
              zAxisNode.rotation.rotateY(Math.PI);
          }

          xAxisNode.position.set(0, xAxisYOffset, xAxisZOffset);
          yAxisNode.position.set(yAxisXOffset, yAxisYOffset, 0); // Actually z
          zAxisNode.position.set(zAxisXOffset, 0, zAxisZOffset); // Actually y

          xAxisNode.update();
          yAxisNode.update();
          zAxisNode.update();

          this._updateAxisLabelAlign();
      },

      /**
       * Update label align on axis when axisLine position changed.
       * @private
       */
      _updateAxisLabelAlign: function () {
          // var cartesian = this._model.coordinateSystem;
          var camera = this._control.getCamera();
          var coords = [new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Vector4(), new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Vector4()];
          var center = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Vector4();
          this.groupGL.getWorldPosition(center);
          center.w = 1.0;
          center.transformMat4(camera.viewMatrix)
              .transformMat4(camera.projectionMatrix);
          center.x /= center.w;
          center.y /= center.w;
          this._axes.forEach(function (axisInfo) {
              var lineCoords = axisInfo.axisLineCoords;
              var labelGeo = axisInfo.labelsMesh.geometry;
              for (var i = 0; i < coords.length; i++) {
                  coords[i].setArray(lineCoords[i]);
                  coords[i].w = 1.0;
                  coords[i].transformMat4(axisInfo.rootNode.worldTransform)
                      .transformMat4(camera.viewMatrix)
                      .transformMat4(camera.projectionMatrix);
                  coords[i].x /= coords[i].w;
                  coords[i].y /= coords[i].w;
              }
              var dx = coords[1].x - coords[0].x;
              var dy = coords[1].y - coords[0].y;
              var cx = (coords[1].x + coords[0].x) / 2;
              var cy = (coords[1].y + coords[0].y) / 2;
              var textAlign;
              var verticalAlign;
              if (Math.abs(dy / dx) < 0.5) {
                  textAlign = 'center';
                  verticalAlign = cy > center.y ? 'bottom' : 'top';
              }
              else {
                  verticalAlign = 'middle';
                  textAlign = cx > center.x ? 'left' : 'right';
              }

              // axis labels
              axisInfo.setSpriteAlign(textAlign, verticalAlign, this._api);
          }, this);
      },

      _doShowAxisPointer: function () {
          if (!this._axisPointerLineMesh.invisible) {
              return;
          }

          this._axisPointerLineMesh.invisible = false;
          this._axisPointerLabelsMesh.invisible = false;
          this._api.getZr().refresh();
      },

      _doHideAxisPointer: function () {
          if (this._axisPointerLineMesh.invisible) {
              return;
          }

          this._axisPointerLineMesh.invisible = true;
          this._axisPointerLabelsMesh.invisible = true;
          this._api.getZr().refresh();
      },
      /**
       * @private updateAxisPointer.
       */
      _updateAxisPointer: function (data) {
          var cartesian = this._model.coordinateSystem;
          var point = cartesian.dataToPoint(data);

          var axisPointerLineMesh = this._axisPointerLineMesh;
          var linesGeo = axisPointerLineMesh.geometry;

          var axisPointerParentModel = this._model.getModel('axisPointer');

          var dpr = this._api.getDevicePixelRatio();
          linesGeo.convertToDynamicArray(true);


          function ifShowAxisPointer(axis) {
              return __WEBPACK_IMPORTED_MODULE_4__util_retrieve__["a" /* default */].firstNotNull(
                  axis.model.get('axisPointer.show'),
                  axisPointerParentModel.get('show')
              );
          }
          function getAxisColorAndLineWidth(axis) {
              var axisPointerModel = axis.model.getModel('axisPointer', axisPointerParentModel);
              var lineStyleModel = axisPointerModel.getModel('lineStyle');

              var color = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].parseColor(lineStyleModel.get('color'));
              var lineWidth = firstNotNull(lineStyleModel.get('width'), 1);
              var opacity = firstNotNull(lineStyleModel.get('opacity'), 1);
              color[3] *= opacity;

              return {
                  color: color,
                  lineWidth: lineWidth
              };
          }
          for (var k = 0; k < this._faces.length; k++) {
              var face = this._faces[k];
              if (face.rootNode.invisible) {
                  continue;
              }

              var faceInfo = face.faceInfo;
              var otherCoord = faceInfo[3] < 0
                  ? cartesian.getAxis(faceInfo[2]).getExtentMin()
                  : cartesian.getAxis(faceInfo[2]).getExtentMax();
              var otherDimIdx = dimIndicesMap[faceInfo[2]];

              // Line on face.
              for (var i = 0; i < 2; i++) {
                  var dim = faceInfo[i];
                  var faceOtherDim = faceInfo[1 - i];
                  var axis = cartesian.getAxis(dim);
                  var faceOtherAxis = cartesian.getAxis(faceOtherDim);

                  if (!ifShowAxisPointer(axis)) {
                      continue;
                  }

                  var p0 = [0, 0, 0]; var p1 = [0, 0, 0];
                  var dimIdx = dimIndicesMap[dim];
                  var faceOtherDimIdx = dimIndicesMap[faceOtherDim];
                  p0[dimIdx] = p1[dimIdx] = point[dimIdx];

                  p0[otherDimIdx] = p1[otherDimIdx] = otherCoord;
                  p0[faceOtherDimIdx] = faceOtherAxis.getExtentMin();
                  p1[faceOtherDimIdx] = faceOtherAxis.getExtentMax();

                  var colorAndLineWidth = getAxisColorAndLineWidth(axis);
                  linesGeo.addLine(p0, p1, colorAndLineWidth.color, colorAndLineWidth.lineWidth * dpr);
              }

              // Project line.
              if (ifShowAxisPointer(cartesian.getAxis(faceInfo[2]))) {
                  var p0 = point.slice();
                  var p1 = point.slice();
                  p1[otherDimIdx] = otherCoord;
                  var colorAndLineWidth = getAxisColorAndLineWidth(cartesian.getAxis(faceInfo[2]));
                  linesGeo.addLine(p0, p1, colorAndLineWidth.color, colorAndLineWidth.lineWidth * dpr);
              }
          }
          linesGeo.convertToTypedArray();

          this._updateAxisPointerLabelsMesh(data);

          this._api.getZr().refresh();
      },

      _updateAxisPointerLabelsMesh: function (data) {
          var grid3dModel = this._model;
          var axisPointerLabelsMesh = this._axisPointerLabelsMesh;
          var axisPointerLabelsSurface = this._axisPointerLabelsSurface;
          var cartesian = grid3dModel.coordinateSystem;

          var axisPointerParentModel = grid3dModel.getModel('axisPointer');

          axisPointerLabelsMesh.geometry.convertToDynamicArray(true);
          axisPointerLabelsSurface.clear();

          var otherDim = {
              x: 'y', y: 'x', z: 'y'
          };
          this._axes.forEach(function (axisInfo, idx) {
              var axis = cartesian.getAxis(axisInfo.dim);
              var axisModel = axis.model;
              var axisPointerModel = axisModel.getModel('axisPointer', axisPointerParentModel);
              var labelModel = axisPointerModel.getModel('label');
              var lineColor = axisPointerModel.get('lineStyle.color');
              if (!labelModel.get('show') || !axisPointerModel.get('show')) {
                  return;
              }
              var val = data[idx];
              var formatter = labelModel.get('formatter');
              var text = axis.scale.getLabel(val);
              if (formatter != null) {
                  text = formatter(text, data);
              }
              else {
                  if (axis.scale.type === 'interval' || axis.scale.type === 'log') {
                      var precision = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.number.getPrecisionSafe(axis.scale.getTicks()[0]);
                      text = val.toFixed(precision + 2);
                  }
              }

              var textStyleModel = labelModel.getModel('textStyle');
              var labelColor = textStyleModel.get('color');
              var textEl = new __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.graphic.Text();
              __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.graphic.setTextStyle(textEl.style, textStyleModel, {
                  text: text,
                  textFill: labelColor || lineColor,
                  textAlign: 'left',
                  textVerticalAlign: 'top'
              });
              var coords = axisPointerLabelsSurface.add(textEl);
              var rect = textEl.getBoundingRect();
              var dpr = this._api.getDevicePixelRatio();
              var pos = axisInfo.rootNode.position.toArray();
              var otherIdx = dimIndicesMap[otherDim[axisInfo.dim]];
              pos[otherIdx] += (axisInfo.flipped ? -1 : 1) * labelModel.get('margin');
              pos[dimIndicesMap[axisInfo.dim]] = axis.dataToCoord(data[idx]);

              axisPointerLabelsMesh.geometry.addSprite(
                  pos, [rect.width * dpr, rect.height * dpr], coords,
                  axisInfo.textAlign, axisInfo.textVerticalAlign
              );
          }, this);
          axisPointerLabelsSurface.getZr().refreshImmediately();
          axisPointerLabelsMesh.material.set('uvScale', axisPointerLabelsSurface.getCoordsScale());
          axisPointerLabelsMesh.geometry.convertToTypedArray();
      },

      dispose: function () {
          this.groupGL.removeAll();
          this._control.dispose();
      }
  }));

  /***/ }),
  /* 160 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__vec2__ = __webpack_require__(69);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__vec3__ = __webpack_require__(12);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__vec4__ = __webpack_require__(33);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__mat2__ = __webpack_require__(78);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__mat2d__ = __webpack_require__(79);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__mat3__ = __webpack_require__(34);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__mat4__ = __webpack_require__(21);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__quat__ = __webpack_require__(55);
  /**
   * @fileoverview gl-matrix - High performance matrix and vector operations
   * @author Brandon Jones
   * @author Colin MacKenzie IV
   * @version 2.2.2
   */

  /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, this
      list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
      and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */










  /* harmony default export */ __webpack_exports__["a"] = ({
      vec2: __WEBPACK_IMPORTED_MODULE_0__vec2__["a" /* default */],
      vec3: __WEBPACK_IMPORTED_MODULE_1__vec3__["a" /* default */],
      vec4: __WEBPACK_IMPORTED_MODULE_2__vec4__["a" /* default */],
      mat2: __WEBPACK_IMPORTED_MODULE_3__mat2__["a" /* default */],
      mat2d: __WEBPACK_IMPORTED_MODULE_4__mat2d__["a" /* default */],
      mat3: __WEBPACK_IMPORTED_MODULE_5__mat3__["a" /* default */],
      mat4: __WEBPACK_IMPORTED_MODULE_6__mat4__["a" /* default */],
      quat: __WEBPACK_IMPORTED_MODULE_7__quat__["a" /* default */]
  });


  /***/ }),
  /* 161 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__ = __webpack_require__(1);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_retrieve__ = __webpack_require__(2);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_geometry_Lines3D__ = __webpack_require__(25);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_geometry_Quads__ = __webpack_require__(162);





  var firstNotNull = __WEBPACK_IMPORTED_MODULE_2__util_retrieve__["a" /* default */].firstNotNull;

  var dimIndicesMap = {
      // Left to right
      x: 0,
      // Far to near
      y: 2,
      // Bottom to up
      z: 1
  };

  function updateFacePlane(node, plane, otherAxis, dir) {
      var coord = [0, 0, 0];
      var distance = dir < 0 ? otherAxis.getExtentMin() : otherAxis.getExtentMax();
      coord[dimIndicesMap[otherAxis.dim]] = distance;
      node.position.setArray(coord);
      node.rotation.identity();

      // Negative distance because on the opposite of normal direction.
      plane.distance = -Math.abs(distance);
      plane.normal.set(0, 0, 0);
      if (otherAxis.dim === 'x') {
          node.rotation.rotateY(dir * Math.PI / 2);
          plane.normal.x = -dir;
      }
      else if (otherAxis.dim === 'z') {
          node.rotation.rotateX(-dir * Math.PI / 2);
          plane.normal.y = -dir;
      }
      else {
          if (dir > 0) {
              node.rotation.rotateY(Math.PI);
          }
          plane.normal.z = -dir;
      }
  }


  function Grid3DFace(faceInfo, linesMaterial, quadsMaterial) {
      this.rootNode = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Node();

      var linesMesh = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Mesh({
          geometry: new __WEBPACK_IMPORTED_MODULE_3__util_geometry_Lines3D__["a" /* default */]({ useNativeLine: false }),
          material: linesMaterial,
          castShadow: false,
          ignorePicking: true,
          $ignorePicking: true,
          renderOrder: 1
      });
      var quadsMesh = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Mesh({
          geometry: new __WEBPACK_IMPORTED_MODULE_4__util_geometry_Quads__["a" /* default */](),
          material: quadsMaterial,
          castShadow: false,
          culling: false,
          ignorePicking: true,
          $ignorePicking: true,
          renderOrder: 0
      });
      // Quads are behind lines.
      this.rootNode.add(quadsMesh);
      this.rootNode.add(linesMesh);

      this.faceInfo = faceInfo;
      this.plane =new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Plane();
      this.linesMesh =linesMesh;
      this.quadsMesh =quadsMesh;
  }

  Grid3DFace.prototype.update = function (grid3DModel, ecModel, api) {
      var cartesian = grid3DModel.coordinateSystem;
      var axes = [
          cartesian.getAxis(this.faceInfo[0]),
          cartesian.getAxis(this.faceInfo[1])
      ];
      var lineGeometry = this.linesMesh.geometry;
      var quadsGeometry = this.quadsMesh.geometry;

      lineGeometry.convertToDynamicArray(true);
      quadsGeometry.convertToDynamicArray(true);
      this._updateSplitLines(lineGeometry, axes, grid3DModel, api);
      this._udpateSplitAreas(quadsGeometry, axes, grid3DModel, api);
      lineGeometry.convertToTypedArray();
      quadsGeometry.convertToTypedArray();


      var otherAxis = cartesian.getAxis(this.faceInfo[2]);
      updateFacePlane(this.rootNode, this.plane, otherAxis, this.faceInfo[3]);
  };

  Grid3DFace.prototype._updateSplitLines = function (geometry, axes, grid3DModel, api) {
      var dpr = api.getDevicePixelRatio();
      axes.forEach(function (axis, idx) {
          var axisModel = axis.model;
          var otherExtent = axes[1 - idx].getExtent();

          if (axis.scale.isBlank()) {
              return;
          }

          var splitLineModel = axisModel.getModel('splitLine', grid3DModel.getModel('splitLine'));
          // Render splitLines
          if (splitLineModel.get('show')) {
              var lineStyleModel = splitLineModel.getModel('lineStyle');
              var lineColors = lineStyleModel.get('color');
              var opacity = firstNotNull(lineStyleModel.get('opacity'), 1.0);
              var lineWidth = firstNotNull(lineStyleModel.get('width'), 1.0);

              lineColors = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.isArray(lineColors) ? lineColors : [lineColors];

              var ticksCoords = axis.getTicksCoords({
                  tickModel: splitLineModel
              });

              var count = 0;
              for (var i = 0; i < ticksCoords.length; i++) {
                  var tickCoord = ticksCoords[i].coord;
                  var lineColor = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].parseColor(lineColors[count % lineColors.length]);
                  lineColor[3] *= opacity;

                  var p0 = [0, 0, 0]; var p1 = [0, 0, 0];
                  // 0 - x, 1 - y
                  p0[idx] = p1[idx] = tickCoord;
                  p0[1 - idx] = otherExtent[0];
                  p1[1 - idx] = otherExtent[1];

                  geometry.addLine(p0, p1, lineColor, lineWidth * dpr);

                  count++;
              }
          }
      });
  };

  Grid3DFace.prototype._udpateSplitAreas = function (geometry, axes, grid3DModel, api) {
      axes.forEach(function (axis, idx) {
          var axisModel = axis.model;
          var otherExtent = axes[1 - idx].getExtent();

          if (axis.scale.isBlank()) {
              return;
          }

          var splitAreaModel = axisModel.getModel('splitArea', grid3DModel.getModel('splitArea'));
          // Render splitAreas
          if (splitAreaModel.get('show')) {
              var areaStyleModel = splitAreaModel.getModel('areaStyle');
              var colors = areaStyleModel.get('color');
              var opacity = firstNotNull(areaStyleModel.get('opacity'), 1.0);

              colors = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.isArray(colors) ? colors : [colors];

              var ticksCoords = axis.getTicksCoords({
                  tickModel: splitAreaModel,
                  clamp: true
              });

              var count = 0;
              var prevP0 = [0, 0, 0];
              var prevP1 = [0, 0, 0];
              // 0 - x, 1 - y
              for (var i = 0; i < ticksCoords.length; i++) {
                  var tickCoord = ticksCoords[i].coord;

                  var p0 = [0, 0, 0]; var p1 = [0, 0, 0];
                  // 0 - x, 1 - y
                  p0[idx] = p1[idx] = tickCoord;
                  p0[1 - idx] = otherExtent[0];
                  p1[1 - idx] = otherExtent[1];

                  if (i === 0) {
                      prevP0 = p0;
                      prevP1 = p1;
                      continue;
                  }

                  var color = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].parseColor(colors[count % colors.length]);
                  color[3] *= opacity;
                  geometry.addQuad([prevP0, p0, p1, prevP1], color);

                  prevP0 = p0;
                  prevP1 = p1;

                  count++;
              }
          }
      });
  };

  /* harmony default export */ __webpack_exports__["a"] = (Grid3DFace);

  /***/ }),
  /* 162 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_claygl_src_Geometry__ = __webpack_require__(14);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__dynamicConvertMixin__ = __webpack_require__(39);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_claygl_src_dep_glmatrix__ = __webpack_require__(6);
  /**
   * @module echarts-gl/util/geometry/QuadsGeometry
   * @author Yi Shen(http://github.com/pissang)
   */





  var vec3 = __WEBPACK_IMPORTED_MODULE_3_claygl_src_dep_glmatrix__["a" /* default */].vec3;

  /**
   * @constructor
   * @alias module:echarts-gl/util/geometry/QuadsGeometry
   * @extends clay.Geometry
   */

  var QuadsGeometry = __WEBPACK_IMPORTED_MODULE_0_claygl_src_Geometry__["a" /* default */].extend(function () {
      return {

          segmentScale: 1,

          /**
           * Need to use mesh to expand lines if lineWidth > MAX_LINE_WIDTH
           */
          useNativeLine: true,

          attributes: {
              position: new __WEBPACK_IMPORTED_MODULE_0_claygl_src_Geometry__["a" /* default */].Attribute('position', 'float', 3, 'POSITION'),
              normal: new __WEBPACK_IMPORTED_MODULE_0_claygl_src_Geometry__["a" /* default */].Attribute('normal', 'float', 3, 'NORMAL'),
              color: new __WEBPACK_IMPORTED_MODULE_0_claygl_src_Geometry__["a" /* default */].Attribute('color', 'float', 4, 'COLOR')
          }
      };
  },
  /** @lends module: echarts-gl/util/geometry/QuadsGeometry.prototype */
  {

      /**
       * Reset offset
       */
      resetOffset: function () {
          this._vertexOffset = 0;
          this._faceOffset = 0;
      },

      /**
       * @param {number} nQuad
       */
      setQuadCount: function (nQuad) {
          var attributes = this.attributes;
          var vertexCount = this.getQuadVertexCount() * nQuad;
          var triangleCount = this.getQuadTriangleCount() * nQuad;
          if (this.vertexCount !== vertexCount) {
              attributes.position.init(vertexCount);
              attributes.normal.init(vertexCount);
              attributes.color.init(vertexCount);
          }
          if (this.triangleCount !== triangleCount) {
              this.indices = vertexCount > 0xffff ? new Uint32Array(triangleCount * 3) : new Uint16Array(triangleCount * 3);
          }
      },

      getQuadVertexCount: function () {
          return 4;
      },

      getQuadTriangleCount: function () {
          return 2;
      },

      /**
       * Add a quad, which in following order:
       * 0-----1
       * 3-----2
       */
      addQuad: (function () {
          var a = vec3.create();
          var b = vec3.create();
          var normal = vec3.create();
          var indices = [0, 3, 1, 3, 2, 1];
          return function (coords,  color) {
              var positionAttr = this.attributes.position;
              var normalAttr = this.attributes.normal;
              var colorAttr = this.attributes.color;

              vec3.sub(a, coords[1], coords[0]);
              vec3.sub(b, coords[2], coords[1]);
              vec3.cross(normal, a, b);
              vec3.normalize(normal, normal);

              for (var i = 0; i < 4; i++) {
                  positionAttr.set(this._vertexOffset + i, coords[i]);
                  colorAttr.set(this._vertexOffset + i, color);
                  normalAttr.set(this._vertexOffset + i, normal);
              }
              var idx = this._faceOffset * 3;
              for (var i = 0; i < 6; i++) {
                  this.indices[idx + i] = indices[i] + this._vertexOffset;
              }
              this._vertexOffset += 4;
              this._faceOffset += 2;
          };
      })()
  });

  __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts___default.a.util.defaults(QuadsGeometry.prototype, __WEBPACK_IMPORTED_MODULE_2__dynamicConvertMixin__["a" /* default */]);

  /* harmony default export */ __webpack_exports__["a"] = (QuadsGeometry);

  /***/ }),
  /* 163 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__ = __webpack_require__(1);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_geometry_Lines3D__ = __webpack_require__(25);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_retrieve__ = __webpack_require__(2);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_mesh_LabelsMesh__ = __webpack_require__(62);





  var firstNotNull = __WEBPACK_IMPORTED_MODULE_3__util_retrieve__["a" /* default */].firstNotNull;

  var dimIndicesMap = {
      // Left to right
      x: 0,
      // Far to near
      y: 2,
      // Bottom to up
      z: 1
  };

  function Grid3DAxis(dim, linesMaterial) {
      var linesMesh = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Mesh({
          geometry: new __WEBPACK_IMPORTED_MODULE_2__util_geometry_Lines3D__["a" /* default */]({ useNativeLine: false }),
          material: linesMaterial,
          castShadow: false,
          ignorePicking: true, renderOrder: 2
      });
      var axisLabelsMesh = new __WEBPACK_IMPORTED_MODULE_4__util_mesh_LabelsMesh__["a" /* default */]();
      axisLabelsMesh.material.depthMask = false;

      var rootNode = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Node();
      rootNode.add(linesMesh);
      rootNode.add(axisLabelsMesh);

      this.rootNode = rootNode;
      this.dim = dim;

      this.linesMesh = linesMesh;
      this.labelsMesh = axisLabelsMesh;
      this.axisLineCoords = null;
      this.labelElements = [];
  }

  var otherDim = {
      x: 'y', y: 'x', z: 'y'
  };
  Grid3DAxis.prototype.update = function (
      grid3DModel, axisLabelSurface, api
  ) {
      var cartesian = grid3DModel.coordinateSystem;
      var axis = cartesian.getAxis(this.dim);

      var linesGeo = this.linesMesh.geometry;
      var labelsGeo = this.labelsMesh.geometry;
      linesGeo.convertToDynamicArray(true);
      labelsGeo.convertToDynamicArray(true);
      var axisModel = axis.model;
      var extent = axis.getExtent();

      var dpr = api.getDevicePixelRatio();
      var axisLineModel = axisModel.getModel('axisLine', grid3DModel.getModel('axisLine'));
      var axisTickModel = axisModel.getModel('axisTick', grid3DModel.getModel('axisTick'));
      var axisLabelModel = axisModel.getModel('axisLabel', grid3DModel.getModel('axisLabel'));
      var axisLineColor = axisLineModel.get('lineStyle.color');
      // Render axisLine
      if (axisLineModel.get('show')) {
          var axisLineStyleModel = axisLineModel.getModel('lineStyle');
          var p0 = [0, 0, 0]; var p1 = [0, 0, 0];
          var idx = dimIndicesMap[axis.dim];
          p0[idx] = extent[0];
          p1[idx] = extent[1];

          // Save some useful info.
          this.axisLineCoords =[p0, p1];

          var color = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].parseColor(axisLineColor);
          var lineWidth = firstNotNull(axisLineStyleModel.get('width'), 1.0);
          var opacity = firstNotNull(axisLineStyleModel.get('opacity'), 1.0);
          color[3] *= opacity;
          linesGeo.addLine(p0, p1, color, lineWidth * dpr);
      }
      // Render axis ticksCoords
      if (axisTickModel.get('show')) {
          var lineStyleModel = axisTickModel.getModel('lineStyle');
          var lineColor = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].parseColor(
              firstNotNull(lineStyleModel.get('color'), axisLineColor)
          );
          var lineWidth = firstNotNull(lineStyleModel.get('width'), 1.0);
          lineColor[3] *= firstNotNull(lineStyleModel.get('opacity'), 1.0);
          var ticksCoords = axis.getTicksCoords();
          var tickLength = axisTickModel.get('length');

          for (var i = 0; i < ticksCoords.length; i++) {
              var tickCoord = ticksCoords[i].coord;

              var p0 = [0, 0, 0]; var p1 = [0, 0, 0];
              var idx = dimIndicesMap[axis.dim];
              var otherIdx = dimIndicesMap[otherDim[axis.dim]];
              // 0 : x, 1 : y
              p0[idx] = p1[idx] = tickCoord;
              p1[otherIdx] = tickLength;

              linesGeo.addLine(p0, p1, lineColor, lineWidth * dpr);
          }
      }

      this.labelElements = [];
      var dpr = api.getDevicePixelRatio();
      if (axisLabelModel.get('show')) {
          var ticksCoords = axis.getTicksCoords();
          var categoryData = axisModel.get('data');

          var labelMargin = axisLabelModel.get('margin');
          var labels = axis.getViewLabels();

          for (var i = 0; i < labels.length; i++) {
              var tickValue = labels[i].tickValue;
              var formattedLabel = labels[i].formattedLabel;
              var rawLabel = labels[i].rawLabel;

              var tickCoord = axis.dataToCoord(tickValue);

              var p = [0, 0, 0];
              var idx = dimIndicesMap[axis.dim];
              var otherIdx = dimIndicesMap[otherDim[axis.dim]];
              // 0 : x, 1 : y
              p[idx] = p[idx] = tickCoord;
              p[otherIdx] = labelMargin;

              var itemTextStyleModel = axisLabelModel;
              if (categoryData && categoryData[tickValue] && categoryData[tickValue].textStyle) {
                  itemTextStyleModel = new __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.Model(
                      categoryData[tickValue].textStyle, axisLabelModel, axisModel.ecModel
                  );
              }
              var textColor = firstNotNull(itemTextStyleModel.get('color'), axisLineColor);

              var textEl = new __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.graphic.Text();
              __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.graphic.setTextStyle(textEl.style, itemTextStyleModel, {
                  text: formattedLabel,
                  textFill: typeof textColor === 'function'
                      ? textColor(
                          // (1) In category axis with data zoom, tick is not the original
                          // index of axis.data. So tick should not be exposed to user
                          // in category axis.
                          // (2) Compatible with previous version, which always returns labelStr.
                          // But in interval scale labelStr is like '223,445', which maked
                          // user repalce ','. So we modify it to return original val but remain
                          // it as 'string' to avoid error in replacing.
                          axis.type === 'category' ? rawLabel : axis.type === 'value' ? tickValue + '' : tickValue,
                          i
                      )
                      : textColor,
                  textVerticalAlign: 'top',
                  textAlign: 'left'
              });
              var coords = axisLabelSurface.add(textEl);
              var rect = textEl.getBoundingRect();
              labelsGeo.addSprite(p, [rect.width * dpr, rect.height * dpr], coords);

              this.labelElements.push(textEl);
          }
      }

      if (axisModel.get('name')) {
          var nameTextStyleModel = axisModel.getModel('nameTextStyle');
          var p = [0, 0, 0];
          var idx = dimIndicesMap[axis.dim];
          var otherIdx = dimIndicesMap[otherDim[axis.dim]];
          var labelColor = firstNotNull(nameTextStyleModel.get('color'), axisLineColor);
          var strokeColor = nameTextStyleModel.get('borderColor');
          var lineWidth = nameTextStyleModel.get('borderWidth');
          // TODO start and end
          p[idx] = p[idx] = (extent[0] + extent[1]) / 2;
          p[otherIdx] = axisModel.get('nameGap');

          var textEl = new __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.graphic.Text();
          __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.graphic.setTextStyle(textEl.style, nameTextStyleModel, {
              text: axisModel.get('name'),
              textFill: labelColor,
              textStroke: strokeColor,
              lineWidth: lineWidth
          });
          var coords = axisLabelSurface.add(textEl);
          var rect = textEl.getBoundingRect();
          labelsGeo.addSprite(p, [rect.width * dpr, rect.height * dpr], coords);

          textEl.__idx = this.labelElements.length;
          this.nameLabelElement = textEl;
      }

      this.labelsMesh.material.set('textureAtlas', axisLabelSurface.getTexture());
      this.labelsMesh.material.set('uvScale', axisLabelSurface.getCoordsScale());

      linesGeo.convertToTypedArray();
      labelsGeo.convertToTypedArray();
  };

  Grid3DAxis.prototype.setSpriteAlign = function (textAlign, textVerticalAlign, api) {
      var dpr = api.getDevicePixelRatio();
      var labelGeo = this.labelsMesh.geometry;
      for (var i = 0; i < this.labelElements.length; i++) {
          var labelEl = this.labelElements[i];
          var rect = labelEl.getBoundingRect();

          labelGeo.setSpriteAlign(i, [rect.width * dpr, rect.height * dpr], textAlign, textVerticalAlign);
      }
      // name label
      var nameLabelEl = this.nameLabelElement;
      if (nameLabelEl) {
          var rect = nameLabelEl.getBoundingRect();
          labelGeo.setSpriteAlign(nameLabelEl.__idx, [rect.width * dpr, rect.height * dpr], textAlign, textVerticalAlign);
          labelGeo.dirty();
      }

      this.textAlign = textAlign;
      this.textVerticalAlign = textVerticalAlign;
  };

  /* harmony default export */ __webpack_exports__["a"] = (Grid3DAxis);

  /***/ }),
  /* 164 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_claygl_src_Geometry__ = __webpack_require__(14);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__dynamicConvertMixin__ = __webpack_require__(39);
  /**
   * Geometry collecting sprites
   *
   * @module echarts-gl/util/geometry/Sprites
   * @author Yi Shen(https://github.com/pissang)
   */




  var squareTriangles = [
      0, 1, 2, 0, 2, 3
  ];

  var SpritesGeometry = __WEBPACK_IMPORTED_MODULE_1_claygl_src_Geometry__["a" /* default */].extend(function () {
      return {
          attributes: {
              position: new __WEBPACK_IMPORTED_MODULE_1_claygl_src_Geometry__["a" /* default */].Attribute('position', 'float', 3, 'POSITION'),
              texcoord: new __WEBPACK_IMPORTED_MODULE_1_claygl_src_Geometry__["a" /* default */].Attribute('texcoord', 'float', 2, 'TEXCOORD_0'),
              offset: new __WEBPACK_IMPORTED_MODULE_1_claygl_src_Geometry__["a" /* default */].Attribute('offset', 'float', 2),
              color: new __WEBPACK_IMPORTED_MODULE_1_claygl_src_Geometry__["a" /* default */].Attribute('color', 'float', 4, 'COLOR')
          }
      };
  }, {
      resetOffset: function () {
          this._vertexOffset = 0;
          this._faceOffset = 0;
      },
      setSpriteCount: function (spriteCount) {
          this._spriteCount = spriteCount;

          var vertexCount = spriteCount * 4;
          var triangleCount = spriteCount * 2;

          if (this.vertexCount !== vertexCount) {
              this.attributes.position.init(vertexCount);
              this.attributes.offset.init(vertexCount);
              this.attributes.color.init(vertexCount);
          }
          if (this.triangleCount !== triangleCount) {
              this.indices = vertexCount > 0xffff ? new Uint32Array(triangleCount * 3) : new Uint16Array(triangleCount * 3);
          }
      },

      setSpriteAlign: function (spriteOffset, size, align, verticalAlign, margin) {
          if (align == null) {
              align = 'left';
          }
          if (verticalAlign == null) {
              verticalAlign = 'top';
          }

          var leftOffset, topOffset, rightOffset, bottomOffset;
          margin = margin || 0;
          switch (align) {
              case 'left':
                  leftOffset = margin;
                  rightOffset = size[0] + margin;
                  break;
              case 'center':
              case 'middle':
                  leftOffset = -size[0] / 2;
                  rightOffset = size[0] / 2;
                  break;
              case 'right':
                  leftOffset = -size[0] - margin;
                  rightOffset = -margin;
                  break;
          }
          switch (verticalAlign) {
              case 'bottom':
                  topOffset = margin;
                  bottomOffset = size[1] + margin;
                  break;
              case 'middle':
                  topOffset = -size[1] / 2;
                  bottomOffset = size[1] / 2;
                  break;
              case 'top':
                  topOffset = -size[1] - margin;
                  bottomOffset = -margin;
                  break;
          }
          // 3----2
          // 0----1
          var vertexOffset = spriteOffset * 4;
          var offsetAttr = this.attributes.offset;
          offsetAttr.set(vertexOffset, [leftOffset, bottomOffset]);
          offsetAttr.set(vertexOffset + 1, [rightOffset, bottomOffset]);
          offsetAttr.set(vertexOffset + 2, [rightOffset, topOffset]);
          offsetAttr.set(vertexOffset + 3, [leftOffset, topOffset]);
      },
      /**
       * Add sprite
       * @param {Array.<number>} position
       * @param {Array.<number>} size [width, height]
       * @param {Array.<Array>} coords [leftBottom, rightTop]
       * @param {string} [align='left'] 'left' 'center' 'right'
       * @param {string} [verticalAlign='top'] 'top' 'middle' 'bottom'
       * @param {number} [screenMargin=0]
       */
      addSprite: function (position, size, coords, align, verticalAlign, screenMargin) {
          var vertexOffset = this._vertexOffset;
          this.setSprite(
              this._vertexOffset / 4, position, size, coords, align, verticalAlign, screenMargin
          );
          for (var i = 0; i < squareTriangles.length; i++) {
              this.indices[this._faceOffset * 3 + i] = squareTriangles[i] + vertexOffset;
          }
          this._faceOffset += 2;
          this._vertexOffset += 4;

          return vertexOffset / 4;
      },

      setSprite: function (spriteOffset, position, size, coords, align, verticalAlign, screenMargin) {
          var vertexOffset = spriteOffset * 4;

          var attributes = this.attributes;
          for (var i = 0; i < 4; i++) {
              attributes.position.set(vertexOffset + i, position);
          }
          // 3----2
          // 0----1
          var texcoordAttr = attributes.texcoord;

          texcoordAttr.set(vertexOffset, [coords[0][0], coords[0][1]]);
          texcoordAttr.set(vertexOffset + 1, [coords[1][0], coords[0][1]]);
          texcoordAttr.set(vertexOffset + 2, [coords[1][0], coords[1][1]]);
          texcoordAttr.set(vertexOffset + 3, [coords[0][0], coords[1][1]]);

          this.setSpriteAlign(spriteOffset, size, align, verticalAlign, screenMargin);
      }
  });

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.defaults(SpritesGeometry.prototype, __WEBPACK_IMPORTED_MODULE_2__dynamicConvertMixin__["a" /* default */]);

  /* harmony default export */ __webpack_exports__["a"] = (SpritesGeometry);

  /***/ }),
  /* 165 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("@export ecgl.labels.vertex\n\nattribute vec3 position: POSITION;\nattribute vec2 texcoord: TEXCOORD_0;\nattribute vec2 offset;\n#ifdef VERTEX_COLOR\nattribute vec4 a_Color : COLOR;\nvarying vec4 v_Color;\n#endif\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nuniform vec4 viewport : VIEWPORT;\n\nvarying vec2 v_Texcoord;\n\nvoid main()\n{\n vec4 proj = worldViewProjection * vec4(position, 1.0);\n\n vec2 screen = (proj.xy / abs(proj.w) + 1.0) * 0.5 * viewport.zw;\n\n screen += offset;\n\n proj.xy = (screen / viewport.zw - 0.5) * 2.0 * abs(proj.w);\n gl_Position = proj;\n#ifdef VERTEX_COLOR\n v_Color = a_Color;\n#endif\n v_Texcoord = texcoord;\n}\n@end\n\n\n@export ecgl.labels.fragment\n\nuniform vec3 color : [1.0, 1.0, 1.0];\nuniform float alpha : 1.0;\nuniform sampler2D textureAtlas;\nuniform vec2 uvScale: [1.0, 1.0];\n\n#ifdef VERTEX_COLOR\nvarying vec4 v_Color;\n#endif\nvarying float v_Miter;\n\nvarying vec2 v_Texcoord;\n\nvoid main()\n{\n gl_FragColor = vec4(color, alpha) * texture2D(textureAtlas, v_Texcoord * uvScale);\n#ifdef VERTEX_COLOR\n gl_FragColor *= v_Color;\n#endif\n}\n\n@end");


  /***/ }),
  /* 166 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__grid3D_Cartesian3D__ = __webpack_require__(167);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__grid3D_Axis3D__ = __webpack_require__(169);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_echarts_lib_util_layout__ = __webpack_require__(47);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_echarts_lib_util_layout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_echarts_lib_util_layout__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_ViewGL__ = __webpack_require__(22);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_retrieve__ = __webpack_require__(2);







  function resizeCartesian3D(grid3DModel, api) {
      // Use left/top/width/height
      var boxLayoutOption = grid3DModel.getBoxLayoutParams();

      var viewport = __WEBPACK_IMPORTED_MODULE_3_echarts_lib_util_layout___default.a.getLayoutRect(boxLayoutOption, {
          width: api.getWidth(),
          height: api.getHeight()
      });

      // Flip Y
      viewport.y = api.getHeight() - viewport.y - viewport.height;

      this.viewGL.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, api.getDevicePixelRatio());

      var boxWidth = grid3DModel.get('boxWidth');
      var boxHeight = grid3DModel.get('boxHeight');
      var boxDepth = grid3DModel.get('boxDepth');

      {
          ['x', 'y', 'z'].forEach(function (dim) {
              if (!this.getAxis(dim)) {
                  throw new Error('Grid' + grid3DModel.id + ' don\'t have ' + dim + 'Axis');
              }
          }, this);
      }
      this.getAxis('x').setExtent(-boxWidth / 2, boxWidth / 2);
      // From near to far
      this.getAxis('y').setExtent(boxDepth / 2, -boxDepth / 2);
      this.getAxis('z').setExtent(-boxHeight / 2, boxHeight / 2);

      this.size = [boxWidth, boxHeight, boxDepth];
  }

  function updateCartesian3D(ecModel, api) {
      var dataExtents = {};
      function unionDataExtents(dim, extent) {
          dataExtents[dim] = dataExtents[dim] || [Infinity, -Infinity];
          dataExtents[dim][0] = Math.min(extent[0], dataExtents[dim][0]);
          dataExtents[dim][1] = Math.max(extent[1], dataExtents[dim][1]);
      }
      // Get data extents for scale.
      ecModel.eachSeries(function (seriesModel) {
          if (seriesModel.coordinateSystem !== this) {
              return;
          }
          var data = seriesModel.getData();
          ['x', 'y', 'z'].forEach(function (coordDim) {
              data.mapDimension(coordDim, true).forEach(function (dataDim) {
                  unionDataExtents(
                      coordDim, data.getDataExtent(dataDim, true)
                  );
              });
          });
      }, this);

      ['xAxis3D', 'yAxis3D', 'zAxis3D'].forEach(function (axisType) {
          ecModel.eachComponent(axisType, function (axisModel) {
              var dim = axisType.charAt(0);
              var grid3DModel = axisModel.getReferringComponents('grid3D')[0];

              var cartesian3D = grid3DModel.coordinateSystem;
              if (cartesian3D !== this) {
                  return;
              }

              var axis = cartesian3D.getAxis(dim);
              if (axis) {
                  {
                      console.warn('Can\'t have two %s in one grid3D', axisType);
                  }
                  return;
              }
              var scale = __WEBPACK_IMPORTED_MODULE_2_echarts_lib_echarts___default.a.helper.createScale(
                  dataExtents[dim] || [Infinity, -Infinity], axisModel
              );
              axis = new __WEBPACK_IMPORTED_MODULE_1__grid3D_Axis3D__["a" /* default */](dim, scale);
              axis.type = axisModel.get('type');
              var isCategory = axis.type === 'category';
              axis.onBand = isCategory && axisModel.get('boundaryGap');
              axis.inverse = axisModel.get('inverse');

              axisModel.axis = axis;
              axis.model = axisModel;

              // override `echarts/coord/Axis#getLabelModel`
              axis.getLabelModel = function () {
                  return axisModel.getModel('axisLabel', grid3DModel.getModel('axisLabel'));
              };
              // override `echarts/coord/Axis#getTickModel`
              axis.getTickModel = function () {
                  return axisModel.getModel('axisTick', grid3DModel.getModel('axisTick'));
              };

              cartesian3D.addAxis(axis);
          }, this);
      }, this);

      this.resize(this.model, api);
  }

  var grid3DCreator = {

      dimensions: __WEBPACK_IMPORTED_MODULE_0__grid3D_Cartesian3D__["a" /* default */].prototype.dimensions,

      create: function (ecModel, api) {

          var cartesian3DList = [];

          ecModel.eachComponent('grid3D', function (grid3DModel) {
              // FIXME
              grid3DModel.__viewGL = grid3DModel.__viewGL || new __WEBPACK_IMPORTED_MODULE_4__core_ViewGL__["a" /* default */]();

              var cartesian3D = new __WEBPACK_IMPORTED_MODULE_0__grid3D_Cartesian3D__["a" /* default */]();
              cartesian3D.model = grid3DModel;
              cartesian3D.viewGL = grid3DModel.__viewGL;

              grid3DModel.coordinateSystem = cartesian3D;
              cartesian3DList.push(cartesian3D);

              // Inject resize and update
              cartesian3D.resize = resizeCartesian3D;

              cartesian3D.update = updateCartesian3D;
          });

          var axesTypes = ['xAxis3D', 'yAxis3D', 'zAxis3D'];
          function findAxesModels(seriesModel, ecModel) {
              return axesTypes.map(function (axisType) {
                  var axisModel = seriesModel.getReferringComponents(axisType)[0];
                  if (axisModel == null) {
                      axisModel = ecModel.getComponent(axisType);
                  }
                  {
                      if (!axisModel) {
                          throw new Error(axisType + ' "' + __WEBPACK_IMPORTED_MODULE_5__util_retrieve__["a" /* default */].firstNotNull(
                              seriesModel.get(axisType + 'Index'),
                              seriesModel.get(axisType + 'Id'),
                              0
                          ) + '" not found');
                      }
                  }
                  return axisModel;
              });
          }

          ecModel.eachSeries(function (seriesModel) {
              if (seriesModel.get('coordinateSystem') !== 'cartesian3D') {
                  return;
              }
              var firstGridModel = seriesModel.getReferringComponents('grid3D')[0];

              if (firstGridModel == null) {
                  var axesModels = findAxesModels(seriesModel, ecModel);
                  var firstGridModel = axesModels[0].getCoordSysModel();
                  axesModels.forEach(function (axisModel) {
                      var grid3DModel = axisModel.getCoordSysModel();
                      {
                          if (!grid3DModel) {
                              throw new Error(
                                  'grid3D "' + __WEBPACK_IMPORTED_MODULE_5__util_retrieve__["a" /* default */].firstNotNull(
                                      axisModel.get('gridIndex'),
                                      axisModel.get('gridId'),
                                      0
                                  ) + '" not found'
                              );
                          }
                          if (grid3DModel !== firstGridModel) {
                              throw new Error('xAxis3D, yAxis3D, zAxis3D must use the same grid');
                          }
                      }
                  });
              }

              var coordSys = firstGridModel.coordinateSystem;
              seriesModel.coordinateSystem = coordSys;
          });

          return cartesian3DList;
      }
  };

  __WEBPACK_IMPORTED_MODULE_2_echarts_lib_echarts___default.a.registerCoordinateSystem('grid3D', grid3DCreator);

  /***/ }),
  /* 167 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echarts_lib_coord_cartesian_Cartesian__ = __webpack_require__(168);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echarts_lib_coord_cartesian_Cartesian___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_echarts_lib_coord_cartesian_Cartesian__);



  function Cartesian3D(name) {

      __WEBPACK_IMPORTED_MODULE_1_echarts_lib_coord_cartesian_Cartesian___default.a.call(this, name);

      this.size = [0, 0, 0];
  }

  Cartesian3D.prototype = {

      constructor: Cartesian3D,

      type: 'cartesian3D',

      dimensions: ['x', 'y', 'z'],

      model: null,

      containPoint: function (point) {
          return this.getAxis('x').contain(point[0])
              && this.getAxis('y').contain(point[2])
              && this.getAxis('z').contain(point[1]);
      },

      containData: function (data) {
          return this.getAxis('x').containData(data[0])
              && this.getAxis('y').containData(data[1])
              && this.getAxis('z').containData(data[2]);
      },

      dataToPoint: function (data, out, clamp) {
          out = out || [];
          out[0] = this.getAxis('x').dataToCoord(data[0], clamp);
          out[2] = this.getAxis('y').dataToCoord(data[1], clamp);
          out[1] = this.getAxis('z').dataToCoord(data[2], clamp);
          return out;
      },

      pointToData: function (point, out, clamp) {
          out = out || [];
          out[0] = this.getAxis('x').coordToData(point[0], clamp);
          out[1] = this.getAxis('y').coordToData(point[2], clamp);
          out[2] = this.getAxis('z').coordToData(point[1], clamp);
          return out;
      }
  };

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.inherits(Cartesian3D, __WEBPACK_IMPORTED_MODULE_1_echarts_lib_coord_cartesian_Cartesian___default.a);

  /* harmony default export */ __webpack_exports__["a"] = (Cartesian3D);

  /***/ }),
  /* 168 */
  /***/ (function(module, exports, __webpack_require__) {


  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  var zrUtil = __webpack_require__(16);

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * Cartesian coordinate system
   * @module  echarts/coord/Cartesian
   *
   */
  function dimAxisMapper(dim) {
    return this._axes[dim];
  }
  /**
   * @alias module:echarts/coord/Cartesian
   * @constructor
   */


  var Cartesian = function (name) {
    this._axes = {};
    this._dimList = [];
    /**
     * @type {string}
     */

    this.name = name || '';
  };

  Cartesian.prototype = {
    constructor: Cartesian,
    type: 'cartesian',

    /**
     * Get axis
     * @param  {number|string} dim
     * @return {module:echarts/coord/Cartesian~Axis}
     */
    getAxis: function (dim) {
      return this._axes[dim];
    },

    /**
     * Get axes list
     * @return {Array.<module:echarts/coord/Cartesian~Axis>}
     */
    getAxes: function () {
      return zrUtil.map(this._dimList, dimAxisMapper, this);
    },

    /**
     * Get axes list by given scale type
     */
    getAxesByScale: function (scaleType) {
      scaleType = scaleType.toLowerCase();
      return zrUtil.filter(this.getAxes(), function (axis) {
        return axis.scale.type === scaleType;
      });
    },

    /**
     * Add axis
     * @param {module:echarts/coord/Cartesian.Axis}
     */
    addAxis: function (axis) {
      var dim = axis.dim;
      this._axes[dim] = axis;

      this._dimList.push(dim);
    },

    /**
     * Convert data to coord in nd space
     * @param {Array.<number>|Object.<string, number>} val
     * @return {Array.<number>|Object.<string, number>}
     */
    dataToCoord: function (val) {
      return this._dataCoordConvert(val, 'dataToCoord');
    },

    /**
     * Convert coord in nd space to data
     * @param  {Array.<number>|Object.<string, number>} val
     * @return {Array.<number>|Object.<string, number>}
     */
    coordToData: function (val) {
      return this._dataCoordConvert(val, 'coordToData');
    },
    _dataCoordConvert: function (input, method) {
      var dimList = this._dimList;
      var output = input instanceof Array ? [] : {};

      for (var i = 0; i < dimList.length; i++) {
        var dim = dimList[i];
        var axis = this._axes[dim];
        output[dim] = axis[method](input[dim]);
      }

      return output;
    }
  };
  var _default = Cartesian;
  module.exports = _default;

  /***/ }),
  /* 169 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);


  function Axis3D(dim, scale, extent) {

      __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.Axis.call(this, dim, scale, extent);
  }

  Axis3D.prototype = {
      constructor: Axis3D,

      getExtentMin: function () {
          var extent = this._extent;
          return Math.min(extent[0], extent[1]);
      },

      getExtentMax: function () {
          var extent = this._extent;
          return Math.max(extent[0], extent[1]);
      },

      calculateCategoryInterval: function () {
          // TODO consider label length
          return Math.floor(this.scale.count() / 8);
      }
  };

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.inherits(Axis3D, __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.Axis);

  /* harmony default export */ __webpack_exports__["a"] = (Axis3D);

  /***/ }),
  /* 170 */
  /***/ (function(module, exports) {

  /* global Float32Array */
  var ArrayCtor = typeof Float32Array === 'undefined' ? Array : Float32Array;
  /**
   * 创建一个向量
   * @param {number} [x=0]
   * @param {number} [y=0]
   * @return {Vector2}
   */

  function create(x, y) {
    var out = new ArrayCtor(2);

    if (x == null) {
      x = 0;
    }

    if (y == null) {
      y = 0;
    }

    out[0] = x;
    out[1] = y;
    return out;
  }
  /**
   * 复制向量数据
   * @param {Vector2} out
   * @param {Vector2} v
   * @return {Vector2}
   */


  function copy(out, v) {
    out[0] = v[0];
    out[1] = v[1];
    return out;
  }
  /**
   * 克隆一个向量
   * @param {Vector2} v
   * @return {Vector2}
   */


  function clone(v) {
    var out = new ArrayCtor(2);
    out[0] = v[0];
    out[1] = v[1];
    return out;
  }
  /**
   * 设置向量的两个项
   * @param {Vector2} out
   * @param {number} a
   * @param {number} b
   * @return {Vector2} 结果
   */


  function set(out, a, b) {
    out[0] = a;
    out[1] = b;
    return out;
  }
  /**
   * 向量相加
   * @param {Vector2} out
   * @param {Vector2} v1
   * @param {Vector2} v2
   */


  function add(out, v1, v2) {
    out[0] = v1[0] + v2[0];
    out[1] = v1[1] + v2[1];
    return out;
  }
  /**
   * 向量缩放后相加
   * @param {Vector2} out
   * @param {Vector2} v1
   * @param {Vector2} v2
   * @param {number} a
   */


  function scaleAndAdd(out, v1, v2, a) {
    out[0] = v1[0] + v2[0] * a;
    out[1] = v1[1] + v2[1] * a;
    return out;
  }
  /**
   * 向量相减
   * @param {Vector2} out
   * @param {Vector2} v1
   * @param {Vector2} v2
   */


  function sub(out, v1, v2) {
    out[0] = v1[0] - v2[0];
    out[1] = v1[1] - v2[1];
    return out;
  }
  /**
   * 向量长度
   * @param {Vector2} v
   * @return {number}
   */


  function len(v) {
    return Math.sqrt(lenSquare(v));
  }

  var length = len; // jshint ignore:line

  /**
   * 向量长度平方
   * @param {Vector2} v
   * @return {number}
   */

  function lenSquare(v) {
    return v[0] * v[0] + v[1] * v[1];
  }

  var lengthSquare = lenSquare;
  /**
   * 向量乘法
   * @param {Vector2} out
   * @param {Vector2} v1
   * @param {Vector2} v2
   */

  function mul(out, v1, v2) {
    out[0] = v1[0] * v2[0];
    out[1] = v1[1] * v2[1];
    return out;
  }
  /**
   * 向量除法
   * @param {Vector2} out
   * @param {Vector2} v1
   * @param {Vector2} v2
   */


  function div(out, v1, v2) {
    out[0] = v1[0] / v2[0];
    out[1] = v1[1] / v2[1];
    return out;
  }
  /**
   * 向量点乘
   * @param {Vector2} v1
   * @param {Vector2} v2
   * @return {number}
   */


  function dot(v1, v2) {
    return v1[0] * v2[0] + v1[1] * v2[1];
  }
  /**
   * 向量缩放
   * @param {Vector2} out
   * @param {Vector2} v
   * @param {number} s
   */


  function scale(out, v, s) {
    out[0] = v[0] * s;
    out[1] = v[1] * s;
    return out;
  }
  /**
   * 向量归一化
   * @param {Vector2} out
   * @param {Vector2} v
   */


  function normalize(out, v) {
    var d = len(v);

    if (d === 0) {
      out[0] = 0;
      out[1] = 0;
    } else {
      out[0] = v[0] / d;
      out[1] = v[1] / d;
    }

    return out;
  }
  /**
   * 计算向量间距离
   * @param {Vector2} v1
   * @param {Vector2} v2
   * @return {number}
   */


  function distance(v1, v2) {
    return Math.sqrt((v1[0] - v2[0]) * (v1[0] - v2[0]) + (v1[1] - v2[1]) * (v1[1] - v2[1]));
  }

  var dist = distance;
  /**
   * 向量距离平方
   * @param {Vector2} v1
   * @param {Vector2} v2
   * @return {number}
   */

  function distanceSquare(v1, v2) {
    return (v1[0] - v2[0]) * (v1[0] - v2[0]) + (v1[1] - v2[1]) * (v1[1] - v2[1]);
  }

  var distSquare = distanceSquare;
  /**
   * 求负向量
   * @param {Vector2} out
   * @param {Vector2} v
   */

  function negate(out, v) {
    out[0] = -v[0];
    out[1] = -v[1];
    return out;
  }
  /**
   * 插值两个点
   * @param {Vector2} out
   * @param {Vector2} v1
   * @param {Vector2} v2
   * @param {number} t
   */


  function lerp(out, v1, v2, t) {
    out[0] = v1[0] + t * (v2[0] - v1[0]);
    out[1] = v1[1] + t * (v2[1] - v1[1]);
    return out;
  }
  /**
   * 矩阵左乘向量
   * @param {Vector2} out
   * @param {Vector2} v
   * @param {Vector2} m
   */


  function applyTransform(out, v, m) {
    var x = v[0];
    var y = v[1];
    out[0] = m[0] * x + m[2] * y + m[4];
    out[1] = m[1] * x + m[3] * y + m[5];
    return out;
  }
  /**
   * 求两个向量最小值
   * @param  {Vector2} out
   * @param  {Vector2} v1
   * @param  {Vector2} v2
   */


  function min(out, v1, v2) {
    out[0] = Math.min(v1[0], v2[0]);
    out[1] = Math.min(v1[1], v2[1]);
    return out;
  }
  /**
   * 求两个向量最大值
   * @param  {Vector2} out
   * @param  {Vector2} v1
   * @param  {Vector2} v2
   */


  function max(out, v1, v2) {
    out[0] = Math.max(v1[0], v2[0]);
    out[1] = Math.max(v1[1], v2[1]);
    return out;
  }

  exports.create = create;
  exports.copy = copy;
  exports.clone = clone;
  exports.set = set;
  exports.add = add;
  exports.scaleAndAdd = scaleAndAdd;
  exports.sub = sub;
  exports.len = len;
  exports.length = length;
  exports.lenSquare = lenSquare;
  exports.lengthSquare = lengthSquare;
  exports.mul = mul;
  exports.div = div;
  exports.dot = dot;
  exports.scale = scale;
  exports.normalize = normalize;
  exports.distance = distance;
  exports.dist = dist;
  exports.distanceSquare = distanceSquare;
  exports.distSquare = distSquare;
  exports.negate = negate;
  exports.lerp = lerp;
  exports.applyTransform = applyTransform;
  exports.min = min;
  exports.max = max;

  /***/ }),
  /* 171 */
  /***/ (function(module, exports) {

  /**
   * 3x2矩阵操作类
   * @exports zrender/tool/matrix
   */

  /* global Float32Array */
  var ArrayCtor = typeof Float32Array === 'undefined' ? Array : Float32Array;
  /**
   * Create a identity matrix.
   * @return {Float32Array|Array.<number>}
   */

  function create() {
    var out = new ArrayCtor(6);
    identity(out);
    return out;
  }
  /**
   * 设置矩阵为单位矩阵
   * @param {Float32Array|Array.<number>} out
   */


  function identity(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    return out;
  }
  /**
   * 复制矩阵
   * @param {Float32Array|Array.<number>} out
   * @param {Float32Array|Array.<number>} m
   */


  function copy(out, m) {
    out[0] = m[0];
    out[1] = m[1];
    out[2] = m[2];
    out[3] = m[3];
    out[4] = m[4];
    out[5] = m[5];
    return out;
  }
  /**
   * 矩阵相乘
   * @param {Float32Array|Array.<number>} out
   * @param {Float32Array|Array.<number>} m1
   * @param {Float32Array|Array.<number>} m2
   */


  function mul(out, m1, m2) {
    // Consider matrix.mul(m, m2, m);
    // where out is the same as m2.
    // So use temp variable to escape error.
    var out0 = m1[0] * m2[0] + m1[2] * m2[1];
    var out1 = m1[1] * m2[0] + m1[3] * m2[1];
    var out2 = m1[0] * m2[2] + m1[2] * m2[3];
    var out3 = m1[1] * m2[2] + m1[3] * m2[3];
    var out4 = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];
    var out5 = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];
    out[0] = out0;
    out[1] = out1;
    out[2] = out2;
    out[3] = out3;
    out[4] = out4;
    out[5] = out5;
    return out;
  }
  /**
   * 平移变换
   * @param {Float32Array|Array.<number>} out
   * @param {Float32Array|Array.<number>} a
   * @param {Float32Array|Array.<number>} v
   */


  function translate(out, a, v) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4] + v[0];
    out[5] = a[5] + v[1];
    return out;
  }
  /**
   * 旋转变换
   * @param {Float32Array|Array.<number>} out
   * @param {Float32Array|Array.<number>} a
   * @param {number} rad
   */


  function rotate(out, a, rad) {
    var aa = a[0];
    var ac = a[2];
    var atx = a[4];
    var ab = a[1];
    var ad = a[3];
    var aty = a[5];
    var st = Math.sin(rad);
    var ct = Math.cos(rad);
    out[0] = aa * ct + ab * st;
    out[1] = -aa * st + ab * ct;
    out[2] = ac * ct + ad * st;
    out[3] = -ac * st + ct * ad;
    out[4] = ct * atx + st * aty;
    out[5] = ct * aty - st * atx;
    return out;
  }
  /**
   * 缩放变换
   * @param {Float32Array|Array.<number>} out
   * @param {Float32Array|Array.<number>} a
   * @param {Float32Array|Array.<number>} v
   */


  function scale(out, a, v) {
    var vx = v[0];
    var vy = v[1];
    out[0] = a[0] * vx;
    out[1] = a[1] * vy;
    out[2] = a[2] * vx;
    out[3] = a[3] * vy;
    out[4] = a[4] * vx;
    out[5] = a[5] * vy;
    return out;
  }
  /**
   * 求逆矩阵
   * @param {Float32Array|Array.<number>} out
   * @param {Float32Array|Array.<number>} a
   */


  function invert(out, a) {
    var aa = a[0];
    var ac = a[2];
    var atx = a[4];
    var ab = a[1];
    var ad = a[3];
    var aty = a[5];
    var det = aa * ad - ab * ac;

    if (!det) {
      return null;
    }

    det = 1.0 / det;
    out[0] = ad * det;
    out[1] = -ab * det;
    out[2] = -ac * det;
    out[3] = aa * det;
    out[4] = (ac * aty - ad * atx) * det;
    out[5] = (ab * atx - aa * aty) * det;
    return out;
  }
  /**
   * Clone a new matrix.
   * @param {Float32Array|Array.<number>} a
   */


  function clone(a) {
    var b = create();
    copy(b, a);
    return b;
  }

  exports.create = create;
  exports.identity = identity;
  exports.copy = copy;
  exports.mul = mul;
  exports.translate = translate;
  exports.rotate = rotate;
  exports.scale = scale;
  exports.invert = invert;
  exports.clone = clone;

  /***/ }),
  /* 172 */
  /***/ (function(module, exports, __webpack_require__) {


  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  var zrUtil = __webpack_require__(16);

  var textContain = __webpack_require__(173);

  var numberUtil = __webpack_require__(84);

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  // import Text from 'zrender/src/graphic/Text';

  /**
   * 每三位默认加,格式化
   * @param {string|number} x
   * @return {string}
   */
  function addCommas(x) {
    if (isNaN(x)) {
      return '-';
    }

    x = (x + '').split('.');
    return x[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g, '$1,') + (x.length > 1 ? '.' + x[1] : '');
  }
  /**
   * @param {string} str
   * @param {boolean} [upperCaseFirst=false]
   * @return {string} str
   */


  function toCamelCase(str, upperCaseFirst) {
    str = (str || '').toLowerCase().replace(/-(.)/g, function (match, group1) {
      return group1.toUpperCase();
    });

    if (upperCaseFirst && str) {
      str = str.charAt(0).toUpperCase() + str.slice(1);
    }

    return str;
  }

  var normalizeCssArray = zrUtil.normalizeCssArray;
  var replaceReg = /([&<>"'])/g;
  var replaceMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    '\'': '&#39;'
  };

  function encodeHTML(source) {
    return source == null ? '' : (source + '').replace(replaceReg, function (str, c) {
      return replaceMap[c];
    });
  }

  var TPL_VAR_ALIAS = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];

  var wrapVar = function (varName, seriesIdx) {
    return '{' + varName + (seriesIdx == null ? '' : seriesIdx) + '}';
  };
  /**
   * Template formatter
   * @param {string} tpl
   * @param {Array.<Object>|Object} paramsList
   * @param {boolean} [encode=false]
   * @return {string}
   */


  function formatTpl(tpl, paramsList, encode) {
    if (!zrUtil.isArray(paramsList)) {
      paramsList = [paramsList];
    }

    var seriesLen = paramsList.length;

    if (!seriesLen) {
      return '';
    }

    var $vars = paramsList[0].$vars || [];

    for (var i = 0; i < $vars.length; i++) {
      var alias = TPL_VAR_ALIAS[i];
      tpl = tpl.replace(wrapVar(alias), wrapVar(alias, 0));
    }

    for (var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {
      for (var k = 0; k < $vars.length; k++) {
        var val = paramsList[seriesIdx][$vars[k]];
        tpl = tpl.replace(wrapVar(TPL_VAR_ALIAS[k], seriesIdx), encode ? encodeHTML(val) : val);
      }
    }

    return tpl;
  }
  /**
   * simple Template formatter
   *
   * @param {string} tpl
   * @param {Object} param
   * @param {boolean} [encode=false]
   * @return {string}
   */


  function formatTplSimple(tpl, param, encode) {
    zrUtil.each(param, function (value, key) {
      tpl = tpl.replace('{' + key + '}', encode ? encodeHTML(value) : value);
    });
    return tpl;
  }
  /**
   * @param {Object|string} [opt] If string, means color.
   * @param {string} [opt.color]
   * @param {string} [opt.extraCssText]
   * @param {string} [opt.type='item'] 'item' or 'subItem'
   * @param {string} [opt.renderMode='html'] render mode of tooltip, 'html' or 'richText'
   * @param {string} [opt.markerId='X'] id name for marker. If only one marker is in a rich text, this can be omitted.
   * @return {string}
   */


  function getTooltipMarker(opt, extraCssText) {
    opt = zrUtil.isString(opt) ? {
      color: opt,
      extraCssText: extraCssText
    } : opt || {};
    var color = opt.color;
    var type = opt.type;
    var extraCssText = opt.extraCssText;
    var renderMode = opt.renderMode || 'html';
    var markerId = opt.markerId || 'X';

    if (!color) {
      return '';
    }

    if (renderMode === 'html') {
      return type === 'subItem' ? '<span style="display:inline-block;vertical-align:middle;margin-right:8px;margin-left:3px;' + 'border-radius:4px;width:4px;height:4px;background-color:' + encodeHTML(color) + ';' + (extraCssText || '') + '"></span>' : '<span style="display:inline-block;margin-right:5px;' + 'border-radius:10px;width:10px;height:10px;background-color:' + encodeHTML(color) + ';' + (extraCssText || '') + '"></span>';
    } else {
      // Space for rich element marker
      return {
        renderMode: renderMode,
        content: '{marker' + markerId + '|}  ',
        style: {
          color: color
        }
      };
    }
  }

  function pad(str, len) {
    str += '';
    return '0000'.substr(0, len - str.length) + str;
  }
  /**
   * ISO Date format
   * @param {string} tpl
   * @param {number} value
   * @param {boolean} [isUTC=false] Default in local time.
   *           see `module:echarts/scale/Time`
   *           and `module:echarts/util/number#parseDate`.
   * @inner
   */


  function formatTime(tpl, value, isUTC) {
    if (tpl === 'week' || tpl === 'month' || tpl === 'quarter' || tpl === 'half-year' || tpl === 'year') {
      tpl = 'MM-dd\nyyyy';
    }

    var date = numberUtil.parseDate(value);
    var utc = isUTC ? 'UTC' : '';
    var y = date['get' + utc + 'FullYear']();
    var M = date['get' + utc + 'Month']() + 1;
    var d = date['get' + utc + 'Date']();
    var h = date['get' + utc + 'Hours']();
    var m = date['get' + utc + 'Minutes']();
    var s = date['get' + utc + 'Seconds']();
    var S = date['get' + utc + 'Milliseconds']();
    tpl = tpl.replace('MM', pad(M, 2)).replace('M', M).replace('yyyy', y).replace('yy', y % 100).replace('dd', pad(d, 2)).replace('d', d).replace('hh', pad(h, 2)).replace('h', h).replace('mm', pad(m, 2)).replace('m', m).replace('ss', pad(s, 2)).replace('s', s).replace('SSS', pad(S, 3));
    return tpl;
  }
  /**
   * Capital first
   * @param {string} str
   * @return {string}
   */


  function capitalFirst(str) {
    return str ? str.charAt(0).toUpperCase() + str.substr(1) : str;
  }

  var truncateText = textContain.truncateText;
  /**
   * @public
   * @param {Object} opt
   * @param {string} opt.text
   * @param {string} opt.font
   * @param {string} [opt.textAlign='left']
   * @param {string} [opt.textVerticalAlign='top']
   * @param {Array.<number>} [opt.textPadding]
   * @param {number} [opt.textLineHeight]
   * @param {Object} [opt.rich]
   * @param {Object} [opt.truncate]
   * @return {Object} {x, y, width, height, lineHeight}
   */

  function getTextBoundingRect(opt) {
    return textContain.getBoundingRect(opt.text, opt.font, opt.textAlign, opt.textVerticalAlign, opt.textPadding, opt.textLineHeight, opt.rich, opt.truncate);
  }
  /**
   * @deprecated
   * the `textLineHeight` was added later.
   * For backward compatiblility, put it as the last parameter.
   * But deprecated this interface. Please use `getTextBoundingRect` instead.
   */


  function getTextRect(text, font, textAlign, textVerticalAlign, textPadding, rich, truncate, textLineHeight) {
    return textContain.getBoundingRect(text, font, textAlign, textVerticalAlign, textPadding, textLineHeight, rich, truncate);
  }

  exports.addCommas = addCommas;
  exports.toCamelCase = toCamelCase;
  exports.normalizeCssArray = normalizeCssArray;
  exports.encodeHTML = encodeHTML;
  exports.formatTpl = formatTpl;
  exports.formatTplSimple = formatTplSimple;
  exports.getTooltipMarker = getTooltipMarker;
  exports.formatTime = formatTime;
  exports.capitalFirst = capitalFirst;
  exports.truncateText = truncateText;
  exports.getTextBoundingRect = getTextBoundingRect;
  exports.getTextRect = getTextRect;

  /***/ }),
  /* 173 */
  /***/ (function(module, exports, __webpack_require__) {

  var BoundingRect = __webpack_require__(83);

  var imageHelper = __webpack_require__(174);

  var _util = __webpack_require__(16);

  var getContext = _util.getContext;
  var extend = _util.extend;
  var retrieve2 = _util.retrieve2;
  var retrieve3 = _util.retrieve3;
  var trim = _util.trim;
  var textWidthCache = {};
  var textWidthCacheCounter = 0;
  var TEXT_CACHE_MAX = 5000;
  var STYLE_REG = /\{([a-zA-Z0-9_]+)\|([^}]*)\}/g;
  var DEFAULT_FONT = '12px sans-serif'; // Avoid assign to an exported variable, for transforming to cjs.

  var methods = {};

  function $override(name, fn) {
    methods[name] = fn;
  }
  /**
   * @public
   * @param {string} text
   * @param {string} font
   * @return {number} width
   */


  function getWidth(text, font) {
    font = font || DEFAULT_FONT;
    var key = text + ':' + font;

    if (textWidthCache[key]) {
      return textWidthCache[key];
    }

    var textLines = (text + '').split('\n');
    var width = 0;

    for (var i = 0, l = textLines.length; i < l; i++) {
      // textContain.measureText may be overrided in SVG or VML
      width = Math.max(measureText(textLines[i], font).width, width);
    }

    if (textWidthCacheCounter > TEXT_CACHE_MAX) {
      textWidthCacheCounter = 0;
      textWidthCache = {};
    }

    textWidthCacheCounter++;
    textWidthCache[key] = width;
    return width;
  }
  /**
   * @public
   * @param {string} text
   * @param {string} font
   * @param {string} [textAlign='left']
   * @param {string} [textVerticalAlign='top']
   * @param {Array.<number>} [textPadding]
   * @param {Object} [rich]
   * @param {Object} [truncate]
   * @return {Object} {x, y, width, height, lineHeight}
   */


  function getBoundingRect(text, font, textAlign, textVerticalAlign, textPadding, textLineHeight, rich, truncate) {
    return rich ? getRichTextRect(text, font, textAlign, textVerticalAlign, textPadding, textLineHeight, rich, truncate) : getPlainTextRect(text, font, textAlign, textVerticalAlign, textPadding, textLineHeight, truncate);
  }

  function getPlainTextRect(text, font, textAlign, textVerticalAlign, textPadding, textLineHeight, truncate) {
    var contentBlock = parsePlainText(text, font, textPadding, textLineHeight, truncate);
    var outerWidth = getWidth(text, font);

    if (textPadding) {
      outerWidth += textPadding[1] + textPadding[3];
    }

    var outerHeight = contentBlock.outerHeight;
    var x = adjustTextX(0, outerWidth, textAlign);
    var y = adjustTextY(0, outerHeight, textVerticalAlign);
    var rect = new BoundingRect(x, y, outerWidth, outerHeight);
    rect.lineHeight = contentBlock.lineHeight;
    return rect;
  }

  function getRichTextRect(text, font, textAlign, textVerticalAlign, textPadding, textLineHeight, rich, truncate) {
    var contentBlock = parseRichText(text, {
      rich: rich,
      truncate: truncate,
      font: font,
      textAlign: textAlign,
      textPadding: textPadding,
      textLineHeight: textLineHeight
    });
    var outerWidth = contentBlock.outerWidth;
    var outerHeight = contentBlock.outerHeight;
    var x = adjustTextX(0, outerWidth, textAlign);
    var y = adjustTextY(0, outerHeight, textVerticalAlign);
    return new BoundingRect(x, y, outerWidth, outerHeight);
  }
  /**
   * @public
   * @param {number} x
   * @param {number} width
   * @param {string} [textAlign='left']
   * @return {number} Adjusted x.
   */


  function adjustTextX(x, width, textAlign) {
    // FIXME Right to left language
    if (textAlign === 'right') {
      x -= width;
    } else if (textAlign === 'center') {
      x -= width / 2;
    }

    return x;
  }
  /**
   * @public
   * @param {number} y
   * @param {number} height
   * @param {string} [textVerticalAlign='top']
   * @return {number} Adjusted y.
   */


  function adjustTextY(y, height, textVerticalAlign) {
    if (textVerticalAlign === 'middle') {
      y -= height / 2;
    } else if (textVerticalAlign === 'bottom') {
      y -= height;
    }

    return y;
  }
  /**
   * Follow same interface to `Displayable.prototype.calculateTextPosition`.
   * @public
   * @param {Obejct} [out] Prepared out object. If not input, auto created in the method.
   * @param {module:zrender/graphic/Style} style where `textPosition` and `textDistance` are visited.
   * @param {Object} rect {x, y, width, height} Rect of the host elment, according to which the text positioned.
   * @return {Object} The input `out`. Set: {x, y, textAlign, textVerticalAlign}
   */


  function calculateTextPosition(out, style, rect) {
    var textPosition = style.textPosition;
    var distance = style.textDistance;
    var x = rect.x;
    var y = rect.y;
    var height = rect.height;
    var width = rect.width;
    var halfHeight = height / 2;
    var textAlign = 'left';
    var textVerticalAlign = 'top';

    switch (textPosition) {
      case 'left':
        x -= distance;
        y += halfHeight;
        textAlign = 'right';
        textVerticalAlign = 'middle';
        break;

      case 'right':
        x += distance + width;
        y += halfHeight;
        textVerticalAlign = 'middle';
        break;

      case 'top':
        x += width / 2;
        y -= distance;
        textAlign = 'center';
        textVerticalAlign = 'bottom';
        break;

      case 'bottom':
        x += width / 2;
        y += height + distance;
        textAlign = 'center';
        break;

      case 'inside':
        x += width / 2;
        y += halfHeight;
        textAlign = 'center';
        textVerticalAlign = 'middle';
        break;

      case 'insideLeft':
        x += distance;
        y += halfHeight;
        textVerticalAlign = 'middle';
        break;

      case 'insideRight':
        x += width - distance;
        y += halfHeight;
        textAlign = 'right';
        textVerticalAlign = 'middle';
        break;

      case 'insideTop':
        x += width / 2;
        y += distance;
        textAlign = 'center';
        break;

      case 'insideBottom':
        x += width / 2;
        y += height - distance;
        textAlign = 'center';
        textVerticalAlign = 'bottom';
        break;

      case 'insideTopLeft':
        x += distance;
        y += distance;
        break;

      case 'insideTopRight':
        x += width - distance;
        y += distance;
        textAlign = 'right';
        break;

      case 'insideBottomLeft':
        x += distance;
        y += height - distance;
        textVerticalAlign = 'bottom';
        break;

      case 'insideBottomRight':
        x += width - distance;
        y += height - distance;
        textAlign = 'right';
        textVerticalAlign = 'bottom';
        break;
    }

    out = out || {};
    out.x = x;
    out.y = y;
    out.textAlign = textAlign;
    out.textVerticalAlign = textVerticalAlign;
    return out;
  }
  /**
   * To be removed. But still do not remove in case that some one has imported it.
   * @deprecated
   * @public
   * @param {stirng} textPosition
   * @param {Object} rect {x, y, width, height}
   * @param {number} distance
   * @return {Object} {x, y, textAlign, textVerticalAlign}
   */


  function adjustTextPositionOnRect(textPosition, rect, distance) {
    var dummyStyle = {
      textPosition: textPosition,
      textDistance: distance
    };
    return calculateTextPosition({}, dummyStyle, rect);
  }
  /**
   * Show ellipsis if overflow.
   *
   * @public
   * @param  {string} text
   * @param  {string} containerWidth
   * @param  {string} font
   * @param  {number} [ellipsis='...']
   * @param  {Object} [options]
   * @param  {number} [options.maxIterations=3]
   * @param  {number} [options.minChar=0] If truncate result are less
   *                  then minChar, ellipsis will not show, which is
   *                  better for user hint in some cases.
   * @param  {number} [options.placeholder=''] When all truncated, use the placeholder.
   * @return {string}
   */


  function truncateText(text, containerWidth, font, ellipsis, options) {
    if (!containerWidth) {
      return '';
    }

    var textLines = (text + '').split('\n');
    options = prepareTruncateOptions(containerWidth, font, ellipsis, options); // FIXME
    // It is not appropriate that every line has '...' when truncate multiple lines.

    for (var i = 0, len = textLines.length; i < len; i++) {
      textLines[i] = truncateSingleLine(textLines[i], options);
    }

    return textLines.join('\n');
  }

  function prepareTruncateOptions(containerWidth, font, ellipsis, options) {
    options = extend({}, options);
    options.font = font;
    var ellipsis = retrieve2(ellipsis, '...');
    options.maxIterations = retrieve2(options.maxIterations, 2);
    var minChar = options.minChar = retrieve2(options.minChar, 0); // FIXME
    // Other languages?

    options.cnCharWidth = getWidth('国', font); // FIXME
    // Consider proportional font?

    var ascCharWidth = options.ascCharWidth = getWidth('a', font);
    options.placeholder = retrieve2(options.placeholder, ''); // Example 1: minChar: 3, text: 'asdfzxcv', truncate result: 'asdf', but not: 'a...'.
    // Example 2: minChar: 3, text: '维度', truncate result: '维', but not: '...'.

    var contentWidth = containerWidth = Math.max(0, containerWidth - 1); // Reserve some gap.

    for (var i = 0; i < minChar && contentWidth >= ascCharWidth; i++) {
      contentWidth -= ascCharWidth;
    }

    var ellipsisWidth = getWidth(ellipsis, font);

    if (ellipsisWidth > contentWidth) {
      ellipsis = '';
      ellipsisWidth = 0;
    }

    contentWidth = containerWidth - ellipsisWidth;
    options.ellipsis = ellipsis;
    options.ellipsisWidth = ellipsisWidth;
    options.contentWidth = contentWidth;
    options.containerWidth = containerWidth;
    return options;
  }

  function truncateSingleLine(textLine, options) {
    var containerWidth = options.containerWidth;
    var font = options.font;
    var contentWidth = options.contentWidth;

    if (!containerWidth) {
      return '';
    }

    var lineWidth = getWidth(textLine, font);

    if (lineWidth <= containerWidth) {
      return textLine;
    }

    for (var j = 0;; j++) {
      if (lineWidth <= contentWidth || j >= options.maxIterations) {
        textLine += options.ellipsis;
        break;
      }

      var subLength = j === 0 ? estimateLength(textLine, contentWidth, options.ascCharWidth, options.cnCharWidth) : lineWidth > 0 ? Math.floor(textLine.length * contentWidth / lineWidth) : 0;
      textLine = textLine.substr(0, subLength);
      lineWidth = getWidth(textLine, font);
    }

    if (textLine === '') {
      textLine = options.placeholder;
    }

    return textLine;
  }

  function estimateLength(text, contentWidth, ascCharWidth, cnCharWidth) {
    var width = 0;
    var i = 0;

    for (var len = text.length; i < len && width < contentWidth; i++) {
      var charCode = text.charCodeAt(i);
      width += 0 <= charCode && charCode <= 127 ? ascCharWidth : cnCharWidth;
    }

    return i;
  }
  /**
   * @public
   * @param {string} font
   * @return {number} line height
   */


  function getLineHeight(font) {
    // FIXME A rough approach.
    return getWidth('国', font);
  }
  /**
   * @public
   * @param {string} text
   * @param {string} font
   * @return {Object} width
   */


  function measureText(text, font) {
    return methods.measureText(text, font);
  } // Avoid assign to an exported variable, for transforming to cjs.


  methods.measureText = function (text, font) {
    var ctx = getContext();
    ctx.font = font || DEFAULT_FONT;
    return ctx.measureText(text);
  };
  /**
   * @public
   * @param {string} text
   * @param {string} font
   * @param {Object} [truncate]
   * @return {Object} block: {lineHeight, lines, height, outerHeight}
   *  Notice: for performance, do not calculate outerWidth util needed.
   */


  function parsePlainText(text, font, padding, textLineHeight, truncate) {
    text != null && (text += '');
    var lineHeight = retrieve2(textLineHeight, getLineHeight(font));
    var lines = text ? text.split('\n') : [];
    var height = lines.length * lineHeight;
    var outerHeight = height;

    if (padding) {
      outerHeight += padding[0] + padding[2];
    }

    if (text && truncate) {
      var truncOuterHeight = truncate.outerHeight;
      var truncOuterWidth = truncate.outerWidth;

      if (truncOuterHeight != null && outerHeight > truncOuterHeight) {
        text = '';
        lines = [];
      } else if (truncOuterWidth != null) {
        var options = prepareTruncateOptions(truncOuterWidth - (padding ? padding[1] + padding[3] : 0), font, truncate.ellipsis, {
          minChar: truncate.minChar,
          placeholder: truncate.placeholder
        }); // FIXME
        // It is not appropriate that every line has '...' when truncate multiple lines.

        for (var i = 0, len = lines.length; i < len; i++) {
          lines[i] = truncateSingleLine(lines[i], options);
        }
      }
    }

    return {
      lines: lines,
      height: height,
      outerHeight: outerHeight,
      lineHeight: lineHeight
    };
  }
  /**
   * For example: 'some text {a|some text}other text{b|some text}xxx{c|}xxx'
   * Also consider 'bbbb{a|xxx\nzzz}xxxx\naaaa'.
   *
   * @public
   * @param {string} text
   * @param {Object} style
   * @return {Object} block
   * {
   *      width,
   *      height,
   *      lines: [{
   *          lineHeight,
   *          width,
   *          tokens: [[{
   *              styleName,
   *              text,
   *              width,      // include textPadding
   *              height,     // include textPadding
   *              textWidth, // pure text width
   *              textHeight, // pure text height
   *              lineHeihgt,
   *              font,
   *              textAlign,
   *              textVerticalAlign
   *          }], [...], ...]
   *      }, ...]
   * }
   * If styleName is undefined, it is plain text.
   */


  function parseRichText(text, style) {
    var contentBlock = {
      lines: [],
      width: 0,
      height: 0
    };
    text != null && (text += '');

    if (!text) {
      return contentBlock;
    }

    var lastIndex = STYLE_REG.lastIndex = 0;
    var result;

    while ((result = STYLE_REG.exec(text)) != null) {
      var matchedIndex = result.index;

      if (matchedIndex > lastIndex) {
        pushTokens(contentBlock, text.substring(lastIndex, matchedIndex));
      }

      pushTokens(contentBlock, result[2], result[1]);
      lastIndex = STYLE_REG.lastIndex;
    }

    if (lastIndex < text.length) {
      pushTokens(contentBlock, text.substring(lastIndex, text.length));
    }

    var lines = contentBlock.lines;
    var contentHeight = 0;
    var contentWidth = 0; // For `textWidth: 100%`

    var pendingList = [];
    var stlPadding = style.textPadding;
    var truncate = style.truncate;
    var truncateWidth = truncate && truncate.outerWidth;
    var truncateHeight = truncate && truncate.outerHeight;

    if (stlPadding) {
      truncateWidth != null && (truncateWidth -= stlPadding[1] + stlPadding[3]);
      truncateHeight != null && (truncateHeight -= stlPadding[0] + stlPadding[2]);
    } // Calculate layout info of tokens.


    for (var i = 0; i < lines.length; i++) {
      var line = lines[i];
      var lineHeight = 0;
      var lineWidth = 0;

      for (var j = 0; j < line.tokens.length; j++) {
        var token = line.tokens[j];
        var tokenStyle = token.styleName && style.rich[token.styleName] || {}; // textPadding should not inherit from style.

        var textPadding = token.textPadding = tokenStyle.textPadding; // textFont has been asigned to font by `normalizeStyle`.

        var font = token.font = tokenStyle.font || style.font; // textHeight can be used when textVerticalAlign is specified in token.

        var tokenHeight = token.textHeight = retrieve2( // textHeight should not be inherited, consider it can be specified
        // as box height of the block.
        tokenStyle.textHeight, getLineHeight(font));
        textPadding && (tokenHeight += textPadding[0] + textPadding[2]);
        token.height = tokenHeight;
        token.lineHeight = retrieve3(tokenStyle.textLineHeight, style.textLineHeight, tokenHeight);
        token.textAlign = tokenStyle && tokenStyle.textAlign || style.textAlign;
        token.textVerticalAlign = tokenStyle && tokenStyle.textVerticalAlign || 'middle';

        if (truncateHeight != null && contentHeight + token.lineHeight > truncateHeight) {
          return {
            lines: [],
            width: 0,
            height: 0
          };
        }

        token.textWidth = getWidth(token.text, font);
        var tokenWidth = tokenStyle.textWidth;
        var tokenWidthNotSpecified = tokenWidth == null || tokenWidth === 'auto'; // Percent width, can be `100%`, can be used in drawing separate
        // line when box width is needed to be auto.

        if (typeof tokenWidth === 'string' && tokenWidth.charAt(tokenWidth.length - 1) === '%') {
          token.percentWidth = tokenWidth;
          pendingList.push(token);
          tokenWidth = 0; // Do not truncate in this case, because there is no user case
          // and it is too complicated.
        } else {
          if (tokenWidthNotSpecified) {
            tokenWidth = token.textWidth; // FIXME: If image is not loaded and textWidth is not specified, calling
            // `getBoundingRect()` will not get correct result.

            var textBackgroundColor = tokenStyle.textBackgroundColor;
            var bgImg = textBackgroundColor && textBackgroundColor.image; // Use cases:
            // (1) If image is not loaded, it will be loaded at render phase and call
            // `dirty()` and `textBackgroundColor.image` will be replaced with the loaded
            // image, and then the right size will be calculated here at the next tick.
            // See `graphic/helper/text.js`.
            // (2) If image loaded, and `textBackgroundColor.image` is image src string,
            // use `imageHelper.findExistImage` to find cached image.
            // `imageHelper.findExistImage` will always be called here before
            // `imageHelper.createOrUpdateImage` in `graphic/helper/text.js#renderRichText`
            // which ensures that image will not be rendered before correct size calcualted.

            if (bgImg) {
              bgImg = imageHelper.findExistImage(bgImg);

              if (imageHelper.isImageReady(bgImg)) {
                tokenWidth = Math.max(tokenWidth, bgImg.width * tokenHeight / bgImg.height);
              }
            }
          }

          var paddingW = textPadding ? textPadding[1] + textPadding[3] : 0;
          tokenWidth += paddingW;
          var remianTruncWidth = truncateWidth != null ? truncateWidth - lineWidth : null;

          if (remianTruncWidth != null && remianTruncWidth < tokenWidth) {
            if (!tokenWidthNotSpecified || remianTruncWidth < paddingW) {
              token.text = '';
              token.textWidth = tokenWidth = 0;
            } else {
              token.text = truncateText(token.text, remianTruncWidth - paddingW, font, truncate.ellipsis, {
                minChar: truncate.minChar
              });
              token.textWidth = getWidth(token.text, font);
              tokenWidth = token.textWidth + paddingW;
            }
          }
        }

        lineWidth += token.width = tokenWidth;
        tokenStyle && (lineHeight = Math.max(lineHeight, token.lineHeight));
      }

      line.width = lineWidth;
      line.lineHeight = lineHeight;
      contentHeight += lineHeight;
      contentWidth = Math.max(contentWidth, lineWidth);
    }

    contentBlock.outerWidth = contentBlock.width = retrieve2(style.textWidth, contentWidth);
    contentBlock.outerHeight = contentBlock.height = retrieve2(style.textHeight, contentHeight);

    if (stlPadding) {
      contentBlock.outerWidth += stlPadding[1] + stlPadding[3];
      contentBlock.outerHeight += stlPadding[0] + stlPadding[2];
    }

    for (var i = 0; i < pendingList.length; i++) {
      var token = pendingList[i];
      var percentWidth = token.percentWidth; // Should not base on outerWidth, because token can not be placed out of padding.

      token.width = parseInt(percentWidth, 10) / 100 * contentWidth;
    }

    return contentBlock;
  }

  function pushTokens(block, str, styleName) {
    var isEmptyStr = str === '';
    var strs = str.split('\n');
    var lines = block.lines;

    for (var i = 0; i < strs.length; i++) {
      var text = strs[i];
      var token = {
        styleName: styleName,
        text: text,
        isLineHolder: !text && !isEmptyStr
      }; // The first token should be appended to the last line.

      if (!i) {
        var tokens = (lines[lines.length - 1] || (lines[0] = {
          tokens: []
        })).tokens; // Consider cases:
        // (1) ''.split('\n') => ['', '\n', ''], the '' at the first item
        // (which is a placeholder) should be replaced by new token.
        // (2) A image backage, where token likes {a|}.
        // (3) A redundant '' will affect textAlign in line.
        // (4) tokens with the same tplName should not be merged, because
        // they should be displayed in different box (with border and padding).

        var tokensLen = tokens.length;
        tokensLen === 1 && tokens[0].isLineHolder ? tokens[0] = token : // Consider text is '', only insert when it is the "lineHolder" or
        // "emptyStr". Otherwise a redundant '' will affect textAlign in line.
        (text || !tokensLen || isEmptyStr) && tokens.push(token);
      } // Other tokens always start a new line.
      else {
          // If there is '', insert it as a placeholder.
          lines.push({
            tokens: [token]
          });
        }
    }
  }

  function makeFont(style) {
    // FIXME in node-canvas fontWeight is before fontStyle
    // Use `fontSize` `fontFamily` to check whether font properties are defined.
    var font = (style.fontSize || style.fontFamily) && [style.fontStyle, style.fontWeight, (style.fontSize || 12) + 'px', // If font properties are defined, `fontFamily` should not be ignored.
    style.fontFamily || 'sans-serif'].join(' ');
    return font && trim(font) || style.textFont || style.font;
  }

  exports.DEFAULT_FONT = DEFAULT_FONT;
  exports.$override = $override;
  exports.getWidth = getWidth;
  exports.getBoundingRect = getBoundingRect;
  exports.adjustTextX = adjustTextX;
  exports.adjustTextY = adjustTextY;
  exports.calculateTextPosition = calculateTextPosition;
  exports.adjustTextPositionOnRect = adjustTextPositionOnRect;
  exports.truncateText = truncateText;
  exports.getLineHeight = getLineHeight;
  exports.measureText = measureText;
  exports.parsePlainText = parsePlainText;
  exports.parseRichText = parseRichText;
  exports.makeFont = makeFont;

  /***/ }),
  /* 174 */
  /***/ (function(module, exports, __webpack_require__) {

  var LRU = __webpack_require__(175);

  var globalImageCache = new LRU(50);
  /**
   * @param {string|HTMLImageElement|HTMLCanvasElement|Canvas} newImageOrSrc
   * @return {HTMLImageElement|HTMLCanvasElement|Canvas} image
   */

  function findExistImage(newImageOrSrc) {
    if (typeof newImageOrSrc === 'string') {
      var cachedImgObj = globalImageCache.get(newImageOrSrc);
      return cachedImgObj && cachedImgObj.image;
    } else {
      return newImageOrSrc;
    }
  }
  /**
   * Caution: User should cache loaded images, but not just count on LRU.
   * Consider if required images more than LRU size, will dead loop occur?
   *
   * @param {string|HTMLImageElement|HTMLCanvasElement|Canvas} newImageOrSrc
   * @param {HTMLImageElement|HTMLCanvasElement|Canvas} image Existent image.
   * @param {module:zrender/Element} [hostEl] For calling `dirty`.
   * @param {Function} [cb] params: (image, cbPayload)
   * @param {Object} [cbPayload] Payload on cb calling.
   * @return {HTMLImageElement|HTMLCanvasElement|Canvas} image
   */


  function createOrUpdateImage(newImageOrSrc, image, hostEl, cb, cbPayload) {
    if (!newImageOrSrc) {
      return image;
    } else if (typeof newImageOrSrc === 'string') {
      // Image should not be loaded repeatly.
      if (image && image.__zrImageSrc === newImageOrSrc || !hostEl) {
        return image;
      } // Only when there is no existent image or existent image src
      // is different, this method is responsible for load.


      var cachedImgObj = globalImageCache.get(newImageOrSrc);
      var pendingWrap = {
        hostEl: hostEl,
        cb: cb,
        cbPayload: cbPayload
      };

      if (cachedImgObj) {
        image = cachedImgObj.image;
        !isImageReady(image) && cachedImgObj.pending.push(pendingWrap);
      } else {
        image = new Image();
        image.onload = image.onerror = imageOnLoad;
        globalImageCache.put(newImageOrSrc, image.__cachedImgObj = {
          image: image,
          pending: [pendingWrap]
        });
        image.src = image.__zrImageSrc = newImageOrSrc;
      }

      return image;
    } // newImageOrSrc is an HTMLImageElement or HTMLCanvasElement or Canvas
    else {
        return newImageOrSrc;
      }
  }

  function imageOnLoad() {
    var cachedImgObj = this.__cachedImgObj;
    this.onload = this.onerror = this.__cachedImgObj = null;

    for (var i = 0; i < cachedImgObj.pending.length; i++) {
      var pendingWrap = cachedImgObj.pending[i];
      var cb = pendingWrap.cb;
      cb && cb(this, pendingWrap.cbPayload);
      pendingWrap.hostEl.dirty();
    }

    cachedImgObj.pending.length = 0;
  }

  function isImageReady(image) {
    return image && image.width && image.height;
  }

  exports.findExistImage = findExistImage;
  exports.createOrUpdateImage = createOrUpdateImage;
  exports.isImageReady = isImageReady;

  /***/ }),
  /* 175 */
  /***/ (function(module, exports) {

  // Simple LRU cache use doubly linked list
  // @module zrender/core/LRU

  /**
   * Simple double linked list. Compared with array, it has O(1) remove operation.
   * @constructor
   */
  var LinkedList = function () {
    /**
     * @type {module:zrender/core/LRU~Entry}
     */
    this.head = null;
    /**
     * @type {module:zrender/core/LRU~Entry}
     */

    this.tail = null;
    this._len = 0;
  };

  var linkedListProto = LinkedList.prototype;
  /**
   * Insert a new value at the tail
   * @param  {} val
   * @return {module:zrender/core/LRU~Entry}
   */

  linkedListProto.insert = function (val) {
    var entry = new Entry(val);
    this.insertEntry(entry);
    return entry;
  };
  /**
   * Insert an entry at the tail
   * @param  {module:zrender/core/LRU~Entry} entry
   */


  linkedListProto.insertEntry = function (entry) {
    if (!this.head) {
      this.head = this.tail = entry;
    } else {
      this.tail.next = entry;
      entry.prev = this.tail;
      entry.next = null;
      this.tail = entry;
    }

    this._len++;
  };
  /**
   * Remove entry.
   * @param  {module:zrender/core/LRU~Entry} entry
   */


  linkedListProto.remove = function (entry) {
    var prev = entry.prev;
    var next = entry.next;

    if (prev) {
      prev.next = next;
    } else {
      // Is head
      this.head = next;
    }

    if (next) {
      next.prev = prev;
    } else {
      // Is tail
      this.tail = prev;
    }

    entry.next = entry.prev = null;
    this._len--;
  };
  /**
   * @return {number}
   */


  linkedListProto.len = function () {
    return this._len;
  };
  /**
   * Clear list
   */


  linkedListProto.clear = function () {
    this.head = this.tail = null;
    this._len = 0;
  };
  /**
   * @constructor
   * @param {} val
   */


  var Entry = function (val) {
    /**
     * @type {}
     */
    this.value = val;
    /**
     * @type {module:zrender/core/LRU~Entry}
     */

    this.next;
    /**
     * @type {module:zrender/core/LRU~Entry}
     */

    this.prev;
  };
  /**
   * LRU Cache
   * @constructor
   * @alias module:zrender/core/LRU
   */


  var LRU = function (maxSize) {
    this._list = new LinkedList();
    this._map = {};
    this._maxSize = maxSize || 10;
    this._lastRemovedEntry = null;
  };

  var LRUProto = LRU.prototype;
  /**
   * @param  {string} key
   * @param  {} value
   * @return {} Removed value
   */

  LRUProto.put = function (key, value) {
    var list = this._list;
    var map = this._map;
    var removed = null;

    if (map[key] == null) {
      var len = list.len(); // Reuse last removed entry

      var entry = this._lastRemovedEntry;

      if (len >= this._maxSize && len > 0) {
        // Remove the least recently used
        var leastUsedEntry = list.head;
        list.remove(leastUsedEntry);
        delete map[leastUsedEntry.key];
        removed = leastUsedEntry.value;
        this._lastRemovedEntry = leastUsedEntry;
      }

      if (entry) {
        entry.value = value;
      } else {
        entry = new Entry(value);
      }

      entry.key = key;
      list.insertEntry(entry);
      map[key] = entry;
    }

    return removed;
  };
  /**
   * @param  {string} key
   * @return {}
   */


  LRUProto.get = function (key) {
    var entry = this._map[key];
    var list = this._list;

    if (entry != null) {
      // Put the latest used entry in the tail
      if (entry !== list.tail) {
        list.remove(entry);
        list.insertEntry(entry);
      }

      return entry.value;
    }
  };
  /**
   * Clear the cache
   */


  LRUProto.clear = function () {
    this._list.clear();

    this._map = {};
  };

  var _default = LRU;
  module.exports = _default;

  /***/ }),
  /* 176 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Base__ = __webpack_require__(8);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_glenum__ = __webpack_require__(11);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math_Vector3__ = __webpack_require__(3);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__math_BoundingBox__ = __webpack_require__(18);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__math_Frustum__ = __webpack_require__(59);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__math_Matrix4__ = __webpack_require__(7);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Renderer__ = __webpack_require__(52);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__Shader__ = __webpack_require__(9);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__Material__ = __webpack_require__(19);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__FrameBuffer__ = __webpack_require__(10);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__Texture__ = __webpack_require__(4);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__Texture2D__ = __webpack_require__(5);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__TextureCube__ = __webpack_require__(27);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__camera_Perspective__ = __webpack_require__(37);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__camera_Orthographic__ = __webpack_require__(38);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__compositor_Pass__ = __webpack_require__(15);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__compositor_TexturePool__ = __webpack_require__(85);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__glmatrix_mat4__ = __webpack_require__(21);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__shader_source_shadowmap_glsl_js__ = __webpack_require__(177);





















  var targets = ['px', 'nx', 'py', 'ny', 'pz', 'nz'];


  __WEBPACK_IMPORTED_MODULE_7__Shader__["a" /* default */]['import'](__WEBPACK_IMPORTED_MODULE_18__shader_source_shadowmap_glsl_js__["a" /* default */]);

  function getDepthMaterialUniform(renderable, depthMaterial, symbol) {
      if (symbol === 'alphaMap') {
          return renderable.material.get('diffuseMap');
      }
      else if (symbol === 'alphaCutoff') {
          if (renderable.material.isDefined('fragment', 'ALPHA_TEST')
              && renderable.material.get('diffuseMap')
          ) {
              var alphaCutoff = renderable.material.get('alphaCutoff');
              return alphaCutoff || 0;
          }
          return 0;
      }
      else if (symbol === 'uvRepeat') {
          return renderable.material.get('uvRepeat');
      }
      else if (symbol === 'uvOffset') {
          return renderable.material.get('uvOffset');
      }
      else {
          return depthMaterial.get(symbol);
      }
  }

  function isDepthMaterialChanged(renderable, prevRenderable) {
      var matA = renderable.material;
      var matB = prevRenderable.material;
      return matA.get('diffuseMap') !== matB.get('diffuseMap')
          || (matA.get('alphaCutoff') || 0) !== (matB.get('alphaCutoff') || 0);
  }

  /**
   * Pass rendering shadow map.
   *
   * @constructor clay.prePass.ShadowMap
   * @extends clay.core.Base
   * @example
   *     var shadowMapPass = new clay.prePass.ShadowMap({
   *         softShadow: clay.prePass.ShadowMap.VSM
   *     });
   *     ...
   *     animation.on('frame', function (frameTime) {
   *         shadowMapPass.render(renderer, scene, camera);
   *         renderer.render(scene, camera);
   *     });
   */
  var ShadowMapPass = __WEBPACK_IMPORTED_MODULE_0__core_Base__["a" /* default */].extend(function () {
      return /** @lends clay.prePass.ShadowMap# */ {
          /**
           * Soft shadow technique.
           * Can be {@link clay.prePass.ShadowMap.PCF} or {@link clay.prePass.ShadowMap.VSM}
           * @type {number}
           */
          softShadow: ShadowMapPass.PCF,

          /**
           * Soft shadow blur size
           * @type {number}
           */
          shadowBlur: 1.0,

          lightFrustumBias: 'auto',

          kernelPCF: new Float32Array([
              1, 0,
              1, 1,
              -1, 1,
              0, 1,
              -1, 0,
              -1, -1,
              1, -1,
              0, -1
          ]),

          precision: 'highp',

          _lastRenderNotCastShadow: false,

          _frameBuffer: new __WEBPACK_IMPORTED_MODULE_9__FrameBuffer__["a" /* default */](),

          _textures: {},
          _shadowMapNumber: {
              'POINT_LIGHT': 0,
              'DIRECTIONAL_LIGHT': 0,
              'SPOT_LIGHT': 0
          },

          _depthMaterials: {},
          _distanceMaterials: {},

          _receivers: [],
          _lightsCastShadow: [],

          _lightCameras: {},
          _lightMaterials: {},

          _texturePool: new __WEBPACK_IMPORTED_MODULE_16__compositor_TexturePool__["a" /* default */]()
      };
  }, function () {
      // Gaussian filter pass for VSM
      this._gaussianPassH = new __WEBPACK_IMPORTED_MODULE_15__compositor_Pass__["a" /* default */]({
          fragment: __WEBPACK_IMPORTED_MODULE_7__Shader__["a" /* default */].source('clay.compositor.gaussian_blur')
      });
      this._gaussianPassV = new __WEBPACK_IMPORTED_MODULE_15__compositor_Pass__["a" /* default */]({
          fragment: __WEBPACK_IMPORTED_MODULE_7__Shader__["a" /* default */].source('clay.compositor.gaussian_blur')
      });
      this._gaussianPassH.setUniform('blurSize', this.shadowBlur);
      this._gaussianPassH.setUniform('blurDir', 0.0);
      this._gaussianPassV.setUniform('blurSize', this.shadowBlur);
      this._gaussianPassV.setUniform('blurDir', 1.0);

      this._outputDepthPass = new __WEBPACK_IMPORTED_MODULE_15__compositor_Pass__["a" /* default */]({
          fragment: __WEBPACK_IMPORTED_MODULE_7__Shader__["a" /* default */].source('clay.sm.debug_depth')
      });
  }, {
      /**
       * Render scene to shadow textures
       * @param  {clay.Renderer} renderer
       * @param  {clay.Scene} scene
       * @param  {clay.Camera} sceneCamera
       * @param  {boolean} [notUpdateScene=false]
       * @memberOf clay.prePass.ShadowMap.prototype
       */
      render: function (renderer, scene, sceneCamera, notUpdateScene) {
          if (!sceneCamera) {
              sceneCamera = scene.getMainCamera();
          }
          this.trigger('beforerender', this, renderer, scene, sceneCamera);
          this._renderShadowPass(renderer, scene, sceneCamera, notUpdateScene);
          this.trigger('afterrender', this, renderer, scene, sceneCamera);
      },

      /**
       * Debug rendering of shadow textures
       * @param  {clay.Renderer} renderer
       * @param  {number} size
       * @memberOf clay.prePass.ShadowMap.prototype
       */
      renderDebug: function (renderer, size) {
          renderer.saveClear();
          var viewport = renderer.viewport;
          var x = 0, y = 0;
          var width = size || viewport.width / 4;
          var height = width;
          if (this.softShadow === ShadowMapPass.VSM) {
              this._outputDepthPass.material.define('fragment', 'USE_VSM');
          }
          else {
              this._outputDepthPass.material.undefine('fragment', 'USE_VSM');
          }
          for (var name in this._textures) {
              var texture = this._textures[name];
              renderer.setViewport(x, y, width * texture.width / texture.height, height);
              this._outputDepthPass.setUniform('depthMap', texture);
              this._outputDepthPass.render(renderer);
              x += width * texture.width / texture.height;
          }
          renderer.setViewport(viewport);
          renderer.restoreClear();
      },

      _updateReceivers: function (renderer, mesh) {
          if (mesh.receiveShadow) {
              this._receivers.push(mesh);
              mesh.material.set('shadowEnabled', 1);

              mesh.material.set('pcfKernel', this.kernelPCF);
          }
          else {
              mesh.material.set('shadowEnabled', 0);
          }

          if (this.softShadow === ShadowMapPass.VSM) {
              mesh.material.define('fragment', 'USE_VSM');
              mesh.material.undefine('fragment', 'PCF_KERNEL_SIZE');
          }
          else {
              mesh.material.undefine('fragment', 'USE_VSM');
              var kernelPCF = this.kernelPCF;
              if (kernelPCF && kernelPCF.length) {
                  mesh.material.define('fragment', 'PCF_KERNEL_SIZE', kernelPCF.length / 2);
              }
              else {
                  mesh.material.undefine('fragment', 'PCF_KERNEL_SIZE');
              }
          }
      },

      _update: function (renderer, scene) {
          var self = this;
          scene.traverse(function (renderable) {
              if (renderable.isRenderable()) {
                  self._updateReceivers(renderer, renderable);
              }
          });

          for (var i = 0; i < scene.lights.length; i++) {
              var light = scene.lights[i];
              if (light.castShadow && !light.invisible) {
                  this._lightsCastShadow.push(light);
              }
          }
      },

      _renderShadowPass: function (renderer, scene, sceneCamera, notUpdateScene) {
          // reset
          for (var name in this._shadowMapNumber) {
              this._shadowMapNumber[name] = 0;
          }
          this._lightsCastShadow.length = 0;
          this._receivers.length = 0;

          var _gl = renderer.gl;

          if (!notUpdateScene) {
              scene.update();
          }
          if (sceneCamera) {
              sceneCamera.update();
          }

          scene.updateLights();
          this._update(renderer, scene);

          // Needs to update the receivers again if shadows come from 1 to 0.
          if (!this._lightsCastShadow.length && this._lastRenderNotCastShadow) {
              return;
          }

          this._lastRenderNotCastShadow = this._lightsCastShadow === 0;

          _gl.enable(_gl.DEPTH_TEST);
          _gl.depthMask(true);
          _gl.disable(_gl.BLEND);

          // Clear with high-z, so the part not rendered will not been shadowed
          // TODO
          // TODO restore
          _gl.clearColor(1.0, 1.0, 1.0, 1.0);

          // Shadow uniforms
          var spotLightShadowMaps = [];
          var spotLightMatrices = [];
          var directionalLightShadowMaps = [];
          var directionalLightMatrices = [];
          var shadowCascadeClips = [];
          var pointLightShadowMaps = [];

          var dirLightHasCascade;
          // Create textures for shadow map
          for (var i = 0; i < this._lightsCastShadow.length; i++) {
              var light = this._lightsCastShadow[i];
              if (light.type === 'DIRECTIONAL_LIGHT') {

                  if (dirLightHasCascade) {
                      console.warn('Only one direectional light supported with shadow cascade');
                      continue;
                  }
                  if (light.shadowCascade > 4) {
                      console.warn('Support at most 4 cascade');
                      continue;
                  }
                  if (light.shadowCascade > 1) {
                      dirLightHasCascade = light;
                  }

                  this.renderDirectionalLightShadow(
                      renderer,
                      scene,
                      sceneCamera,
                      light,
                      shadowCascadeClips,
                      directionalLightMatrices,
                      directionalLightShadowMaps
                  );
              }
              else if (light.type === 'SPOT_LIGHT') {
                  this.renderSpotLightShadow(
                      renderer,
                      scene,
                      light,
                      spotLightMatrices,
                      spotLightShadowMaps
                  );
              }
              else if (light.type === 'POINT_LIGHT') {
                  this.renderPointLightShadow(
                      renderer,
                      scene,
                      light,
                      pointLightShadowMaps
                  );
              }

              this._shadowMapNumber[light.type]++;
          }

          for (var lightType in this._shadowMapNumber) {
              var number = this._shadowMapNumber[lightType];
              var key = lightType + '_SHADOWMAP_COUNT';
              for (var i = 0; i < this._receivers.length; i++) {
                  var mesh = this._receivers[i];
                  var material = mesh.material;
                  if (material.fragmentDefines[key] !== number) {
                      if (number > 0) {
                          material.define('fragment', key, number);
                      }
                      else if (material.isDefined('fragment', key)) {
                          material.undefine('fragment', key);
                      }
                  }
              }
          }
          for (var i = 0; i < this._receivers.length; i++) {
              var mesh = this._receivers[i];
              var material = mesh.material;
              if (dirLightHasCascade) {
                  material.define('fragment', 'SHADOW_CASCADE', dirLightHasCascade.shadowCascade);
              }
              else {
                  material.undefine('fragment', 'SHADOW_CASCADE');
              }
          }

          var shadowUniforms = scene.shadowUniforms;

          function getSize(texture) {
              return texture.height;
          }
          if (directionalLightShadowMaps.length > 0) {
              var directionalLightShadowMapSizes = directionalLightShadowMaps.map(getSize);
              shadowUniforms.directionalLightShadowMaps = { value: directionalLightShadowMaps, type: 'tv' };
              shadowUniforms.directionalLightMatrices = { value: directionalLightMatrices, type: 'm4v' };
              shadowUniforms.directionalLightShadowMapSizes = { value: directionalLightShadowMapSizes, type: '1fv' };
              if (dirLightHasCascade) {
                  var shadowCascadeClipsNear = shadowCascadeClips.slice();
                  var shadowCascadeClipsFar = shadowCascadeClips.slice();
                  shadowCascadeClipsNear.pop();
                  shadowCascadeClipsFar.shift();

                  // Iterate from far to near
                  shadowCascadeClipsNear.reverse();
                  shadowCascadeClipsFar.reverse();
                  // directionalLightShadowMaps.reverse();
                  directionalLightMatrices.reverse();
                  shadowUniforms.shadowCascadeClipsNear = { value: shadowCascadeClipsNear, type: '1fv' };
                  shadowUniforms.shadowCascadeClipsFar = { value: shadowCascadeClipsFar, type: '1fv' };
              }
          }

          if (spotLightShadowMaps.length > 0) {
              var spotLightShadowMapSizes = spotLightShadowMaps.map(getSize);
              var shadowUniforms = scene.shadowUniforms;
              shadowUniforms.spotLightShadowMaps = { value: spotLightShadowMaps, type: 'tv' };
              shadowUniforms.spotLightMatrices = { value: spotLightMatrices, type: 'm4v' };
              shadowUniforms.spotLightShadowMapSizes = { value: spotLightShadowMapSizes, type: '1fv' };
          }

          if (pointLightShadowMaps.length > 0) {
              shadowUniforms.pointLightShadowMaps = { value: pointLightShadowMaps, type: 'tv' };
          }
      },

      renderDirectionalLightShadow: (function () {

          var splitFrustum = new __WEBPACK_IMPORTED_MODULE_4__math_Frustum__["a" /* default */]();
          var splitProjMatrix = new __WEBPACK_IMPORTED_MODULE_5__math_Matrix4__["a" /* default */]();
          var cropBBox = new __WEBPACK_IMPORTED_MODULE_3__math_BoundingBox__["a" /* default */]();
          var cropMatrix = new __WEBPACK_IMPORTED_MODULE_5__math_Matrix4__["a" /* default */]();
          var lightViewMatrix = new __WEBPACK_IMPORTED_MODULE_5__math_Matrix4__["a" /* default */]();
          var lightViewProjMatrix = new __WEBPACK_IMPORTED_MODULE_5__math_Matrix4__["a" /* default */]();
          var lightProjMatrix = new __WEBPACK_IMPORTED_MODULE_5__math_Matrix4__["a" /* default */]();

          return function (renderer, scene, sceneCamera, light, shadowCascadeClips, directionalLightMatrices, directionalLightShadowMaps) {

              var defaultShadowMaterial = this._getDepthMaterial(light);
              var passConfig = {
                  getMaterial: function (renderable) {
                      return renderable.shadowDepthMaterial || defaultShadowMaterial;
                  },
                  isMaterialChanged: isDepthMaterialChanged,
                  getUniform: getDepthMaterialUniform,
                  ifRender: function (renderable) {
                      return renderable.castShadow;
                  },
                  sortCompare: __WEBPACK_IMPORTED_MODULE_6__Renderer__["a" /* default */].opaqueSortCompare
              };

              // First frame
              if (!scene.viewBoundingBoxLastFrame.isFinite()) {
                  var boundingBox = scene.getBoundingBox();
                  scene.viewBoundingBoxLastFrame
                      .copy(boundingBox).applyTransform(sceneCamera.viewMatrix);
              }
              // Considering moving speed since the bounding box is from last frame
              // TODO: add a bias
              var clippedFar = Math.min(-scene.viewBoundingBoxLastFrame.min.z, sceneCamera.far);
              var clippedNear = Math.max(-scene.viewBoundingBoxLastFrame.max.z, sceneCamera.near);

              var lightCamera = this._getDirectionalLightCamera(light, scene, sceneCamera);

              var lvpMat4Arr = lightViewProjMatrix.array;
              lightProjMatrix.copy(lightCamera.projectionMatrix);
              __WEBPACK_IMPORTED_MODULE_17__glmatrix_mat4__["a" /* default */].invert(lightViewMatrix.array, lightCamera.worldTransform.array);
              __WEBPACK_IMPORTED_MODULE_17__glmatrix_mat4__["a" /* default */].multiply(lightViewMatrix.array, lightViewMatrix.array, sceneCamera.worldTransform.array);
              __WEBPACK_IMPORTED_MODULE_17__glmatrix_mat4__["a" /* default */].multiply(lvpMat4Arr, lightProjMatrix.array, lightViewMatrix.array);

              var clipPlanes = [];
              var isPerspective = sceneCamera instanceof __WEBPACK_IMPORTED_MODULE_13__camera_Perspective__["a" /* default */];

              var scaleZ = (sceneCamera.near + sceneCamera.far) / (sceneCamera.near - sceneCamera.far);
              var offsetZ = 2 * sceneCamera.near * sceneCamera.far / (sceneCamera.near - sceneCamera.far);
              for (var i = 0; i <= light.shadowCascade; i++) {
                  var clog = clippedNear * Math.pow(clippedFar / clippedNear, i / light.shadowCascade);
                  var cuni = clippedNear + (clippedFar - clippedNear) * i / light.shadowCascade;
                  var c = clog * light.cascadeSplitLogFactor + cuni * (1 - light.cascadeSplitLogFactor);
                  clipPlanes.push(c);
                  shadowCascadeClips.push(-(-c * scaleZ + offsetZ) / -c);
              }
              var texture = this._getTexture(light, light.shadowCascade);
              directionalLightShadowMaps.push(texture);

              var viewport = renderer.viewport;

              var _gl = renderer.gl;
              this._frameBuffer.attach(texture);
              this._frameBuffer.bind(renderer);
              _gl.clear(_gl.COLOR_BUFFER_BIT | _gl.DEPTH_BUFFER_BIT);

              for (var i = 0; i < light.shadowCascade; i++) {
                  // Get the splitted frustum
                  var nearPlane = clipPlanes[i];
                  var farPlane = clipPlanes[i + 1];
                  if (isPerspective) {
                      __WEBPACK_IMPORTED_MODULE_17__glmatrix_mat4__["a" /* default */].perspective(splitProjMatrix.array, sceneCamera.fov / 180 * Math.PI, sceneCamera.aspect, nearPlane, farPlane);
                  }
                  else {
                      __WEBPACK_IMPORTED_MODULE_17__glmatrix_mat4__["a" /* default */].ortho(
                          splitProjMatrix.array,
                          sceneCamera.left, sceneCamera.right, sceneCamera.bottom, sceneCamera.top,
                          nearPlane, farPlane
                      );
                  }
                  splitFrustum.setFromProjection(splitProjMatrix);
                  splitFrustum.getTransformedBoundingBox(cropBBox, lightViewMatrix);
                  cropBBox.applyProjection(lightProjMatrix);
                  var _min = cropBBox.min.array;
                  var _max = cropBBox.max.array;
                  _min[0] = Math.max(_min[0], -1);
                  _min[1] = Math.max(_min[1], -1);
                  _max[0] = Math.min(_max[0], 1);
                  _max[1] = Math.min(_max[1], 1);
                  cropMatrix.ortho(_min[0], _max[0], _min[1], _max[1], 1, -1);
                  lightCamera.projectionMatrix.multiplyLeft(cropMatrix);

                  var shadowSize = light.shadowResolution || 512;

                  // Reversed, left to right => far to near
                  renderer.setViewport((light.shadowCascade - i - 1) * shadowSize, 0, shadowSize, shadowSize, 1);

                  var renderList = scene.updateRenderList(lightCamera);
                  renderer.renderPass(renderList.opaque, lightCamera, passConfig);

                  // Filter for VSM
                  if (this.softShadow === ShadowMapPass.VSM) {
                      this._gaussianFilter(renderer, texture, texture.width);
                  }

                  var matrix = new __WEBPACK_IMPORTED_MODULE_5__math_Matrix4__["a" /* default */]();
                  matrix.copy(lightCamera.viewMatrix)
                      .multiplyLeft(lightCamera.projectionMatrix);

                  directionalLightMatrices.push(matrix.array);

                  lightCamera.projectionMatrix.copy(lightProjMatrix);
              }

              this._frameBuffer.unbind(renderer);

              renderer.setViewport(viewport);
          };
      })(),

      renderSpotLightShadow: function (renderer, scene, light, spotLightMatrices, spotLightShadowMaps) {

          var texture = this._getTexture(light);
          var lightCamera = this._getSpotLightCamera(light);
          var _gl = renderer.gl;

          this._frameBuffer.attach(texture);
          this._frameBuffer.bind(renderer);

          _gl.clear(_gl.COLOR_BUFFER_BIT | _gl.DEPTH_BUFFER_BIT);

          var defaultShadowMaterial = this._getDepthMaterial(light);
          var passConfig = {
              getMaterial: function (renderable) {
                  return renderable.shadowDepthMaterial || defaultShadowMaterial;
              },
              isMaterialChanged: isDepthMaterialChanged,
              getUniform: getDepthMaterialUniform,
              ifRender: function (renderable) {
                  return renderable.castShadow;
              },
              sortCompare: __WEBPACK_IMPORTED_MODULE_6__Renderer__["a" /* default */].opaqueSortCompare
          };

          var renderList = scene.updateRenderList(lightCamera);
          renderer.renderPass(renderList.opaque, lightCamera, passConfig);

          this._frameBuffer.unbind(renderer);

          // Filter for VSM
          if (this.softShadow === ShadowMapPass.VSM) {
              this._gaussianFilter(renderer, texture, texture.width);
          }

          var matrix = new __WEBPACK_IMPORTED_MODULE_5__math_Matrix4__["a" /* default */]();
          matrix.copy(lightCamera.worldTransform)
              .invert()
              .multiplyLeft(lightCamera.projectionMatrix);

          spotLightShadowMaps.push(texture);
          spotLightMatrices.push(matrix.array);
      },

      renderPointLightShadow: function (renderer, scene, light, pointLightShadowMaps) {
          var texture = this._getTexture(light);
          var _gl = renderer.gl;
          pointLightShadowMaps.push(texture);

          var defaultShadowMaterial = this._getDepthMaterial(light);
          var passConfig = {
              getMaterial: function (renderable) {
                  return renderable.shadowDepthMaterial || defaultShadowMaterial;
              },
              getUniform: getDepthMaterialUniform,
              sortCompare: __WEBPACK_IMPORTED_MODULE_6__Renderer__["a" /* default */].opaqueSortCompare
          };

          var renderListEachSide = {
              px: [], py: [], pz: [], nx: [], ny: [], nz: []
          };
          var bbox = new __WEBPACK_IMPORTED_MODULE_3__math_BoundingBox__["a" /* default */]();
          var lightWorldPosition = light.getWorldPosition().array;
          var lightBBox = new __WEBPACK_IMPORTED_MODULE_3__math_BoundingBox__["a" /* default */]();
          var range = light.range;
          lightBBox.min.setArray(lightWorldPosition);
          lightBBox.max.setArray(lightWorldPosition);
          var extent = new __WEBPACK_IMPORTED_MODULE_2__math_Vector3__["a" /* default */](range, range, range);
          lightBBox.max.add(extent);
          lightBBox.min.sub(extent);

          var targetsNeedRender = { px: false, py: false, pz: false, nx: false, ny: false, nz: false };
          scene.traverse(function (renderable) {
              if (renderable.isRenderable() && renderable.castShadow) {
                  var geometry = renderable.geometry;
                  if (!geometry.boundingBox) {
                      for (var i = 0; i < targets.length; i++) {
                          renderListEachSide[targets[i]].push(renderable);
                      }
                      return;
                  }
                  bbox.transformFrom(geometry.boundingBox, renderable.worldTransform);
                  if (!bbox.intersectBoundingBox(lightBBox)) {
                      return;
                  }

                  bbox.updateVertices();
                  for (var i = 0; i < targets.length; i++) {
                      targetsNeedRender[targets[i]] = false;
                  }
                  for (var i = 0; i < 8; i++) {
                      var vtx = bbox.vertices[i];
                      var x = vtx[0] - lightWorldPosition[0];
                      var y = vtx[1] - lightWorldPosition[1];
                      var z = vtx[2] - lightWorldPosition[2];
                      var absx = Math.abs(x);
                      var absy = Math.abs(y);
                      var absz = Math.abs(z);
                      if (absx > absy) {
                          if (absx > absz) {
                              targetsNeedRender[x > 0 ? 'px' : 'nx'] = true;
                          }
                          else {
                              targetsNeedRender[z > 0 ? 'pz' : 'nz'] = true;
                          }
                      }
                      else {
                          if (absy > absz) {
                              targetsNeedRender[y > 0 ? 'py' : 'ny'] = true;
                          }
                          else {
                              targetsNeedRender[z > 0 ? 'pz' : 'nz'] = true;
                          }
                      }
                  }
                  for (var i = 0; i < targets.length; i++) {
                      if (targetsNeedRender[targets[i]]) {
                          renderListEachSide[targets[i]].push(renderable);
                      }
                  }
              }
          });

          for (var i = 0; i < 6; i++) {
              var target = targets[i];
              var camera = this._getPointLightCamera(light, target);

              this._frameBuffer.attach(texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);
              this._frameBuffer.bind(renderer);
              _gl.clear(_gl.COLOR_BUFFER_BIT | _gl.DEPTH_BUFFER_BIT);

              renderer.renderPass(renderListEachSide[target], camera, passConfig);
          }

          this._frameBuffer.unbind(renderer);
      },

      _getDepthMaterial: function (light) {
          var shadowMaterial = this._lightMaterials[light.__uid__];
          var isPointLight = light.type === 'POINT_LIGHT';
          if (!shadowMaterial) {
              var shaderPrefix = isPointLight ? 'clay.sm.distance.' : 'clay.sm.depth.';
              shadowMaterial = new __WEBPACK_IMPORTED_MODULE_8__Material__["a" /* default */]({
                  precision: this.precision,
                  shader: new __WEBPACK_IMPORTED_MODULE_7__Shader__["a" /* default */](__WEBPACK_IMPORTED_MODULE_7__Shader__["a" /* default */].source(shaderPrefix + 'vertex'), __WEBPACK_IMPORTED_MODULE_7__Shader__["a" /* default */].source(shaderPrefix + 'fragment'))
              });

              this._lightMaterials[light.__uid__] = shadowMaterial;
          }
          if (light.shadowSlopeScale != null) {
              shadowMaterial.setUniform('slopeScale', light.shadowSlopeScale);
          }
          if (light.shadowBias != null) {
              shadowMaterial.setUniform('bias', light.shadowBias);
          }
          if (this.softShadow === ShadowMapPass.VSM) {
              shadowMaterial.define('fragment', 'USE_VSM');
          }
          else {
              shadowMaterial.undefine('fragment', 'USE_VSM');
          }

          if (isPointLight) {
              shadowMaterial.set('lightPosition', light.getWorldPosition().array);
              shadowMaterial.set('range', light.range);
          }

          return shadowMaterial;
      },

      _gaussianFilter: function (renderer, texture, size) {
          var parameter = {
              width: size,
              height: size,
              type: __WEBPACK_IMPORTED_MODULE_10__Texture__["a" /* default */].FLOAT
          };
          var tmpTexture = this._texturePool.get(parameter);

          this._frameBuffer.attach(tmpTexture);
          this._frameBuffer.bind(renderer);
          this._gaussianPassH.setUniform('texture', texture);
          this._gaussianPassH.setUniform('textureWidth', size);
          this._gaussianPassH.render(renderer);

          this._frameBuffer.attach(texture);
          this._gaussianPassV.setUniform('texture', tmpTexture);
          this._gaussianPassV.setUniform('textureHeight', size);
          this._gaussianPassV.render(renderer);
          this._frameBuffer.unbind(renderer);

          this._texturePool.put(tmpTexture);
      },

      _getTexture: function (light, cascade) {
          var key = light.__uid__;
          var texture = this._textures[key];
          var resolution = light.shadowResolution || 512;
          cascade = cascade || 1;
          if (!texture) {
              if (light.type === 'POINT_LIGHT') {
                  texture = new __WEBPACK_IMPORTED_MODULE_12__TextureCube__["a" /* default */]();
              }
              else {
                  texture = new __WEBPACK_IMPORTED_MODULE_11__Texture2D__["a" /* default */]();
              }
              // At most 4 cascade
              // TODO share with height ?
              texture.width = resolution * cascade;
              texture.height = resolution;
              if (this.softShadow === ShadowMapPass.VSM) {
                  texture.type = __WEBPACK_IMPORTED_MODULE_10__Texture__["a" /* default */].FLOAT;
                  texture.anisotropic = 4;
              }
              else {
                  texture.minFilter = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].NEAREST;
                  texture.magFilter = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].NEAREST;
                  texture.useMipmap = false;
              }
              this._textures[key] = texture;
          }

          return texture;
      },

      _getPointLightCamera: function (light, target) {
          if (!this._lightCameras.point) {
              this._lightCameras.point = {
                  px: new __WEBPACK_IMPORTED_MODULE_13__camera_Perspective__["a" /* default */](),
                  nx: new __WEBPACK_IMPORTED_MODULE_13__camera_Perspective__["a" /* default */](),
                  py: new __WEBPACK_IMPORTED_MODULE_13__camera_Perspective__["a" /* default */](),
                  ny: new __WEBPACK_IMPORTED_MODULE_13__camera_Perspective__["a" /* default */](),
                  pz: new __WEBPACK_IMPORTED_MODULE_13__camera_Perspective__["a" /* default */](),
                  nz: new __WEBPACK_IMPORTED_MODULE_13__camera_Perspective__["a" /* default */]()
              };
          }
          var camera = this._lightCameras.point[target];

          camera.far = light.range;
          camera.fov = 90;
          camera.position.set(0, 0, 0);
          switch (target) {
              case 'px':
                  camera.lookAt(__WEBPACK_IMPORTED_MODULE_2__math_Vector3__["a" /* default */].POSITIVE_X, __WEBPACK_IMPORTED_MODULE_2__math_Vector3__["a" /* default */].NEGATIVE_Y);
                  break;
              case 'nx':
                  camera.lookAt(__WEBPACK_IMPORTED_MODULE_2__math_Vector3__["a" /* default */].NEGATIVE_X, __WEBPACK_IMPORTED_MODULE_2__math_Vector3__["a" /* default */].NEGATIVE_Y);
                  break;
              case 'py':
                  camera.lookAt(__WEBPACK_IMPORTED_MODULE_2__math_Vector3__["a" /* default */].POSITIVE_Y, __WEBPACK_IMPORTED_MODULE_2__math_Vector3__["a" /* default */].POSITIVE_Z);
                  break;
              case 'ny':
                  camera.lookAt(__WEBPACK_IMPORTED_MODULE_2__math_Vector3__["a" /* default */].NEGATIVE_Y, __WEBPACK_IMPORTED_MODULE_2__math_Vector3__["a" /* default */].NEGATIVE_Z);
                  break;
              case 'pz':
                  camera.lookAt(__WEBPACK_IMPORTED_MODULE_2__math_Vector3__["a" /* default */].POSITIVE_Z, __WEBPACK_IMPORTED_MODULE_2__math_Vector3__["a" /* default */].NEGATIVE_Y);
                  break;
              case 'nz':
                  camera.lookAt(__WEBPACK_IMPORTED_MODULE_2__math_Vector3__["a" /* default */].NEGATIVE_Z, __WEBPACK_IMPORTED_MODULE_2__math_Vector3__["a" /* default */].NEGATIVE_Y);
                  break;
          }
          light.getWorldPosition(camera.position);
          camera.update();

          return camera;
      },

      _getDirectionalLightCamera: (function () {
          var lightViewMatrix = new __WEBPACK_IMPORTED_MODULE_5__math_Matrix4__["a" /* default */]();
          var sceneViewBoundingBox = new __WEBPACK_IMPORTED_MODULE_3__math_BoundingBox__["a" /* default */]();
          var lightViewBBox = new __WEBPACK_IMPORTED_MODULE_3__math_BoundingBox__["a" /* default */]();
          // Camera of directional light will be adjusted
          // to contain the view frustum and scene bounding box as tightly as possible
          return function (light, scene, sceneCamera) {
              if (!this._lightCameras.directional) {
                  this._lightCameras.directional = new __WEBPACK_IMPORTED_MODULE_14__camera_Orthographic__["a" /* default */]();
              }
              var camera = this._lightCameras.directional;

              sceneViewBoundingBox.copy(scene.viewBoundingBoxLastFrame);
              sceneViewBoundingBox.intersection(sceneCamera.frustum.boundingBox);
              // Move to the center of frustum(in world space)
              camera.position
                  .copy(sceneViewBoundingBox.min)
                  .add(sceneViewBoundingBox.max)
                  .scale(0.5)
                  .transformMat4(sceneCamera.worldTransform);
              camera.rotation.copy(light.rotation);
              camera.scale.copy(light.scale);
              camera.updateWorldTransform();

              // Transform to light view space
              __WEBPACK_IMPORTED_MODULE_5__math_Matrix4__["a" /* default */].invert(lightViewMatrix, camera.worldTransform);
              __WEBPACK_IMPORTED_MODULE_5__math_Matrix4__["a" /* default */].multiply(lightViewMatrix, lightViewMatrix, sceneCamera.worldTransform);

              lightViewBBox.copy(sceneViewBoundingBox).applyTransform(lightViewMatrix);

              var min = lightViewBBox.min.array;
              var max = lightViewBBox.max.array;

              // Move camera to adjust the near to 0
              camera.position.set((min[0] + max[0]) / 2, (min[1] + max[1]) / 2, max[2])
                  .transformMat4(camera.worldTransform);
              camera.near = 0;
              camera.far = -min[2] + max[2];
              // Make sure receivers not in the frustum will stil receive the shadow.
              if (isNaN(this.lightFrustumBias)) {
                  camera.far *= 4;
              }
              else {
                  camera.far += this.lightFrustumBias;
              }
              camera.left = min[0];
              camera.right = max[0];
              camera.top = max[1];
              camera.bottom = min[1];
              camera.update(true);

              return camera;
          };
      })(),

      _getSpotLightCamera: function (light) {
          if (!this._lightCameras.spot) {
              this._lightCameras.spot = new __WEBPACK_IMPORTED_MODULE_13__camera_Perspective__["a" /* default */]();
          }
          var camera = this._lightCameras.spot;
          // Update properties
          camera.fov = light.penumbraAngle * 2;
          camera.far = light.range;
          camera.worldTransform.copy(light.worldTransform);
          camera.updateProjectionMatrix();
          __WEBPACK_IMPORTED_MODULE_17__glmatrix_mat4__["a" /* default */].invert(camera.viewMatrix.array, camera.worldTransform.array);

          return camera;
      },

      /**
       * @param  {clay.Renderer|WebGLRenderingContext} [renderer]
       * @memberOf clay.prePass.ShadowMap.prototype
       */
      // PENDING Renderer or WebGLRenderingContext
      dispose: function (renderer) {
          var _gl = renderer.gl || renderer;

          if (this._frameBuffer) {
              this._frameBuffer.dispose(_gl);
          }

          for (var name in this._textures) {
              this._textures[name].dispose(_gl);
          }

          this._texturePool.clear(renderer.gl);

          this._depthMaterials = {};
          this._distanceMaterials = {};
          this._textures = {};
          this._lightCameras = {};
          this._shadowMapNumber = {
              'POINT_LIGHT': 0,
              'DIRECTIONAL_LIGHT': 0,
              'SPOT_LIGHT': 0
          };
          this._meshMaterials = {};

          for (var i = 0; i < this._receivers.length; i++) {
              var mesh = this._receivers[i];
              // Mesh may be disposed
              if (mesh.material) {
                  var material = mesh.material;
                  material.undefine('fragment', 'POINT_LIGHT_SHADOW_COUNT');
                  material.undefine('fragment', 'DIRECTIONAL_LIGHT_SHADOW_COUNT');
                  material.undefine('fragment', 'AMBIENT_LIGHT_SHADOW_COUNT');
                  material.set('shadowEnabled', 0);
              }
          }

          this._receivers = [];
          this._lightsCastShadow = [];
      }
  });

  /**
   * @name clay.prePass.ShadowMap.VSM
   * @type {number}
   */
  ShadowMapPass.VSM = 1;

  /**
   * @name clay.prePass.ShadowMap.PCF
   * @type {number}
   */
  ShadowMapPass.PCF = 2;

  /* harmony default export */ __webpack_exports__["a"] = (ShadowMapPass);


  /***/ }),
  /* 177 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("@export clay.sm.depth.vertex\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nattribute vec3 position : POSITION;\nattribute vec2 texcoord : TEXCOORD_0;\nuniform vec2 uvRepeat = vec2(1.0, 1.0);\nuniform vec2 uvOffset = vec2(0.0, 0.0);\n@import clay.chunk.skinning_header\n@import clay.chunk.instancing_header\nvarying vec4 v_ViewPosition;\nvarying vec2 v_Texcoord;\nvoid main(){\n vec4 P = vec4(position, 1.0);\n#ifdef SKINNING\n @import clay.chunk.skin_matrix\n P = skinMatrixWS * P;\n#endif\n#ifdef INSTANCING\n @import clay.chunk.instancing_matrix\n P = instanceMat * P;\n#endif\n v_ViewPosition = worldViewProjection * P;\n gl_Position = v_ViewPosition;\n v_Texcoord = texcoord * uvRepeat + uvOffset;\n}\n@end\n@export clay.sm.depth.fragment\nvarying vec4 v_ViewPosition;\nvarying vec2 v_Texcoord;\nuniform float bias : 0.001;\nuniform float slopeScale : 1.0;\nuniform sampler2D alphaMap;\nuniform float alphaCutoff: 0.0;\n@import clay.util.encode_float\nvoid main(){\n float depth = v_ViewPosition.z / v_ViewPosition.w;\n if (alphaCutoff > 0.0) {\n if (texture2D(alphaMap, v_Texcoord).a <= alphaCutoff) {\n discard;\n }\n }\n#ifdef USE_VSM\n depth = depth * 0.5 + 0.5;\n float moment1 = depth;\n float moment2 = depth * depth;\n #ifdef SUPPORT_STANDARD_DERIVATIVES\n float dx = dFdx(depth);\n float dy = dFdy(depth);\n moment2 += 0.25*(dx*dx+dy*dy);\n #endif\n gl_FragColor = vec4(moment1, moment2, 0.0, 1.0);\n#else\n #ifdef SUPPORT_STANDARD_DERIVATIVES\n float dx = dFdx(depth);\n float dy = dFdy(depth);\n depth += sqrt(dx*dx + dy*dy) * slopeScale + bias;\n #else\n depth += bias;\n #endif\n gl_FragColor = encodeFloat(depth * 0.5 + 0.5);\n#endif\n}\n@end\n@export clay.sm.debug_depth\nuniform sampler2D depthMap;\nvarying vec2 v_Texcoord;\n@import clay.util.decode_float\nvoid main() {\n vec4 tex = texture2D(depthMap, v_Texcoord);\n#ifdef USE_VSM\n gl_FragColor = vec4(tex.rgb, 1.0);\n#else\n float depth = decodeFloat(tex);\n gl_FragColor = vec4(depth, depth, depth, 1.0);\n#endif\n}\n@end\n@export clay.sm.distance.vertex\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nuniform mat4 world : WORLD;\nattribute vec3 position : POSITION;\n@import clay.chunk.skinning_header\nvarying vec3 v_WorldPosition;\nvoid main (){\n vec4 P = vec4(position, 1.0);\n#ifdef SKINNING\n @import clay.chunk.skin_matrix\n P = skinMatrixWS * P;\n#endif\n#ifdef INSTANCING\n @import clay.chunk.instancing_matrix\n P = instanceMat * P;\n#endif\n gl_Position = worldViewProjection * P;\n v_WorldPosition = (world * P).xyz;\n}\n@end\n@export clay.sm.distance.fragment\nuniform vec3 lightPosition;\nuniform float range : 100;\nvarying vec3 v_WorldPosition;\n@import clay.util.encode_float\nvoid main(){\n float dist = distance(lightPosition, v_WorldPosition);\n#ifdef USE_VSM\n gl_FragColor = vec4(dist, dist * dist, 0.0, 0.0);\n#else\n dist = dist / range;\n gl_FragColor = encodeFloat(dist);\n#endif\n}\n@end\n@export clay.plugin.shadow_map_common\n@import clay.util.decode_float\nfloat tapShadowMap(sampler2D map, vec2 uv, float z){\n vec4 tex = texture2D(map, uv);\n return step(z, decodeFloat(tex) * 2.0 - 1.0);\n}\nfloat pcf(sampler2D map, vec2 uv, float z, float textureSize, vec2 scale) {\n float shadowContrib = tapShadowMap(map, uv, z);\n vec2 offset = vec2(1.0 / textureSize) * scale;\n#ifdef PCF_KERNEL_SIZE\n for (int _idx_ = 0; _idx_ < PCF_KERNEL_SIZE; _idx_++) {{\n shadowContrib += tapShadowMap(map, uv + offset * pcfKernel[_idx_], z);\n }}\n return shadowContrib / float(PCF_KERNEL_SIZE + 1);\n#else\n shadowContrib += tapShadowMap(map, uv+vec2(offset.x, 0.0), z);\n shadowContrib += tapShadowMap(map, uv+vec2(offset.x, offset.y), z);\n shadowContrib += tapShadowMap(map, uv+vec2(-offset.x, offset.y), z);\n shadowContrib += tapShadowMap(map, uv+vec2(0.0, offset.y), z);\n shadowContrib += tapShadowMap(map, uv+vec2(-offset.x, 0.0), z);\n shadowContrib += tapShadowMap(map, uv+vec2(-offset.x, -offset.y), z);\n shadowContrib += tapShadowMap(map, uv+vec2(offset.x, -offset.y), z);\n shadowContrib += tapShadowMap(map, uv+vec2(0.0, -offset.y), z);\n return shadowContrib / 9.0;\n#endif\n}\nfloat pcf(sampler2D map, vec2 uv, float z, float textureSize) {\n return pcf(map, uv, z, textureSize, vec2(1.0));\n}\nfloat chebyshevUpperBound(vec2 moments, float z){\n float p = 0.0;\n z = z * 0.5 + 0.5;\n if (z <= moments.x) {\n p = 1.0;\n }\n float variance = moments.y - moments.x * moments.x;\n variance = max(variance, 0.0000001);\n float mD = moments.x - z;\n float pMax = variance / (variance + mD * mD);\n pMax = clamp((pMax-0.4)/(1.0-0.4), 0.0, 1.0);\n return max(p, pMax);\n}\nfloat computeShadowContrib(\n sampler2D map, mat4 lightVPM, vec3 position, float textureSize, vec2 scale, vec2 offset\n) {\n vec4 posInLightSpace = lightVPM * vec4(position, 1.0);\n posInLightSpace.xyz /= posInLightSpace.w;\n float z = posInLightSpace.z;\n if(all(greaterThan(posInLightSpace.xyz, vec3(-0.99, -0.99, -1.0))) &&\n all(lessThan(posInLightSpace.xyz, vec3(0.99, 0.99, 1.0)))){\n vec2 uv = (posInLightSpace.xy+1.0) / 2.0;\n #ifdef USE_VSM\n vec2 moments = texture2D(map, uv * scale + offset).xy;\n return chebyshevUpperBound(moments, z);\n #else\n return pcf(map, uv * scale + offset, z, textureSize, scale);\n #endif\n }\n return 1.0;\n}\nfloat computeShadowContrib(sampler2D map, mat4 lightVPM, vec3 position, float textureSize) {\n return computeShadowContrib(map, lightVPM, position, textureSize, vec2(1.0), vec2(0.0));\n}\nfloat computeShadowContribOmni(samplerCube map, vec3 direction, float range)\n{\n float dist = length(direction);\n vec4 shadowTex = textureCube(map, direction);\n#ifdef USE_VSM\n vec2 moments = shadowTex.xy;\n float variance = moments.y - moments.x * moments.x;\n float mD = moments.x - dist;\n float p = variance / (variance + mD * mD);\n if(moments.x + 0.001 < dist){\n return clamp(p, 0.0, 1.0);\n }else{\n return 1.0;\n }\n#else\n return step(dist, (decodeFloat(shadowTex) + 0.0002) * range);\n#endif\n}\n@end\n@export clay.plugin.compute_shadow_map\n#if defined(SPOT_LIGHT_SHADOWMAP_COUNT) || defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT) || defined(POINT_LIGHT_SHADOWMAP_COUNT)\n#ifdef SPOT_LIGHT_SHADOWMAP_COUNT\nuniform sampler2D spotLightShadowMaps[SPOT_LIGHT_SHADOWMAP_COUNT]:unconfigurable;\nuniform mat4 spotLightMatrices[SPOT_LIGHT_SHADOWMAP_COUNT]:unconfigurable;\nuniform float spotLightShadowMapSizes[SPOT_LIGHT_SHADOWMAP_COUNT]:unconfigurable;\n#endif\n#ifdef DIRECTIONAL_LIGHT_SHADOWMAP_COUNT\n#if defined(SHADOW_CASCADE)\nuniform sampler2D directionalLightShadowMaps[1]:unconfigurable;\nuniform mat4 directionalLightMatrices[SHADOW_CASCADE]:unconfigurable;\nuniform float directionalLightShadowMapSizes[1]:unconfigurable;\nuniform float shadowCascadeClipsNear[SHADOW_CASCADE]:unconfigurable;\nuniform float shadowCascadeClipsFar[SHADOW_CASCADE]:unconfigurable;\n#else\nuniform sampler2D directionalLightShadowMaps[DIRECTIONAL_LIGHT_SHADOWMAP_COUNT]:unconfigurable;\nuniform mat4 directionalLightMatrices[DIRECTIONAL_LIGHT_SHADOWMAP_COUNT]:unconfigurable;\nuniform float directionalLightShadowMapSizes[DIRECTIONAL_LIGHT_SHADOWMAP_COUNT]:unconfigurable;\n#endif\n#endif\n#ifdef POINT_LIGHT_SHADOWMAP_COUNT\nuniform samplerCube pointLightShadowMaps[POINT_LIGHT_SHADOWMAP_COUNT]:unconfigurable;\n#endif\nuniform bool shadowEnabled : true;\n#ifdef PCF_KERNEL_SIZE\nuniform vec2 pcfKernel[PCF_KERNEL_SIZE];\n#endif\n@import clay.plugin.shadow_map_common\n#if defined(SPOT_LIGHT_SHADOWMAP_COUNT)\nvoid computeShadowOfSpotLights(vec3 position, inout float shadowContribs[SPOT_LIGHT_COUNT] ) {\n float shadowContrib;\n for(int _idx_ = 0; _idx_ < SPOT_LIGHT_SHADOWMAP_COUNT; _idx_++) {{\n shadowContrib = computeShadowContrib(\n spotLightShadowMaps[_idx_], spotLightMatrices[_idx_], position,\n spotLightShadowMapSizes[_idx_]\n );\n shadowContribs[_idx_] = shadowContrib;\n }}\n for(int _idx_ = SPOT_LIGHT_SHADOWMAP_COUNT; _idx_ < SPOT_LIGHT_COUNT; _idx_++){{\n shadowContribs[_idx_] = 1.0;\n }}\n}\n#endif\n#if defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT)\n#ifdef SHADOW_CASCADE\nvoid computeShadowOfDirectionalLights(vec3 position, inout float shadowContribs[DIRECTIONAL_LIGHT_COUNT]){\n float depth = (2.0 * gl_FragCoord.z - gl_DepthRange.near - gl_DepthRange.far)\n / (gl_DepthRange.far - gl_DepthRange.near);\n float shadowContrib;\n shadowContribs[0] = 1.0;\n for (int _idx_ = 0; _idx_ < SHADOW_CASCADE; _idx_++) {{\n if (\n depth >= shadowCascadeClipsNear[_idx_] &&\n depth <= shadowCascadeClipsFar[_idx_]\n ) {\n shadowContrib = computeShadowContrib(\n directionalLightShadowMaps[0], directionalLightMatrices[_idx_], position,\n directionalLightShadowMapSizes[0],\n vec2(1.0 / float(SHADOW_CASCADE), 1.0),\n vec2(float(_idx_) / float(SHADOW_CASCADE), 0.0)\n );\n shadowContribs[0] = shadowContrib;\n }\n }}\n for(int _idx_ = DIRECTIONAL_LIGHT_SHADOWMAP_COUNT; _idx_ < DIRECTIONAL_LIGHT_COUNT; _idx_++) {{\n shadowContribs[_idx_] = 1.0;\n }}\n}\n#else\nvoid computeShadowOfDirectionalLights(vec3 position, inout float shadowContribs[DIRECTIONAL_LIGHT_COUNT]){\n float shadowContrib;\n for(int _idx_ = 0; _idx_ < DIRECTIONAL_LIGHT_SHADOWMAP_COUNT; _idx_++) {{\n shadowContrib = computeShadowContrib(\n directionalLightShadowMaps[_idx_], directionalLightMatrices[_idx_], position,\n directionalLightShadowMapSizes[_idx_]\n );\n shadowContribs[_idx_] = shadowContrib;\n }}\n for(int _idx_ = DIRECTIONAL_LIGHT_SHADOWMAP_COUNT; _idx_ < DIRECTIONAL_LIGHT_COUNT; _idx_++) {{\n shadowContribs[_idx_] = 1.0;\n }}\n}\n#endif\n#endif\n#if defined(POINT_LIGHT_SHADOWMAP_COUNT)\nvoid computeShadowOfPointLights(vec3 position, inout float shadowContribs[POINT_LIGHT_COUNT] ){\n vec3 lightPosition;\n vec3 direction;\n for(int _idx_ = 0; _idx_ < POINT_LIGHT_SHADOWMAP_COUNT; _idx_++) {{\n lightPosition = pointLightPosition[_idx_];\n direction = position - lightPosition;\n shadowContribs[_idx_] = computeShadowContribOmni(pointLightShadowMaps[_idx_], direction, pointLightRange[_idx_]);\n }}\n for(int _idx_ = POINT_LIGHT_SHADOWMAP_COUNT; _idx_ < POINT_LIGHT_COUNT; _idx_++) {{\n shadowContribs[_idx_] = 1.0;\n }}\n}\n#endif\n#endif\n@end");


  /***/ }),
  /* 178 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_claygl_src_Shader__ = __webpack_require__(9);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_claygl_src_Texture2D__ = __webpack_require__(5);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_claygl_src_Texture__ = __webpack_require__(4);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_claygl_src_FrameBuffer__ = __webpack_require__(10);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_claygl_src_compositor_createCompositor__ = __webpack_require__(179);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__SSAOPass__ = __webpack_require__(191);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__SSRPass__ = __webpack_require__(193);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__poissonKernel__ = __webpack_require__(195);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__util_graphicGL__ = __webpack_require__(1);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__NormalPass__ = __webpack_require__(196);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__EdgePass__ = __webpack_require__(198);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_claygl_src_math_Matrix4__ = __webpack_require__(7);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__composite_js__ = __webpack_require__(199);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_claygl_src_shader_source_compositor_blur_glsl_js__ = __webpack_require__(86);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_claygl_src_shader_source_compositor_lut_glsl_js__ = __webpack_require__(87);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_claygl_src_shader_source_compositor_output_glsl_js__ = __webpack_require__(88);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_claygl_src_shader_source_compositor_bright_glsl_js__ = __webpack_require__(89);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_claygl_src_shader_source_compositor_downsample_glsl_js__ = __webpack_require__(90);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_claygl_src_shader_source_compositor_upsample_glsl_js__ = __webpack_require__(91);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_19_claygl_src_shader_source_compositor_hdr_glsl_js__ = __webpack_require__(92);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_20_claygl_src_shader_source_compositor_blend_glsl_js__ = __webpack_require__(93);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_21_claygl_src_shader_source_compositor_fxaa_glsl_js__ = __webpack_require__(94);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__DOF_glsl_js__ = __webpack_require__(200);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__edge_glsl_js__ = __webpack_require__(201);



























  __WEBPACK_IMPORTED_MODULE_0_claygl_src_Shader__["a" /* default */]['import'](__WEBPACK_IMPORTED_MODULE_13_claygl_src_shader_source_compositor_blur_glsl_js__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_0_claygl_src_Shader__["a" /* default */]['import'](__WEBPACK_IMPORTED_MODULE_14_claygl_src_shader_source_compositor_lut_glsl_js__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_0_claygl_src_Shader__["a" /* default */]['import'](__WEBPACK_IMPORTED_MODULE_15_claygl_src_shader_source_compositor_output_glsl_js__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_0_claygl_src_Shader__["a" /* default */]['import'](__WEBPACK_IMPORTED_MODULE_16_claygl_src_shader_source_compositor_bright_glsl_js__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_0_claygl_src_Shader__["a" /* default */]['import'](__WEBPACK_IMPORTED_MODULE_17_claygl_src_shader_source_compositor_downsample_glsl_js__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_0_claygl_src_Shader__["a" /* default */]['import'](__WEBPACK_IMPORTED_MODULE_18_claygl_src_shader_source_compositor_upsample_glsl_js__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_0_claygl_src_Shader__["a" /* default */]['import'](__WEBPACK_IMPORTED_MODULE_19_claygl_src_shader_source_compositor_hdr_glsl_js__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_0_claygl_src_Shader__["a" /* default */]['import'](__WEBPACK_IMPORTED_MODULE_20_claygl_src_shader_source_compositor_blend_glsl_js__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_0_claygl_src_Shader__["a" /* default */]['import'](__WEBPACK_IMPORTED_MODULE_21_claygl_src_shader_source_compositor_fxaa_glsl_js__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_0_claygl_src_Shader__["a" /* default */]['import'](__WEBPACK_IMPORTED_MODULE_22__DOF_glsl_js__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_0_claygl_src_Shader__["a" /* default */]['import'](__WEBPACK_IMPORTED_MODULE_23__edge_glsl_js__["a" /* default */]);


  var commonOutputs = {
      color : {
          parameters : {
              width : function (renderer) {
                  return renderer.getWidth();
              },
              height : function (renderer) {
                  return renderer.getHeight();
              }
          }
      }
  };

  var FINAL_NODES_CHAIN = ['composite', 'FXAA'];

  function EffectCompositor() {
      this._sourceTexture = new __WEBPACK_IMPORTED_MODULE_1_claygl_src_Texture2D__["a" /* default */]({
          type: __WEBPACK_IMPORTED_MODULE_2_claygl_src_Texture__["a" /* default */].HALF_FLOAT
      });
      this._depthTexture = new __WEBPACK_IMPORTED_MODULE_1_claygl_src_Texture2D__["a" /* default */]({
          format: __WEBPACK_IMPORTED_MODULE_2_claygl_src_Texture__["a" /* default */].DEPTH_COMPONENT,
          type: __WEBPACK_IMPORTED_MODULE_2_claygl_src_Texture__["a" /* default */].UNSIGNED_INT
      });

      this._framebuffer = new __WEBPACK_IMPORTED_MODULE_3_claygl_src_FrameBuffer__["a" /* default */]();
      this._framebuffer.attach(this._sourceTexture);
      this._framebuffer.attach(this._depthTexture, __WEBPACK_IMPORTED_MODULE_3_claygl_src_FrameBuffer__["a" /* default */].DEPTH_ATTACHMENT);

      this._normalPass = new __WEBPACK_IMPORTED_MODULE_9__NormalPass__["a" /* default */]();

      this._compositor = Object(__WEBPACK_IMPORTED_MODULE_4_claygl_src_compositor_createCompositor__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_12__composite_js__["a" /* default */]);

      var sourceNode = this._compositor.getNodeByName('source');
      sourceNode.texture = this._sourceTexture;
      var cocNode = this._compositor.getNodeByName('coc');

      this._sourceNode = sourceNode;
      this._cocNode = cocNode;
      this._compositeNode = this._compositor.getNodeByName('composite');
      this._fxaaNode = this._compositor.getNodeByName('FXAA');

      this._dofBlurNodes = ['dof_far_blur', 'dof_near_blur', 'dof_coc_blur'].map(function (name) {
          return this._compositor.getNodeByName(name);
      }, this);

      this._dofBlurKernel = 0;
      this._dofBlurKernelSize = new Float32Array(0);

      this._finalNodesChain = FINAL_NODES_CHAIN.map(function (name) {
          return this._compositor.getNodeByName(name);
      }, this);

      var gBufferObj = {
          normalTexture: this._normalPass.getNormalTexture(),
          depthTexture: this._normalPass.getDepthTexture()
      };
      this._ssaoPass = new __WEBPACK_IMPORTED_MODULE_5__SSAOPass__["a" /* default */](gBufferObj);
      this._ssrPass = new __WEBPACK_IMPORTED_MODULE_6__SSRPass__["a" /* default */](gBufferObj);
      this._edgePass = new __WEBPACK_IMPORTED_MODULE_10__EdgePass__["a" /* default */](gBufferObj);
  }

  EffectCompositor.prototype.resize = function (width, height, dpr) {
      dpr = dpr || 1;
      var width = width * dpr;
      var height = height * dpr;
      var sourceTexture = this._sourceTexture;
      var depthTexture = this._depthTexture;

      sourceTexture.width = width;
      sourceTexture.height = height;
      depthTexture.width = width;
      depthTexture.height = height;
  };

  EffectCompositor.prototype._ifRenderNormalPass = function () {
      return this._enableSSAO || this._enableEdge || this._enableSSR;
  };

  EffectCompositor.prototype._getPrevNode = function (node) {
      var idx = FINAL_NODES_CHAIN.indexOf(node.name) - 1;
      var prevNode = this._finalNodesChain[idx];
      while (prevNode && !this._compositor.getNodeByName(prevNode.name)) {
          idx -= 1;
          prevNode = this._finalNodesChain[idx];
      }
      return prevNode;
  };
  EffectCompositor.prototype._getNextNode = function (node) {
      var idx = FINAL_NODES_CHAIN.indexOf(node.name) + 1;
      var nextNode = this._finalNodesChain[idx];
      while (nextNode && !this._compositor.getNodeByName(nextNode.name)) {
          idx += 1;
          nextNode = this._finalNodesChain[idx];
      }
      return nextNode;
  };
  EffectCompositor.prototype._addChainNode = function (node) {
      var prevNode = this._getPrevNode(node);
      var nextNode = this._getNextNode(node);
      if (!prevNode) {
          return;
      }

      prevNode.outputs = commonOutputs;
      node.inputs.texture = prevNode.name;
      if (nextNode) {
          node.outputs = commonOutputs;
          nextNode.inputs.texture = node.name;
      }
      else {
          node.outputs = null;
      }
      this._compositor.addNode(node);
  };
  EffectCompositor.prototype._removeChainNode = function (node) {
      var prevNode = this._getPrevNode(node);
      var nextNode = this._getNextNode(node);
      if (!prevNode) {
          return;
      }

      if (nextNode) {
          prevNode.outputs = commonOutputs;
          nextNode.inputs.texture = prevNode.name;
      }
      else {
          prevNode.outputs = null;
      }
      this._compositor.removeNode(node);
  };
  /**
   * Update normal
   */
  EffectCompositor.prototype.updateNormal = function (renderer, scene, camera, frame) {
      if (this._ifRenderNormalPass()) {
          this._normalPass.update(renderer, scene, camera);
      }
  };

  /**
   * Render SSAO after render the scene, before compositing
   */
  EffectCompositor.prototype.updateSSAO = function (renderer, scene, camera, frame) {
      this._ssaoPass.update(renderer, camera, frame);
  };

  /**
   * Enable SSAO effect
   */
  EffectCompositor.prototype.enableSSAO = function () {
      this._enableSSAO = true;
  };

  /**
   * Disable SSAO effect
   */
  EffectCompositor.prototype.disableSSAO = function () {
      this._enableSSAO = false;
  };

  /**
   * Enable SSR effect
   */
  EffectCompositor.prototype.enableSSR = function () {
      this._enableSSR = true;
      // this._normalPass.enableTargetTexture3 = true;
  };
  /**
   * Disable SSR effect
   */
  EffectCompositor.prototype.disableSSR = function () {
      this._enableSSR = false;
      // this._normalPass.enableTargetTexture3 = false;
  };

  /**
   * Render SSAO after render the scene, before compositing
   */
  EffectCompositor.prototype.getSSAOTexture = function () {
      return this._ssaoPass.getTargetTexture();
  };

  /**
   * @return {clay.FrameBuffer}
   */
  EffectCompositor.prototype.getSourceFrameBuffer = function () {
      return this._framebuffer;
  };

  /**
   * @return {clay.Texture2D}
   */
  EffectCompositor.prototype.getSourceTexture = function () {
      return this._sourceTexture;
  };

  /**
   * Disable fxaa effect
   */
  EffectCompositor.prototype.disableFXAA = function () {
      this._removeChainNode(this._fxaaNode);
  };

  /**
   * Enable fxaa effect
   */
  EffectCompositor.prototype.enableFXAA = function () {
      this._addChainNode(this._fxaaNode);
  };

  /**
   * Enable bloom effect
   */
  EffectCompositor.prototype.enableBloom = function () {
      this._compositeNode.inputs.bloom = 'bloom_composite';
      this._compositor.dirty();
  };

  /**
   * Disable bloom effect
   */
  EffectCompositor.prototype.disableBloom = function () {
      this._compositeNode.inputs.bloom = null;
      this._compositor.dirty();
  };

  /**
   * Enable depth of field effect
   */
  EffectCompositor.prototype.enableDOF = function () {
      this._compositeNode.inputs.texture = 'dof_composite';
      this._compositor.dirty();
  };
  /**
   * Disable depth of field effect
   */
  EffectCompositor.prototype.disableDOF = function () {
      this._compositeNode.inputs.texture = 'source';
      this._compositor.dirty();
  };

  /**
   * Enable color correction
   */
  EffectCompositor.prototype.enableColorCorrection = function () {
      this._compositeNode.define('COLOR_CORRECTION');
      this._enableColorCorrection = true;
  };
  /**
   * Disable color correction
   */
  EffectCompositor.prototype.disableColorCorrection = function () {
      this._compositeNode.undefine('COLOR_CORRECTION');
      this._enableColorCorrection = false;
  };

  /**
   * Enable edge detection
   */
  EffectCompositor.prototype.enableEdge = function () {
      this._enableEdge = true;
  };

  /**
   * Disable edge detection
   */
  EffectCompositor.prototype.disableEdge = function () {
      this._enableEdge = false;
  };

  /**
   * Set bloom intensity
   * @param {number} value
   */
  EffectCompositor.prototype.setBloomIntensity = function (value) {
      this._compositeNode.setParameter('bloomIntensity', value);
  };

  EffectCompositor.prototype.setSSAOParameter = function (name, value) {
      switch (name) {
          case 'quality':
              // PENDING
              var kernelSize = ({
                  low: 6,
                  medium: 12,
                  high: 32,
                  ultra: 62
              })[value] || 12;
              this._ssaoPass.setParameter('kernelSize', kernelSize);
              break;
          case 'radius':
              this._ssaoPass.setParameter(name, value);
              this._ssaoPass.setParameter('bias', value / 200);
              break;
          case 'intensity':
              this._ssaoPass.setParameter(name, value);
              break;
          default:
              {
                  console.warn('Unkown SSAO parameter ' + name);
              }
      }
  };

  EffectCompositor.prototype.setDOFParameter = function (name, value) {
      switch (name) {
          case 'focalDistance':
          case 'focalRange':
          case 'fstop':
              this._cocNode.setParameter(name, value);
              break;
          case 'blurRadius':
              for (var i = 0; i < this._dofBlurNodes.length; i++) {
                  this._dofBlurNodes[i].setParameter('blurRadius', value);
              }
              break;
          case 'quality':
              var kernelSize = ({
                  low: 4, medium: 8, high: 16, ultra: 32
              })[value] || 8;
              this._dofBlurKernelSize = kernelSize;
              for (var i = 0; i < this._dofBlurNodes.length; i++) {
                  this._dofBlurNodes[i].pass.material.define('POISSON_KERNEL_SIZE', kernelSize);
              }
              this._dofBlurKernel = new Float32Array(kernelSize * 2);
              break;
          default:
              {
                  console.warn('Unkown DOF parameter ' + name);
              }
      }
  };

  EffectCompositor.prototype.setSSRParameter = function (name, value) {
      if (value == null) {
          return;
      }
      switch (name) {
          case 'quality':
              // PENDING
              var maxIteration = ({
                  low: 10,
                  medium: 15,
                  high: 30,
                  ultra: 80
              })[value] || 20;
              var pixelStride = ({
                  low: 32,
                  medium: 16,
                  high: 8,
                  ultra: 4
              })[value] || 16;
              this._ssrPass.setParameter('maxIteration', maxIteration);
              this._ssrPass.setParameter('pixelStride', pixelStride);
              break;
          case 'maxRoughness':
              this._ssrPass.setParameter('minGlossiness', Math.max(Math.min(1.0 - value, 1.0), 0.0));
              break;
          case 'physical':
              this.setPhysicallyCorrectSSR(value);
              break;
          default:
              console.warn('Unkown SSR parameter ' + name);
      }
  };

  EffectCompositor.prototype.setPhysicallyCorrectSSR = function (physical) {
      this._ssrPass.setPhysicallyCorrect(physical);
  };

  /**
   * Set color of edge
   */
  EffectCompositor.prototype.setEdgeColor = function (value) {
      var color = __WEBPACK_IMPORTED_MODULE_8__util_graphicGL__["a" /* default */].parseColor(value);
      this._edgePass.setParameter('edgeColor', color);
  };

  EffectCompositor.prototype.setExposure = function (value) {
      this._compositeNode.setParameter('exposure', Math.pow(2, value));
  };

  EffectCompositor.prototype.setColorLookupTexture = function (image, api) {
      this._compositeNode.pass.material.setTextureImage('lut', this._enableColorCorrection ? image : 'none', api, {
          minFilter: __WEBPACK_IMPORTED_MODULE_8__util_graphicGL__["a" /* default */].Texture.NEAREST,
          magFilter: __WEBPACK_IMPORTED_MODULE_8__util_graphicGL__["a" /* default */].Texture.NEAREST,
          flipY: false
      });
  };
  EffectCompositor.prototype.setColorCorrection = function (type, value) {
      this._compositeNode.setParameter(type, value);
  };

  EffectCompositor.prototype.isSSREnabled = function () {
      return this._enableSSR;
  };

  EffectCompositor.prototype.composite = function (renderer, scene, camera, framebuffer, frame) {

      var sourceTexture = this._sourceTexture;
      var targetTexture = sourceTexture;
      if (this._enableEdge) {
          this._edgePass.update(renderer, camera, sourceTexture, frame);
          sourceTexture = targetTexture = this._edgePass.getTargetTexture();
      }
      if (this._enableSSR) {
          this._ssrPass.update(renderer, camera, sourceTexture, frame);
          targetTexture = this._ssrPass.getTargetTexture();

          this._ssrPass.setSSAOTexture(
              this._enableSSAO ? this._ssaoPass.getTargetTexture() : null
          );
          // var lights = scene.getLights();
          // for (var i = 0; i < lights.length; i++) {
          //     if (lights[i].cubemap) {
          //         this._ssrPass.setAmbientCubemap(lights[i].cubemap, lights[i].intensity);
          //     }
          // }
      }
      this._sourceNode.texture = targetTexture;

      this._cocNode.setParameter('depth', this._depthTexture);

      var blurKernel = this._dofBlurKernel;
      var blurKernelSize = this._dofBlurKernelSize;
      var frameAll = Math.floor(__WEBPACK_IMPORTED_MODULE_7__poissonKernel__["a" /* default */].length / 2 / blurKernelSize);
      var kernelOffset = frame % frameAll;

      for (var i = 0; i < blurKernelSize * 2; i++) {
          blurKernel[i] = __WEBPACK_IMPORTED_MODULE_7__poissonKernel__["a" /* default */][i + kernelOffset * blurKernelSize * 2];
      }

      for (var i = 0; i < this._dofBlurNodes.length; i++) {
          this._dofBlurNodes[i].setParameter('percent', frame / 30.0);
          this._dofBlurNodes[i].setParameter('poissonKernel', blurKernel);
      }

      this._cocNode.setParameter('zNear', camera.near);
      this._cocNode.setParameter('zFar', camera.far);

      this._compositor.render(renderer, framebuffer);
  };

  EffectCompositor.prototype.dispose = function (renderer) {
      this._sourceTexture.dispose(renderer);
      this._depthTexture.dispose(renderer);
      this._framebuffer.dispose(renderer);
      this._compositor.dispose(renderer);

      this._normalPass.dispose(renderer);
      this._ssaoPass.dispose(renderer);
  };

  /* harmony default export */ __webpack_exports__["a"] = (EffectCompositor);

  /***/ }),
  /* 179 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__createCompositor__ = __webpack_require__(180);
  // DEPRECATED

  /* harmony default export */ __webpack_exports__["a"] = (__WEBPACK_IMPORTED_MODULE_0__createCompositor__["a" /* default */]);

  /***/ }),
  /* 180 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_util__ = __webpack_require__(23);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__compositor_Compositor__ = __webpack_require__(181);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__compositor_SceneNode__ = __webpack_require__(183);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__compositor_TextureNode__ = __webpack_require__(184);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__compositor_FilterNode__ = __webpack_require__(185);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Shader__ = __webpack_require__(9);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Texture__ = __webpack_require__(4);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__Texture2D__ = __webpack_require__(5);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__TextureCube__ = __webpack_require__(27);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__shader_registerBuiltinCompositor__ = __webpack_require__(186);












  Object(__WEBPACK_IMPORTED_MODULE_9__shader_registerBuiltinCompositor__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_5__Shader__["a" /* default */]);

  var shaderSourceReg = /^#source\((.*?)\)/;

  /**
   * @name clay.createCompositor
   * @function
   * @param {Object} json
   * @param {Object} [opts]
   * @return {clay.compositor.Compositor}
   */
  function createCompositor(json, opts) {
      var compositor = new __WEBPACK_IMPORTED_MODULE_1__compositor_Compositor__["a" /* default */]();
      opts = opts || {};

      var lib = {
          textures: {},
          parameters: {}
      };
      var afterLoad = function(shaderLib, textureLib) {
          for (var i = 0; i < json.nodes.length; i++) {
              var nodeInfo = json.nodes[i];
              var node = createNode(nodeInfo, lib, opts);
              if (node) {
                  compositor.addNode(node);
              }
          }
      };

      for (var name in json.parameters) {
          var paramInfo = json.parameters[name];
          lib.parameters[name] = convertParameter(paramInfo);
      }
      // TODO load texture asynchronous
      loadTextures(json, lib, opts, function(textureLib) {
          lib.textures = textureLib;
          afterLoad();
      });

      return compositor;
  }

  function createNode(nodeInfo, lib, opts) {
      var type = nodeInfo.type || 'filter';
      var shaderSource;
      var inputs;
      var outputs;

      if (type === 'filter') {
          var shaderExp = nodeInfo.shader.trim();
          var res = shaderSourceReg.exec(shaderExp);
          if (res) {
              shaderSource = __WEBPACK_IMPORTED_MODULE_5__Shader__["a" /* default */].source(res[1].trim());
          }
          else if (shaderExp.charAt(0) === '#') {
              shaderSource = lib.shaders[shaderExp.substr(1)];
          }
          if (!shaderSource) {
              shaderSource = shaderExp;
          }
          if (!shaderSource) {
              return;
          }
      }

      if (nodeInfo.inputs) {
          inputs = {};
          for (var name in nodeInfo.inputs) {
              if (typeof nodeInfo.inputs[name] === 'string') {
                  inputs[name] = nodeInfo.inputs[name];
              }
              else {
                  inputs[name] = {
                      node: nodeInfo.inputs[name].node,
                      pin: nodeInfo.inputs[name].pin
                  };
              }
          }
      }
      if (nodeInfo.outputs) {
          outputs = {};
          for (var name in nodeInfo.outputs) {
              var outputInfo = nodeInfo.outputs[name];
              outputs[name] = {};
              if (outputInfo.attachment != null) {
                  outputs[name].attachment = outputInfo.attachment;
              }
              if (outputInfo.keepLastFrame != null) {
                  outputs[name].keepLastFrame = outputInfo.keepLastFrame;
              }
              if (outputInfo.outputLastFrame != null) {
                  outputs[name].outputLastFrame = outputInfo.outputLastFrame;
              }
              if (outputInfo.parameters) {
                  outputs[name].parameters = convertParameter(outputInfo.parameters);
              }
          }
      }
      var node;
      if (type === 'scene') {
          node = new __WEBPACK_IMPORTED_MODULE_2__compositor_SceneNode__["a" /* default */]({
              name: nodeInfo.name,
              scene: opts.scene,
              camera: opts.camera,
              outputs: outputs
          });
      }
      else if (type === 'texture') {
          node = new __WEBPACK_IMPORTED_MODULE_3__compositor_TextureNode__["a" /* default */]({
              name: nodeInfo.name,
              outputs: outputs
          });
      }
      // Default is filter
      else {
          node = new __WEBPACK_IMPORTED_MODULE_4__compositor_FilterNode__["a" /* default */]({
              name: nodeInfo.name,
              shader: shaderSource,
              inputs: inputs,
              outputs: outputs
          });
      }
      if (node) {
          if (nodeInfo.parameters) {
              for (var name in nodeInfo.parameters) {
                  var val = nodeInfo.parameters[name];
                  if (typeof val === 'string') {
                      val = val.trim();
                      if (val.charAt(0) === '#') {
                          val = lib.textures[val.substr(1)];
                      }
                      else {
                          node.on(
                              'beforerender', createSizeSetHandler(
                                  name, tryConvertExpr(val)
                              )
                          );
                      }
                  }
                  else if (typeof val === 'function') {
                      node.on('beforerender', val);
                  }
                  node.setParameter(name, val);
              }
          }
          if (nodeInfo.defines && node.pass) {
              for (var name in nodeInfo.defines) {
                  var val = nodeInfo.defines[name];
                  node.pass.material.define('fragment', name, val);
              }
          }
      }
      return node;
  }

  function defaultWidthFunc(width, height) {
      return width;
  }
  function defaultHeightFunc(width, height) {
      return height;
  }

  function convertParameter(paramInfo) {
      var param = {};
      if (!paramInfo) {
          return param;
      }
      ['type', 'minFilter', 'magFilter', 'wrapS', 'wrapT', 'flipY', 'useMipmap']
          .forEach(function(name) {
              var val = paramInfo[name];
              if (val != null) {
                  // Convert string to enum
                  if (typeof val === 'string') {
                      val = __WEBPACK_IMPORTED_MODULE_6__Texture__["a" /* default */][val];
                  }
                  param[name] = val;
              }
          });

      var sizeScale = paramInfo.scale || 1;
      ['width', 'height']
          .forEach(function(name) {
              if (paramInfo[name] != null) {
                  var val = paramInfo[name];
                  if (typeof val === 'string') {
                      val = val.trim();
                      param[name] = createSizeParser(
                          name, tryConvertExpr(val), sizeScale
                      );
                  }
                  else {
                      param[name] = val;
                  }
              }
          });
      if (!param.width) {
          param.width = defaultWidthFunc;
      }
      if (!param.height) {
          param.height = defaultHeightFunc;
      }

      if (paramInfo.useMipmap != null) {
          param.useMipmap = paramInfo.useMipmap;
      }
      return param;
  }

  function loadTextures(json, lib, opts, callback) {
      if (!json.textures) {
          callback({});
          return;
      }
      var textures = {};
      var loading = 0;

      var cbd = false;
      var textureRootPath = opts.textureRootPath;
      __WEBPACK_IMPORTED_MODULE_0__core_util__["a" /* default */].each(json.textures, function(textureInfo, name) {
          var texture;
          var path = textureInfo.path;
          var parameters = convertParameter(textureInfo.parameters);
          if (Array.isArray(path) && path.length === 6) {
              if (textureRootPath) {
                  path = path.map(function(item) {
                      return __WEBPACK_IMPORTED_MODULE_0__core_util__["a" /* default */].relative2absolute(item, textureRootPath);
                  });
              }
              texture = new __WEBPACK_IMPORTED_MODULE_8__TextureCube__["a" /* default */](parameters);
          }
          else if(typeof path === 'string') {
              if (textureRootPath) {
                  path = __WEBPACK_IMPORTED_MODULE_0__core_util__["a" /* default */].relative2absolute(path, textureRootPath);
              }
              texture = new __WEBPACK_IMPORTED_MODULE_7__Texture2D__["a" /* default */](parameters);
          }
          else {
              return;
          }

          texture.load(path);
          loading++;
          texture.once('success', function() {
              textures[name] = texture;
              loading--;
              if (loading === 0) {
                  callback(textures);
                  cbd = true;
              }
          });
      });

      if (loading === 0 && !cbd) {
          callback(textures);
      }
  }

  function createSizeSetHandler(name, exprFunc) {
      return function (renderer) {
          // PENDING viewport size or window size
          var dpr = renderer.getDevicePixelRatio();
          // PENDING If multiply dpr ?
          var width = renderer.getWidth();
          var height = renderer.getHeight();
          var result = exprFunc(width, height, dpr);
          this.setParameter(name, result);
      };
  }

  function createSizeParser(name, exprFunc, scale) {
      scale = scale || 1;
      return function (renderer) {
          var dpr = renderer.getDevicePixelRatio();
          var width = renderer.getWidth() * scale;
          var height = renderer.getHeight() * scale;
          return exprFunc(width, height, dpr);
      };
  }

  function tryConvertExpr(string) {
      // PENDING
      var exprRes = /^expr\((.*)\)$/.exec(string);
      if (exprRes) {
          try {
              var func = new Function('width', 'height', 'dpr', 'return ' + exprRes[1]);
              // Try run t
              func(1, 1);

              return func;
          }
          catch (e) {
              throw new Error('Invalid expression.');
          }
      }
  }

  /* harmony default export */ __webpack_exports__["a"] = (createCompositor);


  /***/ }),
  /* 181 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Graph__ = __webpack_require__(182);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__TexturePool__ = __webpack_require__(85);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__FrameBuffer__ = __webpack_require__(10);




  /**
   * Compositor provide graph based post processing
   *
   * @constructor clay.compositor.Compositor
   * @extends clay.compositor.Graph
   *
   */
  var Compositor = __WEBPACK_IMPORTED_MODULE_0__Graph__["a" /* default */].extend(function() {
      return {
          // Output node
          _outputs: [],

          _texturePool: new __WEBPACK_IMPORTED_MODULE_1__TexturePool__["a" /* default */](),

          _frameBuffer: new __WEBPACK_IMPORTED_MODULE_2__FrameBuffer__["a" /* default */]({
              depthBuffer: false
          })
      };
  },
  /** @lends clay.compositor.Compositor.prototype */
  {
      addNode: function(node) {
          __WEBPACK_IMPORTED_MODULE_0__Graph__["a" /* default */].prototype.addNode.call(this, node);
          node._compositor = this;
      },
      /**
       * @param  {clay.Renderer} renderer
       */
      render: function(renderer, frameBuffer) {
          if (this._dirty) {
              this.update();
              this._dirty = false;

              this._outputs.length = 0;
              for (var i = 0; i < this.nodes.length; i++) {
                  if (!this.nodes[i].outputs) {
                      this._outputs.push(this.nodes[i]);
                  }
              }
          }

          for (var i = 0; i < this.nodes.length; i++) {
              // Update the reference number of each output texture
              this.nodes[i].beforeFrame();
          }

          for (var i = 0; i < this._outputs.length; i++) {
              this._outputs[i].updateReference();
          }

          for (var i = 0; i < this._outputs.length; i++) {
              this._outputs[i].render(renderer, frameBuffer);
          }

          for (var i = 0; i < this.nodes.length; i++) {
              // Clear up
              this.nodes[i].afterFrame();
          }
      },

      allocateTexture: function (parameters) {
          return this._texturePool.get(parameters);
      },

      releaseTexture: function (parameters) {
          this._texturePool.put(parameters);
      },

      getFrameBuffer: function () {
          return this._frameBuffer;
      },

      /**
       * Dispose compositor
       * @param {clay.Renderer} renderer
       */
      dispose: function (renderer) {
          this._texturePool.clear(renderer);
      }
  });

  /* harmony default export */ __webpack_exports__["a"] = (Compositor);


  /***/ }),
  /* 182 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Base__ = __webpack_require__(8);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__CompositorNode__ = __webpack_require__(48);



  /**
   * @constructor clay.compositor.Graph
   * @extends clay.core.Base
   */
  var Graph = __WEBPACK_IMPORTED_MODULE_0__core_Base__["a" /* default */].extend(function () {
      return /** @lends clay.compositor.Graph# */ {
          /**
           * @type {Array.<clay.compositor.CompositorNode>}
           */
          nodes: []
      };
  },
  /** @lends clay.compositor.Graph.prototype */
  {

      /**
       * Mark to update
       */
      dirty: function () {
          this._dirty = true;
      },
      /**
       * @param {clay.compositor.CompositorNode} node
       */
      addNode: function (node) {

          if (this.nodes.indexOf(node) >= 0) {
              return;
          }

          this.nodes.push(node);

          this._dirty = true;
      },
      /**
       * @param  {clay.compositor.CompositorNode|string} node
       */
      removeNode: function (node) {
          if (typeof node === 'string') {
              node = this.getNodeByName(node);
          }
          var idx = this.nodes.indexOf(node);
          if (idx >= 0) {
              this.nodes.splice(idx, 1);
              this._dirty = true;
          }
      },
      /**
       * @param {string} name
       * @return {clay.compositor.CompositorNode}
       */
      getNodeByName: function (name) {
          for (var i = 0; i < this.nodes.length; i++) {
              if (this.nodes[i].name === name) {
                  return this.nodes[i];
              }
          }
      },
      /**
       * Update links of graph
       */
      update: function () {
          for (var i = 0; i < this.nodes.length; i++) {
              this.nodes[i].clear();
          }
          // Traverse all the nodes and build the graph
          for (var i = 0; i < this.nodes.length; i++) {
              var node = this.nodes[i];

              if (!node.inputs) {
                  continue;
              }
              for (var inputName in node.inputs) {
                  if (!node.inputs[inputName]) {
                      continue;
                  }
                  if (node.pass && !node.pass.material.isUniformEnabled(inputName)) {
                      console.warn('Pin '  + node.name + '.' + inputName + ' not used.');
                      continue;
                  }
                  var fromPinInfo = node.inputs[inputName];

                  var fromPin = this.findPin(fromPinInfo);
                  if (fromPin) {
                      node.link(inputName, fromPin.node, fromPin.pin);
                  }
                  else {
                      if (typeof fromPinInfo === 'string') {
                          console.warn('Node ' + fromPinInfo + ' not exist');
                      }
                      else {
                          console.warn('Pin of ' + fromPinInfo.node + '.' + fromPinInfo.pin + ' not exist');
                      }
                  }
              }
          }
      },

      findPin: function (input) {
          var node;
          // Try to take input as a directly a node
          if (typeof input === 'string' || input instanceof __WEBPACK_IMPORTED_MODULE_1__CompositorNode__["a" /* default */]) {
              input = {
                  node: input
              };
          }

          if (typeof input.node === 'string') {
              for (var i = 0; i < this.nodes.length; i++) {
                  var tmp = this.nodes[i];
                  if (tmp.name === input.node) {
                      node = tmp;
                  }
              }
          }
          else {
              node = input.node;
          }
          if (node) {
              var inputPin = input.pin;
              if (!inputPin) {
                  // Use first pin defaultly
                  if (node.outputs) {
                      inputPin = Object.keys(node.outputs)[0];
                  }
              }
              if (node.outputs[inputPin]) {
                  return {
                      node: node,
                      pin: inputPin
                  };
              }
          }
      }
  });

  /* harmony default export */ __webpack_exports__["a"] = (Graph);


  /***/ }),
  /* 183 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__CompositorNode__ = __webpack_require__(48);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_glenum__ = __webpack_require__(11);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__FrameBuffer__ = __webpack_require__(10);




  /**
   * @constructor clay.compositor.SceneNode
   * @extends clay.compositor.CompositorNode
   */
  var SceneNode = __WEBPACK_IMPORTED_MODULE_0__CompositorNode__["a" /* default */].extend(
  /** @lends clay.compositor.SceneNode# */
  {
      name: 'scene',
      /**
       * @type {clay.Scene}
       */
      scene: null,
      /**
       * @type {clay.Camera}
       */
      camera: null,
      /**
       * @type {boolean}
       */
      autoUpdateScene: true,
      /**
       * @type {boolean}
       */
      preZ: false

  }, function() {
      this.frameBuffer = new __WEBPACK_IMPORTED_MODULE_2__FrameBuffer__["a" /* default */]();
  }, {
      render: function(renderer) {

          this._rendering = true;
          var _gl = renderer.gl;

          this.trigger('beforerender');

          var renderInfo;

          if (!this.outputs) {

              renderInfo = renderer.render(this.scene, this.camera, !this.autoUpdateScene, this.preZ);

          }
          else {

              var frameBuffer = this.frameBuffer;
              for (var name in this.outputs) {
                  var parameters = this.updateParameter(name, renderer);
                  var outputInfo = this.outputs[name];
                  var texture = this._compositor.allocateTexture(parameters);
                  this._outputTextures[name] = texture;

                  var attachment = outputInfo.attachment || _gl.COLOR_ATTACHMENT0;
                  if (typeof(attachment) == 'string') {
                      attachment = _gl[attachment];
                  }
                  frameBuffer.attach(texture, attachment);
              }
              frameBuffer.bind(renderer);

              // MRT Support in chrome
              // https://www.khronos.org/registry/webgl/sdk/tests/conformance/extensions/ext-draw-buffers.html
              var ext = renderer.getGLExtension('EXT_draw_buffers');
              if (ext) {
                  var bufs = [];
                  for (var attachment in this.outputs) {
                      attachment = parseInt(attachment);
                      if (attachment >= _gl.COLOR_ATTACHMENT0 && attachment <= _gl.COLOR_ATTACHMENT0 + 8) {
                          bufs.push(attachment);
                      }
                  }
                  ext.drawBuffersEXT(bufs);
              }

              // Always clear
              // PENDING
              renderer.saveClear();
              renderer.clearBit = __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].DEPTH_BUFFER_BIT | __WEBPACK_IMPORTED_MODULE_1__core_glenum__["a" /* default */].COLOR_BUFFER_BIT;
              renderInfo = renderer.render(this.scene, this.camera, !this.autoUpdateScene, this.preZ);
              renderer.restoreClear();

              frameBuffer.unbind(renderer);
          }

          this.trigger('afterrender', renderInfo);

          this._rendering = false;
          this._rendered = true;
      }
  });

  /* harmony default export */ __webpack_exports__["a"] = (SceneNode);


  /***/ }),
  /* 184 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__CompositorNode__ = __webpack_require__(48);


  /**
   * @constructor clay.compositor.TextureNode
   * @extends clay.compositor.CompositorNode
   */
  var TextureNode = __WEBPACK_IMPORTED_MODULE_0__CompositorNode__["a" /* default */].extend(function() {
      return /** @lends clay.compositor.TextureNode# */ {
          /**
           * @type {clay.Texture2D}
           */
          texture: null,

          // Texture node must have output without parameters
          outputs: {
              color: {}
          }
      };
  }, function () {
  }, {

      getOutput: function (renderer, name) {
          return this.texture;
      },

      // Do nothing
      beforeFrame: function () {},
      afterFrame: function () {}
  });

  /* harmony default export */ __webpack_exports__["a"] = (TextureNode);


  /***/ }),
  /* 185 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Pass__ = __webpack_require__(15);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__CompositorNode__ = __webpack_require__(48);
  // TODO Shader library



  // TODO curlnoise demo wrong

  // PENDING
  // Use topological sort ?

  /**
   * Filter node
   *
   * @constructor clay.compositor.FilterNode
   * @extends clay.compositor.CompositorNode
   *
   * @example
      var node = new clay.compositor.FilterNode({
          name: 'fxaa',
          shader: clay.Shader.source('clay.compositor.fxaa'),
          inputs: {
              texture: {
                      node: 'scene',
                      pin: 'color'
              }
          },
          // Multiple outputs is preserved for MRT support in WebGL2.0
          outputs: {
              color: {
                  attachment: clay.FrameBuffer.COLOR_ATTACHMENT0
                  parameters: {
                      format: clay.Texture.RGBA,
                      width: 512,
                      height: 512
                  },
                  // Node will keep the RTT rendered in last frame
                  keepLastFrame: true,
                  // Force the node output the RTT rendered in last frame
                  outputLastFrame: true
              }
          }
      });
      *
      */
  var FilterNode = __WEBPACK_IMPORTED_MODULE_1__CompositorNode__["a" /* default */].extend(function () {
      return /** @lends clay.compositor.FilterNode# */ {
          /**
           * @type {string}
           */
          name: '',

          /**
           * @type {Object}
           */
          inputs: {},

          /**
           * @type {Object}
           */
          outputs: null,

          /**
           * @type {string}
           */
          shader: '',

          /**
           * Input links, will be updated by the graph
           * @example:
           *     inputName: {
           *         node: someNode,
           *         pin: 'xxxx'
           *     }
           * @type {Object}
           */
          inputLinks: {},

          /**
           * Output links, will be updated by the graph
           * @example:
           *     outputName: {
           *         node: someNode,
           *         pin: 'xxxx'
           *     }
           * @type {Object}
           */
          outputLinks: {},

          /**
           * @type {clay.compositor.Pass}
           */
          pass: null,

          // Save the output texture of previous frame
          // Will be used when there exist a circular reference
          _prevOutputTextures: {},
          _outputTextures: {},

          // Example: { name: 2 }
          _outputReferences: {},

          _rendering: false,
          // If rendered in this frame
          _rendered: false,

          _compositor: null
      };
  }, function () {

      var pass = new __WEBPACK_IMPORTED_MODULE_0__Pass__["a" /* default */]({
          fragment: this.shader
      });
      this.pass = pass;
  },
  /** @lends clay.compositor.FilterNode.prototype */
  {
      /**
       * @param  {clay.Renderer} renderer
       */
      render: function (renderer, frameBuffer) {
          this.trigger('beforerender', renderer);

          this._rendering = true;

          var _gl = renderer.gl;

          for (var inputName in this.inputLinks) {
              var link = this.inputLinks[inputName];
              var inputTexture = link.node.getOutput(renderer, link.pin);
              this.pass.setUniform(inputName, inputTexture);
          }
          // Output
          if (!this.outputs) {
              this.pass.outputs = null;

              this._compositor.getFrameBuffer().unbind(renderer);

              this.pass.render(renderer, frameBuffer);
          }
          else {
              this.pass.outputs = {};

              var attachedTextures = {};
              for (var name in this.outputs) {
                  var parameters = this.updateParameter(name, renderer);
                  if (isNaN(parameters.width)) {
                      this.updateParameter(name, renderer);
                  }
                  var outputInfo = this.outputs[name];
                  var texture = this._compositor.allocateTexture(parameters);
                  this._outputTextures[name] = texture;
                  var attachment = outputInfo.attachment || _gl.COLOR_ATTACHMENT0;
                  if (typeof(attachment) === 'string') {
                      attachment = _gl[attachment];
                  }
                  attachedTextures[attachment] = texture;
              }
              this._compositor.getFrameBuffer().bind(renderer);

              for (var attachment in attachedTextures) {
                  // FIXME attachment changes in different nodes
                  this._compositor.getFrameBuffer().attach(
                      attachedTextures[attachment], attachment
                  );
              }

              this.pass.render(renderer);

              // Because the data of texture is changed over time,
              // Here update the mipmaps of texture each time after rendered;
              this._compositor.getFrameBuffer().updateMipmap(renderer);
          }

          for (var inputName in this.inputLinks) {
              var link = this.inputLinks[inputName];
              link.node.removeReference(link.pin);
          }

          this._rendering = false;
          this._rendered = true;

          this.trigger('afterrender', renderer);
      },

      // TODO Remove parameter function callback
      updateParameter: function (outputName, renderer) {
          var outputInfo = this.outputs[outputName];
          var parameters = outputInfo.parameters;
          var parametersCopy = outputInfo._parametersCopy;
          if (!parametersCopy) {
              parametersCopy = outputInfo._parametersCopy = {};
          }
          if (parameters) {
              for (var key in parameters) {
                  if (key !== 'width' && key !== 'height') {
                      parametersCopy[key] = parameters[key];
                  }
              }
          }
          var width, height;
          if (typeof parameters.width === 'function') {
              width = parameters.width.call(this, renderer);
          }
          else {
              width = parameters.width;
          }
          if (typeof parameters.height === 'function') {
              height = parameters.height.call(this, renderer);
          }
          else {
              height = parameters.height;
          }
          width = Math.ceil(width);
          height = Math.ceil(height);
          if (
              parametersCopy.width !== width
              || parametersCopy.height !== height
          ) {
              if (this._outputTextures[outputName]) {
                  this._outputTextures[outputName].dispose(renderer);
              }
          }
          parametersCopy.width = width;
          parametersCopy.height = height;

          return parametersCopy;
      },

      /**
       * Set parameter
       * @param {string} name
       * @param {} value
       */
      setParameter: function (name, value) {
          this.pass.setUniform(name, value);
      },
      /**
       * Get parameter value
       * @param  {string} name
       * @return {}
       */
      getParameter: function (name) {
          return this.pass.getUniform(name);
      },
      /**
       * Set parameters
       * @param {Object} obj
       */
      setParameters: function (obj) {
          for (var name in obj) {
              this.setParameter(name, obj[name]);
          }
      },
      // /**
      //  * Set shader code
      //  * @param {string} shaderStr
      //  */
      // setShader: function (shaderStr) {
      //     var material = this.pass.material;
      //     material.shader.setFragment(shaderStr);
      //     material.attachShader(material.shader, true);
      // },
      /**
       * Proxy of pass.material.define('fragment', xxx);
       * @param  {string} symbol
       * @param  {number} [val]
       */
      define: function (symbol, val) {
          this.pass.material.define('fragment', symbol, val);
      },

      /**
       * Proxy of pass.material.undefine('fragment', xxx)
       * @param  {string} symbol
       */
      undefine: function (symbol) {
          this.pass.material.undefine('fragment', symbol);
      },

      removeReference: function (outputName) {
          this._outputReferences[outputName]--;
          if (this._outputReferences[outputName] === 0) {
              var outputInfo = this.outputs[outputName];
              if (outputInfo.keepLastFrame) {
                  if (this._prevOutputTextures[outputName]) {
                      this._compositor.releaseTexture(this._prevOutputTextures[outputName]);
                  }
                  this._prevOutputTextures[outputName] = this._outputTextures[outputName];
              }
              else {
                  // Output of this node have alreay been used by all other nodes
                  // Put the texture back to the pool.
                  this._compositor.releaseTexture(this._outputTextures[outputName]);
              }
          }
      },

      clear: function () {
          __WEBPACK_IMPORTED_MODULE_1__CompositorNode__["a" /* default */].prototype.clear.call(this);

          // Default disable all texture
          this.pass.material.disableTexturesAll();
      }
  });

  /* harmony default export */ __webpack_exports__["a"] = (FilterNode);


  /***/ }),
  /* 186 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony export (immutable) */ __webpack_exports__["a"] = register;
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__source_compositor_coloradjust_glsl_js__ = __webpack_require__(187);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__source_compositor_blur_glsl_js__ = __webpack_require__(86);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__source_compositor_lum_glsl_js__ = __webpack_require__(188);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__source_compositor_lut_glsl_js__ = __webpack_require__(87);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__source_compositor_vignette_glsl_js__ = __webpack_require__(189);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__source_compositor_output_glsl_js__ = __webpack_require__(88);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__source_compositor_bright_glsl_js__ = __webpack_require__(89);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__source_compositor_downsample_glsl_js__ = __webpack_require__(90);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__source_compositor_upsample_glsl_js__ = __webpack_require__(91);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__source_compositor_hdr_glsl_js__ = __webpack_require__(92);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__source_compositor_lensflare_glsl_js__ = __webpack_require__(190);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__source_compositor_blend_glsl_js__ = __webpack_require__(93);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__source_compositor_fxaa_glsl_js__ = __webpack_require__(94);













  // import fxaa3Essl from './source/compositor/fxaa3.glsl.js';

  // TODO Must export a module and be used in the other modules. Or it will be tree shaked
  function register(Shader) {
      // Some build in shaders
      Shader['import'](__WEBPACK_IMPORTED_MODULE_0__source_compositor_coloradjust_glsl_js__["a" /* default */]);
      Shader['import'](__WEBPACK_IMPORTED_MODULE_1__source_compositor_blur_glsl_js__["a" /* default */]);
      Shader['import'](__WEBPACK_IMPORTED_MODULE_2__source_compositor_lum_glsl_js__["a" /* default */]);
      Shader['import'](__WEBPACK_IMPORTED_MODULE_3__source_compositor_lut_glsl_js__["a" /* default */]);
      Shader['import'](__WEBPACK_IMPORTED_MODULE_4__source_compositor_vignette_glsl_js__["a" /* default */]);
      Shader['import'](__WEBPACK_IMPORTED_MODULE_5__source_compositor_output_glsl_js__["a" /* default */]);
      Shader['import'](__WEBPACK_IMPORTED_MODULE_6__source_compositor_bright_glsl_js__["a" /* default */]);
      Shader['import'](__WEBPACK_IMPORTED_MODULE_7__source_compositor_downsample_glsl_js__["a" /* default */]);
      Shader['import'](__WEBPACK_IMPORTED_MODULE_8__source_compositor_upsample_glsl_js__["a" /* default */]);
      Shader['import'](__WEBPACK_IMPORTED_MODULE_9__source_compositor_hdr_glsl_js__["a" /* default */]);
      Shader['import'](__WEBPACK_IMPORTED_MODULE_10__source_compositor_lensflare_glsl_js__["a" /* default */]);
      Shader['import'](__WEBPACK_IMPORTED_MODULE_11__source_compositor_blend_glsl_js__["a" /* default */]);

      Shader['import'](__WEBPACK_IMPORTED_MODULE_12__source_compositor_fxaa_glsl_js__["a" /* default */]);

  }

  /***/ }),
  /* 187 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("@export clay.compositor.coloradjust\nvarying vec2 v_Texcoord;\nuniform sampler2D texture;\nuniform float brightness : 0.0;\nuniform float contrast : 1.0;\nuniform float exposure : 0.0;\nuniform float gamma : 1.0;\nuniform float saturation : 1.0;\nconst vec3 w = vec3(0.2125, 0.7154, 0.0721);\nvoid main()\n{\n vec4 tex = texture2D( texture, v_Texcoord);\n vec3 color = clamp(tex.rgb + vec3(brightness), 0.0, 1.0);\n color = clamp( (color-vec3(0.5))*contrast+vec3(0.5), 0.0, 1.0);\n color = clamp( color * pow(2.0, exposure), 0.0, 1.0);\n color = clamp( pow(color, vec3(gamma)), 0.0, 1.0);\n float luminance = dot( color, w );\n color = mix(vec3(luminance), color, saturation);\n gl_FragColor = vec4(color, tex.a);\n}\n@end\n@export clay.compositor.brightness\nvarying vec2 v_Texcoord;\nuniform sampler2D texture;\nuniform float brightness : 0.0;\nvoid main()\n{\n vec4 tex = texture2D( texture, v_Texcoord);\n vec3 color = tex.rgb + vec3(brightness);\n gl_FragColor = vec4(color, tex.a);\n}\n@end\n@export clay.compositor.contrast\nvarying vec2 v_Texcoord;\nuniform sampler2D texture;\nuniform float contrast : 1.0;\nvoid main()\n{\n vec4 tex = texture2D( texture, v_Texcoord);\n vec3 color = (tex.rgb-vec3(0.5))*contrast+vec3(0.5);\n gl_FragColor = vec4(color, tex.a);\n}\n@end\n@export clay.compositor.exposure\nvarying vec2 v_Texcoord;\nuniform sampler2D texture;\nuniform float exposure : 0.0;\nvoid main()\n{\n vec4 tex = texture2D(texture, v_Texcoord);\n vec3 color = tex.rgb * pow(2.0, exposure);\n gl_FragColor = vec4(color, tex.a);\n}\n@end\n@export clay.compositor.gamma\nvarying vec2 v_Texcoord;\nuniform sampler2D texture;\nuniform float gamma : 1.0;\nvoid main()\n{\n vec4 tex = texture2D(texture, v_Texcoord);\n vec3 color = pow(tex.rgb, vec3(gamma));\n gl_FragColor = vec4(color, tex.a);\n}\n@end\n@export clay.compositor.saturation\nvarying vec2 v_Texcoord;\nuniform sampler2D texture;\nuniform float saturation : 1.0;\nconst vec3 w = vec3(0.2125, 0.7154, 0.0721);\nvoid main()\n{\n vec4 tex = texture2D(texture, v_Texcoord);\n vec3 color = tex.rgb;\n float luminance = dot(color, w);\n color = mix(vec3(luminance), color, saturation);\n gl_FragColor = vec4(color, tex.a);\n}\n@end");


  /***/ }),
  /* 188 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("@export clay.compositor.hdr.log_lum\nvarying vec2 v_Texcoord;\nuniform sampler2D texture;\nconst vec3 w = vec3(0.2125, 0.7154, 0.0721);\n@import clay.util.rgbm\nvoid main()\n{\n vec4 tex = decodeHDR(texture2D(texture, v_Texcoord));\n float luminance = dot(tex.rgb, w);\n luminance = log(luminance + 0.001);\n gl_FragColor = encodeHDR(vec4(vec3(luminance), 1.0));\n}\n@end\n@export clay.compositor.hdr.lum_adaption\nvarying vec2 v_Texcoord;\nuniform sampler2D adaptedLum;\nuniform sampler2D currentLum;\nuniform float frameTime : 0.02;\n@import clay.util.rgbm\nvoid main()\n{\n float fAdaptedLum = decodeHDR(texture2D(adaptedLum, vec2(0.5, 0.5))).r;\n float fCurrentLum = exp(encodeHDR(texture2D(currentLum, vec2(0.5, 0.5))).r);\n fAdaptedLum += (fCurrentLum - fAdaptedLum) * (1.0 - pow(0.98, 30.0 * frameTime));\n gl_FragColor = encodeHDR(vec4(vec3(fAdaptedLum), 1.0));\n}\n@end\n@export clay.compositor.lum\nvarying vec2 v_Texcoord;\nuniform sampler2D texture;\nconst vec3 w = vec3(0.2125, 0.7154, 0.0721);\nvoid main()\n{\n vec4 tex = texture2D( texture, v_Texcoord );\n float luminance = dot(tex.rgb, w);\n gl_FragColor = vec4(vec3(luminance), 1.0);\n}\n@end");


  /***/ }),
  /* 189 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("@export clay.compositor.vignette\n#define OUTPUT_ALPHA\nvarying vec2 v_Texcoord;\nuniform sampler2D texture;\nuniform float darkness: 1;\nuniform float offset: 1;\n@import clay.util.rgbm\nvoid main()\n{\n vec4 texel = decodeHDR(texture2D(texture, v_Texcoord));\n gl_FragColor.rgb = texel.rgb;\n vec2 uv = (v_Texcoord - vec2(0.5)) * vec2(offset);\n gl_FragColor = encodeHDR(vec4(mix(texel.rgb, vec3(1.0 - darkness), dot(uv, uv)), texel.a));\n}\n@end");


  /***/ }),
  /* 190 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("@export clay.compositor.lensflare\n#define SAMPLE_NUMBER 8\nuniform sampler2D texture;\nuniform sampler2D lenscolor;\nuniform vec2 textureSize : [512, 512];\nuniform float dispersal : 0.3;\nuniform float haloWidth : 0.4;\nuniform float distortion : 1.0;\nvarying vec2 v_Texcoord;\n@import clay.util.rgbm\nvec4 textureDistorted(\n in vec2 texcoord,\n in vec2 direction,\n in vec3 distortion\n) {\n return vec4(\n decodeHDR(texture2D(texture, texcoord + direction * distortion.r)).r,\n decodeHDR(texture2D(texture, texcoord + direction * distortion.g)).g,\n decodeHDR(texture2D(texture, texcoord + direction * distortion.b)).b,\n 1.0\n );\n}\nvoid main()\n{\n vec2 texcoord = -v_Texcoord + vec2(1.0); vec2 textureOffset = 1.0 / textureSize;\n vec2 ghostVec = (vec2(0.5) - texcoord) * dispersal;\n vec2 haloVec = normalize(ghostVec) * haloWidth;\n vec3 distortion = vec3(-textureOffset.x * distortion, 0.0, textureOffset.x * distortion);\n vec4 result = vec4(0.0);\n for (int i = 0; i < SAMPLE_NUMBER; i++)\n {\n vec2 offset = fract(texcoord + ghostVec * float(i));\n float weight = length(vec2(0.5) - offset) / length(vec2(0.5));\n weight = pow(1.0 - weight, 10.0);\n result += textureDistorted(offset, normalize(ghostVec), distortion) * weight;\n }\n result *= texture2D(lenscolor, vec2(length(vec2(0.5) - texcoord)) / length(vec2(0.5)));\n float weight = length(vec2(0.5) - fract(texcoord + haloVec)) / length(vec2(0.5));\n weight = pow(1.0 - weight, 10.0);\n vec2 offset = fract(texcoord + haloVec);\n result += textureDistorted(offset, normalize(ghostVec), distortion) * weight;\n gl_FragColor = result;\n}\n@end");


  /***/ }),
  /* 191 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_claygl_src_math_Matrix4__ = __webpack_require__(7);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_claygl_src_math_Vector3__ = __webpack_require__(3);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_claygl_src_Texture2D__ = __webpack_require__(5);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_claygl_src_Texture__ = __webpack_require__(4);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_claygl_src_compositor_Pass__ = __webpack_require__(15);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_claygl_src_Shader__ = __webpack_require__(9);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_claygl_src_FrameBuffer__ = __webpack_require__(10);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__halton__ = __webpack_require__(49);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__SSAO_glsl_js__ = __webpack_require__(192);










  __WEBPACK_IMPORTED_MODULE_5_claygl_src_Shader__["a" /* default */].import(__WEBPACK_IMPORTED_MODULE_8__SSAO_glsl_js__["a" /* default */]);

  function generateNoiseData(size) {
      var data = new Uint8Array(size * size * 4);
      var n = 0;
      var v3 = new __WEBPACK_IMPORTED_MODULE_1_claygl_src_math_Vector3__["a" /* default */]();

      for (var i = 0; i < size; i++) {
          for (var j = 0; j < size; j++) {
              v3.set(Math.random() * 2 - 1, Math.random() * 2 - 1, 0).normalize();
              data[n++] = (v3.x * 0.5 + 0.5) * 255;
              data[n++] = (v3.y * 0.5 + 0.5) * 255;
              data[n++] = 0;
              data[n++] = 255;
          }
      }
      return data;
  }

  function generateNoiseTexture(size) {
      return new __WEBPACK_IMPORTED_MODULE_2_claygl_src_Texture2D__["a" /* default */]({
          pixels: generateNoiseData(size),
          wrapS: __WEBPACK_IMPORTED_MODULE_3_claygl_src_Texture__["a" /* default */].REPEAT,
          wrapT: __WEBPACK_IMPORTED_MODULE_3_claygl_src_Texture__["a" /* default */].REPEAT,
          width: size,
          height: size
      });
  }

  function generateKernel(size, offset, hemisphere) {
      var kernel = new Float32Array(size * 3);
      offset = offset || 0;
      for (var i = 0; i < size; i++) {
          var phi = Object(__WEBPACK_IMPORTED_MODULE_7__halton__["a" /* default */])(i + offset, 2) * (hemisphere ? 1 : 2) * Math.PI;
          var theta = Object(__WEBPACK_IMPORTED_MODULE_7__halton__["a" /* default */])(i + offset, 3) * Math.PI;
          var r = Math.random();
          var x = Math.cos(phi) * Math.sin(theta) * r;
          var y = Math.cos(theta) * r;
          var z = Math.sin(phi) * Math.sin(theta) * r;

          kernel[i * 3] = x;
          kernel[i * 3 + 1] = y;
          kernel[i * 3 + 2] = z;
      }
      return kernel;

      // var kernel = new Float32Array(size * 3);
      // var v3 = new Vector3();
      // for (var i = 0; i < size; i++) {
      //     v3.set(Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random())
      //         .normalize().scale(Math.random());
      //     kernel[i * 3] = v3.x;
      //     kernel[i * 3 + 1] = v3.y;
      //     kernel[i * 3 + 2] = v3.z;
      // }
      // return kernel;
  }

  function SSAOPass(opt) {
      opt = opt || {};

      this._ssaoPass = new __WEBPACK_IMPORTED_MODULE_4_claygl_src_compositor_Pass__["a" /* default */]({
          fragment: __WEBPACK_IMPORTED_MODULE_5_claygl_src_Shader__["a" /* default */].source('ecgl.ssao.estimate')
      });
      this._blurPass = new __WEBPACK_IMPORTED_MODULE_4_claygl_src_compositor_Pass__["a" /* default */]({
          fragment: __WEBPACK_IMPORTED_MODULE_5_claygl_src_Shader__["a" /* default */].source('ecgl.ssao.blur')
      });
      this._framebuffer = new __WEBPACK_IMPORTED_MODULE_6_claygl_src_FrameBuffer__["a" /* default */]({
          depthBuffer: false
      });

      this._ssaoTexture = new __WEBPACK_IMPORTED_MODULE_2_claygl_src_Texture2D__["a" /* default */]();
      this._blurTexture = new __WEBPACK_IMPORTED_MODULE_2_claygl_src_Texture2D__["a" /* default */]();
      this._blurTexture2 = new __WEBPACK_IMPORTED_MODULE_2_claygl_src_Texture2D__["a" /* default */]();

      this._depthTex = opt.depthTexture;
      this._normalTex = opt.normalTexture;

      this.setNoiseSize(4);
      this.setKernelSize(opt.kernelSize || 12);
      if (opt.radius != null) {
          this.setParameter('radius', opt.radius);
      }
      if (opt.power != null) {
          this.setParameter('power', opt.power);
      }

      if (!this._normalTex) {
          this._ssaoPass.material.disableTexture('normalTex');
          this._blurPass.material.disableTexture('normalTex');
      }
      if (!this._depthTex) {
          this._blurPass.material.disableTexture('depthTex');
      }

      this._blurPass.material.setUniform('normalTex', this._normalTex);
      this._blurPass.material.setUniform('depthTex', this._depthTex);
  }

  SSAOPass.prototype.setDepthTexture = function (depthTex) {
      this._depthTex = depthTex;
  };

  SSAOPass.prototype.setNormalTexture = function (normalTex) {
      this._normalTex = normalTex;
      this._ssaoPass.material[normalTex ? 'enableTexture' : 'disableTexture']('normalTex');
      // Switch between hemisphere and shere kernel.
      this.setKernelSize(this._kernelSize);
  };

  SSAOPass.prototype.update = function (renderer, camera, frame) {
      var width = renderer.getWidth();
      var height = renderer.getHeight();

      var ssaoPass = this._ssaoPass;
      var blurPass = this._blurPass;

      ssaoPass.setUniform('kernel', this._kernels[frame % this._kernels.length]);
      ssaoPass.setUniform('depthTex', this._depthTex);
      if (this._normalTex != null) {
          ssaoPass.setUniform('normalTex', this._normalTex);
      }
      ssaoPass.setUniform('depthTexSize', [this._depthTex.width, this._depthTex.height]);

      var viewInverseTranspose = new __WEBPACK_IMPORTED_MODULE_0_claygl_src_math_Matrix4__["a" /* default */]();
      __WEBPACK_IMPORTED_MODULE_0_claygl_src_math_Matrix4__["a" /* default */].transpose(viewInverseTranspose, camera.worldTransform);

      ssaoPass.setUniform('projection', camera.projectionMatrix.array);
      ssaoPass.setUniform('projectionInv', camera.invProjectionMatrix.array);
      ssaoPass.setUniform('viewInverseTranspose', viewInverseTranspose.array);

      var ssaoTexture = this._ssaoTexture;
      var blurTexture = this._blurTexture;
      var blurTexture2 = this._blurTexture2;

      ssaoTexture.width = width / 2;
      ssaoTexture.height = height / 2;
      blurTexture.width = width;
      blurTexture.height = height;
      blurTexture2.width = width;
      blurTexture2.height = height;

      this._framebuffer.attach(ssaoTexture);
      this._framebuffer.bind(renderer);
      renderer.gl.clearColor(1, 1, 1, 1);
      renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT);
      ssaoPass.render(renderer);

      blurPass.setUniform('textureSize', [width / 2, height / 2]);
      blurPass.setUniform('projection', camera.projectionMatrix.array);
      this._framebuffer.attach(blurTexture);
      blurPass.setUniform('direction', 0);
      blurPass.setUniform('ssaoTexture', ssaoTexture);
      blurPass.render(renderer);

      this._framebuffer.attach(blurTexture2);
      blurPass.setUniform('textureSize', [width, height]);
      blurPass.setUniform('direction', 1);
      blurPass.setUniform('ssaoTexture', blurTexture);
      blurPass.render(renderer);

      this._framebuffer.unbind(renderer);

      // Restore clear
      var clearColor = renderer.clearColor;
      renderer.gl.clearColor(clearColor[0], clearColor[1], clearColor[2], clearColor[3]);
  };

  SSAOPass.prototype.getTargetTexture = function () {
      return this._blurTexture2;
  };

  SSAOPass.prototype.setParameter = function (name, val) {
      if (name === 'noiseTexSize') {
          this.setNoiseSize(val);
      }
      else if (name === 'kernelSize') {
          this.setKernelSize(val);
      }
      else if (name === 'intensity') {
          this._ssaoPass.material.set('intensity', val);
      }
      else {
          this._ssaoPass.setUniform(name, val);
      }
  };

  SSAOPass.prototype.setKernelSize = function (size) {
      this._kernelSize = size;
      this._ssaoPass.material.define('fragment', 'KERNEL_SIZE', size);
      this._kernels = this._kernels || [];
      for (var i = 0; i < 30; i++) {
          this._kernels[i] = generateKernel(size, i * size, !!this._normalTex);
      }
  };

  SSAOPass.prototype.setNoiseSize = function (size) {
      var texture = this._ssaoPass.getUniform('noiseTex');
      if (!texture) {
          texture = generateNoiseTexture(size);
          this._ssaoPass.setUniform('noiseTex', generateNoiseTexture(size));
      }
      else {
          texture.data = generateNoiseData(size);
          texture.width = texture.height = size;
          texture.dirty();
      }

      this._ssaoPass.setUniform('noiseTexSize', [size, size]);
  };

  SSAOPass.prototype.dispose = function (renderer) {
      this._blurTexture.dispose(renderer);
      this._ssaoTexture.dispose(renderer);
      this._blurTexture2.dispose(renderer);
  };

  /* harmony default export */ __webpack_exports__["a"] = (SSAOPass);

  /***/ }),
  /* 192 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("@export ecgl.ssao.estimate\n\nuniform sampler2D depthTex;\n\nuniform sampler2D normalTex;\n\nuniform sampler2D noiseTex;\n\nuniform vec2 depthTexSize;\n\nuniform vec2 noiseTexSize;\n\nuniform mat4 projection;\n\nuniform mat4 projectionInv;\n\nuniform mat4 viewInverseTranspose;\n\nuniform vec3 kernel[KERNEL_SIZE];\n\nuniform float radius : 1;\n\nuniform float power : 1;\n\nuniform float bias: 1e-2;\n\nuniform float intensity: 1.0;\n\nvarying vec2 v_Texcoord;\n\nfloat ssaoEstimator(in vec3 originPos, in mat3 kernelBasis) {\n float occlusion = 0.0;\n\n for (int i = 0; i < KERNEL_SIZE; i++) {\n vec3 samplePos = kernel[i];\n#ifdef NORMALTEX_ENABLED\n samplePos = kernelBasis * samplePos;\n#endif\n samplePos = samplePos * radius + originPos;\n\n vec4 texCoord = projection * vec4(samplePos, 1.0);\n texCoord.xy /= texCoord.w;\n\n vec4 depthTexel = texture2D(depthTex, texCoord.xy * 0.5 + 0.5);\n\n float sampleDepth = depthTexel.r * 2.0 - 1.0;\n if (projection[3][3] == 0.0) {\n sampleDepth = projection[3][2] / (sampleDepth * projection[2][3] - projection[2][2]);\n }\n else {\n sampleDepth = (sampleDepth - projection[3][2]) / projection[2][2];\n }\n \n float rangeCheck = smoothstep(0.0, 1.0, radius / abs(originPos.z - sampleDepth));\n occlusion += rangeCheck * step(samplePos.z, sampleDepth - bias);\n }\n#ifdef NORMALTEX_ENABLED\n occlusion = 1.0 - occlusion / float(KERNEL_SIZE);\n#else\n occlusion = 1.0 - clamp((occlusion / float(KERNEL_SIZE) - 0.6) * 2.5, 0.0, 1.0);\n#endif\n return pow(occlusion, power);\n}\n\nvoid main()\n{\n\n vec4 depthTexel = texture2D(depthTex, v_Texcoord);\n\n#ifdef NORMALTEX_ENABLED\n vec4 tex = texture2D(normalTex, v_Texcoord);\n if (dot(tex.rgb, tex.rgb) == 0.0) {\n gl_FragColor = vec4(1.0);\n return;\n }\n vec3 N = tex.rgb * 2.0 - 1.0;\n N = (viewInverseTranspose * vec4(N, 0.0)).xyz;\n\n vec2 noiseTexCoord = depthTexSize / vec2(noiseTexSize) * v_Texcoord;\n vec3 rvec = texture2D(noiseTex, noiseTexCoord).rgb * 2.0 - 1.0;\n vec3 T = normalize(rvec - N * dot(rvec, N));\n vec3 BT = normalize(cross(N, T));\n mat3 kernelBasis = mat3(T, BT, N);\n#else\n if (depthTexel.r > 0.99999) {\n gl_FragColor = vec4(1.0);\n return;\n }\n mat3 kernelBasis;\n#endif\n\n float z = depthTexel.r * 2.0 - 1.0;\n\n vec4 projectedPos = vec4(v_Texcoord * 2.0 - 1.0, z, 1.0);\n vec4 p4 = projectionInv * projectedPos;\n\n vec3 position = p4.xyz / p4.w;\n\n float ao = ssaoEstimator(position, kernelBasis);\n ao = clamp(1.0 - (1.0 - ao) * intensity, 0.0, 1.0);\n gl_FragColor = vec4(vec3(ao), 1.0);\n}\n\n@end\n\n\n@export ecgl.ssao.blur\n#define SHADER_NAME SSAO_BLUR\n\nuniform sampler2D ssaoTexture;\n\n#ifdef NORMALTEX_ENABLED\nuniform sampler2D normalTex;\n#endif\n\nvarying vec2 v_Texcoord;\n\nuniform vec2 textureSize;\nuniform float blurSize : 1.0;\n\nuniform int direction: 0.0;\n\n#ifdef DEPTHTEX_ENABLED\nuniform sampler2D depthTex;\nuniform mat4 projection;\nuniform float depthRange : 0.5;\n\nfloat getLinearDepth(vec2 coord)\n{\n float depth = texture2D(depthTex, coord).r * 2.0 - 1.0;\n return projection[3][2] / (depth * projection[2][3] - projection[2][2]);\n}\n#endif\n\nvoid main()\n{\n float kernel[5];\n kernel[0] = 0.122581;\n kernel[1] = 0.233062;\n kernel[2] = 0.288713;\n kernel[3] = 0.233062;\n kernel[4] = 0.122581;\n\n vec2 off = vec2(0.0);\n if (direction == 0) {\n off[0] = blurSize / textureSize.x;\n }\n else {\n off[1] = blurSize / textureSize.y;\n }\n\n vec2 coord = v_Texcoord;\n\n float sum = 0.0;\n float weightAll = 0.0;\n\n#ifdef NORMALTEX_ENABLED\n vec3 centerNormal = texture2D(normalTex, v_Texcoord).rgb * 2.0 - 1.0;\n#endif\n#if defined(DEPTHTEX_ENABLED)\n float centerDepth = getLinearDepth(v_Texcoord);\n#endif\n\n for (int i = 0; i < 5; i++) {\n vec2 coord = clamp(v_Texcoord + vec2(float(i) - 2.0) * off, vec2(0.0), vec2(1.0));\n\n float w = kernel[i];\n#ifdef NORMALTEX_ENABLED\n vec3 normal = texture2D(normalTex, coord).rgb * 2.0 - 1.0;\n w *= clamp(dot(normal, centerNormal), 0.0, 1.0);\n#endif\n#ifdef DEPTHTEX_ENABLED\n float d = getLinearDepth(coord);\n w *= (1.0 - smoothstep(abs(centerDepth - d) / depthRange, 0.0, 1.0));\n#endif\n\n weightAll += w;\n sum += texture2D(ssaoTexture, coord).r * w;\n }\n\n gl_FragColor = vec4(vec3(sum / weightAll), 1.0);\n}\n\n@end\n");


  /***/ }),
  /* 193 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_claygl_src_math_Matrix4__ = __webpack_require__(7);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_claygl_src_math_Vector3__ = __webpack_require__(3);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_claygl_src_Texture2D__ = __webpack_require__(5);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_claygl_src_Texture__ = __webpack_require__(4);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_claygl_src_compositor_Pass__ = __webpack_require__(15);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_claygl_src_Shader__ = __webpack_require__(9);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_claygl_src_FrameBuffer__ = __webpack_require__(10);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__halton__ = __webpack_require__(49);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_claygl_src_util_cubemap__ = __webpack_require__(77);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__SSR_glsl_js__ = __webpack_require__(194);












  __WEBPACK_IMPORTED_MODULE_5_claygl_src_Shader__["a" /* default */].import(__WEBPACK_IMPORTED_MODULE_9__SSR_glsl_js__["a" /* default */]);

  function SSRPass(opt) {
      opt = opt || {};

      this._ssrPass = new __WEBPACK_IMPORTED_MODULE_4_claygl_src_compositor_Pass__["a" /* default */]({
          fragment: __WEBPACK_IMPORTED_MODULE_5_claygl_src_Shader__["a" /* default */].source('ecgl.ssr.main'),
          clearColor: [0, 0, 0, 0]
      });
      this._blurPass1 = new __WEBPACK_IMPORTED_MODULE_4_claygl_src_compositor_Pass__["a" /* default */]({
          fragment: __WEBPACK_IMPORTED_MODULE_5_claygl_src_Shader__["a" /* default */].source('ecgl.ssr.blur'),
          clearColor: [0, 0, 0, 0]
      });
      this._blurPass2 = new __WEBPACK_IMPORTED_MODULE_4_claygl_src_compositor_Pass__["a" /* default */]({
          fragment: __WEBPACK_IMPORTED_MODULE_5_claygl_src_Shader__["a" /* default */].source('ecgl.ssr.blur'),
          clearColor: [0, 0, 0, 0]
      });
      this._blendPass = new __WEBPACK_IMPORTED_MODULE_4_claygl_src_compositor_Pass__["a" /* default */]({
          fragment: __WEBPACK_IMPORTED_MODULE_5_claygl_src_Shader__["a" /* default */].source('clay.compositor.blend')
      });
      this._blendPass.material.disableTexturesAll();
      this._blendPass.material.enableTexture(['texture1', 'texture2']);

      this._ssrPass.setUniform('gBufferTexture1', opt.normalTexture);
      this._ssrPass.setUniform('gBufferTexture2', opt.depthTexture);
      // this._ssrPass.setUniform('gBufferTexture3', opt.albedoTexture);

      this._blurPass1.setUniform('gBufferTexture1', opt.normalTexture);
      this._blurPass1.setUniform('gBufferTexture2', opt.depthTexture);

      this._blurPass2.setUniform('gBufferTexture1', opt.normalTexture);
      this._blurPass2.setUniform('gBufferTexture2', opt.depthTexture);

      this._blurPass2.material.define('fragment', 'VERTICAL');
      this._blurPass2.material.define('fragment', 'BLEND');

      this._ssrTexture = new __WEBPACK_IMPORTED_MODULE_2_claygl_src_Texture2D__["a" /* default */]({
          type: __WEBPACK_IMPORTED_MODULE_3_claygl_src_Texture__["a" /* default */].HALF_FLOAT
      });
      this._texture2 = new __WEBPACK_IMPORTED_MODULE_2_claygl_src_Texture2D__["a" /* default */]({
          type: __WEBPACK_IMPORTED_MODULE_3_claygl_src_Texture__["a" /* default */].HALF_FLOAT
      });
      this._texture3 = new __WEBPACK_IMPORTED_MODULE_2_claygl_src_Texture2D__["a" /* default */]({
          type: __WEBPACK_IMPORTED_MODULE_3_claygl_src_Texture__["a" /* default */].HALF_FLOAT
      });
      this._prevTexture = new __WEBPACK_IMPORTED_MODULE_2_claygl_src_Texture2D__["a" /* default */]({
          type: __WEBPACK_IMPORTED_MODULE_3_claygl_src_Texture__["a" /* default */].HALF_FLOAT
      });
      this._currentTexture = new __WEBPACK_IMPORTED_MODULE_2_claygl_src_Texture2D__["a" /* default */]({
          type: __WEBPACK_IMPORTED_MODULE_3_claygl_src_Texture__["a" /* default */].HALF_FLOAT
      });

      this._frameBuffer = new __WEBPACK_IMPORTED_MODULE_6_claygl_src_FrameBuffer__["a" /* default */]({
          depthBuffer: false
      });

      this._normalDistribution = null;

      this._totalSamples = 256;
      this._samplePerFrame = 4;

      this._ssrPass.material.define('fragment', 'SAMPLE_PER_FRAME', this._samplePerFrame);
      this._ssrPass.material.define('fragment', 'TOTAL_SAMPLES', this._totalSamples);

      this._downScale = 1;
  }

  SSRPass.prototype.setAmbientCubemap = function (specularCubemap, specularIntensity) {
      this._ssrPass.material.set('specularCubemap', specularCubemap);
      this._ssrPass.material.set('specularIntensity', specularIntensity);

      var enableSpecularMap = specularCubemap && specularIntensity;
      this._ssrPass.material[enableSpecularMap ? 'enableTexture' : 'disableTexture']('specularCubemap');
  };

  SSRPass.prototype.update = function (renderer, camera, sourceTexture, frame) {
      var width = renderer.getWidth();
      var height = renderer.getHeight();
      var ssrTexture = this._ssrTexture;
      var texture2 = this._texture2;
      var texture3 = this._texture3;
      ssrTexture.width = this._prevTexture.width = this._currentTexture.width = width / this._downScale;
      ssrTexture.height = this._prevTexture.height = this._currentTexture.height = height / this._downScale;

      texture2.width = texture3.width = width;
      texture2.height = texture3.height = height;

      var frameBuffer = this._frameBuffer;

      var ssrPass = this._ssrPass;
      var blurPass1 = this._blurPass1;
      var blurPass2 = this._blurPass2;
      var blendPass = this._blendPass;

      var toViewSpace = new __WEBPACK_IMPORTED_MODULE_0_claygl_src_math_Matrix4__["a" /* default */]();
      var toWorldSpace = new __WEBPACK_IMPORTED_MODULE_0_claygl_src_math_Matrix4__["a" /* default */]();
      __WEBPACK_IMPORTED_MODULE_0_claygl_src_math_Matrix4__["a" /* default */].transpose(toViewSpace, camera.worldTransform);
      __WEBPACK_IMPORTED_MODULE_0_claygl_src_math_Matrix4__["a" /* default */].transpose(toWorldSpace, camera.viewMatrix);

      ssrPass.setUniform('sourceTexture', sourceTexture);
      ssrPass.setUniform('projection', camera.projectionMatrix.array);
      ssrPass.setUniform('projectionInv', camera.invProjectionMatrix.array);
      ssrPass.setUniform('toViewSpace', toViewSpace.array);
      ssrPass.setUniform('toWorldSpace', toWorldSpace.array);
      ssrPass.setUniform('nearZ', camera.near);

      var percent = frame / this._totalSamples * this._samplePerFrame;
      ssrPass.setUniform('jitterOffset', percent);
      ssrPass.setUniform('sampleOffset', frame * this._samplePerFrame);

      blurPass1.setUniform('textureSize', [ssrTexture.width, ssrTexture.height]);
      blurPass2.setUniform('textureSize', [width, height]);
      blurPass2.setUniform('sourceTexture', sourceTexture);

      blurPass1.setUniform('projection', camera.projectionMatrix.array);
      blurPass2.setUniform('projection', camera.projectionMatrix.array);

      frameBuffer.attach(ssrTexture);
      frameBuffer.bind(renderer);
      ssrPass.render(renderer);

      if (this._physicallyCorrect) {
          frameBuffer.attach(this._currentTexture);
          blendPass.setUniform('texture1', this._prevTexture);
          blendPass.setUniform('texture2', ssrTexture);
          blendPass.material.set({
              'weight1': frame >= 1 ? 0.95 : 0,
              'weight2': frame >= 1 ? 0.05 : 1
              // weight1: frame >= 1 ? 1 : 0,
              // weight2: 1
          });
          blendPass.render(renderer);
      }

      frameBuffer.attach(texture2);
      blurPass1.setUniform('texture', this._physicallyCorrect ? this._currentTexture : ssrTexture);
      blurPass1.render(renderer);

      frameBuffer.attach(texture3);
      blurPass2.setUniform('texture', texture2);
      blurPass2.render(renderer);
      frameBuffer.unbind(renderer);

      if (this._physicallyCorrect) {
          var tmp = this._prevTexture;
          this._prevTexture = this._currentTexture;
          this._currentTexture = tmp;
      }
  };

  SSRPass.prototype.getTargetTexture = function () {
      return this._texture3;
  };

  SSRPass.prototype.setParameter = function (name, val) {
      if (name === 'maxIteration') {
          this._ssrPass.material.define('fragment', 'MAX_ITERATION', val);
      }
      else {
          this._ssrPass.setUniform(name, val);
      }
  };

  SSRPass.prototype.setPhysicallyCorrect = function (isPhysicallyCorrect) {
      if (isPhysicallyCorrect) {
          if (!this._normalDistribution) {
              this._normalDistribution = __WEBPACK_IMPORTED_MODULE_8_claygl_src_util_cubemap__["a" /* default */].generateNormalDistribution(64, this._totalSamples);
          }
          this._ssrPass.material.define('fragment', 'PHYSICALLY_CORRECT');
          this._ssrPass.material.set('normalDistribution', this._normalDistribution);
          this._ssrPass.material.set('normalDistributionSize', [64, this._totalSamples]);
      }
      else {
          this._ssrPass.material.undefine('fragment', 'PHYSICALLY_CORRECT');
      }

      this._physicallyCorrect = isPhysicallyCorrect;
  };

  SSRPass.prototype.setSSAOTexture = function (texture) {
      var blendPass = this._blurPass2;
      if (texture) {
          blendPass.material.enableTexture('ssaoTex');
          blendPass.material.set('ssaoTex', texture);
      }
      else {
          blendPass.material.disableTexture('ssaoTex');
      }
  };

  SSRPass.prototype.isFinished = function (frame) {
      if (this._physicallyCorrect) {
          return frame > (this._totalSamples / this._samplePerFrame);
      }
      else {
          return true;
      }
  };

  SSRPass.prototype.dispose = function (renderer) {
      this._ssrTexture.dispose(renderer);
      this._texture2.dispose(renderer);
      this._texture3.dispose(renderer);
      this._prevTexture.dispose(renderer);
      this._currentTexture.dispose(renderer);
      this._frameBuffer.dispose(renderer);
  };

  /* harmony default export */ __webpack_exports__["a"] = (SSRPass);

  /***/ }),
  /* 194 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("@export ecgl.ssr.main\n\n#define SHADER_NAME SSR\n#define MAX_ITERATION 20;\n#define SAMPLE_PER_FRAME 5;\n#define TOTAL_SAMPLES 128;\n\nuniform sampler2D sourceTexture;\nuniform sampler2D gBufferTexture1;\nuniform sampler2D gBufferTexture2;\nuniform sampler2D gBufferTexture3;\nuniform samplerCube specularCubemap;\nuniform float specularIntensity: 1;\n\nuniform mat4 projection;\nuniform mat4 projectionInv;\nuniform mat4 toViewSpace;\nuniform mat4 toWorldSpace;\n\nuniform float maxRayDistance: 200;\n\nuniform float pixelStride: 16;\nuniform float pixelStrideZCutoff: 50; \nuniform float screenEdgeFadeStart: 0.9; \nuniform float eyeFadeStart : 0.2; uniform float eyeFadeEnd: 0.8; \nuniform float minGlossiness: 0.2; uniform float zThicknessThreshold: 1;\n\nuniform float nearZ;\nuniform vec2 viewportSize : VIEWPORT_SIZE;\n\nuniform float jitterOffset: 0;\n\nvarying vec2 v_Texcoord;\n\n#ifdef DEPTH_DECODE\n@import clay.util.decode_float\n#endif\n\n#ifdef PHYSICALLY_CORRECT\nuniform sampler2D normalDistribution;\nuniform float sampleOffset: 0;\nuniform vec2 normalDistributionSize;\n\nvec3 transformNormal(vec3 H, vec3 N) {\n vec3 upVector = N.y > 0.999 ? vec3(1.0, 0.0, 0.0) : vec3(0.0, 1.0, 0.0);\n vec3 tangentX = normalize(cross(N, upVector));\n vec3 tangentZ = cross(N, tangentX);\n return normalize(tangentX * H.x + N * H.y + tangentZ * H.z);\n}\nvec3 importanceSampleNormalGGX(float i, float roughness, vec3 N) {\n float p = fract((i + sampleOffset) / float(TOTAL_SAMPLES));\n vec3 H = texture2D(normalDistribution,vec2(roughness, p)).rgb;\n return transformNormal(H, N);\n}\nfloat G_Smith(float g, float ndv, float ndl) {\n float roughness = 1.0 - g;\n float k = roughness * roughness / 2.0;\n float G1V = ndv / (ndv * (1.0 - k) + k);\n float G1L = ndl / (ndl * (1.0 - k) + k);\n return G1L * G1V;\n}\nvec3 F_Schlick(float ndv, vec3 spec) {\n return spec + (1.0 - spec) * pow(1.0 - ndv, 5.0);\n}\n#endif\n\nfloat fetchDepth(sampler2D depthTexture, vec2 uv)\n{\n vec4 depthTexel = texture2D(depthTexture, uv);\n return depthTexel.r * 2.0 - 1.0;\n}\n\nfloat linearDepth(float depth)\n{\n if (projection[3][3] == 0.0) {\n return projection[3][2] / (depth * projection[2][3] - projection[2][2]);\n }\n else {\n return (depth - projection[3][2]) / projection[2][2];\n }\n}\n\nbool rayIntersectDepth(float rayZNear, float rayZFar, vec2 hitPixel)\n{\n if (rayZFar > rayZNear)\n {\n float t = rayZFar; rayZFar = rayZNear; rayZNear = t;\n }\n float cameraZ = linearDepth(fetchDepth(gBufferTexture2, hitPixel));\n return rayZFar <= cameraZ && rayZNear >= cameraZ - zThicknessThreshold;\n}\n\n\nbool traceScreenSpaceRay(\n vec3 rayOrigin, vec3 rayDir, float jitter,\n out vec2 hitPixel, out vec3 hitPoint, out float iterationCount\n)\n{\n float rayLength = ((rayOrigin.z + rayDir.z * maxRayDistance) > -nearZ)\n ? (-nearZ - rayOrigin.z) / rayDir.z : maxRayDistance;\n\n vec3 rayEnd = rayOrigin + rayDir * rayLength;\n\n vec4 H0 = projection * vec4(rayOrigin, 1.0);\n vec4 H1 = projection * vec4(rayEnd, 1.0);\n\n float k0 = 1.0 / H0.w, k1 = 1.0 / H1.w;\n\n vec3 Q0 = rayOrigin * k0, Q1 = rayEnd * k1;\n\n vec2 P0 = (H0.xy * k0 * 0.5 + 0.5) * viewportSize;\n vec2 P1 = (H1.xy * k1 * 0.5 + 0.5) * viewportSize;\n\n P1 += dot(P1 - P0, P1 - P0) < 0.0001 ? 0.01 : 0.0;\n vec2 delta = P1 - P0;\n\n bool permute = false;\n if (abs(delta.x) < abs(delta.y)) {\n permute = true;\n delta = delta.yx;\n P0 = P0.yx;\n P1 = P1.yx;\n }\n float stepDir = sign(delta.x);\n float invdx = stepDir / delta.x;\n\n vec3 dQ = (Q1 - Q0) * invdx;\n float dk = (k1 - k0) * invdx;\n\n vec2 dP = vec2(stepDir, delta.y * invdx);\n\n float strideScaler = 1.0 - min(1.0, -rayOrigin.z / pixelStrideZCutoff);\n float pixStride = 1.0 + strideScaler * pixelStride;\n\n dP *= pixStride; dQ *= pixStride; dk *= pixStride;\n\n vec4 pqk = vec4(P0, Q0.z, k0);\n vec4 dPQK = vec4(dP, dQ.z, dk);\n\n pqk += dPQK * jitter;\n float rayZFar = (dPQK.z * 0.5 + pqk.z) / (dPQK.w * 0.5 + pqk.w);\n float rayZNear;\n\n bool intersect = false;\n\n vec2 texelSize = 1.0 / viewportSize;\n\n iterationCount = 0.0;\n\n for (int i = 0; i < MAX_ITERATION; i++)\n {\n pqk += dPQK;\n\n rayZNear = rayZFar;\n rayZFar = (dPQK.z * 0.5 + pqk.z) / (dPQK.w * 0.5 + pqk.w);\n\n hitPixel = permute ? pqk.yx : pqk.xy;\n hitPixel *= texelSize;\n\n intersect = rayIntersectDepth(rayZNear, rayZFar, hitPixel);\n\n iterationCount += 1.0;\n\n dPQK *= 1.2;\n\n if (intersect) {\n break;\n }\n }\n\n Q0.xy += dQ.xy * iterationCount;\n Q0.z = pqk.z;\n hitPoint = Q0 / pqk.w;\n\n return intersect;\n}\n\nfloat calculateAlpha(\n float iterationCount, float reflectivity,\n vec2 hitPixel, vec3 hitPoint, float dist, vec3 rayDir\n)\n{\n float alpha = clamp(reflectivity, 0.0, 1.0);\n alpha *= 1.0 - (iterationCount / float(MAX_ITERATION));\n vec2 hitPixelNDC = hitPixel * 2.0 - 1.0;\n float maxDimension = min(1.0, max(abs(hitPixelNDC.x), abs(hitPixelNDC.y)));\n alpha *= 1.0 - max(0.0, maxDimension - screenEdgeFadeStart) / (1.0 - screenEdgeFadeStart);\n\n float _eyeFadeStart = eyeFadeStart;\n float _eyeFadeEnd = eyeFadeEnd;\n if (_eyeFadeStart > _eyeFadeEnd) {\n float tmp = _eyeFadeEnd;\n _eyeFadeEnd = _eyeFadeStart;\n _eyeFadeStart = tmp;\n }\n\n float eyeDir = clamp(rayDir.z, _eyeFadeStart, _eyeFadeEnd);\n alpha *= 1.0 - (eyeDir - _eyeFadeStart) / (_eyeFadeEnd - _eyeFadeStart);\n\n alpha *= 1.0 - clamp(dist / maxRayDistance, 0.0, 1.0);\n\n return alpha;\n}\n\n@import clay.util.rand\n\n@import clay.util.rgbm\n\nvoid main()\n{\n vec4 normalAndGloss = texture2D(gBufferTexture1, v_Texcoord);\n\n if (dot(normalAndGloss.rgb, vec3(1.0)) == 0.0) {\n discard;\n }\n\n float g = normalAndGloss.a;\n#if !defined(PHYSICALLY_CORRECT)\n if (g <= minGlossiness) {\n discard;\n }\n#endif\n\n float reflectivity = (g - minGlossiness) / (1.0 - minGlossiness);\n\n vec3 N = normalize(normalAndGloss.rgb * 2.0 - 1.0);\n N = normalize((toViewSpace * vec4(N, 0.0)).xyz);\n\n vec4 projectedPos = vec4(v_Texcoord * 2.0 - 1.0, fetchDepth(gBufferTexture2, v_Texcoord), 1.0);\n vec4 pos = projectionInv * projectedPos;\n vec3 rayOrigin = pos.xyz / pos.w;\n vec3 V = -normalize(rayOrigin);\n\n float ndv = clamp(dot(N, V), 0.0, 1.0);\n float iterationCount;\n float jitter = rand(fract(v_Texcoord + jitterOffset));\n\n#ifdef PHYSICALLY_CORRECT\n vec4 color = vec4(vec3(0.0), 1.0);\n vec4 albedoMetalness = texture2D(gBufferTexture3, v_Texcoord);\n vec3 albedo = albedoMetalness.rgb;\n float m = albedoMetalness.a;\n vec3 diffuseColor = albedo * (1.0 - m);\n vec3 spec = mix(vec3(0.04), albedo, m);\n\n float jitter2 = rand(fract(v_Texcoord)) * float(TOTAL_SAMPLES);\n\n for (int i = 0; i < SAMPLE_PER_FRAME; i++) {\n vec3 H = importanceSampleNormalGGX(float(i) + jitter2, 1.0 - g, N);\n vec3 rayDir = normalize(reflect(-V, H));\n#else\n vec3 rayDir = normalize(reflect(-V, N));\n#endif\n vec2 hitPixel;\n vec3 hitPoint;\n\n bool intersect = traceScreenSpaceRay(rayOrigin, rayDir, jitter, hitPixel, hitPoint, iterationCount);\n\n float dist = distance(rayOrigin, hitPoint);\n\n vec3 hitNormal = texture2D(gBufferTexture1, hitPixel).rgb * 2.0 - 1.0;\n hitNormal = normalize((toViewSpace * vec4(hitNormal, 0.0)).xyz);\n#ifdef PHYSICALLY_CORRECT\n float ndl = clamp(dot(N, rayDir), 0.0, 1.0);\n float vdh = clamp(dot(V, H), 0.0, 1.0);\n float ndh = clamp(dot(N, H), 0.0, 1.0);\n vec3 litTexel = vec3(0.0);\n if (dot(hitNormal, rayDir) < 0.0 && intersect) {\n litTexel = texture2D(sourceTexture, hitPixel).rgb;\n litTexel *= pow(clamp(1.0 - dist / 200.0, 0.0, 1.0), 3.0);\n\n }\n else {\n #ifdef SPECULARCUBEMAP_ENABLED\n vec3 rayDirW = normalize(toWorldSpace * vec4(rayDir, 0.0)).rgb;\n litTexel = RGBMDecode(textureCubeLodEXT(specularCubemap, rayDirW, 0.0), 8.12).rgb * specularIntensity;\n#endif\n }\n color.rgb += ndl * litTexel * (\n F_Schlick(ndl, spec) * G_Smith(g, ndv, ndl) * vdh / (ndh * ndv + 0.001)\n );\n }\n color.rgb /= float(SAMPLE_PER_FRAME);\n#else\n #if !defined(SPECULARCUBEMAP_ENABLED)\n if (dot(hitNormal, rayDir) >= 0.0) {\n discard;\n }\n if (!intersect) {\n discard;\n }\n#endif\n float alpha = clamp(calculateAlpha(iterationCount, reflectivity, hitPixel, hitPoint, dist, rayDir), 0.0, 1.0);\n vec4 color = texture2D(sourceTexture, hitPixel);\n color.rgb *= alpha;\n\n#ifdef SPECULARCUBEMAP_ENABLED\n vec3 rayDirW = normalize(toWorldSpace * vec4(rayDir, 0.0)).rgb;\n alpha = alpha * (intersect ? 1.0 : 0.0);\n float bias = (1.0 -g) * 5.0;\n color.rgb += (1.0 - alpha)\n * RGBMDecode(textureCubeLodEXT(specularCubemap, rayDirW, bias), 8.12).rgb\n * specularIntensity;\n#endif\n\n#endif\n\n gl_FragColor = encodeHDR(color);\n}\n@end\n\n@export ecgl.ssr.blur\n\nuniform sampler2D texture;\nuniform sampler2D gBufferTexture1;\nuniform sampler2D gBufferTexture2;\nuniform mat4 projection;\nuniform float depthRange : 0.05;\n\nvarying vec2 v_Texcoord;\n\nuniform vec2 textureSize;\nuniform float blurSize : 1.0;\n\n#ifdef BLEND\n #ifdef SSAOTEX_ENABLED\nuniform sampler2D ssaoTex;\n #endif\nuniform sampler2D sourceTexture;\n#endif\n\nfloat getLinearDepth(vec2 coord)\n{\n float depth = texture2D(gBufferTexture2, coord).r * 2.0 - 1.0;\n return projection[3][2] / (depth * projection[2][3] - projection[2][2]);\n}\n\n@import clay.util.rgbm\n\n\nvoid main()\n{\n @import clay.compositor.kernel.gaussian_9\n\n vec4 centerNTexel = texture2D(gBufferTexture1, v_Texcoord);\n float g = centerNTexel.a;\n float maxBlurSize = clamp(1.0 - g, 0.0, 1.0) * blurSize;\n#ifdef VERTICAL\n vec2 off = vec2(0.0, maxBlurSize / textureSize.y);\n#else\n vec2 off = vec2(maxBlurSize / textureSize.x, 0.0);\n#endif\n\n vec2 coord = v_Texcoord;\n\n vec4 sum = vec4(0.0);\n float weightAll = 0.0;\n\n vec3 cN = centerNTexel.rgb * 2.0 - 1.0;\n float cD = getLinearDepth(v_Texcoord);\n for (int i = 0; i < 9; i++) {\n vec2 coord = clamp((float(i) - 4.0) * off + v_Texcoord, vec2(0.0), vec2(1.0));\n float w = gaussianKernel[i]\n * clamp(dot(cN, texture2D(gBufferTexture1, coord).rgb * 2.0 - 1.0), 0.0, 1.0);\n float d = getLinearDepth(coord);\n w *= (1.0 - smoothstep(abs(cD - d) / depthRange, 0.0, 1.0));\n\n weightAll += w;\n sum += decodeHDR(texture2D(texture, coord)) * w;\n }\n\n#ifdef BLEND\n float aoFactor = 1.0;\n #ifdef SSAOTEX_ENABLED\n aoFactor = texture2D(ssaoTex, v_Texcoord).r;\n #endif\n gl_FragColor = encodeHDR(\n sum / weightAll * aoFactor + decodeHDR(texture2D(sourceTexture, v_Texcoord))\n );\n#else\n gl_FragColor = encodeHDR(sum / weightAll);\n#endif\n}\n\n@end");


  /***/ }),
  /* 195 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  // Based on https://bl.ocks.org/mbostock/19168c663618b707158

  /* harmony default export */ __webpack_exports__["a"] = ([
  0.0, 0.0,
  -0.321585265978, -0.154972575841,
  0.458126042375, 0.188473391593,
  0.842080129861, 0.527766490688,
  0.147304551086, -0.659453822776,
  -0.331943915203, -0.940619700594,
  0.0479226680259, 0.54812163202,
  0.701581552186, -0.709825561388,
  -0.295436780218, 0.940589268233,
  -0.901489676764, 0.237713156085,
  0.973570876096, -0.109899459384,
  -0.866792314779, -0.451805525005,
  0.330975007087, 0.800048655954,
  -0.344275183665, 0.381779221166,
  -0.386139432542, -0.437418421534,
  -0.576478634965, -0.0148463392551,
  0.385798197415, -0.262426961053,
  -0.666302061145, 0.682427250835,
  -0.628010632582, -0.732836215494,
  0.10163141741, -0.987658134403,
  0.711995289051, -0.320024291314,
  0.0296005138058, 0.950296523438,
  0.0130612307608, -0.351024443122,
  -0.879596633704, -0.10478487883,
  0.435712737232, 0.504254490347,
  0.779203817497, 0.206477676721,
  0.388264289969, -0.896736162545,
  -0.153106280781, -0.629203242522,
  -0.245517550697, 0.657969239148,
  0.126830499058, 0.26862328493,
  -0.634888119007, -0.302301223431,
  0.617074219636, 0.779817204925
  ]);

  /***/ }),
  /* 196 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_claygl_src_Texture2D__ = __webpack_require__(5);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_claygl_src_Texture__ = __webpack_require__(4);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_claygl_src_Shader__ = __webpack_require__(9);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_claygl_src_FrameBuffer__ = __webpack_require__(10);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_claygl_src_Material__ = __webpack_require__(19);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_claygl_src_compositor_Pass__ = __webpack_require__(15);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_claygl_src_util_texture__ = __webpack_require__(60);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__util_shader_normal_glsl_js__ = __webpack_require__(197);
  // NormalPass will generate normal and depth data.

  // TODO Animation









  __WEBPACK_IMPORTED_MODULE_2_claygl_src_Shader__["a" /* default */].import(__WEBPACK_IMPORTED_MODULE_7__util_shader_normal_glsl_js__["a" /* default */]);

  function attachTextureToSlot(renderer, program, symbol, texture, slot) {
      var gl = renderer.gl;
      program.setUniform(gl, '1i', symbol, slot);

      gl.activeTexture(gl.TEXTURE0 + slot);
      // Maybe texture is not loaded yet;
      if (texture.isRenderable()) {
          texture.bind(renderer);
      }
      else {
          // Bind texture to null
          texture.unbind(renderer);
      }
  }

  // TODO Use globalShader insteadof globalMaterial?
  function getBeforeRenderHook (renderer, defaultNormalMap, defaultBumpMap, defaultRoughnessMap, normalMaterial) {

      var previousNormalMap;
      var previousBumpMap;
      var previousRoughnessMap;
      var previousRenderable;
      var gl = renderer.gl;

      return function (renderable, normalMaterial, prevNormalMaterial) {
          // Material not change
          if (previousRenderable && previousRenderable.material === renderable.material) {
              return;
          }

          var material = renderable.material;
          var program = renderable.__program;

          var roughness = material.get('roughness');
          if (roughness == null) {
              roughness = 1;
          }

          var normalMap = material.get('normalMap') || defaultNormalMap;
          var roughnessMap = material.get('roughnessMap');
          var bumpMap = material.get('bumpMap');
          var uvRepeat = material.get('uvRepeat');
          var uvOffset = material.get('uvOffset');
          var detailUvRepeat = material.get('detailUvRepeat');
          var detailUvOffset = material.get('detailUvOffset');

          var useBumpMap = !!bumpMap && material.isTextureEnabled('bumpMap');
          var useRoughnessMap = !!roughnessMap && material.isTextureEnabled('roughnessMap');
          var doubleSide = material.isDefined('fragment', 'DOUBLE_SIDED');

          bumpMap = bumpMap || defaultBumpMap;
          roughnessMap = roughnessMap || defaultRoughnessMap;

          if (prevNormalMaterial !== normalMaterial) {
              normalMaterial.set('normalMap', normalMap);
              normalMaterial.set('bumpMap', bumpMap);
              normalMaterial.set('roughnessMap', roughnessMap);
              normalMaterial.set('useBumpMap', useBumpMap);
              normalMaterial.set('useRoughnessMap', useRoughnessMap);
              normalMaterial.set('doubleSide', doubleSide);
              uvRepeat != null && normalMaterial.set('uvRepeat', uvRepeat);
              uvOffset != null && normalMaterial.set('uvOffset', uvOffset);
              detailUvRepeat != null && normalMaterial.set('detailUvRepeat', detailUvRepeat);
              detailUvOffset != null && normalMaterial.set('detailUvOffset', detailUvOffset);

              normalMaterial.set('roughness', roughness);
          }
          else {
              program.setUniform(gl, '1f', 'roughness', roughness);

              if (previousNormalMap !== normalMap) {
                  attachTextureToSlot(renderer, program, 'normalMap', normalMap, 0);
              }
              if (previousBumpMap !== bumpMap && bumpMap) {
                  attachTextureToSlot(renderer, program, 'bumpMap', bumpMap, 1);
              }
              if (previousRoughnessMap !== roughnessMap && roughnessMap) {
                  attachTextureToSlot(renderer, program, 'roughnessMap', roughnessMap, 2);
              }
              if (uvRepeat != null) {
                  program.setUniform(gl, '2f', 'uvRepeat', uvRepeat);
              }
              if (uvOffset != null) {
                  program.setUniform(gl, '2f', 'uvOffset', uvOffset);
              }
              if (detailUvRepeat != null) {
                  program.setUniform(gl, '2f', 'detailUvRepeat', detailUvRepeat);
              }
              if (detailUvOffset != null) {
                  program.setUniform(gl, '2f', 'detailUvOffset', detailUvOffset);
              }
              program.setUniform(gl, '1i', 'useBumpMap', +useBumpMap);
              program.setUniform(gl, '1i', 'useRoughnessMap', +useRoughnessMap);
              program.setUniform(gl, '1i', 'doubleSide', +doubleSide);
          }

          previousNormalMap = normalMap;
          previousBumpMap = bumpMap;
          previousRoughnessMap = roughnessMap;

          previousRenderable = renderable;
      };
  }

  function NormalPass(opt) {

      this._depthTex = new __WEBPACK_IMPORTED_MODULE_0_claygl_src_Texture2D__["a" /* default */]({
          format: __WEBPACK_IMPORTED_MODULE_1_claygl_src_Texture__["a" /* default */].DEPTH_COMPONENT,
          type: __WEBPACK_IMPORTED_MODULE_1_claygl_src_Texture__["a" /* default */].UNSIGNED_INT
      });
      this._normalTex = new __WEBPACK_IMPORTED_MODULE_0_claygl_src_Texture2D__["a" /* default */]({
          type: __WEBPACK_IMPORTED_MODULE_1_claygl_src_Texture__["a" /* default */].HALF_FLOAT
      });

      this._framebuffer = new __WEBPACK_IMPORTED_MODULE_3_claygl_src_FrameBuffer__["a" /* default */]();
      this._framebuffer.attach(this._normalTex);
      this._framebuffer.attach(this._depthTex, __WEBPACK_IMPORTED_MODULE_3_claygl_src_FrameBuffer__["a" /* default */].DEPTH_ATTACHMENT);

      this._normalMaterial = new __WEBPACK_IMPORTED_MODULE_4_claygl_src_Material__["a" /* default */]({
          shader: new __WEBPACK_IMPORTED_MODULE_2_claygl_src_Shader__["a" /* default */](
              __WEBPACK_IMPORTED_MODULE_2_claygl_src_Shader__["a" /* default */].source('ecgl.normal.vertex'),
              __WEBPACK_IMPORTED_MODULE_2_claygl_src_Shader__["a" /* default */].source('ecgl.normal.fragment')
          )
      });
      this._normalMaterial.enableTexture(['normalMap', 'bumpMap', 'roughnessMap']);

      this._defaultNormalMap = __WEBPACK_IMPORTED_MODULE_6_claygl_src_util_texture__["a" /* default */].createBlank('#000');
      this._defaultBumpMap = __WEBPACK_IMPORTED_MODULE_6_claygl_src_util_texture__["a" /* default */].createBlank('#000');
      this._defaultRoughessMap = __WEBPACK_IMPORTED_MODULE_6_claygl_src_util_texture__["a" /* default */].createBlank('#000');


      this._debugPass = new __WEBPACK_IMPORTED_MODULE_5_claygl_src_compositor_Pass__["a" /* default */]({
          fragment: __WEBPACK_IMPORTED_MODULE_2_claygl_src_Shader__["a" /* default */].source('clay.compositor.output')
      });
      this._debugPass.setUniform('texture', this._normalTex);
      this._debugPass.material.undefine('fragment', 'OUTPUT_ALPHA');
  }

  NormalPass.prototype.getDepthTexture = function () {
      return this._depthTex;
  };

  NormalPass.prototype.getNormalTexture = function () {
      return this._normalTex;
  };

  NormalPass.prototype.update = function (renderer, scene, camera) {

      var width = renderer.getWidth();
      var height = renderer.getHeight();

      var depthTexture = this._depthTex;
      var normalTexture = this._normalTex;
      var normalMaterial = this._normalMaterial;

      depthTexture.width = width;
      depthTexture.height = height;
      normalTexture.width = width;
      normalTexture.height = height;

      var opaqueList = scene.getRenderList(camera).opaque;

      this._framebuffer.bind(renderer);
      renderer.gl.clearColor(0, 0, 0, 0);
      renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT | renderer.gl.DEPTH_BUFFER_BIT);
      renderer.gl.disable(renderer.gl.BLEND);

      renderer.renderPass(opaqueList, camera, {
          getMaterial: function () {
              return normalMaterial;
          },
          ifRender: function (object) {
              return object.renderNormal;
          },
          beforeRender: getBeforeRenderHook(
              renderer, this._defaultNormalMap, this._defaultBumpMap, this._defaultRoughessMap, this._normalMaterial
          ),
          sort: renderer.opaqueSortCompare
      });
      this._framebuffer.unbind(renderer);
  };

  NormalPass.prototype.renderDebug = function (renderer) {
      this._debugPass.render(renderer);
  };

  NormalPass.prototype.dispose = function (renderer) {
      this._depthTex.dispose(renderer);
      this._normalTex.dispose(renderer);
  };

  /* harmony default export */ __webpack_exports__["a"] = (NormalPass);

  /***/ }),
  /* 197 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("@export ecgl.normal.vertex\n\n@import ecgl.common.transformUniforms\n\n@import ecgl.common.uv.header\n\n@import ecgl.common.attributes\n\nvarying vec3 v_Normal;\nvarying vec3 v_WorldPosition;\n\n@import ecgl.common.normalMap.vertexHeader\n\n@import ecgl.common.vertexAnimation.header\n\nvoid main()\n{\n\n @import ecgl.common.vertexAnimation.main\n\n @import ecgl.common.uv.main\n\n v_Normal = normalize((worldInverseTranspose * vec4(normal, 0.0)).xyz);\n v_WorldPosition = (world * vec4(pos, 1.0)).xyz;\n\n @import ecgl.common.normalMap.vertexMain\n\n gl_Position = worldViewProjection * vec4(pos, 1.0);\n\n}\n\n\n@end\n\n\n@export ecgl.normal.fragment\n\n#define ROUGHNESS_CHANEL 0\n\nuniform bool useBumpMap;\nuniform bool useRoughnessMap;\nuniform bool doubleSide;\nuniform float roughness;\n\n@import ecgl.common.uv.fragmentHeader\n\nvarying vec3 v_Normal;\nvarying vec3 v_WorldPosition;\n\nuniform mat4 viewInverse : VIEWINVERSE;\n\n@import ecgl.common.normalMap.fragmentHeader\n@import ecgl.common.bumpMap.header\n\nuniform sampler2D roughnessMap;\n\nvoid main()\n{\n vec3 N = v_Normal;\n \n bool flipNormal = false;\n if (doubleSide) {\n vec3 eyePos = viewInverse[3].xyz;\n vec3 V = normalize(eyePos - v_WorldPosition);\n\n if (dot(N, V) < 0.0) {\n flipNormal = true;\n }\n }\n\n @import ecgl.common.normalMap.fragmentMain\n\n if (useBumpMap) {\n N = bumpNormal(v_WorldPosition, v_Normal, N);\n }\n\n float g = 1.0 - roughness;\n\n if (useRoughnessMap) {\n float g2 = 1.0 - texture2D(roughnessMap, v_DetailTexcoord)[ROUGHNESS_CHANEL];\n g = clamp(g2 + (g - 0.5) * 2.0, 0.0, 1.0);\n }\n\n if (flipNormal) {\n N = -N;\n }\n\n gl_FragColor.rgb = (N.xyz + 1.0) * 0.5;\n gl_FragColor.a = g;\n}\n@end");


  /***/ }),
  /* 198 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_claygl_src_math_Matrix4__ = __webpack_require__(7);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_claygl_src_math_Vector3__ = __webpack_require__(3);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_claygl_src_Texture2D__ = __webpack_require__(5);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_claygl_src_Texture__ = __webpack_require__(4);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_claygl_src_compositor_Pass__ = __webpack_require__(15);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_claygl_src_Shader__ = __webpack_require__(9);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_claygl_src_FrameBuffer__ = __webpack_require__(10);








  function EdgePass(opt) {
      opt = opt || {};

      this._edgePass = new __WEBPACK_IMPORTED_MODULE_4_claygl_src_compositor_Pass__["a" /* default */]({
          fragment: __WEBPACK_IMPORTED_MODULE_5_claygl_src_Shader__["a" /* default */].source('ecgl.edge')
      });

      this._edgePass.setUniform('normalTexture', opt.normalTexture);
      this._edgePass.setUniform('depthTexture', opt.depthTexture);

      this._targetTexture = new __WEBPACK_IMPORTED_MODULE_2_claygl_src_Texture2D__["a" /* default */]({
          type: __WEBPACK_IMPORTED_MODULE_3_claygl_src_Texture__["a" /* default */].HALF_FLOAT
      });

      this._frameBuffer = new __WEBPACK_IMPORTED_MODULE_6_claygl_src_FrameBuffer__["a" /* default */]();
      this._frameBuffer.attach(this._targetTexture);
  }

  EdgePass.prototype.update = function (renderer, camera, sourceTexture, frame) {
      var width = renderer.getWidth();
      var height = renderer.getHeight();
      var texture = this._targetTexture;
      texture.width = width;
      texture.height = height;
      var frameBuffer = this._frameBuffer;

      frameBuffer.bind(renderer);
      this._edgePass.setUniform('projectionInv', camera.invProjectionMatrix.array);
      this._edgePass.setUniform('textureSize', [width, height]);
      this._edgePass.setUniform('texture', sourceTexture);
      this._edgePass.render(renderer);

      frameBuffer.unbind(renderer);
  };

  EdgePass.prototype.getTargetTexture = function () {
      return this._targetTexture;
  };

  EdgePass.prototype.setParameter = function (name, val) {
      this._edgePass.setUniform(name, val);
  };

  EdgePass.prototype.dispose = function (renderer) {
      this._targetTexture.dispose(renderer);
      this._frameBuffer.dispose(renderer);
  };

  /* harmony default export */ __webpack_exports__["a"] = (EdgePass);

  /***/ }),
  /* 199 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ({
      'type' : 'compositor',
      'nodes' : [
          {
              'name': 'source',
              'type': 'texture',
              'outputs': {
                  'color': {}
              }
          },
          {
              'name': 'source_half',
              'shader': '#source(clay.compositor.downsample)',
              'inputs': {
                  'texture': 'source'
              },
              'outputs': {
                  'color': {
                      'parameters': {
                          'width': 'expr(width * 1.0 / 2)',
                          'height': 'expr(height * 1.0 / 2)',
                          'type': 'HALF_FLOAT'
                      }
                  }
              },
              'parameters' : {
                  'textureSize': 'expr( [width * 1.0, height * 1.0] )'
              }
          },


          {
              'name' : 'bright',
              'shader' : '#source(clay.compositor.bright)',
              'inputs' : {
                  'texture' : 'source_half'
              },
              'outputs' : {
                  'color' : {
                      'parameters' : {
                          'width' : 'expr(width * 1.0 / 2)',
                          'height' : 'expr(height * 1.0 / 2)',
                          'type': 'HALF_FLOAT'
                      }
                  }
              },
              'parameters' : {
                  'threshold' : 2,
                  'scale': 4,
                  'textureSize': 'expr([width * 1.0 / 2, height / 2])'
              }
          },

          {
              'name': 'bright_downsample_4',
              'shader' : '#source(clay.compositor.downsample)',
              'inputs' : {
                  'texture' : 'bright'
              },
              'outputs' : {
                  'color' : {
                      'parameters' : {
                          'width' : 'expr(width * 1.0 / 4)',
                          'height' : 'expr(height * 1.0 / 4)',
                          'type': 'HALF_FLOAT'
                      }
                  }
              },
              'parameters' : {
                  'textureSize': 'expr( [width * 1.0 / 2, height / 2] )'
              }
          },
          {
              'name': 'bright_downsample_8',
              'shader' : '#source(clay.compositor.downsample)',
              'inputs' : {
                  'texture' : 'bright_downsample_4'
              },
              'outputs' : {
                  'color' : {
                      'parameters' : {
                          'width' : 'expr(width * 1.0 / 8)',
                          'height' : 'expr(height * 1.0 / 8)',
                          'type': 'HALF_FLOAT'
                      }
                  }
              },
              'parameters' : {
                  'textureSize': 'expr( [width * 1.0 / 4, height / 4] )'
              }
          },
          {
              'name': 'bright_downsample_16',
              'shader' : '#source(clay.compositor.downsample)',
              'inputs' : {
                  'texture' : 'bright_downsample_8'
              },
              'outputs' : {
                  'color' : {
                      'parameters' : {
                          'width' : 'expr(width * 1.0 / 16)',
                          'height' : 'expr(height * 1.0 / 16)',
                          'type': 'HALF_FLOAT'
                      }
                  }
              },
              'parameters' : {
                  'textureSize': 'expr( [width * 1.0 / 8, height / 8] )'
              }
          },
          {
              'name': 'bright_downsample_32',
              'shader' : '#source(clay.compositor.downsample)',
              'inputs' : {
                  'texture' : 'bright_downsample_16'
              },
              'outputs' : {
                  'color' : {
                      'parameters' : {
                          'width' : 'expr(width * 1.0 / 32)',
                          'height' : 'expr(height * 1.0 / 32)',
                          'type': 'HALF_FLOAT'
                      }
                  }
              },
              'parameters' : {
                  'textureSize': 'expr( [width * 1.0 / 16, height / 16] )'
              }
          },


          {
              'name' : 'bright_upsample_16_blur_h',
              'shader' : '#source(clay.compositor.gaussian_blur)',
              'inputs' : {
                  'texture' : 'bright_downsample_32'
              },
              'outputs' : {
                  'color' : {
                      'parameters' : {
                          'width' : 'expr(width * 1.0 / 16)',
                          'height' : 'expr(height * 1.0 / 16)',
                          'type': 'HALF_FLOAT'
                      }
                  }
              },
              'parameters' : {
                  'blurSize' : 1,
                  'blurDir': 0.0,
                  'textureSize': 'expr( [width * 1.0 / 32, height / 32] )'
              }
          },
          {
              'name' : 'bright_upsample_16_blur_v',
              'shader' : '#source(clay.compositor.gaussian_blur)',
              'inputs' : {
                  'texture' : 'bright_upsample_16_blur_h'
              },
              'outputs' : {
                  'color' : {
                      'parameters' : {
                          'width' : 'expr(width * 1.0 / 16)',
                          'height' : 'expr(height * 1.0 / 16)',
                          'type': 'HALF_FLOAT'
                      }
                  }
              },
              'parameters' : {
                  'blurSize' : 1,
                  'blurDir': 1.0,
                  'textureSize': 'expr( [width * 1.0 / 16, height * 1.0 / 16] )'
              }
          },



          {
              'name' : 'bright_upsample_8_blur_h',
              'shader' : '#source(clay.compositor.gaussian_blur)',
              'inputs' : {
                  'texture' : 'bright_downsample_16'
              },
              'outputs' : {
                  'color' : {
                      'parameters' : {
                          'width' : 'expr(width * 1.0 / 8)',
                          'height' : 'expr(height * 1.0 / 8)',
                          'type': 'HALF_FLOAT'
                      }
                  }
              },
              'parameters' : {
                  'blurSize' : 1,
                  'blurDir': 0.0,
                  'textureSize': 'expr( [width * 1.0 / 16, height * 1.0 / 16] )'
              }
          },
          {
              'name' : 'bright_upsample_8_blur_v',
              'shader' : '#source(clay.compositor.gaussian_blur)',
              'inputs' : {
                  'texture' : 'bright_upsample_8_blur_h'
              },
              'outputs' : {
                  'color' : {
                      'parameters' : {
                          'width' : 'expr(width * 1.0 / 8)',
                          'height' : 'expr(height * 1.0 / 8)',
                          'type': 'HALF_FLOAT'
                      }
                  }
              },
              'parameters' : {
                  'blurSize' : 1,
                  'blurDir': 1.0,
                  'textureSize': 'expr( [width * 1.0 / 8, height * 1.0 / 8] )'
              }
          },
          {
              'name' : 'bright_upsample_8_blend',
              'shader' : '#source(clay.compositor.blend)',
              'inputs' : {
                  'texture1' : 'bright_upsample_8_blur_v',
                  'texture2' : 'bright_upsample_16_blur_v'
              },
              'outputs' : {
                  'color' : {
                      'parameters' : {
                          'width' : 'expr(width * 1.0 / 8)',
                          'height' : 'expr(height * 1.0 / 8)',
                          'type': 'HALF_FLOAT'
                      }
                  }
              },
              'parameters' : {
                  'weight1' : 0.3,
                  'weight2' : 0.7
              }
          },


          {
              'name' : 'bright_upsample_4_blur_h',
              'shader' : '#source(clay.compositor.gaussian_blur)',
              'inputs' : {
                  'texture' : 'bright_downsample_8'
              },
              'outputs' : {
                  'color' : {
                      'parameters' : {
                          'width' : 'expr(width * 1.0 / 4)',
                          'height' : 'expr(height * 1.0 / 4)',
                          'type': 'HALF_FLOAT'
                      }
                  }
              },
              'parameters' : {
                  'blurSize' : 1,
                  'blurDir': 0.0,
                  'textureSize': 'expr( [width * 1.0 / 8, height * 1.0 / 8] )'
              }
          },
          {
              'name' : 'bright_upsample_4_blur_v',
              'shader' : '#source(clay.compositor.gaussian_blur)',
              'inputs' : {
                  'texture' : 'bright_upsample_4_blur_h'
              },
              'outputs' : {
                  'color' : {
                      'parameters' : {
                          'width' : 'expr(width * 1.0 / 4)',
                          'height' : 'expr(height * 1.0 / 4)',
                          'type': 'HALF_FLOAT'
                      }
                  }
              },
              'parameters' : {
                  'blurSize' : 1,
                  'blurDir': 1.0,
                  'textureSize': 'expr( [width * 1.0 / 4, height * 1.0 / 4] )'
              }
          },
          {
              'name' : 'bright_upsample_4_blend',
              'shader' : '#source(clay.compositor.blend)',
              'inputs' : {
                  'texture1' : 'bright_upsample_4_blur_v',
                  'texture2' : 'bright_upsample_8_blend'
              },
              'outputs' : {
                  'color' : {
                      'parameters' : {
                          'width' : 'expr(width * 1.0 / 4)',
                          'height' : 'expr(height * 1.0 / 4)',
                          'type': 'HALF_FLOAT'
                      }
                  }
              },
              'parameters' : {
                  'weight1' : 0.3,
                  'weight2' : 0.7
              }
          },





          {
              'name' : 'bright_upsample_2_blur_h',
              'shader' : '#source(clay.compositor.gaussian_blur)',
              'inputs' : {
                  'texture' : 'bright_downsample_4'
              },
              'outputs' : {
                  'color' : {
                      'parameters' : {
                          'width' : 'expr(width * 1.0 / 2)',
                          'height' : 'expr(height * 1.0 / 2)',
                          'type': 'HALF_FLOAT'
                      }
                  }
              },
              'parameters' : {
                  'blurSize' : 1,
                  'blurDir': 0.0,
                  'textureSize': 'expr( [width * 1.0 / 4, height * 1.0 / 4] )'
              }
          },
          {
              'name' : 'bright_upsample_2_blur_v',
              'shader' : '#source(clay.compositor.gaussian_blur)',
              'inputs' : {
                  'texture' : 'bright_upsample_2_blur_h'
              },
              'outputs' : {
                  'color' : {
                      'parameters' : {
                          'width' : 'expr(width * 1.0 / 2)',
                          'height' : 'expr(height * 1.0 / 2)',
                          'type': 'HALF_FLOAT'
                      }
                  }
              },
              'parameters' : {
                  'blurSize' : 1,
                  'blurDir': 1.0,
                  'textureSize': 'expr( [width * 1.0 / 2, height * 1.0 / 2] )'
              }
          },
          {
              'name' : 'bright_upsample_2_blend',
              'shader' : '#source(clay.compositor.blend)',
              'inputs' : {
                  'texture1' : 'bright_upsample_2_blur_v',
                  'texture2' : 'bright_upsample_4_blend'
              },
              'outputs' : {
                  'color' : {
                      'parameters' : {
                          'width' : 'expr(width * 1.0 / 2)',
                          'height' : 'expr(height * 1.0 / 2)',
                          'type': 'HALF_FLOAT'
                      }
                  }
              },
              'parameters' : {
                  'weight1' : 0.3,
                  'weight2' : 0.7
              }
          },



          {
              'name' : 'bright_upsample_full_blur_h',
              'shader' : '#source(clay.compositor.gaussian_blur)',
              'inputs' : {
                  'texture' : 'bright'
              },
              'outputs' : {
                  'color' : {
                      'parameters' : {
                          'width' : 'expr(width * 1.0)',
                          'height' : 'expr(height * 1.0)',
                          'type': 'HALF_FLOAT'
                      }
                  }
              },
              'parameters' : {
                  'blurSize' : 1,
                  'blurDir': 0.0,
                  'textureSize': 'expr( [width * 1.0 / 2, height * 1.0 / 2] )'
              }
          },
          {
              'name' : 'bright_upsample_full_blur_v',
              'shader' : '#source(clay.compositor.gaussian_blur)',
              'inputs' : {
                  'texture' : 'bright_upsample_full_blur_h'
              },
              'outputs' : {
                  'color' : {
                      'parameters' : {
                          'width' : 'expr(width * 1.0)',
                          'height' : 'expr(height * 1.0)',
                          'type': 'HALF_FLOAT'
                      }
                  }
              },
              'parameters' : {
                  'blurSize' : 1,
                  'blurDir': 1.0,
                  'textureSize': 'expr( [width * 1.0, height * 1.0] )'
              }
          },
          {
              'name' : 'bloom_composite',
              'shader' : '#source(clay.compositor.blend)',
              'inputs' : {
                  'texture1' : 'bright_upsample_full_blur_v',
                  'texture2' : 'bright_upsample_2_blend'
              },
              'outputs' : {
                  'color' : {
                      'parameters' : {
                          'width' : 'expr(width * 1.0)',
                          'height' : 'expr(height * 1.0)',
                          'type': 'HALF_FLOAT'
                      }
                  }
              },
              'parameters' : {
                  'weight1' : 0.3,
                  'weight2' : 0.7
              }
          },


          {
              'name': 'coc',
              'shader': '#source(ecgl.dof.coc)',
              'outputs': {
                  'color': {
                      'parameters': {
                          'minFilter': 'NEAREST',
                          'magFilter': 'NEAREST',
                          'width': 'expr(width * 1.0)',
                          'height': 'expr(height * 1.0)'
                      }
                  }
              },
              'parameters': {
                  'focalDist': 50,
                  'focalRange': 30
              }
          },

          {
              'name': 'dof_far_blur',
              'shader': '#source(ecgl.dof.diskBlur)',
              'inputs': {
                  'texture': 'source',
                  'coc': 'coc'
              },
              'outputs': {
                  'color': {
                      'parameters': {
                          'width': 'expr(width * 1.0)',
                          'height': 'expr(height * 1.0)',
                          'type': 'HALF_FLOAT'
                      }
                  }
              },
              'parameters': {
                  'textureSize': 'expr( [width * 1.0, height * 1.0] )'
              }
          },
          {
              'name': 'dof_near_blur',
              'shader': '#source(ecgl.dof.diskBlur)',
              'inputs': {
                  'texture': 'source',
                  'coc': 'coc'
              },
              'outputs': {
                  'color': {
                      'parameters': {
                          'width': 'expr(width * 1.0)',
                          'height': 'expr(height * 1.0)',
                          'type': 'HALF_FLOAT'
                      }
                  }
              },
              'parameters': {
                  'textureSize': 'expr( [width * 1.0, height * 1.0] )'
              },
              'defines': {
                  'BLUR_NEARFIELD': null
              }
          },


          {
              'name': 'dof_coc_blur',
              'shader': '#source(ecgl.dof.diskBlur)',
              'inputs': {
                  'texture': 'coc'
              },
              'outputs': {
                  'color': {
                      'parameters': {
                          'minFilter': 'NEAREST',
                          'magFilter': 'NEAREST',
                          'width': 'expr(width * 1.0)',
                          'height': 'expr(height * 1.0)'
                      }
                  }
              },
              'parameters': {
                  'textureSize': 'expr( [width * 1.0, height * 1.0] )'
              },
              'defines': {
                  'BLUR_COC': null
              }
          },

          {
              'name': 'dof_composite',
              'shader': '#source(ecgl.dof.composite)',
              'inputs': {
                  'original': 'source',
                  'blurred': 'dof_far_blur',
                  'nearfield': 'dof_near_blur',
                  'coc': 'coc',
                  'nearcoc': 'dof_coc_blur'
              },
              'outputs': {
                  'color': {
                      'parameters': {
                          'width': 'expr(width * 1.0)',
                          'height': 'expr(height * 1.0)',
                          'type': 'HALF_FLOAT'
                      }
                  }
              }
          },
          {
              'name' : 'composite',
              'shader' : '#source(clay.compositor.hdr.composite)',
              'inputs' : {
                  'texture': 'source',
                  'bloom' : 'bloom_composite'
              },
              'defines': {
                  // Images are all premultiplied alpha before composite because of blending.
                  // 'PREMULTIPLY_ALPHA': null,
                  // 'DEBUG': 2
              }
          },
          {
              'name' : 'FXAA',
              'shader' : '#source(clay.compositor.fxaa)',
              'inputs' : {
                  'texture' : 'composite'
              }
          }
      ]
  });

  /***/ }),
  /* 200 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("@export ecgl.dof.coc\n\nuniform sampler2D depth;\n\nuniform float zNear: 0.1;\nuniform float zFar: 2000;\n\nuniform float focalDistance: 3;\nuniform float focalRange: 1;\nuniform float focalLength: 30;\nuniform float fstop: 2.8;\n\nvarying vec2 v_Texcoord;\n\n@import clay.util.encode_float\n\nvoid main()\n{\n float z = texture2D(depth, v_Texcoord).r * 2.0 - 1.0;\n\n float dist = 2.0 * zNear * zFar / (zFar + zNear - z * (zFar - zNear));\n\n float aperture = focalLength / fstop;\n\n float coc;\n\n float uppper = focalDistance + focalRange;\n float lower = focalDistance - focalRange;\n if (dist <= uppper && dist >= lower) {\n coc = 0.5;\n }\n else {\n float focalAdjusted = dist > uppper ? uppper : lower;\n\n coc = abs(aperture * (focalLength * (dist - focalAdjusted)) / (dist * (focalAdjusted - focalLength)));\n coc = clamp(coc, 0.0, 2.0) / 2.00001;\n\n if (dist < lower) {\n coc = -coc;\n }\n coc = coc * 0.5 + 0.5;\n }\n\n gl_FragColor = encodeFloat(coc);\n}\n@end\n\n\n@export ecgl.dof.composite\n\n#define DEBUG 0\n\nuniform sampler2D original;\nuniform sampler2D blurred;\nuniform sampler2D nearfield;\nuniform sampler2D coc;\nuniform sampler2D nearcoc;\nvarying vec2 v_Texcoord;\n\n@import clay.util.rgbm\n@import clay.util.float\n\nvoid main()\n{\n vec4 blurredColor = texture2D(blurred, v_Texcoord);\n vec4 originalColor = texture2D(original, v_Texcoord);\n\n float fCoc = decodeFloat(texture2D(coc, v_Texcoord));\n\n fCoc = abs(fCoc * 2.0 - 1.0);\n\n float weight = smoothstep(0.0, 1.0, fCoc);\n \n#ifdef NEARFIELD_ENABLED\n vec4 nearfieldColor = texture2D(nearfield, v_Texcoord);\n float fNearCoc = decodeFloat(texture2D(nearcoc, v_Texcoord));\n fNearCoc = abs(fNearCoc * 2.0 - 1.0);\n\n gl_FragColor = encodeHDR(\n mix(\n nearfieldColor, mix(originalColor, blurredColor, weight),\n pow(1.0 - fNearCoc, 4.0)\n )\n );\n#else\n gl_FragColor = encodeHDR(mix(originalColor, blurredColor, weight));\n#endif\n\n}\n\n@end\n\n\n\n@export ecgl.dof.diskBlur\n\n#define POISSON_KERNEL_SIZE 16;\n\nuniform sampler2D texture;\nuniform sampler2D coc;\nvarying vec2 v_Texcoord;\n\nuniform float blurRadius : 10.0;\nuniform vec2 textureSize : [512.0, 512.0];\n\nuniform vec2 poissonKernel[POISSON_KERNEL_SIZE];\n\nuniform float percent;\n\nfloat nrand(const in vec2 n) {\n return fract(sin(dot(n.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n@import clay.util.rgbm\n@import clay.util.float\n\n\nvoid main()\n{\n vec2 offset = blurRadius / textureSize;\n\n float rnd = 6.28318 * nrand(v_Texcoord + 0.07 * percent );\n float cosa = cos(rnd);\n float sina = sin(rnd);\n vec4 basis = vec4(cosa, -sina, sina, cosa);\n\n#if !defined(BLUR_NEARFIELD) && !defined(BLUR_COC)\n offset *= abs(decodeFloat(texture2D(coc, v_Texcoord)) * 2.0 - 1.0);\n#endif\n\n#ifdef BLUR_COC\n float cocSum = 0.0;\n#else\n vec4 color = vec4(0.0);\n#endif\n\n\n float weightSum = 0.0;\n\n for (int i = 0; i < POISSON_KERNEL_SIZE; i++) {\n vec2 ofs = poissonKernel[i];\n\n ofs = vec2(dot(ofs, basis.xy), dot(ofs, basis.zw));\n\n vec2 uv = v_Texcoord + ofs * offset;\n vec4 texel = texture2D(texture, uv);\n\n float w = 1.0;\n#ifdef BLUR_COC\n float fCoc = decodeFloat(texel) * 2.0 - 1.0;\n cocSum += clamp(fCoc, -1.0, 0.0) * w;\n#else\n texel = texel;\n #if !defined(BLUR_NEARFIELD)\n float fCoc = decodeFloat(texture2D(coc, uv)) * 2.0 - 1.0;\n w *= abs(fCoc);\n #endif\n texel.rgb *= texel.a;\n color += texel * w;\n#endif\n\n weightSum += w;\n }\n\n#ifdef BLUR_COC\n gl_FragColor = encodeFloat(clamp(cocSum / weightSum, -1.0, 0.0) * 0.5 + 0.5);\n#else\n color /= weightSum;\n color.rgb /= (color.a + 0.0001);\n gl_FragColor = color;\n#endif\n}\n\n@end");


  /***/ }),
  /* 201 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("@export ecgl.edge\n\nuniform sampler2D texture;\n\nuniform sampler2D normalTexture;\nuniform sampler2D depthTexture;\n\nuniform mat4 projectionInv;\n\nuniform vec2 textureSize;\n\nuniform vec4 edgeColor: [0,0,0,0.8];\n\nvarying vec2 v_Texcoord;\n\nvec3 packColor(vec2 coord) {\n float z = texture2D(depthTexture, coord).r * 2.0 - 1.0;\n vec4 p = vec4(v_Texcoord * 2.0 - 1.0, z, 1.0);\n vec4 p4 = projectionInv * p;\n\n return vec3(\n texture2D(normalTexture, coord).rg,\n -p4.z / p4.w / 5.0\n );\n}\n\nvoid main() {\n vec2 cc = v_Texcoord;\n vec3 center = packColor(cc);\n\n float size = clamp(1.0 - (center.z - 10.0) / 100.0, 0.0, 1.0) * 0.5;\n float dx = size / textureSize.x;\n float dy = size / textureSize.y;\n\n vec2 coord;\n vec3 topLeft = packColor(cc+vec2(-dx, -dy));\n vec3 top = packColor(cc+vec2(0.0, -dy));\n vec3 topRight = packColor(cc+vec2(dx, -dy));\n vec3 left = packColor(cc+vec2(-dx, 0.0));\n vec3 right = packColor(cc+vec2(dx, 0.0));\n vec3 bottomLeft = packColor(cc+vec2(-dx, dy));\n vec3 bottom = packColor(cc+vec2(0.0, dy));\n vec3 bottomRight = packColor(cc+vec2(dx, dy));\n\n vec3 v = -topLeft-2.0*top-topRight+bottomLeft+2.0*bottom+bottomRight;\n vec3 h = -bottomLeft-2.0*left-topLeft+bottomRight+2.0*right+topRight;\n\n float edge = sqrt(dot(h, h) + dot(v, v));\n\n edge = smoothstep(0.8, 1.0, edge);\n\n gl_FragColor = mix(texture2D(texture, v_Texcoord), vec4(edgeColor.rgb, 1.0), edgeColor.a * edge);\n}\n@end");


  /***/ }),
  /* 202 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__halton__ = __webpack_require__(49);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_claygl_src_compositor_Pass__ = __webpack_require__(15);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_claygl_src_FrameBuffer__ = __webpack_require__(10);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_claygl_src_Texture2D__ = __webpack_require__(5);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_claygl_src_Shader__ = __webpack_require__(9);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_claygl_src_math_Matrix4__ = __webpack_require__(7);
  // Temporal Super Sample for static Scene







  function TemporalSuperSampling (frames) {
      var haltonSequence = [];

      for (var i = 0; i < 30; i++) {
          haltonSequence.push([Object(__WEBPACK_IMPORTED_MODULE_0__halton__["a" /* default */])(i, 2), Object(__WEBPACK_IMPORTED_MODULE_0__halton__["a" /* default */])(i, 3)]);
      }

      this._haltonSequence = haltonSequence;

      this._frame = 0;

      this._sourceTex = new __WEBPACK_IMPORTED_MODULE_3_claygl_src_Texture2D__["a" /* default */]();
      this._sourceFb = new __WEBPACK_IMPORTED_MODULE_2_claygl_src_FrameBuffer__["a" /* default */]();
      this._sourceFb.attach(this._sourceTex);

      // Frame texture before temporal supersampling
      this._prevFrameTex = new __WEBPACK_IMPORTED_MODULE_3_claygl_src_Texture2D__["a" /* default */]();
      this._outputTex = new __WEBPACK_IMPORTED_MODULE_3_claygl_src_Texture2D__["a" /* default */]();

      var blendPass = this._blendPass = new __WEBPACK_IMPORTED_MODULE_1_claygl_src_compositor_Pass__["a" /* default */]({
          fragment: __WEBPACK_IMPORTED_MODULE_4_claygl_src_Shader__["a" /* default */].source('clay.compositor.blend')
      });
      blendPass.material.disableTexturesAll();
      blendPass.material.enableTexture(['texture1', 'texture2']);

      this._blendFb = new __WEBPACK_IMPORTED_MODULE_2_claygl_src_FrameBuffer__["a" /* default */]({
          depthBuffer: false
      });

      this._outputPass = new __WEBPACK_IMPORTED_MODULE_1_claygl_src_compositor_Pass__["a" /* default */]({
          fragment: __WEBPACK_IMPORTED_MODULE_4_claygl_src_Shader__["a" /* default */].source('clay.compositor.output'),
          // TODO, alpha is premultiplied?
          blendWithPrevious: true
      });
      this._outputPass.material.define('fragment', 'OUTPUT_ALPHA');
      this._outputPass.material.blend = function (_gl) {
          // FIXME.
          // Output is premultiplied alpha when BLEND is enabled ?
          // http://stackoverflow.com/questions/2171085/opengl-blending-with-previous-contents-of-framebuffer
          _gl.blendEquationSeparate(_gl.FUNC_ADD, _gl.FUNC_ADD);
          _gl.blendFuncSeparate(_gl.ONE, _gl.ONE_MINUS_SRC_ALPHA, _gl.ONE, _gl.ONE_MINUS_SRC_ALPHA);
      };
  }

  TemporalSuperSampling.prototype = {

      constructor: TemporalSuperSampling,

      /**
       * Jitter camera projectionMatrix
       * @parma {clay.Renderer} renderer
       * @param {clay.Camera} camera
       */
      jitterProjection: function (renderer, camera) {
          var viewport = renderer.viewport;
          var dpr = viewport.devicePixelRatio || renderer.getDevicePixelRatio();
          var width = viewport.width * dpr;
          var height = viewport.height * dpr;

          var offset = this._haltonSequence[this._frame % this._haltonSequence.length];

          var translationMat = new __WEBPACK_IMPORTED_MODULE_5_claygl_src_math_Matrix4__["a" /* default */]();
          translationMat.array[12] = (offset[0] * 2.0 - 1.0) / width;
          translationMat.array[13] = (offset[1] * 2.0 - 1.0) / height;

          __WEBPACK_IMPORTED_MODULE_5_claygl_src_math_Matrix4__["a" /* default */].mul(camera.projectionMatrix, translationMat, camera.projectionMatrix);

          __WEBPACK_IMPORTED_MODULE_5_claygl_src_math_Matrix4__["a" /* default */].invert(camera.invProjectionMatrix, camera.projectionMatrix);
      },

      /**
       * Reset accumulating frame
       */
      resetFrame: function () {
          this._frame = 0;
      },

      /**
       * Return current frame
       */
      getFrame: function () {
          return this._frame;
      },

      /**
       * Get source framebuffer for usage
       */
      getSourceFrameBuffer: function () {
          return this._sourceFb;
      },

      getOutputTexture: function () {
          return this._outputTex;
      },

      resize: function (width, height) {
          this._prevFrameTex.width = width;
          this._prevFrameTex.height = height;

          this._outputTex.width = width;
          this._outputTex.height = height;

          this._sourceTex.width = width;
          this._sourceTex.height = height;

          this._prevFrameTex.dirty();
          this._outputTex.dirty();
          this._sourceTex.dirty();
      },

      isFinished: function () {
          return this._frame >= this._haltonSequence.length;
      },

      render: function (renderer, sourceTex, notOutput) {
          var blendPass = this._blendPass;
          if (this._frame === 0) {
              // Direct output
              blendPass.setUniform('weight1', 0);
              blendPass.setUniform('weight2', 1);
          }
          else {
              blendPass.setUniform('weight1', 0.9);
              blendPass.setUniform('weight2', 0.1);
          }
          blendPass.setUniform('texture1', this._prevFrameTex);
          blendPass.setUniform('texture2', sourceTex || this._sourceTex);

          this._blendFb.attach(this._outputTex);
          this._blendFb.bind(renderer);
          blendPass.render(renderer);
          this._blendFb.unbind(renderer);

          if (!notOutput) {
              this._outputPass.setUniform('texture', this._outputTex);
              this._outputPass.render(renderer);
          }

          // Swap texture
          var tmp = this._prevFrameTex;
          this._prevFrameTex = this._outputTex;
          this._outputTex = tmp;

          this._frame++;
      },

      dispose: function (renderer) {
          this._sourceFb.dispose(renderer);
          this._blendFb.dispose(renderer);
          this._prevFrameTex.dispose(renderer);
          this._outputTex.dispose(renderer);
          this._sourceTex.dispose(renderer);
          this._outputPass.dispose(renderer);
          this._blendPass.dispose(renderer);
      }
  };

  /* harmony default export */ __webpack_exports__["a"] = (TemporalSuperSampling);

  /***/ }),
  /* 203 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__geo3D_Geo3DModel__ = __webpack_require__(204);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__geo3D_Geo3DView__ = __webpack_require__(205);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__coord_geo3DCreator__ = __webpack_require__(97);







  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerAction({
      type: 'geo3DChangeCamera',
      event: 'geo3dcamerachanged',
      update: 'series:updateCamera'
  }, function (payload, ecModel) {
      ecModel.eachComponent({
          mainType: 'geo3D', query: payload
      }, function (componentModel) {
          componentModel.setView(payload);
      });
  });

  /***/ }),
  /* 204 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_componentViewControlMixin__ = __webpack_require__(44);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_componentPostEffectMixin__ = __webpack_require__(28);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_componentLightMixin__ = __webpack_require__(29);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_componentShadingMixin__ = __webpack_require__(31);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__coord_geo3D_geo3DModelMixin__ = __webpack_require__(95);







  var Geo3DModel = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendComponentModel({

      type: 'geo3D',

      layoutMode: 'box',

      coordinateSystem: null,

      optionUpdated: function () {
          var option = this.option;

          option.regions = this.getFilledRegions(option.regions, option.map);

          var dimensions = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.helper.completeDimensions(['value'], option.data, {
              encodeDef: this.get('encode'),
              dimsDef: this.get('dimensions')
          });
          var list = new __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.List(dimensions, this);
          list.initData(option.regions);

          var regionModelMap = {};
          list.each(function (idx) {
              var name = list.getName(idx);
              var itemModel = list.getItemModel(idx);
              regionModelMap[name] = itemModel;
          });

          this._regionModelMap = regionModelMap;

          this._data = list;
      },

      getData: function () {
          return this._data;
      },

      getRegionModel: function (idx) {
          var name = this.getData().getName(idx);
          return this._regionModelMap[name] || new __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.Model(null, this);
      },

      getRegionPolygonCoords: function (idx) {
          var name = this.getData().getName(idx);
          var region = this.coordinateSystem.getRegion(name);

          return region ? region.geometries : [];
      },

      /**
       * Format label
       * @param {string} name Region name
       * @param {string} [status='normal'] 'normal' or 'emphasis'
       * @return {string}
       */
      getFormattedLabel: function (dataIndex, status) {
          var name = this._data.getName(dataIndex);
          var regionModel = this.getRegionModel(name);
          var formatter = regionModel.get(status === 'normal' ? ['label', 'formatter'] : ['emphasis', 'label', 'formatter']);
          if (formatter == null) {
              formatter = regionModel.get(['label', 'formatter']);
          }
          var params = {
              name: name
          };
          if (typeof formatter === 'function') {
              params.status = status;
              return formatter(params);
          }
          else if (typeof formatter === 'string') {
              var serName = params.seriesName;
              return formatter.replace('{a}', serName != null ? serName : '');
          }
          else {
              return name;
          }
      },

      defaultOption: {

          // itemStyle: {},
          // height,
          // label: {}
          // realisticMaterial
          regions: []
      }
  });

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge(Geo3DModel.prototype, __WEBPACK_IMPORTED_MODULE_5__coord_geo3D_geo3DModelMixin__["a" /* default */]);

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge(Geo3DModel.prototype, __WEBPACK_IMPORTED_MODULE_1__common_componentViewControlMixin__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge(Geo3DModel.prototype, __WEBPACK_IMPORTED_MODULE_2__common_componentPostEffectMixin__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge(Geo3DModel.prototype, __WEBPACK_IMPORTED_MODULE_3__common_componentLightMixin__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge(Geo3DModel.prototype, __WEBPACK_IMPORTED_MODULE_4__common_componentShadingMixin__["a" /* default */]);

  /***/ }),
  /* 205 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common_Geo3DBuilder__ = __webpack_require__(63);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_graphicGL__ = __webpack_require__(1);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_OrbitControl__ = __webpack_require__(45);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_SceneHelper__ = __webpack_require__(30);







  /* unused harmony default export */ var _unused_webpack_default_export = (__WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts___default.a.extendComponentView({

      type: 'geo3D',

      __ecgl__: true,

      init: function (ecModel, api) {

          this._geo3DBuilder = new __WEBPACK_IMPORTED_MODULE_0__common_Geo3DBuilder__["a" /* default */](api);
          this.groupGL = new __WEBPACK_IMPORTED_MODULE_2__util_graphicGL__["a" /* default */].Node();

          this._lightRoot = new __WEBPACK_IMPORTED_MODULE_2__util_graphicGL__["a" /* default */].Node();
          this._sceneHelper = new __WEBPACK_IMPORTED_MODULE_4__common_SceneHelper__["a" /* default */](this._lightRoot);
          this._sceneHelper.initLight(this._lightRoot);

          this._control = new __WEBPACK_IMPORTED_MODULE_3__util_OrbitControl__["a" /* default */]({
              zr: api.getZr()
          });
          this._control.init();
      },

      render: function (geo3DModel, ecModel, api) {
          this.groupGL.add(this._geo3DBuilder.rootNode);

          var geo3D = geo3DModel.coordinateSystem;

          if (!geo3D || !geo3D.viewGL) {
              return;
          }

          // Always have light.
          geo3D.viewGL.add(this._lightRoot);

          if (geo3DModel.get('show')) {
              geo3D.viewGL.add(this.groupGL);
          }
          else {
              geo3D.viewGL.remove(this.groupGL);
          }

          var control = this._control;
          control.setViewGL(geo3D.viewGL);

          var viewControlModel = geo3DModel.getModel('viewControl');
          control.setFromViewControlModel(viewControlModel, 0);

          this._sceneHelper.setScene(geo3D.viewGL.scene);
          this._sceneHelper.updateLight(geo3DModel);

          // Set post effect
          geo3D.viewGL.setPostEffect(geo3DModel.getModel('postEffect'), api);
          geo3D.viewGL.setTemporalSuperSampling(geo3DModel.getModel('temporalSuperSampling'));

          // Must update after geo3D.viewGL.setPostEffect
          this._geo3DBuilder.update(geo3DModel, ecModel, api, 0, geo3DModel.getData().count());
          var srgbDefineMethod = geo3D.viewGL.isLinearSpace() ? 'define' : 'undefine';
          this._geo3DBuilder.rootNode.traverse(function (mesh) {
              if (mesh.material) {
                  mesh.material[srgbDefineMethod]('fragment', 'SRGB_DECODE');
              }
          });

          control.off('update');
          control.on('update', function () {
              api.dispatchAction({
                  type: 'geo3DChangeCamera',
                  alpha: control.getAlpha(),
                  beta: control.getBeta(),
                  distance: control.getDistance(),
                  center: control.getCenter(),
                  from: this.uid,
                  geo3DId: geo3DModel.id
              });
          });
          control.update();
      },

      afterRender: function (geo3DModel, ecModel, api, layerGL) {
          var renderer = layerGL.renderer;
          this._sceneHelper.updateAmbientCubemap(renderer, geo3DModel, api);

          this._sceneHelper.updateSkybox(renderer, geo3DModel, api);
      },

      dispose: function () {
          this._control.dispose();
      }
  }));

  /***/ }),
  /* 206 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  // https://github.com/mapbox/earcut/blob/master/src/earcut.js

  /* harmony default export */ __webpack_exports__["a"] = (earcut);

  function earcut(data, holeIndices, dim) {

      dim = dim || 2;

      var hasHoles = holeIndices && holeIndices.length,
          outerLen = hasHoles ? holeIndices[0] * dim : data.length,
          outerNode = linkedList(data, 0, outerLen, dim, true),
          triangles = [];

      if (!outerNode) return triangles;

      var minX, minY, maxX, maxY, x, y, size;

      if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);

      // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
      if (data.length > 80 * dim) {
          minX = maxX = data[0];
          minY = maxY = data[1];

          for (var i = dim; i < outerLen; i += dim) {
              x = data[i];
              y = data[i + 1];
              if (x < minX) minX = x;
              if (y < minY) minY = y;
              if (x > maxX) maxX = x;
              if (y > maxY) maxY = y;
          }

          // minX, minY and size are later used to transform coords into integers for z-order calculation
          size = Math.max(maxX - minX, maxY - minY);
      }

      earcutLinked(outerNode, triangles, dim, minX, minY, size);

      return triangles;
  }

  // create a circular doubly linked list from polygon points in the specified winding order
  function linkedList(data, start, end, dim, clockwise) {
      var i, last;

      if (clockwise === (signedArea(data, start, end, dim) > 0)) {
          for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);
      } else {
          for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);
      }

      if (last && equals(last, last.next)) {
          removeNode(last);
          last = last.next;
      }

      return last;
  }

  // eliminate colinear or duplicate points
  function filterPoints(start, end) {
      if (!start) return start;
      if (!end) end = start;

      var p = start,
          again;
      do {
          again = false;

          if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
              removeNode(p);
              p = end = p.prev;
              if (p === p.next) return null;
              again = true;

          } else {
              p = p.next;
          }
      } while (again || p !== end);

      return end;
  }

  // main ear slicing loop which triangulates a polygon (given as a linked list)
  function earcutLinked(ear, triangles, dim, minX, minY, size, pass) {
      if (!ear) return;

      // interlink polygon nodes in z-order
      if (!pass && size) indexCurve(ear, minX, minY, size);

      var stop = ear,
          prev, next;

      // iterate through ears, slicing them one by one
      while (ear.prev !== ear.next) {
          prev = ear.prev;
          next = ear.next;

          if (size ? isEarHashed(ear, minX, minY, size) : isEar(ear)) {
              // cut off the triangle
              triangles.push(prev.i / dim);
              triangles.push(ear.i / dim);
              triangles.push(next.i / dim);

              removeNode(ear);

              // skipping the next vertice leads to less sliver triangles
              ear = next.next;
              stop = next.next;

              continue;
          }

          ear = next;

          // if we looped through the whole remaining polygon and can't find any more ears
          if (ear === stop) {
              // try filtering points and slicing again
              if (!pass) {
                  earcutLinked(filterPoints(ear), triangles, dim, minX, minY, size, 1);

              // if this didn't work, try curing all small self-intersections locally
              } else if (pass === 1) {
                  ear = cureLocalIntersections(ear, triangles, dim);
                  earcutLinked(ear, triangles, dim, minX, minY, size, 2);

              // as a last resort, try splitting the remaining polygon into two
              } else if (pass === 2) {
                  splitEarcut(ear, triangles, dim, minX, minY, size);
              }

              break;
          }
      }
  }

  // check whether a polygon node forms a valid ear with adjacent nodes
  function isEar(ear) {
      var a = ear.prev,
          b = ear,
          c = ear.next;

      if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

      // now make sure we don't have other points inside the potential ear
      var p = ear.next.next;

      while (p !== ear.prev) {
          if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
              area(p.prev, p, p.next) >= 0) return false;
          p = p.next;
      }

      return true;
  }

  function isEarHashed(ear, minX, minY, size) {
      var a = ear.prev,
          b = ear,
          c = ear.next;

      if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

      // triangle bbox; min & max are calculated like this for speed
      var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),
          minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),
          maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),
          maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);

      // z-order range for the current triangle bbox;
      var minZ = zOrder(minTX, minTY, minX, minY, size),
          maxZ = zOrder(maxTX, maxTY, minX, minY, size);

      // first look for points inside the triangle in increasing z-order
      var p = ear.nextZ;

      while (p && p.z <= maxZ) {
          if (p !== ear.prev && p !== ear.next &&
              pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
              area(p.prev, p, p.next) >= 0) return false;
          p = p.nextZ;
      }

      // then look for points in decreasing z-order
      p = ear.prevZ;

      while (p && p.z >= minZ) {
          if (p !== ear.prev && p !== ear.next &&
              pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
              area(p.prev, p, p.next) >= 0) return false;
          p = p.prevZ;
      }

      return true;
  }

  // go through all polygon nodes and cure small local self-intersections
  function cureLocalIntersections(start, triangles, dim) {
      var p = start;
      do {
          var a = p.prev,
              b = p.next.next;

          if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {

              triangles.push(a.i / dim);
              triangles.push(p.i / dim);
              triangles.push(b.i / dim);

              // remove two nodes involved
              removeNode(p);
              removeNode(p.next);

              p = start = b;
          }
          p = p.next;
      } while (p !== start);

      return p;
  }

  // try splitting polygon into two and triangulate them independently
  function splitEarcut(start, triangles, dim, minX, minY, size) {
      // look for a valid diagonal that divides the polygon into two
      var a = start;
      do {
          var b = a.next.next;
          while (b !== a.prev) {
              if (a.i !== b.i && isValidDiagonal(a, b)) {
                  // split the polygon in two by the diagonal
                  var c = splitPolygon(a, b);

                  // filter colinear points around the cuts
                  a = filterPoints(a, a.next);
                  c = filterPoints(c, c.next);

                  // run earcut on each half
                  earcutLinked(a, triangles, dim, minX, minY, size);
                  earcutLinked(c, triangles, dim, minX, minY, size);
                  return;
              }
              b = b.next;
          }
          a = a.next;
      } while (a !== start);
  }

  // link every hole into the outer loop, producing a single-ring polygon without holes
  function eliminateHoles(data, holeIndices, outerNode, dim) {
      var queue = [],
          i, len, start, end, list;

      for (i = 0, len = holeIndices.length; i < len; i++) {
          start = holeIndices[i] * dim;
          end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
          list = linkedList(data, start, end, dim, false);
          if (list === list.next) list.steiner = true;
          queue.push(getLeftmost(list));
      }

      queue.sort(compareX);

      // process holes from left to right
      for (i = 0; i < queue.length; i++) {
          eliminateHole(queue[i], outerNode);
          outerNode = filterPoints(outerNode, outerNode.next);
      }

      return outerNode;
  }

  function compareX(a, b) {
      return a.x - b.x;
  }

  // find a bridge between vertices that connects hole with an outer ring and and link it
  function eliminateHole(hole, outerNode) {
      outerNode = findHoleBridge(hole, outerNode);
      if (outerNode) {
          var b = splitPolygon(outerNode, hole);
          filterPoints(b, b.next);
      }
  }

  // David Eberly's algorithm for finding a bridge between hole and outer polygon
  function findHoleBridge(hole, outerNode) {
      var p = outerNode,
          hx = hole.x,
          hy = hole.y,
          qx = -Infinity,
          m;

      // find a segment intersected by a ray from the hole's leftmost point to the left;
      // segment's endpoint with lesser x will be potential connection point
      do {
          if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
              var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
              if (x <= hx && x > qx) {
                  qx = x;
                  if (x === hx) {
                      if (hy === p.y) return p;
                      if (hy === p.next.y) return p.next;
                  }
                  m = p.x < p.next.x ? p : p.next;
              }
          }
          p = p.next;
      } while (p !== outerNode);

      if (!m) return null;

      if (hx === qx) return m.prev; // hole touches outer segment; pick lower endpoint

      // look for points inside the triangle of hole point, segment intersection and endpoint;
      // if there are no points found, we have a valid connection;
      // otherwise choose the point of the minimum angle with the ray as connection point

      var stop = m,
          mx = m.x,
          my = m.y,
          tanMin = Infinity,
          tan;

      p = m.next;

      while (p !== stop) {
          if (hx >= p.x && p.x >= mx && hx !== p.x &&
                  pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {

              tan = Math.abs(hy - p.y) / (hx - p.x); // tangential

              if ((tan < tanMin || (tan === tanMin && p.x > m.x)) && locallyInside(p, hole)) {
                  m = p;
                  tanMin = tan;
              }
          }

          p = p.next;
      }

      return m;
  }

  // interlink polygon nodes in z-order
  function indexCurve(start, minX, minY, size) {
      var p = start;
      do {
          if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, size);
          p.prevZ = p.prev;
          p.nextZ = p.next;
          p = p.next;
      } while (p !== start);

      p.prevZ.nextZ = null;
      p.prevZ = null;

      sortLinked(p);
  }

  // Simon Tatham's linked list merge sort algorithm
  // http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
  function sortLinked(list) {
      var i, p, q, e, tail, numMerges, pSize, qSize,
          inSize = 1;

      do {
          p = list;
          list = null;
          tail = null;
          numMerges = 0;

          while (p) {
              numMerges++;
              q = p;
              pSize = 0;
              for (i = 0; i < inSize; i++) {
                  pSize++;
                  q = q.nextZ;
                  if (!q) break;
              }
              qSize = inSize;

              while (pSize > 0 || (qSize > 0 && q)) {

                  if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
                      e = p;
                      p = p.nextZ;
                      pSize--;
                  } else {
                      e = q;
                      q = q.nextZ;
                      qSize--;
                  }

                  if (tail) tail.nextZ = e;
                  else list = e;

                  e.prevZ = tail;
                  tail = e;
              }

              p = q;
          }

          tail.nextZ = null;
          inSize *= 2;

      } while (numMerges > 1);

      return list;
  }

  // z-order of a point given coords and size of the data bounding box
  function zOrder(x, y, minX, minY, size) {
      // coords are transformed into non-negative 15-bit integer range
      x = 32767 * (x - minX) / size;
      y = 32767 * (y - minY) / size;

      x = (x | (x << 8)) & 0x00FF00FF;
      x = (x | (x << 4)) & 0x0F0F0F0F;
      x = (x | (x << 2)) & 0x33333333;
      x = (x | (x << 1)) & 0x55555555;

      y = (y | (y << 8)) & 0x00FF00FF;
      y = (y | (y << 4)) & 0x0F0F0F0F;
      y = (y | (y << 2)) & 0x33333333;
      y = (y | (y << 1)) & 0x55555555;

      return x | (y << 1);
  }

  // find the leftmost node of a polygon ring
  function getLeftmost(start) {
      var p = start,
          leftmost = start;
      do {
          if (p.x < leftmost.x) leftmost = p;
          p = p.next;
      } while (p !== start);

      return leftmost;
  }

  // check if a point lies within a convex triangle
  function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
      return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&
             (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&
             (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
  }

  // check if a diagonal between two polygon nodes is valid (lies in polygon interior)
  function isValidDiagonal(a, b) {
      return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) &&
             locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b);
  }

  // signed area of a triangle
  function area(p, q, r) {
      return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
  }

  // check if two points are equal
  function equals(p1, p2) {
      return p1.x === p2.x && p1.y === p2.y;
  }

  // check if two segments intersect
  function intersects(p1, q1, p2, q2) {
      if ((equals(p1, q1) && equals(p2, q2)) ||
          (equals(p1, q2) && equals(p2, q1))) return true;
      return area(p1, q1, p2) > 0 !== area(p1, q1, q2) > 0 &&
             area(p2, q2, p1) > 0 !== area(p2, q2, q1) > 0;
  }

  // check if a polygon diagonal intersects any polygon segments
  function intersectsPolygon(a, b) {
      var p = a;
      do {
          if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
                  intersects(p, p.next, a, b)) return true;
          p = p.next;
      } while (p !== a);

      return false;
  }

  // check if a polygon diagonal is locally inside the polygon
  function locallyInside(a, b) {
      return area(a.prev, a, a.next) < 0 ?
          area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :
          area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
  }

  // check if the middle point of a polygon diagonal is inside the polygon
  function middleInside(a, b) {
      var p = a,
          inside = false,
          px = (a.x + b.x) / 2,
          py = (a.y + b.y) / 2;
      do {
          if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&
                  (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))
              inside = !inside;
          p = p.next;
      } while (p !== a);

      return inside;
  }

  // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
  // if one belongs to the outer ring and another to a hole, it merges it into a single ring
  function splitPolygon(a, b) {
      var a2 = new Node(a.i, a.x, a.y),
          b2 = new Node(b.i, b.x, b.y),
          an = a.next,
          bp = b.prev;

      a.next = b;
      b.prev = a;

      a2.next = an;
      an.prev = a2;

      b2.next = a2;
      a2.prev = b2;

      bp.next = b2;
      b2.prev = bp;

      return b2;
  }

  // create a node and optionally link it with previous one (in a circular doubly linked list)
  function insertNode(i, x, y, last) {
      var p = new Node(i, x, y);

      if (!last) {
          p.prev = p;
          p.next = p;

      } else {
          p.next = last.next;
          p.prev = last;
          last.next.prev = p;
          last.next = p;
      }
      return p;
  }

  function removeNode(p) {
      p.next.prev = p.prev;
      p.prev.next = p.next;

      if (p.prevZ) p.prevZ.nextZ = p.nextZ;
      if (p.nextZ) p.nextZ.prevZ = p.prevZ;
  }

  function Node(i, x, y) {
      // vertice index in coordinates array
      this.i = i;

      // vertex coordinates
      this.x = x;
      this.y = y;

      // previous and next vertice nodes in a polygon ring
      this.prev = null;
      this.next = null;

      // z-order curve value
      this.z = null;

      // previous and next nodes in z-order
      this.prevZ = null;
      this.nextZ = null;

      // indicates whether this is a steiner point
      this.steiner = false;
  }

  // return a percentage difference between the polygon area and its triangulation area;
  // used to verify correctness of triangulation
  earcut.deviation = function (data, holeIndices, dim, triangles) {
      var hasHoles = holeIndices && holeIndices.length;
      var outerLen = hasHoles ? holeIndices[0] * dim : data.length;

      var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));
      if (hasHoles) {
          for (var i = 0, len = holeIndices.length; i < len; i++) {
              var start = holeIndices[i] * dim;
              var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
              polygonArea -= Math.abs(signedArea(data, start, end, dim));
          }
      }

      var trianglesArea = 0;
      for (i = 0; i < triangles.length; i += 3) {
          var a = triangles[i] * dim;
          var b = triangles[i + 1] * dim;
          var c = triangles[i + 2] * dim;
          trianglesArea += Math.abs(
              (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -
              (data[a] - data[b]) * (data[c + 1] - data[a + 1]));
      }

      return polygonArea === 0 && trianglesArea === 0 ? 0 :
          Math.abs((trianglesArea - polygonArea) / polygonArea);
  };

  function signedArea(data, start, end, dim) {
      var sum = 0;
      for (var i = start, j = end - dim; i < end; i += dim) {
          sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
          j = i;
      }
      return sum;
  }

  /***/ }),
  /* 207 */
  /***/ (function(module, exports) {


  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var coordsOffsetMap = {
    '南海诸岛': [32, 80],
    // 全国
    '广东': [0, -10],
    '香港': [10, 5],
    '澳门': [-10, 10],
    //'北京': [-10, 0],
    '天津': [5, 5]
  };

  function _default(mapType, region) {
    if (mapType === 'china') {
      var coordFix = coordsOffsetMap[region.name];

      if (coordFix) {
        var cp = region.center;
        cp[0] += coordFix[0] / 10.5;
        cp[1] += -coordFix[1] / (10.5 / 0.75);
      }
    }
  }

  module.exports = _default;

  /***/ }),
  /* 208 */
  /***/ (function(module, exports) {


  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var geoCoordMap = {
    'Russia': [100, 60],
    'United States': [-99, 38],
    'United States of America': [-99, 38]
  };

  function _default(mapType, region) {
    if (mapType === 'world') {
      var geoCoord = geoCoordMap[region.name];

      if (geoCoord) {
        var cp = region.center;
        cp[0] = geoCoord[0];
        cp[1] = geoCoord[1];
      }
    }
  }

  module.exports = _default;

  /***/ }),
  /* 209 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__globe_GlobeModel__ = __webpack_require__(210);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__globe_GlobeView__ = __webpack_require__(211);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__coord_globeCreator__ = __webpack_require__(213);







  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerAction({
      type: 'globeChangeCamera',
      event: 'globecamerachanged',
      update: 'series:updateCamera'
  }, function (payload, ecModel) {
      ecModel.eachComponent({
          mainType: 'globe', query: payload
      }, function (componentModel) {
          componentModel.setView(payload);
      });
  });

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerAction({
      type: 'globeUpdateDisplacment',
      event: 'globedisplacementupdated',
      update: 'update'
  }, function (payload, ecModel) {
      // Noop
  });

  /***/ }),
  /* 210 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_componentViewControlMixin__ = __webpack_require__(44);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_componentPostEffectMixin__ = __webpack_require__(28);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_componentLightMixin__ = __webpack_require__(29);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_componentShadingMixin__ = __webpack_require__(31);







  function defaultId(option, idx) {
      option.id = option.id || option.name || (idx + '');
  }
  var GlobeModel = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendComponentModel({

      type: 'globe',

      layoutMode: 'box',

      coordinateSystem: null,

      init: function () {
          GlobeModel.superApply(this, 'init', arguments);

          __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.each(this.option.layers, function (layerOption, idx) {
              __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge(layerOption, this.defaultLayerOption);
              defaultId(layerOption, idx);
          }, this);
      },

      mergeOption: function (option) {
          // TODO test
          var oldLayers = this.option.layers;
          this.option.layers = null;
          GlobeModel.superApply(this, 'mergeOption', arguments);

          function createLayerMap(layers) {
              return __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.reduce(layers, function (obj, layerOption, idx) {
                  defaultId(layerOption, idx);
                  obj[layerOption.id] = layerOption;
                  return obj;
              }, {});
          }
          if (oldLayers && oldLayers.length) {
              var newLayerMap = createLayerMap(option.layers);
              var oldLayerMap = createLayerMap(oldLayers);
              for (var id in newLayerMap) {
                  if (oldLayerMap[id]) {
                      __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge(oldLayerMap[id], newLayerMap[id], true);
                  }
                  else {
                      oldLayers.push(option.layers[id]);
                  }
              }
              // Copy back
              this.option.layers = oldLayers;
          }
          // else overwrite

          // Set default
          __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.each(this.option.layers, function (layerOption) {
              __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge(layerOption, this.defaultLayerOption);
          }, this);
      },

      optionUpdated: function () {
          this.updateDisplacementHash();
      },

      defaultLayerOption: {
          show: true,
          type: 'overlay'
      },

      defaultOption: {

          show: true,

          zlevel: -10,

          // Layout used for viewport
          left: 0,
          top: 0,
          width: '100%',
          height: '100%',

          environment: 'auto',

          baseColor: '#fff',

          // Base albedo texture
          baseTexture: '',

          // Height texture for bump mapping and vertex displacement
          heightTexture: '',

          // Texture for vertex displacement, default use heightTexture
          displacementTexture: '',
          // Scale of vertex displacement, available only if displacementTexture is set.
          displacementScale: 0,

          // Detail of displacement. 'low', 'medium', 'high', 'ultra'
          displacementQuality: 'medium',

          // Globe radius
          globeRadius: 100,

          // Globe outer radius. Which is max of altitude.
          globeOuterRadius: 150,

          // Shading of globe
          shading: 'lambert',

          // Extend light
          light: {
              // Main sun light
              main: {
                  // Time, default it will use system time
                  time: ''
              }
          },

          // light
          // postEffect
          // temporalSuperSampling

          viewControl: {
              autoRotate: true,

              panSensitivity: 0,

              targetCoord: null
          },


          // {
          //     show: true,
          //     name: 'cloud',
          //     type: 'overlay',
          //     shading: 'lambert',
          //     distance: 10,
          //     texture: ''
          // }
          // {
          //     type: 'blend',
          //     blendTo: 'albedo'
          //     blendType: 'source-over'
          // }

          layers: []
      },

      setDisplacementData: function (data, width, height) {
          this.displacementData = data;
          this.displacementWidth = width;
          this.displacementHeight = height;
      },

      getDisplacementTexture: function () {
          return this.get('displacementTexture') || this.get('heightTexture');
      },

      getDisplacemenScale: function () {
          var displacementTexture = this.getDisplacementTexture();
          var displacementScale = this.get('displacementScale');
          if (!displacementTexture || displacementTexture === 'none') {
              displacementScale = 0;
          }
          return displacementScale;
      },

      hasDisplacement: function () {
          return this.getDisplacemenScale() > 0;
      },

      _displacementChanged: true,

      _displacementScale: 0,

      updateDisplacementHash: function () {
          var displacementTexture = this.getDisplacementTexture();
          var displacementScale = this.getDisplacemenScale();

          this._displacementChanged =
              this._displacementTexture !== displacementTexture
              || this._displacementScale !== displacementScale;

          this._displacementTexture = displacementTexture;
          this._displacementScale = displacementScale;
      },

      isDisplacementChanged: function () {
          return this._displacementChanged;
      }
  });

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge(GlobeModel.prototype, __WEBPACK_IMPORTED_MODULE_1__common_componentViewControlMixin__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge(GlobeModel.prototype, __WEBPACK_IMPORTED_MODULE_2__common_componentPostEffectMixin__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge(GlobeModel.prototype, __WEBPACK_IMPORTED_MODULE_3__common_componentLightMixin__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge(GlobeModel.prototype, __WEBPACK_IMPORTED_MODULE_4__common_componentShadingMixin__["a" /* default */]);

  /***/ }),
  /* 211 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__ = __webpack_require__(1);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_OrbitControl__ = __webpack_require__(45);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_SceneHelper__ = __webpack_require__(30);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_sunCalc__ = __webpack_require__(212);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_retrieve__ = __webpack_require__(2);









  /* unused harmony default export */ var _unused_webpack_default_export = (__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendComponentView({

      type: 'globe',

      __ecgl__: true,

      _displacementScale: 0,

      init: function (ecModel, api) {
          this.groupGL = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Node();

          /**
           * @type {clay.geometry.Sphere}
           * @private
           */
          this._sphereGeometry = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].SphereGeometry({
              widthSegments: 200,
              heightSegments: 100,
              dynamic: true
          });
          this._overlayGeometry = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].SphereGeometry({
              widthSegments: 80,
              heightSegments: 40
          });

          /**
           * @type {clay.geometry.Plane}
           */
          this._planeGeometry = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].PlaneGeometry();

          /**
           * @type {clay.geometry.Mesh}
           */
          this._earthMesh = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Mesh({
              renderNormal: true
          });

          this._lightRoot = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Node();
          this._sceneHelper = new __WEBPACK_IMPORTED_MODULE_3__common_SceneHelper__["a" /* default */]();
          this._sceneHelper.initLight(this._lightRoot);

          this.groupGL.add(this._earthMesh);

          this._control = new __WEBPACK_IMPORTED_MODULE_2__util_OrbitControl__["a" /* default */]({
              zr: api.getZr()
          });

          this._control.init();

          this._layerMeshes = {};
      },

      render: function (globeModel, ecModel, api) {
          var coordSys = globeModel.coordinateSystem;
          var shading = globeModel.get('shading');

          // Always have light.
          coordSys.viewGL.add(this._lightRoot);

          if (globeModel.get('show')) {
              // Add self to scene;
              coordSys.viewGL.add(this.groupGL);
          }
          else {
              coordSys.viewGL.remove(this.groupGL);
          }

          this._sceneHelper.setScene(coordSys.viewGL.scene);

          // Set post effect
          coordSys.viewGL.setPostEffect(globeModel.getModel('postEffect'), api);
          coordSys.viewGL.setTemporalSuperSampling(globeModel.getModel('temporalSuperSampling'));

          var earthMesh = this._earthMesh;

          earthMesh.geometry = this._sphereGeometry;

          var shadingPrefix = 'ecgl.' + shading;
          if (!earthMesh.material || earthMesh.material.shader.name !== shadingPrefix) {
              earthMesh.material = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].createMaterial(shadingPrefix);
          }

          __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].setMaterialFromModel(
              shading, earthMesh.material, globeModel, api
          );
          ['roughnessMap', 'metalnessMap', 'detailMap', 'normalMap'].forEach(function (texName) {
              var texture = earthMesh.material.get(texName);
              if (texture) {
                  texture.flipY = false;
              }
          });

          earthMesh.material.set('color', __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].parseColor(
              globeModel.get('baseColor')
          ));

          // shrink a little
          var scale = coordSys.radius * 0.99;
          earthMesh.scale.set(scale, scale, scale);

          var diffuseTexture = earthMesh.material.setTextureImage('diffuseMap', globeModel.get('baseTexture'), api, {
              flipY: false,
              anisotropic: 8
          });
          if (diffuseTexture && diffuseTexture.surface) {
              diffuseTexture.surface.attachToMesh(earthMesh);
          }

          // Update bump map
          var bumpTexture = earthMesh.material.setTextureImage('bumpMap', globeModel.get('heightTexture'), api, {
              flipY: false,
              anisotropic: 8
          });
          if (bumpTexture && bumpTexture.surface) {
              bumpTexture.surface.attachToMesh(earthMesh);
          }

          earthMesh.material[globeModel.get('postEffect.enable') ? 'define' : 'undefine']('fragment', 'SRGB_DECODE');

          this._updateLight(globeModel, api);

          this._displaceVertices(globeModel, api);

          this._updateViewControl(globeModel, api);

          this._updateLayers(globeModel, api);
      },

      afterRender: function (globeModel, ecModel, api, layerGL) {
          // Create ambient cubemap after render because we need to know the renderer.
          // TODO
          var renderer = layerGL.renderer;

          this._sceneHelper.updateAmbientCubemap(renderer, globeModel, api);

          this._sceneHelper.updateSkybox(renderer, globeModel, api);
      },


      _updateLayers: function (globeModel, api) {
          var coordSys = globeModel.coordinateSystem;
          var layers = globeModel.get('layers');

          var lastDistance = coordSys.radius;
          var layerDiffuseTextures = [];
          var layerDiffuseIntensity = [];

          var layerEmissiveTextures = [];
          var layerEmissionIntensity = [];
          __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.each(layers, function (layerOption) {
              var layerModel = new __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.Model(layerOption);
              var layerType = layerModel.get('type');

              var texture = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].loadTexture(layerModel.get('texture'), api, {
                  flipY: false,
                  anisotropic: 8
              });
              if (texture.surface) {
                  texture.surface.attachToMesh(this._earthMesh);
              }

              if (layerType === 'blend') {
                  var blendTo = layerModel.get('blendTo');
                  var intensity = __WEBPACK_IMPORTED_MODULE_5__util_retrieve__["a" /* default */].firstNotNull(layerModel.get('intensity'), 1.0);
                  if (blendTo === 'emission') {
                      layerEmissiveTextures.push(texture);
                      layerEmissionIntensity.push(intensity);
                  }
                  else { // Default is albedo
                      layerDiffuseTextures.push(texture);
                      layerDiffuseIntensity.push(intensity);
                  }
              }
              else { // Default use overlay
                  var id = layerModel.get('id');
                  var overlayMesh = this._layerMeshes[id];
                  if (!overlayMesh) {
                      overlayMesh = this._layerMeshes[id] = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Mesh({
                          geometry: this._overlayGeometry,
                          castShadow: false,
                          ignorePicking: true
                      });
                  }
                  var shading = layerModel.get('shading');

                  if (shading === 'lambert') {
                      overlayMesh.material = overlayMesh.__lambertMaterial || new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Material({
                          autoUpdateTextureStatus: false,
                          shader: __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].createShader('ecgl.lambert'),
                          transparent: true,
                          depthMask: false
                      });
                      overlayMesh.__lambertMaterial = overlayMesh.material;
                  }
                  else { // color
                      overlayMesh.material = overlayMesh.__colorMaterial || new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Material({
                          autoUpdateTextureStatus: false,
                          shader: __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].createShader('ecgl.color'),
                          transparent: true,
                          depthMask: false
                      });
                      overlayMesh.__colorMaterial = overlayMesh.material;
                  }
                  // overlay should be transparent if texture is not loaded yet.
                  overlayMesh.material.enableTexture('diffuseMap');

                  var distance = layerModel.get('distance');
                  // Based on distance of last layer
                  var radius = lastDistance + (distance == null ? coordSys.radius / 100 : distance);
                  overlayMesh.scale.set(radius, radius, radius);

                  lastDistance = radius;

                  // FIXME Exists blink.
                  var blankTexture = this._blankTexture || (this._blankTexture = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].createBlankTexture('rgba(255, 255, 255, 0)'));
                  overlayMesh.material.set('diffuseMap', blankTexture);

                  __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].loadTexture(layerModel.get('texture'), api, {
                      flipY: false,
                      anisotropic: 8
                  }, function (texture) {
                      if (texture.surface) {
                          texture.surface.attachToMesh(overlayMesh);
                      }
                      overlayMesh.material.set('diffuseMap', texture);
                      api.getZr().refresh();
                  });

                  layerModel.get('show') ? this.groupGL.add(overlayMesh) : this.groupGL.remove(overlayMesh);
              }
          }, this);

          var earthMaterial = this._earthMesh.material;
          earthMaterial.define('fragment', 'LAYER_DIFFUSEMAP_COUNT', layerDiffuseTextures.length);
          earthMaterial.define('fragment', 'LAYER_EMISSIVEMAP_COUNT', layerEmissiveTextures.length);

          earthMaterial.set('layerDiffuseMap', layerDiffuseTextures);
          earthMaterial.set('layerDiffuseIntensity', layerDiffuseIntensity);
          earthMaterial.set('layerEmissiveMap', layerEmissiveTextures);
          earthMaterial.set('layerEmissionIntensity', layerEmissionIntensity);

          var debugWireframeModel = globeModel.getModel('debug.wireframe');
          if (debugWireframeModel.get('show')) {
              earthMaterial.define('both', 'WIREFRAME_TRIANGLE');
              var color = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].parseColor(
                  debugWireframeModel.get('lineStyle.color') || 'rgba(0,0,0,0.5)'
              );
              var width = __WEBPACK_IMPORTED_MODULE_5__util_retrieve__["a" /* default */].firstNotNull(
                  debugWireframeModel.get('lineStyle.width'), 1
              );
              earthMaterial.set('wireframeLineWidth', width);
              earthMaterial.set('wireframeLineColor', color);
          }
          else {
              earthMaterial.undefine('both', 'WIREFRAME_TRIANGLE');
          }
      },

      _updateViewControl: function (globeModel, api) {
          var coordSys = globeModel.coordinateSystem;
          // Update camera
          var viewControlModel = globeModel.getModel('viewControl');

          var camera = coordSys.viewGL.camera;
          var self = this;

          function makeAction() {
              return {
                  type: 'globeChangeCamera',
                  alpha: control.getAlpha(),
                  beta: control.getBeta(),
                  distance: control.getDistance() - coordSys.radius,
                  center: control.getCenter(),
                  from: self.uid,
                  globeId: globeModel.id
              };
          }

          // Update control
          var control = this._control;
          control.setViewGL(coordSys.viewGL);

          var coord = viewControlModel.get('targetCoord');
          var alpha, beta;
          if (coord != null) {
              beta = coord[0] + 90;
              alpha = coord[1];
          }

          control.setFromViewControlModel(viewControlModel, {
              baseDistance: coordSys.radius,
              alpha: alpha,
              beta: beta
          });

          control.off('update');
          control.on('update', function () {
              api.dispatchAction(makeAction());
          });
      },

      _displaceVertices: function (globeModel, api) {
          var displacementQuality = globeModel.get('displacementQuality');
          var showDebugWireframe = globeModel.get('debug.wireframe.show');
          var globe = globeModel.coordinateSystem;

          if (!globeModel.isDisplacementChanged()
              && displacementQuality === this._displacementQuality
              && showDebugWireframe === this._showDebugWireframe
          ) {
              return;
          }

          this._displacementQuality = displacementQuality;
          this._showDebugWireframe = showDebugWireframe;

          var geometry = this._sphereGeometry;

          var widthSegments = ({
              low: 100,
              medium: 200,
              high: 400,
              ultra: 800
          })[displacementQuality] || 200;
          var heightSegments = widthSegments / 2;
          if (geometry.widthSegments !== widthSegments || showDebugWireframe) {
              geometry.widthSegments = widthSegments;
              geometry.heightSegments = heightSegments;
              geometry.build();
          }

          this._doDisplaceVertices(geometry, globe);

          if (showDebugWireframe) {
              geometry.generateBarycentric();
          }
      },

      _doDisplaceVertices: function (geometry, globe) {
          var positionArr = geometry.attributes.position.value;
          var uvArr = geometry.attributes.texcoord0.value;

          var originalPositionArr = geometry.__originalPosition;
          if (!originalPositionArr || originalPositionArr.length !== positionArr.length) {
              originalPositionArr = new Float32Array(positionArr.length);
              originalPositionArr.set(positionArr);
              geometry.__originalPosition = originalPositionArr;
          }

          var width = globe.displacementWidth;
          var height = globe.displacementHeight;
          var data = globe.displacementData;

          for (var i = 0; i < geometry.vertexCount; i++) {
              var i3 = i * 3;
              var i2 = i * 2;
              var x = originalPositionArr[i3 + 1];
              var y = originalPositionArr[i3 + 2];
              var z = originalPositionArr[i3 + 3];

              var u = uvArr[i2++];
              var v = uvArr[i2++];

              var j = Math.round(u * (width - 1));
              var k = Math.round(v * (height - 1));
              var idx = k * width + j;
              var scale = data ? data[idx] : 0;

              positionArr[i3 + 1] = x + x * scale;
              positionArr[i3 + 2] = y + y * scale;
              positionArr[i3 + 3] = z + z * scale;
          }

          geometry.generateVertexNormals();
          geometry.dirty();

          geometry.updateBoundingBox();
      },

      _updateLight: function (globeModel, api) {
          var earthMesh = this._earthMesh;

          this._sceneHelper.updateLight(globeModel);
          var mainLight = this._sceneHelper.mainLight;

          // Put sun in the right position
          var time = globeModel.get('light.main.time') || new Date();

          // http://en.wikipedia.org/wiki/Azimuth
          var pos = __WEBPACK_IMPORTED_MODULE_4__util_sunCalc__["a" /* default */].getPosition(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.number.parseDate(time), 0, 0);
          var r0 = Math.cos(pos.altitude);
          // FIXME How to calculate the y ?
          mainLight.position.y = -r0 * Math.cos(pos.azimuth);
          mainLight.position.x = Math.sin(pos.altitude);
          mainLight.position.z = r0 * Math.sin(pos.azimuth);
          mainLight.lookAt(earthMesh.getWorldPosition());
      },

      dispose: function (ecModel, api) {
          this.groupGL.removeAll();
          this._control.dispose();
      }
  }));

  /***/ }),
  /* 212 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /*
   (c) 2011-2014, Vladimir Agafonkin
   SunCalc is a JavaScript library for calculating sun/mooon position and light phases.
   https://github.com/mourner/suncalc
  */

  // shortcuts for easier to read formulas

  var PI   = Math.PI,
      sin  = Math.sin,
      cos  = Math.cos,
      tan  = Math.tan,
      asin = Math.asin,
      atan = Math.atan2,
      rad  = PI / 180;

  // sun calculations are based on http://aa.quae.nl/en/reken/zonpositie.html formulas


  // date/time constants and conversions

  var dayMs = 1000 * 60 * 60 * 24,
      J1970 = 2440588,
      J2000 = 2451545;

  function toJulian (date) { return date.valueOf() / dayMs - 0.5 + J1970; }
  function toDays (date)   { return toJulian(date) - J2000; }


  // general calculations for position

  var e = rad * 23.4397; // obliquity of the Earth

  function rightAscension(l, b) { return atan(sin(l) * cos(e) - tan(b) * sin(e), cos(l)); }
  function declination(l, b)    { return asin(sin(b) * cos(e) + cos(b) * sin(e) * sin(l)); }

  function azimuth(H, phi, dec)  { return atan(sin(H), cos(H) * sin(phi) - tan(dec) * cos(phi)); }
  function altitude(H, phi, dec) { return asin(sin(phi) * sin(dec) + cos(phi) * cos(dec) * cos(H)); }

  function siderealTime(d, lw) { return rad * (280.16 + 360.9856235 * d) - lw; }


  // general sun calculations

  function solarMeanAnomaly(d) { return rad * (357.5291 + 0.98560028 * d); }

  function eclipticLongitude(M) {

      var C = rad * (1.9148 * sin(M) + 0.02 * sin(2 * M) + 0.0003 * sin(3 * M)), // equation of center
          P = rad * 102.9372; // perihelion of the Earth

      return M + C + P + PI;
  }

  function sunCoords(d) {

      var M = solarMeanAnomaly(d),
          L = eclipticLongitude(M);

      return {
          dec: declination(L, 0),
          ra: rightAscension(L, 0)
      };
  }

  var SunCalc = {};

  // calculates sun position for a given date and latitude/longitude

  SunCalc.getPosition = function (date, lat, lng) {

      var lw  = rad * -lng,
          phi = rad * lat,
          d   = toDays(date),

          c  = sunCoords(d),
          H  = siderealTime(d, lw) - c.ra;

      return {
          azimuth: azimuth(H, phi, c.dec),
          altitude: altitude(H, phi, c.dec)
      };
  };

  /* harmony default export */ __webpack_exports__["a"] = (SunCalc);

  /***/ }),
  /* 213 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__globe_Globe__ = __webpack_require__(214);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_echarts_lib_util_layout__ = __webpack_require__(47);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_echarts_lib_util_layout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_echarts_lib_util_layout__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_ViewGL__ = __webpack_require__(22);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_retrieve__ = __webpack_require__(2);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_graphicGL__ = __webpack_require__(1);







  function getDisplacementData(img, displacementScale) {
      var canvas = document.createElement('canvas');
      var ctx = canvas.getContext('2d');
      var width = img.width;
      var height = img.height;
      canvas.width = width;
      canvas.height = height;
      ctx.drawImage(img, 0, 0, width, height);
      var rgbaArr = ctx.getImageData(0, 0, width, height).data;

      var displacementArr = new Float32Array(rgbaArr.length / 4);
      for (var i = 0; i < rgbaArr.length / 4; i++) {
          var x = rgbaArr[i * 4];
          displacementArr[i] = x / 255 * displacementScale;
      }
      return {
          data: displacementArr,
          width: width,
          height: height
      };
  }

  function resizeGlobe(globeModel, api) {
      // Use left/top/width/height
      var boxLayoutOption = globeModel.getBoxLayoutParams();

      var viewport = __WEBPACK_IMPORTED_MODULE_2_echarts_lib_util_layout___default.a.getLayoutRect(boxLayoutOption, {
          width: api.getWidth(),
          height: api.getHeight()
      });

      // Flip Y
      viewport.y = api.getHeight() - viewport.y - viewport.height;

      this.viewGL.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, api.getDevicePixelRatio());

      this.radius = globeModel.get('globeRadius');

      var outerRadius = globeModel.get('globeOuterRadius');
      if (this.altitudeAxis) {
          this.altitudeAxis.setExtent(0, outerRadius - this.radius);
      }
  }

  function updateGlobe(ecModel, api) {

      var altitudeDataExtent = [Infinity, -Infinity];

      ecModel.eachSeries(function (seriesModel) {
          if (seriesModel.coordinateSystem !== this) {
              return;
          }

          // Get altitude data extent.
          var data = seriesModel.getData();
          var altDims = seriesModel.coordDimToDataDim('alt');
          var altDim = altDims && altDims[0];
          if (altDim) {
              // TODO altitiude is in coords of lines.
              var dataExtent = data.getDataExtent(altDim, true);
              altitudeDataExtent[0] = Math.min(
                  altitudeDataExtent[0], dataExtent[0]
              );
              altitudeDataExtent[1] = Math.max(
                  altitudeDataExtent[1], dataExtent[1]
              );
          }
      }, this);
      // Create altitude axis
      if (altitudeDataExtent && isFinite(altitudeDataExtent[1] - altitudeDataExtent[0])) {
          var scale = __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts___default.a.helper.createScale(
              altitudeDataExtent, {
                  type: 'value',
                  // PENDING
                  min: 'dataMin',
                  max: 'dataMax'
              }
          );
          this.altitudeAxis = new __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts___default.a.Axis('altitude', scale);
          // Resize again
          this.resize(this.model, api);
      }
  }

  var globeCreator = {

      dimensions: __WEBPACK_IMPORTED_MODULE_0__globe_Globe__["a" /* default */].prototype.dimensions,

      create: function (ecModel, api) {

          var globeList = [];

          ecModel.eachComponent('globe', function (globeModel) {

              // FIXME
              globeModel.__viewGL = globeModel.__viewGL || new __WEBPACK_IMPORTED_MODULE_3__core_ViewGL__["a" /* default */]();

              var globe = new __WEBPACK_IMPORTED_MODULE_0__globe_Globe__["a" /* default */]();
              globe.viewGL = globeModel.__viewGL;

              globeModel.coordinateSystem = globe;
              globe.model = globeModel;
              globeList.push(globe);

              // Inject resize
              globe.resize = resizeGlobe;
              globe.resize(globeModel, api);

              globe.update = updateGlobe;
          });

          ecModel.eachSeries(function (seriesModel) {
              if (seriesModel.get('coordinateSystem') === 'globe') {
                  var globeModel = seriesModel.getReferringComponents('globe')[0];
                  if (!globeModel) {
                      globeModel = ecModel.getComponent('globe');
                  }

                  if (!globeModel) {
                      throw new Error('globe "' + __WEBPACK_IMPORTED_MODULE_4__util_retrieve__["a" /* default */].firstNotNull(
                          seriesModel.get('globe3DIndex'),
                          seriesModel.get('globe3DId'),
                          0
                      ) + '" not found');
                  }

                  var coordSys = globeModel.coordinateSystem;

                  seriesModel.coordinateSystem = coordSys;
              }
          });

          ecModel.eachComponent('globe', function (globeModel, idx) {
              var globe = globeModel.coordinateSystem;

              // Update displacement data
              var displacementTextureValue = globeModel.getDisplacementTexture();
              var displacementScale = globeModel.getDisplacemenScale();

              if (globeModel.isDisplacementChanged()) {
                  if (globeModel.hasDisplacement()) {
                      var immediateLoaded = true;
                      __WEBPACK_IMPORTED_MODULE_5__util_graphicGL__["a" /* default */].loadTexture(displacementTextureValue, api, function (texture) {
                          var img = texture.image;
                          var displacementData = getDisplacementData(img, displacementScale);
                          globeModel.setDisplacementData(displacementData.data, displacementData.width, displacementData.height);
                          if (!immediateLoaded) {
                              // Update layouts
                              api.dispatchAction({
                                  type: 'globeUpdateDisplacment'
                              });
                          }
                      });
                      immediateLoaded = false;
                  }
                  else {
                      globe.setDisplacementData(null, 0, 0);
                  }

                  globe.setDisplacementData(
                      globeModel.displacementData, globeModel.displacementWidth, globeModel.displacementHeight
                  );
              }
          });

          return globeList;
      }
  };

  __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts___default.a.registerCoordinateSystem('globe', globeCreator);

  /***/ }),
  /* 214 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_claygl_src_dep_glmatrix__ = __webpack_require__(6);

  var vec3 = __WEBPACK_IMPORTED_MODULE_0_claygl_src_dep_glmatrix__["a" /* default */].vec3;


  function Globe(radius) {

      this.radius = radius;

      this.viewGL = null;

      this.altitudeAxis;

      // Displacement data provided by texture.
      this.displacementData = null;
      this.displacementWidth;
      this.displacementHeight;
  }

  Globe.prototype = {

      constructor: Globe,

      dimensions: ['lng', 'lat', 'alt'],

      type: 'globe',

      containPoint: function () {},

      setDisplacementData: function (data, width, height) {
          this.displacementData = data;
          this.displacementWidth = width;
          this.displacementHeight = height;
      },

      _getDisplacementScale: function (lng, lat) {
          var i = (lng + 180) / 360 * (this.displacementWidth - 1);
          var j = (90 - lat) / 180 * (this.displacementHeight - 1);
          // NEAREST SAMPLING
          // TODO Better bilinear sampling
          var idx = Math.round(i) + Math.round(j) * this.displacementWidth;
          return this.displacementData[idx];
      },

      dataToPoint: function (data, out) {
          var lng = data[0];
          var lat = data[1];
          // Default have 0 altitude
          var altVal = data[2] || 0;

          var r = this.radius;
          if (this.displacementData) {
              r *= 1 + this._getDisplacementScale(lng, lat);
          }
          if (this.altitudeAxis) {
              r += this.altitudeAxis.dataToCoord(altVal);
          }

          lng = lng * Math.PI / 180;
          lat = lat * Math.PI / 180;

          var r0 = Math.cos(lat) * r;

          out = out || [];
          // PENDING
          out[0] = -r0 * Math.cos(lng + Math.PI);
          out[1] = Math.sin(lat) * r;
          out[2] = r0 * Math.sin(lng + Math.PI);

          return out;
      },

      pointToData: function (point, out) {
          var x = point[0];
          var y = point[1];
          var z = point[2];
          var len = vec3.len(point);
          x /= len;
          y /= len;
          z /= len;

          var theta = Math.asin(y);
          var phi = Math.atan2(z, -x);
          if (phi < 0) {
              phi = Math.PI * 2  + phi;
          }

          var lat = theta * 180 / Math.PI;
          var lng = phi * 180 / Math.PI - 180;

          out = out || [];
          out[0] = lng;
          out[1] = lat;
          out[2] = len - this.radius;
          if (this.altitudeAxis) {
              out[2] = this.altitudeAxis.coordToData(out[2]);
          }

          return out;
      }
  };

  /* harmony default export */ __webpack_exports__["a"] = (Globe);

  /***/ }),
  /* 215 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__coord_mapbox3DCreator__ = __webpack_require__(216);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__mapbox3D_Mapbox3DModel__ = __webpack_require__(218);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__mapbox3D_Mapbox3DView__ = __webpack_require__(219);








  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerAction({
      type: 'mapbox3DChangeCamera',
      event: 'mapbox3dcamerachanged',
      update: 'mapbox3D:updateCamera'
  }, function (payload, ecModel) {
      ecModel.eachComponent({
          mainType: 'mapbox3D', query: payload
      }, function (componentModel) {
          componentModel.setMapboxCameraOption(payload);
      });
  });

  /***/ }),
  /* 216 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__mapbox3D_Mapbox3D__ = __webpack_require__(217);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__mapServiceCommon_createMapService3DCreator__ = __webpack_require__(100);




  var mapbox3DCreator = Object(__WEBPACK_IMPORTED_MODULE_2__mapServiceCommon_createMapService3DCreator__["a" /* default */])('mapbox3D', __WEBPACK_IMPORTED_MODULE_0__mapbox3D_Mapbox3D__["a" /* default */], function (mapbox3DList) {
      mapbox3DList.forEach(function (mapbox3D) {
          mapbox3D.setCameraOption(mapbox3D.model.getMapboxCameraOption());
      });
  });
  __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts___default.a.registerCoordinateSystem('mapbox3D', mapbox3DCreator);

  /***/ }),
  /* 217 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__mapServiceCommon_MapService3D__ = __webpack_require__(99);


  function Mapbox3D() {
      __WEBPACK_IMPORTED_MODULE_0__mapServiceCommon_MapService3D__["a" /* default */].apply(this, arguments);
  }

  Mapbox3D.prototype = new __WEBPACK_IMPORTED_MODULE_0__mapServiceCommon_MapService3D__["a" /* default */]();
  Mapbox3D.prototype.constructor = Mapbox3D;
  Mapbox3D.prototype.type = 'mapbox3D';

  /* harmony default export */ __webpack_exports__["a"] = (Mapbox3D);

  /***/ }),
  /* 218 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_componentPostEffectMixin__ = __webpack_require__(28);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_componentLightMixin__ = __webpack_require__(29);





  var MAPBOX_CAMERA_OPTION = ['zoom', 'center', 'pitch', 'bearing'];

  var Mapbox3DModel = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendComponentModel({

      type: 'mapbox3D',

      layoutMode: 'box',

      coordinateSystem: null,

      defaultOption: {
          zlevel: -10,

          style: 'mapbox://styles/mapbox/light-v9',

          center: [0, 0],

          zoom: 0,

          pitch: 0,

          bearing: 0,

          light: {
              main: {
                  alpha: 20,
                  beta: 30
              }
          },

          altitudeScale: 1,
          // Default depend on altitudeScale
          boxHeight: 'auto'
      },

      getMapboxCameraOption: function () {
          var self = this;
          return MAPBOX_CAMERA_OPTION.reduce(function (obj, key) {
              obj[key] = self.get(key);
              return obj;
          }, {});
      },

      setMapboxCameraOption: function (option) {
          if (option != null) {
              MAPBOX_CAMERA_OPTION.forEach(function (key) {
                  if (option[key] != null) {
                      this.option[key] = option[key];
                  }
              }, this);
          }
      },

      /**
       * Get mapbox instance
       */
      getMapbox: function () {
          return this._mapbox;
      },

      setMapbox: function (mapbox) {
          this._mapbox = mapbox;
      }
  });

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge(Mapbox3DModel.prototype, __WEBPACK_IMPORTED_MODULE_1__common_componentPostEffectMixin__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge(Mapbox3DModel.prototype, __WEBPACK_IMPORTED_MODULE_2__common_componentLightMixin__["a" /* default */]);

  /***/ }),
  /* 219 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Mapbox3DLayer__ = __webpack_require__(220);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_SceneHelper__ = __webpack_require__(30);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_graphicGL__ = __webpack_require__(1);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_shader_displayShadow_glsl_js__ = __webpack_require__(101);







  __WEBPACK_IMPORTED_MODULE_3__util_graphicGL__["a" /* default */].Shader.import(__WEBPACK_IMPORTED_MODULE_4__util_shader_displayShadow_glsl_js__["a" /* default */]);

  /* unused harmony default export */ var _unused_webpack_default_export = (__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendComponentView({

      type: 'mapbox3D',

      __ecgl__: true,

      init: function (ecModel, api) {
          var zr = api.getZr();
          this._zrLayer = new __WEBPACK_IMPORTED_MODULE_1__Mapbox3DLayer__["a" /* default */]('mapbox3D', zr);
          zr.painter.insertLayer(-1000, this._zrLayer);

          this._lightRoot = new __WEBPACK_IMPORTED_MODULE_3__util_graphicGL__["a" /* default */].Node();
          this._sceneHelper = new __WEBPACK_IMPORTED_MODULE_2__common_SceneHelper__["a" /* default */](this._lightRoot);
          this._sceneHelper.initLight(this._lightRoot);

          var mapbox = this._zrLayer.getMapbox();
          var dispatchInteractAction = this._dispatchInteractAction.bind(this, api, mapbox);

          // PENDING
          ['zoom', 'rotate', 'drag', 'pitch', 'rotate', 'move'].forEach(function (eName) {
              mapbox.on(eName, dispatchInteractAction);
          });

          this._groundMesh = new __WEBPACK_IMPORTED_MODULE_3__util_graphicGL__["a" /* default */].Mesh({
              geometry: new __WEBPACK_IMPORTED_MODULE_3__util_graphicGL__["a" /* default */].PlaneGeometry(),
              material: new __WEBPACK_IMPORTED_MODULE_3__util_graphicGL__["a" /* default */].Material({
                  shader: new __WEBPACK_IMPORTED_MODULE_3__util_graphicGL__["a" /* default */].Shader({
                      vertex: __WEBPACK_IMPORTED_MODULE_3__util_graphicGL__["a" /* default */].Shader.source('ecgl.displayShadow.vertex'),
                      fragment: __WEBPACK_IMPORTED_MODULE_3__util_graphicGL__["a" /* default */].Shader.source('ecgl.displayShadow.fragment')
                  }),
                  depthMask: false
              }),
              // Render first
              renderOrder: -100,
              culling: false,
              castShadow: false,
              $ignorePicking: true,
              renderNormal: true
          });
      },

      render: function (mapbox3DModel, ecModel, api) {
          var mapbox = this._zrLayer.getMapbox();
          var styleDesc = mapbox3DModel.get('style');

          var styleStr = JSON.stringify(styleDesc);
          if (styleStr !== this._oldStyleStr) {
              if (styleDesc) {
                  mapbox.setStyle(styleDesc);
              }
          }
          this._oldStyleStr = styleStr;

          mapbox.setCenter(mapbox3DModel.get('center'));
          mapbox.setZoom(mapbox3DModel.get('zoom'));
          mapbox.setPitch(mapbox3DModel.get('pitch'));
          mapbox.setBearing(mapbox3DModel.get('bearing'));

          mapbox3DModel.setMapbox(mapbox);

          var coordSys = mapbox3DModel.coordinateSystem;

          // Not add to rootNode. Or light direction will be stretched by rootNode scale
          coordSys.viewGL.scene.add(this._lightRoot);
          coordSys.viewGL.add(this._groundMesh);

          this._updateGroundMesh();

          // Update lights
          this._sceneHelper.setScene(coordSys.viewGL.scene);
          this._sceneHelper.updateLight(mapbox3DModel);

          // Update post effects
          coordSys.viewGL.setPostEffect(mapbox3DModel.getModel('postEffect'), api);
          coordSys.viewGL.setTemporalSuperSampling(mapbox3DModel.getModel('temporalSuperSampling'));

          this._mapbox3DModel = mapbox3DModel;
      },

      afterRender: function (mapbox3DModel, ecModel, api, layerGL) {
          var renderer = layerGL.renderer;
          this._sceneHelper.updateAmbientCubemap(renderer, mapbox3DModel, api);
          this._sceneHelper.updateSkybox(renderer, mapbox3DModel, api);

          // FIXME If other series changes coordinate system.
          // FIXME When doing progressive rendering.
          mapbox3DModel.coordinateSystem.viewGL.scene.traverse(function (mesh) {
              if (mesh.material) {
                  mesh.material.define('fragment', 'NORMAL_UP_AXIS', 2);
                  mesh.material.define('fragment', 'NORMAL_FRONT_AXIS', 1);
              }
          });
      },

      updateCamera: function (mapbox3DModel, ecModel, api, payload) {
          mapbox3DModel.coordinateSystem.setCameraOption(payload);

          this._updateGroundMesh();

          api.getZr().refresh();
      },

      _dispatchInteractAction: function (api, mapbox, mapbox3DModel) {
          api.dispatchAction({
              type: 'mapbox3DChangeCamera',
              pitch: mapbox.getPitch(),
              zoom: mapbox.getZoom(),
              center: mapbox.getCenter().toArray(),
              bearing: mapbox.getBearing(),
              mapbox3DId: this._mapbox3DModel && this._mapbox3DModel.id
          });
      },

      _updateGroundMesh: function () {
          if (this._mapbox3DModel) {
              var coordSys = this._mapbox3DModel.coordinateSystem;
              var pt = coordSys.dataToPoint(coordSys.center);
              this._groundMesh.position.set(pt[0], pt[1], -0.001);

              var plane = new __WEBPACK_IMPORTED_MODULE_3__util_graphicGL__["a" /* default */].Plane(new __WEBPACK_IMPORTED_MODULE_3__util_graphicGL__["a" /* default */].Vector3(0, 0, 1), 0);
              var ray1 = coordSys.viewGL.camera.castRay(new __WEBPACK_IMPORTED_MODULE_3__util_graphicGL__["a" /* default */].Vector2(-1, -1));
              var ray2 = coordSys.viewGL.camera.castRay(new __WEBPACK_IMPORTED_MODULE_3__util_graphicGL__["a" /* default */].Vector2(1, 1));
              var pos0 = ray1.intersectPlane(plane);
              var pos1 = ray2.intersectPlane(plane);
              var scale = pos0.dist(pos1) / coordSys.viewGL.rootNode.scale.x;
              this._groundMesh.scale.set(scale, scale, 1);
          }
      },

      dispose: function (ecModel, api) {
          if (this._zrLayer) {
              this._zrLayer.dispose();
          }
          api.getZr().painter.delLayer(-1000);
      }
  }));

  /***/ }),
  /* 220 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /**
   * @constructor
   * @alias module:echarts-gl/component/mapbox3D/Mapbox3DLayer
   * @param {string} id Layer ID
   * @param {module:zrender/ZRender} zr
   */
  function Mapbox3DLayer (id, zr) {
      this.id = id;
      this.zr = zr;

      this.dom = document.createElement('div');
      this.dom.style.cssText = 'position:absolute;left:0;right:0;top:0;bottom:0;';

      // FIXME If in module environment.
      if (!mapboxgl) {
          throw new Error('Mapbox GL library must be included. See https://www.mapbox.com/mapbox-gl-js/api/');
      }

      this._mapbox = new mapboxgl.Map({
          container: this.dom
      });

      // Proxy events
      this._initEvents();

  }

  Mapbox3DLayer.prototype.resize = function () {
      this._mapbox.resize();
  };

  Mapbox3DLayer.prototype.getMapbox = function () {
      return this._mapbox;
  };

  Mapbox3DLayer.prototype.clear = function () {};
  Mapbox3DLayer.prototype.refresh = function () {
      this._mapbox.resize();
  };

  var EVENTS = ['mousedown', 'mouseup', 'click', 'dblclick', 'mousemove',
      'mousewheel', 'wheel',
      'touchstart', 'touchend', 'touchmove', 'touchcancel'
  ];
  Mapbox3DLayer.prototype._initEvents = function () {
      // Event is bound on canvas container.
      var mapboxRoot = this._mapbox.getCanvasContainer();
      this._handlers = this._handlers || {
          contextmenu: function (e) {
              e.preventDefault();
              return false;
          }
      };
      EVENTS.forEach(function (eName) {
          this._handlers[eName] = function (e) {
              var obj = {};
              for (var name in e) {
                  obj[name] = e[name];
              }
              obj.bubbles = false;
              var newE = new e.constructor(e.type, obj);
              mapboxRoot.dispatchEvent(newE);
          };
          this.zr.dom.addEventListener(eName, this._handlers[eName]);
      }, this);

      // PENDING
      this.zr.dom.addEventListener('contextmenu', this._handlers.contextmenu);
  };

  Mapbox3DLayer.prototype.dispose = function () {
      EVENTS.forEach(function (eName) {
          this.zr.dom.removeEventListener(eName, this._handlers[eName]);
      }, this);
  };

  /* harmony default export */ __webpack_exports__["a"] = (Mapbox3DLayer);

  /***/ }),
  /* 221 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__coord_maptalks3DCreator__ = __webpack_require__(222);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__maptalks3D_Maptalks3DModel__ = __webpack_require__(224);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__maptalks3D_Maptalks3DView__ = __webpack_require__(225);
  // Thanks to https://gitee.com/iverson_hu/maptalks-echarts-gl








  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerAction({
      type: 'maptalks3DChangeCamera',
      event: 'maptalks3dcamerachanged',
      update: 'maptalks3D:updateCamera'
  }, function (payload, ecModel) {
      ecModel.eachComponent({
          mainType: 'maptalks3D', query: payload
      }, function (componentModel) {
          componentModel.setMaptalksCameraOption(payload);
      });
  });

  /***/ }),
  /* 222 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__maptalks3D_Maptalks3D__ = __webpack_require__(223);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__mapServiceCommon_createMapService3DCreator__ = __webpack_require__(100);




  var maptalks3DCreator = Object(__WEBPACK_IMPORTED_MODULE_2__mapServiceCommon_createMapService3DCreator__["a" /* default */])('maptalks3D', __WEBPACK_IMPORTED_MODULE_0__maptalks3D_Maptalks3D__["a" /* default */], function (maptalks3DList) {
      maptalks3DList.forEach(function (maptalks3D) {
          maptalks3D.setCameraOption(maptalks3D.model.getMaptalksCameraOption());
      });
  });
  __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts___default.a.registerCoordinateSystem('maptalks3D', maptalks3DCreator);

  /***/ }),
  /* 223 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__mapServiceCommon_MapService3D__ = __webpack_require__(99);


  function Maptalks3D() {
      __WEBPACK_IMPORTED_MODULE_0__mapServiceCommon_MapService3D__["a" /* default */].apply(this, arguments);

      this.maxPitch = 85;
      this.zoomOffset = 1;
  }

  Maptalks3D.prototype = new __WEBPACK_IMPORTED_MODULE_0__mapServiceCommon_MapService3D__["a" /* default */]();
  Maptalks3D.prototype.constructor = Maptalks3D;
  Maptalks3D.prototype.type = 'maptalks3D';

  /* harmony default export */ __webpack_exports__["a"] = (Maptalks3D);

  /***/ }),
  /* 224 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_componentPostEffectMixin__ = __webpack_require__(28);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_componentLightMixin__ = __webpack_require__(29);





  var MAPTALKS_CAMERA_OPTION = ['zoom', 'center', 'pitch', 'bearing'];

  var Maptalks3DModel = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendComponentModel({

      type: 'maptalks3D',

      layoutMode: 'box',

      coordinateSystem: null,

      defaultOption: {
          zlevel: -10,

          urlTemplate: 'http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png',
          attribution: '&copy; <a href="http://osm.org">OpenStreetMap</a> contributors, &copy; <a href="https://carto.com/">CARTO</a>',

          center: [0, 0],

          zoom: 0,

          pitch: 0,

          bearing: 0,

          light: {
              main: {
                  alpha: 20,
                  beta: 30
              }
          },

          altitudeScale: 1,
          // Default depend on altitudeScale
          boxHeight: 'auto'
      },

      getMaptalksCameraOption: function () {
          var self = this;
          return MAPTALKS_CAMERA_OPTION.reduce(function (obj, key) {
              obj[key] = self.get(key);
              return obj;
          }, {});
      },

      setMaptalksCameraOption: function (option) {
          if (option != null) {
              MAPTALKS_CAMERA_OPTION.forEach(function (key) {
                  if (option[key] != null) {
                      this.option[key] = option[key];
                  }
              }, this);
          }
      },

      /**
       * Get maptalks instance
       */
      getMaptalks: function () {
          return this._maptalks;
      },

      setMaptalks: function (maptalks) {
          this._maptalks = maptalks;
      }
  });

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge(Maptalks3DModel.prototype, __WEBPACK_IMPORTED_MODULE_1__common_componentPostEffectMixin__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge(Maptalks3DModel.prototype, __WEBPACK_IMPORTED_MODULE_2__common_componentLightMixin__["a" /* default */]);

  /***/ }),
  /* 225 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Maptalks3DLayer__ = __webpack_require__(226);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_SceneHelper__ = __webpack_require__(30);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_graphicGL__ = __webpack_require__(1);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_shader_displayShadow_glsl_js__ = __webpack_require__(101);







  __WEBPACK_IMPORTED_MODULE_3__util_graphicGL__["a" /* default */].Shader.import(__WEBPACK_IMPORTED_MODULE_4__util_shader_displayShadow_glsl_js__["a" /* default */]);

  /* unused harmony default export */ var _unused_webpack_default_export = (__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendComponentView({

      type: 'maptalks3D',

      __ecgl__: true,

      init: function (ecModel, api) {
          this._groundMesh = new __WEBPACK_IMPORTED_MODULE_3__util_graphicGL__["a" /* default */].Mesh({
              geometry: new __WEBPACK_IMPORTED_MODULE_3__util_graphicGL__["a" /* default */].PlaneGeometry(),
              material: new __WEBPACK_IMPORTED_MODULE_3__util_graphicGL__["a" /* default */].Material({
                  shader: new __WEBPACK_IMPORTED_MODULE_3__util_graphicGL__["a" /* default */].Shader({
                      vertex: __WEBPACK_IMPORTED_MODULE_3__util_graphicGL__["a" /* default */].Shader.source('ecgl.displayShadow.vertex'),
                      fragment: __WEBPACK_IMPORTED_MODULE_3__util_graphicGL__["a" /* default */].Shader.source('ecgl.displayShadow.fragment')
                  }),
                  depthMask: false
              }),
              // Render first
              renderOrder: -100,
              culling: false,
              castShadow: false,
              $ignorePicking: true,
              renderNormal: true
          });
      },

      _initMaptalksLayer: function (mapbox3DModel, api) {
          var zr = api.getZr();
          this._zrLayer = new __WEBPACK_IMPORTED_MODULE_1__Maptalks3DLayer__["a" /* default */]('maptalks3D', zr, mapbox3DModel.get('center'), mapbox3DModel.get('zoom'));
          zr.painter.insertLayer(-1000, this._zrLayer);

          this._lightRoot = new __WEBPACK_IMPORTED_MODULE_3__util_graphicGL__["a" /* default */].Node();
          this._sceneHelper = new __WEBPACK_IMPORTED_MODULE_2__common_SceneHelper__["a" /* default */](this._lightRoot);
          this._sceneHelper.initLight(this._lightRoot);

          var maptalks = this._zrLayer.getMaptalks();
          var dispatchInteractAction = this._dispatchInteractAction.bind(this, api, maptalks);

          // PENDING
          ['zoomend', 'zooming', 'zoomstart', 'dragrotating', 'pitch', 'pitchend', 'movestart',
              'moving', 'moveend', 'resize', 'touchstart', 'touchmove', 'touchend','animating'].forEach(function (eName) {
              maptalks.on(eName, dispatchInteractAction);
          });

      },

      render: function (maptalks3DModel, ecModel, api) {
          if (!this._zrLayer) {
              this._initMaptalksLayer(maptalks3DModel, api);
          }

          var mtks = this._zrLayer.getMaptalks();
          var urlTemplate = maptalks3DModel.get('urlTemplate');

          var baseLayer = mtks.getBaseLayer();
          if (urlTemplate !== this._oldUrlTemplate) {
              if (!baseLayer) {
                  baseLayer = new maptalks.TileLayer('maptalks-echarts-gl-baselayer', {
                      urlTemplate: urlTemplate,
                      // used sequentially to help with browser parallel requests per domain limitation
                      subdomains: ['a', 'b', 'c'],
                      attribution: maptalks3DModel.get('attribution')
                  });
                  mtks.setBaseLayer(baseLayer);
              }
              else {
                  // PENDING setOptions may not work?
                  baseLayer.setOptions({
                      urlTemplate: urlTemplate,
                      attribution: maptalks3DModel.get('attribution')
                  });
              }
          }
          this._oldUrlTemplate = urlTemplate;

          mtks.setCenter(maptalks3DModel.get('center'));
          mtks.setZoom(maptalks3DModel.get('zoom'),{ animation: false });
          mtks.setPitch(maptalks3DModel.get('pitch'));
          mtks.setBearing(maptalks3DModel.get('bearing'));

          maptalks3DModel.setMaptalks(mtks);

          var coordSys = maptalks3DModel.coordinateSystem;

          // Not add to rootNode. Or light direction will be stretched by rootNode scale
          coordSys.viewGL.scene.add(this._lightRoot);
          coordSys.viewGL.add(this._groundMesh);

          this._updateGroundMesh();

          // Update lights
          this._sceneHelper.setScene(coordSys.viewGL.scene);
          this._sceneHelper.updateLight(maptalks3DModel);

          // Update post effects
          coordSys.viewGL.setPostEffect(maptalks3DModel.getModel('postEffect'), api);
          coordSys.viewGL.setTemporalSuperSampling(maptalks3DModel.getModel('temporalSuperSampling'));

          this._maptalks3DModel = maptalks3DModel;
      },

      afterRender: function (maptalks3DModel, ecModel, api, layerGL) {
          var renderer = layerGL.renderer;
          this._sceneHelper.updateAmbientCubemap(renderer, maptalks3DModel, api);
          this._sceneHelper.updateSkybox(renderer, maptalks3DModel, api);

          // FIXME If other series changes coordinate system.
          // FIXME When doing progressive rendering.
          maptalks3DModel.coordinateSystem.viewGL.scene.traverse(function (mesh) {
              if (mesh.material) {
                  mesh.material.define('fragment', 'NORMAL_UP_AXIS', 2);
                  mesh.material.define('fragment', 'NORMAL_FRONT_AXIS', 1);
              }
          });
      },

      updateCamera: function (maptalks3DModel, ecModel, api, payload) {
          maptalks3DModel.coordinateSystem.setCameraOption(payload);

          this._updateGroundMesh();

          api.getZr().refresh();
      },

      _dispatchInteractAction: function (api, maptalks, maptalks3DModel) {
          api.dispatchAction({
              type: 'maptalks3DChangeCamera',
              pitch: maptalks.getPitch(),
              zoom: getMapboxZoom(maptalks.getResolution()) + 1,
              center: maptalks.getCenter().toArray(),
              bearing: maptalks.getBearing(),
              maptalks3DId: this._maptalks3DModel && this._maptalks3DModel.id
          });
      },

      _updateGroundMesh: function () {
          if (this._maptalks3DModel) {
              var coordSys = this._maptalks3DModel.coordinateSystem;
              var pt = coordSys.dataToPoint(coordSys.center);
              this._groundMesh.position.set(pt[0], pt[1], -0.001);

              var plane = new __WEBPACK_IMPORTED_MODULE_3__util_graphicGL__["a" /* default */].Plane(new __WEBPACK_IMPORTED_MODULE_3__util_graphicGL__["a" /* default */].Vector3(0, 0, 1), 0);
              var ray1 = coordSys.viewGL.camera.castRay(new __WEBPACK_IMPORTED_MODULE_3__util_graphicGL__["a" /* default */].Vector2(-1, -1));
              var ray2 = coordSys.viewGL.camera.castRay(new __WEBPACK_IMPORTED_MODULE_3__util_graphicGL__["a" /* default */].Vector2(1, 1));
              var pos0 = ray1.intersectPlane(plane);
              var pos1 = ray2.intersectPlane(plane);
              var scale = pos0.dist(pos1) / coordSys.viewGL.rootNode.scale.x;
              this._groundMesh.scale.set(scale, scale, 1);
          }
      },

      dispose: function (ecModel, api) {
          if (this._zrLayer) {
              this._zrLayer.dispose();
          }
          api.getZr().painter.delLayer(-1000);
      }
  }));

  const MAX_RES = 2 * 6378137 * Math.PI / (256 * Math.pow(2, 20));
  function getMapboxZoom(res) {
      return 19 - Math.log(res / MAX_RES) / Math.LN2;
  }


  /***/ }),
  /* 226 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /**
   * @constructor
   * @alias module:echarts-gl/component/maptalks/Maptalks3DLayer
   * @param {string} id Layer ID
   * @param {module:zrender/ZRender} zr
   */
  function Maptalks3DLayer (id, zr, defaultCenter, defaultZoom) {
      this.id = id;
      this.zr = zr;

      this.dom = document.createElement('div');
      this.dom.style.cssText = 'position:absolute;left:0;right:0;top:0;bottom:0;';

      // FIXME If in module environment.
      if (!maptalks) {
          throw new Error('Maptalks library must be included. See https://maptalks.org');
      }

      this._maptalks = new maptalks.Map(this.dom, {
          center: defaultCenter,
          zoom: defaultZoom,
          doubleClickZoom:false,
          fog: false
          // fogColor: [0, 0, 0]
      });

      // Proxy events
      this._initEvents();

  }

  Maptalks3DLayer.prototype.resize = function () {
      this._maptalks.checkSize();
  };

  Maptalks3DLayer.prototype.getMaptalks = function () {
      return this._maptalks;
  };

  Maptalks3DLayer.prototype.clear = function () {};
  Maptalks3DLayer.prototype.refresh = function () {
      this._maptalks.checkSize();
  };

  var EVENTS = ['mousedown', 'mouseup', 'click', 'dblclick', 'mousemove',
      'mousewheel', 'DOMMouseScroll',
      'touchstart', 'touchend', 'touchmove', 'touchcancel'
  ];
  Maptalks3DLayer.prototype._initEvents = function () {
      // Event is bound on canvas container.
      var maptalksRoot = this.dom;
      this._handlers = this._handlers || {
          contextmenu: function (e) {
              e.preventDefault();
              return false;
          }
      };
      EVENTS.forEach(function (eName) {
          this._handlers[eName] = function (e) {
              var obj = {};
              for (var name in e) {
                  obj[name] = e[name];
              }
              obj.bubbles = false;
              var newE = new e.constructor(e.type, obj);
              if (eName === 'mousewheel' || eName === 'DOMMouseScroll') {
                  // maptalks listens events to different elements?
                  maptalksRoot.dispatchEvent(newE);
              }
              else {
                  maptalksRoot.firstElementChild.dispatchEvent(newE);
              }
          };
          this.zr.dom.addEventListener(eName, this._handlers[eName]);
      }, this);

      // PENDING
      this.zr.dom.addEventListener('contextmenu', this._handlers.contextmenu);
  };

  Maptalks3DLayer.prototype.dispose = function () {
      EVENTS.forEach(function (eName) {
          this.zr.dom.removeEventListener(eName, this._handlers[eName]);
      }, this);
      this._maptalks.remove();
  };

  /* harmony default export */ __webpack_exports__["a"] = (Maptalks3DLayer);


  /***/ }),
  /* 227 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__bar3D_bar3DLayout__ = __webpack_require__(228);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__bar3D_Bar3DView__ = __webpack_require__(231);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__bar3D_Bar3DSeries__ = __webpack_require__(233);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_opacityVisual__ = __webpack_require__(17);









  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerVisual(Object(__WEBPACK_IMPORTED_MODULE_4__common_opacityVisual__["a" /* default */])('bar3D'));

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerProcessor(function (ecModel, api) {
      ecModel.eachSeriesByType('bar3d', function (seriesModel) {
          var data = seriesModel.getData();
          data.filterSelf(function (idx) {
              return data.hasValue(idx);
          });
      });
  });

  /***/ }),
  /* 228 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_claygl_src_math_Vector3__ = __webpack_require__(3);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_claygl_src_dep_glmatrix__ = __webpack_require__(6);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__cartesian3DLayout__ = __webpack_require__(229);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__evaluateBarSparseness__ = __webpack_require__(230);






  var vec3 = __WEBPACK_IMPORTED_MODULE_2_claygl_src_dep_glmatrix__["a" /* default */].vec3;
  var isDimensionStacked = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.helper.dataStack.isDimensionStacked;

  function globeLayout(seriesModel, coordSys) {
      var data = seriesModel.getData();
      var barMinHeight = seriesModel.get('minHeight') || 0;
      var barSize = seriesModel.get('barSize');
      var dims = ['lng', 'lat', 'alt'].map(function (coordDimName) {
          return seriesModel.coordDimToDataDim(coordDimName)[0];
      });
      if (barSize == null) {
          var perimeter = coordSys.radius * Math.PI;
          var fillRatio = Object(__WEBPACK_IMPORTED_MODULE_4__evaluateBarSparseness__["a" /* default */])(data, dims[0], dims[1]);
          barSize = [
              perimeter / Math.sqrt(data.count() / fillRatio),
              perimeter / Math.sqrt(data.count() / fillRatio)
          ];
      }
      else if (!__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.isArray(barSize)) {
          barSize = [barSize, barSize];
      }

      var valueDim = getValueDimension(data, dims);

      data.each(dims, function (lng, lat, val, idx) {
          var stackedValue = data.get(valueDim.dimension, idx);
          var baseValue = valueDim.isStacked ? (stackedValue - val) : coordSys.altitudeAxis.scale.getExtent()[0];
          // TODO Stacked with minHeight.
          var height = Math.max(coordSys.altitudeAxis.dataToCoord(val), barMinHeight);
          var start = coordSys.dataToPoint([lng, lat, baseValue]);
          var end = coordSys.dataToPoint([lng, lat, stackedValue]);
          var dir = vec3.sub([], end, start);
          vec3.normalize(dir, dir);
          var size = [barSize[0], height, barSize[1]];
          data.setItemLayout(idx, [start, dir, size]);
      });

      data.setLayout('orient', __WEBPACK_IMPORTED_MODULE_1_claygl_src_math_Vector3__["a" /* default */].UP.array);
  }

  function geo3DLayout(seriesModel, coordSys) {
      var data = seriesModel.getData();
      var barSize = seriesModel.get('barSize');
      var barMinHeight = seriesModel.get('minHeight') || 0;
      var dims = ['lng', 'lat', 'alt'].map(function (coordDimName) {
          return seriesModel.coordDimToDataDim(coordDimName)[0];
      });
      if (barSize == null) {
          var size = Math.min(coordSys.size[0], coordSys.size[2]);

          var fillRatio = Object(__WEBPACK_IMPORTED_MODULE_4__evaluateBarSparseness__["a" /* default */])(data, dims[0], dims[1]);
          barSize = [
              size / Math.sqrt(data.count() / fillRatio),
              size / Math.sqrt(data.count() / fillRatio)
          ];
      }
      else if (!__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.isArray(barSize)) {
          barSize = [barSize, barSize];
      }
      var dir = [0, 1, 0];

      var valueDim = getValueDimension(data, dims);

      data.each(dims, function (lng, lat, val, idx) {
          var stackedValue = data.get(valueDim.dimension, idx);
          var baseValue = valueDim.isStacked ? (stackedValue - val) : coordSys.altitudeAxis.scale.getExtent()[0];

          var height = Math.max(coordSys.altitudeAxis.dataToCoord(val), barMinHeight);
          var start = coordSys.dataToPoint([lng, lat, baseValue]);
          var size = [barSize[0], height, barSize[1]];
          data.setItemLayout(idx, [start, dir, size]);
      });

      data.setLayout('orient', [1, 0, 0]);
  }

  function mapService3DLayout(seriesModel, coordSys) {
      var data = seriesModel.getData();
      var dimLng = seriesModel.coordDimToDataDim('lng')[0];
      var dimLat = seriesModel.coordDimToDataDim('lat')[0];
      var dimAlt = seriesModel.coordDimToDataDim('alt')[0];
      var barSize = seriesModel.get('barSize');
      var barMinHeight = seriesModel.get('minHeight') || 0;

      if (barSize == null) {
          var xExtent = data.getDataExtent(dimLng);
          var yExtent = data.getDataExtent(dimLat);
          var corner0 = coordSys.dataToPoint([xExtent[0], yExtent[0]]);
          var corner1 = coordSys.dataToPoint([xExtent[1], yExtent[1]]);

          var size = Math.min(
              Math.abs(corner0[0] - corner1[0]),
              Math.abs(corner0[1] - corner1[1])
          ) || 1;

          var fillRatio = Object(__WEBPACK_IMPORTED_MODULE_4__evaluateBarSparseness__["a" /* default */])(data, dimLng, dimLat);
          // PENDING, data density
          barSize = [
              size / Math.sqrt(data.count() / fillRatio),
              size / Math.sqrt(data.count() / fillRatio)
          ];
      }
      else {
          if (!__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.isArray(barSize)) {
              barSize = [barSize, barSize];
          }
          barSize[0] /= coordSys.getScale() / 16;
          barSize[1] /= coordSys.getScale() / 16;
      }

      var dir = [0, 0, 1];
      var dims = [dimLng, dimLat, dimAlt];

      var valueDim = getValueDimension(data, dims);

      data.each(dims, function (lng, lat, val, idx) {
          var stackedValue = data.get(valueDim.dimension, idx);
          var baseValue = valueDim.isStacked ? (stackedValue - val) : 0;

          var start = coordSys.dataToPoint([lng, lat, baseValue]);
          var end = coordSys.dataToPoint([lng, lat, stackedValue]);
          var height = Math.max(end[2] - start[2], barMinHeight);
          var size = [barSize[0], height, barSize[1]];
          data.setItemLayout(idx, [start, dir, size]);
      });

      data.setLayout('orient', [1, 0, 0]);
  }

  function getValueDimension(data, dataDims) {
      var isStacked = isDimensionStacked(data, dataDims[2]);
      return {
          dimension: isStacked
              ? data.getCalculationInfo('stackResultDimension')
              : dataDims[2],
          isStacked: isStacked
      };
  }

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerLayout(function (ecModel, api) {
      ecModel.eachSeriesByType('bar3D', function (seriesModel) {
          var coordSys = seriesModel.coordinateSystem;
          var coordSysType = coordSys && coordSys.type;
          if (coordSysType === 'globe') {
              globeLayout(seriesModel, coordSys);
          }
          else if (coordSysType === 'cartesian3D') {
              Object(__WEBPACK_IMPORTED_MODULE_3__cartesian3DLayout__["a" /* default */])(seriesModel, coordSys);
          }
          else if (coordSysType === 'geo3D') {
              geo3DLayout(seriesModel, coordSys);
          }
          else if (coordSysType === 'mapbox3D' || coordSysType === 'maptalks3D') {
              mapService3DLayout(seriesModel, coordSys);
          }
          else {
              {
                  if (!coordSys) {
                      throw new Error('bar3D doesn\'t have coordinate system.');
                  }
                  else {
                      throw new Error('bar3D doesn\'t support coordinate system ' + coordSys.type);
                  }
              }
          }
      });
  });

  /***/ }),
  /* 229 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_claygl_src_dep_glmatrix__ = __webpack_require__(6);


  var vec3 = __WEBPACK_IMPORTED_MODULE_1_claygl_src_dep_glmatrix__["a" /* default */].vec3;
  var isDimensionStacked = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.helper.dataStack.isDimensionStacked;

  function ifCrossZero(extent) {
      var min = extent[0];
      var max = extent[1];
      return !((min > 0 && max > 0) || (min < 0 && max < 0));
  }
  function cartesian3DLayout(seriesModel, coordSys) {

      var data = seriesModel.getData();
      // var barOnPlane = seriesModel.get('onGridPlane');

      var barSize = seriesModel.get('barSize');
      if (barSize == null) {
          var size = coordSys.size;
          var barWidth;
          var barDepth;
          var xAxis = coordSys.getAxis('x');
          var yAxis = coordSys.getAxis('y');

          if (xAxis.type === 'category') {
              barWidth = xAxis.getBandWidth() * 0.7;
          }
          else {
              // PENDING
              barWidth = Math.round(size[0] / Math.sqrt(data.count())) * 0.6;
          }
          if (yAxis.type === 'category') {
              barDepth = yAxis.getBandWidth() * 0.7;
          }
          else {
              barDepth = Math.round(size[1] / Math.sqrt(data.count())) * 0.6;
          }
          barSize = [barWidth, barDepth];
      }
      else if (!__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.isArray(barSize)) {
          barSize = [barSize, barSize];
      }

      var zAxisExtent = coordSys.getAxis('z').scale.getExtent();
      var ifZAxisCrossZero = ifCrossZero(zAxisExtent);

      var dims = ['x', 'y', 'z'].map(function (coordDimName) {
          return seriesModel.coordDimToDataDim(coordDimName)[0];
      });

      var isStacked = isDimensionStacked(data, dims[2]);
      var valueDim = isStacked
          ? data.getCalculationInfo('stackResultDimension')
          : dims[2];

      data.each(dims, function (x, y, z, idx) {
          // TODO zAxis is inversed
          // TODO On different plane.
          var stackedValue = data.get(valueDim, idx);

          var baseValue = isStacked ? (stackedValue - z)
              : (ifZAxisCrossZero ? 0 : zAxisExtent[0]);

          var start = coordSys.dataToPoint([x, y, baseValue]);
          var end = coordSys.dataToPoint([x, y, stackedValue]);
          var height = vec3.dist(start, end);
          // PENDING When zAxis is not cross zero.
          var dir = [0, end[1] < start[1] ? -1 : 1, 0];
          if (Math.abs(height) === 0) {
              // TODO
              height = 0.1;
          }
          var size = [barSize[0], height, barSize[1]];
          data.setItemLayout(idx, [start, dir, size]);
      });

      data.setLayout('orient', [1, 0, 0]);
  }

  /* harmony default export */ __webpack_exports__["a"] = (cartesian3DLayout);

  /***/ }),
  /* 230 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = (function (data, dimX, dimY) {
      var xExtent = data.getDataExtent(dimX);
      var yExtent = data.getDataExtent(dimY);

      // TODO Handle one data situation
      var xSpan = (xExtent[1] - xExtent[0]) || xExtent[0];
      var ySpan = (yExtent[1] - yExtent[0]) || yExtent[0];
      var dimSize = 50;
      var tmp = new Uint8Array(dimSize * dimSize);
      for (var i = 0; i < data.count(); i++) {
          var x = data.get(dimX, i);
          var y = data.get(dimY, i);
          var xIdx = Math.floor((x - xExtent[0]) / xSpan * (dimSize - 1));
          var yIdx = Math.floor((y - yExtent[0]) / ySpan * (dimSize - 1));
          var idx = yIdx * dimSize + xIdx;
          tmp[idx] = tmp[idx] || 1;
      }
      var filledCount = 0;
      for (var i = 0; i < tmp.length; i++) {
          if (tmp[i]) {
              filledCount++;
          }
      }
      return filledCount / tmp.length;
  });
  /***/ }),
  /* 231 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__ = __webpack_require__(1);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_retrieve__ = __webpack_require__(2);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_format__ = __webpack_require__(32);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_geometry_Bars3DGeometry__ = __webpack_require__(232);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__component_common_LabelsBuilder__ = __webpack_require__(65);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_claygl_src_dep_glmatrix__ = __webpack_require__(6);







  var vec3 = __WEBPACK_IMPORTED_MODULE_6_claygl_src_dep_glmatrix__["a" /* default */].vec3;

  /* unused harmony default export */ var _unused_webpack_default_export = (__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendChartView({

      type: 'bar3D',

      __ecgl__: true,

      init: function (ecModel, api) {

          this.groupGL = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Node();

          this._api = api;

          this._labelsBuilder = new __WEBPACK_IMPORTED_MODULE_5__component_common_LabelsBuilder__["a" /* default */](256, 256, api);
          var self = this;
          this._labelsBuilder.getLabelPosition = function (dataIndex, position, distance) {
              if (self._data) {
                  var layout = self._data.getItemLayout(dataIndex);
                  var start = layout[0];
                  var dir = layout[1];
                  var height = layout[2][1];
                  return vec3.scaleAndAdd([], start, dir, distance + height);
              }
              else {
                  return [0, 0];
              }
          };

          // Give a large render order.
          this._labelsBuilder.getMesh().renderOrder = 100;
      },

      render: function (seriesModel, ecModel, api) {

          // Swap barMesh
          var tmp = this._prevBarMesh;
          this._prevBarMesh = this._barMesh;
          this._barMesh = tmp;

          if (!this._barMesh) {
              this._barMesh = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Mesh({
                  geometry: new __WEBPACK_IMPORTED_MODULE_4__util_geometry_Bars3DGeometry__["a" /* default */](),
                  shadowDepthMaterial: new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Material({
                      shader: new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Shader(
                          __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Shader.source('ecgl.sm.depth.vertex'),
                          __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Shader.source('ecgl.sm.depth.fragment')
                      )
                  }),
                  // Only cartesian3D enable culling
                  // FIXME Performance
                  culling: seriesModel.coordinateSystem.type === 'cartesian3D',
                  // Render after axes
                  renderOrder: 10,
                  // Render normal in normal pass
                  renderNormal: true
              });
          }

          this.groupGL.remove(this._prevBarMesh);
          this.groupGL.add(this._barMesh);
          this.groupGL.add(this._labelsBuilder.getMesh());

          var coordSys = seriesModel.coordinateSystem;
          this._doRender(seriesModel, api);
          if (coordSys && coordSys.viewGL) {
              coordSys.viewGL.add(this.groupGL);

              var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';
              this._barMesh.material[methodName]('fragment', 'SRGB_DECODE');
          }

          this._data = seriesModel.getData();

          this._labelsBuilder.updateData(this._data);

          this._labelsBuilder.updateLabels();

          this._updateAnimation(seriesModel);
      },

      _updateAnimation: function (seriesModel) {
          __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].updateVertexAnimation(
              [['prevPosition', 'position'],
              ['prevNormal', 'normal']],
              this._prevBarMesh,
              this._barMesh,
              seriesModel
          );
      },

      _doRender: function (seriesModel, api) {
          var data = seriesModel.getData();
          var shading = seriesModel.get('shading');
          var enableNormal = shading !== 'color';
          var self = this;
          var barMesh = this._barMesh;

          var shadingPrefix = 'ecgl.' + shading;
          if (!barMesh.material || barMesh.material.shader.name !== shadingPrefix) {
              barMesh.material = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].createMaterial(shadingPrefix, ['VERTEX_COLOR']);
          }

          __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].setMaterialFromModel(
              shading, barMesh.material, seriesModel, api
          );

          barMesh.geometry.enableNormal = enableNormal;

          barMesh.geometry.resetOffset();

          // Bevel settings
          var bevelSize = seriesModel.get('bevelSize');
          var bevelSegments = seriesModel.get('bevelSmoothness');
          barMesh.geometry.bevelSegments = bevelSegments;

          barMesh.geometry.bevelSize = bevelSize;

          var colorArr = [];
          var vertexColors = new Float32Array(data.count() * 4);
          var colorOffset = 0;
          var barCount = 0;
          var hasTransparent = false;

          data.each(function (idx) {
              if (!data.hasValue(idx)) {
                  return;
              }
              var color = data.getItemVisual(idx, 'color');

              var opacity = data.getItemVisual(idx, 'opacity');
              if (opacity == null) {
                  opacity = 1;
              }

              __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].parseColor(color, colorArr);
              colorArr[3] *= opacity;
              vertexColors[colorOffset++] = colorArr[0];
              vertexColors[colorOffset++] = colorArr[1];
              vertexColors[colorOffset++] = colorArr[2];
              vertexColors[colorOffset++] = colorArr[3];

              if (colorArr[3] > 0) {
                  barCount++;
                  if (colorArr[3] < 0.99) {
                      hasTransparent = true;
                  }
              }
          });

          barMesh.geometry.setBarCount(barCount);

          var orient = data.getLayout('orient');

          // Map of dataIndex and barIndex.
          var barIndexOfData = this._barIndexOfData = new Int32Array(data.count());
          var barCount = 0;
          data.each(function (idx) {
              if (!data.hasValue(idx)) {
                  barIndexOfData[idx] = -1;
                  return;
              }
              var layout = data.getItemLayout(idx);
              var start = layout[0];
              var dir = layout[1];
              var size = layout[2];

              var idx4 = idx * 4;
              colorArr[0] = vertexColors[idx4++];
              colorArr[1] = vertexColors[idx4++];
              colorArr[2] = vertexColors[idx4++];
              colorArr[3] = vertexColors[idx4++];
              if (colorArr[3] > 0) {
                  self._barMesh.geometry.addBar(start, dir, orient, size, colorArr, idx);
                  barIndexOfData[idx] = barCount++;
              }
          });

          barMesh.geometry.dirty();
          barMesh.geometry.updateBoundingBox();

          var material = barMesh.material;
          material.transparent = hasTransparent;
          material.depthMask = !hasTransparent;
          barMesh.geometry.sortTriangles = hasTransparent;

          this._initHandler(seriesModel, api);
      },

      _initHandler: function (seriesModel, api) {
          var data = seriesModel.getData();
          var barMesh = this._barMesh;
          var isCartesian3D = seriesModel.coordinateSystem.type === 'cartesian3D';

          barMesh.seriesIndex = seriesModel.seriesIndex;

          var lastDataIndex = -1;
          barMesh.off('mousemove');
          barMesh.off('mouseout');
          barMesh.on('mousemove', function (e) {
              var dataIndex = barMesh.geometry.getDataIndexOfVertex(e.triangle[0]);
              if (dataIndex !== lastDataIndex) {
                  this._downplay(lastDataIndex);
                  this._highlight(dataIndex);
                  this._labelsBuilder.updateLabels([dataIndex]);

                  if (isCartesian3D) {
                      api.dispatchAction({
                          type: 'grid3DShowAxisPointer',
                          value: [data.get('x', dataIndex), data.get('y', dataIndex), data.get('z', dataIndex, true)]
                      });
                  }
              }

              lastDataIndex = dataIndex;
              barMesh.dataIndex = dataIndex;
          }, this);
          barMesh.on('mouseout', function (e) {
              this._downplay(lastDataIndex);
              this._labelsBuilder.updateLabels();
              lastDataIndex = -1;
              barMesh.dataIndex = -1;

              if (isCartesian3D) {
                  api.dispatchAction({
                      type: 'grid3DHideAxisPointer'
                  });
              }
          }, this);
      },

      _highlight: function (dataIndex) {
          var data = this._data;
          if (!data) {
              return;
          }
          var barIndex = this._barIndexOfData[dataIndex];
          if (barIndex < 0) {
              return;
          }

          var itemModel = data.getItemModel(dataIndex);
          var emphasisItemStyleModel = itemModel.getModel('emphasis.itemStyle');
          var emphasisColor = emphasisItemStyleModel.get('color');
          var emphasisOpacity = emphasisItemStyleModel.get('opacity');
          if (emphasisColor == null) {
              var color = data.getItemVisual(dataIndex, 'color');
              emphasisColor = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.color.lift(color, -0.4);
          }
          if (emphasisOpacity == null) {
              emphasisOpacity = data.getItemVisual(dataIndex, 'opacity');
          }
          var colorArr = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].parseColor(emphasisColor);
          colorArr[3] *= emphasisOpacity;

          this._barMesh.geometry.setColor(barIndex, colorArr);

          this._api.getZr().refresh();
      },

      _downplay: function (dataIndex) {
          var data = this._data;
          if (!data) {
              return;
          }
          var barIndex = this._barIndexOfData[dataIndex];
          if (barIndex < 0) {
              return;
          }

          var color = data.getItemVisual(dataIndex, 'color');
          var opacity = data.getItemVisual(dataIndex, 'opacity');

          var colorArr = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].parseColor(color);
          colorArr[3] *= opacity;

          this._barMesh.geometry.setColor(barIndex, colorArr);

          this._api.getZr().refresh();
      },

      highlight: function (seriesModel, ecModel, api, payload) {
          this._toggleStatus('highlight', seriesModel, ecModel, api, payload);
      },

      downplay: function (seriesModel, ecModel, api, payload) {
          this._toggleStatus('downplay', seriesModel, ecModel, api, payload);
      },

      _toggleStatus: function (status, seriesModel, ecModel, api, payload) {
          var data = seriesModel.getData();
          var dataIndex = __WEBPACK_IMPORTED_MODULE_2__util_retrieve__["a" /* default */].queryDataIndex(data, payload);

          var self = this;
          if (dataIndex != null) {
              __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.each(__WEBPACK_IMPORTED_MODULE_3__util_format__["a" /* default */].normalizeToArray(dataIndex), function (dataIdx) {
                  status === 'highlight' ? this._highlight(dataIdx) : this._downplay(dataIdx);
              }, this);
          }
          else {
              data.each(function (dataIdx) {
                  status === 'highlight' ? self._highlight(dataIdx) : self._downplay(dataIdx);
              });
          }
      },

      remove: function () {
          this.groupGL.removeAll();
      },

      dispose: function () {
          this.groupGL.removeAll();
      }
  }));

  /***/ }),
  /* 232 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__dynamicConvertMixin__ = __webpack_require__(39);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__trianglesSortMixin__ = __webpack_require__(64);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_claygl_src_Geometry__ = __webpack_require__(14);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_claygl_src_dep_glmatrix__ = __webpack_require__(6);
  /**
   * Geometry collecting bars data
   *
   * @module echarts-gl/chart/bars/BarsGeometry
   * @author Yi Shen(http://github.com/pissang)
   */







  var vec3 = __WEBPACK_IMPORTED_MODULE_4_claygl_src_dep_glmatrix__["a" /* default */].vec3;
  var mat3 = __WEBPACK_IMPORTED_MODULE_4_claygl_src_dep_glmatrix__["a" /* default */].mat3;

  /**
   * @constructor
   * @alias module:echarts-gl/chart/bars/BarsGeometry
   * @extends clay.Geometry
   */
  var BarsGeometry = __WEBPACK_IMPORTED_MODULE_3_claygl_src_Geometry__["a" /* default */].extend(function () {
      return {

          attributes: {
              position: new __WEBPACK_IMPORTED_MODULE_3_claygl_src_Geometry__["a" /* default */].Attribute('position', 'float', 3, 'POSITION'),
              normal: new __WEBPACK_IMPORTED_MODULE_3_claygl_src_Geometry__["a" /* default */].Attribute('normal', 'float', 3, 'NORMAL'),
              color: new __WEBPACK_IMPORTED_MODULE_3_claygl_src_Geometry__["a" /* default */].Attribute('color', 'float', 4, 'COLOR'),

              prevPosition: new __WEBPACK_IMPORTED_MODULE_3_claygl_src_Geometry__["a" /* default */].Attribute('prevPosition', 'float', 3),
              prevNormal: new __WEBPACK_IMPORTED_MODULE_3_claygl_src_Geometry__["a" /* default */].Attribute('prevNormal', 'float', 3)
          },

          dynamic: true,

          enableNormal: false,

          bevelSize: 1,
          bevelSegments: 0,

          // Map from vertexIndex to dataIndex.
          _dataIndices: null,

          _vertexOffset: 0,
          _triangleOffset: 0
      };
  },
  /** @lends module:echarts-gl/chart/bars/BarsGeometry.prototype */
  {

      resetOffset: function () {
          this._vertexOffset = 0;
          this._triangleOffset = 0;
      },

      setBarCount: function (barCount) {
          var enableNormal = this.enableNormal;
          var vertexCount = this.getBarVertexCount() * barCount;
          var triangleCount = this.getBarTriangleCount() * barCount;

          if (this.vertexCount !== vertexCount) {
              this.attributes.position.init(vertexCount);
              if (enableNormal) {
                  this.attributes.normal.init(vertexCount);
              }
              else {
                  this.attributes.normal.value = null;
              }
              this.attributes.color.init(vertexCount);
          }

          if (this.triangleCount !== triangleCount) {
              this.indices = vertexCount > 0xffff ? new Uint32Array(triangleCount * 3) : new Uint16Array(triangleCount * 3);

              this._dataIndices = new Uint32Array(vertexCount);
          }
      },

      getBarVertexCount: function () {
          var bevelSegments = this.bevelSize > 0 ? this.bevelSegments : 0;
          return bevelSegments > 0 ? this._getBevelBarVertexCount(bevelSegments)
              : (this.enableNormal ? 24 : 8);
      },

      getBarTriangleCount: function () {
          var bevelSegments = this.bevelSize > 0 ? this.bevelSegments : 0;
          return bevelSegments > 0 ? this._getBevelBarTriangleCount(bevelSegments)
              : 12;
      },

      _getBevelBarVertexCount: function (bevelSegments) {
          return (bevelSegments + 1) * 4 * (bevelSegments + 1) * 2;
      },

      _getBevelBarTriangleCount: function (bevelSegments) {
          var widthSegments = bevelSegments * 4 + 3;
          var heightSegments = bevelSegments * 2 + 1;
          return (widthSegments + 1) * heightSegments * 2 + 4;
      },

      setColor: function (idx, color) {
          var vertexCount = this.getBarVertexCount();
          var start = vertexCount * idx;
          var end = vertexCount * (idx + 1);
          for (var i = start; i < end; i++) {
              this.attributes.color.set(i, color);
          }
          this.dirtyAttribute('color');
      },

      /**
       * Get dataIndex of vertex.
       * @param {number} vertexIndex
       */
      getDataIndexOfVertex: function (vertexIndex) {
          return this._dataIndices ? this._dataIndices[vertexIndex] : null;
      },

      /**
       * Add a bar
       * @param {Array.<number>} start
       * @param {Array.<number>} end
       * @param {Array.<number>} orient  right direction
       * @param {Array.<number>} size size on x and z
       * @param {Array.<number>} color
       */
      addBar: (function () {
          var v3Create = vec3.create;
          var v3ScaleAndAdd = vec3.scaleAndAdd;

          var end = v3Create();
          var px = v3Create();
          var py = v3Create();
          var pz = v3Create();
          var nx = v3Create();
          var ny = v3Create();
          var nz = v3Create();

          var pts = [];
          var normals = [];
          for (var i = 0; i < 8; i++) {
              pts[i] = v3Create();
          }

          var cubeFaces4 = [
              // PX
              [0, 1, 5, 4],
              // NX
              [2, 3, 7, 6],
              // PY
              [4, 5, 6, 7],
              // NY
              [3, 2, 1, 0],
              // PZ
              [0, 4, 7, 3],
              // NZ
              [1, 2, 6, 5]
          ];
          var face4To3 = [
              0, 1, 2, 0, 2, 3
          ];
          var cubeFaces3 = [];
          for (var i = 0; i < cubeFaces4.length; i++) {
              var face4 = cubeFaces4[i];
              for (var j = 0; j < 2; j++) {
                  var face = [];
                  for (var k = 0; k < 3; k++) {
                      face.push(face4[face4To3[j * 3 + k]]);
                  }
                  cubeFaces3.push(face);
              }
          }
          return function (start, dir, leftDir, size, color, dataIndex) {

              // Use vertex, triangle maybe sorted.
              var startVertex = this._vertexOffset;

              if (this.bevelSize > 0 && this.bevelSegments > 0) {
                  this._addBevelBar(start, dir, leftDir, size, this.bevelSize, this.bevelSegments, color);
              }
              else {
                  vec3.copy(py, dir);
                  vec3.normalize(py, py);
                  // x * y => z
                  vec3.cross(pz, leftDir, py);
                  vec3.normalize(pz, pz);
                  // y * z => x
                  vec3.cross(px, py, pz);
                  vec3.normalize(pz, pz);

                  vec3.negate(nx, px);
                  vec3.negate(ny, py);
                  vec3.negate(nz, pz);

                  v3ScaleAndAdd(pts[0], start, px, size[0] / 2);
                  v3ScaleAndAdd(pts[0], pts[0], pz, size[2] / 2);
                  v3ScaleAndAdd(pts[1], start, px, size[0] / 2);
                  v3ScaleAndAdd(pts[1], pts[1], nz, size[2] / 2);
                  v3ScaleAndAdd(pts[2], start, nx, size[0] / 2);
                  v3ScaleAndAdd(pts[2], pts[2], nz, size[2] / 2);
                  v3ScaleAndAdd(pts[3], start, nx, size[0] / 2);
                  v3ScaleAndAdd(pts[3], pts[3], pz, size[2] / 2);

                  v3ScaleAndAdd(end, start, py, size[1]);

                  v3ScaleAndAdd(pts[4], end, px, size[0] / 2);
                  v3ScaleAndAdd(pts[4], pts[4], pz, size[2] / 2);
                  v3ScaleAndAdd(pts[5], end, px, size[0] / 2);
                  v3ScaleAndAdd(pts[5], pts[5], nz, size[2] / 2);
                  v3ScaleAndAdd(pts[6], end, nx, size[0] / 2);
                  v3ScaleAndAdd(pts[6], pts[6], nz, size[2] / 2);
                  v3ScaleAndAdd(pts[7], end, nx, size[0] / 2);
                  v3ScaleAndAdd(pts[7], pts[7], pz, size[2] / 2);

                  var attributes = this.attributes;
                  if (this.enableNormal) {
                      normals[0] = px;
                      normals[1] = nx;
                      normals[2] = py;
                      normals[3] = ny;
                      normals[4] = pz;
                      normals[5] = nz;

                      var vertexOffset = this._vertexOffset;
                      for (var i = 0; i < cubeFaces4.length; i++) {
                          var idx3 = this._triangleOffset * 3;
                          for (var k = 0; k < 6; k++) {
                              this.indices[idx3++] = vertexOffset + face4To3[k];
                          }
                          vertexOffset += 4;
                          this._triangleOffset += 2;
                      }

                      for (var i = 0; i < cubeFaces4.length; i++) {
                          var normal = normals[i];
                          for (var k = 0; k < 4; k++) {
                              var idx = cubeFaces4[i][k];
                              attributes.position.set(this._vertexOffset, pts[idx]);
                              attributes.normal.set(this._vertexOffset, normal);
                              attributes.color.set(this._vertexOffset++, color);
                          }
                      }
                  }
                  else {
                      for (var i = 0; i < cubeFaces3.length; i++) {
                          var idx3 = this._triangleOffset * 3;
                          for (var k = 0; k < 3; k++) {
                              this.indices[idx3 + k] = cubeFaces3[i][k] + this._vertexOffset;
                          }
                          this._triangleOffset++;
                      }

                      for (var i = 0; i < pts.length; i++) {
                          attributes.position.set(this._vertexOffset, pts[i]);
                          attributes.color.set(this._vertexOffset++, color);
                      }
                  }
              }

              var endVerex = this._vertexOffset;

              for (var i = startVertex; i < endVerex; i++) {
                  this._dataIndices[i] = dataIndex;
              }
          };
      })(),

      /**
       * Add a bar with bevel
       * @param {Array.<number>} start
       * @param {Array.<number>} end
       * @param {Array.<number>} orient  right direction
       * @param {Array.<number>} size size on x and z
       * @param {number} bevelSize
       * @param {number} bevelSegments
       * @param {Array.<number>} color
       */
      _addBevelBar: (function () {
          var px = vec3.create();
          var py = vec3.create();
          var pz = vec3.create();

          var rotateMat = mat3.create();

          var bevelStartSize = [];

          var xOffsets = [1, -1, -1, 1];
          var zOffsets = [1, 1, -1, -1];
          var yOffsets = [2, 0];

          return function (start, dir, leftDir, size, bevelSize, bevelSegments, color) {
              vec3.copy(py, dir);
              vec3.normalize(py, py);
              // x * y => z
              vec3.cross(pz, leftDir, py);
              vec3.normalize(pz, pz);
              // y * z => x
              vec3.cross(px, py, pz);
              vec3.normalize(pz, pz);

              rotateMat[0] = px[0]; rotateMat[1] = px[1]; rotateMat[2] = px[2];
              rotateMat[3] = py[0]; rotateMat[4] = py[1]; rotateMat[5] = py[2];
              rotateMat[6] = pz[0]; rotateMat[7] = pz[1]; rotateMat[8] = pz[2];

              bevelSize = Math.min(size[0], size[2]) / 2 * bevelSize;

              for (var i = 0; i < 3; i++) {
                  bevelStartSize[i] = Math.max(size[i] - bevelSize * 2, 0);
              }
              var rx = (size[0] - bevelStartSize[0]) / 2;
              var ry = (size[1] - bevelStartSize[1]) / 2;
              var rz = (size[2] - bevelStartSize[2]) / 2;

              var pos = [];
              var normal = [];
              var vertexOffset = this._vertexOffset;

              var endIndices = [];
              for (var i = 0; i < 2; i++) {
                  endIndices[i] = endIndices[i] = [];

                  for (var m = 0; m <= bevelSegments; m++) {
                      for (var j = 0; j < 4; j++) {
                          if ((m === 0 && i === 0) || (i === 1 && m === bevelSegments)) {
                              endIndices[i].push(vertexOffset);
                          }
                          for (var n = 0; n <= bevelSegments; n++) {

                              var phi = n / bevelSegments * Math.PI / 2 + Math.PI / 2 * j;
                              var theta = m / bevelSegments * Math.PI / 2 + Math.PI / 2 * i;
                              // var r = rx < ry ? (rz < rx ? rz : rx) : (rz < ry ? rz : ry);
                              normal[0] = rx * Math.cos(phi) * Math.sin(theta);
                              normal[1] = ry * Math.cos(theta);
                              normal[2] = rz * Math.sin(phi) * Math.sin(theta);
                              pos[0] = normal[0] + xOffsets[j] * bevelStartSize[0] / 2;
                              pos[1] = (normal[1] + ry) + yOffsets[i] * bevelStartSize[1] / 2;
                              pos[2] = normal[2] + zOffsets[j] * bevelStartSize[2] / 2;

                              // Normal is not right if rx, ry, rz not equal.
                              if (!(Math.abs(rx - ry) < 1e-6 && Math.abs(ry - rz) < 1e-6)) {
                                  normal[0] /= rx * rx;
                                  normal[1] /= ry * ry;
                                  normal[2] /= rz * rz;
                              }
                              vec3.normalize(normal, normal);

                              vec3.transformMat3(pos, pos, rotateMat);
                              vec3.transformMat3(normal, normal, rotateMat);
                              vec3.add(pos, pos, start);

                              this.attributes.position.set(vertexOffset, pos);
                              if (this.enableNormal) {
                                  this.attributes.normal.set(vertexOffset, normal);
                              }
                              this.attributes.color.set(vertexOffset, color);
                              vertexOffset++;
                          }
                      }
                  }
              }

              var widthSegments = bevelSegments * 4 + 3;
              var heightSegments = bevelSegments * 2 + 1;

              var len = widthSegments + 1;

              for (var j = 0; j < heightSegments; j ++) {
                  for (var i = 0; i <= widthSegments; i ++) {
                      var i2 = j * len + i + this._vertexOffset;
                      var i1 = (j * len + (i + 1) % len) + this._vertexOffset;
                      var i4 = (j + 1) * len + (i + 1) % len + this._vertexOffset;
                      var i3 = (j + 1) * len + i + this._vertexOffset;

                      this.setTriangleIndices(this._triangleOffset++, [i4, i2, i1]);
                      this.setTriangleIndices(this._triangleOffset++, [i4, i3, i2]);
                  }
              }

              // Close top and bottom
              this.setTriangleIndices(this._triangleOffset++, [endIndices[0][0], endIndices[0][2], endIndices[0][1]]);
              this.setTriangleIndices(this._triangleOffset++, [endIndices[0][0], endIndices[0][3], endIndices[0][2]]);
              this.setTriangleIndices(this._triangleOffset++, [endIndices[1][0], endIndices[1][1], endIndices[1][2]]);
              this.setTriangleIndices(this._triangleOffset++, [endIndices[1][0], endIndices[1][2], endIndices[1][3]]);

              this._vertexOffset = vertexOffset;
          };
      })()
  });

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.defaults(BarsGeometry.prototype, __WEBPACK_IMPORTED_MODULE_1__dynamicConvertMixin__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.defaults(BarsGeometry.prototype, __WEBPACK_IMPORTED_MODULE_2__trianglesSortMixin__["a" /* default */]);

  /* harmony default export */ __webpack_exports__["a"] = (BarsGeometry);

  /***/ }),
  /* 233 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__component_common_componentShadingMixin__ = __webpack_require__(31);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_format__ = __webpack_require__(32);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_formatTooltip__ = __webpack_require__(40);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_createList__ = __webpack_require__(50);






  var Bar3DSeries = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendSeriesModel({

      type: 'series.bar3D',

      dependencies: ['globe'],

      visualColorAccessPath: 'itemStyle.color',

      getInitialData: function (option, ecModel) {
          return Object(__WEBPACK_IMPORTED_MODULE_4__common_createList__["a" /* default */])(this);
      },

      getFormattedLabel: function (dataIndex, status, dataType, dimIndex) {
          var text = __WEBPACK_IMPORTED_MODULE_2__util_format__["a" /* default */].getFormattedLabel(this, dataIndex, status, dataType, dimIndex);
          if (text == null) {
              text = this.getData().get('z', dataIndex);
          }
          return text;
      },

      formatTooltip: function (dataIndex) {
          return Object(__WEBPACK_IMPORTED_MODULE_3__common_formatTooltip__["a" /* default */])(this, dataIndex);
      },

      defaultOption: {

          coordinateSystem: 'cartesian3D',

          globeIndex: 0,

          grid3DIndex: 0,

          zlevel: -10,

          // bevelSize, 0 has no bevel
          bevelSize: 0,
          // higher is smoother
          bevelSmoothness: 2,

          // Bar width and depth
          // barSize: [1, 1],

          // On grid plane when coordinateSystem is cartesian3D
          onGridPlane: 'xy',

          // Shading of globe
          shading: 'color',

          minHeight: 0,

          itemStyle: {
              opacity: 1
          },

          label: {
              show: false,
              distance: 2,
              textStyle: {
                  fontSize: 14,
                  color: '#000',
                  backgroundColor: 'rgba(255,255,255,0.7)',
                  padding: 3,
                  borderRadius: 3
              }
          },

          emphasis: {
              label: {
                  show: true
              }
          },

          animationDurationUpdate: 500
      }
  });

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge(Bar3DSeries.prototype, __WEBPACK_IMPORTED_MODULE_1__component_common_componentShadingMixin__["a" /* default */]);

  /***/ }),
  /* 234 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__line3D_Line3DSeries__ = __webpack_require__(235);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__line3D_Line3DView__ = __webpack_require__(236);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_echarts_lib_visual_symbol__ = __webpack_require__(51);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_echarts_lib_visual_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_echarts_lib_visual_symbol__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_opacityVisual__ = __webpack_require__(17);








  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerVisual(__WEBPACK_IMPORTED_MODULE_3_echarts_lib_visual_symbol___default()('line3D', 'circle', null));

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerVisual(Object(__WEBPACK_IMPORTED_MODULE_4__common_opacityVisual__["a" /* default */])('line3D'));

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerLayout(function (ecModel, api) {
      ecModel.eachSeriesByType('line3D', function (seriesModel) {
          var data = seriesModel.getData();
          var coordSys = seriesModel.coordinateSystem;

          if (coordSys) {
              if (coordSys.type !== 'cartesian3D') {
                  {
                      console.error('line3D needs cartesian3D coordinateSystem');
                  }
                  return;
              }
              var points = new Float32Array(data.count() * 3);

              var item = [];
              var out = [];

              var coordDims = coordSys.dimensions;
              var dims = coordDims.map(function (coordDim) {
                  return seriesModel.coordDimToDataDim(coordDim)[0];
              });

              if (coordSys) {
                  data.each(dims, function (x, y, z, idx) {
                      item[0] = x;
                      item[1] = y;
                      item[2] = z;

                      coordSys.dataToPoint(item, out);
                      points[idx * 3] = out[0];
                      points[idx * 3 + 1] = out[1];
                      points[idx * 3 + 2] = out[2];
                  });
              }
              data.setLayout('points', points);
          }
      });
  });

  /***/ }),
  /* 235 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_formatTooltip__ = __webpack_require__(40);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_createList__ = __webpack_require__(50);




  var Line3DSeries = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendSeriesModel({

      type: 'series.line3D',

      dependencies: ['grid3D'],

      visualColorAccessPath: 'lineStyle.color',

      getInitialData: function (option, ecModel) {
          return Object(__WEBPACK_IMPORTED_MODULE_2__common_createList__["a" /* default */])(this);
      },

      formatTooltip: function (dataIndex) {
          return Object(__WEBPACK_IMPORTED_MODULE_1__common_formatTooltip__["a" /* default */])(this, dataIndex);
      },

      defaultOption: {
          coordinateSystem: 'cartesian3D',
          zlevel: -10,

          // Cartesian coordinate system
          grid3DIndex: 0,

          lineStyle: {
              width: 2
          },

          animationDurationUpdate: 500
      }
  });

  /***/ }),
  /* 236 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__ = __webpack_require__(1);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_retrieve__ = __webpack_require__(2);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_geometry_Lines3D__ = __webpack_require__(25);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_claygl_src_math_Matrix4__ = __webpack_require__(7);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_claygl_src_math_Vector3__ = __webpack_require__(3);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_zrender_lib_contain_line__ = __webpack_require__(237);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_zrender_lib_contain_line___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_zrender_lib_contain_line__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_claygl_src_dep_glmatrix__ = __webpack_require__(6);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__util_shader_lines3D_glsl_js__ = __webpack_require__(46);











  var vec3 = __WEBPACK_IMPORTED_MODULE_7_claygl_src_dep_glmatrix__["a" /* default */].vec3;

  __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Shader.import(__WEBPACK_IMPORTED_MODULE_8__util_shader_lines3D_glsl_js__["a" /* default */]);

  /* unused harmony default export */ var _unused_webpack_default_export = (__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendChartView({

      type: 'line3D',

      __ecgl__: true,

      init: function (ecModel, api) {

          this.groupGL = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Node();

          this._api = api;
      },

      render: function (seriesModel, ecModel, api) {
          var tmp = this._prevLine3DMesh;
          this._prevLine3DMesh = this._line3DMesh;
          this._line3DMesh = tmp;

          if (!this._line3DMesh) {
              this._line3DMesh = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Mesh({
                  geometry: new __WEBPACK_IMPORTED_MODULE_3__util_geometry_Lines3D__["a" /* default */]({
                      useNativeLine: false,
                      sortTriangles: true
                  }),
                  material: new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Material({
                      shader: __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].createShader('ecgl.meshLines3D')
                  }),
                  // Render after axes
                  renderOrder: 10
              });
              this._line3DMesh.geometry.pick = this._pick.bind(this);
          }

          this.groupGL.remove(this._prevLine3DMesh);
          this.groupGL.add(this._line3DMesh);

          var coordSys = seriesModel.coordinateSystem;
          if (coordSys && coordSys.viewGL) {
              coordSys.viewGL.add(this.groupGL);
              // TODO
              var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';
              this._line3DMesh.material[methodName]('fragment', 'SRGB_DECODE');
          }
          this._doRender(seriesModel, api);

          this._data = seriesModel.getData();

          this._camera = coordSys.viewGL.camera;

          this.updateCamera();

          this._updateAnimation(seriesModel);
      },

      updateCamera: function () {
          this._updateNDCPosition();
      },

      _doRender: function (seriesModel, api) {
          var data = seriesModel.getData();
          var lineMesh = this._line3DMesh;

          lineMesh.geometry.resetOffset();

          var points = data.getLayout('points');

          var colorArr = [];
          var vertexColors = new Float32Array(points.length / 3 * 4);
          var colorOffset = 0;
          var hasTransparent = false;

          data.each(function (idx) {
              var color = data.getItemVisual(idx, 'color');
              var opacity = data.getItemVisual(idx, 'opacity');
              if (opacity == null) {
                  opacity = 1;
              }

              __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].parseColor(color, colorArr);
              colorArr[3] *= opacity;
              vertexColors[colorOffset++] = colorArr[0];
              vertexColors[colorOffset++] = colorArr[1];
              vertexColors[colorOffset++] = colorArr[2];
              vertexColors[colorOffset++] = colorArr[3];

              if (colorArr[3] < 0.99) {
                  hasTransparent = true;
              }
          });

          lineMesh.geometry.setVertexCount(
              lineMesh.geometry.getPolylineVertexCount(points)
          );
          lineMesh.geometry.setTriangleCount(
              lineMesh.geometry.getPolylineTriangleCount(points)
          );

          lineMesh.geometry.addPolyline(
              points, vertexColors,
              __WEBPACK_IMPORTED_MODULE_2__util_retrieve__["a" /* default */].firstNotNull(seriesModel.get('lineStyle.width'), 1)
          );

          lineMesh.geometry.dirty();
          lineMesh.geometry.updateBoundingBox();

          var material = lineMesh.material;
          material.transparent = hasTransparent;
          material.depthMask = !hasTransparent;

          var debugWireframeModel = seriesModel.getModel('debug.wireframe');
          if (debugWireframeModel.get('show')) {
              lineMesh.geometry.createAttribute('barycentric', 'float', 3);
              lineMesh.geometry.generateBarycentric();
              lineMesh.material.set('both', 'WIREFRAME_TRIANGLE');
              lineMesh.material.set(
                  'wireframeLineColor', __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].parseColor(
                      debugWireframeModel.get('lineStyle.color') || 'rgba(0,0,0,0.5)'
                  )
              );
              lineMesh.material.set(
                  'wireframeLineWidth', __WEBPACK_IMPORTED_MODULE_2__util_retrieve__["a" /* default */].firstNotNull(
                      debugWireframeModel.get('lineStyle.width'), 1
                  )
              );
          }
          else {
              lineMesh.material.set('both', 'WIREFRAME_TRIANGLE');
          }

          this._points = points;

          this._initHandler(seriesModel, api);
      },

      _updateAnimation: function (seriesModel) {
          __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].updateVertexAnimation(
              [['prevPosition', 'position'],
              ['prevPositionPrev', 'positionPrev'],
              ['prevPositionNext', 'positionNext']],
              this._prevLine3DMesh,
              this._line3DMesh,
              seriesModel
          );
      },

      _initHandler: function (seriesModel, api) {
          var data = seriesModel.getData();
          var coordSys = seriesModel.coordinateSystem;
          var lineMesh = this._line3DMesh;

          var lastDataIndex = -1;

          lineMesh.seriesIndex = seriesModel.seriesIndex;

          lineMesh.off('mousemove');
          lineMesh.off('mouseout');
          lineMesh.on('mousemove', function (e) {
              var value = coordSys.pointToData(e.point.array);
              var dataIndex = data.indicesOfNearest('x', value[0])[0];
              if (dataIndex !== lastDataIndex) {
                  // this._downplay(lastDataIndex);
                  // this._highlight(dataIndex);

                  api.dispatchAction({
                      type: 'grid3DShowAxisPointer',
                      value: [data.get('x', dataIndex), data.get('y', dataIndex), data.get('z', dataIndex)]
                  });

                  lineMesh.dataIndex = dataIndex;
              }


              lastDataIndex = dataIndex;
          }, this);
          lineMesh.on('mouseout', function (e) {
              // this._downplay(lastDataIndex);
              lastDataIndex = -1;
              lineMesh.dataIndex = -1;
              api.dispatchAction({
                  type: 'grid3DHideAxisPointer'
              });
          }, this);
      },

      // _highlight: function (dataIndex) {
      //     var data = this._data;
      //     if (!data) {
      //         return;
      //     }

      // },

      // _downplay: function (dataIndex) {
      //     var data = this._data;
      //     if (!data) {
      //         return;
      //     }
      // },

      _updateNDCPosition: function () {

          var worldViewProjection = new __WEBPACK_IMPORTED_MODULE_4_claygl_src_math_Matrix4__["a" /* default */]();
          var camera = this._camera;
          __WEBPACK_IMPORTED_MODULE_4_claygl_src_math_Matrix4__["a" /* default */].multiply(worldViewProjection, camera.projectionMatrix, camera.viewMatrix);

          var positionNDC = this._positionNDC;
          var points = this._points;
          var nPoints = points.length / 3;
          if (!positionNDC || positionNDC.length / 2 !== nPoints) {
              positionNDC = this._positionNDC = new Float32Array(nPoints * 2);
          }
          var pos = [];
          for (var i = 0; i < nPoints; i++) {
              var i3 = i * 3;
              var i2 = i * 2;
              pos[0] = points[i3];
              pos[1] = points[i3 + 1];
              pos[2] = points[i3 + 2];
              pos[3] = 1;

              vec3.transformMat4(pos, pos, worldViewProjection.array);
              positionNDC[i2] = pos[0] / pos[3];
              positionNDC[i2 + 1] = pos[1] / pos[3];
          }
      },

      _pick: function (x, y, renderer, camera, renderable, out) {
          var positionNDC = this._positionNDC;
          var seriesModel = this._data.hostModel;
          var lineWidth = seriesModel.get('lineStyle.width');

          var dataIndex = -1;
          var width = renderer.viewport.width;
          var height = renderer.viewport.height;

          var halfWidth = width * 0.5;
          var halfHeight = height * 0.5;
          x = (x + 1) * halfWidth;
          y = (y + 1) * halfHeight;

          for (var i = 1; i < positionNDC.length / 2; i++) {
              var x0 = (positionNDC[(i - 1) * 2] + 1) * halfWidth;
              var y0 = (positionNDC[(i - 1) * 2 + 1] + 1) * halfHeight;
              var x1 = (positionNDC[i * 2] + 1) * halfWidth;
              var y1 = (positionNDC[i * 2 + 1] + 1) * halfHeight;

              if (__WEBPACK_IMPORTED_MODULE_6_zrender_lib_contain_line___default.a.containStroke(x0, y0, x1, y1, lineWidth, x, y)) {
                  var dist0 = (x0 - x) * (x0 - x) + (y0 - y) * (y0 - y);
                  var dist1 = (x1 - x) * (x1 - x) + (y1 - y) * (y1 - y);
                  // Nearest point.
                  dataIndex = dist0 < dist1 ? (i - 1) : i;
              }
          }

          if (dataIndex >= 0) {
              var i3 = dataIndex * 3;
              var point = new __WEBPACK_IMPORTED_MODULE_5_claygl_src_math_Vector3__["a" /* default */](
                  this._points[i3],
                  this._points[i3 + 1],
                  this._points[i3 + 2]
              );

              out.push({
                  dataIndex: dataIndex,
                  point: point,
                  pointWorld: point.clone(),
                  target: this._line3DMesh,
                  distance: this._camera.getWorldPosition().dist(point)
              });
          }
      },

      remove: function () {
          this.groupGL.removeAll();
      },

      dispose: function () {
          this.groupGL.removeAll();
      }
  }));

  /***/ }),
  /* 237 */
  /***/ (function(module, exports) {

  /**
   * 线段包含判断
   * @param  {number}  x0
   * @param  {number}  y0
   * @param  {number}  x1
   * @param  {number}  y1
   * @param  {number}  lineWidth
   * @param  {number}  x
   * @param  {number}  y
   * @return {boolean}
   */
  function containStroke(x0, y0, x1, y1, lineWidth, x, y) {
    if (lineWidth === 0) {
      return false;
    }

    var _l = lineWidth;
    var _a = 0;
    var _b = x0; // Quick reject

    if (y > y0 + _l && y > y1 + _l || y < y0 - _l && y < y1 - _l || x > x0 + _l && x > x1 + _l || x < x0 - _l && x < x1 - _l) {
      return false;
    }

    if (x0 !== x1) {
      _a = (y0 - y1) / (x0 - x1);
      _b = (x0 * y1 - x1 * y0) / (x0 - x1);
    } else {
      return Math.abs(x - x0) <= _l / 2;
    }

    var tmp = _a * x - y + _b;

    var _s = tmp * tmp / (_a * _a + 1);

    return _s <= _l / 2 * _l / 2;
  }

  exports.containStroke = containStroke;

  /***/ }),
  /* 238 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__scatter3D_Scatter3DSeries__ = __webpack_require__(239);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__scatter3D_Scatter3DView__ = __webpack_require__(240);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_echarts_lib_visual_symbol__ = __webpack_require__(51);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_echarts_lib_visual_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_echarts_lib_visual_symbol__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_opacityVisual__ = __webpack_require__(17);







  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerVisual(__WEBPACK_IMPORTED_MODULE_3_echarts_lib_visual_symbol___default()('scatter3D', 'circle', null));

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerVisual(Object(__WEBPACK_IMPORTED_MODULE_4__common_opacityVisual__["a" /* default */])('scatter3D'));

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerLayout({
      seriesType: 'scatter3D',
      reset: function (seriesModel) {
          var coordSys = seriesModel.coordinateSystem;

          if (coordSys) {
              var coordDims = coordSys.dimensions;
              if (coordDims.length < 3) {
                  {
                      console.error('scatter3D needs 3D coordinateSystem');
                  }
                  return;
              }
              var dims = coordDims.map(function (coordDim) {
                  return seriesModel.coordDimToDataDim(coordDim)[0];
              });

              var item = [];
              var out = [];

              return {
                  progress: function (params, data) {
                      var points = new Float32Array((params.end - params.start) * 3);
                      for (var idx = params.start; idx < params.end; idx++) {
                          var idx3 = (idx - params.start) * 3;
                          item[0] = data.get(dims[0], idx);
                          item[1] = data.get(dims[1], idx);
                          item[2] = data.get(dims[2], idx);
                          coordSys.dataToPoint(item, out);
                          points[idx3] = out[0];
                          points[idx3 + 1] = out[1];
                          points[idx3 + 2] = out[2];
                      }
                      data.setLayout('points', points);
                  }
              };
          }
      }
  });

  /***/ }),
  /* 239 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_format__ = __webpack_require__(32);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_formatTooltip__ = __webpack_require__(40);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_createList__ = __webpack_require__(50);





  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendSeriesModel({

      type: 'series.scatter3D',

      dependencies: ['globe', 'grid3D', 'geo3D'],

      visualColorAccessPath: 'itemStyle.color',

      getInitialData: function (option, ecModel) {
          return Object(__WEBPACK_IMPORTED_MODULE_3__common_createList__["a" /* default */])(this);
      },

      getFormattedLabel: function (dataIndex, status, dataType, dimIndex) {
          var text = __WEBPACK_IMPORTED_MODULE_1__util_format__["a" /* default */].getFormattedLabel(this, dataIndex, status, dataType, dimIndex);
          if (text == null) {
              var data = this.getData();
              var lastDim = data.dimensions[data.dimensions.length - 1];
              text = data.get(lastDim, dataIndex);
          }
          return text;
      },

      formatTooltip: function (dataIndex) {
          return Object(__WEBPACK_IMPORTED_MODULE_2__common_formatTooltip__["a" /* default */])(this, dataIndex);
      },

      defaultOption: {
          coordinateSystem: 'cartesian3D',
          zlevel: -10,

          progressive: 1e5,
          progressiveThreshold: 1e5,

          // Cartesian coordinate system
          grid3DIndex: 0,

          globeIndex: 0,

          symbol: 'circle',
          symbolSize: 10,

          // Support source-over, lighter
          blendMode: 'source-over',

          label: {
              show: false,
              position: 'right',
              // Screen space distance
              distance: 5,

              textStyle: {
                  fontSize: 14,
                  color: '#000',
                  backgroundColor: 'rgba(255,255,255,0.7)',
                  padding: 3,
                  borderRadius: 3
              }
          },

          itemStyle: {
              opacity: 0.8
          },

          emphasis: {
              label: {
                  show: true
              }
          },

          animationDurationUpdate: 500
      }
  });

  /***/ }),
  /* 240 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__ = __webpack_require__(1);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_retrieve__ = __webpack_require__(2);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_format__ = __webpack_require__(32);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_PointsBuilder__ = __webpack_require__(66);







  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendChartView({

      type: 'scatter3D',

      __ecgl__: true,

      init: function (ecModel, api) {

          this.groupGL = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Node();

          this._pointsBuilderList = [];
          this._currentStep = 0;
      },

      render: function (seriesModel, ecModel, api) {
          this.groupGL.removeAll();
          if (!seriesModel.getData().count()) {
              return;
          }

          var coordSys = seriesModel.coordinateSystem;
          if (coordSys && coordSys.viewGL) {
              coordSys.viewGL.add(this.groupGL);
              this._camera = coordSys.viewGL.camera;

              var pointsBuilder = this._pointsBuilderList[0];
              if (!pointsBuilder) {
                  pointsBuilder = this._pointsBuilderList[0] = new __WEBPACK_IMPORTED_MODULE_4__common_PointsBuilder__["a" /* default */](false, api);
              }
              this._pointsBuilderList.length = 1;

              this.groupGL.add(pointsBuilder.rootNode);
              pointsBuilder.update(seriesModel, ecModel, api);
              pointsBuilder.updateView(coordSys.viewGL.camera);
          }
          else {
              {
                  throw new Error('Invalid coordinate system');
              }
          }
      },

      incrementalPrepareRender: function (seriesModel, ecModel, api) {
          var coordSys = seriesModel.coordinateSystem;
          if (coordSys && coordSys.viewGL) {
              coordSys.viewGL.add(this.groupGL);
              this._camera = coordSys.viewGL.camera;
          }
          else {
              {
                  throw new Error('Invalid coordinate system');
              }
          }

          this.groupGL.removeAll();
          this._currentStep = 0;
      },

      incrementalRender: function (params, seriesModel, ecModel, api) {
          // TODO Sort transparency.
          if (params.end <= params.start) {
              return;
          }
          var pointsBuilder = this._pointsBuilderList[this._currentStep];
          if (!pointsBuilder) {
              pointsBuilder = new __WEBPACK_IMPORTED_MODULE_4__common_PointsBuilder__["a" /* default */](false, api);
              this._pointsBuilderList[this._currentStep] = pointsBuilder;
          }
          this.groupGL.add(pointsBuilder.rootNode);

          pointsBuilder.update(seriesModel, ecModel, api, params.start, params.end);
          pointsBuilder.updateView(seriesModel.coordinateSystem.viewGL.camera);

          this._currentStep++;
      },

      updateCamera: function () {
          this._pointsBuilderList.forEach(function (pointsBuilder) {
              pointsBuilder.updateView(this._camera);
          }, this);
      },

      highlight: function (seriesModel, ecModel, api, payload) {
          this._toggleStatus('highlight', seriesModel, ecModel, api, payload);
      },

      downplay: function (seriesModel, ecModel, api, payload) {
          this._toggleStatus('downplay', seriesModel, ecModel, api, payload);
      },

      _toggleStatus: function (status, seriesModel, ecModel, api, payload) {
          var data = seriesModel.getData();
          var dataIndex = __WEBPACK_IMPORTED_MODULE_2__util_retrieve__["a" /* default */].queryDataIndex(data, payload);

          var isHighlight = status === 'highlight';
          if (dataIndex != null) {
              __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.each(__WEBPACK_IMPORTED_MODULE_3__util_format__["a" /* default */].normalizeToArray(dataIndex), function (dataIdx) {
                  for (var i = 0; i < this._pointsBuilderList.length; i++) {
                      var pointsBuilder = this._pointsBuilderList[i];
                      isHighlight ? pointsBuilder.highlight(data, dataIdx) : pointsBuilder.downplay(data, dataIdx);
                  }
              }, this);
          }
          else {
              // PENDING, OPTIMIZE
              data.each(function (dataIdx) {
                  for (var i = 0; i < this._pointsBuilderList.length; i++) {
                      var pointsBuilder = this._pointsBuilderList[i];
                      isHighlight ? pointsBuilder.highlight(data, dataIdx) : pointsBuilder.downplay(data, dataIdx);
                  }
              });
          }
      },

      dispose: function () {
          this.groupGL.removeAll();
      },

      remove: function () {
          this.groupGL.removeAll();
      }
  });

  /***/ }),
  /* 241 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);


  function makeSprite(size, canvas, draw) {
      // http://simonsarris.com/blog/346-how-you-clear-your-canvas-matters
      // http://jsperf.com/canvasclear
      // Set width and height is fast
      // And use the exist canvas if possible
      // http://jsperf.com/create-canvas-vs-set-width-height/2
      var canvas = canvas || document.createElement('canvas');
      canvas.width = size;
      canvas.height = size;
      var ctx = canvas.getContext('2d');

      draw && draw(ctx);

      return canvas;
  }

  function makePath(symbol, symbolSize, style, marginBias) {
      if (!__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.isArray(symbolSize)) {
          symbolSize = [symbolSize, symbolSize];
      }
      var margin = spriteUtil.getMarginByStyle(style, marginBias);
      var width = symbolSize[0] + margin.left + margin.right;
      var height = symbolSize[1] + margin.top + margin.bottom;
      var path = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.helper.createSymbol(symbol, 0, 0, symbolSize[0], symbolSize[1]);

      var size = Math.max(width, height);

      path.position = [margin.left, margin.top];
      if (width > height) {
          path.position[1] += (size - height) / 2;
      }
      else {
          path.position[0] += (size - width) / 2;
      }

      var rect = path.getBoundingRect();
      path.position[0] -= rect.x;
      path.position[1] -= rect.y;

      path.setStyle(style);

      path.update();

      path.__size = size;

      return path;
  }

      // http://www.valvesoftware.com/publications/2007/SIGGRAPH2007_AlphaTestedMagnification.pdf
  function generateSDF(ctx, sourceImageData, range) {

      var sourceWidth = sourceImageData.width;
      var sourceHeight = sourceImageData.height;

      var width = ctx.canvas.width;
      var height = ctx.canvas.height;

      var scaleX = sourceWidth / width;
      var scaleY = sourceHeight / height;

      function sign(r) {
          return r < 128 ? 1 : -1;
      }
      function searchMinDistance(x, y) {
          var minDistSqr = Infinity;
          x = Math.floor(x * scaleX);
          y = Math.floor(y * scaleY);
          var i = y * sourceWidth + x;
          var r = sourceImageData.data[i * 4];
          var a = sign(r);
          // Search for min distance
          for (var y2 = Math.max(y - range, 0); y2 < Math.min(y + range, sourceHeight); y2++) {
              for (var x2 = Math.max(x - range, 0); x2 < Math.min(x + range, sourceWidth); x2++) {
                  var i = y2 * sourceWidth + x2;
                  var r2 = sourceImageData.data[i * 4];
                  var b = sign(r2);
                  var dx = x2 - x;
                  var dy = y2 - y;
                  if (a !== b) {
                      var distSqr = dx * dx + dy * dy;
                      if (distSqr < minDistSqr) {
                          minDistSqr = distSqr;
                      }
                  }
              }
          }
          return a * Math.sqrt(minDistSqr);
      }

      var sdfImageData = ctx.createImageData(width, height);
      for (var y = 0; y < height; y++) {
          for (var x = 0; x < width; x++) {
              var dist = searchMinDistance(x, y);

              var normalized = dist / range * 0.5 + 0.5;
              var i = (y * width + x) * 4;
              sdfImageData.data[i++] = (1.0 - normalized) * 255;
              sdfImageData.data[i++] = (1.0 - normalized) * 255;
              sdfImageData.data[i++] = (1.0 - normalized) * 255;
              sdfImageData.data[i++] = 255;
          }
      }

      return sdfImageData;
  }

  var spriteUtil = {

      getMarginByStyle: function (style) {
          var minMargin = style.minMargin || 0;

          var lineWidth = 0;
          if (style.stroke && style.stroke !== 'none') {
              lineWidth = style.lineWidth == null ? 1 : style.lineWidth;
          }
          var shadowBlurSize = style.shadowBlur || 0;
          var shadowOffsetX = style.shadowOffsetX || 0;
          var shadowOffsetY = style.shadowOffsetY || 0;

          var margin = {};
          margin.left = Math.max(lineWidth / 2, -shadowOffsetX + shadowBlurSize, minMargin);
          margin.right = Math.max(lineWidth / 2, shadowOffsetX + shadowBlurSize, minMargin);
          margin.top = Math.max(lineWidth / 2, -shadowOffsetY + shadowBlurSize, minMargin);
          margin.bottom = Math.max(lineWidth / 2, shadowOffsetY + shadowBlurSize, minMargin);

          return margin;
      },

      // TODO Not consider shadowOffsetX, shadowOffsetY.
      /**
       * @param {string} symbol
       * @param {number | Array.<number>} symbolSize
       * @param {Object} style
       */
      createSymbolSprite: function (symbol, symbolSize, style, canvas) {
          var path = makePath(symbol, symbolSize, style);

          var margin = spriteUtil.getMarginByStyle(style);

          return {
              image: makeSprite(path.__size, canvas, function (ctx) {
                  path.brush(ctx);
              }),
              margin: margin
          };
      },

      createSDFFromCanvas: function (canvas, size, range, outCanvas) {
          // TODO Create a low resolution SDF from high resolution image.
          return makeSprite(size, outCanvas, function (outCtx) {
              var ctx = canvas.getContext('2d');
              var imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);

              outCtx.putImageData(generateSDF(outCtx, imgData, range), 0, 0);
          });
      },

      createSimpleSprite: function (size, canvas) {
          return makeSprite(size, canvas, function (ctx) {
              var halfSize = size / 2;
              ctx.beginPath();
              ctx.arc(halfSize, halfSize, 60, 0, Math.PI * 2, false) ;
              ctx.closePath();

              var gradient = ctx.createRadialGradient(
                  halfSize, halfSize, 0, halfSize, halfSize, halfSize
              );
              gradient.addColorStop(0, 'rgba(255, 255, 255, 1)');
              gradient.addColorStop(0.5, 'rgba(255, 255, 255, 0.5)');
              gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');
              ctx.fillStyle = gradient;
              ctx.fill();
          });
      }
  };

  /* harmony default export */ __webpack_exports__["a"] = (spriteUtil);

  /***/ }),
  /* 242 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_graphicGL__ = __webpack_require__(1);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_geometry_verticesSortMixin__ = __webpack_require__(243);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_claygl_src_dep_glmatrix__ = __webpack_require__(6);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__sdfSprite_glsl_js__ = __webpack_require__(244);




  var vec4 = __WEBPACK_IMPORTED_MODULE_3_claygl_src_dep_glmatrix__["a" /* default */].vec4;


  __WEBPACK_IMPORTED_MODULE_0__util_graphicGL__["a" /* default */].Shader.import(__WEBPACK_IMPORTED_MODULE_4__sdfSprite_glsl_js__["a" /* default */]);

  var PointsMesh = __WEBPACK_IMPORTED_MODULE_0__util_graphicGL__["a" /* default */].Mesh.extend(function () {
      var geometry = new __WEBPACK_IMPORTED_MODULE_0__util_graphicGL__["a" /* default */].Geometry({
          dynamic: true,
          attributes: {
              color: new __WEBPACK_IMPORTED_MODULE_0__util_graphicGL__["a" /* default */].Geometry.Attribute('color', 'float', 4, 'COLOR'),
              position: new __WEBPACK_IMPORTED_MODULE_0__util_graphicGL__["a" /* default */].Geometry.Attribute('position', 'float', 3, 'POSITION'),
              size: new __WEBPACK_IMPORTED_MODULE_0__util_graphicGL__["a" /* default */].Geometry.Attribute('size', 'float', 1),
              prevPosition: new __WEBPACK_IMPORTED_MODULE_0__util_graphicGL__["a" /* default */].Geometry.Attribute('prevPosition', 'float', 3),
              prevSize: new __WEBPACK_IMPORTED_MODULE_0__util_graphicGL__["a" /* default */].Geometry.Attribute('prevSize', 'float', 1)
          }
      });
      __WEBPACK_IMPORTED_MODULE_2_echarts_lib_echarts___default.a.util.extend(geometry, __WEBPACK_IMPORTED_MODULE_1__util_geometry_verticesSortMixin__["a" /* default */]);

      var material = new __WEBPACK_IMPORTED_MODULE_0__util_graphicGL__["a" /* default */].Material({
          shader: __WEBPACK_IMPORTED_MODULE_0__util_graphicGL__["a" /* default */].createShader('ecgl.sdfSprite'),
          transparent: true,
          depthMask: false
      });
      material.enableTexture('sprite');
      material.define('both', 'VERTEX_COLOR');
      material.define('both', 'VERTEX_SIZE');

      var sdfTexture = new __WEBPACK_IMPORTED_MODULE_0__util_graphicGL__["a" /* default */].Texture2D({
          image: document.createElement('canvas'),
          flipY: false
      });

      material.set('sprite', sdfTexture);

      // Custom pick methods.
      geometry.pick = this._pick.bind(this);

      return {
          geometry: geometry,
          material: material,
          mode: __WEBPACK_IMPORTED_MODULE_0__util_graphicGL__["a" /* default */].Mesh.POINTS,

          sizeScale: 1
      };
  }, {

      _pick: function (x, y, renderer, camera, renderable, out) {
          var positionNDC = this._positionNDC;
          if (!positionNDC) {
              return;
          }

          var viewport = renderer.viewport;
          var ndcScaleX = 2 / viewport.width;
          var ndcScaleY = 2 / viewport.height;
          // From near to far. indices have been sorted.
          for (var i = this.geometry.vertexCount - 1; i >= 0; i--) {
              var idx;
              if (!this.geometry.indices) {
                  idx = i;
              }
              else {
                  idx = this.geometry.indices[i];
              }

              var cx = positionNDC[idx * 2];
              var cy = positionNDC[idx * 2 + 1];

              var size = this.geometry.attributes.size.get(idx) / this.sizeScale;
              var halfSize = size / 2;

              if (
                  x > (cx - halfSize * ndcScaleX) && x < (cx + halfSize * ndcScaleX)
                  && y > (cy - halfSize * ndcScaleY) && y < (cy + halfSize * ndcScaleY)
              ) {
                  var point = new __WEBPACK_IMPORTED_MODULE_0__util_graphicGL__["a" /* default */].Vector3();
                  var pointWorld = new __WEBPACK_IMPORTED_MODULE_0__util_graphicGL__["a" /* default */].Vector3();
                  this.geometry.attributes.position.get(idx, point.array);
                  __WEBPACK_IMPORTED_MODULE_0__util_graphicGL__["a" /* default */].Vector3.transformMat4(pointWorld, point, this.worldTransform);
                  out.push({
                      vertexIndex: idx,
                      point: point,
                      pointWorld: pointWorld,
                      target: this,
                      distance: pointWorld.distance(camera.getWorldPosition())
                  });
              }
          }
      },

      updateNDCPosition: function (worldViewProjection, is2D, api) {
          var positionNDC = this._positionNDC;
          var geometry = this.geometry;
          if (!positionNDC || positionNDC.length / 2 !== geometry.vertexCount) {
              positionNDC = this._positionNDC = new Float32Array(geometry.vertexCount * 2);
          }

          var pos = vec4.create();
          for (var i = 0; i < geometry.vertexCount; i++) {
              geometry.attributes.position.get(i, pos);
              pos[3] = 1;
              vec4.transformMat4(pos, pos, worldViewProjection.array);
              vec4.scale(pos, pos, 1 / pos[3]);

              positionNDC[i * 2] = pos[0];
              positionNDC[i * 2 + 1] = pos[1];
          }
      }
  });

  /* harmony default export */ __webpack_exports__["a"] = (PointsMesh);

  /***/ }),
  /* 243 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ProgressiveQuickSort__ = __webpack_require__(96);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_claygl_src_dep_glmatrix__ = __webpack_require__(6);


  var vec3 = __WEBPACK_IMPORTED_MODULE_1_claygl_src_dep_glmatrix__["a" /* default */].vec3;

  /* harmony default export */ __webpack_exports__["a"] = ({

      needsSortVertices: function () {
          return this.sortVertices;
      },

      needsSortVerticesProgressively: function () {
          return this.needsSortVertices() && this.vertexCount >= 2e4;
      },

      doSortVertices: function (cameraPos, frame) {
          var indices = this.indices;
          var p = vec3.create();

          if (!indices) {
              indices = this.indices = this.vertexCount > 0xffff ? new Uint32Array(this.vertexCount) : new Uint16Array(this.vertexCount);
              for (var i = 0; i < indices.length; i++) {
                  indices[i] = i;
              }
          }
          // Do progressive quick sort.
          if (frame === 0) {
              var posAttr = this.attributes.position;
              var cameraPos = cameraPos.array;
              var noneCount = 0;
              if (!this._zList || this._zList.length !== this.vertexCount) {
                  this._zList = new Float32Array(this.vertexCount);
              }

              var firstZ;
              for (var i = 0; i < this.vertexCount; i++) {
                  posAttr.get(i, p);
                  // Camera position is in object space
                  var z = vec3.sqrDist(p, cameraPos);
                  if (isNaN(z)) {
                      // Put far away, NaN value may cause sort slow
                      z = 1e7;
                      noneCount++;
                  }
                  if (i === 0) {
                      firstZ = z;
                      z = 0;
                  }
                  else {
                      // Only store the difference to avoid the precision issue.
                      z = z - firstZ;
                  }
                  this._zList[i] = z;
              }

              this._noneCount = noneCount;
          }

          if (this.vertexCount < 2e4) {
              // Use simple native sort for simple geometries.
              if (frame === 0) {
                  this._simpleSort(this._noneCount / this.vertexCount > 0.05);
              }
          }
          else {
              for (var i = 0; i < 3; i++) {
                  this._progressiveQuickSort(frame * 3 + i);
              }
          }

          this.dirtyIndices();
      },

      _simpleSort: function (useNativeQuickSort) {
          var zList = this._zList;
          var indices = this.indices;
          function compare(a, b) {
              // Sort from far to near. which is descending order
              return zList[b] - zList[a];
          }

          // When too much value are equal, using native quick sort with three partition..
          // or the simple quick sort will be nearly O(n*n)
          // http://stackoverflow.com/questions/5126586/quicksort-complexity-when-all-the-elements-are-same

          // Otherwise simple quicksort is more effecient than v8 native quick sort when data all different.
          if (useNativeQuickSort) {
              Array.prototype.sort.call(indices, compare);
          }
          else {
              __WEBPACK_IMPORTED_MODULE_0__ProgressiveQuickSort__["a" /* default */].sort(indices, compare, 0, indices.length - 1);
          }
      },

      _progressiveQuickSort: function (frame) {
          var zList = this._zList;
          var indices = this.indices;

          this._quickSort = this._quickSort || new __WEBPACK_IMPORTED_MODULE_0__ProgressiveQuickSort__["a" /* default */]();

          this._quickSort.step(indices, function (a, b) {
              return zList[b] - zList[a];
          }, frame);
      }
  });

  /***/ }),
  /* 244 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("@export ecgl.sdfSprite.vertex\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nuniform float elapsedTime : 0;\n\nattribute vec3 position : POSITION;\n\n#ifdef VERTEX_SIZE\nattribute float size;\n#else\nuniform float u_Size;\n#endif\n\n#ifdef VERTEX_COLOR\nattribute vec4 a_FillColor: COLOR;\nvarying vec4 v_Color;\n#endif\n\n#ifdef VERTEX_ANIMATION\nattribute vec3 prevPosition;\nattribute float prevSize;\nuniform float percent : 1.0;\n#endif\n\n\n#ifdef POSITIONTEXTURE_ENABLED\nuniform sampler2D positionTexture;\n#endif\n\nvarying float v_Size;\n\nvoid main()\n{\n\n#ifdef POSITIONTEXTURE_ENABLED\n gl_Position = worldViewProjection * vec4(texture2D(positionTexture, position.xy).xy, -10.0, 1.0);\n#else\n\n #ifdef VERTEX_ANIMATION\n vec3 pos = mix(prevPosition, position, percent);\n #else\n vec3 pos = position;\n #endif\n gl_Position = worldViewProjection * vec4(pos, 1.0);\n#endif\n\n#ifdef VERTEX_SIZE\n#ifdef VERTEX_ANIMATION\n v_Size = mix(prevSize, size, percent);\n#else\n v_Size = size;\n#endif\n#else\n v_Size = u_Size;\n#endif\n\n#ifdef VERTEX_COLOR\n v_Color = a_FillColor;\n #endif\n\n gl_PointSize = v_Size;\n}\n\n@end\n\n@export ecgl.sdfSprite.fragment\n\nuniform vec4 color: [1, 1, 1, 1];\nuniform vec4 strokeColor: [1, 1, 1, 1];\nuniform float smoothing: 0.07;\n\nuniform float lineWidth: 0.0;\n\n#ifdef VERTEX_COLOR\nvarying vec4 v_Color;\n#endif\n\nvarying float v_Size;\n\nuniform sampler2D sprite;\n\n@import clay.util.srgb\n\nvoid main()\n{\n gl_FragColor = color;\n\n vec4 _strokeColor = strokeColor;\n\n#ifdef VERTEX_COLOR\n gl_FragColor *= v_Color;\n #endif\n\n#ifdef SPRITE_ENABLED\n float d = texture2D(sprite, gl_PointCoord).r;\n gl_FragColor.a *= smoothstep(0.5 - smoothing, 0.5 + smoothing, d);\n\n if (lineWidth > 0.0) {\n float sLineWidth = lineWidth / 2.0;\n\n float outlineMaxValue0 = 0.5 + sLineWidth;\n float outlineMaxValue1 = 0.5 + sLineWidth + smoothing;\n float outlineMinValue0 = 0.5 - sLineWidth - smoothing;\n float outlineMinValue1 = 0.5 - sLineWidth;\n\n if (d <= outlineMaxValue1 && d >= outlineMinValue0) {\n float a = _strokeColor.a;\n if (d <= outlineMinValue1) {\n a = a * smoothstep(outlineMinValue0, outlineMinValue1, d);\n }\n else {\n a = a * smoothstep(outlineMaxValue1, outlineMaxValue0, d);\n }\n gl_FragColor.rgb = mix(gl_FragColor.rgb * gl_FragColor.a, _strokeColor.rgb, a);\n gl_FragColor.a = gl_FragColor.a * (1.0 - a) + a;\n }\n }\n#endif\n\n#ifdef SRGB_DECODE\n gl_FragColor = sRGBToLinear(gl_FragColor);\n#endif\n}\n@end");


  /***/ }),
  /* 245 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__lines3D_lines3DLayout__ = __webpack_require__(246);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__lines3D_Lines3DView__ = __webpack_require__(247);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__lines3D_Lines3DSeries__ = __webpack_require__(250);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_opacityVisual__ = __webpack_require__(17);









  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerVisual(Object(__WEBPACK_IMPORTED_MODULE_4__common_opacityVisual__["a" /* default */])('lines3D'));


  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerAction({
      type: 'lines3DPauseEffect',
      event: 'lines3deffectpaused',
      update: 'series.lines3D:pauseEffect'
  }, function () {});

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerAction({
      type: 'lines3DResumeEffect',
      event: 'lines3deffectresumed',
      update: 'series.lines3D:resumeEffect'
  }, function () {});

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerAction({
      type: 'lines3DToggleEffect',
      event: 'lines3deffectchanged',
      update: 'series.lines3D:toggleEffect'
  }, function () {});

  /***/ }),
  /* 246 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_claygl_src_dep_glmatrix__ = __webpack_require__(6);


  var vec3 = __WEBPACK_IMPORTED_MODULE_1_claygl_src_dep_glmatrix__["a" /* default */].vec3;
  var vec2 = __WEBPACK_IMPORTED_MODULE_1_claygl_src_dep_glmatrix__["a" /* default */].vec2;
  var normalize = vec3.normalize;
  var cross = vec3.cross;
  var sub = vec3.sub;
  var add = vec3.add;
  var create = vec3.create;

  var normal = create();
  var tangent = create();
  var bitangent = create();
  var halfVector = create();

  var coord0 = [];
  var coord1 = [];

  function getCubicPointsOnGlobe(coords, coordSys) {
      vec2.copy(coord0, coords[0]);
      vec2.copy(coord1, coords[1]);

      var pts = [];
      var p0 = pts[0] = create();
      var p1 = pts[1] = create();
      var p2 = pts[2] = create();
      var p3 = pts[3] = create();
      coordSys.dataToPoint(coord0, p0);
      coordSys.dataToPoint(coord1, p3);
      // Get p1
      normalize(normal, p0);
      // TODO p0-p3 is parallel with normal
      sub(tangent, p3, p0);
      normalize(tangent, tangent);
      cross(bitangent, tangent, normal);
      normalize(bitangent, bitangent);
      cross(tangent, normal, bitangent);
      // p1 is half vector of p0 and tangent on p0
      add(p1, normal, tangent);
      normalize(p1, p1);

      // Get p2
      normalize(normal, p3);
      sub(tangent, p0, p3);
      normalize(tangent, tangent);
      cross(bitangent, tangent, normal);
      normalize(bitangent, bitangent);
      cross(tangent, normal, bitangent);
      // p2 is half vector of p3 and tangent on p3
      add(p2, normal, tangent);
      normalize(p2, p2);

      // Project distance of p0 on halfVector
      add(halfVector, p0, p3);
      normalize(halfVector, halfVector);
      var projDist = vec3.dot(p0, halfVector);
      // Angle of halfVector and p1
      var cosTheta = vec3.dot(halfVector, p1);

      var len = (Math.max(vec3.len(p0), vec3.len(p3)) - projDist) / cosTheta * 2;

      vec3.scaleAndAdd(p1, p0, p1, len);
      vec3.scaleAndAdd(p2, p3, p2, len);

      return pts;
  }

  function getCubicPointsOnPlane(coords, coordSys, up) {
      var pts = [];
      var p0 = pts[0] = vec3.create();
      var p1 = pts[1] = vec3.create();
      var p2 = pts[2] = vec3.create();
      var p3 = pts[3] = vec3.create();

      coordSys.dataToPoint(coords[0], p0);
      coordSys.dataToPoint(coords[1], p3);

      var len = vec3.dist(p0, p3);
      vec3.lerp(p1, p0, p3, 0.3);
      vec3.lerp(p2, p0, p3, 0.3);

      vec3.scaleAndAdd(p1, p1, up, Math.min(len * 0.1, 10));
      vec3.scaleAndAdd(p2, p2, up, Math.min(len * 0.1, 10));

      return pts;
  }

  function getPolylinePoints(coords, coordSys) {
      var pts = new Float32Array(coords.length * 3);
      var off = 0;
      var pt = [];
      for (var i = 0; i < coords.length; i++) {
          coordSys.dataToPoint(coords[i], pt);
          pts[off++] = pt[0];
          pts[off++] = pt[1];
          pts[off++] = pt[2];
      }
      return pts;
  }

  function prepareCoords(data) {
      var coordsList = [];

      data.each(function (idx) {
          var itemModel = data.getItemModel(idx);
          var coords = (itemModel.option instanceof Array) ?
              itemModel.option : itemModel.getShallow('coords', true);

          {
              if (!(coords instanceof Array && coords.length > 0 && coords[0] instanceof Array)) {
                  throw new Error('Invalid coords ' + JSON.stringify(coords) + '. Lines must have 2d coords array in data item.');
              }
          }
          coordsList.push(coords);
      });

      return {
          coordsList: coordsList
      };
  }

  function layoutGlobe(seriesModel, coordSys) {
      var data = seriesModel.getData();
      var isPolyline = seriesModel.get('polyline');

      data.setLayout('lineType', isPolyline ? 'polyline' : 'cubicBezier');

      var res = prepareCoords(data);

      data.each(function (idx) {
          var coords = res.coordsList[idx];
          var getPointsMethod = isPolyline ? getPolylinePoints : getCubicPointsOnGlobe;
          data.setItemLayout(idx, getPointsMethod(coords, coordSys));
      });
  }

  function layoutOnPlane(seriesModel, coordSys, normal) {
      var data = seriesModel.getData();
      var isPolyline = seriesModel.get('polyline');

      var res = prepareCoords(data);

      data.setLayout('lineType', isPolyline ? 'polyline' : 'cubicBezier');

      data.each(function (idx) {
          var coords = res.coordsList[idx];
          var pts = isPolyline ? getPolylinePoints(coords, coordSys)
              : getCubicPointsOnPlane(coords, coordSys, normal);
          data.setItemLayout(idx, pts);
      });
  }

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerLayout(function (ecModel, api) {
      ecModel.eachSeriesByType('lines3D', function (seriesModel) {
          var coordSys = seriesModel.coordinateSystem;
          if (coordSys.type === 'globe') {
              layoutGlobe(seriesModel, coordSys);
          }
          else if (coordSys.type === 'geo3D') {
              layoutOnPlane(seriesModel, coordSys, [0, 1, 0]);
          }
          else if (coordSys.type === 'mapbox3D' || coordSys.type === 'maptalks3D') {
              layoutOnPlane(seriesModel, coordSys, [0, 0, 1]);
          }
      });
  });

  /***/ }),
  /* 247 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__ = __webpack_require__(1);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_geometry_Lines3D__ = __webpack_require__(25);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__TrailMesh2__ = __webpack_require__(248);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_shader_lines3D_glsl_js__ = __webpack_require__(46);



  // import TrailMesh from './TrailMesh';



  __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Shader.import(__WEBPACK_IMPORTED_MODULE_4__util_shader_lines3D_glsl_js__["a" /* default */]);

  function getCoordSysSize(coordSys) {
      if (coordSys.radius != null) {
          return coordSys.radius;
      }
      if (coordSys.size != null) {
          return Math.max(coordSys.size[0], coordSys.size[1], coordSys.size[2]);
      }
      else {
          return 100;
      }
  }

  /* unused harmony default export */ var _unused_webpack_default_export = (__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendChartView({

      type: 'lines3D',

      __ecgl__: true,

      init: function (ecModel, api) {
          this.groupGL = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Node();

          this._meshLinesMaterial = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Material({
              shader: __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].createShader('ecgl.meshLines3D'),
              transparent: true,
              depthMask: false
          });
          this._linesMesh = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Mesh({
              geometry: new __WEBPACK_IMPORTED_MODULE_2__util_geometry_Lines3D__["a" /* default */](),
              material: this._meshLinesMaterial,
              $ignorePicking: true
          });

          // this._trailMesh = new TrailMesh();
          this._trailMesh = new __WEBPACK_IMPORTED_MODULE_3__TrailMesh2__["a" /* default */]();
      },

      render: function (seriesModel, ecModel, api) {

          this.groupGL.add(this._linesMesh);

          var coordSys = seriesModel.coordinateSystem;
          var data = seriesModel.getData();

          if (coordSys && coordSys.viewGL) {
              var viewGL = coordSys.viewGL;
              viewGL.add(this.groupGL);

              this._updateLines(seriesModel, ecModel, api);

              var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';
              this._linesMesh.material[methodName]('fragment', 'SRGB_DECODE');
              this._trailMesh.material[methodName]('fragment', 'SRGB_DECODE');
          }

          var trailMesh = this._trailMesh;
          trailMesh.stopAnimation();

          if (seriesModel.get('effect.show')) {
              this.groupGL.add(trailMesh);

              trailMesh.updateData(data, api, this._linesMesh.geometry);

              trailMesh.__time = trailMesh.__time || 0;
              var time = 3600 * 1000; // 1hour
              this._curveEffectsAnimator = trailMesh.animate('', { loop: true })
                  .when(time, {
                      __time: time
                  })
                  .during(function () {
                      trailMesh.setAnimationTime(trailMesh.__time);
                  })
                  .start();
          }
          else {
              this.groupGL.remove(trailMesh);
              this._curveEffectsAnimator = null;
          }

          this._linesMesh.material.blend = this._trailMesh.material.blend
              = seriesModel.get('blendMode') === 'lighter'
              ? __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].additiveBlend : null;
      },

      pauseEffect: function () {
          if (this._curveEffectsAnimator) {
              this._curveEffectsAnimator.pause();
          }
      },

      resumeEffect: function () {
          if (this._curveEffectsAnimator) {
              this._curveEffectsAnimator.resume();
          }
      },

      toggleEffect: function () {
          var animator = this._curveEffectsAnimator;
          if (animator) {
              animator.isPaused() ? animator.resume() : animator.pause();
          }
      },

      _updateLines: function (seriesModel, ecModel, api) {
          var data = seriesModel.getData();
          var coordSys = seriesModel.coordinateSystem;
          var geometry = this._linesMesh.geometry;
          var isPolyline = seriesModel.get('polyline');

          geometry.expandLine = true;

          var size = getCoordSysSize(coordSys);
          geometry.segmentScale = size / 20;

          var lineWidthQueryPath = 'lineStyle.width'.split('.');
          var dpr = api.getDevicePixelRatio();
          data.each(function (idx) {
              var itemModel = data.getItemModel(idx);
              var lineWidth = itemModel.get(lineWidthQueryPath);
              if (lineWidth == null) {
                  lineWidth = 1;
              }
              data.setItemVisual(idx, 'lineWidth', lineWidth);
          });

          // Must set useNativeLine before calling any other methods
          geometry.useNativeLine = false;

          var nVertex = 0;
          var nTriangle = 0;
          data.each(function (idx) {
              var pts = data.getItemLayout(idx);
              if (isPolyline) {
                  nVertex += geometry.getPolylineVertexCount(pts);
                  nTriangle += geometry.getPolylineTriangleCount(pts);
              }
              else {
                  nVertex += geometry.getCubicCurveVertexCount(pts[0], pts[1], pts[2], pts[3]);
                  nTriangle += geometry.getCubicCurveTriangleCount(pts[0], pts[1], pts[2], pts[3]);
              }
          });

          geometry.setVertexCount(nVertex);
          geometry.setTriangleCount(nTriangle);
          geometry.resetOffset();

          var colorArr = [];
          data.each(function (idx) {
              var pts = data.getItemLayout(idx);
              var color = data.getItemVisual(idx, 'color');
              var opacity = data.getItemVisual(idx, 'opacity');
              var lineWidth = data.getItemVisual(idx, 'lineWidth') * dpr;
              if (opacity == null) {
                  opacity = 1;
              }

              colorArr = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].parseColor(color, colorArr);
              colorArr[3] *= opacity;
              if (isPolyline) {
                  geometry.addPolyline(pts, colorArr, lineWidth);
              }
              else {
                  geometry.addCubicCurve(pts[0], pts[1], pts[2], pts[3], colorArr, lineWidth);
              }
          });

          geometry.dirty();
      },

      remove: function () {
          this.groupGL.removeAll();
      },

      dispose: function () {
          this.groupGL.removeAll();
      }
  }));

  /***/ }),
  /* 248 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__ = __webpack_require__(1);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_claygl_src_dep_glmatrix__ = __webpack_require__(6);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_geometry_Lines3D__ = __webpack_require__(25);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__shader_trail2_glsl_js__ = __webpack_require__(249);







  var vec3 = __WEBPACK_IMPORTED_MODULE_2_claygl_src_dep_glmatrix__["a" /* default */].vec3;

  function sign(a) {
      return a > 0 ? 1 : -1;
  }

  __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Shader.import(__WEBPACK_IMPORTED_MODULE_4__shader_trail2_glsl_js__["a" /* default */]);

  /* harmony default export */ __webpack_exports__["a"] = (__WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Mesh.extend(function () {

      var material = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Material({
          shader: new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Shader(
              __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Shader.source('ecgl.trail2.vertex'),
              __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Shader.source('ecgl.trail2.fragment')
          ),
          transparent: true,
          depthMask: false
      });

      var geometry = new __WEBPACK_IMPORTED_MODULE_3__util_geometry_Lines3D__["a" /* default */]({
          dynamic: true
      });
      geometry.createAttribute('dist', 'float', 1);
      geometry.createAttribute('distAll', 'float', 1);
      geometry.createAttribute('start', 'float', 1);

      return {
          geometry: geometry,
          material: material,
          culling: false,
          $ignorePicking: true
      };
  }, {

      updateData: function (data, api, lines3DGeometry) {
          var seriesModel = data.hostModel;
          var geometry = this.geometry;

          var effectModel = seriesModel.getModel('effect');
          var size = effectModel.get('trailWidth') * api.getDevicePixelRatio();
          var trailLength = effectModel.get('trailLength');

          var speed = seriesModel.get('effect.constantSpeed');
          var period = seriesModel.get('effect.period') * 1000;
          var useConstantSpeed = speed != null;

          {
              if (!this.getScene()) {
                  console.error('TrailMesh must been add to scene before updateData');
              }
          }

          useConstantSpeed
              ? this.material.set('speed', speed / 1000)
              : this.material.set('period', period);

          this.material[useConstantSpeed ? 'define' : 'undefine']('vertex', 'CONSTANT_SPEED');

          var isPolyline = seriesModel.get('polyline');

          geometry.trailLength = trailLength;
          this.material.set('trailLength', trailLength);

          geometry.resetOffset();

          ['position', 'positionPrev', 'positionNext'].forEach(function (attrName) {
              geometry.attributes[attrName].value = lines3DGeometry.attributes[attrName].value;
          });

          var extraAttrs = ['dist', 'distAll', 'start', 'offset', 'color'];

          extraAttrs.forEach(function (attrName) {
              geometry.attributes[attrName].init(geometry.vertexCount);
          });
          geometry.indices = lines3DGeometry.indices;

          var colorArr = [];
          var effectColor = effectModel.get('trailColor');
          var effectOpacity = effectModel.get('trailOpacity');
          var hasEffectColor = effectColor != null;
          var hasEffectOpacity = effectOpacity != null;

          this.updateWorldTransform();
          var xScale = this.worldTransform.x.len();
          var yScale = this.worldTransform.y.len();
          var zScale = this.worldTransform.z.len();

          var vertexOffset = 0;

          var maxDistance = 0;

          data.each(function (idx) {
              var pts = data.getItemLayout(idx);
              var opacity = hasEffectOpacity ? effectOpacity : data.getItemVisual(idx, 'opacity');
              var color = data.getItemVisual(idx, 'color');

              if (opacity == null) {
                  opacity = 1;
              }
              colorArr = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].parseColor(hasEffectColor ? effectColor : color, colorArr);
              colorArr[3] *= opacity;

              var vertexCount = isPolyline
                  ? lines3DGeometry.getPolylineVertexCount(pts)
                  : lines3DGeometry.getCubicCurveVertexCount(pts[0], pts[1], pts[2], pts[3]);

              var dist = 0;
              var pos = [];
              var posPrev = [];
              for (var i = vertexOffset; i < vertexOffset + vertexCount; i++) {
                  geometry.attributes.position.get(i, pos);
                  pos[0] *= xScale;
                  pos[1] *= yScale;
                  pos[2] *= zScale;
                  if (i > vertexOffset) {
                      dist += vec3.dist(pos, posPrev);
                  }
                  geometry.attributes.dist.set(i, dist);
                  vec3.copy(posPrev, pos);
              }

              maxDistance = Math.max(maxDistance, dist);

              var randomStart = Math.random() * (useConstantSpeed ? dist : period);
              for (var i = vertexOffset; i < vertexOffset + vertexCount; i++) {
                  geometry.attributes.distAll.set(i, dist);
                  geometry.attributes.start.set(i, randomStart);

                  geometry.attributes.offset.set(
                      i, sign(lines3DGeometry.attributes.offset.get(i)) * size / 2
                  );
                  geometry.attributes.color.set(i, colorArr);
              }

              vertexOffset += vertexCount;
          });

          this.material.set('spotSize', maxDistance * 0.1 * trailLength);
          this.material.set('spotIntensity', effectModel.get('spotIntensity'));

          geometry.dirty();
      },

      setAnimationTime: function (time) {
          this.material.set('time', time);
      }
  }));

  /***/ }),
  /* 249 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("@export ecgl.trail2.vertex\nattribute vec3 position: POSITION;\nattribute vec3 positionPrev;\nattribute vec3 positionNext;\nattribute float offset;\nattribute float dist;\nattribute float distAll;\nattribute float start;\n\nattribute vec4 a_Color : COLOR;\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nuniform vec4 viewport : VIEWPORT;\nuniform float near : NEAR;\n\nuniform float speed : 0;\nuniform float trailLength: 0.3;\nuniform float time;\nuniform float period: 1000;\n\nuniform float spotSize: 1;\n\nvarying vec4 v_Color;\nvarying float v_Percent;\nvarying float v_SpotPercent;\n\n@import ecgl.common.wireframe.vertexHeader\n\n@import ecgl.lines3D.clipNear\n\nvoid main()\n{\n @import ecgl.lines3D.expandLine\n\n gl_Position = currProj;\n\n v_Color = a_Color;\n\n @import ecgl.common.wireframe.vertexMain\n\n#ifdef CONSTANT_SPEED\n float t = mod((speed * time + start) / distAll, 1. + trailLength) - trailLength;\n#else\n float t = mod((time + start) / period, 1. + trailLength) - trailLength;\n#endif\n\n float trailLen = distAll * trailLength;\n\n v_Percent = (dist - t * distAll) / trailLen;\n\n v_SpotPercent = spotSize / distAll;\n\n }\n@end\n\n\n@export ecgl.trail2.fragment\n\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\nuniform float spotIntensity: 5;\n\nvarying vec4 v_Color;\nvarying float v_Percent;\nvarying float v_SpotPercent;\n\n@import ecgl.common.wireframe.fragmentHeader\n\n@import clay.util.srgb\n\nvoid main()\n{\n if (v_Percent > 1.0 || v_Percent < 0.0) {\n discard;\n }\n\n float fade = v_Percent;\n\n#ifdef SRGB_DECODE\n gl_FragColor = sRGBToLinear(color * v_Color);\n#else\n gl_FragColor = color * v_Color;\n#endif\n\n @import ecgl.common.wireframe.fragmentMain\n\n if (v_Percent > (1.0 - v_SpotPercent)) {\n gl_FragColor.rgb *= spotIntensity;\n }\n\n gl_FragColor.a *= fade;\n}\n\n@end");


  /***/ }),
  /* 250 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);


  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendSeriesModel({

      type: 'series.lines3D',

      dependencies: ['globe'],

      visualColorAccessPath: 'lineStyle.color',

      getInitialData: function (option, ecModel) {
          var lineData = new __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.List(['value'], this);
          lineData.hasItemOption = false;
          lineData.initData(option.data, [], function (dataItem, dimName, dataIndex, dimIndex) {
              // dataItem is simply coords
              if (dataItem instanceof Array) {
                  return NaN;
              }
              else {
                  lineData.hasItemOption = true;
                  var value = dataItem.value;
                  if (value != null) {
                      return value instanceof Array ? value[dimIndex] : value;
                  }
              }
          });

          return lineData;
      },

      defaultOption: {

          coordinateSystem: 'globe',

          globeIndex: 0,

          geo3DIndex: 0,

          zlevel: -10,

          polyline: false,

          effect: {
              show: false,
              period: 4,
              // Trail width
              trailWidth: 4,
              trailLength: 0.2,

              spotIntensity: 6
          },

          silent: true,

          // Support source-over, lighter
          blendMode: 'source-over',

          lineStyle: {
              width: 1,
              opacity: 0.5
              // color
          }
      }
  });

  /***/ }),
  /* 251 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__polygons3D_Polygons3DSeries__ = __webpack_require__(252);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__polygons3D_Polygons3DView__ = __webpack_require__(253);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_opacityVisual__ = __webpack_require__(17);







  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerVisual(Object(__WEBPACK_IMPORTED_MODULE_3__common_opacityVisual__["a" /* default */])('polygons3D'));

  /***/ }),
  /* 252 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__component_common_componentShadingMixin__ = __webpack_require__(31);



  function transformPolygon(coordSys, poly) {
      var ret = [];
      for (var i = 0; i < poly.length; i++) {
          ret.push(coordSys.dataToPoint(poly[i]));
      }
      return ret;
  }

  var Polygons3DSeries = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendSeriesModel({

      type: 'series.polygons3D',

      getRegionModel: function (idx) {
          return this.getData().getItemModel(idx);
      },

      getRegionPolygonCoords: function (idx) {
          var coordSys = this.coordinateSystem;
          var itemModel = this.getData().getItemModel(idx);
          var coords = itemModel.option instanceof Array
              ? itemModel.option : itemModel.getShallow('coords');
          if (!itemModel.get('multiPolygon')) {
              coords = [coords];
          }
          // TODO Validate
          var out = [];
          for (var i = 0; i < coords.length; i++) {
              // TODO Convert here ?
              var interiors = [];
              for (var k = 1; k < coords[i].length; k++) {
                  interiors.push(transformPolygon(coordSys, coords[i][k]));
              }
              out.push({
                  exterior: transformPolygon(coordSys, coords[i][0]),
                  interiors: interiors
              });
          }
          return out;
      },

      getInitialData: function (option) {
          var polygonsData = new __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.List(['value'], this);
          polygonsData.hasItemOption = false;
          polygonsData.initData(option.data, [], function (dataItem, dimName, dataIndex, dimIndex) {
              // dataItem is simply coords
              if (dataItem instanceof Array) {
                  return NaN;
              }
              else {
                  polygonsData.hasItemOption = true;
                  var value = dataItem.value;
                  if (value != null) {
                      return value instanceof Array ? value[dimIndex] : value;
                  }
              }
          });

          return polygonsData;
      },

      defaultOption: {

          show: true,

          data: null,

          multiPolygon: false,

          progressiveThreshold: 1e3,
          progressive: 1e3,

          zlevel: -10,

          label: {
              show: false,
              // Distance in 3d space.
              distance: 2,

              textStyle: {
                  fontSize: 20,
                  color: '#000',
                  backgroundColor: 'rgba(255,255,255,0.7)',
                  padding: 3,
                  borderRadius: 4
              }
          },

          itemStyle: {
              color: '#fff',
              borderWidth: 0,
              borderColor: '#333'
          },

          emphasis: {
              itemStyle: {
                  color: '#639fc0'
              },
              label: {
                  show: true
              }
          }
      }
  });

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge(Polygons3DSeries.prototype, __WEBPACK_IMPORTED_MODULE_1__component_common_componentShadingMixin__["a" /* default */]);

  /***/ }),
  /* 253 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__component_common_Geo3DBuilder__ = __webpack_require__(63);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_graphicGL__ = __webpack_require__(1);




  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendChartView({

      type: 'polygons3D',

      __ecgl__: true,

      init: function (ecModel, api) {
          this.groupGL = new __WEBPACK_IMPORTED_MODULE_2__util_graphicGL__["a" /* default */].Node();

          this._geo3DBuilderList = [];

          this._currentStep = 0;
      },

      render: function (seriesModel, ecModel, api) {
          this.groupGL.removeAll();

          var coordSys = seriesModel.coordinateSystem;
          if (coordSys && coordSys.viewGL) {
              coordSys.viewGL.add(this.groupGL);
          }

          var geo3DBuilder = this._geo3DBuilderList[0];
          if (!geo3DBuilder) {
              geo3DBuilder = new __WEBPACK_IMPORTED_MODULE_1__component_common_Geo3DBuilder__["a" /* default */](api);
              geo3DBuilder.extrudeY = coordSys.type !== 'mapbox3D'
                  && coordSys.type !== 'maptalks3D';
              this._geo3DBuilderList[0] = geo3DBuilder;
          }
          this._updateShaderDefines(coordSys, geo3DBuilder);

          geo3DBuilder.update(seriesModel, ecModel, api);
          this._geo3DBuilderList.length = 1;

          this.groupGL.add(geo3DBuilder.rootNode);
      },

      incrementalPrepareRender: function (seriesModel, ecModel, api) {
          this.groupGL.removeAll();

          var coordSys = seriesModel.coordinateSystem;
          if (coordSys && coordSys.viewGL) {
              coordSys.viewGL.add(this.groupGL);
          }

          this._currentStep = 0;
      },

      incrementalRender: function (params, seriesModel, ecModel, api) {
          var geo3DBuilder = this._geo3DBuilderList[this._currentStep];
          var coordSys = seriesModel.coordinateSystem;
          if (!geo3DBuilder) {
              geo3DBuilder = new __WEBPACK_IMPORTED_MODULE_1__component_common_Geo3DBuilder__["a" /* default */](api);
              geo3DBuilder.extrudeY = coordSys.type !== 'mapbox3D'
                  && coordSys.type !== 'maptalks3D';
              this._geo3DBuilderList[this._currentStep] = geo3DBuilder;
          }
          geo3DBuilder.update(seriesModel, ecModel, api, params.start, params.end);
          this.groupGL.add(geo3DBuilder.rootNode);

          this._updateShaderDefines(coordSys, geo3DBuilder);

          this._currentStep++;
      },

      _updateShaderDefines: function (coordSys, geo3DBuilder) {
          var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';
          geo3DBuilder.rootNode.traverse(function (mesh) {
              if (mesh.material) {
                  mesh.material[methodName]('fragment', 'SRGB_DECODE');

                  // FIXME
                  if (coordSys.type === 'mapbox3D' || coordSys.type === 'maptalks3D') {
                      mesh.material.define('fragment', 'NORMAL_UP_AXIS', 2);
                      mesh.material.define('fragment', 'NORMAL_FRONT_AXIS', 1);
                  }
              }
          });
      },

      remove: function () {
          this.groupGL.removeAll();
      },

      dispose: function () {
          this.groupGL.removeAll();
      }
  });

  /***/ }),
  /* 254 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__surface_SurfaceSeries__ = __webpack_require__(255);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__surface_SurfaceView__ = __webpack_require__(256);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__surface_surfaceLayout__ = __webpack_require__(257);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_opacityVisual__ = __webpack_require__(17);








  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerVisual(Object(__WEBPACK_IMPORTED_MODULE_4__common_opacityVisual__["a" /* default */])('surface'));


  /***/ }),
  /* 255 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__component_common_componentShadingMixin__ = __webpack_require__(31);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_formatTooltip__ = __webpack_require__(40);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_createList__ = __webpack_require__(50);





  var SurfaceSeries = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendSeriesModel({

      type: 'series.surface',

      dependencies: ['globe', 'grid3D', 'geo3D'],

      visualColorAccessPath: 'itemStyle.color',

      formatTooltip: function (dataIndex) {
          return Object(__WEBPACK_IMPORTED_MODULE_2__common_formatTooltip__["a" /* default */])(this, dataIndex);
      },

      getInitialData: function (option, ecModel) {
          var data = option.data;

          function validateDimension(dimOpts) {
              return !(isNaN(dimOpts.min) || isNaN(dimOpts.max) || isNaN(dimOpts.step));
          }

          function getPrecision(dimOpts) {
              var getPrecision = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.number.getPrecisionSafe;
              return Math.max(
                  getPrecision(dimOpts.min), getPrecision(dimOpts.max), getPrecision(dimOpts.step)
              ) + 1;
          }

          if (!data) {
              if (!option.parametric) {
                  // From surface equation
                  var equation = option.equation || {};
                  var xOpts = equation.x || {};
                  var yOpts = equation.y || {};

                  ['x', 'y'].forEach(function (dim) {
                      if (!validateDimension(equation[dim])) {
                          {
                              console.error('Invalid equation.%s', dim);
                          }
                          return;
                      }
                  });
                  if (typeof equation.z !== 'function') {
                      {
                          console.error('equation.z needs to be function');
                      }
                      return;
                  }
                  var xCount = Math.floor((xOpts.max + xOpts.step - xOpts.min) / xOpts.step);
                  var yCount = Math.floor((yOpts.max + yOpts.step - yOpts.min) / yOpts.step);
                  data = new Float32Array(xCount * yCount * 3);

                  var xPrecision = getPrecision(xOpts);
                  var yPrecision = getPrecision(yOpts);

                  var off = 0;
                  for (var j = 0; j < yCount; j++) {
                      for (var i = 0; i < xCount; i++) {
                          var x = i * xOpts.step + xOpts.min;
                          var y = j * yOpts.step + yOpts.min;
                          var x2 = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.number.round(Math.min(x, xOpts.max), xPrecision);
                          var y2 = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.number.round(Math.min(y, yOpts.max), yPrecision);
                          var z = equation.z(x2, y2);
                          data[off++] = x2;
                          data[off++] = y2;
                          data[off++] = z;
                      }
                  }
              }
              else {
                  var parametricEquation = option.parametricEquation || {};
                  var uOpts = parametricEquation.u || {};
                  var vOpts = parametricEquation.v || {};

                  ['u', 'v'].forEach(function (dim) {
                      if (!validateDimension(parametricEquation[dim])) {
                          {
                              console.error('Invalid parametricEquation.%s', dim);
                          }
                          return;
                      }
                  });
                  ['x', 'y', 'z'].forEach(function (dim) {
                      if (typeof parametricEquation[dim] !== 'function') {
                          {
                              console.error('parametricEquation.%s needs to be function', dim);
                          }
                          return;
                      }
                  });

                  var uCount = Math.floor((uOpts.max + uOpts.step - uOpts.min) / uOpts.step);
                  var vCount = Math.floor((vOpts.max + vOpts.step - vOpts.min) / vOpts.step);
                  data = new Float32Array(uCount * vCount * 5);


                  var uPrecision = getPrecision(uOpts);
                  var vPrecision = getPrecision(vOpts);
                  var off = 0;
                  for (var j = 0; j < vCount; j++) {
                      for (var i = 0; i < uCount; i++) {
                          var u = i * uOpts.step + uOpts.min;
                          var v = j * vOpts.step + vOpts.min;
                          var u2 = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.number.round(Math.min(u, uOpts.max), uPrecision);
                          var v2 = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.number.round(Math.min(v, vOpts.max), vPrecision);
                          var x = parametricEquation.x(u2, v2);
                          var y = parametricEquation.y(u2, v2);
                          var z = parametricEquation.z(u2, v2);
                          data[off++] = x;
                          data[off++] = y;
                          data[off++] = z;
                          data[off++] = u2;
                          data[off++] = v2;
                      }
                  }
              }
          }

          var dims = ['x', 'y', 'z'];
          if (option.parametric) {
              dims.push('u', 'v');
          }
          // PENDING getSource?
          var list = Object(__WEBPACK_IMPORTED_MODULE_3__common_createList__["a" /* default */])(this, dims, data);
          return list;
      },

      defaultOption: {
          coordinateSystem: 'cartesian3D',
          zlevel: -10,

          // Cartesian coordinate system
          grid3DIndex: 0,

          // Surface needs lambert shading to show the difference
          shading: 'lambert',

          // If parametric surface
          parametric: false,

          wireframe: {
              show: true,

              lineStyle: {
                  color: 'rgba(0,0,0,0.5)',
                  width: 1
              }
          },
          /**
           * Generate surface data from z = f(x, y) equation
           */
          equation: {
              // [min, max, step]
              x: {
                  min: -1,
                  max: 1,
                  step: 0.1
              },
              y: {
                  min: -1,
                  max: 1,
                  step: 0.1
              },
              z: null
          },

          parametricEquation: {
              // [min, max, step]
              u: {
                  min: -1,
                  max: 1,
                  step: 0.1
              },
              v: {
                  min: -1,
                  max: 1,
                  step: 0.1
              },
              // [x, y, z] = f(x, y)
              x: null,
              y: null,
              z: null
          },

          // Shape of give data
          // It is an array to specify rows and columns.
          // For example [30, 30]
          dataShape: null,

          itemStyle: {
              // Color
          },

          animationDurationUpdate: 500
      }
  });

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge(SurfaceSeries.prototype, __WEBPACK_IMPORTED_MODULE_1__component_common_componentShadingMixin__["a" /* default */]);

  /***/ }),
  /* 256 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__ = __webpack_require__(1);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_retrieve__ = __webpack_require__(2);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_claygl_src_dep_glmatrix__ = __webpack_require__(6);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_geometry_trianglesSortMixin__ = __webpack_require__(64);






  var vec3 = __WEBPACK_IMPORTED_MODULE_3_claygl_src_dep_glmatrix__["a" /* default */].vec3;

  function isPointsNaN(pt) {
      return isNaN(pt[0]) || isNaN(pt[1]) || isNaN(pt[2]);
  }

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendChartView({

      type: 'surface',

      __ecgl__: true,

      init: function (ecModel, api) {

          this.groupGL = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Node();
      },

      render: function (seriesModel, ecModel, api) {
          // Swap surfaceMesh
          var tmp = this._prevSurfaceMesh;
          this._prevSurfaceMesh = this._surfaceMesh;
          this._surfaceMesh = tmp;

          if (!this._surfaceMesh) {
              this._surfaceMesh = this._createSurfaceMesh();
          }

          this.groupGL.remove(this._prevSurfaceMesh);
          this.groupGL.add(this._surfaceMesh);

          var coordSys = seriesModel.coordinateSystem;
          var shading = seriesModel.get('shading');
          var data = seriesModel.getData();

          var shadingPrefix = 'ecgl.' + shading;
          if (!this._surfaceMesh.material || this._surfaceMesh.material.shader.name !== shadingPrefix) {
              this._surfaceMesh.material = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].createMaterial(shadingPrefix, ['VERTEX_COLOR', 'DOUBLE_SIDED']);
          }

          __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].setMaterialFromModel(
              shading, this._surfaceMesh.material, seriesModel, api
          );

          if (coordSys && coordSys.viewGL) {
              coordSys.viewGL.add(this.groupGL);
              var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';
              this._surfaceMesh.material[methodName]('fragment', 'SRGB_DECODE');
          }

          var isParametric = seriesModel.get('parametric');

          var dataShape = seriesModel.get('dataShape');
          if (!dataShape) {
              dataShape = this._getDataShape(data, isParametric);
              {
                  if (seriesModel.get('data')) {
                      console.warn('dataShape is not provided. Guess it is ', dataShape);
                  }
              }
          }

          var wireframeModel = seriesModel.getModel('wireframe');
          var wireframeLineWidth = wireframeModel.get('lineStyle.width');
          var showWireframe = wireframeModel.get('show') && wireframeLineWidth > 0;
          this._updateSurfaceMesh(this._surfaceMesh, seriesModel, dataShape, showWireframe);

          var material = this._surfaceMesh.material;
          if (showWireframe) {
              material.define('WIREFRAME_QUAD');
              material.set('wireframeLineWidth', wireframeLineWidth);
              material.set('wireframeLineColor', __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].parseColor(wireframeModel.get('lineStyle.color')));
          }
          else {
              material.undefine('WIREFRAME_QUAD');
          }

          this._initHandler(seriesModel, api);

          this._updateAnimation(seriesModel);
      },

      _updateAnimation: function (seriesModel) {
          __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].updateVertexAnimation(
              [['prevPosition', 'position'],
              ['prevNormal', 'normal']],
              this._prevSurfaceMesh,
              this._surfaceMesh,
              seriesModel
          );
      },

      _createSurfaceMesh: function () {
          var mesh = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Mesh({
              geometry: new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Geometry({
                  dynamic: true,
                  sortTriangles: true
              }),
              shadowDepthMaterial: new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Material({
                  shader: new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Shader(__WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Shader.source('ecgl.sm.depth.vertex'), __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Shader.source('ecgl.sm.depth.fragment'))
              }),
              culling: false,
              // Render after axes
              renderOrder: 10,
              // Render normal in normal pass
              renderNormal: true
          });
          mesh.geometry.createAttribute('barycentric', 'float', 4);
          mesh.geometry.createAttribute('prevPosition', 'float', 3);
          mesh.geometry.createAttribute('prevNormal', 'float', 3);

          __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.extend(mesh.geometry, __WEBPACK_IMPORTED_MODULE_4__util_geometry_trianglesSortMixin__["a" /* default */]);

          return mesh;
      },

      _initHandler: function (seriesModel, api) {
          var data = seriesModel.getData();
          var surfaceMesh = this._surfaceMesh;

          var coordSys = seriesModel.coordinateSystem;

          function getNearestPointIdx(triangle, point) {
              var nearestDist = Infinity;
              var nearestIdx = -1;
              var pos = [];
              for (var i = 0; i < triangle.length; i++) {
                  surfaceMesh.geometry.attributes.position.get(triangle[i], pos);
                  var dist = vec3.dist(point.array, pos);
                  if (dist < nearestDist) {
                      nearestDist = dist;
                      nearestIdx = triangle[i];
                  }
              }
              return nearestIdx;
          }

          surfaceMesh.seriesIndex = seriesModel.seriesIndex;

          var lastDataIndex = -1;

          surfaceMesh.off('mousemove');
          surfaceMesh.off('mouseout');
          surfaceMesh.on('mousemove', function (e) {
              var idx = getNearestPointIdx(e.triangle, e.point);
              if (idx >= 0) {
                  var point = [];
                  surfaceMesh.geometry.attributes.position.get(idx, point);
                  var value = coordSys.pointToData(point);

                  var minDist = Infinity;
                  var dataIndex = -1;
                  var item = [];
                  for (var i = 0; i < data.count(); i++) {
                      item[0] = data.get('x', i);
                      item[1] = data.get('y', i);
                      item[2] = data.get('z', i);
                      var dist = vec3.squaredDistance(item, value);
                      if (dist < minDist) {
                          dataIndex = i;
                          minDist = dist;
                      }
                  }

                  if (dataIndex !== lastDataIndex) {
                      api.dispatchAction({
                          type: 'grid3DShowAxisPointer',
                          value: value
                      });
                  }

                  lastDataIndex = dataIndex;
                  surfaceMesh.dataIndex = dataIndex;
              }
              else {
                  surfaceMesh.dataIndex = -1;
              }
          }, this);
          surfaceMesh.on('mouseout', function (e) {
              lastDataIndex = -1;
              surfaceMesh.dataIndex = -1;

              api.dispatchAction({
                  type: 'grid3DHideAxisPointer'
              });
          }, this);
      },

      _updateSurfaceMesh: function (surfaceMesh, seriesModel, dataShape, showWireframe) {

          var geometry = surfaceMesh.geometry;
          var data = seriesModel.getData();
          var pointsArr = data.getLayout('points');

          var invalidDataCount = 0;
          data.each(function (idx) {
              if (!data.hasValue(idx)) {
                  invalidDataCount++;
              }
          });
          var needsSplitQuad = invalidDataCount || showWireframe;

          var positionAttr = geometry.attributes.position;
          var normalAttr = geometry.attributes.normal;
          var texcoordAttr = geometry.attributes.texcoord0;
          var barycentricAttr = geometry.attributes.barycentric;
          var colorAttr = geometry.attributes.color;
          var row = dataShape[0];
          var column = dataShape[1];
          var shading = seriesModel.get('shading');
          var needsNormal = shading !== 'color';

          if (needsSplitQuad) {
              // TODO, If needs remove the invalid points, or set color transparent.
              var vertexCount = (row - 1) * (column - 1) * 4;
              positionAttr.init(vertexCount);
              if (showWireframe) {
                  barycentricAttr.init(vertexCount);
              }
          }
          else {
              positionAttr.value = new Float32Array(pointsArr);
          }
          colorAttr.init(geometry.vertexCount);
          texcoordAttr.init(geometry.vertexCount);

          var quadToTriangle = [0, 3, 1, 1, 3, 2];
          // 3----2
          // 0----1
          // Make sure pixels on 1---3 edge will not have channel 0.
          // And pixels on four edges have at least one channel 0.
          var quadBarycentric = [
              [1, 1, 0, 0],
              [0, 1, 0, 1],
              [1, 0, 0, 1],
              [1, 0, 1, 0]
          ];

          var indices = geometry.indices = new (geometry.vertexCount > 0xffff ? Uint32Array : Uint16Array)((row - 1) * (column - 1) * 6);
          var getQuadIndices = function (i, j, out) {
              out[1] = i * column + j;
              out[0] = i * column + j + 1;
              out[3] = (i + 1) * column + j + 1;
              out[2] = (i + 1) * column + j;
          };

          var isTransparent = false;

          if (needsSplitQuad) {
              var quadIndices = [];
              var pos = [];
              var faceOffset = 0;

              if (needsNormal) {
                  normalAttr.init(geometry.vertexCount);
              }
              else {
                  normalAttr.value = null;
              }

              var pts = [[], [], []];
              var v21 = [], v32 = [];
              var normal = vec3.create();

              var getFromArray = function (arr, idx, out) {
                  var idx3 = idx * 3;
                  out[0] = arr[idx3];
                  out[1] = arr[idx3 + 1];
                  out[2] = arr[idx3 + 2];
                  return out;
              };
              var vertexNormals = new Float32Array(pointsArr.length);
              var vertexColors = new Float32Array(pointsArr.length / 3 * 4);

              for (var i = 0; i < data.count(); i++) {
                  if (data.hasValue(i)) {
                      var rgbaArr = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].parseColor(data.getItemVisual(i, 'color'));
                      var opacity = data.getItemVisual(i, 'opacity');
                      rgbaArr[3] *= opacity;
                      if (rgbaArr[3] < 0.99) {
                          isTransparent = true;
                      }
                      for (var k = 0; k < 4; k++) {
                          vertexColors[i * 4 + k] = rgbaArr[k];
                      }
                  }
              }
              var farPoints = [1e7, 1e7, 1e7];
              for (var i = 0; i < row - 1; i++) {
                  for (var j = 0; j < column - 1; j++) {
                      var dataIndex = i * (column - 1) + j;
                      var vertexOffset = dataIndex * 4;

                      getQuadIndices(i, j, quadIndices);

                      var invisibleQuad = false;
                      for (var k = 0; k < 4; k++) {
                          getFromArray(pointsArr, quadIndices[k], pos);
                          if (isPointsNaN(pos)) {
                              // Quad is invisible if any point is NaN
                              invisibleQuad = true;
                          }
                      }

                      for (var k = 0; k < 4; k++) {
                          if (invisibleQuad) {
                              // Move point far away
                              positionAttr.set(vertexOffset + k, farPoints);
                          }
                          else {
                              getFromArray(pointsArr, quadIndices[k], pos);
                              positionAttr.set(vertexOffset + k, pos);
                          }
                          if (showWireframe) {
                              barycentricAttr.set(vertexOffset + k, quadBarycentric[k]);
                          }
                      }
                      for (var k = 0; k < 6; k++) {
                          indices[faceOffset++] = quadToTriangle[k] + vertexOffset;
                      }
                      // Vertex normals
                      if (needsNormal && !invisibleQuad) {
                          for (var k = 0; k < 2; k++) {
                              var k3 = k * 3;

                              for (var m = 0; m < 3; m++) {
                                  var idx = quadIndices[quadToTriangle[k3] + m];
                                  getFromArray(pointsArr, idx, pts[m]);
                              }

                              vec3.sub(v21, pts[0], pts[1]);
                              vec3.sub(v32, pts[1], pts[2]);
                              vec3.cross(normal, v21, v32);
                              // Weighted by the triangle area
                              for (var m = 0; m < 3; m++) {
                                  var idx3 = quadIndices[quadToTriangle[k3] + m] * 3;
                                  vertexNormals[idx3] = vertexNormals[idx3] + normal[0];
                                  vertexNormals[idx3 + 1] = vertexNormals[idx3 + 1] + normal[1];
                                  vertexNormals[idx3 + 2] = vertexNormals[idx3 + 2] + normal[2];
                              }
                          }
                      }

                  }
              }
              if (needsNormal) {
                  for (var i = 0; i < vertexNormals.length / 3; i++) {
                      getFromArray(vertexNormals, i, normal);
                      vec3.normalize(normal, normal);
                      vertexNormals[i * 3] = normal[0];
                      vertexNormals[i * 3 + 1] = normal[1];
                      vertexNormals[i * 3 + 2] = normal[2];
                  }
              }
              // Split normal and colors, write to the attributes.
              var rgbaArr = [];
              var uvArr = [];
              for (var i = 0; i < row - 1; i++) {
                  for (var j = 0; j < column - 1; j++) {
                      var dataIndex = i * (column - 1) + j;
                      var vertexOffset = dataIndex * 4;

                      getQuadIndices(i, j, quadIndices);
                      for (var k = 0; k < 4; k++) {
                          for (var m = 0; m < 4; m++) {
                              rgbaArr[m] = vertexColors[quadIndices[k] * 4 + m];
                          }
                          colorAttr.set(vertexOffset + k, rgbaArr);

                          if (needsNormal) {
                              getFromArray(vertexNormals, quadIndices[k], normal);
                              normalAttr.set(vertexOffset + k, normal);
                          }

                          var idx = quadIndices[k];
                          uvArr[0] = (idx % column) / (column - 1);
                          uvArr[1] = Math.floor(idx / column) / (row - 1);
                          texcoordAttr.set(vertexOffset + k, uvArr);
                      }
                      dataIndex++;
                  }
              }
          }
          else {
              var uvArr = [];
              for (var i = 0; i < data.count(); i++) {
                  uvArr[0] = (i % column) / (column - 1);
                  uvArr[1] = Math.floor(i / column) / (row - 1);
                  var rgbaArr = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].parseColor(data.getItemVisual(i, 'color'));
                  var opacity = data.getItemVisual(i, 'opacity');
                  rgbaArr[3] *= opacity;
                  if (rgbaArr[3] < 0.99) {
                      isTransparent = true;
                  }
                  colorAttr.set(i, rgbaArr);
                  texcoordAttr.set(i, uvArr);
              }
              var quadIndices = [];
              // Triangles
              var cursor = 0;
              for (var i = 0; i < row - 1; i++) {
                  for (var j = 0; j < column - 1; j++) {

                      getQuadIndices(i, j, quadIndices);

                      for (var k = 0; k < 6; k++) {
                          indices[cursor++] = quadIndices[quadToTriangle[k]];
                      }
                  }
              }
              if (needsNormal) {
                  geometry.generateVertexNormals();
              }
              else {
                  normalAttr.value = null;
              }
          }
          if (surfaceMesh.material.get('normalMap')) {
              geometry.generateTangents();
          }


          geometry.updateBoundingBox();
          geometry.dirty();

          surfaceMesh.material.transparent = isTransparent;
          surfaceMesh.material.depthMask = !isTransparent;
      },

      _getDataShape: function (data, isParametric) {

          var prevX = -Infinity;
          var rowCount = 0;
          var columnCount = 0;
          var prevColumnCount = 0;

          var mayInvalid = false;

          var rowDim = isParametric ? 'u' : 'x';
          var dataCount = data.count();
          // Check data format
          for (var i = 0; i < dataCount; i++) {
              var x = data.get(rowDim, i);
              if (x < prevX) {
                  if (prevColumnCount && prevColumnCount !== columnCount) {
                      {
                          mayInvalid = true;
                      }
                  }
                  // A new row.
                  prevColumnCount = columnCount;
                  columnCount = 0;
                  rowCount++;
              }
              prevX = x;
              columnCount++;
          }
          if (!rowCount || columnCount === 1) {
              mayInvalid = true;
          }
          if (!mayInvalid) {
              return [rowCount + 1, columnCount];
          }

          var rows = Math.floor(Math.sqrt(dataCount));
          while (rows > 0) {
              if (Math.floor(dataCount / rows) === dataCount / rows) { // Can be divided
                  return [rows, dataCount / rows];
              }
              rows--;
          }

          // Bailout
          rows = Math.floor(Math.sqrt(dataCount));
          return [rows, rows];
      },

      dispose: function () {
          this.groupGL.removeAll();
      },

      remove: function () {
          this.groupGL.removeAll();
      }
  });

  /***/ }),
  /* 257 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);


  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerLayout(function (ecModel, api) {
      ecModel.eachSeriesByType('surface', function (surfaceModel) {
          var cartesian = surfaceModel.coordinateSystem;
          if (!cartesian || cartesian.type !== 'cartesian3D') {
              {
                  console.error('Surface chart only support cartesian3D coordinateSystem');
              }
          }
          var data = surfaceModel.getData();
          var points = new Float32Array(3 * data.count());
          var nanPoint = [NaN, NaN, NaN];

          if (cartesian && cartesian.type === 'cartesian3D') {
              var coordDims = cartesian.dimensions;
              var dims = coordDims.map(function (coordDim) {
                  return surfaceModel.coordDimToDataDim(coordDim)[0];
              });
              data.each(dims, function (x, y, z, idx) {
                  var pt;
                  if (!data.hasValue(idx)) {
                      pt = nanPoint;
                  }
                  else {
                      pt = cartesian.dataToPoint([x, y, z]);
                  }
                  points[idx * 3] = pt[0];
                  points[idx * 3 + 1] = pt[1];
                  points[idx * 3 + 2] = pt[2];
              });
          }
          data.setLayout('points', points);
      });
  });

  /***/ }),
  /* 258 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__coord_geo3D_Geo3D__ = __webpack_require__(98);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__map3D_Map3DSeries__ = __webpack_require__(259);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__map3D_Map3DView__ = __webpack_require__(260);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_opacityVisual__ = __webpack_require__(17);








  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerVisual(Object(__WEBPACK_IMPORTED_MODULE_4__common_opacityVisual__["a" /* default */])('map3D'));

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerAction({
      type: 'map3DChangeCamera',
      event: 'map3dcamerachanged',
      update: 'series:updateCamera'
  }, function (payload, ecModel) {
      ecModel.eachComponent({
          mainType: 'series', subType: 'map3D', query: payload
      }, function (componentModel) {
          componentModel.setView(payload);
      });
  });

  /***/ }),
  /* 259 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__component_common_componentViewControlMixin__ = __webpack_require__(44);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__component_common_componentPostEffectMixin__ = __webpack_require__(28);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__component_common_componentLightMixin__ = __webpack_require__(29);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__component_common_componentShadingMixin__ = __webpack_require__(31);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__coord_geo3D_geo3DModelMixin__ = __webpack_require__(95);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__util_format__ = __webpack_require__(32);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__common_formatTooltip__ = __webpack_require__(40);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__coord_geo3DCreator__ = __webpack_require__(97);










  function transformPolygon(mapbox3DCoordSys, poly) {
      var newPoly = [];
      for (var k = 0; k < poly.length; k++) {
          newPoly.push(mapbox3DCoordSys.dataToPoint(poly[k]));
      }
      return newPoly;
  }

  var Map3DSeries = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendSeriesModel({

      type: 'series.map3D',

      layoutMode: 'box',

      coordinateSystem: null,

      visualColorAccessPath: 'itemStyle.color',

      optionUpdated: function (newOpt) {
          newOpt = newOpt || {};
          var coordSysType = this.get('coordinateSystem');
          if (coordSysType == null || coordSysType === 'geo3D') {
              return;
          }

          {
              var propsNeedToCheck = [
                  'left', 'top', 'width', 'height',
                  'boxWidth', 'boxDepth', 'boxHeight',
                  'light', 'viewControl', 'postEffect', 'temporalSuperSampling',
                  'environment', 'groundPlane'
              ];
              var ignoredProperties = [];
              propsNeedToCheck.forEach(function (propName) {
                  if (newOpt[propName] != null) {
                      ignoredProperties.push(propName);
                  }
              });
              if (ignoredProperties.length) {
                  console.warn(
                      'Property %s in map3D series will be ignored if coordinate system is %s',
                      ignoredProperties.join(', '), coordSysType
                  );
              }
          }

          if (this.get('groundPlane.show')) {
              // Force disable groundPlane if map3D has other coordinate systems.
              this.option.groundPlane.show = false;
          }

          // Reset geo.
          this._geo = null;
      },

      getInitialData: function (option) {
          option.data = this.getFilledRegions(option.data, option.map);

          var dimensions = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.helper.completeDimensions(['value'], option.data);
          var list = new __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.List(dimensions, this);
          list.initData(option.data);

          var regionModelMap = {};
          list.each(function (idx) {
              var name = list.getName(idx);
              var itemModel = list.getItemModel(idx);
              regionModelMap[name] = itemModel;
          });

          this._regionModelMap = regionModelMap;

          return list;
      },

      formatTooltip: function (dataIndex) {
          return Object(__WEBPACK_IMPORTED_MODULE_7__common_formatTooltip__["a" /* default */])(this, dataIndex);
      },

      getRegionModel: function (idx) {
          var name = this.getData().getName(idx);
          return this._regionModelMap[name] || new __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.Model(null, this);
      },

      getRegionPolygonCoords: function (idx) {
          var coordSys = this.coordinateSystem;
          var name = this.getData().getName(idx);
          if (coordSys.transform) {
              var region = coordSys.getRegion(name);
              return region ? region.geometries : [];
          }
          else {
              if (!this._geo) {
                  this._geo = __WEBPACK_IMPORTED_MODULE_8__coord_geo3DCreator__["a" /* default */].createGeo3D(this);
              }
              var region = this._geo.getRegion(name);
              var ret = [];
              for (var k = 0; k < region.geometries.length; k++) {
                  var geo = region.geometries[k];
                  var interiors = [];
                  var exterior = transformPolygon(coordSys, geo.exterior);
                  if (interiors && interiors.length) {
                      for (var m = 0; m < geo.interiors.length; m++) {
                          interiors.push(transformPolygon(coordSys, interiors[m]));
                      }
                  }
                  ret.push({
                      interiors: interiors,
                      exterior: exterior
                  });
              }
              return ret;
          }
      },

      /**
       * Format label
       * @param {string} name Region name
       * @param {string} [status='normal'] 'normal' or 'emphasis'
       * @return {string}
       */
      getFormattedLabel: function (dataIndex, status) {
          var text = __WEBPACK_IMPORTED_MODULE_6__util_format__["a" /* default */].getFormattedLabel(this, dataIndex, status);
          if (text == null) {
              text = this.getData().getName(dataIndex);
          }
          return text;
      },

      defaultOption: {
          // Support geo3D, mapbox, maptalks3D
          coordinateSystem: 'geo3D',
          // itemStyle: {},
          // height,
          // label: {}
          data: null
      }
  });

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge(Map3DSeries.prototype, __WEBPACK_IMPORTED_MODULE_5__coord_geo3D_geo3DModelMixin__["a" /* default */]);

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge(Map3DSeries.prototype, __WEBPACK_IMPORTED_MODULE_1__component_common_componentViewControlMixin__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge(Map3DSeries.prototype, __WEBPACK_IMPORTED_MODULE_2__component_common_componentPostEffectMixin__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge(Map3DSeries.prototype, __WEBPACK_IMPORTED_MODULE_3__component_common_componentLightMixin__["a" /* default */]);
  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.merge(Map3DSeries.prototype, __WEBPACK_IMPORTED_MODULE_4__component_common_componentShadingMixin__["a" /* default */]);

  /***/ }),
  /* 260 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__ = __webpack_require__(1);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_OrbitControl__ = __webpack_require__(45);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__component_common_SceneHelper__ = __webpack_require__(30);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__component_common_Geo3DBuilder__ = __webpack_require__(63);







  /* unused harmony default export */ var _unused_webpack_default_export = (__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendChartView({

      type: 'map3D',

      __ecgl__: true,

      init: function (ecModel, api) {
          this._geo3DBuilder = new __WEBPACK_IMPORTED_MODULE_4__component_common_Geo3DBuilder__["a" /* default */](api);
          this.groupGL = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Node();
      },

      render: function (map3DModel, ecModel, api) {

          var coordSys = map3DModel.coordinateSystem;

          if (!coordSys || !coordSys.viewGL) {
              return;
          }

          this.groupGL.add(this._geo3DBuilder.rootNode);
          coordSys.viewGL.add(this.groupGL);

          var geo3D;
          if (coordSys.type === 'geo3D') {
              geo3D = coordSys;

              if (!this._sceneHelper) {
                  this._sceneHelper = new __WEBPACK_IMPORTED_MODULE_3__component_common_SceneHelper__["a" /* default */]();
                  this._sceneHelper.initLight(this.groupGL);
              }

              this._sceneHelper.setScene(coordSys.viewGL.scene);
              this._sceneHelper.updateLight(map3DModel);

              // Set post effect
              coordSys.viewGL.setPostEffect(map3DModel.getModel('postEffect'), api);
              coordSys.viewGL.setTemporalSuperSampling(map3DModel.getModel('temporalSuperSampling'));

              var control = this._control;
              if (!control) {
                  control = this._control = new __WEBPACK_IMPORTED_MODULE_2__util_OrbitControl__["a" /* default */]({
                      zr: api.getZr()
                  });
                  this._control.init();
              }
              var viewControlModel = map3DModel.getModel('viewControl');
              control.setViewGL(coordSys.viewGL);
              control.setFromViewControlModel(viewControlModel, 0);

              control.off('update');
              control.on('update', function () {
                  api.dispatchAction({
                      type: 'map3DChangeCamera',
                      alpha: control.getAlpha(),
                      beta: control.getBeta(),
                      distance: control.getDistance(),
                      from: this.uid,
                      map3DId: map3DModel.id
                  });
              });

              this._geo3DBuilder.extrudeY = true;
          }
          else {
              if (this._control) {
                  this._control.dispose();
                  this._control = null;
              }
              if (this._sceneHelper) {
                  this._sceneHelper.dispose();
                  this._sceneHelper = null;
              }
              geo3D = map3DModel.getData().getLayout('geo3D');

              this._geo3DBuilder.extrudeY = false;
          }

          this._geo3DBuilder.update(map3DModel, ecModel, api, 0, map3DModel.getData().count());


          // Must update after geo3D.viewGL.setPostEffect to determine linear space
          var srgbDefineMethod = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';
          this._geo3DBuilder.rootNode.traverse(function (mesh) {
              if (mesh.material) {
                  mesh.material[srgbDefineMethod]('fragment', 'SRGB_DECODE');
              }
          });
      },

      afterRender: function (map3DModel, ecModel, api, layerGL) {
          var renderer = layerGL.renderer;
          var coordSys = map3DModel.coordinateSystem;
          if (coordSys && coordSys.type === 'geo3D') {
              this._sceneHelper.updateAmbientCubemap(renderer, map3DModel, api);
              this._sceneHelper.updateSkybox(renderer, map3DModel, api);
          }
      },

      dispose: function () {
          this.groupGL.removeAll();
          this._control.dispose();
      }
  }));

  /***/ }),
  /* 261 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__scatterGL_ScatterGLSeries__ = __webpack_require__(262);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__scatterGL_ScatterGLView__ = __webpack_require__(263);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_echarts_lib_visual_symbol__ = __webpack_require__(51);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_echarts_lib_visual_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_echarts_lib_visual_symbol__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_opacityVisual__ = __webpack_require__(17);








  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerVisual(__WEBPACK_IMPORTED_MODULE_3_echarts_lib_visual_symbol___default()('scatterGL', 'circle', null));

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerVisual(Object(__WEBPACK_IMPORTED_MODULE_4__common_opacityVisual__["a" /* default */])('scatterGL'));

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerLayout({
      seriesType: 'scatterGL',
      reset: function (seriesModel) {
          var coordSys = seriesModel.coordinateSystem;

          var progress;
          if (coordSys) {
              var dims = coordSys.dimensions;
              var pt = [];
              if (dims.length === 1) {
                  progress = function (params, data) {
                      var points = new Float32Array((params.end - params.start) * 2);
                      for (var idx = params.start; idx < params.end; idx++) {
                          var offset = (idx - params.start) * 2;
                          var x = data.get(dims[0], idx);
                          var pt = coordSys.dataToPoint(x);
                          points[offset] = pt[0];
                          points[offset + 1] = pt[1];
                      }
                      data.setLayout('points', points);
                  };
              }
              else if (dims.length === 2) {
                  progress = function (params, data) {
                      var points = new Float32Array((params.end - params.start) * 2);
                      for (var idx = params.start; idx < params.end; idx++) {
                          var offset = (idx - params.start) * 2;
                          var x = data.get(dims[0], idx);
                          var y = data.get(dims[1], idx);
                          pt[0] = x;
                          pt[1] = y;

                          pt = coordSys.dataToPoint(pt);
                          points[offset] = pt[0];
                          points[offset + 1] = pt[1];
                      }
                      data.setLayout('points', points);
                  };
              }
          }

          return { progress: progress };
      }
  });

  /***/ }),
  /* 262 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);


  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendSeriesModel({

      type: 'series.scatterGL',

      dependencies: ['grid', 'polar', 'geo', 'singleAxis'],

      visualColorAccessPath: 'itemStyle.color',

      getInitialData: function () {
          return __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.helper.createList(this);
      },

      defaultOption: {
          coordinateSystem: 'cartesian2d',
          zlevel: 10,

          progressive: 1e5,
          progressiveThreshold: 1e5,

          // Cartesian coordinate system
          // xAxisIndex: 0,
          // yAxisIndex: 0,

          // Polar coordinate system
          // polarIndex: 0,

          // Geo coordinate system
          // geoIndex: 0,

          large: false,

          symbol: 'circle',
          symbolSize: 10,

          // symbolSize scale when zooming.
          zoomScale: 0,

          // Support source-over, lighter
          blendMode: 'source-over',

          itemStyle: {
              opacity: 0.8
          },


          postEffect: {
              enable: false,
              colorCorrection: {
                  exposure: 0,
                  brightness: 0,
                  contrast: 1,
                  saturation: 1,
                  enable: true
              }
          }

      }
  });

  /***/ }),
  /* 263 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__ = __webpack_require__(1);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_ViewGL__ = __webpack_require__(22);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_PointsBuilder__ = __webpack_require__(66);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_GLViewHelper__ = __webpack_require__(102);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_retrieve__ = __webpack_require__(2);








  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendChartView({

      type: 'scatterGL',

      __ecgl__: true,

      init: function (ecModel, api) {

          this.groupGL = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Node();
          this.viewGL = new __WEBPACK_IMPORTED_MODULE_2__core_ViewGL__["a" /* default */]('orthographic');

          this.viewGL.add(this.groupGL);

          this._pointsBuilderList = [];
          this._currentStep = 0;

          this._sizeScale = 1;

          this._glViewHelper = new __WEBPACK_IMPORTED_MODULE_4__common_GLViewHelper__["a" /* default */](this.viewGL);
      },

      render: function (seriesModel, ecModel, api) {
          this.groupGL.removeAll();
          this._glViewHelper.reset(seriesModel, api);

          if (!seriesModel.getData().count()) {
              return;
          }

          var pointsBuilder = this._pointsBuilderList[0];
          if (!pointsBuilder) {
              pointsBuilder = this._pointsBuilderList[0] = new __WEBPACK_IMPORTED_MODULE_3__common_PointsBuilder__["a" /* default */](true, api);
          }
          this._pointsBuilderList.length = 1;

          this.groupGL.add(pointsBuilder.rootNode);

          this._removeTransformInPoints(seriesModel.getData().getLayout('points'));
          pointsBuilder.update(seriesModel, ecModel, api);

          this.viewGL.setPostEffect(seriesModel.getModel('postEffect'), api);
      },

      incrementalPrepareRender: function (seriesModel, ecModel, api) {
          this.groupGL.removeAll();
          this._glViewHelper.reset(seriesModel, api);

          this._currentStep = 0;

          this.viewGL.setPostEffect(seriesModel.getModel('postEffect'), api);
      },

      incrementalRender: function (params, seriesModel, ecModel, api) {
          if (params.end <= params.start) {
              return;
          }

          var pointsBuilder = this._pointsBuilderList[this._currentStep];
          if (!pointsBuilder) {
              pointsBuilder = new __WEBPACK_IMPORTED_MODULE_3__common_PointsBuilder__["a" /* default */](true, api);
              this._pointsBuilderList[this._currentStep] = pointsBuilder;
          }
          this.groupGL.add(pointsBuilder.rootNode);

          this._removeTransformInPoints(seriesModel.getData().getLayout('points'));

          pointsBuilder.setSizeScale(this._sizeScale);
          pointsBuilder.update(seriesModel, ecModel, api, params.start, params.end);

          api.getZr().refresh();

          this._currentStep++;
      },

      updateTransform: function (seriesModel, ecModel, api) {
          if (seriesModel.coordinateSystem.getRoamTransform) {
              this._glViewHelper.updateTransform(seriesModel, api);

              var zoom = this._glViewHelper.getZoom();
              var sizeScale = Math.max((seriesModel.get('zoomScale') || 0) * (zoom - 1) + 1, 0);
              this._sizeScale = sizeScale;

              this._pointsBuilderList.forEach(function (pointsBuilder) {
                  pointsBuilder.setSizeScale(sizeScale);
              });
          }
      },

      _removeTransformInPoints: function (points) {
          if (!points) {
              return;
          }
          var pt = [];
          for (var i = 0; i < points.length; i += 2) {
              pt[0] = points[i];
              pt[1] = points[i + 1];
              this._glViewHelper.removeTransformInPoint(pt);
              points[i] = pt[0];
              points[i + 1] = pt[1];
          }
      },


      dispose: function () {
          this.groupGL.removeAll();
      },

      remove: function () {
          this.groupGL.removeAll();
      }
  });

  /***/ }),
  /* 264 */
  /***/ (function(module, exports) {

  /**
   * 3x2矩阵操作类
   * @exports zrender/tool/matrix
   */
  var ArrayCtor = typeof Float32Array === 'undefined' ? Array : Float32Array;
  /**
   * Create a identity matrix.
   * @return {Float32Array|Array.<number>}
   */

  function create() {
    var out = new ArrayCtor(6);
    identity(out);
    return out;
  }
  /**
   * 设置矩阵为单位矩阵
   * @param {Float32Array|Array.<number>} out
   */


  function identity(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    return out;
  }
  /**
   * 复制矩阵
   * @param {Float32Array|Array.<number>} out
   * @param {Float32Array|Array.<number>} m
   */


  function copy(out, m) {
    out[0] = m[0];
    out[1] = m[1];
    out[2] = m[2];
    out[3] = m[3];
    out[4] = m[4];
    out[5] = m[5];
    return out;
  }
  /**
   * 矩阵相乘
   * @param {Float32Array|Array.<number>} out
   * @param {Float32Array|Array.<number>} m1
   * @param {Float32Array|Array.<number>} m2
   */


  function mul(out, m1, m2) {
    // Consider matrix.mul(m, m2, m);
    // where out is the same as m2.
    // So use temp variable to escape error.
    var out0 = m1[0] * m2[0] + m1[2] * m2[1];
    var out1 = m1[1] * m2[0] + m1[3] * m2[1];
    var out2 = m1[0] * m2[2] + m1[2] * m2[3];
    var out3 = m1[1] * m2[2] + m1[3] * m2[3];
    var out4 = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];
    var out5 = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];
    out[0] = out0;
    out[1] = out1;
    out[2] = out2;
    out[3] = out3;
    out[4] = out4;
    out[5] = out5;
    return out;
  }
  /**
   * 平移变换
   * @param {Float32Array|Array.<number>} out
   * @param {Float32Array|Array.<number>} a
   * @param {Float32Array|Array.<number>} v
   */


  function translate(out, a, v) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4] + v[0];
    out[5] = a[5] + v[1];
    return out;
  }
  /**
   * 旋转变换
   * @param {Float32Array|Array.<number>} out
   * @param {Float32Array|Array.<number>} a
   * @param {number} rad
   */


  function rotate(out, a, rad) {
    var aa = a[0];
    var ac = a[2];
    var atx = a[4];
    var ab = a[1];
    var ad = a[3];
    var aty = a[5];
    var st = Math.sin(rad);
    var ct = Math.cos(rad);
    out[0] = aa * ct + ab * st;
    out[1] = -aa * st + ab * ct;
    out[2] = ac * ct + ad * st;
    out[3] = -ac * st + ct * ad;
    out[4] = ct * atx + st * aty;
    out[5] = ct * aty - st * atx;
    return out;
  }
  /**
   * 缩放变换
   * @param {Float32Array|Array.<number>} out
   * @param {Float32Array|Array.<number>} a
   * @param {Float32Array|Array.<number>} v
   */


  function scale(out, a, v) {
    var vx = v[0];
    var vy = v[1];
    out[0] = a[0] * vx;
    out[1] = a[1] * vy;
    out[2] = a[2] * vx;
    out[3] = a[3] * vy;
    out[4] = a[4] * vx;
    out[5] = a[5] * vy;
    return out;
  }
  /**
   * 求逆矩阵
   * @param {Float32Array|Array.<number>} out
   * @param {Float32Array|Array.<number>} a
   */


  function invert(out, a) {
    var aa = a[0];
    var ac = a[2];
    var atx = a[4];
    var ab = a[1];
    var ad = a[3];
    var aty = a[5];
    var det = aa * ad - ab * ac;

    if (!det) {
      return null;
    }

    det = 1.0 / det;
    out[0] = ad * det;
    out[1] = -ab * det;
    out[2] = -ac * det;
    out[3] = aa * det;
    out[4] = (ac * aty - ad * atx) * det;
    out[5] = (ab * atx - aa * aty) * det;
    return out;
  }
  /**
   * Clone a new matrix.
   * @param {Float32Array|Array.<number>} a
   */


  function clone(a) {
    var b = create();
    copy(b, a);
    return b;
  }

  exports.create = create;
  exports.identity = identity;
  exports.copy = copy;
  exports.mul = mul;
  exports.translate = translate;
  exports.rotate = rotate;
  exports.scale = scale;
  exports.invert = invert;
  exports.clone = clone;

  /***/ }),
  /* 265 */
  /***/ (function(module, exports) {

  var ArrayCtor = typeof Float32Array === 'undefined' ? Array : Float32Array;
  /**
   * 创建一个向量
   * @param {number} [x=0]
   * @param {number} [y=0]
   * @return {Vector2}
   */

  function create(x, y) {
    var out = new ArrayCtor(2);

    if (x == null) {
      x = 0;
    }

    if (y == null) {
      y = 0;
    }

    out[0] = x;
    out[1] = y;
    return out;
  }
  /**
   * 复制向量数据
   * @param {Vector2} out
   * @param {Vector2} v
   * @return {Vector2}
   */


  function copy(out, v) {
    out[0] = v[0];
    out[1] = v[1];
    return out;
  }
  /**
   * 克隆一个向量
   * @param {Vector2} v
   * @return {Vector2}
   */


  function clone(v) {
    var out = new ArrayCtor(2);
    out[0] = v[0];
    out[1] = v[1];
    return out;
  }
  /**
   * 设置向量的两个项
   * @param {Vector2} out
   * @param {number} a
   * @param {number} b
   * @return {Vector2} 结果
   */


  function set(out, a, b) {
    out[0] = a;
    out[1] = b;
    return out;
  }
  /**
   * 向量相加
   * @param {Vector2} out
   * @param {Vector2} v1
   * @param {Vector2} v2
   */


  function add(out, v1, v2) {
    out[0] = v1[0] + v2[0];
    out[1] = v1[1] + v2[1];
    return out;
  }
  /**
   * 向量缩放后相加
   * @param {Vector2} out
   * @param {Vector2} v1
   * @param {Vector2} v2
   * @param {number} a
   */


  function scaleAndAdd(out, v1, v2, a) {
    out[0] = v1[0] + v2[0] * a;
    out[1] = v1[1] + v2[1] * a;
    return out;
  }
  /**
   * 向量相减
   * @param {Vector2} out
   * @param {Vector2} v1
   * @param {Vector2} v2
   */


  function sub(out, v1, v2) {
    out[0] = v1[0] - v2[0];
    out[1] = v1[1] - v2[1];
    return out;
  }
  /**
   * 向量长度
   * @param {Vector2} v
   * @return {number}
   */


  function len(v) {
    return Math.sqrt(lenSquare(v));
  }

  var length = len; // jshint ignore:line

  /**
   * 向量长度平方
   * @param {Vector2} v
   * @return {number}
   */

  function lenSquare(v) {
    return v[0] * v[0] + v[1] * v[1];
  }

  var lengthSquare = lenSquare;
  /**
   * 向量乘法
   * @param {Vector2} out
   * @param {Vector2} v1
   * @param {Vector2} v2
   */

  function mul(out, v1, v2) {
    out[0] = v1[0] * v2[0];
    out[1] = v1[1] * v2[1];
    return out;
  }
  /**
   * 向量除法
   * @param {Vector2} out
   * @param {Vector2} v1
   * @param {Vector2} v2
   */


  function div(out, v1, v2) {
    out[0] = v1[0] / v2[0];
    out[1] = v1[1] / v2[1];
    return out;
  }
  /**
   * 向量点乘
   * @param {Vector2} v1
   * @param {Vector2} v2
   * @return {number}
   */


  function dot(v1, v2) {
    return v1[0] * v2[0] + v1[1] * v2[1];
  }
  /**
   * 向量缩放
   * @param {Vector2} out
   * @param {Vector2} v
   * @param {number} s
   */


  function scale(out, v, s) {
    out[0] = v[0] * s;
    out[1] = v[1] * s;
    return out;
  }
  /**
   * 向量归一化
   * @param {Vector2} out
   * @param {Vector2} v
   */


  function normalize(out, v) {
    var d = len(v);

    if (d === 0) {
      out[0] = 0;
      out[1] = 0;
    } else {
      out[0] = v[0] / d;
      out[1] = v[1] / d;
    }

    return out;
  }
  /**
   * 计算向量间距离
   * @param {Vector2} v1
   * @param {Vector2} v2
   * @return {number}
   */


  function distance(v1, v2) {
    return Math.sqrt((v1[0] - v2[0]) * (v1[0] - v2[0]) + (v1[1] - v2[1]) * (v1[1] - v2[1]));
  }

  var dist = distance;
  /**
   * 向量距离平方
   * @param {Vector2} v1
   * @param {Vector2} v2
   * @return {number}
   */

  function distanceSquare(v1, v2) {
    return (v1[0] - v2[0]) * (v1[0] - v2[0]) + (v1[1] - v2[1]) * (v1[1] - v2[1]);
  }

  var distSquare = distanceSquare;
  /**
   * 求负向量
   * @param {Vector2} out
   * @param {Vector2} v
   */

  function negate(out, v) {
    out[0] = -v[0];
    out[1] = -v[1];
    return out;
  }
  /**
   * 插值两个点
   * @param {Vector2} out
   * @param {Vector2} v1
   * @param {Vector2} v2
   * @param {number} t
   */


  function lerp(out, v1, v2, t) {
    out[0] = v1[0] + t * (v2[0] - v1[0]);
    out[1] = v1[1] + t * (v2[1] - v1[1]);
    return out;
  }
  /**
   * 矩阵左乘向量
   * @param {Vector2} out
   * @param {Vector2} v
   * @param {Vector2} m
   */


  function applyTransform(out, v, m) {
    var x = v[0];
    var y = v[1];
    out[0] = m[0] * x + m[2] * y + m[4];
    out[1] = m[1] * x + m[3] * y + m[5];
    return out;
  }
  /**
   * 求两个向量最小值
   * @param  {Vector2} out
   * @param  {Vector2} v1
   * @param  {Vector2} v2
   */


  function min(out, v1, v2) {
    out[0] = Math.min(v1[0], v2[0]);
    out[1] = Math.min(v1[1], v2[1]);
    return out;
  }
  /**
   * 求两个向量最大值
   * @param  {Vector2} out
   * @param  {Vector2} v1
   * @param  {Vector2} v2
   */


  function max(out, v1, v2) {
    out[0] = Math.max(v1[0], v2[0]);
    out[1] = Math.max(v1[1], v2[1]);
    return out;
  }

  exports.create = create;
  exports.copy = copy;
  exports.clone = clone;
  exports.set = set;
  exports.add = add;
  exports.scaleAndAdd = scaleAndAdd;
  exports.sub = sub;
  exports.len = len;
  exports.length = length;
  exports.lenSquare = lenSquare;
  exports.lengthSquare = lengthSquare;
  exports.mul = mul;
  exports.div = div;
  exports.dot = dot;
  exports.scale = scale;
  exports.normalize = normalize;
  exports.distance = distance;
  exports.dist = dist;
  exports.distanceSquare = distanceSquare;
  exports.distSquare = distSquare;
  exports.negate = negate;
  exports.lerp = lerp;
  exports.applyTransform = applyTransform;
  exports.min = min;
  exports.max = max;

  /***/ }),
  /* 266 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__graphGL_GraphGLSeries__ = __webpack_require__(267);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__graphGL_GraphGLView__ = __webpack_require__(272);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_echarts_lib_visual_symbol__ = __webpack_require__(51);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_echarts_lib_visual_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_echarts_lib_visual_symbol__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_opacityVisual__ = __webpack_require__(17);







  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerVisual(__WEBPACK_IMPORTED_MODULE_3_echarts_lib_visual_symbol___default()('graphGL', 'circle', null));

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerVisual(Object(__WEBPACK_IMPORTED_MODULE_4__common_opacityVisual__["a" /* default */])('graphGL'));

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerVisual(function (ecModel) {
      var paletteScope = {};
      ecModel.eachSeriesByType('graphGL', function (seriesModel) {
          var categoriesData = seriesModel.getCategoriesData();
          var data = seriesModel.getData();

          var categoryNameIdxMap = {};

          categoriesData.each(function (idx) {
              var name = categoriesData.getName(idx);
              categoryNameIdxMap[name] = idx;

              var itemModel = categoriesData.getItemModel(idx);
              var color = itemModel.get('itemStyle.color')
                  || seriesModel.getColorFromPalette(name, paletteScope);
              categoriesData.setItemVisual(idx, 'color', color);
          });

          // Assign category color to visual
          if (categoriesData.count()) {
              data.each(function (idx) {
                  var model = data.getItemModel(idx);
                  var category = model.getShallow('category');
                  if (category != null) {
                      if (typeof category === 'string') {
                          category = categoryNameIdxMap[category];
                      }
                      if (!data.getItemVisual(idx, 'color', true)) {
                          data.setItemVisual(
                              idx, 'color',
                              categoriesData.getItemVisual(category, 'color')
                          );
                      }
                  }
              });
          }
      });
  });

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerVisual(function (ecModel) {
      ecModel.eachSeriesByType('graphGL', function (seriesModel) {
          var graph = seriesModel.getGraph();
          var edgeData = seriesModel.getEdgeData();

          var colorQuery = 'lineStyle.color'.split('.');
          var opacityQuery = 'lineStyle.opacity'.split('.');

          edgeData.setVisual('color', seriesModel.get(colorQuery));
          edgeData.setVisual('opacity', seriesModel.get(opacityQuery));

          edgeData.each(function (idx) {
              var itemModel = edgeData.getItemModel(idx);
              var edge = graph.getEdgeByIndex(idx);
              // Edge visual must after node visual
              var color = itemModel.get(colorQuery);
              var opacity = itemModel.get(opacityQuery);
              switch (color) {
                  case 'source':
                      color = edge.node1.getVisual('color');
                      break;
                  case 'target':
                      color = edge.node2.getVisual('color');
                      break;
              }

              edge.setVisual('color', color);
              edge.setVisual('opacity', opacity);
          });
      });
  });

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerAction({
      type: 'graphGLRoam',
      event: 'graphglroam',
      update: 'series.graphGL:roam'
  }, function (payload, ecModel) {
      ecModel.eachComponent({
          mainType: 'series', query: payload
      }, function (componentModel) {
          componentModel.setView(payload);
      });
  });

  function noop() {}

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerAction({
      type: 'graphGLStartLayout',
      event: 'graphgllayoutstarted',
      update: 'series.graphGL:startLayout'
  }, noop);

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerAction({
      type: 'graphGLStopLayout',
      event: 'graphgllayoutstopped',
      update: 'series.graphGL:stopLayout'
  }, noop);

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerAction({
      type: 'graphGLFocusNodeAdjacency',
      event: 'graphGLFocusNodeAdjacency',
      update: 'series.graphGL:focusNodeAdjacency'
  }, noop);


  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerAction({
      type: 'graphGLUnfocusNodeAdjacency',
      event: 'graphGLUnfocusNodeAdjacency',
      update: 'series.graphGL:unfocusNodeAdjacency'
  }, noop);

  /***/ }),
  /* 267 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__createGraphFromNodeEdge__ = __webpack_require__(268);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_format__ = __webpack_require__(32);




  var GraphSeries = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendSeriesModel({

      type: 'series.graphGL',

      visualColorAccessPath: 'itemStyle.color',

      init: function (option) {
          GraphSeries.superApply(this, 'init', arguments);

          // Provide data for legend select
          this.legendDataProvider = function () {
              return this._categoriesData;
          };

          this._updateCategoriesData();
      },

      mergeOption: function (option) {
          GraphSeries.superApply(this, 'mergeOption', arguments);

          this._updateCategoriesData();
      },

      getFormattedLabel: function (dataIndex, status, dataType, dimIndex) {
          var text = __WEBPACK_IMPORTED_MODULE_2__util_format__["a" /* default */].getFormattedLabel(this, dataIndex, status, dataType, dimIndex);
          if (text == null) {
              var data = this.getData();
              var lastDim = data.dimensions[data.dimensions.length - 1];
              text = data.get(lastDim, dataIndex);
          }
          return text;
      },

      getInitialData: function (option, ecModel) {
          var edges = option.edges || option.links || [];
          var nodes = option.data || option.nodes || [];
          var self = this;

          if (nodes && edges) {
              return Object(__WEBPACK_IMPORTED_MODULE_1__createGraphFromNodeEdge__["a" /* default */])(nodes, edges, this, true, beforeLink).data;
          }

          function beforeLink(nodeData, edgeData) {
              // Overwrite nodeData.getItemModel to
              nodeData.wrapMethod('getItemModel', function (model) {
                  var categoriesModels = self._categoriesModels;
                  var categoryIdx = model.getShallow('category');
                  var categoryModel = categoriesModels[categoryIdx];
                  if (categoryModel) {
                      categoryModel.parentModel = model.parentModel;
                      model.parentModel = categoryModel;
                  }
                  return model;
              });

              var edgeLabelModel = self.getModel('edgeLabel');
              // For option `edgeLabel` can be found by label.xxx.xxx on item mode.
              var fakeSeriesModel = new __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.Model(
                  { label: edgeLabelModel.option },
                  edgeLabelModel.parentModel,
                  ecModel
              );

              edgeData.wrapMethod('getItemModel', function (model) {
                  model.customizeGetParent(edgeGetParent);
                  return model;
              });

              function edgeGetParent(path) {
                  path = this.parsePath(path);
                  return (path && path[0] === 'label')
                      ? fakeSeriesModel
                      : this.parentModel;
              }
          }
      },

      /**
       * @return {module:echarts/data/Graph}
       */
      getGraph: function () {
          return this.getData().graph;
      },

      /**
       * @return {module:echarts/data/List}
       */
      getEdgeData: function () {
          return this.getGraph().edgeData;
      },

      /**
       * @return {module:echarts/data/List}
       */
      getCategoriesData: function () {
          return this._categoriesData;
      },

      /**
       * @override
       */
      formatTooltip: function (dataIndex, multipleSeries, dataType) {
          if (dataType === 'edge') {
              var nodeData = this.getData();
              var params = this.getDataParams(dataIndex, dataType);
              var edge = nodeData.graph.getEdgeByIndex(dataIndex);
              var sourceName = nodeData.getName(edge.node1.dataIndex);
              var targetName = nodeData.getName(edge.node2.dataIndex);

              var html = [];
              sourceName != null && html.push(sourceName);
              targetName != null && html.push(targetName);
              html = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.format.encodeHTML(html.join(' > '));

              if (params.value) {
                  html += ' : ' + __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.format.encodeHTML(params.value);
              }
              return html;
          }
          else { // dataType === 'node' or empty
              return GraphSeries.superApply(this, 'formatTooltip', arguments);
          }
      },

      _updateCategoriesData: function () {
          var categories = (this.option.categories || []).map(function (category) {
              // Data must has value
              return category.value != null ? category : __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.util.extend({
                  value: 0
              }, category);
          });
          var categoriesData = new __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.List(['value'], this);
          categoriesData.initData(categories);

          this._categoriesData = categoriesData;

          this._categoriesModels = categoriesData.mapArray(function (idx) {
              return categoriesData.getItemModel(idx, true);
          });
      },

      setView: function (payload) {
          if (payload.zoom != null) {
              this.option.zoom = payload.zoom;
          }
          if (payload.offset != null) {
              this.option.offset = payload.offset;
          }
      },

      setNodePosition: function (points) {
          for (var i = 0; i < points.length / 2; i++) {
              var x = points[i * 2];
              var y = points[i * 2 + 1];

              var opt = this.getData().getRawDataItem(i);
              opt.x = x;
              opt.y = y;
          }
      },

      isAnimationEnabled: function () {
          return GraphSeries.superCall(this, 'isAnimationEnabled')
              // Not enable animation when do force layout
              && !(this.get('layout') === 'force' && this.get('force.layoutAnimation'));
      },

      defaultOption: {
          zlevel: 10,
          z: 2,

          legendHoverLink: true,

          // Only support forceAtlas2
          layout: 'forceAtlas2',

          // Configuration of force directed layout
          forceAtlas2: {
              initLayout: null,

              GPU: true,

              steps: 1,

              // barnesHutOptimize

              // Maxp layout steps.
              maxSteps: 1000,

              repulsionByDegree: true,
              linLogMode: false,
              strongGravityMode: false,
              gravity: 1.0,
              // scaling: 1.0,

              edgeWeightInfluence: 1.0,

              // Edge weight range.
              edgeWeight: [1, 4],
              // Node weight range.
              nodeWeight: [1, 4],

              // jitterTolerence: 0.1,
              preventOverlap: false,
              gravityCenter: null
          },

          focusNodeAdjacency: true,

          focusNodeAdjacencyOn: 'mouseover',

          left: 'center',
          top: 'center',
          // right: null,
          // bottom: null,
          // width: '80%',
          // height: '80%',

          symbol: 'circle',
          symbolSize: 5,

          roam: false,

          // Default on center of graph
          center: null,

          zoom: 1,

          // categories: [],

          // data: []
          // Or
          // nodes: []
          //
          // links: []
          // Or
          // edges: []

          label: {
              show: false,
              formatter: '{b}',
              position: 'right',
              distance: 5,
              textStyle: {
                  fontSize: 14
              }
          },

          itemStyle: {},

          lineStyle: {
              color: '#aaa',
              width: 1,
              opacity: 0.5
          },

          emphasis: {
              label: {
                  show: true
              }
          },

          animation: false
      }
  });

  /***/ }),
  /* 268 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echarts_lib_data_Graph__ = __webpack_require__(269);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echarts_lib_data_Graph___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_echarts_lib_data_Graph__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_echarts_lib_data_helper_linkList__ = __webpack_require__(271);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_echarts_lib_data_helper_linkList___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_echarts_lib_data_helper_linkList__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_retrieve__ = __webpack_require__(2);





  /* harmony default export */ __webpack_exports__["a"] = (function (nodes, edges, hostModel, directed, beforeLink) {
      var graph = new __WEBPACK_IMPORTED_MODULE_1_echarts_lib_data_Graph___default.a(directed);
      for (var i = 0; i < nodes.length; i++) {
          graph.addNode(__WEBPACK_IMPORTED_MODULE_3__util_retrieve__["a" /* default */].firstNotNull(
              // Id, name, dataIndex
              nodes[i].id, nodes[i].name, i
          ), i);
      }

      var linkNameList = [];
      var validEdges = [];
      var linkCount = 0;
      for (var i = 0; i < edges.length; i++) {
          var link = edges[i];
          var source = link.source;
          var target = link.target;
          // addEdge may fail when source or target not exists
          if (graph.addEdge(source, target, linkCount)) {
              validEdges.push(link);
              linkNameList.push(__WEBPACK_IMPORTED_MODULE_3__util_retrieve__["a" /* default */].firstNotNull(link.id, source + ' > ' + target));
              linkCount++;
          }
      }

      var nodeData;

      // FIXME, support more coordinate systems.
      var dimensionNames = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.helper.completeDimensions(
          ['value'], nodes
      );
      nodeData = new __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.List(dimensionNames, hostModel);
      nodeData.initData(nodes);

      var edgeData = new __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.List(['value'], hostModel);
      edgeData.initData(validEdges, linkNameList);

      beforeLink && beforeLink(nodeData, edgeData);

      __WEBPACK_IMPORTED_MODULE_2_echarts_lib_data_helper_linkList___default()({
          mainData: nodeData,
          struct: graph,
          structAttr: 'graph',
          datas: {node: nodeData, edge: edgeData},
          datasAttr: {node: 'data', edge: 'edgeData'}
      });

      // Update dataIndex of nodes and edges because invalid edge may be removed
      graph.update();

      return graph;
  });
  /***/ }),
  /* 269 */
  /***/ (function(module, exports, __webpack_require__) {


  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  var _config = __webpack_require__(103);

  var __DEV__ = _config.__DEV__;

  var zrUtil = __webpack_require__(16);

  var _clazz = __webpack_require__(270);

  var enableClassCheck = _clazz.enableClassCheck;

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  // id may be function name of Object, add a prefix to avoid this problem.
  function generateNodeKey(id) {
    return '_EC_' + id;
  }
  /**
   * @alias module:echarts/data/Graph
   * @constructor
   * @param {boolean} directed
   */


  var Graph = function (directed) {
    /**
     * 是否是有向图
     * @type {boolean}
     * @private
     */
    this._directed = directed || false;
    /**
     * @type {Array.<module:echarts/data/Graph.Node>}
     * @readOnly
     */

    this.nodes = [];
    /**
     * @type {Array.<module:echarts/data/Graph.Edge>}
     * @readOnly
     */

    this.edges = [];
    /**
     * @type {Object.<string, module:echarts/data/Graph.Node>}
     * @private
     */

    this._nodesMap = {};
    /**
     * @type {Object.<string, module:echarts/data/Graph.Edge>}
     * @private
     */

    this._edgesMap = {};
    /**
     * @type {module:echarts/data/List}
     * @readOnly
     */

    this.data;
    /**
     * @type {module:echarts/data/List}
     * @readOnly
     */

    this.edgeData;
  };

  var graphProto = Graph.prototype;
  /**
   * @type {string}
   */

  graphProto.type = 'graph';
  /**
   * If is directed graph
   * @return {boolean}
   */

  graphProto.isDirected = function () {
    return this._directed;
  };
  /**
   * Add a new node
   * @param {string} id
   * @param {number} [dataIndex]
   */


  graphProto.addNode = function (id, dataIndex) {
    id = id == null ? '' + dataIndex : '' + id;
    var nodesMap = this._nodesMap;

    if (nodesMap[generateNodeKey(id)]) {
      return;
    }

    var node = new Node(id, dataIndex);
    node.hostGraph = this;
    this.nodes.push(node);
    nodesMap[generateNodeKey(id)] = node;
    return node;
  };
  /**
   * Get node by data index
   * @param  {number} dataIndex
   * @return {module:echarts/data/Graph~Node}
   */


  graphProto.getNodeByIndex = function (dataIndex) {
    var rawIdx = this.data.getRawIndex(dataIndex);
    return this.nodes[rawIdx];
  };
  /**
   * Get node by id
   * @param  {string} id
   * @return {module:echarts/data/Graph.Node}
   */


  graphProto.getNodeById = function (id) {
    return this._nodesMap[generateNodeKey(id)];
  };
  /**
   * Add a new edge
   * @param {number|string|module:echarts/data/Graph.Node} n1
   * @param {number|string|module:echarts/data/Graph.Node} n2
   * @param {number} [dataIndex=-1]
   * @return {module:echarts/data/Graph.Edge}
   */


  graphProto.addEdge = function (n1, n2, dataIndex) {
    var nodesMap = this._nodesMap;
    var edgesMap = this._edgesMap; // PNEDING

    if (typeof n1 === 'number') {
      n1 = this.nodes[n1];
    }

    if (typeof n2 === 'number') {
      n2 = this.nodes[n2];
    }

    if (!Node.isInstance(n1)) {
      n1 = nodesMap[generateNodeKey(n1)];
    }

    if (!Node.isInstance(n2)) {
      n2 = nodesMap[generateNodeKey(n2)];
    }

    if (!n1 || !n2) {
      return;
    }

    var key = n1.id + '-' + n2.id; // PENDING

    if (edgesMap[key]) {
      return;
    }

    var edge = new Edge(n1, n2, dataIndex);
    edge.hostGraph = this;

    if (this._directed) {
      n1.outEdges.push(edge);
      n2.inEdges.push(edge);
    }

    n1.edges.push(edge);

    if (n1 !== n2) {
      n2.edges.push(edge);
    }

    this.edges.push(edge);
    edgesMap[key] = edge;
    return edge;
  };
  /**
   * Get edge by data index
   * @param  {number} dataIndex
   * @return {module:echarts/data/Graph~Node}
   */


  graphProto.getEdgeByIndex = function (dataIndex) {
    var rawIdx = this.edgeData.getRawIndex(dataIndex);
    return this.edges[rawIdx];
  };
  /**
   * Get edge by two linked nodes
   * @param  {module:echarts/data/Graph.Node|string} n1
   * @param  {module:echarts/data/Graph.Node|string} n2
   * @return {module:echarts/data/Graph.Edge}
   */


  graphProto.getEdge = function (n1, n2) {
    if (Node.isInstance(n1)) {
      n1 = n1.id;
    }

    if (Node.isInstance(n2)) {
      n2 = n2.id;
    }

    var edgesMap = this._edgesMap;

    if (this._directed) {
      return edgesMap[n1 + '-' + n2];
    } else {
      return edgesMap[n1 + '-' + n2] || edgesMap[n2 + '-' + n1];
    }
  };
  /**
   * Iterate all nodes
   * @param  {Function} cb
   * @param  {*} [context]
   */


  graphProto.eachNode = function (cb, context) {
    var nodes = this.nodes;
    var len = nodes.length;

    for (var i = 0; i < len; i++) {
      if (nodes[i].dataIndex >= 0) {
        cb.call(context, nodes[i], i);
      }
    }
  };
  /**
   * Iterate all edges
   * @param  {Function} cb
   * @param  {*} [context]
   */


  graphProto.eachEdge = function (cb, context) {
    var edges = this.edges;
    var len = edges.length;

    for (var i = 0; i < len; i++) {
      if (edges[i].dataIndex >= 0 && edges[i].node1.dataIndex >= 0 && edges[i].node2.dataIndex >= 0) {
        cb.call(context, edges[i], i);
      }
    }
  };
  /**
   * Breadth first traverse
   * @param {Function} cb
   * @param {module:echarts/data/Graph.Node} startNode
   * @param {string} [direction='none'] 'none'|'in'|'out'
   * @param {*} [context]
   */


  graphProto.breadthFirstTraverse = function (cb, startNode, direction, context) {
    if (!Node.isInstance(startNode)) {
      startNode = this._nodesMap[generateNodeKey(startNode)];
    }

    if (!startNode) {
      return;
    }

    var edgeType = direction === 'out' ? 'outEdges' : direction === 'in' ? 'inEdges' : 'edges';

    for (var i = 0; i < this.nodes.length; i++) {
      this.nodes[i].__visited = false;
    }

    if (cb.call(context, startNode, null)) {
      return;
    }

    var queue = [startNode];

    while (queue.length) {
      var currentNode = queue.shift();
      var edges = currentNode[edgeType];

      for (var i = 0; i < edges.length; i++) {
        var e = edges[i];
        var otherNode = e.node1 === currentNode ? e.node2 : e.node1;

        if (!otherNode.__visited) {
          if (cb.call(context, otherNode, currentNode)) {
            // Stop traversing
            return;
          }

          queue.push(otherNode);
          otherNode.__visited = true;
        }
      }
    }
  }; // TODO
  // graphProto.depthFirstTraverse = function (
  //     cb, startNode, direction, context
  // ) {
  // };
  // Filter update


  graphProto.update = function () {
    var data = this.data;
    var edgeData = this.edgeData;
    var nodes = this.nodes;
    var edges = this.edges;

    for (var i = 0, len = nodes.length; i < len; i++) {
      nodes[i].dataIndex = -1;
    }

    for (var i = 0, len = data.count(); i < len; i++) {
      nodes[data.getRawIndex(i)].dataIndex = i;
    }

    edgeData.filterSelf(function (idx) {
      var edge = edges[edgeData.getRawIndex(idx)];
      return edge.node1.dataIndex >= 0 && edge.node2.dataIndex >= 0;
    }); // Update edge

    for (var i = 0, len = edges.length; i < len; i++) {
      edges[i].dataIndex = -1;
    }

    for (var i = 0, len = edgeData.count(); i < len; i++) {
      edges[edgeData.getRawIndex(i)].dataIndex = i;
    }
  };
  /**
   * @return {module:echarts/data/Graph}
   */


  graphProto.clone = function () {
    var graph = new Graph(this._directed);
    var nodes = this.nodes;
    var edges = this.edges;

    for (var i = 0; i < nodes.length; i++) {
      graph.addNode(nodes[i].id, nodes[i].dataIndex);
    }

    for (var i = 0; i < edges.length; i++) {
      var e = edges[i];
      graph.addEdge(e.node1.id, e.node2.id, e.dataIndex);
    }

    return graph;
  };
  /**
   * @alias module:echarts/data/Graph.Node
   */


  function Node(id, dataIndex) {
    /**
    * @type {string}
    */
    this.id = id == null ? '' : id;
    /**
    * @type {Array.<module:echarts/data/Graph.Edge>}
    */

    this.inEdges = [];
    /**
    * @type {Array.<module:echarts/data/Graph.Edge>}
    */

    this.outEdges = [];
    /**
    * @type {Array.<module:echarts/data/Graph.Edge>}
    */

    this.edges = [];
    /**
     * @type {module:echarts/data/Graph}
     */

    this.hostGraph;
    /**
     * @type {number}
     */

    this.dataIndex = dataIndex == null ? -1 : dataIndex;
  }

  Node.prototype = {
    constructor: Node,

    /**
     * @return {number}
     */
    degree: function () {
      return this.edges.length;
    },

    /**
     * @return {number}
     */
    inDegree: function () {
      return this.inEdges.length;
    },

    /**
    * @return {number}
    */
    outDegree: function () {
      return this.outEdges.length;
    },

    /**
     * @param {string} [path]
     * @return {module:echarts/model/Model}
     */
    getModel: function (path) {
      if (this.dataIndex < 0) {
        return;
      }

      var graph = this.hostGraph;
      var itemModel = graph.data.getItemModel(this.dataIndex);
      return itemModel.getModel(path);
    }
  };
  /**
   * 图边
   * @alias module:echarts/data/Graph.Edge
   * @param {module:echarts/data/Graph.Node} n1
   * @param {module:echarts/data/Graph.Node} n2
   * @param {number} [dataIndex=-1]
   */

  function Edge(n1, n2, dataIndex) {
    /**
     * 节点1，如果是有向图则为源节点
     * @type {module:echarts/data/Graph.Node}
     */
    this.node1 = n1;
    /**
     * 节点2，如果是有向图则为目标节点
     * @type {module:echarts/data/Graph.Node}
     */

    this.node2 = n2;
    this.dataIndex = dataIndex == null ? -1 : dataIndex;
  }
  /**
   * @param {string} [path]
   * @return {module:echarts/model/Model}
   */


  Edge.prototype.getModel = function (path) {
    if (this.dataIndex < 0) {
      return;
    }

    var graph = this.hostGraph;
    var itemModel = graph.edgeData.getItemModel(this.dataIndex);
    return itemModel.getModel(path);
  };

  var createGraphDataProxyMixin = function (hostName, dataName) {
    return {
      /**
       * @param {string=} [dimension='value'] Default 'value'. can be 'a', 'b', 'c', 'd', 'e'.
       * @return {number}
       */
      getValue: function (dimension) {
        var data = this[hostName][dataName];
        return data.get(data.getDimension(dimension || 'value'), this.dataIndex);
      },

      /**
       * @param {Object|string} key
       * @param {*} [value]
       */
      setVisual: function (key, value) {
        this.dataIndex >= 0 && this[hostName][dataName].setItemVisual(this.dataIndex, key, value);
      },

      /**
       * @param {string} key
       * @return {boolean}
       */
      getVisual: function (key, ignoreParent) {
        return this[hostName][dataName].getItemVisual(this.dataIndex, key, ignoreParent);
      },

      /**
       * @param {Object} layout
       * @return {boolean} [merge=false]
       */
      setLayout: function (layout, merge) {
        this.dataIndex >= 0 && this[hostName][dataName].setItemLayout(this.dataIndex, layout, merge);
      },

      /**
       * @return {Object}
       */
      getLayout: function () {
        return this[hostName][dataName].getItemLayout(this.dataIndex);
      },

      /**
       * @return {module:zrender/Element}
       */
      getGraphicEl: function () {
        return this[hostName][dataName].getItemGraphicEl(this.dataIndex);
      },

      /**
       * @return {number}
       */
      getRawIndex: function () {
        return this[hostName][dataName].getRawIndex(this.dataIndex);
      }
    };
  };

  zrUtil.mixin(Node, createGraphDataProxyMixin('hostGraph', 'data'));
  zrUtil.mixin(Edge, createGraphDataProxyMixin('hostGraph', 'edgeData'));
  Graph.Node = Node;
  Graph.Edge = Edge;
  enableClassCheck(Node);
  enableClassCheck(Edge);
  var _default = Graph;
  module.exports = _default;

  /***/ }),
  /* 270 */
  /***/ (function(module, exports, __webpack_require__) {


  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  var _config = __webpack_require__(103);

  var __DEV__ = _config.__DEV__;

  var zrUtil = __webpack_require__(16);

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */
  var TYPE_DELIMITER = '.';
  var IS_CONTAINER = '___EC__COMPONENT__CONTAINER___';
  /**
   * Notice, parseClassType('') should returns {main: '', sub: ''}
   * @public
   */

  function parseClassType(componentType) {
    var ret = {
      main: '',
      sub: ''
    };

    if (componentType) {
      componentType = componentType.split(TYPE_DELIMITER);
      ret.main = componentType[0] || '';
      ret.sub = componentType[1] || '';
    }

    return ret;
  }
  /**
   * @public
   */


  function checkClassType(componentType) {
    zrUtil.assert(/^[a-zA-Z0-9_]+([.][a-zA-Z0-9_]+)?$/.test(componentType), 'componentType "' + componentType + '" illegal');
  }
  /**
   * @public
   */


  function enableClassExtend(RootClass, mandatoryMethods) {
    RootClass.$constructor = RootClass;

    RootClass.extend = function (proto) {
      var superClass = this;

      var ExtendedClass = function () {
        if (!proto.$constructor) {
          superClass.apply(this, arguments);
        } else {
          proto.$constructor.apply(this, arguments);
        }
      };

      zrUtil.extend(ExtendedClass.prototype, proto);
      ExtendedClass.extend = this.extend;
      ExtendedClass.superCall = superCall;
      ExtendedClass.superApply = superApply;
      zrUtil.inherits(ExtendedClass, this);
      ExtendedClass.superClass = superClass;
      return ExtendedClass;
    };
  }

  var classBase = 0;
  /**
   * Can not use instanceof, consider different scope by
   * cross domain or es module import in ec extensions.
   * Mount a method "isInstance()" to Clz.
   */

  function enableClassCheck(Clz) {
    var classAttr = ['__\0is_clz', classBase++, Math.random().toFixed(3)].join('_');
    Clz.prototype[classAttr] = true;

    Clz.isInstance = function (obj) {
      return !!(obj && obj[classAttr]);
    };
  } // superCall should have class info, which can not be fetch from 'this'.
  // Consider this case:
  // class A has method f,
  // class B inherits class A, overrides method f, f call superApply('f'),
  // class C inherits class B, do not overrides method f,
  // then when method of class C is called, dead loop occured.


  function superCall(context, methodName) {
    var args = zrUtil.slice(arguments, 2);
    return this.superClass.prototype[methodName].apply(context, args);
  }

  function superApply(context, methodName, args) {
    return this.superClass.prototype[methodName].apply(context, args);
  }
  /**
   * @param {Object} entity
   * @param {Object} options
   * @param {boolean} [options.registerWhenExtend]
   * @public
   */


  function enableClassManagement(entity, options) {
    options = options || {};
    /**
     * Component model classes
     * key: componentType,
     * value:
     *     componentClass, when componentType is 'xxx'
     *     or Object.<subKey, componentClass>, when componentType is 'xxx.yy'
     * @type {Object}
     */

    var storage = {};

    entity.registerClass = function (Clazz, componentType) {
      if (componentType) {
        checkClassType(componentType);
        componentType = parseClassType(componentType);

        if (!componentType.sub) {
          storage[componentType.main] = Clazz;
        } else if (componentType.sub !== IS_CONTAINER) {
          var container = makeContainer(componentType);
          container[componentType.sub] = Clazz;
        }
      }

      return Clazz;
    };

    entity.getClass = function (componentMainType, subType, throwWhenNotFound) {
      var Clazz = storage[componentMainType];

      if (Clazz && Clazz[IS_CONTAINER]) {
        Clazz = subType ? Clazz[subType] : null;
      }

      if (throwWhenNotFound && !Clazz) {
        throw new Error(!subType ? componentMainType + '.' + 'type should be specified.' : 'Component ' + componentMainType + '.' + (subType || '') + ' not exists. Load it first.');
      }

      return Clazz;
    };

    entity.getClassesByMainType = function (componentType) {
      componentType = parseClassType(componentType);
      var result = [];
      var obj = storage[componentType.main];

      if (obj && obj[IS_CONTAINER]) {
        zrUtil.each(obj, function (o, type) {
          type !== IS_CONTAINER && result.push(o);
        });
      } else {
        result.push(obj);
      }

      return result;
    };

    entity.hasClass = function (componentType) {
      // Just consider componentType.main.
      componentType = parseClassType(componentType);
      return !!storage[componentType.main];
    };
    /**
     * @return {Array.<string>} Like ['aa', 'bb'], but can not be ['aa.xx']
     */


    entity.getAllClassMainTypes = function () {
      var types = [];
      zrUtil.each(storage, function (obj, type) {
        types.push(type);
      });
      return types;
    };
    /**
     * If a main type is container and has sub types
     * @param  {string}  mainType
     * @return {boolean}
     */


    entity.hasSubTypes = function (componentType) {
      componentType = parseClassType(componentType);
      var obj = storage[componentType.main];
      return obj && obj[IS_CONTAINER];
    };

    entity.parseClassType = parseClassType;

    function makeContainer(componentType) {
      var container = storage[componentType.main];

      if (!container || !container[IS_CONTAINER]) {
        container = storage[componentType.main] = {};
        container[IS_CONTAINER] = true;
      }

      return container;
    }

    if (options.registerWhenExtend) {
      var originalExtend = entity.extend;

      if (originalExtend) {
        entity.extend = function (proto) {
          var ExtendedClass = originalExtend.call(this, proto);
          return entity.registerClass(ExtendedClass, proto.type);
        };
      }
    }

    return entity;
  }
  /**
   * @param {string|Array.<string>} properties
   */


  function setReadOnly(obj, properties) {// FIXME It seems broken in IE8 simulation of IE11
    // if (!zrUtil.isArray(properties)) {
    //     properties = properties != null ? [properties] : [];
    // }
    // zrUtil.each(properties, function (prop) {
    //     var value = obj[prop];
    //     Object.defineProperty
    //         && Object.defineProperty(obj, prop, {
    //             value: value, writable: false
    //         });
    //     zrUtil.isArray(obj[prop])
    //         && Object.freeze
    //         && Object.freeze(obj[prop]);
    // });
  }

  exports.parseClassType = parseClassType;
  exports.enableClassExtend = enableClassExtend;
  exports.enableClassCheck = enableClassCheck;
  exports.enableClassManagement = enableClassManagement;
  exports.setReadOnly = setReadOnly;

  /***/ }),
  /* 271 */
  /***/ (function(module, exports, __webpack_require__) {


  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  var zrUtil = __webpack_require__(16);

  /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
  */

  /**
   * Link lists and struct (graph or tree)
   */
  var each = zrUtil.each;
  var DATAS = '\0__link_datas';
  var MAIN_DATA = '\0__link_mainData'; // Caution:
  // In most case, either list or its shallow clones (see list.cloneShallow)
  // is active in echarts process. So considering heap memory consumption,
  // we do not clone tree or graph, but share them among list and its shallow clones.
  // But in some rare case, we have to keep old list (like do animation in chart). So
  // please take care that both the old list and the new list share the same tree/graph.

  /**
   * @param {Object} opt
   * @param {module:echarts/data/List} opt.mainData
   * @param {Object} [opt.struct] For example, instance of Graph or Tree.
   * @param {string} [opt.structAttr] designation: list[structAttr] = struct;
   * @param {Object} [opt.datas] {dataType: data},
   *                 like: {node: nodeList, edge: edgeList}.
   *                 Should contain mainData.
   * @param {Object} [opt.datasAttr] {dataType: attr},
   *                 designation: struct[datasAttr[dataType]] = list;
   */

  function linkList(opt) {
    var mainData = opt.mainData;
    var datas = opt.datas;

    if (!datas) {
      datas = {
        main: mainData
      };
      opt.datasAttr = {
        main: 'data'
      };
    }

    opt.datas = opt.mainData = null;
    linkAll(mainData, datas, opt); // Porxy data original methods.

    each(datas, function (data) {
      each(mainData.TRANSFERABLE_METHODS, function (methodName) {
        data.wrapMethod(methodName, zrUtil.curry(transferInjection, opt));
      });
    }); // Beyond transfer, additional features should be added to `cloneShallow`.

    mainData.wrapMethod('cloneShallow', zrUtil.curry(cloneShallowInjection, opt)); // Only mainData trigger change, because struct.update may trigger
    // another changable methods, which may bring about dead lock.

    each(mainData.CHANGABLE_METHODS, function (methodName) {
      mainData.wrapMethod(methodName, zrUtil.curry(changeInjection, opt));
    }); // Make sure datas contains mainData.

    zrUtil.assert(datas[mainData.dataType] === mainData);
  }

  function transferInjection(opt, res) {
    if (isMainData(this)) {
      // Transfer datas to new main data.
      var datas = zrUtil.extend({}, this[DATAS]);
      datas[this.dataType] = res;
      linkAll(res, datas, opt);
    } else {
      // Modify the reference in main data to point newData.
      linkSingle(res, this.dataType, this[MAIN_DATA], opt);
    }

    return res;
  }

  function changeInjection(opt, res) {
    opt.struct && opt.struct.update(this);
    return res;
  }

  function cloneShallowInjection(opt, res) {
    // cloneShallow, which brings about some fragilities, may be inappropriate
    // to be exposed as an API. So for implementation simplicity we can make
    // the restriction that cloneShallow of not-mainData should not be invoked
    // outside, but only be invoked here.
    each(res[DATAS], function (data, dataType) {
      data !== res && linkSingle(data.cloneShallow(), dataType, res, opt);
    });
    return res;
  }
  /**
   * Supplement method to List.
   *
   * @public
   * @param {string} [dataType] If not specified, return mainData.
   * @return {module:echarts/data/List}
   */


  function getLinkedData(dataType) {
    var mainData = this[MAIN_DATA];
    return dataType == null || mainData == null ? mainData : mainData[DATAS][dataType];
  }

  function isMainData(data) {
    return data[MAIN_DATA] === data;
  }

  function linkAll(mainData, datas, opt) {
    mainData[DATAS] = {};
    each(datas, function (data, dataType) {
      linkSingle(data, dataType, mainData, opt);
    });
  }

  function linkSingle(data, dataType, mainData, opt) {
    mainData[DATAS][dataType] = data;
    data[MAIN_DATA] = mainData;
    data.dataType = dataType;

    if (opt.struct) {
      data[opt.structAttr] = opt.struct;
      opt.struct[opt.datasAttr[dataType]] = data;
    } // Supplement method.


    data.getLinkedData = getLinkedData;
  }

  var _default = linkList;
  module.exports = _default;

  /***/ }),
  /* 272 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echarts_lib_util_layout__ = __webpack_require__(47);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echarts_lib_util_layout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_echarts_lib_util_layout__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_graphicGL__ = __webpack_require__(1);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_ViewGL__ = __webpack_require__(22);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_geometry_Lines2D__ = __webpack_require__(104);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_retrieve__ = __webpack_require__(2);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__ForceAtlas2GPU__ = __webpack_require__(273);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__ForceAtlas2__ = __webpack_require__(275);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_zrender_lib_animation_requestAnimationFrame__ = __webpack_require__(81);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_zrender_lib_animation_requestAnimationFrame___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_zrender_lib_animation_requestAnimationFrame__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_claygl_src_dep_glmatrix__ = __webpack_require__(6);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__util_Roam2DControl__ = __webpack_require__(277);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__common_PointsBuilder__ = __webpack_require__(66);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__util_shader_lines2D_glsl_js__ = __webpack_require__(278);











  var vec2 = __WEBPACK_IMPORTED_MODULE_9_claygl_src_dep_glmatrix__["a" /* default */].vec2;






  __WEBPACK_IMPORTED_MODULE_2__util_graphicGL__["a" /* default */].Shader.import(__WEBPACK_IMPORTED_MODULE_12__util_shader_lines2D_glsl_js__["a" /* default */]);

  var globalLayoutId = 1;

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendChartView({

      type: 'graphGL',

      __ecgl__: true,

      init: function (ecModel, api) {

          this.groupGL = new __WEBPACK_IMPORTED_MODULE_2__util_graphicGL__["a" /* default */].Node();
          this.viewGL = new __WEBPACK_IMPORTED_MODULE_3__core_ViewGL__["a" /* default */]('orthographic');
          this.viewGL.camera.left = this.viewGL.camera.right = 0;

          this.viewGL.add(this.groupGL);

          this._pointsBuilder = new __WEBPACK_IMPORTED_MODULE_11__common_PointsBuilder__["a" /* default */](true, api);

          // Mesh used during force directed layout.
          this._forceEdgesMesh = new __WEBPACK_IMPORTED_MODULE_2__util_graphicGL__["a" /* default */].Mesh({
              material: new __WEBPACK_IMPORTED_MODULE_2__util_graphicGL__["a" /* default */].Material({
                  shader: __WEBPACK_IMPORTED_MODULE_2__util_graphicGL__["a" /* default */].createShader('ecgl.forceAtlas2.edges'),
                  transparent: true,
                  depthMask: false,
                  depthTest: false
              }),
              $ignorePicking: true,
              geometry: new __WEBPACK_IMPORTED_MODULE_2__util_graphicGL__["a" /* default */].Geometry({
                  attributes: {
                      node: new __WEBPACK_IMPORTED_MODULE_2__util_graphicGL__["a" /* default */].Geometry.Attribute('node', 'float', 2),
                      color: new __WEBPACK_IMPORTED_MODULE_2__util_graphicGL__["a" /* default */].Geometry.Attribute('color', 'float', 4, 'COLOR')
                  },
                  dynamic: true,
                  mainAttribute: 'node'
              }),
              renderOrder: -1,
              mode: __WEBPACK_IMPORTED_MODULE_2__util_graphicGL__["a" /* default */].Mesh.LINES
          });

          // Mesh used after force directed layout.
          this._edgesMesh = new __WEBPACK_IMPORTED_MODULE_2__util_graphicGL__["a" /* default */].Mesh({
              material: new __WEBPACK_IMPORTED_MODULE_2__util_graphicGL__["a" /* default */].Material({
                  shader: __WEBPACK_IMPORTED_MODULE_2__util_graphicGL__["a" /* default */].createShader('ecgl.meshLines2D'),
                  transparent: true,
                  depthMask: false,
                  depthTest: false
              }),
              $ignorePicking: true,
              geometry: new __WEBPACK_IMPORTED_MODULE_4__util_geometry_Lines2D__["a" /* default */]({
                  useNativeLine: false,
                  dynamic: true
              }),
              renderOrder: -1,
              culling: false
          });

          this._layoutId = 0;

          this._control = new __WEBPACK_IMPORTED_MODULE_10__util_Roam2DControl__["a" /* default */]({
              zr: api.getZr(),
              viewGL: this.viewGL
          });
          this._control.setTarget(this.groupGL);
          this._control.init();


          this._clickHandler = this._clickHandler.bind(this);
      },

      render: function (seriesModel, ecModel, api) {
          this.groupGL.add(this._pointsBuilder.rootNode);

          this._model = seriesModel;
          this._api = api;

          this._initLayout(seriesModel, ecModel, api);

          this._pointsBuilder.update(seriesModel, ecModel, api);

          if (!(this._forceLayoutInstance instanceof __WEBPACK_IMPORTED_MODULE_6__ForceAtlas2GPU__["a" /* default */])) {
              this.groupGL.remove(this._forceEdgesMesh);
          }

          this._updateCamera(seriesModel, api);

          this._control.off('update');
          this._control.on('update', function () {
              api.dispatchAction({
                  type: 'graphGLRoam',
                  seriesId: seriesModel.id,
                  zoom: this._control.getZoom(),
                  offset: this._control.getOffset()
              });

              this._pointsBuilder.updateView(this.viewGL.camera);
          }, this);

          this._control.setZoom(__WEBPACK_IMPORTED_MODULE_5__util_retrieve__["a" /* default */].firstNotNull(seriesModel.get('zoom'), 1));
          this._control.setOffset(seriesModel.get('offset') || [0, 0]);

          var mesh = this._pointsBuilder.getPointsMesh();
          mesh.off('mousemove', this._mousemoveHandler);
          mesh.off('mouseout', this._mouseOutHandler, this);
          api.getZr().off('click', this._clickHandler);

          this._pointsBuilder.highlightOnMouseover = true;
          if (seriesModel.get('focusNodeAdjacency')) {
              var focusNodeAdjacencyOn = seriesModel.get('focusNodeAdjacencyOn');
              if (focusNodeAdjacencyOn === 'click') {
                  // Remove default emphasis effect
                  api.getZr().on('click', this._clickHandler);
              }
              else if (focusNodeAdjacencyOn === 'mouseover') {
                  mesh.on('mousemove', this._mousemoveHandler, this);
                  mesh.on('mouseout', this._mouseOutHandler, this);

                  this._pointsBuilder.highlightOnMouseover = false;
              }
              else {
                  {
                      console.warn('Unkown focusNodeAdjacencyOn value \s' + focusNodeAdjacencyOn);
                  }
              }
          }

          // Reset
          this._lastMouseOverDataIndex = -1;
      },

      _clickHandler: function (e) {
          if (this._layouting) {
              return;
          }
          var dataIndex = this._pointsBuilder.getPointsMesh().dataIndex;
          if (dataIndex >= 0) {
              this._api.dispatchAction({
                  type: 'graphGLFocusNodeAdjacency',
                  seriesId: this._model.id,
                  dataIndex: dataIndex
              });
          }
          else {
              this._api.dispatchAction({
                  type: 'graphGLUnfocusNodeAdjacency',
                  seriesId: this._model.id
              });
          }
      },

      _mousemoveHandler: function (e) {
          if (this._layouting) {
              return;
          }
          var dataIndex = this._pointsBuilder.getPointsMesh().dataIndex;
          if (dataIndex >= 0) {
              if (dataIndex !== this._lastMouseOverDataIndex) {
                  this._api.dispatchAction({
                      type: 'graphGLFocusNodeAdjacency',
                      seriesId: this._model.id,
                      dataIndex: dataIndex
                  });
              }
          }
          else {
              this._mouseOutHandler(e);
          }

          this._lastMouseOverDataIndex = dataIndex;
      },

      _mouseOutHandler: function (e) {
          if (this._layouting) {
              return;
          }

          this._api.dispatchAction({
              type: 'graphGLUnfocusNodeAdjacency',
              seriesId: this._model.id
          });

          this._lastMouseOverDataIndex = -1;
      },

      _updateForceEdgesGeometry: function (edges, seriesModel) {
          var geometry = this._forceEdgesMesh.geometry;

          var edgeData = seriesModel.getEdgeData();
          var offset = 0;
          var layoutInstance = this._forceLayoutInstance;
          var vertexCount = edgeData.count() * 2;
          geometry.attributes.node.init(vertexCount);
          geometry.attributes.color.init(vertexCount);
          edgeData.each(function (idx) {
              var edge = edges[idx];
              geometry.attributes.node.set(offset, layoutInstance.getNodeUV(edge.node1));
              geometry.attributes.node.set(offset + 1, layoutInstance.getNodeUV(edge.node2));

              var color = edgeData.getItemVisual(edge.dataIndex, 'color');
              var colorArr = __WEBPACK_IMPORTED_MODULE_2__util_graphicGL__["a" /* default */].parseColor(color);
              colorArr[3] *= __WEBPACK_IMPORTED_MODULE_5__util_retrieve__["a" /* default */].firstNotNull(
                  edgeData.getItemVisual(edge.dataIndex, 'opacity'), 1
              );
              geometry.attributes.color.set(offset, colorArr);
              geometry.attributes.color.set(offset + 1, colorArr);

              offset += 2;
          });
          geometry.dirty();
      },

      _updateMeshLinesGeometry: function () {
          var edgeData = this._model.getEdgeData();
          var geometry = this._edgesMesh.geometry;
          var edgeData = this._model.getEdgeData();
          var points = this._model.getData().getLayout('points');

          geometry.resetOffset();
          geometry.setVertexCount(edgeData.count() * geometry.getLineVertexCount());
          geometry.setTriangleCount(edgeData.count() * geometry.getLineTriangleCount());

          var p0 = [];
          var p1 = [];

          var lineWidthQuery = ['lineStyle', 'width'];

          this._originalEdgeColors = new Float32Array(edgeData.count() * 4);
          this._edgeIndicesMap = new Float32Array(edgeData.count());
          edgeData.each(function (idx) {
              var edge = edgeData.graph.getEdgeByIndex(idx);
              var idx1 = edge.node1.dataIndex * 2;
              var idx2 = edge.node2.dataIndex * 2;
              p0[0] = points[idx1];
              p0[1] = points[idx1 + 1];
              p1[0] = points[idx2];
              p1[1] = points[idx2 + 1];

              var color = edgeData.getItemVisual(edge.dataIndex, 'color');
              var colorArr = __WEBPACK_IMPORTED_MODULE_2__util_graphicGL__["a" /* default */].parseColor(color);
              colorArr[3] *= __WEBPACK_IMPORTED_MODULE_5__util_retrieve__["a" /* default */].firstNotNull(edgeData.getItemVisual(edge.dataIndex, 'opacity'), 1);
              var itemModel = edgeData.getItemModel(edge.dataIndex);
              var lineWidth = __WEBPACK_IMPORTED_MODULE_5__util_retrieve__["a" /* default */].firstNotNull(itemModel.get(lineWidthQuery), 1) * this._api.getDevicePixelRatio();

              geometry.addLine(p0, p1, colorArr, lineWidth);

              for (var k = 0; k < 4; k++) {
                  this._originalEdgeColors[edge.dataIndex * 4 + k] = colorArr[k];
              }
              this._edgeIndicesMap[edge.dataIndex] = idx;
          }, this);

          geometry.dirty();
      },

      _updateForceNodesGeometry: function (nodeData) {
          var pointsMesh = this._pointsBuilder.getPointsMesh();
          var pos = [];
          for (var i = 0; i < nodeData.count(); i++) {
              this._forceLayoutInstance.getNodeUV(i, pos);
              pointsMesh.geometry.attributes.position.set(i, pos);
          }
          pointsMesh.geometry.dirty('position');
      },

      _initLayout: function (seriesModel, ecModel, api) {
          var layout = seriesModel.get('layout');
          var graph = seriesModel.getGraph();

          var boxLayoutOption = seriesModel.getBoxLayoutParams();
          var viewport = __WEBPACK_IMPORTED_MODULE_1_echarts_lib_util_layout___default.a.getLayoutRect(boxLayoutOption, {
              width: api.getWidth(),
              height: api.getHeight()
          });

          if (layout === 'force') {
              {
                  console.warn('Currently only forceAtlas2 layout supported.');
              }
              layout = 'forceAtlas2';
          }
          // Stop previous layout
          this.stopLayout(seriesModel, ecModel, api, {
              beforeLayout: true
          });

          var nodeData = seriesModel.getData();
          var edgeData = seriesModel.getData();
          if (layout === 'forceAtlas2') {
              var layoutModel = seriesModel.getModel('forceAtlas2');
              var layoutInstance = this._forceLayoutInstance;
              var nodes = [];
              var edges = [];

              var nodeDataExtent = nodeData.getDataExtent('value');
              var edgeDataExtent = edgeData.getDataExtent('value');

              var edgeWeightRange = __WEBPACK_IMPORTED_MODULE_5__util_retrieve__["a" /* default */].firstNotNull(layoutModel.get('edgeWeight'), 1.0);
              var nodeWeightRange = __WEBPACK_IMPORTED_MODULE_5__util_retrieve__["a" /* default */].firstNotNull(layoutModel.get('nodeWeight'), 1.0);
              if (typeof edgeWeightRange === 'number') {
                  edgeWeightRange = [edgeWeightRange, edgeWeightRange];
              }
              if (typeof nodeWeightRange === 'number') {
                  nodeWeightRange = [nodeWeightRange, nodeWeightRange];
              }

              var offset = 0;
              var nodesIndicesMap = {};

              var layoutPoints = new Float32Array(nodeData.count() * 2);
              graph.eachNode(function (node) {
                  var dataIndex = node.dataIndex;
                  var value = nodeData.get('value', dataIndex);
                  var x;
                  var y;
                  if (nodeData.hasItemOption) {
                      var itemModel = nodeData.getItemModel(dataIndex);
                      x = itemModel.get('x');
                      y = itemModel.get('y');
                  }
                  if (x == null) {
                      // Random in rectangle
                      x = viewport.x + Math.random() * viewport.width;
                      y = viewport.y + Math.random() * viewport.height;
                  }
                  layoutPoints[offset * 2] = x;
                  layoutPoints[offset * 2 + 1] = y;

                  nodesIndicesMap[node.id] = offset++;
                  var mass = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.number.linearMap(value, nodeDataExtent, nodeWeightRange);
                  if (isNaN(mass)) {
                      if (!isNaN(nodeWeightRange[0])) {
                          mass = nodeWeightRange[0];
                      }
                      else {
                          mass = 1;
                      }
                  }
                  nodes.push({
                      x: x, y: y, mass: mass, size: nodeData.getItemVisual(dataIndex, 'symbolSize')
                  });
              });
              nodeData.setLayout('points', layoutPoints);

              graph.eachEdge(function (edge) {
                  var dataIndex = edge.dataIndex;
                  var value = nodeData.get('value', dataIndex);
                  var weight = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.number.linearMap(value, edgeDataExtent, edgeWeightRange);
                  if (isNaN(weight)) {
                      if (!isNaN(edgeWeightRange[0])) {
                          weight = edgeWeightRange[0];
                      }
                      else {
                          weight = 1;
                      }
                  }
                  edges.push({
                      node1: nodesIndicesMap[edge.node1.id],
                      node2: nodesIndicesMap[edge.node2.id],
                      weight: weight,
                      dataIndex: dataIndex
                  });
              });
              if (!layoutInstance) {
                  var isGPU = layoutModel.get('GPU');
                  if (this._forceLayoutInstance) {
                      if ((isGPU && !(this._forceLayoutInstance instanceof __WEBPACK_IMPORTED_MODULE_6__ForceAtlas2GPU__["a" /* default */]))
                          || (!isGPU && !(this._forceLayoutInstance instanceof __WEBPACK_IMPORTED_MODULE_7__ForceAtlas2__["a" /* default */]))
                      ) {
                          // Mark to dispose
                          this._forceLayoutInstanceToDispose = this._forceLayoutInstance;
                      }
                  }
                  layoutInstance = this._forceLayoutInstance = isGPU
                      ? new __WEBPACK_IMPORTED_MODULE_6__ForceAtlas2GPU__["a" /* default */]()
                      : new __WEBPACK_IMPORTED_MODULE_7__ForceAtlas2__["a" /* default */]();
              }
              layoutInstance.initData(nodes, edges);
              layoutInstance.updateOption(layoutModel.option);

              // Update lines geometry after first layout;
              this._updateForceEdgesGeometry(layoutInstance.getEdges(), seriesModel);
              this._updatePositionTexture();

              api.dispatchAction({
                  type: 'graphGLStartLayout',
                  from: this.uid
              });
          }
          else {
              var layoutPoints = new Float32Array(nodeData.count() * 2);
              var offset = 0;
              graph.eachNode(function (node) {
                  var dataIndex = node.dataIndex;
                  var x;
                  var y;
                  if (nodeData.hasItemOption) {
                      var itemModel = nodeData.getItemModel(dataIndex);
                      x = itemModel.get('x');
                      y = itemModel.get('y');
                  }
                  layoutPoints[offset++] = x;
                  layoutPoints[offset++] = y;
              });
              nodeData.setLayout('points', layoutPoints);

              this._updateAfterLayout(seriesModel, ecModel, api);
          }
      },

      _updatePositionTexture: function () {
          var positionTex = this._forceLayoutInstance.getNodePositionTexture();
          this._pointsBuilder.setPositionTexture(positionTex);
          this._forceEdgesMesh.material.set('positionTex', positionTex);
      },

      startLayout: function (seriesModel, ecModel, api, payload) {
          if (payload && payload.from != null && payload.from !== this.uid) {
              return;
          }

          var viewGL = this.viewGL;
          var api = this._api;
          var layoutInstance = this._forceLayoutInstance;
          var data = this._model.getData();
          var layoutModel = this._model.getModel('forceAtlas2');

          if (!layoutInstance) {
              {
                  console.error('None layout don\'t have startLayout action');
              }
              return;
          }

          this.groupGL.remove(this._edgesMesh);
          this.groupGL.add(this._forceEdgesMesh);

          if (!this._forceLayoutInstance) {
              return;
          }

          this._updateForceNodesGeometry(seriesModel.getData());
          this._pointsBuilder.hideLabels();

          var self = this;
          var layoutId = this._layoutId = globalLayoutId++;
          var maxSteps = layoutModel.getShallow('maxSteps');
          var steps = layoutModel.getShallow('steps');
          var stepsCount = 0;
          var syncStepCount = Math.max(steps * 2, 20);
          var doLayout = function (layoutId) {
              if (layoutId !== self._layoutId) {
                  return;
              }
              if (layoutInstance.isFinished(maxSteps)) {
                  api.dispatchAction({
                      type: 'graphGLStopLayout',
                      from: self.uid
                  });
                  api.dispatchAction({
                      type: 'graphGLFinishLayout',
                      points: data.getLayout('points'),
                      from: self.uid
                  });
                  return;
              }

              layoutInstance.update(viewGL.layer.renderer, steps, function () {
                  self._updatePositionTexture();
                  // PENDING Performance.
                  stepsCount += steps;
                  // Sync posiiton every 20 steps.
                  if (stepsCount >= syncStepCount) {
                      self._syncNodePosition(seriesModel);
                      stepsCount = 0;
                  }
                  // Position texture will been swapped. set every time.
                  api.getZr().refresh();

                  __WEBPACK_IMPORTED_MODULE_8_zrender_lib_animation_requestAnimationFrame___default()(function () {
                      doLayout(layoutId);
                  });
              });
          };

          __WEBPACK_IMPORTED_MODULE_8_zrender_lib_animation_requestAnimationFrame___default()(function () {
              if (self._forceLayoutInstanceToDispose) {
                  self._forceLayoutInstanceToDispose.dispose(viewGL.layer.renderer);
                  self._forceLayoutInstanceToDispose = null;
              }
              doLayout(layoutId);
          });

          this._layouting = true;
      },

      stopLayout: function (seriesModel, ecModel, api, payload) {
          if (payload && payload.from != null && payload.from !== this.uid) {
              return;
          }

          this._layoutId = 0;
          this.groupGL.remove(this._forceEdgesMesh);
          this.groupGL.add(this._edgesMesh);

          if (!this._forceLayoutInstance) {
              return;
          }

          if (!this.viewGL.layer) {
              return;
          }

          if (!(payload && payload.beforeLayout)) {
              this._syncNodePosition(seriesModel);
              this._updateAfterLayout(seriesModel, ecModel, api);
          }

          this._api.getZr().refresh();

          this._layouting = false;
      },

      _syncNodePosition: function (seriesModel) {
          var points = this._forceLayoutInstance.getNodePosition(this.viewGL.layer.renderer);
          seriesModel.getData().setLayout('points', points);

          seriesModel.setNodePosition(points);
      },

      _updateAfterLayout: function (seriesModel, ecModel, api) {
          this._updateMeshLinesGeometry();

          this._pointsBuilder.removePositionTexture();

          this._pointsBuilder.updateLayout(seriesModel, ecModel, api);

          this._pointsBuilder.updateView(this.viewGL.camera);

          this._pointsBuilder.updateLabels();

          this._pointsBuilder.showLabels();

      },

      focusNodeAdjacency: function (seriesModel, ecModel, api, payload) {

          var data = this._model.getData();

          this._downplayAll();

          var dataIndex = payload.dataIndex;

          var graph = data.graph;

          var focusNodes = [];
          var node = graph.getNodeByIndex(dataIndex);
          focusNodes.push(node);
          node.edges.forEach(function (edge) {
              if (edge.dataIndex < 0) {
                  return;
              }
              edge.node1 !== node && focusNodes.push(edge.node1);
              edge.node2 !== node && focusNodes.push(edge.node2);
          }, this);

          this._pointsBuilder.fadeOutAll(0.05);
          this._fadeOutEdgesAll(0.05);

          focusNodes.forEach(function (node) {
              this._pointsBuilder.highlight(data, node.dataIndex);
          }, this);

          this._pointsBuilder.updateLabels(focusNodes.map(function (node) {
              return node.dataIndex;
          }));

          var focusEdges = [];
          node.edges.forEach(function (edge) {
              if (edge.dataIndex >= 0) {
                  this._highlightEdge(edge.dataIndex);
                  focusEdges.push(edge);
              }
          }, this);

          this._focusNodes = focusNodes;
          this._focusEdges = focusEdges;
      },

      unfocusNodeAdjacency: function (seriesModel, ecModel, api, payload) {

          this._downplayAll();

          this._pointsBuilder.fadeInAll();
          this._fadeInEdgesAll();

          this._pointsBuilder.updateLabels();
      },

      _highlightEdge: function (dataIndex) {
          var itemModel = this._model.getEdgeData().getItemModel(dataIndex);
          var emphasisColor =  __WEBPACK_IMPORTED_MODULE_2__util_graphicGL__["a" /* default */].parseColor(itemModel.get('emphasis.lineStyle.color') || itemModel.get('lineStyle.color'));
          var emphasisOpacity = __WEBPACK_IMPORTED_MODULE_5__util_retrieve__["a" /* default */].firstNotNull(itemModel.get('emphasis.lineStyle.opacity'), itemModel.get('lineStyle.opacity'), 1);
          emphasisColor[3] *= emphasisOpacity;

          this._edgesMesh.geometry.setItemColor(this._edgeIndicesMap[dataIndex], emphasisColor);
      },

      _downplayAll: function () {
          if (this._focusNodes) {
              this._focusNodes.forEach(function (node) {
                  this._pointsBuilder.downplay(this._model.getData(), node.dataIndex);
              }, this);
          }
          if (this._focusEdges) {
              this._focusEdges.forEach(function (edge) {
                  this._downplayEdge(edge.dataIndex);
              }, this);
          }
      },

      _downplayEdge: function (dataIndex) {
          var color = this._getColor(dataIndex, []);
          this._edgesMesh.geometry.setItemColor(this._edgeIndicesMap[dataIndex], color);
      },

      _setEdgeFade: (function () {
          var color = [];
          return function (dataIndex, percent) {
              this._getColor(dataIndex, color);
              color[3] *= percent;
              this._edgesMesh.geometry.setItemColor(this._edgeIndicesMap[dataIndex], color);
          };
      })(),

      _getColor: function (dataIndex, out) {
          for (var i = 0; i < 4; i++) {
              out[i] = this._originalEdgeColors[dataIndex * 4 + i];
          }
          return out;
      },

      _fadeOutEdgesAll: function (percent) {
          var graph = this._model.getData().graph;

          graph.eachEdge(function (edge) {
              this._setEdgeFade(edge.dataIndex, percent);
          }, this);
      },

      _fadeInEdgesAll: function () {
          this._fadeOutEdgesAll(1);
      },

      _updateCamera: function (seriesModel, api) {
          this.viewGL.setViewport(0, 0, api.getWidth(), api.getHeight(), api.getDevicePixelRatio());
          var camera = this.viewGL.camera;
          var nodeData = seriesModel.getData();
          var points = nodeData.getLayout('points');
          var min = vec2.create(Infinity, Infinity);
          var max = vec2.create(-Infinity, -Infinity);
          var pt = [];
          for (var i = 0; i < points.length;) {
              pt[0] = points[i++];
              pt[1] = points[i++];
              vec2.min(min, min, pt);
              vec2.max(max, max, pt);
          }
          var cy = (max[1] + min[1]) / 2;
          var cx = (max[0] + min[0]) / 2;
          // Only fit the camera when graph is not in the center.
          // PENDING
          if (cx > camera.left && cx < camera.right
              && cy < camera.bottom && cy > camera.top
          ) {
              return;
          }

          // Scale a bit
          var width = Math.max(max[0] - min[0], 10);
          // Keep aspect
          var height = width / api.getWidth() * api.getHeight();
          width *= 1.4;
          height *= 1.4;
          min[0] -= width * 0.2;

          camera.left = min[0];
          camera.top = cy - height / 2;
          camera.bottom = cy + height / 2;
          camera.right = width + min[0];
          camera.near = 0;
          camera.far = 100;
      },

      dispose: function () {
          var renderer = this.viewGL.layer.renderer;
          if (this._forceLayoutInstance) {
              this._forceLayoutInstance.dispose(renderer);
          }
          this.groupGL.removeAll();

          // Stop layout.
          this._layoutId = -1;
      },

      remove: function () {
          this.groupGL.removeAll();
          this._control.dispose();
      }
  });

  /***/ }),
  /* 273 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__ = __webpack_require__(1);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_claygl_src_compositor_Pass__ = __webpack_require__(15);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_claygl_src_FrameBuffer__ = __webpack_require__(10);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__forceAtlas2_glsl_js__ = __webpack_require__(274);






  __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Shader.import(__WEBPACK_IMPORTED_MODULE_4__forceAtlas2_glsl_js__["a" /* default */]);

  var defaultConfigs = {
      repulsionByDegree: true,
      linLogMode: false,

      strongGravityMode: false,
      gravity: 1.0,

      scaling: 1.0,

      edgeWeightInfluence: 1.0,

      jitterTolerence: 0.1,

      preventOverlap: false,

      dissuadeHubs: false,

      gravityCenter: null
  };

  function ForceAtlas2GPU(options) {

      var textureOpt = {
          type: __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Texture.FLOAT,
          minFilter: __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Texture.NEAREST,
          magFilter: __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Texture.NEAREST
      };

      this._positionSourceTex = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Texture2D(textureOpt);
      this._positionSourceTex.flipY = false;

      this._positionTex = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Texture2D(textureOpt);
      this._positionPrevTex = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Texture2D(textureOpt);
      this._forceTex = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Texture2D(textureOpt);
      this._forcePrevTex = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Texture2D(textureOpt);

      this._weightedSumTex = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Texture2D(textureOpt);
      this._weightedSumTex.width = this._weightedSumTex.height = 1;

      this._globalSpeedTex = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Texture2D(textureOpt);
      this._globalSpeedPrevTex = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Texture2D(textureOpt);
      this._globalSpeedTex.width = this._globalSpeedTex.height = 1;
      this._globalSpeedPrevTex.width = this._globalSpeedPrevTex.height = 1;

      this._nodeRepulsionPass = new __WEBPACK_IMPORTED_MODULE_2_claygl_src_compositor_Pass__["a" /* default */]({
          fragment: __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Shader.source('ecgl.forceAtlas2.updateNodeRepulsion')
      });
      this._positionPass = new __WEBPACK_IMPORTED_MODULE_2_claygl_src_compositor_Pass__["a" /* default */]({
          fragment: __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Shader.source('ecgl.forceAtlas2.updatePosition')
      });
      this._globalSpeedPass = new __WEBPACK_IMPORTED_MODULE_2_claygl_src_compositor_Pass__["a" /* default */]({
          fragment: __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Shader.source('ecgl.forceAtlas2.calcGlobalSpeed')
      });
      this._copyPass = new __WEBPACK_IMPORTED_MODULE_2_claygl_src_compositor_Pass__["a" /* default */]({
          fragment: __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Shader.source('clay.compositor.output')
      });

      var additiveBlend = function (gl) {
          gl.blendEquation(gl.FUNC_ADD);
          gl.blendFunc(gl.ONE, gl.ONE);
      };
      this._edgeForceMesh = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Mesh({
          geometry: new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Geometry({
              attributes: {
                  node1: new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Geometry.Attribute('node1', 'float', 2),
                  node2: new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Geometry.Attribute('node2', 'float', 2),
                  weight: new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Geometry.Attribute('weight', 'float', 1)
              },
              dynamic: true,
              mainAttribute: 'node1'
          }),
          material: new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Material({
              transparent: true,
              shader: __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].createShader('ecgl.forceAtlas2.updateEdgeAttraction'),
              blend: additiveBlend,
              depthMask: false,
              depthText: false
          }),
          mode: __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Mesh.POINTS
      });
      this._weightedSumMesh = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Mesh({
          geometry: new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Geometry({
              attributes: {
                  node: new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Geometry.Attribute('node', 'float', 2)
              },
              dynamic: true,
              mainAttribute: 'node'
          }),
          material: new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Material({
              transparent: true,
              shader: __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].createShader('ecgl.forceAtlas2.calcWeightedSum'),
              blend: additiveBlend,
              depthMask: false,
              depthText: false
          }),
          mode: __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Mesh.POINTS
      });

      this._framebuffer = new __WEBPACK_IMPORTED_MODULE_3_claygl_src_FrameBuffer__["a" /* default */]({
          depthBuffer: false
      });

      this._dummyCamera = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].OrthographicCamera({
          left: -1, right: 1,
          top: 1, bottom: -1,
          near: 0, far: 100
      });

      this._globalSpeed = 0;
  }

  ForceAtlas2GPU.prototype.updateOption = function (options) {

      // Default config
      for (var name in defaultConfigs) {
          this[name] = defaultConfigs[name];
      }

      // Config according to data scale
      var nNodes = this._nodes.length;
      if (nNodes > 50000) {
          this.jitterTolerence = 10;
      }
      else if (nNodes > 5000) {
          this.jitterTolerence = 1;
      }
      else {
          this.jitterTolerence = 0.1;
      }

      if (nNodes > 100) {
          this.scaling = 2.0;
      }
      else {
          this.scaling = 10.0;
      }

      // this.edgeWeightInfluence = 1;
      // this.gravity = 1;
      // this.strongGravityMode = false;
      if (options) {
          for (var name in defaultConfigs) {
              if (options[name] != null) {
                  this[name] = options[name];
              }
          }
      }

      if (this.repulsionByDegree) {
          var positionBuffer = this._positionSourceTex.pixels;

          for (var i = 0; i < this._nodes.length; i++) {
              positionBuffer[i * 4 + 2] = (this._nodes[i].degree || 0) + 1;
          }
      }
  };

  ForceAtlas2GPU.prototype._updateGravityCenter = function (options) {
      var nodes = this._nodes;
      var edges = this._edges;

      if (!this.gravityCenter) {
          var min = [Infinity, Infinity];
          var max = [-Infinity, -Infinity];
          for (var i = 0; i < nodes.length; i++) {
              min[0] = Math.min(nodes[i].x, min[0]);
              min[1] = Math.min(nodes[i].y, min[1]);
              max[0] = Math.max(nodes[i].x, max[0]);
              max[1] = Math.max(nodes[i].y, max[1]);
          }

          this._gravityCenter = [(min[0] + max[0]) * 0.5, (min[1] + max[1]) * 0.5];
      }
      else {
          this._gravityCenter = this.gravityCenter;
      }
      // Update inDegree, outDegree
      for (var i = 0; i < edges.length; i++) {
          var node1 = edges[i].node1;
          var node2 = edges[i].node2;

          nodes[node1].degree = (nodes[node1].degree || 0) + 1;
          nodes[node2].degree = (nodes[node2].degree || 0) + 1;
      }
  };
  /**
   * @param {Array.<Object>} [{ x, y, mass }] nodes
   * @param {Array.<Object>} [{ node1, node2, weight }] edges
   */
  ForceAtlas2GPU.prototype.initData = function (nodes, edges) {

      this._nodes = nodes;
      this._edges = edges;

      this._updateGravityCenter();

      var textureWidth = Math.ceil(Math.sqrt(nodes.length));
      var textureHeight = textureWidth;
      var positionBuffer = new Float32Array(textureWidth * textureHeight * 4);

      this._resize(textureWidth, textureHeight);

      var offset = 0;
      for (var i = 0; i < nodes.length; i++) {
          var node = nodes[i];
          positionBuffer[offset++] = node.x || 0;
          positionBuffer[offset++] = node.y || 0;
          positionBuffer[offset++] = node.mass || 1;
          positionBuffer[offset++] = node.size || 1;
      }
      this._positionSourceTex.pixels = positionBuffer;

      var edgeGeometry = this._edgeForceMesh.geometry;
      var edgeLen = edges.length;
      edgeGeometry.attributes.node1.init(edgeLen * 2);
      edgeGeometry.attributes.node2.init(edgeLen * 2);
      edgeGeometry.attributes.weight.init(edgeLen * 2);

      var uv = [];

      for (var i = 0; i < edges.length; i++) {
          var attributes = edgeGeometry.attributes;
          var weight = edges[i].weight;
          if (weight == null) {
              weight = 1;
          }
          // Two way.
          attributes.node1.set(i, this.getNodeUV(edges[i].node1, uv));
          attributes.node2.set(i, this.getNodeUV(edges[i].node2, uv));
          attributes.weight.set(i, weight);

          attributes.node1.set(i + edgeLen, this.getNodeUV(edges[i].node2, uv));
          attributes.node2.set(i + edgeLen, this.getNodeUV(edges[i].node1, uv));
          attributes.weight.set(i + edgeLen, weight);
      }

      var weigtedSumGeo = this._weightedSumMesh.geometry;
      weigtedSumGeo.attributes.node.init(nodes.length);
      for (var i = 0; i < nodes.length; i++) {
          weigtedSumGeo.attributes.node.set(i, this.getNodeUV(i, uv));
      }

      edgeGeometry.dirty();
      weigtedSumGeo.dirty();

      this._nodeRepulsionPass.material.define('fragment', 'NODE_COUNT', nodes.length);
      this._nodeRepulsionPass.material.setUniform('textureSize', [textureWidth, textureHeight]);

      this._inited = false;

      this._frame = 0;
  };

  ForceAtlas2GPU.prototype.getNodes = function () {
      return this._nodes;
  };
  ForceAtlas2GPU.prototype.getEdges = function () {
      return this._edges;
  };

  ForceAtlas2GPU.prototype.step = function (renderer) {
      if (!this._inited) {
          this._initFromSource(renderer);
          this._inited = true;
      }

      this._frame++;

      this._framebuffer.attach(this._forceTex);
      this._framebuffer.bind(renderer);
      var nodeRepulsionPass = this._nodeRepulsionPass;
      // Calc node repulsion, gravity
      nodeRepulsionPass.setUniform('strongGravityMode', this.strongGravityMode);
      nodeRepulsionPass.setUniform('gravity', this.gravity);
      nodeRepulsionPass.setUniform('gravityCenter', this._gravityCenter);
      nodeRepulsionPass.setUniform('scaling', this.scaling);
      nodeRepulsionPass.setUniform('preventOverlap', this.preventOverlap);
      nodeRepulsionPass.setUniform('positionTex', this._positionPrevTex);
      nodeRepulsionPass.render(renderer);

      // Calc edge attraction force
      var edgeForceMesh = this._edgeForceMesh;
      edgeForceMesh.material.set('linLogMode', this.linLogMode);
      edgeForceMesh.material.set('edgeWeightInfluence', this.edgeWeightInfluence);
      edgeForceMesh.material.set('preventOverlap', this.preventOverlap);
      edgeForceMesh.material.set('positionTex', this._positionPrevTex);
      renderer.gl.enable(renderer.gl.BLEND);
      renderer.renderPass([edgeForceMesh], this._dummyCamera);

      // Calc weighted sum.
      this._framebuffer.attach(this._weightedSumTex);
      renderer.gl.clearColor(0, 0, 0, 0);
      renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT);
      renderer.gl.enable(renderer.gl.BLEND);
      var weightedSumMesh = this._weightedSumMesh;
      weightedSumMesh.material.set('positionTex', this._positionPrevTex);
      weightedSumMesh.material.set('forceTex', this._forceTex);
      weightedSumMesh.material.set('forcePrevTex', this._forcePrevTex);
      renderer.renderPass([weightedSumMesh], this._dummyCamera);

      // Calc global speed.
      this._framebuffer.attach(this._globalSpeedTex);
      var globalSpeedPass = this._globalSpeedPass;
      globalSpeedPass.setUniform('globalSpeedPrevTex', this._globalSpeedPrevTex);
      globalSpeedPass.setUniform('weightedSumTex', this._weightedSumTex);
      globalSpeedPass.setUniform('jitterTolerence', this.jitterTolerence);
      renderer.gl.disable(renderer.gl.BLEND);
      globalSpeedPass.render(renderer);

      // Update position.
      var positionPass = this._positionPass;
      this._framebuffer.attach(this._positionTex);
      positionPass.setUniform('globalSpeedTex', this._globalSpeedTex);
      positionPass.setUniform('positionTex', this._positionPrevTex);
      positionPass.setUniform('forceTex', this._forceTex);
      positionPass.setUniform('forcePrevTex', this._forcePrevTex);
      positionPass.render(renderer);

      this._framebuffer.unbind(renderer);

      this._swapTexture();
  };

  ForceAtlas2GPU.prototype.update = function (renderer, steps, cb) {
      if (steps == null) {
          steps = 1;
      }
      steps = Math.max(steps, 1);

      for (var i = 0; i < steps; i++) {
          this.step(renderer);
      }

      cb && cb();
  };

  ForceAtlas2GPU.prototype.getNodePositionTexture = function () {
      return this._inited
          // Texture already been swapped.
          ? this._positionPrevTex
          : this._positionSourceTex;
  };

  ForceAtlas2GPU.prototype.getNodeUV = function (nodeIndex, uv) {
      uv = uv || [];
      var textureWidth = this._positionTex.width;
      var textureHeight = this._positionTex.height;
      uv[0] = (nodeIndex % textureWidth) / (textureWidth - 1);
      uv[1] = Math.floor(nodeIndex / textureWidth) / (textureHeight - 1) || 0;
      return uv;
  };

  ForceAtlas2GPU.prototype.getNodePosition = function (renderer, out) {
      var positionArr = this._positionArr;
      var width = this._positionTex.width;
      var height = this._positionTex.height;
      var size = width * height;
      if (!positionArr || positionArr.length !== size * 4) {
          positionArr = this._positionArr = new Float32Array(size * 4);
      }
      this._framebuffer.bind(renderer);
      this._framebuffer.attach(this._positionPrevTex);
      renderer.gl.readPixels(
          0, 0, width, height,
          renderer.gl.RGBA, renderer.gl.FLOAT,
          positionArr
      );
      this._framebuffer.unbind(renderer);
      if (!out) {
          out = new Float32Array(this._nodes.length * 2);
      }
      for (var i = 0; i < this._nodes.length; i++) {
          out[i * 2] = positionArr[i * 4];
          out[i * 2 + 1] = positionArr[i * 4 + 1];
      }
      return out;
  };

  ForceAtlas2GPU.prototype.getTextureData = function (renderer, textureName) {
      var tex = this['_' + textureName + 'Tex'];
      var width = tex.width;
      var height = tex.height;
      this._framebuffer.bind(renderer);
      this._framebuffer.attach(tex);
      var arr = new Float32Array(width * height * 4);
      renderer.gl.readPixels(0, 0, width, height, renderer.gl.RGBA, renderer.gl.FLOAT, arr);
      this._framebuffer.unbind(renderer);
      return arr;
  };

  ForceAtlas2GPU.prototype.getTextureSize = function () {
      return {
          width: this._positionTex.width,
          height: this._positionTex.height
      };
  };

  ForceAtlas2GPU.prototype.isFinished = function (maxSteps) {
      return this._frame > maxSteps;
  };

  ForceAtlas2GPU.prototype._swapTexture = function () {
      var tmp = this._positionPrevTex;
      this._positionPrevTex = this._positionTex;
      this._positionTex = tmp;

      var tmp = this._forcePrevTex;
      this._forcePrevTex = this._forceTex;
      this._forceTex = tmp;

      var tmp = this._globalSpeedPrevTex;
      this._globalSpeedPrevTex = this._globalSpeedTex;
      this._globalSpeedTex = tmp;
  };

  ForceAtlas2GPU.prototype._initFromSource = function (renderer) {
      this._framebuffer.attach(this._positionPrevTex);
      this._framebuffer.bind(renderer);
      this._copyPass.setUniform('texture', this._positionSourceTex);
      this._copyPass.render(renderer);

      renderer.gl.clearColor(0, 0, 0, 0);
      this._framebuffer.attach(this._forcePrevTex);
      renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT);
      this._framebuffer.attach(this._globalSpeedPrevTex);
      renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT);

      this._framebuffer.unbind(renderer);
  };

  ForceAtlas2GPU.prototype._resize = function (width, height) {
      ['_positionSourceTex', '_positionTex', '_positionPrevTex', '_forceTex', '_forcePrevTex'].forEach(function (texName) {
          this[texName].width = width;
          this[texName].height = height;
          this[texName].dirty();
      }, this);
  };

  ForceAtlas2GPU.prototype.dispose = function (renderer) {
      this._framebuffer.dispose(renderer);

      this._copyPass.dispose(renderer);
      this._nodeRepulsionPass.dispose(renderer);
      this._positionPass.dispose(renderer);
      this._globalSpeedPass.dispose(renderer);

      this._edgeForceMesh.geometry.dispose(renderer);
      this._weightedSumMesh.geometry.dispose(renderer);

      this._positionSourceTex.dispose(renderer);
      this._positionTex.dispose(renderer);
      this._positionPrevTex.dispose(renderer);
      this._forceTex.dispose(renderer);
      this._forcePrevTex.dispose(renderer);
      this._weightedSumTex.dispose(renderer);
      this._globalSpeedTex.dispose(renderer);
      this._globalSpeedPrevTex.dispose(renderer);
  };

  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.ForceAtlas2GPU = ForceAtlas2GPU;

  /* harmony default export */ __webpack_exports__["a"] = (ForceAtlas2GPU);

  /***/ }),
  /* 274 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("@export ecgl.forceAtlas2.updateNodeRepulsion\n\n#define NODE_COUNT 0\n\nuniform sampler2D positionTex;\n\nuniform vec2 textureSize;\nuniform float gravity;\nuniform float scaling;\nuniform vec2 gravityCenter;\n\nuniform bool strongGravityMode;\nuniform bool preventOverlap;\n\nvarying vec2 v_Texcoord;\n\nvoid main() {\n\n vec4 n0 = texture2D(positionTex, v_Texcoord);\n\n vec2 force = vec2(0.0);\n for (int i = 0; i < NODE_COUNT; i++) {\n vec2 uv = vec2(\n mod(float(i), textureSize.x) / (textureSize.x - 1.0),\n floor(float(i) / textureSize.x) / (textureSize.y - 1.0)\n );\n vec4 n1 = texture2D(positionTex, uv);\n\n vec2 dir = n0.xy - n1.xy;\n float d2 = dot(dir, dir);\n\n if (d2 > 0.0) {\n float factor = 0.0;\n if (preventOverlap) {\n float d = sqrt(d2);\n d = d - n0.w - n1.w;\n if (d > 0.0) {\n factor = scaling * n0.z * n1.z / (d * d);\n }\n else if (d < 0.0) {\n factor = scaling * 100.0 * n0.z * n1.z;\n }\n }\n else {\n factor = scaling * n0.z * n1.z / d2;\n }\n force += dir * factor;\n }\n }\n\n vec2 dir = gravityCenter - n0.xy;\n float d = 1.0;\n if (!strongGravityMode) {\n d = length(dir);\n }\n\n force += dir * n0.z * gravity / (d + 1.0);\n\n gl_FragColor = vec4(force, 0.0, 1.0);\n}\n@end\n\n@export ecgl.forceAtlas2.updateEdgeAttraction.vertex\n\nattribute vec2 node1;\nattribute vec2 node2;\nattribute float weight;\n\nuniform sampler2D positionTex;\nuniform float edgeWeightInfluence;\nuniform bool preventOverlap;\nuniform bool linLogMode;\n\nuniform vec2 windowSize: WINDOW_SIZE;\n\nvarying vec2 v_Force;\n\nvoid main() {\n\n vec4 n0 = texture2D(positionTex, node1);\n vec4 n1 = texture2D(positionTex, node2);\n\n vec2 dir = n1.xy - n0.xy;\n float d = length(dir);\n float w;\n if (edgeWeightInfluence == 0.0) {\n w = 1.0;\n }\n else if (edgeWeightInfluence == 1.0) {\n w = weight;\n }\n else {\n w = pow(weight, edgeWeightInfluence);\n }\n vec2 offset = vec2(1.0 / windowSize.x, 1.0 / windowSize.y);\n vec2 scale = vec2((windowSize.x - 1.0) / windowSize.x, (windowSize.y - 1.0) / windowSize.y);\n vec2 pos = node1 * scale * 2.0 - 1.0;\n gl_Position = vec4(pos + offset, 0.0, 1.0);\n gl_PointSize = 1.0;\n\n float factor;\n if (preventOverlap) {\n d = d - n1.w - n0.w;\n }\n if (d <= 0.0) {\n v_Force = vec2(0.0);\n return;\n }\n\n if (linLogMode) {\n factor = w * log(d) / d;\n }\n else {\n factor = w;\n }\n v_Force = dir * factor;\n}\n@end\n\n@export ecgl.forceAtlas2.updateEdgeAttraction.fragment\n\nvarying vec2 v_Force;\n\nvoid main() {\n gl_FragColor = vec4(v_Force, 0.0, 0.0);\n}\n@end\n\n@export ecgl.forceAtlas2.calcWeightedSum.vertex\n\nattribute vec2 node;\n\nvarying vec2 v_NodeUv;\n\nvoid main() {\n\n v_NodeUv = node;\n gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n gl_PointSize = 1.0;\n}\n@end\n\n@export ecgl.forceAtlas2.calcWeightedSum.fragment\n\nvarying vec2 v_NodeUv;\n\nuniform sampler2D positionTex;\nuniform sampler2D forceTex;\nuniform sampler2D forcePrevTex;\n\nvoid main() {\n vec2 force = texture2D(forceTex, v_NodeUv).rg;\n vec2 forcePrev = texture2D(forcePrevTex, v_NodeUv).rg;\n\n float mass = texture2D(positionTex, v_NodeUv).z;\n float swing = length(force - forcePrev) * mass;\n float traction = length(force + forcePrev) * 0.5 * mass;\n\n gl_FragColor = vec4(swing, traction, 0.0, 0.0);\n}\n@end\n\n@export ecgl.forceAtlas2.calcGlobalSpeed\n\nuniform sampler2D globalSpeedPrevTex;\nuniform sampler2D weightedSumTex;\nuniform float jitterTolerence;\n\nvoid main() {\n vec2 weightedSum = texture2D(weightedSumTex, vec2(0.5)).xy;\n float prevGlobalSpeed = texture2D(globalSpeedPrevTex, vec2(0.5)).x;\n float globalSpeed = jitterTolerence * jitterTolerence\n * weightedSum.y / weightedSum.x;\n if (prevGlobalSpeed > 0.0) {\n globalSpeed = min(globalSpeed / prevGlobalSpeed, 1.5) * prevGlobalSpeed;\n }\n gl_FragColor = vec4(globalSpeed, 0.0, 0.0, 1.0);\n}\n@end\n\n@export ecgl.forceAtlas2.updatePosition\n\nuniform sampler2D forceTex;\nuniform sampler2D forcePrevTex;\nuniform sampler2D positionTex;\nuniform sampler2D globalSpeedTex;\n\nvarying vec2 v_Texcoord;\n\nvoid main() {\n vec2 force = texture2D(forceTex, v_Texcoord).xy;\n vec2 forcePrev = texture2D(forcePrevTex, v_Texcoord).xy;\n vec4 node = texture2D(positionTex, v_Texcoord);\n\n float globalSpeed = texture2D(globalSpeedTex, vec2(0.5)).r;\n float swing = length(force - forcePrev);\n float speed = 0.1 * globalSpeed / (0.1 + globalSpeed * sqrt(swing));\n\n float df = length(force);\n if (df > 0.0) {\n speed = min(df * speed, 10.0) / df;\n\n gl_FragColor = vec4(node.xy + speed * force, node.zw);\n }\n else {\n gl_FragColor = node;\n }\n}\n@end\n\n@export ecgl.forceAtlas2.edges.vertex\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\n\nattribute vec2 node;\nattribute vec4 a_Color : COLOR;\nvarying vec4 v_Color;\n\nuniform sampler2D positionTex;\n\nvoid main()\n{\n gl_Position = worldViewProjection * vec4(\n texture2D(positionTex, node).xy, -10.0, 1.0\n );\n v_Color = a_Color;\n}\n@end\n\n@export ecgl.forceAtlas2.edges.fragment\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\nvarying vec4 v_Color;\nvoid main() {\n gl_FragColor = color * v_Color;\n}\n@end");


  /***/ }),
  /* 275 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_claygl_src_Texture2D__ = __webpack_require__(5);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_claygl_src_Texture__ = __webpack_require__(4);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__forceAtlas2Worker_js__ = __webpack_require__(276);



  var workerUrl = __WEBPACK_IMPORTED_MODULE_2__forceAtlas2Worker_js__["a" /* default */].toString();
  workerUrl = workerUrl.slice(workerUrl.indexOf('{') + 1, workerUrl.lastIndexOf('}'));

  var defaultConfigs = {

      barnesHutOptimize: true,
      barnesHutTheta: 1.5,

      repulsionByDegree: true,
      linLogMode: false,

      strongGravityMode: false,
      gravity: 1.0,

      scaling: 1.0,

      edgeWeightInfluence: 1.0,

      jitterTolerence: 0.1,

      preventOverlap: false,

      dissuadeHubs: false,

      gravityCenter: null
  };

  var ForceAtlas2 = function (options) {

      for (var name in defaultConfigs) {
          this[name] = defaultConfigs[name];
      }

      if (options) {
          for (var name in options) {
              this[name] = options[name];
          }
      }

      this._nodes = [];
      this._edges = [];

      this._disposed = false;

      this._positionTex = new __WEBPACK_IMPORTED_MODULE_0_claygl_src_Texture2D__["a" /* default */]({
          type: __WEBPACK_IMPORTED_MODULE_1_claygl_src_Texture__["a" /* default */].FLOAT,
          flipY: false,
          minFilter: __WEBPACK_IMPORTED_MODULE_1_claygl_src_Texture__["a" /* default */].NEAREST,
          magFilter: __WEBPACK_IMPORTED_MODULE_1_claygl_src_Texture__["a" /* default */].NEAREST
      });
  };

  ForceAtlas2.prototype.initData = function (nodes, edges) {

      var bb = new Blob([workerUrl]);
      var blobURL = window.URL.createObjectURL(bb);

      this._worker = new Worker(blobURL);

      this._worker.onmessage = this._$onupdate.bind(this);

      this._nodes = nodes;
      this._edges = edges;
      this._frame = 0;

      var nNodes = nodes.length;
      var nEdges = edges.length;

      var positionArr = new Float32Array(nNodes * 2);
      var massArr = new Float32Array(nNodes);
      var sizeArr = new Float32Array(nNodes);

      var edgeArr = new Float32Array(nEdges * 2);
      var edgeWeightArr = new Float32Array(nEdges);

      for (var i = 0; i < nodes.length; i++) {
          var node = nodes[i];

          positionArr[i * 2] = node.x;
          positionArr[i * 2 + 1] = node.y;

          massArr[i] = node.mass == null ? 1 : node.mass;
          sizeArr[i] = node.size == null ? 1 : node.size;
      }

      for (var i = 0; i < edges.length; i++) {
          var edge = edges[i];

          var source = edge.node1;
          var target = edge.node2;

          edgeArr[i * 2] = source;
          edgeArr[i * 2 + 1] = target;

          edgeWeightArr[i] = edge.weight == null ? 1 : edge.weight;
      }


      var textureWidth = Math.ceil(Math.sqrt(nodes.length));
      var textureHeight = textureWidth;
      var pixels = new Float32Array(textureWidth * textureHeight * 4);
      var positionTex = this._positionTex;
      positionTex.width = textureWidth;
      positionTex.height = textureHeight;
      positionTex.pixels = pixels;

      this._worker.postMessage({
          cmd: 'init',
          nodesPosition: positionArr,
          nodesMass: massArr,
          nodesSize: sizeArr,
          edges: edgeArr,
          edgesWeight: edgeWeightArr
      });

      this._globalSpeed = Infinity;
  };

  ForceAtlas2.prototype.updateOption = function (options) {
      var config = {};
      // Default config
      for (var name in defaultConfigs) {
          config[name] = defaultConfigs[name];
      }

      var nodes = this._nodes;
      var edges = this._edges;

      // Config according to data scale
      var nNodes = nodes.length;
      if (nNodes > 50000) {
          config.jitterTolerence = 10;
      }
      else if (nNodes > 5000) {
          config.jitterTolerence = 1;
      }
      else {
          config.jitterTolerence = 0.1;
      }

      if (nNodes > 100) {
          config.scaling = 2.0;
      }
      else {
          config.scaling = 10.0;
      }
      if (nNodes > 1000) {
          config.barnesHutOptimize = true;
      }
      else {
          config.barnesHutOptimize = false;
      }

      if (options) {
          for (var name in defaultConfigs) {
              if (options[name] != null) {
                  config[name] = options[name];
              }
          }
      }

      if (!config.gravityCenter) {
          var min = [Infinity, Infinity];
          var max = [-Infinity, -Infinity];
          for (var i = 0; i < nodes.length; i++) {
              min[0] = Math.min(nodes[i].x, min[0]);
              min[1] = Math.min(nodes[i].y, min[1]);
              max[0] = Math.max(nodes[i].x, max[0]);
              max[1] = Math.max(nodes[i].y, max[1]);
          }

          config.gravityCenter = [(min[0] + max[0]) * 0.5, (min[1] + max[1]) * 0.5];
      }

      // Update inDegree, outDegree
      for (var i = 0; i < edges.length; i++) {
          var node1 = edges[i].node1;
          var node2 = edges[i].node2;

          nodes[node1].degree = (nodes[node1].degree || 0) + 1;
          nodes[node2].degree = (nodes[node2].degree || 0) + 1;
      }

      if (this._worker) {
          this._worker.postMessage({
              cmd: 'updateConfig',
              config: config
          });
      }
  };

  // Steps per call, to keep sync with rendering
  ForceAtlas2.prototype.update = function (renderer, steps, cb) {
      if (steps == null) {
          steps = 1;
      }
      steps = Math.max(steps, 1);

      this._frame += steps;
      this._onupdate = cb;

      if (this._worker) {
          this._worker.postMessage({
              cmd: 'update',
              steps: Math.round(steps)
          });
      }
  };

  ForceAtlas2.prototype._$onupdate = function (e) {
      // Incase the worker keep postMessage of last frame after it is disposed
      if (this._disposed) {
          return;
      }

      var positionArr = new Float32Array(e.data.buffer);
      this._globalSpeed = e.data.globalSpeed;

      this._positionArr = positionArr;

      this._updateTexture(positionArr);

      this._onupdate && this._onupdate();
  };

  ForceAtlas2.prototype.getNodePositionTexture = function () {
      return this._positionTex;
  };

  ForceAtlas2.prototype.getNodeUV = function (nodeIndex, uv) {
      uv = uv || [];
      var textureWidth = this._positionTex.width;
      var textureHeight = this._positionTex.height;
      uv[0] = (nodeIndex % textureWidth) / (textureWidth - 1);
      uv[1] = Math.floor(nodeIndex / textureWidth) / (textureHeight - 1);
      return uv;
  };

  ForceAtlas2.prototype.getNodes = function () {
      return this._nodes;
  };
  ForceAtlas2.prototype.getEdges = function () {
      return this._edges;
  };
  ForceAtlas2.prototype.isFinished = function (maxSteps) {
      return this._frame > maxSteps;
  };

  ForceAtlas2.prototype.getNodePosition = function (renderer, out) {
      if (!out) {
          out = new Float32Array(this._nodes.length * 2);
      }
      if (this._positionArr) {
          for (var i = 0; i < this._positionArr.length; i++) {
              out[i] = this._positionArr[i];
          }
      }
      return out;
  };

  ForceAtlas2.prototype._updateTexture = function (positionArr) {
      var pixels = this._positionTex.pixels;
      var offset = 0;
      for (var i = 0; i < positionArr.length;){
          pixels[offset++] = positionArr[i++];
          pixels[offset++] = positionArr[i++];
          pixels[offset++] = 1;
          pixels[offset++] = 1;
      }
      this._positionTex.dirty();
  };

  ForceAtlas2.prototype.dispose = function (renderer) {
      this._disposed = true;
      this._worker = null;
  };

  /* harmony default export */ __webpack_exports__["a"] = (ForceAtlas2);

  /***/ }),
  /* 276 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /****************************
   * Vector2 math functions
   ***************************/

  function forceAtlas2Worker() {
      var vec2 = {
          create: function() {
              return new Float32Array(2);
          },
          dist: function(a, b) {
              var x = b[0] - a[0];
              var y = b[1] - a[1];
              return Math.sqrt(x*x + y*y);
          },
          len: function(a) {
              var x = a[0];
              var y = a[1];
              return Math.sqrt(x*x + y*y);
          },
          scaleAndAdd: function(out, a, b, scale) {
              out[0] = a[0] + b[0] * scale;
              out[1] = a[1] + b[1] * scale;
              return out;
          },
          scale: function(out, a, b) {
              out[0] = a[0] * b;
              out[1] = a[1] * b;
              return out;
          },
          add: function(out, a, b) {
              out[0] = a[0] + b[0];
              out[1] = a[1] + b[1];
              return out;
          },
          sub: function(out, a, b) {
              out[0] = a[0] - b[0];
              out[1] = a[1] - b[1];
              return out;
          },
          normalize: function(out, a) {
              var x = a[0];
              var y = a[1];
              var len = x*x + y*y;
              if (len > 0) {
                  //TODO: evaluate use of glm_invsqrt here?
                  len = 1 / Math.sqrt(len);
                  out[0] = a[0] * len;
                  out[1] = a[1] * len;
              }
              return out;
          },
          negate: function(out, a) {
              out[0] = -a[0];
              out[1] = -a[1];
              return out;
          },
          copy: function(out, a) {
              out[0] = a[0];
              out[1] = a[1];
              return out;
          },
          set: function(out, x, y) {
              out[0] = x;
              out[1] = y;
              return out;
          }
      };

      /****************************
       * Class: Region
       ***************************/

      function Region() {

          this.subRegions = [];

          this.nSubRegions = 0;

          this.node = null;

          this.mass = 0;

          this.centerOfMass = null;

          this.bbox = new Float32Array(4);

          this.size = 0;
      }

      var regionProto = Region.prototype;

      // Reset before update
      regionProto.beforeUpdate = function() {
          for (var i = 0; i < this.nSubRegions; i++) {
              this.subRegions[i].beforeUpdate();
          }
          this.mass = 0;
          if (this.centerOfMass) {
              this.centerOfMass[0] = 0;
              this.centerOfMass[1] = 0;
          }
          this.nSubRegions = 0;
          this.node = null;
      };
      // Clear after update
      regionProto.afterUpdate = function() {
          this.subRegions.length = this.nSubRegions;
          for (var i = 0; i < this.nSubRegions; i++) {
              this.subRegions[i].afterUpdate();
          }
      };

      regionProto.addNode = function(node) {
          if (this.nSubRegions === 0) {
              if (this.node == null) {
                  this.node = node;
                  return;
              }
              // Already have node, subdivide self.
              else {
                  this._addNodeToSubRegion(this.node);
                  this.node = null;
              }
          }
          this._addNodeToSubRegion(node);

          this._updateCenterOfMass(node);
      };

      regionProto.findSubRegion = function(x, y) {
          for (var i = 0; i < this.nSubRegions; i++) {
              var region = this.subRegions[i];
              if (region.contain(x, y)) {
                  return region;
              }
          }
      };

      regionProto.contain = function(x, y) {
          return this.bbox[0] <= x
              && this.bbox[2] >= x
              && this.bbox[1] <= y
              && this.bbox[3] >= y;
      };

      regionProto.setBBox = function(minX, minY, maxX, maxY) {
          // Min
          this.bbox[0] = minX;
          this.bbox[1] = minY;
          // Max
          this.bbox[2] = maxX;
          this.bbox[3] = maxY;

          this.size = (maxX - minX + maxY - minY) / 2;
      };

      regionProto._newSubRegion = function() {
          var subRegion = this.subRegions[this.nSubRegions];
          if (!subRegion) {
              subRegion = new Region();
              this.subRegions[this.nSubRegions] = subRegion;
          }
          this.nSubRegions++;
          return subRegion;
      };

      regionProto._addNodeToSubRegion = function(node) {
          var subRegion = this.findSubRegion(node.position[0], node.position[1]);
          var bbox = this.bbox;
          if (!subRegion) {
              var cx = (bbox[0] + bbox[2]) / 2;
              var cy = (bbox[1] + bbox[3]) / 2;
              var w = (bbox[2] - bbox[0]) / 2;
              var h = (bbox[3] - bbox[1]) / 2;

              var xi = node.position[0] >= cx ? 1 : 0;
              var yi = node.position[1] >= cy ? 1 : 0;

              var subRegion = this._newSubRegion();
              // Min
              subRegion.setBBox(
                  // Min
                  xi * w + bbox[0],
                  yi * h + bbox[1],
                  // Max
                  (xi + 1) * w + bbox[0],
                  (yi + 1) * h + bbox[1]
              );
          }

          subRegion.addNode(node);
      };

      regionProto._updateCenterOfMass = function(node) {
          // Incrementally update
          if (this.centerOfMass == null) {
              this.centerOfMass = new Float32Array(2);
          }
          var x = this.centerOfMass[0] * this.mass;
          var y = this.centerOfMass[1] * this.mass;
          x += node.position[0] * node.mass;
          y += node.position[1] * node.mass;
          this.mass += node.mass;
          this.centerOfMass[0] = x / this.mass;
          this.centerOfMass[1] = y / this.mass;
      };

      /****************************
       * Class: Graph Node
       ***************************/
      function GraphNode() {
          this.position = new Float32Array(2);

          this.force = vec2.create();
          this.forcePrev = vec2.create();

          // If repulsionByDegree is true
          //  mass = inDegree + outDegree + 1
          // Else
          //  mass is manually set
          this.mass = 1;

          this.inDegree = 0;
          this.outDegree = 0;

          // Optional
          // this.size = 1;
      }

      /****************************
       * Class: Graph Edge
       ***************************/
      function GraphEdge(source, target) {
          this.source = source;
          this.target = target;

          this.weight = 1;
      }

      /****************************
       * Class: ForceStlas2
       ***************************/
      function ForceAtlas2() {
          //-------------
          // Configs

          // If auto settings is true
          //  barnesHutOptimize,
          //  barnesHutTheta,
          //  scaling,
          //  jitterTolerence
          // Will be set by the system automatically
          //  preventOverlap will be set false
          //  if node size is not given
          this.autoSettings = true;

          // Barnes Hut
          // http://arborjs.org/docs/barnes-hut
          this.barnesHutOptimize = true;
          this.barnesHutTheta = 1.5;

          // Force Atlas2 Configs
          this.repulsionByDegree = true;

          this.linLogMode = false;

          this.strongGravityMode = false;
          this.gravity = 1.0;

          this.scaling = 1.0;

          this.edgeWeightInfluence = 1.0;
          this.jitterTolerence = 0.1;

          // TODO
          this.preventOverlap = false;
          this.dissuadeHubs = false;

          //
          this.rootRegion = new Region();
          this.rootRegion.centerOfMass = vec2.create();

          this.nodes = [];

          this.edges = [];

          this.bbox = new Float32Array(4);

          this.gravityCenter = null;

          this._massArr = null;

          this._swingingArr = null;

          this._sizeArr = null;

          this._globalSpeed = 0;
      }

      var forceAtlas2Proto = ForceAtlas2.prototype;

      forceAtlas2Proto.initNodes = function(positionArr, massArr, sizeArr) {
          var nNodes = massArr.length;
          this.nodes.length = 0;
          var haveSize = typeof(sizeArr) != 'undefined';
          for (var i = 0; i < nNodes; i++) {
              var node = new GraphNode();
              node.position[0] = positionArr[i * 2];
              node.position[1] = positionArr[i * 2 + 1];
              node.mass = massArr[i];
              if (haveSize) {
                  node.size = sizeArr[i];
              }
              this.nodes.push(node);
          }

          this._massArr = massArr;
          this._swingingArr = new Float32Array(nNodes);

          if (haveSize) {
              this._sizeArr = sizeArr;
          }
      };

      forceAtlas2Proto.initEdges = function(edgeArr, edgeWeightArr) {
          var nEdges = edgeArr.length / 2;
          this.edges.length = 0;
          for (var i = 0; i < nEdges; i++) {
              var sIdx = edgeArr[i * 2];
              var tIdx = edgeArr[i * 2 + 1];
              var sNode = this.nodes[sIdx];
              var tNode = this.nodes[tIdx];

              if (!sNode || !tNode) {
                  console.error('Node not exists, try initNodes before initEdges');
                  return;
              }
              sNode.outDegree++;
              tNode.inDegree++;
              var edge = new GraphEdge(sNode, tNode);

              if (edgeWeightArr) {
                  edge.weight = edgeWeightArr[i];
              }

              this.edges.push(edge);
          }
      };

      forceAtlas2Proto.updateSettings = function() {
          if (this.repulsionByDegree) {
              for (var i = 0; i < this.nodes.length; i++) {
                  var node = this.nodes[i];
                  node.mass = node.inDegree + node.outDegree + 1;
              }
          }
          else {
              for (var i = 0; i < this.nodes.length; i++) {
                  var node = this.nodes[i];
                  node.mass = this._massArr[i];
              }
          }
      };

      forceAtlas2Proto.update = function() {
          var nNodes = this.nodes.length;

          this.updateSettings();

          this.updateBBox();

          // Update region
          if (this.barnesHutOptimize) {
              this.rootRegion.setBBox(
                  this.bbox[0], this.bbox[1],
                  this.bbox[2], this.bbox[3]
              );

              this.rootRegion.beforeUpdate();
              for (var i = 0; i < nNodes; i++) {
                  this.rootRegion.addNode(this.nodes[i]);
              }
              this.rootRegion.afterUpdate();
          }

          // Reset forces
          for (var i = 0; i < nNodes; i++) {
              var node = this.nodes[i];
              vec2.copy(node.forcePrev, node.force);
              vec2.set(node.force, 0, 0);
          }

          // Compute forces
          // Repulsion
          for (var i = 0; i < nNodes; i++) {
              var na = this.nodes[i];
              if (this.barnesHutOptimize) {
                  this.applyRegionToNodeRepulsion(this.rootRegion, na);
              }
              else {
                  for (var j = i + 1; j < nNodes; j++) {
                      var nb = this.nodes[j];
                      this.applyNodeToNodeRepulsion(na, nb, false);
                  }
              }

              // Gravity
              if (this.gravity > 0) {
                  if (this.strongGravityMode) {
                      this.applyNodeStrongGravity(na);
                  }
                  else {
                      this.applyNodeGravity(na);
                  }
              }
          }

          // Attraction
          for (var i = 0; i < this.edges.length; i++) {
              this.applyEdgeAttraction(this.edges[i]);
          }

          // Handle swinging
          var swingWeightedSum = 0;
          var tractionWeightedSum = 0;
          var tmp = vec2.create();
          for (var i = 0; i < nNodes; i++) {
              var node = this.nodes[i];
              var swing = vec2.dist(node.force, node.forcePrev);
              swingWeightedSum += swing * node.mass;

              vec2.add(tmp, node.force, node.forcePrev);
              var traction = vec2.len(tmp) * 0.5;
              tractionWeightedSum += traction * node.mass;

              // Save the value for using later
              this._swingingArr[i] = swing;
          }
          var globalSpeed = this.jitterTolerence * this.jitterTolerence
                          * tractionWeightedSum / swingWeightedSum;
          // NB: During our tests we observed that an excessive rise of the global speed could have a negative impact.
          // That’s why we limited the increase of global speed s(t)(G) to 50% of the previous step s(t−1)(G).
          if (this._globalSpeed > 0) {
              globalSpeed = Math.min(globalSpeed / this._globalSpeed, 1.5) * this._globalSpeed;
          }
          this._globalSpeed = globalSpeed;

          // Apply forces
          for (var i = 0; i < nNodes; i++) {
              var node = this.nodes[i];
              var swing = this._swingingArr[i];

              var speed = 0.1 * globalSpeed / (1 + globalSpeed * Math.sqrt(swing));

              // Additional constraint to prevent local speed gets too high
              var df = vec2.len(node.force);
              if (df > 0) {
                  speed = Math.min(df * speed, 10) / df;
                  vec2.scaleAndAdd(node.position, node.position, node.force, speed);
              }
          }
      };

      forceAtlas2Proto.applyRegionToNodeRepulsion = (function() {
          var v = vec2.create();
          return function applyRegionToNodeRepulsion(region, node) {
              if (region.node) { // Region is a leaf
                  this.applyNodeToNodeRepulsion(region.node, node, true);
              }
              else {
                  vec2.sub(v, node.position, region.centerOfMass);
                  var d2 = v[0] * v[0] + v[1] * v[1];
                  if (d2 > this.barnesHutTheta * region.size * region.size) {
                      var factor = this.scaling * node.mass * region.mass / d2;
                      vec2.scaleAndAdd(node.force, node.force, v, factor);
                  }
                  else {
                      for (var i = 0; i < region.nSubRegions; i++) {
                          this.applyRegionToNodeRepulsion(region.subRegions[i], node);
                      }
                  }
              }
          }
      })();

      forceAtlas2Proto.applyNodeToNodeRepulsion = (function() {
          var v = vec2.create();
          return function applyNodeToNodeRepulsion(na, nb, oneWay) {
              if (na == nb) {
                  return;
              }
              vec2.sub(v, na.position, nb.position);
              var d2 = v[0] * v[0] + v[1] * v[1];

              // PENDING
              if (d2 === 0) {
                  return;
              }

              var factor;
              if (this.preventOverlap) {
                  var d = Math.sqrt(d2);
                  d = d - na.size - nb.size;
                  if (d > 0) {
                      factor = this.scaling * na.mass * nb.mass / (d * d);
                  }
                  else if (d < 0) {
                      // A stronger repulsion if overlap
                      factor = this.scaling * 100 * na.mass * nb.mass;
                  }
                  else {
                      // No repulsion
                      return;
                  }
              }
              else {
                  // Divide factor by an extra `d` to normalize the `v`
                  factor = this.scaling * na.mass * nb.mass / d2;
              }

              vec2.scaleAndAdd(na.force, na.force, v, factor);
              vec2.scaleAndAdd(nb.force, nb.force, v, -factor);
          }
      })();

      forceAtlas2Proto.applyEdgeAttraction = (function() {
          var v = vec2.create();
          return function applyEdgeAttraction(edge) {
              var na = edge.source;
              var nb = edge.target;

              vec2.sub(v, na.position, nb.position);
              var d = vec2.len(v);

              var w;
              if (this.edgeWeightInfluence === 0) {
                  w = 1;
              }
              else if (this.edgeWeightInfluence === 1) {
                  w = edge.weight;
              }
              else {
                  w = Math.pow(edge.weight, this.edgeWeightInfluence);
              }

              var factor;

              if (this.preventOverlap) {
                  d = d - na.size - nb.size;
                  if (d <= 0) {
                      // No attraction
                      return;
                  }
              }

              if (this.linLogMode) {
                  // Divide factor by an extra `d` to normalize the `v`
                  factor = - w * Math.log(d + 1) / (d + 1);
              }
              else {
                  factor = - w;
              }
              vec2.scaleAndAdd(na.force, na.force, v, factor);
              vec2.scaleAndAdd(nb.force, nb.force, v, -factor);
          }
      })();

      forceAtlas2Proto.applyNodeGravity = (function() {
          var v = vec2.create();
          return function(node) {
              vec2.sub(v, this.gravityCenter, node.position);
              var d = vec2.len(v);
              vec2.scaleAndAdd(node.force, node.force, v, this.gravity * node.mass / (d + 1));
          }
      })();

      forceAtlas2Proto.applyNodeStrongGravity = (function() {
          var v = vec2.create();
          return function(node) {
              vec2.sub(v, this.gravityCenter, node.position);
              vec2.scaleAndAdd(node.force, node.force, v, this.gravity * node.mass);
          }
      })();

      forceAtlas2Proto.updateBBox = function() {
          var minX = Infinity;
          var minY = Infinity;
          var maxX = -Infinity;
          var maxY = -Infinity;
          for (var i = 0; i < this.nodes.length; i++) {
              var pos = this.nodes[i].position;
              minX = Math.min(minX, pos[0]);
              minY = Math.min(minY, pos[1]);
              maxX = Math.max(maxX, pos[0]);
              maxY = Math.max(maxY, pos[1]);
          }
          this.bbox[0] = minX;
          this.bbox[1] = minY;
          this.bbox[2] = maxX;
          this.bbox[3] = maxY;
      };

      forceAtlas2Proto.getGlobalSpeed = function () {
          return this._globalSpeed;
      };

      /****************************
       * Main process
       ***************************/

      var forceAtlas2 = null;

      self.onmessage = function(e) {
          switch(e.data.cmd) {
              case 'init':
                  forceAtlas2 = new ForceAtlas2();
                  forceAtlas2.initNodes(e.data.nodesPosition, e.data.nodesMass, e.data.nodesSize);
                  forceAtlas2.initEdges(e.data.edges, e.data.edgesWeight);
                  break;
              case 'updateConfig':
                  if (forceAtlas2) {
                      for (var name in e.data.config) {
                          forceAtlas2[name] = e.data.config[name];
                      }
                  }
                  break;
              case 'update':
                  var steps = e.data.steps;
                  if (forceAtlas2) {
                      for (var i = 0; i < steps; i++) {
                          forceAtlas2.update();
                      }

                      var nNodes = forceAtlas2.nodes.length;
                      var positionArr = new Float32Array(nNodes * 2);
                      // Callback
                      for (var i = 0; i < nNodes; i++) {
                          var node = forceAtlas2.nodes[i];
                          positionArr[i * 2] = node.position[0];
                          positionArr[i * 2 + 1] = node.position[1];
                      }
                      self.postMessage({
                          buffer: positionArr.buffer,
                          globalSpeed: forceAtlas2.getGlobalSpeed()
                      }, [positionArr.buffer]);
                  }
                  else {
                      // Not initialzied yet
                      var emptyArr = new Float32Array();
                      // Post transfer object
                      self.postMessage({
                          buffer: emptyArr.buffer,
                          globalSpeed: forceAtlas2.getGlobalSpeed()
                      }, [emptyArr.buffer]);
                  }
                  break;
          }
      };
  }

  /* harmony default export */ __webpack_exports__["a"] = (forceAtlas2Worker);

  /***/ }),
  /* 277 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_claygl_src_core_Base__ = __webpack_require__(8);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__retrieve__ = __webpack_require__(2);




  /**
   * @alias module:echarts-gl/util/Roam2DControl
   */
  var Roam2DControl = __WEBPACK_IMPORTED_MODULE_0_claygl_src_core_Base__["a" /* default */].extend(function () {

      return {
          /**
           * @type {module:zrender~ZRender}
           */
          zr: null,

          /**
           * @type {module:echarts-gl/core/ViewGL}
           */
          viewGL: null,

          minZoom: 0.2,

          maxZoom: 5,

          _needsUpdate: false,

          _dx: 0,
          _dy: 0,

          _zoom: 1
      };
  }, function () {
      // Each Roam2DControl has it's own handler
      this._mouseDownHandler = this._mouseDownHandler.bind(this);
      this._mouseWheelHandler = this._mouseWheelHandler.bind(this);
      this._mouseMoveHandler = this._mouseMoveHandler.bind(this);
      this._mouseUpHandler = this._mouseUpHandler.bind(this);
      this._update = this._update.bind(this);
  }, {

      init: function () {
          var zr = this.zr;

          zr.on('mousedown', this._mouseDownHandler);
          zr.on('mousewheel', this._mouseWheelHandler);
          zr.on('globalout', this._mouseUpHandler);

          zr.animation.on('frame', this._update);
      },

      setTarget: function (target) {
          this._target = target;
      },

      setZoom: function (zoom) {
          this._zoom = Math.max(Math.min(
              zoom, this.maxZoom
          ), this.minZoom);
          this._needsUpdate = true;
      },

      setOffset: function (offset) {
          this._dx = offset[0];
          this._dy = offset[1];

          this._needsUpdate = true;
      },

      getZoom: function () {
          return this._zoom;
      },

      getOffset: function () {
          return [this._dx, this._dy];
      },

      _update: function () {
          if (!this._target) {
              return;
          }
          if (!this._needsUpdate) {
              return;
          }

          var target = this._target;

          var scale = this._zoom;

          target.position.x = this._dx;
          target.position.y = this._dy;

          target.scale.set(scale, scale, scale);

          this.zr.refresh();

          this._needsUpdate = false;

          this.trigger('update');
      },

      _mouseDownHandler: function (e) {
          if (e.target) {
              return;
          }

          var x = e.offsetX;
          var y = e.offsetY;
          if (this.viewGL && !this.viewGL.containPoint(x, y)) {
              return;
          }

          this.zr.on('mousemove', this._mouseMoveHandler);
          this.zr.on('mouseup', this._mouseUpHandler);

          var pos = this._convertPos(x, y);

          this._x = pos.x;
          this._y = pos.y;
      },

      // Convert pos from screen space to viewspace.
      _convertPos: function (x, y) {

          var camera = this.viewGL.camera;
          var viewport = this.viewGL.viewport;
          // PENDING
          return {
              x: (x - viewport.x) / viewport.width * (camera.right - camera.left) + camera.left,
              y: (y - viewport.y) / viewport.height * (camera.bottom - camera.top) + camera.top
          };
      },

      _mouseMoveHandler: function (e) {

          var pos = this._convertPos(e.offsetX, e.offsetY);

          this._dx += pos.x - this._x;
          this._dy += pos.y - this._y;

          this._x = pos.x;
          this._y = pos.y;

          this._needsUpdate = true;
      },

      _mouseUpHandler: function (e) {
          this.zr.off('mousemove', this._mouseMoveHandler);
          this.zr.off('mouseup', this._mouseUpHandler);
      },

      _mouseWheelHandler: function (e) {
          e = e.event;
          var delta = e.wheelDelta // Webkit
                  || -e.detail; // Firefox
          if (delta === 0) {
              return;
          }

          var x = e.offsetX;
          var y = e.offsetY;
          if (this.viewGL && !this.viewGL.containPoint(x, y)) {
              return;
          }

          var zoomScale = delta > 0 ? 1.1 : 0.9;
          var newZoom = Math.max(Math.min(
              this._zoom * zoomScale, this.maxZoom
          ), this.minZoom);
          zoomScale = newZoom / this._zoom;

          var pos = this._convertPos(x, y);

          var fixX = (pos.x - this._dx) * (zoomScale - 1);
          var fixY = (pos.y - this._dy) * (zoomScale - 1);

          this._dx -= fixX;
          this._dy -= fixY;

          this._zoom = newZoom;

          this._needsUpdate = true;
      },

      dispose: function () {

          var zr = this.zr;
          zr.off('mousedown', this._mouseDownHandler);
          zr.off('mousemove', this._mouseMoveHandler);
          zr.off('mouseup', this._mouseUpHandler);
          zr.off('mousewheel', this._mouseWheelHandler);
          zr.off('globalout', this._mouseUpHandler);

          zr.animation.off('frame', this._update);
      }
  });

  /* harmony default export */ __webpack_exports__["a"] = (Roam2DControl);

  /***/ }),
  /* 278 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("@export ecgl.lines2D.vertex\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\n\nattribute vec2 position: POSITION;\nattribute vec4 a_Color : COLOR;\nvarying vec4 v_Color;\n\n#ifdef POSITIONTEXTURE_ENABLED\nuniform sampler2D positionTexture;\n#endif\n\nvoid main()\n{\n gl_Position = worldViewProjection * vec4(position, -10.0, 1.0);\n\n v_Color = a_Color;\n}\n\n@end\n\n@export ecgl.lines2D.fragment\n\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\n\nvarying vec4 v_Color;\n\nvoid main()\n{\n gl_FragColor = color * v_Color;\n}\n@end\n\n\n@export ecgl.meshLines2D.vertex\n\nattribute vec2 position: POSITION;\nattribute vec2 normal;\nattribute float offset;\nattribute vec4 a_Color : COLOR;\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nuniform vec4 viewport : VIEWPORT;\n\nvarying vec4 v_Color;\nvarying float v_Miter;\n\nvoid main()\n{\n vec4 p2 = worldViewProjection * vec4(position + normal, -10.0, 1.0);\n gl_Position = worldViewProjection * vec4(position, -10.0, 1.0);\n\n p2.xy /= p2.w;\n gl_Position.xy /= gl_Position.w;\n\n vec2 N = normalize(p2.xy - gl_Position.xy);\n gl_Position.xy += N * offset / viewport.zw * 2.0;\n\n gl_Position.xy *= gl_Position.w;\n\n v_Color = a_Color;\n}\n@end\n\n\n@export ecgl.meshLines2D.fragment\n\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\n\nvarying vec4 v_Color;\nvarying float v_Miter;\n\nvoid main()\n{\n gl_FragColor = color * v_Color;\n}\n\n@end");


  /***/ }),
  /* 279 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__flowGL_FlowGLView__ = __webpack_require__(280);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__flowGL_FlowGLSeries__ = __webpack_require__(284);






  /***/ }),
  /* 280 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__ = __webpack_require__(1);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_retrieve__ = __webpack_require__(2);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_ViewGL__ = __webpack_require__(22);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__VectorFieldParticleSurface__ = __webpack_require__(281);








  // TODO 百度地图不是 linear 的
  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendChartView({

      type: 'flowGL',

      __ecgl__: true,

      init: function (ecModel, api) {
          this.viewGL = new __WEBPACK_IMPORTED_MODULE_3__core_ViewGL__["a" /* default */]('orthographic');
          this.groupGL = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Node();
          this.viewGL.add(this.groupGL);

          this._particleSurface = new __WEBPACK_IMPORTED_MODULE_4__VectorFieldParticleSurface__["a" /* default */]();

          var planeMesh = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Mesh({
              geometry: new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].PlaneGeometry(),
              material: new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Material({
                  shader: new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Shader({
                      vertex: __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Shader.source('ecgl.color.vertex'),
                      fragment: __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Shader.source('ecgl.color.fragment')
                  }),
                  // Must enable blending and multiply alpha.
                  // Or premultipliedAlpha will let the alpha useless.
                  transparent: true
              })
          });
          planeMesh.material.enableTexture('diffuseMap');

          this.groupGL.add(planeMesh);

          this._planeMesh = planeMesh;

      },

      render: function (seriesModel, ecModel, api) {
          var particleSurface = this._particleSurface;
          // Set particleType before set others.
          particleSurface.setParticleType(seriesModel.get('particleType'));
          particleSurface.setSupersampling(seriesModel.get('supersampling'));

          this._updateData(seriesModel, api);
          this._updateCamera(api.getWidth(), api.getHeight(), api.getDevicePixelRatio());

          var particleDensity = __WEBPACK_IMPORTED_MODULE_2__util_retrieve__["a" /* default */].firstNotNull(seriesModel.get('particleDensity'), 128);
          particleSurface.setParticleDensity(particleDensity, particleDensity);

          var planeMesh = this._planeMesh;

          var time = +(new Date());
          var self = this;
          var firstFrame = true;
          planeMesh.__percent = 0;
          planeMesh.stopAnimation();
          planeMesh.animate('', { loop: true })
              .when(100000, {
                  __percent: 1
              })
              .during(function () {
                  var timeNow = + (new Date());
                  var dTime = Math.min(timeNow - time, 20);
                  time = time + dTime;
                  if (self._renderer) {
                      particleSurface.update(self._renderer, api, dTime / 1000, firstFrame);
                      planeMesh.material.set('diffuseMap', particleSurface.getSurfaceTexture());
                      // planeMesh.material.set('diffuseMap', self._particleSurface.vectorFieldTexture);
                  }
                  firstFrame = false;
              })
              .start();

          var itemStyleModel = seriesModel.getModel('itemStyle');
          var color = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].parseColor(itemStyleModel.get('color'));
          color[3] *= __WEBPACK_IMPORTED_MODULE_2__util_retrieve__["a" /* default */].firstNotNull(itemStyleModel.get('opacity'), 1);
          planeMesh.material.set('color', color);

          particleSurface.setColorTextureImage(seriesModel.get('colorTexture'), api);
          particleSurface.setParticleSize(seriesModel.get('particleSize'));
          particleSurface.particleSpeedScaling = seriesModel.get('particleSpeed');
          particleSurface.motionBlurFactor = 1.0 - Math.pow(0.1, seriesModel.get('particleTrail'));
      },

      updateTransform: function (seriesModel, ecModel, api) {
          this._updateData(seriesModel, api);
      },

      afterRender: function (globeModel, ecModel, api, layerGL) {
          var renderer = layerGL.renderer;
          this._renderer = renderer;
      },

      _updateData: function (seriesModel, api) {
          var coordSys = seriesModel.coordinateSystem;
          var dims = coordSys.dimensions.map(function (coordDim) {
              return seriesModel.coordDimToDataDim(coordDim)[0];
          });

          var data = seriesModel.getData();
          var xExtent = data.getDataExtent(dims[0]);
          var yExtent = data.getDataExtent(dims[1]);

          var gridWidth = seriesModel.get('gridWidth');
          var gridHeight = seriesModel.get('gridHeight');

          if (gridWidth == null || gridWidth === 'auto') {
              // TODO not accurate.
              var aspect = (xExtent[1] - xExtent[0]) / (yExtent[1] - yExtent[0]);
              gridWidth = Math.round(Math.sqrt(aspect * data.count()));
          }
          if (gridHeight == null || gridHeight === 'auto') {
              gridHeight = Math.ceil(data.count() / gridWidth);
          }

          var vectorFieldTexture = this._particleSurface.vectorFieldTexture;

          // Half Float needs Uint16Array
          var pixels = vectorFieldTexture.pixels;
          if (!pixels || pixels.length !== gridHeight * gridWidth * 4) {
              pixels = vectorFieldTexture.pixels = new Float32Array(gridWidth * gridHeight * 4);
          }
          else {
              for (var i = 0; i < pixels.length; i++) {
                  pixels[i] = 0;
              }
          }

          var maxMag = 0;
          var minMag = Infinity;

          var points = new Float32Array(data.count() * 2);
          var offset = 0;
          var bbox = [[Infinity, Infinity], [-Infinity, -Infinity]];

          data.each([dims[0], dims[1], 'vx', 'vy'], function (x, y, vx, vy) {
              var pt = coordSys.dataToPoint([x, y]);
              points[offset++] = pt[0];
              points[offset++] = pt[1];
              bbox[0][0] = Math.min(pt[0], bbox[0][0]);
              bbox[0][1] = Math.min(pt[1], bbox[0][1]);
              bbox[1][0] = Math.max(pt[0], bbox[1][0]);
              bbox[1][1] = Math.max(pt[1], bbox[1][1]);

              var mag = Math.sqrt(vx * vx + vy * vy);
              maxMag = Math.max(maxMag, mag);
              minMag = Math.min(minMag, mag);
          });

          data.each(['vx', 'vy'], function (vx, vy, i) {
              var xPix = Math.round((points[i * 2] - bbox[0][0]) / (bbox[1][0] - bbox[0][0]) * (gridWidth - 1));
              var yPix = gridHeight - 1 - Math.round((points[i * 2 + 1] - bbox[0][1]) / (bbox[1][1] - bbox[0][1]) * (gridHeight - 1));

              var idx = (yPix * gridWidth + xPix) * 4;

              pixels[idx] = (vx / maxMag * 0.5 + 0.5);
              pixels[idx + 1] = (vy / maxMag * 0.5 + 0.5);
              pixels[idx + 3] = 1;
          });

          vectorFieldTexture.width = gridWidth;
          vectorFieldTexture.height = gridHeight;

          if (seriesModel.get('coordinateSystem') === 'bmap') {
              this._fillEmptyPixels(vectorFieldTexture);
          }

          vectorFieldTexture.dirty();

          this._updatePlanePosition(bbox[0], bbox[1], seriesModel,api);
          this._updateGradientTexture(data.getVisual('visualMeta'), [minMag, maxMag]);

      },
      // PENDING Use grid mesh ? or delaunay triangulation?
      _fillEmptyPixels: function (texture) {
          var pixels = texture.pixels;
          var width = texture.width;
          var height = texture.height;

          function fetchPixel(x, y, rg) {
              x = Math.max(Math.min(x, width - 1), 0);
              y = Math.max(Math.min(y, height - 1), 0);
              var idx = (y * (width - 1) + x) * 4;
              if (pixels[idx + 3] === 0) {
                  return false;
              }
              rg[0] = pixels[idx];
              rg[1] = pixels[idx + 1];
              return true;
          }

          function addPixel(a, b, out) {
              out[0] = a[0] + b[0];
              out[1] = a[1] + b[1];
          }

          var center = [], left = [], right = [], top = [], bottom = [];
          var weight = 0;
          for (var y = 0; y < height; y++) {
              for (var x = 0; x < width; x++) {
                  var idx = (y * (width - 1) + x) * 4;
                  if (pixels[idx + 3] === 0) {
                      weight = center[0] = center[1] = 0;
                      if (fetchPixel(x - 1, y, left)) {
                          weight++; addPixel(left, center, center);
                      }
                      if (fetchPixel(x + 1, y, right)) {
                          weight++; addPixel(right, center, center);
                      }
                      if (fetchPixel(x, y - 1, top)) {
                          weight++; addPixel(top, center, center);
                      }
                      if (fetchPixel(x, y + 1, bottom)) {
                          weight++; addPixel(bottom, center, center);
                      }
                      center[0] /= weight;
                      center[1] /= weight;
                      // PENDING If overwrite. bilinear interpolation.
                      pixels[idx] = center[0];
                      pixels[idx + 1] = center[1];
                  }
                  pixels[idx + 3] = 1;
              }
          }
      },

      _updateGradientTexture: function (visualMeta, magExtent) {
          if (!visualMeta || !visualMeta.length) {
              this._particleSurface.setGradientTexture(null);
              return;
          }
          // TODO Different dimensions
          this._gradientTexture = this._gradientTexture || new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Texture2D({
              image: document.createElement('canvas')
          });
          var gradientTexture = this._gradientTexture;
          var canvas = gradientTexture.image;
          canvas.width = 200;
          canvas.height = 1;
          var ctx = canvas.getContext('2d');
          var gradient = ctx.createLinearGradient(0, 0.5, canvas.width, 0.5);
          visualMeta[0].stops.forEach(function (stop) {
              var offset;
              if (magExtent[1] === magExtent[0]) {
                  offset = 0;
              }
              else {
                  offset = stop.value / magExtent[1];
                  offset = Math.min(Math.max(offset, 0), 1);
              }

              gradient.addColorStop(offset, stop.color);
          });
          ctx.fillStyle = gradient;
          ctx.fillRect(0, 0, canvas.width, canvas.height);
          gradientTexture.dirty();

          this._particleSurface.setGradientTexture(this._gradientTexture);
      },

      _updatePlanePosition: function (leftTop, rightBottom, seriesModel, api) {
          var limitedResult = this._limitInViewportAndFullFill(leftTop, rightBottom, seriesModel, api);
          leftTop = limitedResult.leftTop;
          rightBottom = limitedResult.rightBottom;
          this._particleSurface.setRegion(limitedResult.region);

          this._planeMesh.position.set(
              (leftTop[0] + rightBottom[0]) / 2,
              api.getHeight() - (leftTop[1] + rightBottom[1]) / 2,
              0
          );

          var width = rightBottom[0] - leftTop[0];
          var height = rightBottom[1] - leftTop[1];
          this._planeMesh.scale.set(width / 2, height / 2, 1);

          this._particleSurface.resize(
              Math.max(Math.min(width, 2048), 1),
              Math.max(Math.min(height, 2048), 1)
          );

          if (this._renderer) {
              this._particleSurface.clearFrame(this._renderer);
          }
      },

      _limitInViewportAndFullFill: function (leftTop, rightBottom, seriesModel, api) {
          var newLeftTop = [
              Math.max(leftTop[0], 0),
              Math.max(leftTop[1], 0)
          ];
          var newRightBottom = [
              Math.min(rightBottom[0], api.getWidth()),
              Math.min(rightBottom[1], api.getHeight())
          ];
          // Tiliing in lng orientation.
          if (seriesModel.get('coordinateSystem') === 'bmap') {
              var lngRange = seriesModel.getData().getDataExtent(seriesModel.coordDimToDataDim('lng')[0]);
              // PENDING, consider grid density
              var isContinuous = Math.floor(lngRange[1] - lngRange[0]) >= 359;
              if (isContinuous) {
                  if (newLeftTop[0] > 0) {
                      newLeftTop[0] = 0;
                  }
                  if (newRightBottom[0] < api.getWidth()) {
                      newRightBottom[0] = api.getWidth();
                  }
              }
          }

          var width = rightBottom[0] - leftTop[0];
          var height = rightBottom[1] - leftTop[1];
          var newWidth = newRightBottom[0] - newLeftTop[0];
          var newHeight = newRightBottom[1] - newLeftTop[1];

          var region = [
              (newLeftTop[0] - leftTop[0]) / width,
              1.0 - newHeight / height - (newLeftTop[1] - leftTop[1]) / height,
              newWidth / width,
              newHeight / height
          ];

          return {
              leftTop: newLeftTop,
              rightBottom: newRightBottom,
              region: region
          };
      },

      _updateCamera: function (width, height, dpr) {
          this.viewGL.setViewport(0, 0, width, height, dpr);
          var camera = this.viewGL.camera;
          // FIXME  bottom can't be larger than top
          camera.left = camera.bottom = 0;
          camera.top = height;
          camera.right = width;
          camera.near = 0;
          camera.far = 100;
          camera.position.z = 10;
      },

      remove: function () {
          this._planeMesh.stopAnimation();
          this.groupGL.removeAll();
      },

      dispose: function () {
          if (this._renderer) {
              this._particleSurface.dispose(this._renderer);
          }
          this.groupGL.removeAll();
      }
  });


  /***/ }),
  /* 281 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_claygl_src_compositor_Pass__ = __webpack_require__(15);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_claygl_src_Geometry__ = __webpack_require__(14);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_claygl_src_Mesh__ = __webpack_require__(41);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_claygl_src_Material__ = __webpack_require__(19);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_claygl_src_Shader__ = __webpack_require__(9);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_claygl_src_Texture2D__ = __webpack_require__(5);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_claygl_src_Texture__ = __webpack_require__(4);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_claygl_src_camera_Orthographic__ = __webpack_require__(38);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_claygl_src_geometry_Plane__ = __webpack_require__(43);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_claygl_src_FrameBuffer__ = __webpack_require__(10);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__Line2D__ = __webpack_require__(282);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__vectorFieldParticle_glsl_js__ = __webpack_require__(283);












  // import TemporalSS from '../../effect/TemporalSuperSampling';



  __WEBPACK_IMPORTED_MODULE_4_claygl_src_Shader__["a" /* default */]['import'](__WEBPACK_IMPORTED_MODULE_11__vectorFieldParticle_glsl_js__["a" /* default */]);

  function createSpriteCanvas(size) {
      var canvas = document.createElement('canvas');
      canvas.width = canvas.height = size;
      var ctx = canvas.getContext('2d');
      ctx.fillStyle = '#fff';
      ctx.arc(size / 2, size / 2, size / 2, 0, Math.PI * 2);
      ctx.fill();
      return canvas;
  }

  // import spriteUtil from '../../util/sprite';

  var VectorFieldParticleSurface = function () {

      /**
       * @type {number}
       */
      this.motionBlurFactor = 0.99;
      /**
       * Vector field lookup image
       * @type {clay.Texture2D}
       */
      this.vectorFieldTexture = new __WEBPACK_IMPORTED_MODULE_5_claygl_src_Texture2D__["a" /* default */]({
          type: __WEBPACK_IMPORTED_MODULE_6_claygl_src_Texture__["a" /* default */].FLOAT,
          // minFilter: Texture.NEAREST,
          // magFilter: Texture.NEAREST,
          flipY: false
      });

      /**
       * Particle life range
       * @type {Array.<number>}
       */
      this.particleLife = [5, 20];

      this._particleType = 'point';

      /**
       * @type {number}
       */
      this._particleSize = 1;

      /**
       * @type {Array.<number>}
       */
      this.particleColor = [1, 1, 1, 1];

      /**
       * @type {number}
       */
      this.particleSpeedScaling = 1.0;

      /**
       * @type {clay.Texture2D}
       */
      this._thisFrameTexture = null;

      this._particlePass = null;
      this._spawnTexture = null;
      this._particleTexture0 = null;
      this._particleTexture1 = null;

      this._particlePointsMesh = null;

      this._surfaceFrameBuffer = null;

      this._elapsedTime = 0.0;

      this._scene = null;
      this._camera = null;

      this._lastFrameTexture = null;

      // this._temporalSS = new TemporalSS(50);

      // this._antialising = false;

      this._supersampling = 1;

      this._downsampleTextures = [];

      this._width = 512;
      this._height = 512;

      this.init();
  };

  VectorFieldParticleSurface.prototype = {

      constructor: VectorFieldParticleSurface,

      init: function () {
          var parameters = {
              type: __WEBPACK_IMPORTED_MODULE_6_claygl_src_Texture__["a" /* default */].FLOAT,
              minFilter: __WEBPACK_IMPORTED_MODULE_6_claygl_src_Texture__["a" /* default */].NEAREST,
              magFilter: __WEBPACK_IMPORTED_MODULE_6_claygl_src_Texture__["a" /* default */].NEAREST,
              useMipmap: false
          };
          this._spawnTexture = new __WEBPACK_IMPORTED_MODULE_5_claygl_src_Texture2D__["a" /* default */](parameters);

          this._particleTexture0 = new __WEBPACK_IMPORTED_MODULE_5_claygl_src_Texture2D__["a" /* default */](parameters);
          this._particleTexture1 = new __WEBPACK_IMPORTED_MODULE_5_claygl_src_Texture2D__["a" /* default */](parameters);

          this._frameBuffer = new __WEBPACK_IMPORTED_MODULE_9_claygl_src_FrameBuffer__["a" /* default */]({
              depthBuffer: false
          });
          this._particlePass = new __WEBPACK_IMPORTED_MODULE_0_claygl_src_compositor_Pass__["a" /* default */]({
              fragment: __WEBPACK_IMPORTED_MODULE_4_claygl_src_Shader__["a" /* default */].source('ecgl.vfParticle.particle.fragment')
          });
          this._particlePass.setUniform('velocityTexture', this.vectorFieldTexture);
          this._particlePass.setUniform('spawnTexture', this._spawnTexture);

          this._downsamplePass = new __WEBPACK_IMPORTED_MODULE_0_claygl_src_compositor_Pass__["a" /* default */]({
              fragment: __WEBPACK_IMPORTED_MODULE_4_claygl_src_Shader__["a" /* default */].source('clay.compositor.downsample')
          });

          var particlePointsMesh = new __WEBPACK_IMPORTED_MODULE_2_claygl_src_Mesh__["a" /* default */]({
              // Render after last frame full quad
              renderOrder: 10,
              material: new __WEBPACK_IMPORTED_MODULE_3_claygl_src_Material__["a" /* default */]({
                  shader: new __WEBPACK_IMPORTED_MODULE_4_claygl_src_Shader__["a" /* default */](
                      __WEBPACK_IMPORTED_MODULE_4_claygl_src_Shader__["a" /* default */].source('ecgl.vfParticle.renderPoints.vertex'),
                      __WEBPACK_IMPORTED_MODULE_4_claygl_src_Shader__["a" /* default */].source('ecgl.vfParticle.renderPoints.fragment')
                  )
              }),
              mode: __WEBPACK_IMPORTED_MODULE_2_claygl_src_Mesh__["a" /* default */].POINTS,
              geometry: new __WEBPACK_IMPORTED_MODULE_1_claygl_src_Geometry__["a" /* default */]({
                  dynamic: true,
                  mainAttribute: 'texcoord0'
              })
          });
          var particleLinesMesh = new __WEBPACK_IMPORTED_MODULE_2_claygl_src_Mesh__["a" /* default */]({
              // Render after last frame full quad
              renderOrder: 10,
              material: new __WEBPACK_IMPORTED_MODULE_3_claygl_src_Material__["a" /* default */]({
                  shader: new __WEBPACK_IMPORTED_MODULE_4_claygl_src_Shader__["a" /* default */](
                      __WEBPACK_IMPORTED_MODULE_4_claygl_src_Shader__["a" /* default */].source('ecgl.vfParticle.renderLines.vertex'),
                      __WEBPACK_IMPORTED_MODULE_4_claygl_src_Shader__["a" /* default */].source('ecgl.vfParticle.renderLines.fragment')
                  )
              }),
              geometry: new __WEBPACK_IMPORTED_MODULE_10__Line2D__["a" /* default */](),
              culling: false
          });
          var lastFrameFullQuad = new __WEBPACK_IMPORTED_MODULE_2_claygl_src_Mesh__["a" /* default */]({
              material: new __WEBPACK_IMPORTED_MODULE_3_claygl_src_Material__["a" /* default */]({
                  shader: new __WEBPACK_IMPORTED_MODULE_4_claygl_src_Shader__["a" /* default */](
                      __WEBPACK_IMPORTED_MODULE_4_claygl_src_Shader__["a" /* default */].source('ecgl.color.vertex'),
                      __WEBPACK_IMPORTED_MODULE_4_claygl_src_Shader__["a" /* default */].source('ecgl.color.fragment')
                  )
                  // DO NOT BLEND Blend will multiply alpha
                  // transparent: true
              }),
              geometry: new __WEBPACK_IMPORTED_MODULE_8_claygl_src_geometry_Plane__["a" /* default */]()
          });
          lastFrameFullQuad.material.enableTexture('diffuseMap');

          this._particlePointsMesh = particlePointsMesh;
          this._particleLinesMesh = particleLinesMesh;
          this._lastFrameFullQuadMesh = lastFrameFullQuad;

          this._camera = new __WEBPACK_IMPORTED_MODULE_7_claygl_src_camera_Orthographic__["a" /* default */]();
          this._thisFrameTexture = new __WEBPACK_IMPORTED_MODULE_5_claygl_src_Texture2D__["a" /* default */]();
          this._lastFrameTexture = new __WEBPACK_IMPORTED_MODULE_5_claygl_src_Texture2D__["a" /* default */]();
      },

      setParticleDensity: function (width, height) {
          var nVertex = width * height;

          var spawnTextureData = new Float32Array(nVertex * 4);
          var off = 0;
          var lifeRange = this.particleLife;
          for (var i = 0; i < width; i++) {
              for (var j = 0; j < height; j++, off++) {
                  // x position, range [0 - 1]
                  spawnTextureData[off * 4] = Math.random();
                  // y position, range [0 - 1]
                  spawnTextureData[off * 4 + 1] = Math.random();
                  // Some property
                  spawnTextureData[off * 4 + 2] = Math.random();
                  var life = (lifeRange[1] - lifeRange[0]) * Math.random() + lifeRange[0];
                  // Particle life
                  spawnTextureData[off * 4 + 3] = life;
              }
          }

          if (this._particleType === 'line') {
              this._setLineGeometry(width, height);
          }
          else {
              this._setPointsGeometry(width, height);
          }

          this._spawnTexture.width = width;
          this._spawnTexture.height = height;
          this._spawnTexture.pixels = spawnTextureData;

          this._particleTexture0.width = this._particleTexture1.width = width;
          this._particleTexture0.height = this._particleTexture1.height = height;

          this._particlePass.setUniform('textureSize', [width, height]);
      },

      _setPointsGeometry: function (width, height) {
          var nVertex = width * height;
          var geometry = this._particlePointsMesh.geometry;
          var attributes = geometry.attributes;
          attributes.texcoord0.init(nVertex);

          var off = 0;
          for (var i = 0; i < width; i++) {
              for (var j = 0; j < height; j++, off++) {
                  attributes.texcoord0.value[off * 2] = i / width;
                  attributes.texcoord0.value[off * 2 + 1] = j / height;
              }
          }
          geometry.dirty();
      },

      _setLineGeometry: function (width, height) {
          var nLine = width * height;
          var geometry = this._getParticleMesh().geometry;
          geometry.setLineCount(nLine);
          geometry.resetOffset();
          for (var i = 0; i < width; i++) {
              for (var j = 0; j < height; j++) {
                  geometry.addLine([i / width, j / height]);
              }
          }
          geometry.dirty();
      },

      _getParticleMesh: function () {
          return this._particleType === 'line' ? this._particleLinesMesh : this._particlePointsMesh;
      },

      update: function (renderer, api, deltaTime, firstFrame) {
          var particleMesh = this._getParticleMesh();
          var frameBuffer = this._frameBuffer;
          var particlePass = this._particlePass;

          if (firstFrame) {
              this._updateDownsampleTextures(renderer, api);
          }

          particleMesh.material.set('size', this._particleSize * this._supersampling);
          particleMesh.material.set('color', this.particleColor);
          particlePass.setUniform('speedScaling', this.particleSpeedScaling);

          frameBuffer.attach(this._particleTexture1);
          particlePass.setUniform('firstFrameTime', firstFrame ? (this.particleLife[1] + this.particleLife[0]) / 2 : 0);
          particlePass.setUniform('particleTexture', this._particleTexture0);
          particlePass.setUniform('deltaTime', deltaTime);
          particlePass.setUniform('elapsedTime', this._elapsedTime);
          particlePass.render(renderer, frameBuffer);

          particleMesh.material.set('particleTexture', this._particleTexture1);
          particleMesh.material.set('prevParticleTexture', this._particleTexture0);

          frameBuffer.attach(this._thisFrameTexture);
          frameBuffer.bind(renderer);
          renderer.gl.clear(renderer.gl.DEPTH_BUFFER_BIT | renderer.gl.COLOR_BUFFER_BIT);
          var lastFrameFullQuad = this._lastFrameFullQuadMesh;
          lastFrameFullQuad.material.set('diffuseMap', this._lastFrameTexture);
          lastFrameFullQuad.material.set('color', [1, 1, 1, this.motionBlurFactor]);

          this._camera.update(true);
          renderer.renderPass([lastFrameFullQuad, particleMesh], this._camera);
          frameBuffer.unbind(renderer);

          this._downsample(renderer);

          this._swapTexture();

          this._elapsedTime += deltaTime;
      },

      _downsample: function (renderer) {
          var downsampleTextures = this._downsampleTextures;
          if (downsampleTextures.length === 0) {
              return;
          }
          var current = 0;
          var sourceTexture = this._thisFrameTexture;
          var targetTexture = downsampleTextures[current];

          while (targetTexture) {
              this._frameBuffer.attach(targetTexture);
              this._downsamplePass.setUniform('texture', sourceTexture);
              this._downsamplePass.setUniform('textureSize', [sourceTexture.width, sourceTexture.height]);
              this._downsamplePass.render(renderer, this._frameBuffer);

              sourceTexture = targetTexture;
              targetTexture = downsampleTextures[++current];
          }
      },

      getSurfaceTexture: function () {
          var downsampleTextures = this._downsampleTextures;
          return downsampleTextures.length > 0
              ? downsampleTextures[downsampleTextures.length - 1]
              : this._lastFrameTexture;
      },

      setRegion: function (region) {
          this._particlePass.setUniform('region', region);
      },

      resize: function (width, height) {
          this._lastFrameTexture.width = width * this._supersampling;
          this._lastFrameTexture.height = height * this._supersampling;
          this._thisFrameTexture.width = width * this._supersampling;
          this._thisFrameTexture.height = height * this._supersampling;

          this._width = width;
          this._height = height;
      },

      setParticleSize: function (size) {
          var particleMesh = this._getParticleMesh();
          if (size <= 2) {
              particleMesh.material.disableTexture('spriteTexture');
              particleMesh.material.transparent = false;
              return;
          }
          if (!this._spriteTexture) {
              this._spriteTexture = new __WEBPACK_IMPORTED_MODULE_5_claygl_src_Texture2D__["a" /* default */]();
          }
          if (!this._spriteTexture.image || this._spriteTexture.image.width !== size) {
              this._spriteTexture.image = createSpriteCanvas(size);
              this._spriteTexture.dirty();
          }
          particleMesh.material.transparent = true;
          particleMesh.material.enableTexture('spriteTexture');
          particleMesh.material.set('spriteTexture', this._spriteTexture);

          this._particleSize = size;
      },

      setGradientTexture: function (gradientTexture) {
          var material = this._getParticleMesh().material;
          material[gradientTexture ? 'enableTexture' : 'disableTexture']('gradientTexture');
          material.setUniform('gradientTexture', gradientTexture);
      },

      setColorTextureImage: function (colorTextureImg, api) {
          var material = this._getParticleMesh().material;
          material.setTextureImage('colorTexture', colorTextureImg, api, {
              flipY: true
          });
      },

      setParticleType: function (type) {
          this._particleType = type;
      },

      clearFrame: function (renderer) {
          var frameBuffer = this._frameBuffer;
          frameBuffer.attach(this._lastFrameTexture);
          frameBuffer.bind(renderer);
          renderer.gl.clear(renderer.gl.DEPTH_BUFFER_BIT | renderer.gl.COLOR_BUFFER_BIT);
          frameBuffer.unbind(renderer);
      },

      setSupersampling: function (supersampling) {
          this._supersampling = supersampling;
          this.resize(this._width, this._height);
      },

      _updateDownsampleTextures: function (renderer, api) {
          var downsampleTextures = this._downsampleTextures;
          var upScale = Math.max(Math.floor(Math.log(this._supersampling / api.getDevicePixelRatio()) / Math.log(2)), 0);
          var scale = 2;
          var width = this._width * this._supersampling;
          var height = this._height * this._supersampling;
          for (var i = 0; i < upScale; i++) {
              downsampleTextures[i] = downsampleTextures[i] || new __WEBPACK_IMPORTED_MODULE_5_claygl_src_Texture2D__["a" /* default */]();
              downsampleTextures[i].width = width / scale;
              downsampleTextures[i].height = height / scale;
              scale *= 2;
          }
          for (;i < downsampleTextures.length; i++) {
              downsampleTextures[i].dispose(renderer);
          }
          downsampleTextures.length = upScale;
      },

      _swapTexture: function () {
          var tmp = this._particleTexture0;
          this._particleTexture0 = this._particleTexture1;
          this._particleTexture1 = tmp;

          var tmp = this._thisFrameTexture;
          this._thisFrameTexture = this._lastFrameTexture;
          this._lastFrameTexture = tmp;
      },

      dispose: function (renderer) {
          renderer.disposeFrameBuffer(this._frameBuffer);
          // Dispose textures
          renderer.disposeTexture(this.vectorFieldTexture);
          renderer.disposeTexture(this._spawnTexture);
          renderer.disposeTexture(this._particleTexture0);
          renderer.disposeTexture(this._particleTexture1);
          renderer.disposeTexture(this._thisFrameTexture);
          renderer.disposeTexture(this._lastFrameTexture);

          renderer.disposeGeometry(this._particleLinesMesh.geometry);
          renderer.disposeGeometry(this._particlePointsMesh.geometry);
          renderer.disposeGeometry(this._lastFrameFullQuadMesh.geometry);

          if (this._spriteTexture) {
              renderer.disposeTexture(this._spriteTexture);
          }

          this._particlePass.dispose(renderer);
          this._downsamplePass.dispose(renderer);

          this._downsampleTextures.forEach(function (texture) {
              texture.dispose(renderer);
          });
      }
  };

  /* harmony default export */ __webpack_exports__["a"] = (VectorFieldParticleSurface);

  /***/ }),
  /* 282 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_claygl_src_Geometry__ = __webpack_require__(14);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts__);
  /**
   * Lines geometry
   * Use screen space projected lines lineWidth > MAX_LINE_WIDTH
   * https://mattdesl.svbtle.com/drawing-lines-is-hard
   * @module echarts-gl/util/geometry/LinesGeometry
   * @author Yi Shen(http://github.com/pissang)
   */




  /**
   * @constructor
   * @alias module:echarts-gl/chart/flowGL/Line2D
   * @extends clay.Geometry
   */

  var LinesGeometry = __WEBPACK_IMPORTED_MODULE_0_claygl_src_Geometry__["a" /* default */].extend(function () {
      return {

          dynamic: true,

          attributes: {
              position: new __WEBPACK_IMPORTED_MODULE_0_claygl_src_Geometry__["a" /* default */].Attribute('position', 'float', 3, 'POSITION')
          }
      };
  },
  /** @lends module: echarts-gl/util/geometry/LinesGeometry.prototype */
  {

      /**
       * Reset offset
       */
      resetOffset: function () {
          this._vertexOffset = 0;
          this._faceOffset = 0;
      },

      /**
       * @param {number} nVertex
       */
      setLineCount: function (nLine) {
          var attributes = this.attributes;
          var nVertex = 4 * nLine;
          var nTriangle = 2 * nLine;
          if (this.vertexCount !== nVertex) {
              attributes.position.init(nVertex);
          }
          if (this.triangleCount !== nTriangle) {
              if (nTriangle === 0) {
                  this.indices = null;
              }
              else {
                  this.indices = this.vertexCount > 0xffff ? new Uint32Array(nTriangle * 3) : new Uint16Array(nTriangle * 3);
              }
          }
      },

      addLine: function (p) {
          var vertexOffset = this._vertexOffset;
          this.attributes.position.set(vertexOffset, [p[0], p[1], 1]);
          this.attributes.position.set(vertexOffset + 1, [p[0], p[1], -1]);
          this.attributes.position.set(vertexOffset + 2, [p[0], p[1], 2]);
          this.attributes.position.set(vertexOffset + 3, [p[0], p[1], -2]);

          this.setTriangleIndices(
              this._faceOffset++, [
                  vertexOffset, vertexOffset + 1, vertexOffset + 2
              ]
          );
          this.setTriangleIndices(
              this._faceOffset++, [
                  vertexOffset + 1, vertexOffset + 2, vertexOffset + 3
              ]
          );

          this._vertexOffset += 4;
      }
  });

  /* harmony default export */ __webpack_exports__["a"] = (LinesGeometry);

  /***/ }),
  /* 283 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ("@export ecgl.vfParticle.particle.fragment\n\nuniform sampler2D particleTexture;\nuniform sampler2D spawnTexture;\nuniform sampler2D velocityTexture;\n\nuniform float deltaTime;\nuniform float elapsedTime;\n\nuniform float speedScaling : 1.0;\n\nuniform vec2 textureSize;\nuniform vec4 region : [0, 0, 1, 1];\nuniform float firstFrameTime;\n\nvarying vec2 v_Texcoord;\n\n\nvoid main()\n{\n vec4 p = texture2D(particleTexture, v_Texcoord);\n bool spawn = false;\n if (p.w <= 0.0) {\n p = texture2D(spawnTexture, fract(v_Texcoord + elapsedTime / 10.0));\n p.w -= firstFrameTime;\n spawn = true;\n }\n vec2 v = texture2D(velocityTexture, fract(p.xy * region.zw + region.xy)).xy;\n v = (v - 0.5) * 2.0;\n p.z = length(v);\n p.xy += v * deltaTime / 10.0 * speedScaling;\n p.w -= deltaTime;\n\n if (spawn || p.xy != fract(p.xy)) {\n p.z = 0.0;\n }\n p.xy = fract(p.xy);\n\n gl_FragColor = p;\n}\n@end\n\n@export ecgl.vfParticle.renderPoints.vertex\n\n#define PI 3.1415926\n\nattribute vec2 texcoord : TEXCOORD_0;\n\nuniform sampler2D particleTexture;\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\n\nuniform float size : 1.0;\n\nvarying float v_Mag;\nvarying vec2 v_Uv;\n\nvoid main()\n{\n vec4 p = texture2D(particleTexture, texcoord);\n\n if (p.w > 0.0 && p.z > 1e-5) {\n gl_Position = worldViewProjection * vec4(p.xy * 2.0 - 1.0, 0.0, 1.0);\n }\n else {\n gl_Position = vec4(100000.0, 100000.0, 100000.0, 1.0);\n }\n\n v_Mag = p.z;\n v_Uv = p.xy;\n\n gl_PointSize = size;\n}\n\n@end\n\n@export ecgl.vfParticle.renderPoints.fragment\n\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\nuniform sampler2D gradientTexture;\nuniform sampler2D colorTexture;\nuniform sampler2D spriteTexture;\n\nvarying float v_Mag;\nvarying vec2 v_Uv;\n\nvoid main()\n{\n gl_FragColor = color;\n#ifdef SPRITETEXTURE_ENABLED\n gl_FragColor *= texture2D(spriteTexture, gl_PointCoord);\n if (color.a == 0.0) {\n discard;\n }\n#endif\n#ifdef GRADIENTTEXTURE_ENABLED\n gl_FragColor *= texture2D(gradientTexture, vec2(v_Mag, 0.5));\n#endif\n#ifdef COLORTEXTURE_ENABLED\n gl_FragColor *= texture2D(colorTexture, v_Uv);\n#endif\n}\n\n@end\n\n@export ecgl.vfParticle.renderLines.vertex\n\n#define PI 3.1415926\n\nattribute vec3 position : POSITION;\n\nuniform sampler2D particleTexture;\nuniform sampler2D prevParticleTexture;\n\nuniform float size : 1.0;\nuniform vec4 vp: VIEWPORT;\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\n\nvarying float v_Mag;\nvarying vec2 v_Uv;\n\n@import clay.util.rand\n\nvoid main()\n{\n vec4 p = texture2D(particleTexture, position.xy);\n vec4 p2 = texture2D(prevParticleTexture, position.xy);\n\n p.xy = p.xy * 2.0 - 1.0;\n p2.xy = p2.xy * 2.0 - 1.0;\n\n if (p.w > 0.0 && p.z > 1e-5) {\n vec2 dir = normalize(p.xy - p2.xy);\n vec2 norm = vec2(dir.y / vp.z, -dir.x / vp.w) * sign(position.z) * size;\n if (abs(position.z) == 2.0) {\n gl_Position = vec4(p.xy + norm, 0.0, 1.0);\n v_Uv = p.xy;\n v_Mag = p.z;\n }\n else {\n gl_Position = vec4(p2.xy + norm, 0.0, 1.0);\n v_Mag = p2.z;\n v_Uv = p2.xy;\n }\n gl_Position = worldViewProjection * gl_Position;\n }\n else {\n gl_Position = vec4(100000.0, 100000.0, 100000.0, 1.0);\n }\n}\n\n@end\n\n@export ecgl.vfParticle.renderLines.fragment\n\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\nuniform sampler2D gradientTexture;\nuniform sampler2D colorTexture;\n\nvarying float v_Mag;\nvarying vec2 v_Uv;\n\nvoid main()\n{\n gl_FragColor = color;\n #ifdef GRADIENTTEXTURE_ENABLED\n gl_FragColor *= texture2D(gradientTexture, vec2(v_Mag, 0.5));\n#endif\n#ifdef COLORTEXTURE_ENABLED\n gl_FragColor *= texture2D(colorTexture, v_Uv);\n#endif\n}\n\n@end\n");


  /***/ }),
  /* 284 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);


  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendSeriesModel({

      type: 'series.flowGL',

      dependencies: ['geo', 'grid', 'bmap'],

      visualColorAccessPath: 'itemStyle.color',

      getInitialData: function (option, ecModel) {
          var coordSysDimensions = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.getCoordinateSystemDimensions(this.get('coordinateSystem')) || ['x', 'y'];
          {
              if (coordSysDimensions.length > 2) {
                  throw new Error('flowGL can only be used on 2d coordinate systems.')
              }
          }
          coordSysDimensions.push('vx', 'vy');
          var dimensions = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.helper.completeDimensions(coordSysDimensions, this.getSource(), {
              encodeDef: this.get('encode'),
              dimsDef: this.get('dimensions')
          });
          var data = new __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.List(dimensions, this);
          data.initData(this.getSource());
          return data;
      },

      defaultOption: {
          coordinateSystem: 'cartesian2d',
          zlevel: 10,

          supersampling: 1,
          // 128x128 particles
          particleType: 'point',

          particleDensity: 128,
          particleSize: 1,
          particleSpeed: 1,

          particleTrail: 2,

          colorTexture: null,

          gridWidth: 'auto',
          gridHeight: 'auto',

          itemStyle: {
              color: '#fff',
              opacity: 0.8
          }
      }
  });

  /***/ }),
  /* 285 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__linesGL_LinesGLSeries__ = __webpack_require__(286);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__linesGL_LinesGLView__ = __webpack_require__(287);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_opacityVisual__ = __webpack_require__(17);







  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.registerVisual(Object(__WEBPACK_IMPORTED_MODULE_3__common_opacityVisual__["a" /* default */])('linesGL'));

  /***/ }),
  /* 286 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_zrender_lib_core_util__ = __webpack_require__(80);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_zrender_lib_core_util___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_zrender_lib_core_util__);



  var LinesSeries = __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendSeriesModel({

      type: 'series.linesGL',

      dependencies: ['grid', 'geo'],

      visualColorAccessPath: 'lineStyle.color',

      streamEnabled: true,

      init: function (option) {
          var result = this._processFlatCoordsArray(option.data);
          this._flatCoords = result.flatCoords;
          this._flatCoordsOffset = result.flatCoordsOffset;
          if (result.flatCoords) {
              option.data = new Float32Array(result.count);
          }

          LinesSeries.superApply(this, 'init', arguments);
      },

      mergeOption: function (option) {
          var result = this._processFlatCoordsArray(option.data);
          this._flatCoords = result.flatCoords;
          this._flatCoordsOffset = result.flatCoordsOffset;
          if (result.flatCoords) {
              option.data = new Float32Array(result.count);
          }

          LinesSeries.superApply(this, 'mergeOption', arguments);
      },

      appendData: function (params) {
          var result = this._processFlatCoordsArray(params.data);
          if (result.flatCoords) {
              if (!this._flatCoords) {
                  this._flatCoords = result.flatCoords;
                  this._flatCoordsOffset = result.flatCoordsOffset;
              }
              else {
                  this._flatCoords = Object(__WEBPACK_IMPORTED_MODULE_1_zrender_lib_core_util__["concatArray"])(this._flatCoords, result.flatCoords);
                  this._flatCoordsOffset = Object(__WEBPACK_IMPORTED_MODULE_1_zrender_lib_core_util__["concatArray"])(this._flatCoordsOffset, result.flatCoordsOffset);
              }
              params.data = new Float32Array(result.count);
          }

          this.getRawData().appendData(params.data);
      },

      _getCoordsFromItemModel: function (idx) {
          var itemModel = this.getData().getItemModel(idx);
          var coords = (itemModel.option instanceof Array)
              ? itemModel.option : itemModel.getShallow('coords');

          {
              if (!(coords instanceof Array && coords.length > 0 && coords[0] instanceof Array)) {
                  throw new Error('Invalid coords ' + JSON.stringify(coords) + '. Lines must have 2d coords array in data item.');
              }
          }
          return coords;
      },

      getLineCoordsCount: function (idx) {
          if (this._flatCoordsOffset) {
              return this._flatCoordsOffset[idx * 2 + 1];
          }
          else {
              return this._getCoordsFromItemModel(idx).length;
          }
      },

      getLineCoords: function (idx, out) {
          if (this._flatCoordsOffset) {
              var offset = this._flatCoordsOffset[idx * 2];
              var len = this._flatCoordsOffset[idx * 2 + 1];
              for (var i = 0; i < len; i++) {
                  out[i] = out[i] || [];
                  out[i][0] = this._flatCoords[offset + i * 2];
                  out[i][1] = this._flatCoords[offset + i * 2 + 1];
              }
              return len;
          }
          else {
              var coords = this._getCoordsFromItemModel(idx);
              for (var i = 0; i < coords.length; i++) {
                  out[i] = out[i] || [];
                  out[i][0] = coords[i][0];
                  out[i][1] = coords[i][1];
              }
              return coords.length;
          }
      },

      _processFlatCoordsArray: function (data) {
          var startOffset = 0;
          if (this._flatCoords) {
              startOffset = this._flatCoords.length;
          }
          // Stored as a typed array. In format
          // Points Count(2) | x | y | x | y | Points Count(3) | x |  y | x | y | x | y |
          if (typeof data[0] === 'number') {
              var len = data.length;
              // Store offset and len of each segment
              var coordsOffsetAndLenStorage = new Uint32Array(len);
              var coordsStorage = new Float64Array(len);
              var coordsCursor = 0;
              var offsetCursor = 0;
              var dataCount = 0;
              for (var i = 0; i < len;) {
                  dataCount++;
                  var count = data[i++];
                  // Offset
                  coordsOffsetAndLenStorage[offsetCursor++] = coordsCursor + startOffset;
                  // Len
                  coordsOffsetAndLenStorage[offsetCursor++] = count;
                  for (var k = 0; k < count; k++) {
                      var x = data[i++];
                      var y = data[i++];
                      coordsStorage[coordsCursor++] = x;
                      coordsStorage[coordsCursor++] = y;

                      if (i > len) {
                          {
                              throw new Error('Invalid data format.');
                          }
                      }
                  }
              }

              return {
                  flatCoordsOffset: new Uint32Array(coordsOffsetAndLenStorage.buffer, 0, offsetCursor),
                  flatCoords: coordsStorage,
                  count: dataCount
              };
          }

          return {
              flatCoordsOffset: null,
              flatCoords: null,
              count: data.length
          };
      },

      getInitialData: function (option, ecModel) {
          var lineData = new __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.List(['value'], this);
          lineData.hasItemOption = false;

          lineData.initData(option.data, [], function (dataItem, dimName, dataIndex, dimIndex) {
              // dataItem is simply coords
              if (dataItem instanceof Array) {
                  return NaN;
              }
              else {
                  lineData.hasItemOption = true;
                  var value = dataItem.value;
                  if (value != null) {
                      return value instanceof Array ? value[dimIndex] : value;
                  }
              }
          });

          return lineData;
      },

      defaultOption: {
          coordinateSystem: 'geo',
          zlevel: 10,

          progressive: 1e4,
          progressiveThreshold: 5e4,

          // Cartesian coordinate system
          // xAxisIndex: 0,
          // yAxisIndex: 0,

          // Geo coordinate system
          // geoIndex: 0,

          // Support source-over, lighter
          blendMode: 'source-over',

          lineStyle: {
              opacity: 0.8
          },

          postEffect: {
              enable: false,
              colorCorrection: {
                  exposure: 0,
                  brightness: 0,
                  contrast: 1,
                  saturation: 1,
                  enable: true
              }
          }
      }
  });

  /***/ }),
  /* 287 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts__);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__ = __webpack_require__(1);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_ViewGL__ = __webpack_require__(22);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_geometry_Lines2D__ = __webpack_require__(104);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_GLViewHelper__ = __webpack_require__(102);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_retrieve__ = __webpack_require__(2);








  __WEBPACK_IMPORTED_MODULE_0_echarts_lib_echarts___default.a.extendChartView({

      type: 'linesGL',

      __ecgl__: true,

      init: function (ecModel, api) {
          this.groupGL = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Node();
          this.viewGL = new __WEBPACK_IMPORTED_MODULE_2__core_ViewGL__["a" /* default */]('orthographic');
          this.viewGL.add(this.groupGL);

          this._glViewHelper = new __WEBPACK_IMPORTED_MODULE_4__common_GLViewHelper__["a" /* default */](this.viewGL);

          this._nativeLinesShader = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].createShader('ecgl.lines3D');
          this._meshLinesShader = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].createShader('ecgl.meshLines3D');

          this._linesMeshes = [];
          this._currentStep = 0;
      },

      render: function (seriesModel, ecModel, api) {
          this.groupGL.removeAll();
          this._glViewHelper.reset(seriesModel, api);

          var linesMesh = this._linesMeshes[0];
          if (!linesMesh) {
              linesMesh = this._linesMeshes[0] = this._createLinesMesh(seriesModel);
          }
          this._linesMeshes.length = 1;

          this.groupGL.add(linesMesh);
          this._updateLinesMesh(seriesModel, linesMesh, 0, seriesModel.getData().count());

          this.viewGL.setPostEffect(seriesModel.getModel('postEffect'), api);
      },

      incrementalPrepareRender: function (seriesModel, ecModel, api) {
          this.groupGL.removeAll();
          this._glViewHelper.reset(seriesModel, api);

          this._currentStep = 0;

          this.viewGL.setPostEffect(seriesModel.getModel('postEffect'), api);
      },

      incrementalRender: function (params, seriesModel, ecModel, api) {
          var linesMesh = this._linesMeshes[this._currentStep];
          if (!linesMesh) {
              linesMesh = this._createLinesMesh(seriesModel);
              this._linesMeshes[this._currentStep] = linesMesh;
          }
          this._updateLinesMesh(seriesModel, linesMesh, params.start, params.end);
          this.groupGL.add(linesMesh);
          api.getZr().refresh();

          this._currentStep++;
      },

      updateTransform: function (seriesModel, ecModel, api) {
          if (seriesModel.coordinateSystem.getRoamTransform) {
              this._glViewHelper.updateTransform(seriesModel, api);
          }
      },

      _createLinesMesh: function (seriesModel) {
          var linesMesh = new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Mesh({
              $ignorePicking: true,
              material: new __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Material({
                  shader: __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].createShader('ecgl.lines3D'),
                  transparent: true,
                  depthMask: false,
                  depthTest: false
              }),
              geometry: new __WEBPACK_IMPORTED_MODULE_3__util_geometry_Lines2D__["a" /* default */]({
                  segmentScale: 10,
                  useNativeLine: true,
                  dynamic: false
              }),
              mode: __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Mesh.LINES,
              culling: false
          });

          return linesMesh;
      },

      _updateLinesMesh: function (seriesModel, linesMesh, start, end) {
          var data = seriesModel.getData();
          linesMesh.material.blend = seriesModel.get('blendMode') === 'lighter'
              ? __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].additiveBlend : null;
          var curveness = seriesModel.get('lineStyle.curveness') || 0;
          var isPolyline = seriesModel.get('polyline');
          var geometry = linesMesh.geometry;
          var coordSys = seriesModel.coordinateSystem;

          var lineWidth = __WEBPACK_IMPORTED_MODULE_5__util_retrieve__["a" /* default */].firstNotNull(seriesModel.get('lineStyle.width'), 1);

          if (lineWidth > 1) {
              if (linesMesh.material.shader !== this._meshLinesShader) {
                  linesMesh.material.attachShader(this._meshLinesShader);
              }
              linesMesh.mode = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Mesh.TRIANGLES;
          }
          else {
              if (linesMesh.material.shader !== this._nativeLinesShader) {
                  linesMesh.material.attachShader(this._nativeLinesShader);
              }
              linesMesh.mode = __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].Mesh.LINES;
          }

          start = start || 0;
          end = end || data.count();

          geometry.resetOffset();
          var vertexCount = 0;
          var triangleCount = 0;
          var p0 = [];
          var p1 = [];
          var p2 = [];
          var p3 = [];

          var lineCoords = [];

          var t = 0.3;
          var t2 = 0.7;

          function updateBezierControlPoints() {
              p1[0] = (p0[0] * t2 + p3[0] * t) - (p0[1] - p3[1]) * curveness;
              p1[1] = (p0[1] * t2 + p3[1] * t) - (p3[0] - p0[0]) * curveness;
              p2[0] = (p0[0] * t + p3[0] * t2) - (p0[1] - p3[1]) * curveness;
              p2[1] = (p0[1] * t + p3[1] * t2) - (p3[0] - p0[0]) * curveness;
          }
          if (isPolyline || curveness !== 0) {
              for (var idx = start; idx < end; idx++) {
                  if (isPolyline) {
                      var count = seriesModel.getLineCoordsCount(idx);
                      vertexCount += geometry.getPolylineVertexCount(count);
                      triangleCount += geometry.getPolylineTriangleCount(count);
                  }
                  else {
                      seriesModel.getLineCoords(idx, lineCoords);
                      this._glViewHelper.dataToPoint(coordSys, lineCoords[0], p0);
                      this._glViewHelper.dataToPoint(coordSys, lineCoords[1], p3);
                      updateBezierControlPoints();

                      vertexCount += geometry.getCubicCurveVertexCount(p0, p1, p2, p3);
                      triangleCount += geometry.getCubicCurveTriangleCount(p0, p1, p2, p3);
                  }
              }
          }
          else {
              var lineCount = end - start;
              vertexCount += lineCount * geometry.getLineVertexCount();
              triangleCount += lineCount * geometry.getLineVertexCount();
          }
          geometry.setVertexCount(vertexCount);
          geometry.setTriangleCount(triangleCount);

          var dataIndex = start;
          var colorArr = [];
          for (var idx = start; idx < end; idx++) {
              __WEBPACK_IMPORTED_MODULE_1__util_graphicGL__["a" /* default */].parseColor(data.getItemVisual(dataIndex, 'color'), colorArr);
              var opacity = __WEBPACK_IMPORTED_MODULE_5__util_retrieve__["a" /* default */].firstNotNull(data.getItemVisual(dataIndex, 'opacity'), 1);
              colorArr[3] *= opacity;

              var count = seriesModel.getLineCoords(idx, lineCoords);
              for (var k = 0; k < count; k++) {
                  this._glViewHelper.dataToPoint(coordSys, lineCoords[k], lineCoords[k]);
              }

              if (isPolyline) {
                  geometry.addPolyline(lineCoords, colorArr, lineWidth, 0, count);
              }
              else if (curveness !== 0) {
                  p0 = lineCoords[0];
                  p3 = lineCoords[1];
                  updateBezierControlPoints();
                  geometry.addCubicCurve(p0, p1, p2, p3, colorArr, lineWidth);
              }
              else {
                  geometry.addPolyline(lineCoords, colorArr, lineWidth, 0, 2);
              }
              dataIndex++;
          }
      },

      dispose: function () {
          this.groupGL.removeAll();
      },

      remove: function () {
          this.groupGL.removeAll();
      }
  });

  /***/ })
  /******/ ]);
  });
  });

  unwrapExports(echartsGl);

  var ROOT_PATH = './';
  var script$j = {
    name: 'RotatingEarth',
    setup: function setup() {
      var options = vue.ref({});

      var update = function update() {
        options.value = {
          globe: {
            baseTexture: "".concat(ROOT_PATH, "assets/datav-gl-texture.jpg"),
            //基础纹理贴图
            environment: "".concat(ROOT_PATH, "assets/star-bg.jpg") //环境贴图

          }
        };
      };

      vue.onMounted(update);
      return {
        options: options
      };
    }
  };

  var _withId$h = /*#__PURE__*/vue.withScopeId("data-v-1bc047b5");

  vue.pushScopeId("data-v-1bc047b5");

  var _hoisted_1$f = {
    "class": "rotating-earth"
  };

  vue.popScopeId();

  var render$j = /*#__PURE__*/_withId$h(function (_ctx, _cache, $props, $setup, $data, $options) {
    var _component_VueEcharts = vue.resolveComponent("VueEcharts");

    return vue.openBlock(), vue.createBlock("div", _hoisted_1$f, [vue.createVNode(_component_VueEcharts, {
      options: $setup.options
    }, null, 8
    /* PROPS */
    , ["options"])]);
  });

  var css_248z$i = ".rotating-earth[data-v-1bc047b5] {\n  width: 100%;\n  height: 100%;\n}";
  styleInject(css_248z$i);

  script$j.render = render$j;
  script$j.__scopeId = "data-v-1bc047b5";
  script$j.__file = "src/components/RotatingEarth/RotatingEarth.vue";

  function RotatingEarth (Vue) {
    Vue.component(script$j.name, script$j);
  }

  function index (Vue) {
    Vue.use(Loading);
    Vue.use(flybox);
    Vue.use(container);
    Vue.use(topHeader);
    Vue.use(headerLogo);
    Vue.use(TotalUser);
    Vue.use(VueCountTo);
    Vue.use(AverageAge);
    Vue.use(Echarts);
    Vue.use(TotalDevice);
    Vue.use(TotalGender);
    Vue.use(TotalRider);
    Vue.use(HotCategory);
    Vue.use(CenterHeader);
    Vue.use(TransformCategory);
    Vue.use(SalesList);
    Vue.use(SalesList);
    Vue.use(TimeLine);
    Vue.use(CustomMap);
    Vue.use(RotatingEarth);
  }

  return index;

})));
